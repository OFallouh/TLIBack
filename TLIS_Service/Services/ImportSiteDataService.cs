using Castle.Core.Internal;
using LinqToExcel;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Nancy;
using NLog.Fluent;
using System.IO;
using OfficeOpenXml;
using OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering;
using Oracle.ManagedDataAccess.Client;
using Org.BouncyCastle.Asn1.X509;
using Org.BouncyCastle.Utilities.Zlib;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Linq;
using System.Data.OleDb;
using System.Globalization;
using System.Linq;
using System.Numerics;
using System.Security.Policy;
using System.Text;
using System.Text.RegularExpressions;
using System.Transactions;
using System.Xml.Linq;
using TLIS_DAL;
using TLIS_DAL.Helper.Filters;
using TLIS_DAL.Helpers;
using TLIS_DAL.Models;
using TLIS_DAL.ViewModels.CivilLoadsDTOs;
using TLIS_DAL.ViewModels.ComplixFilter;
using TLIS_DAL.ViewModels.ImportSheetDtos;
using TLIS_DAL.ViewModels.SiteDTOs;
using TLIS_Repository.Base;
using TLIS_Service.IService;
using static System.Net.WebRequestMethods;
using Microsoft.AspNetCore.Hosting;
using System.Reflection;
using AutoMapper;
using Microsoft.IdentityModel.Tokens;
using Microsoft.VisualBasic.FileIO;
using Microsoft.AspNetCore.Routing;

namespace TLIS_Service.Services
{
    class ImportSiteDataService : IImportSiteDataService
    {
        private readonly IUnitOfWork _unitOfWork;
        IServiceCollection _services;
        IConfiguration _Config;
        private readonly IHostingEnvironment _hostingEnvironment;
        private ApplicationDbContext db;
        private IMapper _mapper;
        public ImportSiteDataService(IUnitOfWork unitOfWork, IServiceCollection services, IConfiguration Config, ApplicationDbContext _ApplicationDbContext,
            IHostingEnvironment hostingEnvironment, IMapper mapper)
        {
            _unitOfWork = unitOfWork;
            _services = services;
            _Config = Config;
            db = _ApplicationDbContext;
            _hostingEnvironment = hostingEnvironment;
            ServiceProvider serviceProvider = _services.BuildServiceProvider();
            _mapper = mapper;
        }
        public Response<string> ImportSiteData(IFormFile File)
        {
            string FilePath = SaveFileAndGetFilePath(File);

            try
            {
                FileInfo existingFile = new FileInfo(FilePath);
                ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

                using (ExcelPackage package = new ExcelPackage(existingFile))
                {
                    float FloatParser = 0;
                    bool CheckParser = false;

                    ExcelWorksheet SiteSheet = package.Workbook.Worksheets.FirstOrDefault(x => x.Name.ToLower() == "Sites".ToLower());
                    int SiteRows = 0;
                    try
                    {
                        SiteRows = SiteSheet.Dimension.End.Row;
                    }
                    catch (NullReferenceException err)
                    {
                        System.IO.File.Delete(FilePath);
                        return new Response<string>(err.Message);
                    }

                    int SiteColumns = SiteSheet.Dimension.End.Column;

                    DataTable SiteDataTable = new DataTable();
                    List<string> SiteSheetColumn = new List<string>();

                    for (int i = 1; i <= SiteColumns; i++)
                    {
                        string ColName = SiteSheet.Cells[1, i].Value.ToString().Trim();
                        ColName = Regex.Replace(ColName, @"\s+", " ");
                        SiteSheetColumn.Add(ColName);
                        SiteDataTable.Columns.Add(ColName);
                    }

                    for (int i = 2; i <= SiteRows; i++)
                    {
                        DataRow SiteDataRow = SiteDataTable.NewRow();
                        for (int j = 1; j <= SiteColumns; j++)
                        {
                            string ColName = SiteSheet.Cells[1, j].Value.ToString().Trim();
                            ColName = Regex.Replace(ColName, @"\s+", " ");

                            object Value = SiteSheet.Cells[i, j].Value;
                            if (Value != null)
                            {
                                string ValueAsString = Value.ToString().Trim();
                                ValueAsString = Regex.Replace(ValueAsString, @"\s+", " ");
                                Value = ValueAsString;
                                SiteDataRow[ColName] = Value;
                            }
                            else
                            {
                                SiteDataRow[ColName] = Value;
                            }
                        }
                        SiteDataTable.Rows.Add(SiteDataRow);
                    }

                    List<TLIsite> AllSitesInTLIS = _unitOfWork.SiteRepository
                        .GetWhere(x => !string.IsNullOrEmpty(x.SiteCode) && !string.IsNullOrEmpty(x.SiteName)).ToList();
                    List<TLIsiteStatus> AllSiteStatusInTLIS = _unitOfWork.SiteStatusRepository.
                        GetWhere(x => !x.Deleted && !string.IsNullOrEmpty(x.Name)).ToList();
                    List<TLIregion> AllRegionsInTLIS = _unitOfWork.RegionRepository.
                        GetWhere(x => !string.IsNullOrEmpty(x.RegionName) && !string.IsNullOrEmpty(x.RegionCode)).ToList();
                    List<TLIarea> AllAreasInTLIS = _unitOfWork.AreaRepository.
                        GetWhere(x => !string.IsNullOrEmpty(x.AreaName)).ToList();

                    for (int j = 0; j <= SiteDataTable.Rows.Count - 1; j++)
                    {
                        using (TransactionScope SiteTransaction = new TransactionScope(TransactionScopeOption.Required,
                            new TimeSpan(0, 15, 0)))
                        {
                            TLIsite NewSite = new TLIsite();

                            string SiteCode = SiteDataTable.Rows[j]["SiteCode"].ToString();

                            if (string.IsNullOrEmpty(SiteCode))
                            {
                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                {
                                    CreatedAt = DateTime.Now,
                                    ErrMsg = $"(SiteCode) coulumn's value can't be null or empty",
                                    IsDeleted = false,
                                    IsLib = false,
                                    RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                    SheetName = "Sites",
                                    UniqueName = $"(SiteCode) : ({SiteCode})"
                                };

                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                _unitOfWork.SaveChanges();

                                SiteTransaction.Complete();

                                continue;
                            }

                            bool CheckSiteCode = AllSitesInTLIS.Any(x => x.SiteCode.ToLower() == SiteCode.ToLower());
                            if (CheckSiteCode)
                            {
                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                {
                                    CreatedAt = DateTime.Now,
                                    ErrMsg = $"(SiteCode) coulumn's value: ({SiteCode}) is already exist in TLIS",
                                    IsDeleted = false,
                                    IsLib = false,
                                    RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                    SheetName = "Sites",
                                    UniqueName = $"(SiteCode) : ({SiteCode})"
                                };

                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                _unitOfWork.SaveChanges();

                                SiteTransaction.Complete();

                                continue;
                            }

                            string SiteName = SiteDataTable.Rows[j]["SiteName"].ToString();
                            if (string.IsNullOrEmpty(SiteName))
                            {
                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                {
                                    CreatedAt = DateTime.Now,
                                    ErrMsg = $"(SiteName) coulumn's value can't be null or empty",
                                    IsDeleted = false,
                                    IsLib = false,
                                    RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                    SheetName = "Sites",
                                    UniqueName = $"(SiteCode) : ({SiteCode})"
                                };

                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                _unitOfWork.SaveChanges();

                                SiteTransaction.Complete();

                                continue;
                            }

                            bool CheckSiteName = AllSitesInTLIS.Any(x => x.SiteName.ToLower() == SiteName.ToLower());
                            if (CheckSiteName)
                            {
                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                {
                                    CreatedAt = DateTime.Now,
                                    ErrMsg = $"(SiteName) coulumn's value: ({SiteName}) is already exist in TLIS",
                                    IsDeleted = false,
                                    IsLib = false,
                                    RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                    SheetName = "Sites",
                                    UniqueName = $"(SiteCode) : ({SiteCode})"
                                };

                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                _unitOfWork.SaveChanges();

                                SiteTransaction.Complete();

                                continue;
                            }

                            NewSite.SiteName = SiteName;
                            NewSite.SiteCode = SiteCode;
                            NewSite.LocationType = SiteDataTable.Rows[j]["LocationType"].ToString();
                            NewSite.Zone = SiteDataTable.Rows[j]["Zone"].ToString();
                            NewSite.SubArea = SiteDataTable.Rows[j]["SubArea"].ToString();
                            NewSite.STATUS_DATE = SiteDataTable.Rows[j]["STATUS_DATE"].ToString();
                            NewSite.CREATE_DATE = SiteDataTable.Rows[j]["CREATE_DATE"].ToString();

                            string LocationHieght = SiteDataTable.Rows[j]["LocationHieght"].ToString();
                            if (!string.IsNullOrEmpty(LocationHieght))
                            {
                                CheckParser = float.TryParse(LocationHieght, out FloatParser);

                                if (CheckParser)
                                    NewSite.LocationHieght = FloatParser;

                                else
                                {
                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                    {
                                        CreatedAt = DateTime.Now,
                                        ErrMsg = $"(LocationHieght) coulumn's value must be a number",
                                        IsDeleted = false,
                                        IsLib = false,
                                        RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                        SheetName = "Sites",
                                        UniqueName = $"(SiteCode) : ({SiteCode})"
                                    };

                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                    _unitOfWork.SaveChanges();

                                    SiteTransaction.Complete();

                                    continue;
                                }
                            }

                            string Latitude = SiteDataTable.Rows[j]["Latitude"].ToString();
                            if (!string.IsNullOrEmpty(Latitude))
                            {
                                CheckParser = float.TryParse(Latitude, out FloatParser);

                                if (CheckParser)
                                    NewSite.Latitude = FloatParser;

                                else
                                {
                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                    {
                                        CreatedAt = DateTime.Now,
                                        ErrMsg = $"(Latitude) coulumn's value must be a number",
                                        IsDeleted = false,
                                        IsLib = false,
                                        RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                        SheetName = "Sites",
                                        UniqueName = $"(SiteCode) : ({SiteCode})"
                                    };

                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                    _unitOfWork.SaveChanges();

                                    SiteTransaction.Complete();

                                    continue;
                                }
                            }

                            string Longitude = SiteDataTable.Rows[j]["Longitude"].ToString();
                            if (!string.IsNullOrEmpty(Longitude))
                            {
                                CheckParser = float.TryParse(Longitude, out FloatParser);

                                if (CheckParser)
                                    NewSite.Longitude = FloatParser;

                                else
                                {
                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                    {
                                        CreatedAt = DateTime.Now,
                                        ErrMsg = $"(Longitude) coulumn's value must be a number",
                                        IsDeleted = false,
                                        IsLib = false,
                                        RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                        SheetName = "Sites",
                                        UniqueName = $"(SiteCode) : ({SiteCode})"
                                    };

                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                    _unitOfWork.SaveChanges();

                                    SiteTransaction.Complete();

                                    continue;
                                }
                            }

                            string RentedSpace = SiteDataTable.Rows[j]["RentedSpace"].ToString();
                            if (!string.IsNullOrEmpty(RentedSpace))
                            {
                                CheckParser = float.TryParse(RentedSpace, out FloatParser);

                                if (CheckParser)
                                    NewSite.RentedSpace = FloatParser;

                                else
                                {
                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                    {
                                        CreatedAt = DateTime.Now,
                                        ErrMsg = $"(RentedSpace) coulumn's value must be a number",
                                        IsDeleted = false,
                                        IsLib = false,
                                        RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                        SheetName = "Sites",
                                        UniqueName = $"(SiteCode) : ({SiteCode})"
                                    };

                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                    _unitOfWork.SaveChanges();

                                    SiteTransaction.Complete();

                                    continue;
                                }
                            }

                            string ReservedSpace = SiteDataTable.Rows[j]["ReservedSpace"].ToString();
                            if (!string.IsNullOrEmpty(ReservedSpace))
                            {
                                CheckParser = float.TryParse(ReservedSpace, out FloatParser);

                                if (CheckParser)
                                    NewSite.ReservedSpace = FloatParser;

                                else
                                {
                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                    {
                                        CreatedAt = DateTime.Now,
                                        ErrMsg = $"(ReservedSpace) coulumn's value must be a number",
                                        IsDeleted = false,
                                        IsLib = false,
                                        RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                        SheetName = "Sites",
                                        UniqueName = $"(SiteCode) : ({SiteCode})"
                                    };

                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                    _unitOfWork.SaveChanges();

                                    SiteTransaction.Complete();

                                    continue;
                                }
                            }

                            // DateTime
                            string SiteVisiteDate = SiteDataTable.Rows[j]["SiteVisiteDate"].ToString();
                            if (!string.IsNullOrEmpty(SiteVisiteDate))
                            {
                                DateTime DateTimeParser = DateTime.Now;
                                bool DateTimeCheckParser = DateTime.TryParse(SiteVisiteDate, out DateTimeParser);

                                if (DateTimeCheckParser)
                                    NewSite.SiteVisiteDate = DateTimeParser;

                                else
                                {
                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                    {
                                        CreatedAt = DateTime.Now,
                                        ErrMsg = $"(SiteVisiteDate) coulumn's value must be a date",
                                        IsDeleted = false,
                                        IsLib = false,
                                        RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                        SheetName = "Sites",
                                        UniqueName = $"(SiteCode) : ({SiteCode})"
                                    };

                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                    _unitOfWork.SaveChanges();

                                    SiteTransaction.Complete();

                                    continue;
                                }
                            }

                            // Forieng Keys
                            string siteStatusId = SiteDataTable.Rows[j]["siteStatus"].ToString();
                            if (!string.IsNullOrEmpty(siteStatusId))
                            {
                                TLIsiteStatus ChecksiteStatusId = AllSiteStatusInTLIS
                                    .FirstOrDefault(x => x.Name.ToLower() == siteStatusId.ToLower());

                                if (ChecksiteStatusId != null)
                                {
                                    NewSite.siteStatusId = ChecksiteStatusId.Id;
                                }
                                else
                                {
                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                    {
                                        CreatedAt = DateTime.Now,
                                        ErrMsg = $"(siteStatus) coulumn's value: ({siteStatusId}) doesn't exist in TLIS",
                                        IsDeleted = false,
                                        IsLib = false,
                                        RefTable = Helpers.Constants.TablesNames.TLIsiteStatus.ToString(),
                                        SheetName = "Sites",
                                        UniqueName = $"(SiteCode) : ({SiteCode})"
                                    };

                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                    _unitOfWork.SaveChanges();

                                    SiteTransaction.Complete();

                                    continue;
                                }
                            }
                            else
                            {
                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                {
                                    CreatedAt = DateTime.Now,
                                    ErrMsg = $"(siteStatus) coulumn's value can't be null or empty",
                                    IsDeleted = false,
                                    IsLib = false,
                                    RefTable = Helpers.Constants.TablesNames.TLIsiteStatus.ToString(),
                                    SheetName = "Sites",
                                    UniqueName = $"(SiteCode) : ({SiteCode})"
                                };

                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                _unitOfWork.SaveChanges();

                                SiteTransaction.Complete();

                                continue;
                            }
                            string RegionCode = SiteDataTable.Rows[j]["RegionCode"].ToString();
                            if (!string.IsNullOrEmpty(RegionCode))
                            {
                                bool CheckRegionCode = AllRegionsInTLIS.Any(x => x.RegionCode.ToLower() == RegionCode.ToLower());
                                if (CheckRegionCode)
                                {
                                    NewSite.RegionCode = RegionCode;
                                }
                                else
                                {
                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                    {
                                        CreatedAt = DateTime.Now,
                                        ErrMsg = $"(RegionCode) coulumn's value: ({RegionCode}) doesn't exist in TLIS",
                                        IsDeleted = false,
                                        IsLib = false,
                                        RefTable = Helpers.Constants.TablesNames.TLIregion.ToString(),
                                        SheetName = "Sites",
                                        UniqueName = $"(SiteCode) : ({SiteCode})"
                                    };

                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                    _unitOfWork.SaveChanges();

                                    SiteTransaction.Complete();

                                    continue;
                                }
                            }
                            else
                            {
                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                {
                                    CreatedAt = DateTime.Now,
                                    ErrMsg = $"(RegionCode) coulumn's value can't be null or empty",
                                    IsDeleted = false,
                                    IsLib = false,
                                    RefTable = Helpers.Constants.TablesNames.TLIregion.ToString(),
                                    SheetName = "Sites",
                                    UniqueName = $"(SiteCode) : ({SiteCode})"
                                };

                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                _unitOfWork.SaveChanges();

                                SiteTransaction.Complete();

                                continue;
                            }
                            string AreaId = SiteDataTable.Rows[j]["Area"].ToString();
                            if (!string.IsNullOrEmpty(AreaId))
                            {
                                TLIarea CheckAreaId = AllAreasInTLIS.FirstOrDefault(x => x.AreaName.ToLower() == AreaId.ToLower());
                                if (CheckAreaId != null)
                                {
                                    NewSite.AreaId = CheckAreaId.Id;
                                }
                                else
                                {
                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                    {
                                        CreatedAt = DateTime.Now,
                                        ErrMsg = $"(Area) coulumn's value: ({AreaId}) doesn't exist in TLIS",
                                        IsDeleted = false,
                                        IsLib = false,
                                        RefTable = Helpers.Constants.TablesNames.TLIarea.ToString(),
                                        SheetName = "Sites",
                                        UniqueName = $"(SiteCode) : ({SiteCode})"
                                    };

                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                    _unitOfWork.SaveChanges();

                                    SiteTransaction.Complete();

                                    continue;
                                }
                            }
                            else
                            {
                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                {
                                    CreatedAt = DateTime.Now,
                                    ErrMsg = $"(Area) coulumn's value can't be null or empty",
                                    IsDeleted = false,
                                    IsLib = false,
                                    RefTable = Helpers.Constants.TablesNames.TLIarea.ToString(),
                                    SheetName = "Sites",
                                    UniqueName = $"(SiteCode) : ({SiteCode})"
                                };

                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                _unitOfWork.SaveChanges();

                                SiteTransaction.Complete();

                                continue;
                            }
                            _unitOfWork.SiteRepository.Add(NewSite);
                            SiteService._MySites.Add(NewSite);

                            _unitOfWork.SaveChanges();

                            SiteTransaction.Complete();
                        }
                    }

                    return new Response<string>("Succeed");
                }
            }
            catch (Exception err)
            {
                System.IO.File.Delete(FilePath);
                return new Response<string>(err.Message);
            }
        }
        public Response<string> ImportFileData(IFormFile file)
        {

            try
            {
                ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
                ExcelPackage pck = new ExcelPackage();
                string filePath = SaveFile(file);

                var siteAdapter = new OleDbDataAdapter("SELECT * FROM [Select t_site_geoinfo$]", filePath);
                var siteDS = new DataSet();

                siteAdapter.Fill(siteDS, "ExcelTable");

                DataTable siteDtable = siteDS.Tables["ExcelTable"];

                // string Resultstring = "successed";              
                int siteStatusId = 0;
                string Area = "";
                string Region = "";

                List<SiteValidation> siteCodeList = _unitOfWork.SiteRepository.GetAllAsQueryable().Select(x => new SiteValidation(x.SiteCode, x.SiteName)).ToList();
                string sitecode;
                string siteName;
                int rowNumber = 0;
                string ErrorMesg = "";
                foreach (DataRow row in siteDtable.Rows)
                {
                    rowNumber++;
                    if (row["SITE_CODE"].ToString() != "")
                    {
                        TLIsite site = new TLIsite();
                        sitecode = row["SITE_CODE"].ToString();
                        siteName = row["SITE_NAME"].ToString();
                        if (siteCodeList.Any(x => x.SiteCode == sitecode) || siteCodeList.Any(x => x.SiteName == siteName))
                        {
                            ErrorMesg += "row number " + rowNumber + " is dublicated ";
                            continue;
                        }

                        site.SiteCode = sitecode;
                        site.SiteName = siteName;
                        #region AddSiteStatus
                        string siteStatus = row["SITE_STATUS"].ToString();


                        TLIsiteStatus siteStatusexiste = _unitOfWork.SiteStatusRepository.GetWhereFirst(x => x.Name == siteStatus);
                        if (siteStatusexiste != null)
                        {
                            siteStatusId = siteStatusexiste.Id;
                        }
                        else
                        {
                            TLIsiteStatus newSiteStatus = new TLIsiteStatus();
                            newSiteStatus.Name = siteStatus;
                            _unitOfWork.SiteStatusRepository.Add(newSiteStatus);
                            _unitOfWork.SaveChanges();
                            siteStatusId = newSiteStatus.Id;
                        }


                        #endregion
                        site.siteStatusId = siteStatusId;

                        #region Add Area
                        Area = row["AREA"].ToString();
                        int AreaId = 0;
                        TLIarea areaExiste = _unitOfWork.AreaRepository.GetWhereFirst(x => x.AreaName == Area);

                        if (areaExiste != null)
                        {
                            AreaId = areaExiste.Id;
                        }
                        else
                        {
                            TLIarea NewArea = new TLIarea();
                            NewArea.AreaName = Area;
                            _unitOfWork.AreaRepository.Add(NewArea);
                            _unitOfWork.SaveChanges();
                            AreaId = NewArea.Id;
                        }
                        #endregion

                        //check on region code
                        Region = row["REGION"].ToString();
                        string RegionCode = null;
                        TLIregion regionExiste = _unitOfWork.RegionRepository.GetWhereFirst(x => x.RegionName == Region);

                        if (regionExiste != null)
                        {
                            RegionCode = regionExiste.RegionCode;
                        }
                        else
                        {
                            TLIregion NewRegion = new TLIregion();
                            NewRegion.RegionName = Region;
                            _unitOfWork.RegionRepository.Add(NewRegion);
                            _unitOfWork.SaveChanges();
                            RegionCode = NewRegion.RegionCode;
                        }

                        //--------------------
                        site.AreaId = AreaId;
                        site.LocationType = "test";

                        site.ReservedSpace = 0;
                        site.LocationHieght = 0;
                        site.Latitude = float.Parse(row["LATITUDE"].ToString());
                        site.Longitude = float.Parse(row["LONGITUDE"].ToString());
                        site.Zone = row["ZONE"].ToString();
                        site.SubArea = row["SUBAREA"].ToString();
                        // site.Region = row["REGION"].ToString();

                        site.RentedSpace = 0;



                        _unitOfWork.SiteRepository.Add(site);
                        SiteService._MySites.Add(site);

                        siteCodeList.Add(new SiteValidation(sitecode, siteName));
                        _unitOfWork.SaveChanges();
                    }
                    else
                    {
                        break;
                    }

                }

                _unitOfWork.SaveChanges();
                if (ErrorMesg != "")
                    return new Response<string>(ErrorMesg + rowNumber.ToString());
                return new Response<string>(ErrorMesg + rowNumber);
                //  return new Response<string>(Resultstring);
            }
            catch (Exception err)
            {

                return new Response<string>(true, null, null, err.Message, (int)Helpers.Constants.ApiReturnCode.fail);
            }
        }
        private string SaveFileAndGetFilePath(IFormFile file)
        {
            // var path = Directory.GetCurrentDirectory();
            var path = _Config["CSVFiles"];

            if (Directory.Exists(path) == false)
            {
                Directory.CreateDirectory(path);
            }
            var FilePath = Path.Combine(path, file.FileName);
            if (System.IO.File.Exists(FilePath) == true)
            {
                System.IO.File.Delete(FilePath);
            }
            using (var stream = new FileStream(FilePath, FileMode.Create))
            {
                file.CopyTo(stream);
            }
            return FilePath;
        }
        public Response<string> ImportLibraryFileData2(IFormFile File, string ConnectionString)
        {
            List<TLIdataType> DataTypes = _unitOfWork.DataTypeRepository.GetAllWithoutCount().ToList();
            List<TLItablesNames> TablesNames = _unitOfWork.TablesNamesRepository.GetAllWithoutCount().ToList();

            using (var connection = new OracleConnection(ConnectionString))
            {
                connection.Open();
                List<KeyValuePair<int, string>> UnsavedRows = new List<KeyValuePair<int, string>>();

                var FilePath = SaveFileAndGetFilePath(File);

                try
                {
                    FileInfo existingFile = new FileInfo(FilePath);
                    ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {
                        float FloatParser = 0;
                        bool CheckParser = false;

                        ////////////////////////////////////////////////////////////
                        ///////////////////////// Side Arm /////////////////////////
                        ////////////////////////////////////////////////////////////

                        ExcelWorksheet SideArmSheet = package.Workbook.Worksheets.FirstOrDefault(x => x.Name.ToLower() == "Side Arm".ToLower());
                        int SideArmRows = 0;
                        DataTable SideArmDataTable = new DataTable();

                        try
                        {
                            SideArmRows = SideArmSheet.Dimension.End.Row;
                        }
                        catch (NullReferenceException)
                        {
                            goto Mast;
                        }
                        int SideArmColumns = SideArmSheet.Dimension.End.Column;

                        List<string> SideArmSheetColumn = new List<string>();

                        for (int i = 1; i <= SideArmColumns; i++)
                        {
                            string ColName = SideArmSheet.Cells[1, i].Value.ToString().Trim();
                            ColName = Regex.Replace(ColName, @"\s+", " ");
                            SideArmSheetColumn.Add(ColName);
                            SideArmDataTable.Columns.Add(ColName);
                        }

                        for (int i = 2; i <= SideArmRows; i++)
                        {
                            DataRow SideArmDataRow = SideArmDataTable.NewRow();
                            for (int j = 1; j <= SideArmColumns; j++)
                            {
                                string ColName = SideArmSheet.Cells[1, j].Value.ToString().Trim();
                                ColName = Regex.Replace(ColName, @"\s+", " ");

                                object Value = SideArmSheet.Cells[i, j].Value;
                                if (Value != null)
                                {
                                    string ValueAsString = Value.ToString().Trim();
                                    ValueAsString = Regex.Replace(ValueAsString, @"\s+", " ");
                                    Value = ValueAsString;
                                    SideArmDataRow[ColName] = Value;
                                }
                                else
                                {
                                    SideArmDataRow[ColName] = Value;
                                }
                            }
                            SideArmDataTable.Rows.Add(SideArmDataRow);
                        }

                        for (int j = 0; j <= SideArmDataTable.Rows.Count - 1; j++)
                        {
                            using (TransactionScope SideArmTransaction = new TransactionScope(TransactionScopeOption.Required,
                                new System.TimeSpan(0, 15, 0)))
                            {
                                try
                                {
                                    string SideArmModel = SideArmDataTable.Rows[j]["SIDE_ARM_SPECS_TYPE"].ToString();

                                    TLIsideArmLibrary NewSideArmLibraryEntity = new TLIsideArmLibrary();

                                    if (!string.IsNullOrEmpty(SideArmModel))
                                    {
                                        TLIsideArmLibrary CheckSideArmModelIfExist = _unitOfWork.SideArmLibraryRepository
                                            .GetWhereFirst(x => x.Model.ToLower() == SideArmModel.ToLower() && !x.Deleted);

                                        if (CheckSideArmModelIfExist != null)
                                        {
                                            SideArmTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(SIDE_ARM_SPECS_TYPE) coulumn's value: ({SideArmModel}) is already exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = true,
                                                RefTable = Helpers.Constants.TablesNames.TLIsideArmLibrary.ToString(),
                                                SheetName = "Side Arm",
                                                UniqueName = $"(SIDE_ARM_SPECS_TYPE) : ({SideArmModel})"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        NewSideArmLibraryEntity.Model = SideArmDataTable.Rows[j]["SIDE_ARM_SPECS_TYPE"].ToString();
                                        NewSideArmLibraryEntity.Note = SideArmDataTable.Rows[j]["NOTE"].ToString();
                                        NewSideArmLibraryEntity.Height = 0;
                                        NewSideArmLibraryEntity.Deleted = false;
                                        NewSideArmLibraryEntity.Active = true;

                                        string CSVSideArmWidth = SideArmDataTable.Rows[j]["weidth"].ToString();
                                        if (!string.IsNullOrEmpty(CSVSideArmWidth))
                                        {
                                            CheckParser = float.TryParse(CSVSideArmWidth, out FloatParser);

                                            if (CheckParser)
                                                NewSideArmLibraryEntity.Width = FloatParser;

                                            else
                                            {
                                                SideArmTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(weidth) coulumn's value: ({CSVSideArmWidth}) must be a number",
                                                    IsDeleted = false,
                                                    IsLib = true,
                                                    RefTable = Helpers.Constants.TablesNames.TLIsideArmLibrary.ToString(),
                                                    SheetName = "Side Arm",
                                                    UniqueName = $"(SIDE_ARM_SPECS_TYPE) : ({SideArmModel})"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                        else
                                            NewSideArmLibraryEntity.Width = 0;

                                        string CSVSideArmLength = SideArmDataTable.Rows[j]["LENGTH"].ToString();
                                        if (!string.IsNullOrEmpty(CSVSideArmLength))
                                        {
                                            CheckParser = float.TryParse(CSVSideArmLength, out FloatParser);

                                            if (CheckParser)
                                                NewSideArmLibraryEntity.Length = FloatParser;

                                            else
                                            {
                                                SideArmTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(LENGTH) coulumn's value: ({CSVSideArmLength}) must be a number",
                                                    IsDeleted = false,
                                                    IsLib = true,
                                                    RefTable = Helpers.Constants.TablesNames.TLIsideArmLibrary.ToString(),
                                                    SheetName = "Side Arm",
                                                    UniqueName = $"(SIDE_ARM_SPECS_TYPE) : ({SideArmModel})"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                        else
                                            NewSideArmLibraryEntity.Length = 0;

                                        string CSVSideArmWeight = SideArmDataTable.Rows[j]["weight"].ToString();
                                        if (!string.IsNullOrEmpty(CSVSideArmWeight))
                                        {
                                            CheckParser = float.TryParse(CSVSideArmWeight, out FloatParser);

                                            if (CheckParser)
                                                NewSideArmLibraryEntity.Weight = FloatParser;

                                            else
                                            {
                                                SideArmTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(weight) coulumn's value: ({CSVSideArmWeight}) must be a number",
                                                    IsDeleted = false,
                                                    IsLib = true,
                                                    RefTable = Helpers.Constants.TablesNames.TLIsideArmLibrary.ToString(),
                                                    SheetName = "Side Arm",
                                                    UniqueName = $"(SIDE_ARM_SPECS_TYPE) : ({SideArmModel})"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                        else
                                            NewSideArmLibraryEntity.Weight = 0;

                                        NewSideArmLibraryEntity.SpaceLibrary = NewSideArmLibraryEntity.Length * NewSideArmLibraryEntity.Width;

                                        _unitOfWork.SideArmLibraryRepository.Add(NewSideArmLibraryEntity);
                                        _unitOfWork.SaveChanges();
                                    }
                                    else
                                    {
                                        SideArmTransaction.Dispose();
                                        continue;
                                    }

                                    SideArmTransaction.Complete();

                                    //  SideArmLibraryService._SideArmLibraryEntities.Add(NewSideArmLibraryEntity);
                                }
                                catch (Exception err)
                                {
                                    SideArmTransaction.Dispose();

                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                    {
                                        CreatedAt = DateTime.Now,
                                        ErrMsg = err.Message,
                                        IsDeleted = false,
                                        IsLib = true,
                                        RefTable = Helpers.Constants.TablesNames.TLIsideArmLibrary.ToString(),
                                        SheetName = "Side Arm",
                                        UniqueName = $"(SIDE_ARM_SPECS_TYPE) : ({SideArmDataTable.Rows[j]["SIDE_ARM_SPECS_TYPE"]})"
                                    };

                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                    _unitOfWork.SaveChanges();

                                    continue;
                                }
                            }
                        }

                    ////////////////////////////////////////////////////////////
                    ///////////////////////// Mast /////////////////////////////
                    ////////////////////////////////////////////////////////////

                    Mast:

                        string MastCategroyName = Helpers.Constants.CivilWithoutLegCategories.Mast.ToString();

                        ExcelWorksheet MastSheet = package.Workbook.Worksheets.FirstOrDefault(x => x.Name.ToLower() == "Mast".ToLower());
                        int MastRows = 0;
                        try
                        {
                            MastRows = MastSheet.Dimension.End.Row;
                        }
                        catch (NullReferenceException)
                        {
                            goto MW_ODU;
                        }
                        int MastColumns = MastSheet.Dimension.End.Column;

                        DataTable MastDataTable = new DataTable();
                        List<string> MastSheetColumn = new List<string>();

                        for (int i = 1; i <= MastColumns; i++)
                        {
                            string ColName = MastSheet.Cells[1, i].Value.ToString().Trim();
                            ColName = Regex.Replace(ColName, @"\s+", " ");
                            MastSheetColumn.Add(ColName);
                            MastDataTable.Columns.Add(ColName);
                        }

                        for (int i = 2; i <= MastColumns; i++)
                        {
                            DataRow MastDataRow = MastDataTable.NewRow();
                            for (int j = 1; j <= MastColumns; j++)
                            {
                                string ColName = MastSheet.Cells[1, j].Value.ToString().Trim();
                                ColName = Regex.Replace(ColName, @"\s+", " ");

                                object Value = MastSheet.Cells[i, j].Value;
                                if (Value != null)
                                {
                                    string ValueAsString = Value.ToString().Trim();
                                    ValueAsString = Regex.Replace(ValueAsString, @"\s+", " ");
                                    Value = ValueAsString;
                                    MastDataRow[ColName] = Value;
                                }
                                else
                                {
                                    MastDataRow[ColName] = Value;
                                }
                            }
                            MastDataTable.Rows.Add(MastDataRow);
                        }

                        for (int j = 0; j <= MastDataTable.Rows.Count - 1; j++)
                        {
                            using (TransactionScope MastTransaction = new TransactionScope(TransactionScopeOption.Required,
                                new System.TimeSpan(0, 15, 0)))
                            {
                                try
                                {
                                    string MastModel = MastDataTable.Rows[j]["Model Name"].ToString();

                                    if (!string.IsNullOrEmpty(MastModel))
                                    {
                                        TLIcivilWithoutLegLibrary CheckMastModelIfExist = _unitOfWork.CivilWithoutLegLibraryRepository
                                            .GetIncludeWhereFirst(x => x.Model.ToLower() == MastModel.ToLower() && !x.Deleted &&
                                                x.CivilWithoutLegCategory.Name.ToLower() == MastCategroyName.ToLower(), x => x.CivilWithoutLegCategory);

                                        if (CheckMastModelIfExist != null)
                                        {
                                            MastTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Model Name) coulumn's value: ({MastModel}) is already exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = true,
                                                RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLegLibrary.ToString(),
                                                SheetName = "Mast",
                                                UniqueName = $"(Model Name) : {MastModel}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        TLIcivilWithoutLegLibrary NewMastEntity = new TLIcivilWithoutLegLibrary();

                                        NewMastEntity.Model = MastModel;

                                        string Type = MastDataTable.Rows[j]["Type1"].ToString();

                                        if (!string.IsNullOrEmpty(Type))
                                        {
                                            TLIinstallationCivilwithoutLegsType CheckInstallationTypeIfExist = _unitOfWork.InstCivilwithoutLegsTypeRepository
                                                .GetWhereFirst(x => x.Name.ToLower() == Type.ToLower() && !x.Deleted);

                                            if (CheckInstallationTypeIfExist != null)
                                                NewMastEntity.InstCivilwithoutLegsTypeId = CheckInstallationTypeIfExist.Id;

                                            else
                                            {
                                                TLIinstallationCivilwithoutLegsType NewInstallationTypeEntity = new TLIinstallationCivilwithoutLegsType()
                                                {
                                                    Name = Type,
                                                    Deleted = false,
                                                    Disable = false
                                                };

                                                _unitOfWork.InstCivilwithoutLegsTypeRepository.Add(NewInstallationTypeEntity);
                                                _unitOfWork.SaveChanges();

                                                NewMastEntity.InstCivilwithoutLegsTypeId = NewInstallationTypeEntity.Id;
                                            }
                                        }

                                        string MastHeight_Designed = MastDataTable.Rows[j]["Height As Design (m)"].ToString();

                                        if (!string.IsNullOrEmpty(MastHeight_Designed))
                                        {
                                            CheckParser = float.TryParse(MastHeight_Designed, out FloatParser);

                                            if (CheckParser)
                                                NewMastEntity.Height_Designed = FloatParser;

                                            else
                                            {
                                                MastTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Height As Design (m)) coulumn's value: ({MastHeight_Designed}) must be a number",
                                                    IsDeleted = false,
                                                    IsLib = true,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLegLibrary.ToString(),
                                                    SheetName = "Mast",
                                                    UniqueName = $"(Model Name) : {MastModel}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }

                                        string MastMax_Load = MastDataTable.Rows[j]["Max Load (m2)"].ToString();

                                        if (!string.IsNullOrEmpty(MastMax_Load))
                                        {
                                            CheckParser = float.TryParse(MastMax_Load, out FloatParser);

                                            if (CheckParser)
                                                NewMastEntity.Max_Load = FloatParser;

                                            else
                                            {
                                                MastTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Max Load (m2)) coulumn's value: ({MastMax_Load}) must be a number",
                                                    IsDeleted = false,
                                                    IsLib = true,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLegLibrary.ToString(),
                                                    SheetName = "Mast",
                                                    UniqueName = $"(Model Name) : {MastModel}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }

                                        NewMastEntity.SpaceLibrary = 0;
                                        NewMastEntity.Active = true;
                                        NewMastEntity.Deleted = false;

                                        TLIcivilSteelSupportCategory CivilWithoutLegMastSupportCategory = _unitOfWork.CivilSteelSupportCategoryRepository
                                            .GetByID(0);

                                        int CivilWithoutLegMastSupportCategoryId = 0;

                                        if (CivilWithoutLegMastSupportCategory == null)
                                        {
                                            TLIcivilSteelSupportCategory NewTLIcivilSteelSupportCategory = new TLIcivilSteelSupportCategory()
                                            {
                                                Id = 0,
                                                Name = "NA"
                                            };

                                            _unitOfWork.CivilSteelSupportCategoryRepository.Add(NewTLIcivilSteelSupportCategory);
                                            _unitOfWork.SaveChanges();

                                            CivilWithoutLegMastSupportCategoryId = NewTLIcivilSteelSupportCategory.Id;
                                        }
                                        else
                                            CivilWithoutLegMastSupportCategoryId = CivilWithoutLegMastSupportCategory.Id;

                                        NewMastEntity.CivilSteelSupportCategoryId = _unitOfWork.CivilSteelSupportCategoryRepository
                                            .GetWhereFirst(x => x.Name.ToLower() == MastCategroyName.ToLower()).Id;

                                        NewMastEntity.CivilWithoutLegCategoryId = _unitOfWork.CivilWithoutLegCategoryRepository
                                            .GetWhereFirst(x => x.Name.ToLower() == Helpers.Constants.CivilWithoutLegCategories.Mast.ToString().ToLower()).Id;

                                        _unitOfWork.CivilWithoutLegLibraryRepository.Add(NewMastEntity);
                                        _unitOfWork.SaveChanges();

                                        var ObjectForAddInCashList = _unitOfWork.CivilWithoutLegLibraryRepository
                                            .GetIncludeWhereFirst(x => x.Id == NewMastEntity.Id, x => x.CivilSteelSupportCategory,
                                                x => x.CivilWithoutLegCategory, x => x.InstCivilwithoutLegsType, x => x.structureType);

                                        MastTransaction.Complete();

                                        // CivilLibraryService._CivilWithoutLegLibraryEntities.Add(ObjectForAddInCashList);

                                    }
                                    else
                                    {
                                        MastTransaction.Complete();
                                        continue;
                                    }
                                }
                                catch (Exception err)
                                {
                                    MastTransaction.Dispose();

                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                    {
                                        CreatedAt = DateTime.Now,
                                        ErrMsg = err.Message,
                                        IsDeleted = false,
                                        IsLib = true,
                                        RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLegLibrary.ToString(),
                                        SheetName = "Mast",
                                        UniqueName = $"(Model Name) : {MastDataTable.Rows[j]["Model Name"]}"
                                    };

                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                    _unitOfWork.SaveChanges();

                                    continue;
                                }
                            }
                        }

                    ////////////////////////////////////////////////////////////
                    ///////////////////////// MW_ODU /////////////////////////////
                    ////////////////////////////////////////////////////////////

                    MW_ODU:

                        ExcelWorksheet MW_ODUSheet = package.Workbook.Worksheets.FirstOrDefault(x => x.Name.ToLower() == "ODU".ToLower());
                        int MW_ODURows = 0;
                        try
                        {
                            MW_ODURows = MW_ODUSheet.Dimension.End.Row;
                        }
                        catch (NullReferenceException)
                        {
                            goto RadioAntenna;
                        }
                        int MW_ODUColumns = MW_ODUSheet.Dimension.End.Column;

                        DataTable MW_ODUDataTable = new DataTable();
                        List<string> MW_ODUSheetColumn = new List<string>();

                        for (int i = 1; i <= MW_ODUColumns; i++)
                        {
                            string ColName = MW_ODUSheet.Cells[1, i].Value.ToString().Trim();
                            ColName = Regex.Replace(ColName, @"\s+", " ");
                            MW_ODUSheetColumn.Add(ColName);
                            MW_ODUDataTable.Columns.Add(ColName);
                        }

                        for (int i = 2; i <= MW_ODUColumns; i++)
                        {
                            DataRow MW_ODUDataRow = MW_ODUDataTable.NewRow();
                            for (int j = 1; j <= MW_ODUColumns; j++)
                            {
                                string ColName = MW_ODUSheet.Cells[1, j].Value.ToString().Trim();
                                ColName = Regex.Replace(ColName, @"\s+", " ");

                                object Value = MW_ODUSheet.Cells[i, j].Value;
                                if (Value != null)
                                {
                                    string ValueAsString = Value.ToString().Trim();
                                    ValueAsString = Regex.Replace(ValueAsString, @"\s+", " ");
                                    Value = ValueAsString;
                                    MW_ODUDataRow[ColName] = Value;
                                }
                                else
                                {
                                    MW_ODUDataRow[ColName] = Value;
                                }
                            }
                            MW_ODUDataTable.Rows.Add(MW_ODUDataRow);
                        }

                        TLItablesNames MW_ODULibraryTableNameEntity = _unitOfWork.TablesNamesRepository
                            .GetWhereFirst(x => x.TableName.ToLower() == Helpers.Constants.TablesNames.TLImwODULibrary.ToString().ToLower());

                        for (int j = 0; j <= MW_ODUDataTable.Rows.Count - 1; j++)
                        {
                            using (TransactionScope MW_ODUTransaction = new TransactionScope(TransactionScopeOption.Required,
                                new System.TimeSpan(0, 15, 0)))
                            {
                                try
                                {
                                    string MW_ODUModel = MW_ODUDataTable.Rows[j]["Name1"].ToString();

                                    TLImwODULibrary NewMWODULibraryEntity = new TLImwODULibrary();

                                    if (!string.IsNullOrEmpty(MW_ODUModel))
                                    {
                                        TLImwODULibrary CheckMW_ODUModelIfExist = _unitOfWork.MW_ODULibraryRepository
                                            .GetWhereFirst(x => x.Model.ToLower() == MW_ODUModel.ToLower() && !x.Deleted);

                                        if (CheckMW_ODUModelIfExist != null)
                                        {
                                            MW_ODUTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Name1) coulumn's value: ({MW_ODUModel}) is already exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = true,
                                                RefTable = Helpers.Constants.TablesNames.TLImwODULibrary.ToString(),
                                                SheetName = "ODU",
                                                UniqueName = $"Name1 : {MW_ODUModel}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        NewMWODULibraryEntity.Model = MW_ODUDataTable.Rows[j]["Name1"].ToString();

                                        string H_W_D = MW_ODUDataTable.Rows[j]["H_W_D"].ToString();

                                        if (!H_W_D.IsNullOrEmpty())
                                        {
                                            string[] H_W_D_Seperator = H_W_D.Split(' ');

                                            NewMWODULibraryEntity.H_W_D = H_W_D;

                                            CheckParser = float.TryParse(H_W_D_Seperator[0], out FloatParser);

                                            if (CheckParser)
                                                NewMWODULibraryEntity.Height = FloatParser;

                                            CheckParser = float.TryParse(H_W_D_Seperator[3], out FloatParser);

                                            if (CheckParser)
                                                NewMWODULibraryEntity.Width = FloatParser;

                                            CheckParser = float.TryParse(H_W_D_Seperator[6], out FloatParser);

                                            if (CheckParser)
                                                NewMWODULibraryEntity.Depth = FloatParser;

                                            if (!CheckParser)
                                            {
                                                MW_ODUTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(H_W_D) coulumn's value: ({H_W_D}) can't be seperated to (Height, Width, Depth)",
                                                    IsDeleted = false,
                                                    IsLib = true,
                                                    RefTable = Helpers.Constants.TablesNames.TLImwODULibrary.ToString(),
                                                    SheetName = "ODU",
                                                    UniqueName = $"Name1 : {MW_ODUModel}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                            else
                                                NewMWODULibraryEntity.SpaceLibrary = NewMWODULibraryEntity.Height * NewMWODULibraryEntity.Width;
                                        }

                                        string Party = MW_ODUDataTable.Rows[j]["Party"].ToString();

                                        if (!string.IsNullOrEmpty(Party))
                                        {
                                            TLIparity CheckParityIfExist = _unitOfWork.ParityRepository
                                                .GetWhereFirst(x => x.Name.ToLower() == Party.ToLower() && !x.Delete);

                                            if (CheckParityIfExist != null)
                                                NewMWODULibraryEntity.parityId = CheckParityIfExist.Id;

                                            else
                                            {
                                                TLIparity NewParityEntity = new TLIparity()
                                                {
                                                    Name = Party,
                                                    Delete = false,
                                                    Disable = false
                                                };

                                                _unitOfWork.ParityRepository.Add(NewParityEntity);
                                                _unitOfWork.SaveChanges();

                                                NewMWODULibraryEntity.parityId = NewParityEntity.Id;
                                            }
                                        }

                                        NewMWODULibraryEntity.frequency_range = MW_ODUDataTable.Rows[j]["Frequency Range"].ToString();
                                        NewMWODULibraryEntity.frequency_band = MW_ODUDataTable.Rows[j]["Freaquency Band"].ToString();

                                        string MastWeight = MW_ODUDataTable.Rows[j]["Weight"].ToString();

                                        if (!string.IsNullOrEmpty(MastWeight))
                                        {
                                            CheckParser = float.TryParse(MW_ODUDataTable.Rows[j]["Weight"].ToString(), out FloatParser);

                                            if (CheckParser)
                                                NewMWODULibraryEntity.Weight = FloatParser;

                                            else
                                            {
                                                MW_ODUTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Weight) coulumn's value: ({MW_ODUDataTable.Rows[j]["Weight"]}) must be a number",
                                                    IsDeleted = false,
                                                    IsLib = true,
                                                    RefTable = Helpers.Constants.TablesNames.TLImwODULibrary.ToString(),
                                                    SheetName = "ODU",
                                                    UniqueName = $"Name1 : {MW_ODUModel}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                        else
                                            NewMWODULibraryEntity.Weight = 0;

                                        _unitOfWork.MW_ODULibraryRepository.Add(NewMWODULibraryEntity);
                                        _unitOfWork.SaveChanges();

                                        string Vendor = MW_ODUDataTable.Rows[j]["Vender"].ToString();

                                        if (!string.IsNullOrEmpty(Vendor))
                                        {
                                            AddLogistical(Vendor, "Vendor", "MW", "TLImwODULibrary", NewMWODULibraryEntity.Id);
                                        }

                                        List<KeyValuePair<string, string>> MW_ODUDynamicAttributesToAdd = new List<KeyValuePair<string, string>>()
                                        {
                                            new KeyValuePair<string, string>("Size", MW_ODUDataTable.Rows[j]["Size"].ToString()),
                                            new KeyValuePair<string, string>("Type1", MW_ODUDataTable.Rows[j]["Type1"].ToString()),
                                            new KeyValuePair<string, string>("Vender Board Name", MW_ODUDataTable.Rows[j]["Vender Board Name"].ToString()),
                                            new KeyValuePair<string, string>("Created", MW_ODUDataTable.Rows[j]["Created"].ToString()),
                                            new KeyValuePair<string, string>("Created By", MW_ODUDataTable.Rows[j]["Created By"].ToString())
                                        };

                                        foreach (KeyValuePair<string, string> MW_ODUDynamicAttribute in MW_ODUDynamicAttributesToAdd)
                                        {
                                            TLIdynamicAtt CheckIfDynamicExist = _unitOfWork.DynamicAttRepository
                                                .GetIncludeWhereFirst(x => x.Key.ToLower() == MW_ODUDynamicAttribute.Key.ToLower() &&
                                                    x.tablesNames.TableName.ToLower() == MW_ODULibraryTableNameEntity.TableName.ToLower(),
                                                        x => x.tablesNames);

                                            if (CheckIfDynamicExist != null)
                                            {
                                                TLIdynamicAttLibValue NewDynamicAttributeForMW_ODUValue = new TLIdynamicAttLibValue();

                                                NewDynamicAttributeForMW_ODUValue.DynamicAttId = CheckIfDynamicExist.Id;
                                                NewDynamicAttributeForMW_ODUValue.disable = false;
                                                NewDynamicAttributeForMW_ODUValue.tablesNamesId = MW_ODULibraryTableNameEntity.Id;

                                                NewDynamicAttributeForMW_ODUValue.InventoryId = NewMWODULibraryEntity.Id;

                                                if (MW_ODUDynamicAttribute.Key.ToLower() == "Created".ToLower())
                                                {
                                                    DateTime DateTimeParser = DateTime.Now;

                                                    CheckParser = DateTime.TryParse(MW_ODUDynamicAttribute.Value, out DateTimeParser);

                                                    if (CheckParser)
                                                        NewDynamicAttributeForMW_ODUValue.ValueDateTime = DateTimeParser;

                                                    else
                                                    {
                                                        MW_ODUTransaction.Dispose();

                                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                        {
                                                            CreatedAt = DateTime.Now,
                                                            ErrMsg = $"({MW_ODUDynamicAttribute.Key}) coulumn's value must be date",
                                                            IsDeleted = false,
                                                            IsLib = true,
                                                            RefTable = Helpers.Constants.TablesNames.TLImwODULibrary.ToString(),
                                                            SheetName = "ODU",
                                                            UniqueName = $"Name1 : {MW_ODUModel}"
                                                        };

                                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                        _unitOfWork.SaveChanges();

                                                        continue;
                                                    }
                                                }
                                                else
                                                    NewDynamicAttributeForMW_ODUValue.ValueString = MW_ODUDynamicAttribute.Value;

                                                _unitOfWork.DynamicAttLibRepository.Add(NewDynamicAttributeForMW_ODUValue);
                                                _unitOfWork.SaveChanges();
                                            }
                                            else
                                            {
                                                int MW_ODUDynamicAttributeDataTypeId = 0;

                                                if (MW_ODUDynamicAttribute.Key.ToLower() == "Created".ToLower())
                                                    MW_ODUDynamicAttributeDataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "DateTime".ToLower()).Id;

                                                else
                                                    MW_ODUDynamicAttributeDataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id;

                                                TLIdynamicAtt NewDynamicAttributeForMW_ODU = new TLIdynamicAtt()
                                                {
                                                    Key = MW_ODUDynamicAttribute.Key,
                                                    LibraryAtt = true,
                                                    DataTypeId = MW_ODUDynamicAttributeDataTypeId,
                                                    Description = "ForImpotData",
                                                    tablesNamesId = MW_ODULibraryTableNameEntity.Id,
                                                    Required = false,
                                                    disable = false,
                                                    DefaultValue = null
                                                };

                                                _unitOfWork.DynamicAttRepository.Add(NewDynamicAttributeForMW_ODU);
                                                _unitOfWork.SaveChanges();

                                                if (!string.IsNullOrEmpty(MW_ODUDynamicAttribute.Value))
                                                {
                                                    if (MW_ODUDynamicAttribute.Key.ToLower() == "Created".ToLower())
                                                    {
                                                        TLIdynamicAttLibValue NewDynamicAttributeForMW_ODUValue = new TLIdynamicAttLibValue()
                                                        {
                                                            DynamicAttId = NewDynamicAttributeForMW_ODU.Id,
                                                            disable = false,
                                                            tablesNamesId = MW_ODULibraryTableNameEntity.Id,
                                                            InventoryId = NewMWODULibraryEntity.Id,
                                                        };

                                                        DateTime DateTimeParser = DateTime.Now;

                                                        CheckParser = DateTime.TryParse(MW_ODUDynamicAttribute.Value, out DateTimeParser);

                                                        if (CheckParser)
                                                            NewDynamicAttributeForMW_ODUValue.ValueDateTime = DateTimeParser;

                                                        else
                                                        {
                                                            MW_ODUTransaction.Dispose();

                                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                            {
                                                                CreatedAt = DateTime.Now,
                                                                ErrMsg = $"({MW_ODUDynamicAttribute.Key}) coulumn's value must be date",
                                                                IsDeleted = false,
                                                                IsLib = true,
                                                                RefTable = Helpers.Constants.TablesNames.TLImwODULibrary.ToString(),
                                                                SheetName = "ODU",
                                                                UniqueName = $"Name1 : {MW_ODUModel}"
                                                            };

                                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                            _unitOfWork.SaveChanges();

                                                            continue;
                                                        }


                                                        _unitOfWork.DynamicAttLibRepository.Add(NewDynamicAttributeForMW_ODUValue);
                                                        _unitOfWork.SaveChanges();
                                                    }
                                                    else
                                                    {
                                                        TLIdynamicAttLibValue NewDynamicAttributeForMW_ODUValue = new TLIdynamicAttLibValue()
                                                        {
                                                            DynamicAttId = NewDynamicAttributeForMW_ODU.Id,
                                                            ValueString = MW_ODUDynamicAttribute.Value,
                                                            disable = false,
                                                            tablesNamesId = MW_ODULibraryTableNameEntity.Id,
                                                            InventoryId = NewMWODULibraryEntity.Id,
                                                        };

                                                        _unitOfWork.DynamicAttLibRepository.Add(NewDynamicAttributeForMW_ODUValue);
                                                        _unitOfWork.SaveChanges();
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        MW_ODUTransaction.Complete();
                                        continue;
                                    }

                                    var ObjectForAddInCashList = _unitOfWork.MW_ODULibraryRepository
                                        .GetIncludeWhereFirst(x => x.Id == NewMWODULibraryEntity.Id, x => x.parity);

                                    MW_ODUTransaction.Complete();

                                    //  MWLibraryService._MW_ODULibraryEntities.Add(ObjectForAddInCashList);
                                }
                                catch (Exception err)
                                {
                                    MW_ODUTransaction.Dispose();

                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                    {
                                        CreatedAt = DateTime.Now,
                                        ErrMsg = err.Message,
                                        IsDeleted = false,
                                        IsLib = true,
                                        RefTable = Helpers.Constants.TablesNames.TLImwODULibrary.ToString(),
                                        SheetName = "ODU",
                                        UniqueName = $"Name1 : {MW_ODUDataTable.Rows[j]["Name1"]}"
                                    };

                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                    _unitOfWork.SaveChanges();

                                    continue;
                                }
                            }
                        }

                    ////////////////////////////////////////////////////////////
                    ///////////////////////// Radio Antenna ////////////////////
                    ////////////////////////////////////////////////////////////

                    RadioAntenna:

                        ExcelWorksheet RadioAntennaSheet = package.Workbook.Worksheets.FirstOrDefault(x => x.Name.ToLower() == "Radio Ant".ToLower());
                        int RadioAntennaRows = 0;
                        try
                        {
                            RadioAntennaRows = RadioAntennaSheet.Dimension.End.Row;
                        }
                        catch (NullReferenceException)
                        {
                            goto RadioRRU;
                        }
                        int RadioAntennaColumns = RadioAntennaSheet.Dimension.End.Column;

                        DataTable RadioAntennaDataTable = new DataTable();
                        List<string> RadioAntennaSheetColumn = new List<string>();

                        for (int i = 1; i <= RadioAntennaColumns; i++)
                        {
                            string ColName = RadioAntennaSheet.Cells[1, i].Value.ToString().Trim();
                            ColName = Regex.Replace(ColName, @"\s+", " ");
                            RadioAntennaSheetColumn.Add(ColName);
                            RadioAntennaDataTable.Columns.Add(ColName);
                        }

                        for (int i = 2; i <= RadioAntennaColumns; i++)
                        {
                            DataRow RadioAntennaDataRow = RadioAntennaDataTable.NewRow();
                            for (int j = 1; j <= RadioAntennaColumns; j++)
                            {
                                string ColName = RadioAntennaSheet.Cells[1, j].Value.ToString().Trim();
                                ColName = Regex.Replace(ColName, @"\s+", " ");

                                object Value = RadioAntennaSheet.Cells[i, j].Value;
                                if (Value != null)
                                {
                                    string ValueAsString = Value.ToString().Trim();
                                    ValueAsString = Regex.Replace(ValueAsString, @"\s+", " ");
                                    Value = ValueAsString;
                                    RadioAntennaDataRow[ColName] = Value;
                                }
                                else
                                {
                                    RadioAntennaDataRow[ColName] = Value;
                                }
                            }
                            RadioAntennaDataTable.Rows.Add(RadioAntennaDataRow);
                        }

                        TLItablesNames RadioAntennaLibraryTableNameEntity = _unitOfWork.TablesNamesRepository
                            .GetWhereFirst(x => x.TableName.ToLower() == Helpers.Constants.TablesNames.TLIradioAntennaLibrary.ToString().ToLower());

                        for (int j = 0; j <= RadioAntennaDataTable.Rows.Count - 1; j++)
                        {
                            using (TransactionScope RadioAntennaTransaction = new TransactionScope(TransactionScopeOption.Required,
                                new System.TimeSpan(0, 15, 0)))
                            {
                                try
                                {
                                    string RadioAntennaModel = RadioAntennaDataTable.Rows[j]["antenna_model"].ToString();

                                    TLIradioAntennaLibrary NewRadioAntennaLibraryEntity = new TLIradioAntennaLibrary();

                                    if (!string.IsNullOrEmpty(RadioAntennaModel))
                                    {
                                        TLIradioAntennaLibrary radioAntennaLibrary = _unitOfWork.RadioAntennaLibraryRepository
                                            .GetWhereFirst(x => x.Model.ToLower() == RadioAntennaModel.ToLower() && !x.Deleted);

                                        if (radioAntennaLibrary != null)
                                        {
                                            RadioAntennaTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(antenna_model) coulumn's value: ({RadioAntennaModel}) is already exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = true,
                                                RefTable = Helpers.Constants.TablesNames.TLIradioAntennaLibrary.ToString(),
                                                SheetName = "Radio Ant",
                                                UniqueName = $"antenna_model : {RadioAntennaModel}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        NewRadioAntennaLibraryEntity.Model = RadioAntennaModel;
                                        NewRadioAntennaLibraryEntity.FrequencyBand = RadioAntennaDataTable.Rows[j]["frequencyband"].ToString();

                                        string CSVWidth = RadioAntennaDataTable.Rows[j]["width_cm"].ToString();
                                        string RadioAntennaWidth = Regex.Replace(CSVWidth, "[^.0-9]", "");

                                        if (!string.IsNullOrEmpty(RadioAntennaWidth))
                                        {
                                            CheckParser = float.TryParse(RadioAntennaWidth, out FloatParser);

                                            if (CheckParser)
                                                NewRadioAntennaLibraryEntity.Width = FloatParser;

                                            else
                                            {
                                                RadioAntennaTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(width_cm) coulumn's value: ({CSVWidth}) must be a number",
                                                    IsDeleted = false,
                                                    IsLib = true,
                                                    RefTable = Helpers.Constants.TablesNames.TLIradioAntennaLibrary.ToString(),
                                                    SheetName = "Radio Ant",
                                                    UniqueName = $"antenna_model : {RadioAntennaModel}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }

                                        string CSVDepth = RadioAntennaDataTable.Rows[j]["Depth"].ToString();
                                        string RadioAntennaDepth = Regex.Replace(CSVDepth, "[^.0-9]", "");

                                        if (!string.IsNullOrEmpty(RadioAntennaDepth))
                                        {
                                            CheckParser = float.TryParse(RadioAntennaDepth, out FloatParser);

                                            if (CheckParser)
                                                NewRadioAntennaLibraryEntity.Depth = FloatParser;

                                            else
                                            {
                                                RadioAntennaTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Depth) coulumn's value: ({CSVDepth}) must be a number",
                                                    IsDeleted = false,
                                                    IsLib = true,
                                                    RefTable = Helpers.Constants.TablesNames.TLIradioAntennaLibrary.ToString(),
                                                    SheetName = "Radio Ant",
                                                    UniqueName = $"antenna_model : {RadioAntennaModel}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }

                                        NewRadioAntennaLibraryEntity.Deleted = false;
                                        NewRadioAntennaLibraryEntity.Active = true;

                                        string CSVWeight = RadioAntennaDataTable.Rows[j]["weight"].ToString();
                                        string RadioAntennaWeight = Regex.Replace(CSVWeight, "[^.0-9]", "");

                                        if (!string.IsNullOrEmpty(RadioAntennaWeight))
                                        {
                                            CheckParser = float.TryParse(RadioAntennaWeight, out FloatParser);

                                            if (CheckParser)
                                                NewRadioAntennaLibraryEntity.Weight = FloatParser;

                                            else
                                            {
                                                RadioAntennaTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(weight) coulumn's value: ({CSVWeight}) must be a number",
                                                    IsDeleted = false,
                                                    IsLib = true,
                                                    RefTable = Helpers.Constants.TablesNames.TLIradioAntennaLibrary.ToString(),
                                                    SheetName = "Radio Ant",
                                                    UniqueName = $"antenna_model : {RadioAntennaModel}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                        else
                                            NewRadioAntennaLibraryEntity.Weight = 0;

                                        string CSVLength = RadioAntennaDataTable.Rows[j]["length _cm"].ToString();
                                        string RadioAntennaLength = Regex.Replace(CSVLength, "[^.0-9]", "");

                                        if (!string.IsNullOrEmpty(RadioAntennaLength))
                                        {
                                            CheckParser = float.TryParse(RadioAntennaLength, out FloatParser);

                                            if (CheckParser)
                                                NewRadioAntennaLibraryEntity.Length = FloatParser;

                                            else
                                            {
                                                RadioAntennaTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(length _cm) coulumn's value: ({CSVLength}) must be a number",
                                                    IsDeleted = false,
                                                    IsLib = true,
                                                    RefTable = Helpers.Constants.TablesNames.TLIradioAntennaLibrary.ToString(),
                                                    SheetName = "Radio Ant",
                                                    UniqueName = $"antenna_model : {RadioAntennaModel}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                        else
                                            NewRadioAntennaLibraryEntity.Length = 0;

                                        if (!string.IsNullOrEmpty(RadioAntennaLength) && !string.IsNullOrEmpty(RadioAntennaWidth))
                                            NewRadioAntennaLibraryEntity.SpaceLibrary = float.Parse(RadioAntennaLength) * float.Parse(RadioAntennaWidth);

                                        _unitOfWork.RadioAntennaLibraryRepository.Add(NewRadioAntennaLibraryEntity);
                                        _unitOfWork.SaveChanges();

                                        string Vendor = RadioAntennaDataTable.Rows[j]["vendor"].ToString();
                                        if (!string.IsNullOrEmpty(Vendor))
                                        {
                                            AddLogistical(Vendor, "Vendor", "Radio", "TLIradioAntennaLibrary", NewRadioAntennaLibraryEntity.Id);
                                        }

                                        List<KeyValuePair<string, string>> RadioAntennaDynamicAttributes = new List<KeyValuePair<string, string>>()
                                        {
                                            new KeyValuePair<string, string>("Modified", RadioAntennaDataTable.Rows[j]["Modified"].ToString()),
                                            new KeyValuePair<string, string>("Modified By", RadioAntennaDataTable.Rows[j]["Modified By"].ToString()),
                                            new KeyValuePair<string, string>("Type1", RadioAntennaDataTable.Rows[j]["Type1"].ToString())
                                        };

                                        foreach (KeyValuePair<string, string> RadioAntennaDynamicAttribute in RadioAntennaDynamicAttributes)
                                        {
                                            TLIdynamicAtt CheckIfDynamicIsAlreadyExist = _unitOfWork.DynamicAttRepository
                                                .GetIncludeWhereFirst(x => x.Key == RadioAntennaDynamicAttribute.Key &&
                                                    x.tablesNames.TableName.ToLower() == RadioAntennaLibraryTableNameEntity.TableName.ToLower(),
                                                        x => x.tablesNames);

                                            if (CheckIfDynamicIsAlreadyExist != null && !string.IsNullOrEmpty(RadioAntennaDynamicAttribute.Value))
                                            {
                                                TLIdynamicAttLibValue NewDynamicAttLibValue = new TLIdynamicAttLibValue()
                                                {
                                                    ValueString = RadioAntennaDynamicAttribute.Value,
                                                    DynamicAttId = CheckIfDynamicIsAlreadyExist.Id,
                                                    disable = false,
                                                    tablesNamesId = RadioAntennaLibraryTableNameEntity.Id,
                                                    InventoryId = NewRadioAntennaLibraryEntity.Id
                                                };

                                                _unitOfWork.DynamicAttLibRepository.Add(NewDynamicAttLibValue);
                                                _unitOfWork.SaveChanges();
                                            }
                                            else
                                            {
                                                TLIdynamicAtt NewDynamicAttributeEntity = new TLIdynamicAtt()
                                                {
                                                    Key = RadioAntennaDynamicAttribute.Key,
                                                    LibraryAtt = true,
                                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                                    Description = "ForImpotData",
                                                    tablesNamesId = RadioAntennaLibraryTableNameEntity.Id,
                                                    Required = false,
                                                    disable = false,
                                                    DefaultValue = null
                                                };

                                                _unitOfWork.DynamicAttRepository.Add(NewDynamicAttributeEntity);
                                                _unitOfWork.SaveChanges();

                                                if (!string.IsNullOrEmpty(RadioAntennaDynamicAttribute.Value))
                                                {
                                                    TLIdynamicAttLibValue NewDynamicAttLibValue = new TLIdynamicAttLibValue()
                                                    {
                                                        ValueString = RadioAntennaDynamicAttribute.Value,
                                                        DynamicAttId = NewDynamicAttributeEntity.Id,
                                                        disable = false,
                                                        tablesNamesId = RadioAntennaLibraryTableNameEntity.Id,
                                                        InventoryId = NewRadioAntennaLibraryEntity.Id
                                                    };

                                                    _unitOfWork.DynamicAttLibRepository.Add(NewDynamicAttLibValue);
                                                    _unitOfWork.SaveChanges();
                                                }
                                            }
                                        }
                                    }

                                    var ObjectForAddInCashList = _unitOfWork.RadioAntennaLibraryRepository
                                        .GetIncludeWhereFirst(x => x.Id == NewRadioAntennaLibraryEntity.Id);

                                    RadioAntennaTransaction.Complete();

                                    /// RadioLibraryService._RadioAntennaLibraryEntities.Add(ObjectForAddInCashList);
                                }
                                catch (Exception err)
                                {
                                    RadioAntennaTransaction.Dispose();

                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                    {
                                        CreatedAt = DateTime.Now,
                                        ErrMsg = err.Message,
                                        IsDeleted = false,
                                        IsLib = true,
                                        RefTable = Helpers.Constants.TablesNames.TLIradioAntennaLibrary.ToString(),
                                        SheetName = "Radio Ant",
                                        UniqueName = $"antenna_model : {RadioAntennaDataTable.Rows[j]["antenna_model"]}"
                                    };

                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                    _unitOfWork.SaveChanges();

                                    continue;
                                }
                            }
                        }

                    ////////////////////////////////////////////////////////////
                    ///////////////////////// Radio RRU ////////////////////////
                    ////////////////////////////////////////////////////////////

                    RadioRRU:

                        ExcelWorksheet RadioRRUSheet = package.Workbook.Worksheets.FirstOrDefault(x => x.Name.ToLower() == "RRU".ToLower());
                        int RadioRRURows = 0;
                        try
                        {
                            RadioRRURows = RadioRRUSheet.Dimension.End.Row;
                        }
                        catch (NullReferenceException)
                        {
                            goto MW_RFU;
                        }
                        int RadioRRUColumns = RadioRRUSheet.Dimension.End.Column;

                        DataTable RadioRRUDataTable = new DataTable();
                        List<string> RadioRRUSheetColumn = new List<string>();

                        for (int i = 1; i <= RadioRRUColumns; i++)
                        {
                            string ColName = RadioRRUSheet.Cells[1, i].Value.ToString().Trim();
                            ColName = Regex.Replace(ColName, @"\s+", " ");
                            RadioRRUSheetColumn.Add(ColName);
                            RadioRRUDataTable.Columns.Add(ColName);
                        }

                        for (int i = 2; i <= RadioRRUColumns; i++)
                        {
                            DataRow RadioRRUDataRow = RadioRRUDataTable.NewRow();
                            for (int j = 1; j <= RadioRRUColumns; j++)
                            {
                                string ColName = RadioRRUSheet.Cells[1, j].Value.ToString().Trim();
                                ColName = Regex.Replace(ColName, @"\s+", " ");

                                object Value = RadioRRUSheet.Cells[i, j].Value;
                                if (Value != null)
                                {
                                    string ValueAsString = Value.ToString().Trim();
                                    ValueAsString = Regex.Replace(ValueAsString, @"\s+", " ");
                                    Value = ValueAsString;
                                    RadioRRUDataRow[ColName] = Value;
                                }
                                else
                                {
                                    RadioRRUDataRow[ColName] = Value;
                                }
                            }
                            RadioRRUDataTable.Rows.Add(RadioRRUDataRow);
                        }

                        TLItablesNames RadioRRULibraryTableNameEntity = _unitOfWork.TablesNamesRepository
                            .GetWhereFirst(x => x.TableName.ToLower() == Helpers.Constants.TablesNames.TLIradioRRULibrary.ToString().ToLower());

                        for (int j = 0; j <= RadioRRUDataTable.Rows.Count - 1; j++)
                        {
                            using (TransactionScope RadioRRUTransaction = new TransactionScope(TransactionScopeOption.Required,
                                new System.TimeSpan(0, 15, 0)))
                            {
                                try
                                {
                                    string RadioRRUModel = RadioRRUDataTable.Rows[j]["Name1"].ToString();

                                    TLIradioRRULibrary NewRadioRRULibraryEntity = new TLIradioRRULibrary();

                                    if (!string.IsNullOrEmpty(RadioRRUModel))
                                    {
                                        TLIradioRRULibrary CheckRadioRRUModelIfExist = _unitOfWork.RadioRRULibraryRepository
                                            .GetWhereFirst(x => x.Model.ToLower() == RadioRRUModel.ToLower() && !x.Deleted);

                                        if (CheckRadioRRUModelIfExist != null)
                                        {
                                            TLIimportSheet MastLibraryModelMissed = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Name1) coulumn's value: ({RadioRRUModel}) is already exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = true,
                                                RefTable = Helpers.Constants.TablesNames.TLIradioRRULibrary.ToString(),
                                                SheetName = "RRU",
                                                UniqueName = $"Name1 : {RadioRRUModel}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(MastLibraryModelMissed);
                                            _unitOfWork.SaveChanges();

                                            RadioRRUTransaction.Complete();

                                            continue;
                                        }

                                        NewRadioRRULibraryEntity.Model = RadioRRUModel;
                                        NewRadioRRULibraryEntity.Type = RadioRRUDataTable.Rows[j]["Type1"].ToString();
                                        NewRadioRRULibraryEntity.Band = RadioRRUDataTable.Rows[j]["band"].ToString();
                                        NewRadioRRULibraryEntity.Active = true;
                                        NewRadioRRULibraryEntity.Deleted = false;

                                        string CSVRadioRRUWeight = RadioRRUDataTable.Rows[j]["Weight"].ToString();

                                        if (!string.IsNullOrEmpty(CSVRadioRRUWeight))
                                        {
                                            CheckParser = float.TryParse(CSVRadioRRUWeight, out FloatParser);

                                            if (CheckParser)
                                                NewRadioRRULibraryEntity.Weight = FloatParser;

                                            else
                                            {
                                                RadioRRUTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Weight) coulumn's value: ({CSVRadioRRUWeight}) must be a number",
                                                    IsDeleted = false,
                                                    IsLib = true,
                                                    RefTable = Helpers.Constants.TablesNames.TLIradioRRULibrary.ToString(),
                                                    SheetName = "RRU",
                                                    UniqueName = $"Name1 : {RadioRRUModel}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                        else
                                            NewRadioRRULibraryEntity.Weight = 0;

                                        string RadioRRULibraryL_W_H = RadioRRUDataTable.Rows[j]["l_w_h_cm3"].ToString();

                                        if (!string.IsNullOrEmpty(RadioRRULibraryL_W_H))
                                        {
                                            if (RadioRRULibraryL_W_H.Contains('*'))
                                            {
                                                string[] L_W_HSpliter = RadioRRULibraryL_W_H.Split('*');

                                                CheckParser = float.TryParse(L_W_HSpliter[0], out FloatParser);

                                                if (CheckParser)
                                                    NewRadioRRULibraryEntity.Length = FloatParser;

                                                CheckParser = float.TryParse(L_W_HSpliter[1], out FloatParser);

                                                if (CheckParser)
                                                    NewRadioRRULibraryEntity.Width = FloatParser;

                                                CheckParser = float.TryParse(L_W_HSpliter[2], out FloatParser);

                                                if (CheckParser)
                                                    NewRadioRRULibraryEntity.Height = FloatParser;

                                                else
                                                {
                                                    RadioRRUTransaction.Dispose();

                                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                    {
                                                        CreatedAt = DateTime.Now,
                                                        ErrMsg = $"(l_w_h_cm3) coulumn's value: ({RadioRRULibraryL_W_H}) can't be seperated to " +
                                                            $"(Length, Width, Height)",
                                                        IsDeleted = false,
                                                        IsLib = true,
                                                        RefTable = Helpers.Constants.TablesNames.TLIradioRRULibrary.ToString(),
                                                        SheetName = "RRU",
                                                        UniqueName = $"Name1 : {RadioRRUModel}"
                                                    };

                                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                    _unitOfWork.SaveChanges();

                                                    continue;
                                                }

                                                NewRadioRRULibraryEntity.SpaceLibrary = NewRadioRRULibraryEntity.Length * NewRadioRRULibraryEntity.Width;
                                            }
                                            else
                                            {
                                                string[] L_W_HSpliter = RadioRRULibraryL_W_H.Split(' ', '.');

                                                CheckParser = float.TryParse(L_W_HSpliter[0], out FloatParser);

                                                if (CheckParser)
                                                    NewRadioRRULibraryEntity.Length = FloatParser;

                                                CheckParser = float.TryParse(L_W_HSpliter[3], out FloatParser);

                                                if (CheckParser)
                                                    NewRadioRRULibraryEntity.Width = FloatParser;

                                                CheckParser = float.TryParse(L_W_HSpliter[6], out FloatParser);

                                                if (CheckParser)
                                                    NewRadioRRULibraryEntity.Height = FloatParser;

                                                else
                                                {
                                                    RadioRRUTransaction.Dispose();

                                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                    {
                                                        CreatedAt = DateTime.Now,
                                                        ErrMsg = $"(l_w_h_cm3) coulumn's value: ({RadioRRULibraryL_W_H}) can't be seperated to " +
                                                            $"(Length, Width, Height)",
                                                        IsDeleted = false,
                                                        IsLib = true,
                                                        RefTable = Helpers.Constants.TablesNames.TLIradioRRULibrary.ToString(),
                                                        SheetName = "RRU",
                                                        UniqueName = $"Name1 : {RadioRRUModel}"
                                                    };

                                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                    _unitOfWork.SaveChanges();

                                                    continue;
                                                }

                                                NewRadioRRULibraryEntity.SpaceLibrary = NewRadioRRULibraryEntity.Length * NewRadioRRULibraryEntity.Width;
                                            }

                                        }

                                        NewRadioRRULibraryEntity.L_W_H_cm3 = RadioRRULibraryL_W_H;

                                        _unitOfWork.RadioRRULibraryRepository.Add(NewRadioRRULibraryEntity);
                                        _unitOfWork.SaveChanges();

                                        List<KeyValuePair<string, string>> RadioRRUDynamicAttributesToAdd = new List<KeyValuePair<string, string>>()
                                        {
                                            new KeyValuePair<string, string>("Created By", RadioRRUDataTable.Rows[j]["Created By"].ToString()),
                                            new KeyValuePair<string, string>("Created", RadioRRUDataTable.Rows[j]["Created By"].ToString())
                                        };

                                        foreach (KeyValuePair<string, string> RadioRRUDynamicAttribute in RadioRRUDynamicAttributesToAdd)
                                        {
                                            TLIdynamicAtt CheckIfDynamicExist = _unitOfWork.DynamicAttRepository
                                                .GetIncludeWhereFirst(x => x.Key.ToLower() == RadioRRUDynamicAttribute.Key.ToLower() &&
                                                    x.tablesNames.TableName.ToLower() == RadioRRULibraryTableNameEntity.TableName.ToLower(),
                                                        x => x.tablesNames);

                                            if (CheckIfDynamicExist != null)
                                            {
                                                TLIdynamicAttLibValue NewDynamicAttributeForMW_ODUValue = new TLIdynamicAttLibValue();

                                                NewDynamicAttributeForMW_ODUValue.DynamicAttId = CheckIfDynamicExist.Id;
                                                NewDynamicAttributeForMW_ODUValue.disable = false;
                                                NewDynamicAttributeForMW_ODUValue.tablesNamesId = RadioRRULibraryTableNameEntity.Id;

                                                NewDynamicAttributeForMW_ODUValue.InventoryId = NewRadioRRULibraryEntity.Id;

                                                NewDynamicAttributeForMW_ODUValue.ValueString = RadioRRUDynamicAttribute.Value;

                                                _unitOfWork.DynamicAttLibRepository.Add(NewDynamicAttributeForMW_ODUValue);
                                                _unitOfWork.SaveChanges();
                                            }
                                            else
                                            {
                                                int RadioRRUDynamicAttributeDataTypeId = 0;

                                                if (RadioRRUDynamicAttribute.Key.ToLower() == "Created".ToLower())
                                                    RadioRRUDynamicAttributeDataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "DateTime".ToLower()).Id;

                                                else
                                                    RadioRRUDynamicAttributeDataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id;

                                                TLIdynamicAtt NewDynamicAttributeForRadioRRU = new TLIdynamicAtt()
                                                {
                                                    Key = RadioRRUDynamicAttribute.Key,
                                                    LibraryAtt = true,
                                                    DataTypeId = RadioRRUDynamicAttributeDataTypeId,
                                                    Description = "ForImpotData",
                                                    tablesNamesId = RadioRRULibraryTableNameEntity.Id,
                                                    Required = false,
                                                    disable = false,
                                                    DefaultValue = null
                                                };

                                                _unitOfWork.DynamicAttRepository.Add(NewDynamicAttributeForRadioRRU);
                                                _unitOfWork.SaveChanges();

                                                if (!string.IsNullOrEmpty(RadioRRUDynamicAttribute.Value))
                                                {

                                                    TLIdynamicAttLibValue NewDynamicAttributeForMW_ODUValue = new TLIdynamicAttLibValue()
                                                    {
                                                        DynamicAttId = NewDynamicAttributeForRadioRRU.Id,
                                                        ValueString = RadioRRUDynamicAttribute.Value,
                                                        disable = false,
                                                        tablesNamesId = RadioRRULibraryTableNameEntity.Id,
                                                        InventoryId = NewRadioRRULibraryEntity.Id,
                                                    };

                                                    _unitOfWork.DynamicAttLibRepository.Add(NewDynamicAttributeForMW_ODUValue);
                                                    _unitOfWork.SaveChanges();
                                                }
                                            }
                                        }
                                    }

                                    var ObjectForAddInCashList = _unitOfWork.RadioAntennaLibraryRepository
                                        .GetIncludeWhereFirst(x => x.Id == NewRadioRRULibraryEntity.Id);

                                    RadioRRUTransaction.Complete();

                                    //  RadioLibraryService._RadioRRULibraryEntities.Add(NewRadioRRULibraryEntity);
                                }
                                catch (Exception err)
                                {
                                    RadioRRUTransaction.Dispose();

                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                    {
                                        CreatedAt = DateTime.Now,
                                        ErrMsg = err.Message,
                                        IsDeleted = false,
                                        IsLib = true,
                                        RefTable = Helpers.Constants.TablesNames.TLIradioRRULibrary.ToString(),
                                        SheetName = "RRU",
                                        UniqueName = $"Name1 : {RadioRRUDataTable.Rows[j]["Name1"]}"
                                    };

                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                    _unitOfWork.SaveChanges();

                                    continue;
                                }
                            }
                        }

                    ////////////////////////////////////////////////////////////
                    ///////////////////////// MW_RFU ////////////////////////
                    ////////////////////////////////////////////////////////////

                    MW_RFU:

                        ExcelWorksheet MW_RFUSheet = package.Workbook.Worksheets.FirstOrDefault(x => x.Name.ToLower() == "RFU".ToLower());
                        int MW_RFURows = 0;
                        try
                        {
                            MW_RFURows = MW_RFUSheet.Dimension.End.Row;
                        }
                        catch (NullReferenceException)
                        {
                            goto MW_BU;
                        }
                        int MW_RFUColumns = MW_RFUSheet.Dimension.End.Column;

                        DataTable MW_RFUDataTable = new DataTable();
                        List<string> MW_RFUSheetColumn = new List<string>();

                        for (int i = 1; i <= MW_RFUColumns; i++)
                        {
                            string ColName = MW_RFUSheet.Cells[1, i].Value.ToString().Trim();
                            ColName = Regex.Replace(ColName, @"\s+", " ");
                            MW_RFUSheetColumn.Add(ColName);
                            MW_RFUDataTable.Columns.Add(ColName);
                        }

                        for (int i = 2; i <= MW_RFUColumns; i++)
                        {
                            DataRow MW_RFUDataRow = MW_RFUDataTable.NewRow();
                            for (int j = 1; j <= MW_RFUColumns; j++)
                            {
                                string ColName = MW_RFUSheet.Cells[1, j].Value.ToString().Trim();
                                ColName = Regex.Replace(ColName, @"\s+", " ");

                                object Value = MW_RFUSheet.Cells[i, j].Value;
                                if (Value != null)
                                {
                                    string ValueAsString = Value.ToString().Trim();
                                    ValueAsString = Regex.Replace(ValueAsString, @"\s+", " ");
                                    Value = ValueAsString;
                                    MW_RFUDataRow[ColName] = Value;
                                }
                                else
                                {
                                    MW_RFUDataRow[ColName] = Value;
                                }
                            }
                            MW_RFUDataTable.Rows.Add(MW_RFUDataRow);
                        }

                        TLItablesNames MW_RFULibraryTableNameEntity = _unitOfWork.TablesNamesRepository
                            .GetWhereFirst(x => x.TableName.ToLower() == Helpers.Constants.TablesNames.TLImwRFULibrary.ToString().ToLower());

                        for (int j = 0; j <= MW_RFUDataTable.Rows.Count - 1; j++)
                        {
                            using (TransactionScope MW_RFUTransaction = new TransactionScope(TransactionScopeOption.Required,
                                new System.TimeSpan(0, 15, 0)))
                            {
                                try
                                {
                                    string MW_RFULibraryModel = $"NA/{DateTime.Now} + // {j}";

                                    TLImwRFULibrary NewMW_RFULibraryEntity = new TLImwRFULibrary();

                                    TLImwRFULibrary CheckMW_RFULibraryModelIfExist = _unitOfWork.MW_RFULibraryRepository
                                        .GetWhereFirst(x => x.Model.ToLower() == MW_RFULibraryModel.ToLower() && !x.Deleted);

                                    if (CheckMW_RFULibraryModelIfExist != null)
                                    {
                                        MW_RFUTransaction.Dispose();

                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                        {
                                            CreatedAt = DateTime.Now,
                                            ErrMsg = $"(Model Name) coulumn's value: ({MW_RFULibraryModel}) is already exist in TLIS",
                                            IsDeleted = false,
                                            IsLib = true,
                                            RefTable = Helpers.Constants.TablesNames.TLImwRFULibrary.ToString(),
                                            SheetName = "RFU",
                                            UniqueName = $"Model Name : {MW_RFULibraryModel}"
                                        };

                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                        _unitOfWork.SaveChanges();

                                        continue;
                                    }

                                    NewMW_RFULibraryEntity.Model = MW_RFULibraryModel;
                                    //NewMW_RFULibraryEntity.tx_parity = MW_RFUDataTable.Rows[j]["Parity"].ToString();
                                    NewMW_RFULibraryEntity.frequency_band = MW_RFUDataTable.Rows[j]["Frequency Band"].ToString();
                                    NewMW_RFULibraryEntity.FrequencyRange = MW_RFUDataTable.Rows[j]["Frequency Range"].ToString();
                                    //NewMW_RFULibraryEntity.RFUType = MW_RFUDataTable.Rows[j]["RFU Type"].ToString();
                                    NewMW_RFULibraryEntity.size = MW_RFUDataTable.Rows[j]["Size"].ToString();
                                    NewMW_RFULibraryEntity.VenferBoardName = MW_RFUDataTable.Rows[j]["Venfer Board Name"].ToString();
                                    NewMW_RFULibraryEntity.L_W_H = MW_RFUDataTable.Rows[j]["L_W_H(cm3)"].ToString();

                                    string CSVMW_RFULibraryWeight = MW_RFUDataTable.Rows[j]["Weight"].ToString();
                                    if (!string.IsNullOrEmpty(CSVMW_RFULibraryWeight))
                                    {
                                        CheckParser = float.TryParse(CSVMW_RFULibraryWeight, out FloatParser);

                                        if (CheckParser)
                                            NewMW_RFULibraryEntity.Weight = FloatParser;

                                        else
                                        {
                                            MW_RFUTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Weight) coulumn's value: ({CSVMW_RFULibraryWeight}) must be a number",
                                                IsDeleted = false,
                                                IsLib = true,
                                                RefTable = Helpers.Constants.TablesNames.TLImwRFULibrary.ToString(),
                                                SheetName = "RFU",
                                                UniqueName = $"Model Name : {MW_RFULibraryModel}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }
                                    }
                                    else
                                        NewMW_RFULibraryEntity.Weight = 0;

                                    if (!string.IsNullOrEmpty(NewMW_RFULibraryEntity.L_W_H))
                                    {
                                        string[] L_W_H = NewMW_RFULibraryEntity.L_W_H.Split(" x ");

                                        CheckParser = float.TryParse(L_W_H[0], out FloatParser);

                                        if (CheckParser)
                                            NewMW_RFULibraryEntity.Length = FloatParser;

                                        CheckParser = float.TryParse(L_W_H[1], out FloatParser);

                                        if (CheckParser)
                                            NewMW_RFULibraryEntity.Width = FloatParser;

                                        CheckParser = float.TryParse(L_W_H[2], out FloatParser);

                                        if (CheckParser)
                                            NewMW_RFULibraryEntity.Height = FloatParser;

                                        else
                                        {
                                            MW_RFUTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(L_W_H(cm3)) coulumn's value: ({NewMW_RFULibraryEntity.L_W_H}) can't be seperated to " +
                                                    $"(Length, Width, Height)",
                                                IsDeleted = false,
                                                IsLib = true,
                                                RefTable = Helpers.Constants.TablesNames.TLImwRFULibrary.ToString(),
                                                SheetName = "RFU",
                                                UniqueName = $"Model Name : {MW_RFULibraryModel}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        NewMW_RFULibraryEntity.SpaceLibrary = NewMW_RFULibraryEntity.Length * NewMW_RFULibraryEntity.Width;
                                    }

                                    string CSVMW_RFULibraryDivesity = MW_RFUDataTable.Rows[j]["Divesity"].ToString();
                                    if (!string.IsNullOrEmpty(CSVMW_RFULibraryDivesity))
                                    {
                                        TLIdiversityType DiversityTypeEntity = _unitOfWork.DiversityTypeRepository
                                            .GetWhereFirst(x => x.Name.ToLower() == CSVMW_RFULibraryDivesity.ToLower() && !x.Deleted);

                                        if (DiversityTypeEntity != null)
                                            NewMW_RFULibraryEntity.diversityTypeId = DiversityTypeEntity.Id;

                                        else
                                        {
                                            TLIdiversityType NewDiversityTypeEntity = new TLIdiversityType()
                                            {
                                                Name = CSVMW_RFULibraryDivesity,
                                                Deleted = false,
                                                Disable = false
                                            };

                                            _unitOfWork.DiversityTypeRepository.Add(NewDiversityTypeEntity);
                                            _unitOfWork.SaveChanges();

                                            NewMW_RFULibraryEntity.diversityTypeId = NewDiversityTypeEntity.Id;
                                        }
                                    }

                                    _unitOfWork.MW_RFULibraryRepository.Add(NewMW_RFULibraryEntity);
                                    _unitOfWork.SaveChanges();

                                    string MW_RDULibraryVendor = MW_RFUDataTable.Rows[j]["Vender"].ToString();
                                    if (!string.IsNullOrEmpty(MW_RDULibraryVendor))
                                    {
                                        AddLogistical(MW_RDULibraryVendor, "Vendor", "MW", "TLImwRFULibrary", NewMW_RFULibraryEntity.Id);
                                    }

                                    var ObjectForAddInCashList = _unitOfWork.MW_RFULibraryRepository
                                        .GetIncludeWhereFirst(x => x.Id == NewMW_RFULibraryEntity.Id, x => x.boardType, x => x.diversityType);

                                    MW_RFUTransaction.Complete();

                                    //  MWLibraryService._MW_RFULibraryEntities.Add(ObjectForAddInCashList);
                                }
                                catch (Exception err)
                                {
                                    MW_RFUTransaction.Dispose();

                                    string MW_RFULibraryModel = $"NA/{DateTime.Now} + // {j}";

                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                    {
                                        CreatedAt = DateTime.Now,
                                        ErrMsg = err.Message,
                                        IsDeleted = false,
                                        IsLib = true,
                                        RefTable = Helpers.Constants.TablesNames.TLImwRFULibrary.ToString(),
                                        SheetName = "RFU",
                                        UniqueName = $"Model Name : {MW_RFULibraryModel}"
                                    };

                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                    _unitOfWork.SaveChanges();

                                    continue;
                                }
                            }
                        }

                    ////////////////////////////////////////////////////////////
                    ///////////////////////// MW_BU ////////////////////////
                    ////////////////////////////////////////////////////////////

                    MW_BU:

                        ExcelWorksheet MW_BUSheet = package.Workbook.Worksheets.FirstOrDefault(x => x.Name.ToLower() == "Branching Unit".ToLower());
                        int MW_BURows = 0;
                        try
                        {
                            MW_BURows = MW_BUSheet.Dimension.End.Row;
                        }
                        catch (NullReferenceException)
                        {
                            goto MW_Dish;
                        }
                        int MW_BUColumns = MW_BUSheet.Dimension.End.Column;

                        DataTable MW_BUDataTable = new DataTable();
                        List<string> MW_BUSheetColumn = new List<string>();

                        for (int i = 1; i <= MW_BUColumns; i++)
                        {
                            string ColName = MW_BUSheet.Cells[1, i].Value.ToString().Trim();
                            ColName = Regex.Replace(ColName, @"\s+", " ");
                            MW_BUSheetColumn.Add(ColName);
                            MW_BUDataTable.Columns.Add(ColName);
                        }

                        for (int i = 2; i <= MW_BUColumns; i++)
                        {
                            DataRow MW_BUDataRow = MW_BUDataTable.NewRow();
                            for (int j = 1; j <= MW_BUColumns; j++)
                            {
                                string ColName = MW_BUSheet.Cells[1, j].Value.ToString().Trim();
                                ColName = Regex.Replace(ColName, @"\s+", " ");

                                object Value = MW_BUSheet.Cells[i, j].Value;
                                if (Value != null)
                                {
                                    string ValueAsString = Value.ToString().Trim();
                                    ValueAsString = Regex.Replace(ValueAsString, @"\s+", " ");
                                    Value = ValueAsString;
                                    MW_BUDataRow[ColName] = Value;
                                }
                                else
                                {
                                    MW_BUDataRow[ColName] = Value;
                                }
                            }
                            MW_BUDataTable.Rows.Add(MW_BUDataRow);
                        }

                        TLItablesNames TLImwBULibraryTableName = TablesNames.FirstOrDefault(x =>
                            x.TableName.ToLower() == Helpers.Constants.TablesNames.TLImwBULibrary.ToString().ToLower());

                        for (int j = 0; j <= MW_BUDataTable.Rows.Count - 1; j++)
                        {
                            using (TransactionScope MW_BUTransaction = new TransactionScope(TransactionScopeOption.Required,
                                new System.TimeSpan(0, 15, 0)))
                            {
                                try
                                {
                                    string MW_BULibraryModel = MW_BUDataTable.Rows[j]["Name1"].ToString();

                                    TLImwBULibrary MWBULibrary = new TLImwBULibrary();

                                    if (!string.IsNullOrEmpty(MW_BULibraryModel))
                                    {
                                        TLImwBULibrary CheckMW_BULibraryModelIfExist = _unitOfWork.MW_BULibraryRepository
                                            .GetWhereFirst(x => x.Model.ToLower() == MW_BULibraryModel.ToLower() && !x.Deleted);

                                        if (CheckMW_BULibraryModelIfExist != null)
                                        {
                                            MW_BUTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Name1) coulumn's value: ({MW_BULibraryModel}) is already exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = true,
                                                RefTable = Helpers.Constants.TablesNames.TLImwBULibrary.ToString(),
                                                SheetName = "Branching Unit",
                                                UniqueName = $"Name1 : {MW_BULibraryModel}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        MWBULibrary.Model = MW_BULibraryModel;
                                        MWBULibrary.Type = MW_BUDataTable.Rows[j]["BU Type"].ToString();
                                        MWBULibrary.L_W_H = MW_BUDataTable.Rows[j]["Long X Width X Hight"].ToString();
                                        MWBULibrary.frequency_band = MW_BUDataTable.Rows[j]["Frequency Band"].ToString();
                                        MWBULibrary.Active = true;
                                        MWBULibrary.Deleted = false;
                                        MWBULibrary.FreqChannel = MW_BUDataTable.Rows[j]["Freq Channel"].ToString();
                                        MWBULibrary.BUSize = MW_BUDataTable.Rows[j]["BU Size"].ToString();
                                        MWBULibrary.Note = null;

                                        if (!string.IsNullOrEmpty(MW_BUDataTable.Rows[j]["Weight"].ToString()))
                                        {
                                            CheckParser = float.TryParse(MW_BUDataTable.Rows[j]["Weight"].ToString(), out FloatParser);

                                            if (CheckParser)
                                                MWBULibrary.Weight = FloatParser;

                                            else
                                            {
                                                MW_BUTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Weight) coulumn's value: ({MW_BUDataTable.Rows[j]["Weight"]}) must be a number",
                                                    IsDeleted = false,
                                                    IsLib = true,
                                                    RefTable = Helpers.Constants.TablesNames.TLImwBULibrary.ToString(),
                                                    SheetName = "Branching Unit",
                                                    UniqueName = $"Name1 : {MW_BULibraryModel}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                        if (!string.IsNullOrEmpty(MW_BUDataTable.Rows[j]["Num of RFU Ports"].ToString()))
                                        {
                                            CheckParser = float.TryParse(MW_BUDataTable.Rows[j]["Num of RFU Ports"].ToString(), out FloatParser);

                                            if (CheckParser)
                                                MWBULibrary.NumOfRFU = int.Parse(FloatParser.ToString());

                                            else
                                            {
                                                MW_BUTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Num of RFU Ports) coulumn's value: ({MW_BUDataTable.Rows[j]["Num of RFU Ports"]}) must be a number",
                                                    IsDeleted = false,
                                                    IsLib = true,
                                                    RefTable = Helpers.Constants.TablesNames.TLImwBULibrary.ToString(),
                                                    SheetName = "Branching Unit",
                                                    UniqueName = $"Name1 : {MW_BULibraryModel}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }

                                        string CSVMW_BUChannelBandwidth = MW_BUDataTable.Rows[j]["Channel Bandwidth"].ToString();
                                        if (!string.IsNullOrEmpty(CSVMW_BUChannelBandwidth))
                                        {
                                            CheckParser = float.TryParse(CSVMW_BUChannelBandwidth, out FloatParser);

                                            if (CheckParser)
                                                MWBULibrary.channel_bandwidth = FloatParser;

                                            else
                                            {
                                                MW_BUTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Channel Bandwidth) coulumn's value: ({CSVMW_BUChannelBandwidth}) must be a number",
                                                    IsDeleted = false,
                                                    IsLib = true,
                                                    RefTable = Helpers.Constants.TablesNames.TLImwBULibrary.ToString(),
                                                    SheetName = "Branching Unit",
                                                    UniqueName = $"Name1 : {MW_BULibraryModel}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }

                                        if (!string.IsNullOrEmpty(MWBULibrary.L_W_H))
                                        {
                                            if (MWBULibrary.L_W_H.Contains('*'))
                                            {
                                                string[] L_W_HSpliter = MWBULibrary.L_W_H.Split('*');

                                                CheckParser = float.TryParse(L_W_HSpliter[0], out FloatParser);

                                                if (CheckParser)
                                                    MWBULibrary.Length = FloatParser;

                                                CheckParser = float.TryParse(L_W_HSpliter[1], out FloatParser);

                                                if (CheckParser)
                                                    MWBULibrary.Width = FloatParser;

                                                CheckParser = float.TryParse(L_W_HSpliter[2], out FloatParser);

                                                if (CheckParser)
                                                    MWBULibrary.Height = FloatParser;

                                                else
                                                {
                                                    MW_BUTransaction.Dispose();

                                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                    {
                                                        CreatedAt = DateTime.Now,
                                                        ErrMsg = $"(Long X Width X Hight) coulumn's value can't be seperated to " +
                                                            $"(Long, Width, Hight)",
                                                        IsDeleted = false,
                                                        IsLib = true,
                                                        RefTable = Helpers.Constants.TablesNames.TLImwBULibrary.ToString(),
                                                        SheetName = "Branching Unit",
                                                        UniqueName = $"Name1 : {MW_BULibraryModel}"
                                                    };

                                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                    _unitOfWork.SaveChanges();

                                                    continue;
                                                }

                                                MWBULibrary.SpaceLibrary = MWBULibrary.Width * MWBULibrary.Length;
                                            }
                                            else
                                            {
                                                string[] L_W_HSpliter = MWBULibrary.L_W_H.Split(' ');

                                                CheckParser = float.TryParse(L_W_HSpliter[0], out FloatParser);

                                                if (CheckParser)
                                                    MWBULibrary.Length = FloatParser;

                                                CheckParser = float.TryParse(L_W_HSpliter[3], out FloatParser);

                                                if (CheckParser)
                                                    MWBULibrary.Width = FloatParser;

                                                CheckParser = float.TryParse(L_W_HSpliter[6], out FloatParser);

                                                if (CheckParser)
                                                    MWBULibrary.Height = FloatParser;

                                                else
                                                {
                                                    MW_BUTransaction.Dispose();

                                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                    {
                                                        CreatedAt = DateTime.Now,
                                                        ErrMsg = $"(Long X Width X Hight) coulumn's value can't be seperated to " +
                                                            $"(Long, Width, Hight)",
                                                        IsDeleted = false,
                                                        IsLib = true,
                                                        RefTable = Helpers.Constants.TablesNames.TLImwBULibrary.ToString(),
                                                        SheetName = "Branching Unit",
                                                        UniqueName = $"Name1 : {MW_BULibraryModel}"
                                                    };

                                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                    _unitOfWork.SaveChanges();

                                                    continue;
                                                }

                                                MWBULibrary.SpaceLibrary = MWBULibrary.Width * MWBULibrary.Length;
                                            }

                                        }

                                        string CSVMW_RFULibraryDiversity = MW_BUDataTable.Rows[j]["Divesity"].ToString();
                                        if (!string.IsNullOrEmpty(CSVMW_RFULibraryDiversity))
                                        {
                                            TLIdiversityType MW_RFUDiversityEntity = _unitOfWork.DiversityTypeRepository
                                                .GetWhereFirst(x => x.Name.ToLower() == CSVMW_RFULibraryDiversity.ToLower() && !x.Deleted);

                                            if (MW_RFUDiversityEntity != null)
                                                MWBULibrary.diversityTypeId = MW_RFUDiversityEntity.Id;

                                            else
                                            {
                                                TLIdiversityType NewMW_RFUDiversityEntity = new TLIdiversityType()
                                                {
                                                    Name = CSVMW_RFULibraryDiversity,
                                                    Deleted = false,
                                                    Disable = false
                                                };

                                                _unitOfWork.DiversityTypeRepository.Add(NewMW_RFUDiversityEntity);
                                                _unitOfWork.SaveChanges();

                                                MWBULibrary.diversityTypeId = NewMW_RFUDiversityEntity.Id;
                                            }
                                        }

                                        _unitOfWork.MW_BULibraryRepository.Add(MWBULibrary);
                                        _unitOfWork.SaveChanges();

                                        TLIdynamicAtt CSVMissedAttributes = _unitOfWork.DynamicAttRepository
                                            .GetIncludeWhereFirst(x => x.Key.ToLower() == "ACCP".ToLower() &&
                                                x.tablesNames.TableName.ToLower() == TLImwBULibraryTableName.TableName.ToLower(),
                                                    x => x.tablesNames);

                                        if (CSVMissedAttributes != null && !string.IsNullOrEmpty(MW_BUDataTable.Rows[j]["ACCP"].ToString()))
                                        {
                                            TLIdynamicAttLibValue dynamicAttLibValue = new TLIdynamicAttLibValue()
                                            {
                                                ValueString = MW_BUDataTable.Rows[j]["ACCP"].ToString(),
                                                DynamicAttId = CSVMissedAttributes.Id,
                                                disable = false,
                                                tablesNamesId = TLImwBULibraryTableName.Id,
                                                InventoryId = MWBULibrary.Id
                                            };

                                            _unitOfWork.DynamicAttLibRepository.Add(dynamicAttLibValue);
                                            _unitOfWork.SaveChanges();
                                        }
                                        else
                                        {
                                            TLIdynamicAtt NewDynamicAttribute = new TLIdynamicAtt()
                                            {
                                                Key = "ACCP",
                                                LibraryAtt = true,
                                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                                Description = "ForImpotData",
                                                tablesNamesId = TLImwBULibraryTableName.Id,
                                                Required = false,
                                                disable = false,
                                                DefaultValue = null
                                            };

                                            _unitOfWork.DynamicAttRepository.Add(NewDynamicAttribute);
                                            _unitOfWork.SaveChanges();

                                            if (!string.IsNullOrEmpty(MW_BUDataTable.Rows[j]["ACCP"].ToString()))
                                            {
                                                TLIdynamicAttLibValue NewDynamicAttributeLibraryValue = new TLIdynamicAttLibValue()
                                                {
                                                    ValueString = MW_BUDataTable.Rows[j]["ACCP"].ToString(),
                                                    DynamicAttId = NewDynamicAttribute.Id,
                                                    disable = false,
                                                    tablesNamesId = TLImwBULibraryTableName.Id,
                                                    InventoryId = MWBULibrary.Id
                                                };

                                                _unitOfWork.DynamicAttLibRepository.Add(NewDynamicAttributeLibraryValue);
                                                _unitOfWork.SaveChanges();
                                            }
                                        }
                                    }

                                    var ObjectForAddInCashList = _unitOfWork.MW_BULibraryRepository
                                        .GetIncludeWhereFirst(x => x.Id == MWBULibrary.Id, x => x.diversityType);

                                    MW_BUTransaction.Complete();

                                    //MWLibraryService._MW_BULibraryEntities.Add(ObjectForAddInCashList);
                                }
                                catch (Exception err)
                                {
                                    MW_BUTransaction.Dispose();

                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                    {
                                        CreatedAt = DateTime.Now,
                                        ErrMsg = err.Message,
                                        IsDeleted = false,
                                        IsLib = true,
                                        RefTable = Helpers.Constants.TablesNames.TLImwBULibrary.ToString(),
                                        SheetName = "Branching Unit",
                                        UniqueName = $"Name1 : {MW_BUDataTable.Rows[j]["Name1"]}"
                                    };

                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                    _unitOfWork.SaveChanges();

                                    continue;
                                }
                            }
                        }

                    ////////////////////////////////////////////////////////////
                    ///////////////////////// MW_Dish ////////////////////////
                    ////////////////////////////////////////////////////////////

                    MW_Dish:

                        ExcelWorksheet MW_DishSheet = package.Workbook.Worksheets.FirstOrDefault(x => x.Name.ToLower() == "MW-Dish".ToLower());
                        int MW_DishRows = 0;
                        try
                        {
                            MW_DishRows = MW_DishSheet.Dimension.End.Row;
                        }
                        catch (NullReferenceException)
                        {
                            goto Power;
                        }
                        int MW_DishColumns = MW_DishSheet.Dimension.End.Column;

                        DataTable MW_DishDataTable = new DataTable();
                        List<string> MW_DishSheetColumn = new List<string>();

                        for (int i = 1; i <= MW_DishColumns; i++)
                        {
                            string ColName = MW_DishSheet.Cells[1, i].Value.ToString().Trim();
                            ColName = Regex.Replace(ColName, @"\s+", " ");
                            MW_DishSheetColumn.Add(ColName);
                            MW_DishDataTable.Columns.Add(ColName);
                        }

                        for (int i = 2; i <= MW_DishColumns; i++)
                        {
                            DataRow MW_DishDataRow = MW_DishDataTable.NewRow();
                            for (int j = 1; j <= MW_DishColumns; j++)
                            {
                                string ColName = MW_DishSheet.Cells[1, j].Value.ToString().Trim();
                                ColName = Regex.Replace(ColName, @"\s+", " ");

                                object Value = MW_DishSheet.Cells[i, j].Value;
                                if (Value != null)
                                {
                                    string ValueAsString = Value.ToString().Trim();
                                    ValueAsString = Regex.Replace(ValueAsString, @"\s+", " ");
                                    Value = ValueAsString;
                                    MW_DishDataRow[ColName] = Value;
                                }
                                else
                                {
                                    MW_DishDataRow[ColName] = Value;
                                }
                            }
                            MW_DishDataTable.Rows.Add(MW_DishDataRow);
                        }

                        for (int j = 0; j <= MW_DishDataTable.Rows.Count - 1; j++)
                        {
                            using (TransactionScope MW_DishTransaction = new TransactionScope(TransactionScopeOption.Required,
                                new System.TimeSpan(0, 15, 0)))
                            {
                                try
                                {
                                    string MW_DishLibraryModel = MW_DishDataTable.Rows[j]["MODEL"].ToString();

                                    TLImwDishLibrary NewMWDishLibraryEntity = new TLImwDishLibrary();

                                    if (!string.IsNullOrEmpty(MW_DishLibraryModel))
                                    {
                                        TLImwDishLibrary CheckMW_DishLibraryModelIfExist = _unitOfWork.MW_DishLibraryRepository
                                            .GetWhereFirst(x => x.Model.ToLower() == MW_DishLibraryModel.ToLower() && !x.Deleted);

                                        if (CheckMW_DishLibraryModelIfExist != null)
                                        {
                                            MW_DishTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(MODEL) coulumn's value: ({MW_DishLibraryModel}) is already exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = true,
                                                RefTable = Helpers.Constants.TablesNames.TLImwDishLibrary.ToString(),
                                                SheetName = "MW-Dish",
                                                UniqueName = $"MODEL : {MW_DishLibraryModel}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        NewMWDishLibraryEntity.Model = MW_DishLibraryModel;
                                        NewMWDishLibraryEntity.frequency_band = MW_DishDataTable.Rows[j]["FREQUENCY"].ToString();
                                        NewMWDishLibraryEntity.Active = true;
                                        NewMWDishLibraryEntity.Deleted = false;
                                        NewMWDishLibraryEntity.dimensions = null;

                                        string CSVMW_DishL_W_H = MW_DishDataTable.Rows[j]["L_W_H(mm3)"].ToString();
                                        if (!string.IsNullOrEmpty(CSVMW_DishL_W_H))
                                        {
                                            if (CSVMW_DishL_W_H.Contains('x'))
                                            {
                                                string[] L_W_HSeperator = CSVMW_DishL_W_H.Split(" x ");

                                                CheckParser = float.TryParse(L_W_HSeperator[0], out FloatParser);

                                                if (CheckParser)
                                                    NewMWDishLibraryEntity.Length = FloatParser;

                                                CheckParser = float.TryParse(L_W_HSeperator[1], out FloatParser);

                                                if (CheckParser)
                                                    NewMWDishLibraryEntity.Width = FloatParser;

                                                CheckParser = float.TryParse(L_W_HSeperator[2], out FloatParser);

                                                if (CheckParser)
                                                    NewMWDishLibraryEntity.Height = FloatParser;

                                                else
                                                {
                                                    MW_DishTransaction.Dispose();

                                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                    {
                                                        CreatedAt = DateTime.Now,
                                                        ErrMsg = $"(L_W_H(mm3)) coulumn's value: ({CSVMW_DishL_W_H}) can't be seperated to " +
                                                            $"(Length, Width, Height)",
                                                        IsDeleted = false,
                                                        IsLib = true,
                                                        RefTable = Helpers.Constants.TablesNames.TLImwDishLibrary.ToString(),
                                                        SheetName = "MW-Dish",
                                                        UniqueName = $"MODEL : {MW_DishLibraryModel}"
                                                    };

                                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                    _unitOfWork.SaveChanges();

                                                    continue;
                                                }

                                                NewMWDishLibraryEntity.SpaceLibrary = NewMWDishLibraryEntity.Length * NewMWDishLibraryEntity.Width;
                                            }
                                            else
                                            {
                                                string[] L_W_HSeperator = CSVMW_DishL_W_H.Split(' ', '.');

                                                CheckParser = float.TryParse(L_W_HSeperator[0], out FloatParser);

                                                if (CheckParser)
                                                    NewMWDishLibraryEntity.Length = FloatParser;

                                                CheckParser = float.TryParse(L_W_HSeperator[3], out FloatParser);

                                                if (CheckParser)
                                                    NewMWDishLibraryEntity.Width = FloatParser;

                                                CheckParser = float.TryParse(L_W_HSeperator[6], out FloatParser);

                                                if (CheckParser)
                                                    NewMWDishLibraryEntity.Height = FloatParser;

                                                else
                                                {
                                                    MW_DishTransaction.Dispose();

                                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                    {
                                                        CreatedAt = DateTime.Now,
                                                        ErrMsg = $"(L_W_H(mm3)) coulumn's value: ({CSVMW_DishL_W_H}) can't be seperated to " +
                                                            $"(Length, Width, Height)",
                                                        IsDeleted = false,
                                                        IsLib = true,
                                                        RefTable = Helpers.Constants.TablesNames.TLImwDishLibrary.ToString(),
                                                        SheetName = "MW-Dish",
                                                        UniqueName = $"MODEL : {MW_DishLibraryModel}"
                                                    };

                                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                    _unitOfWork.SaveChanges();

                                                    continue;
                                                }

                                                NewMWDishLibraryEntity.SpaceLibrary = NewMWDishLibraryEntity.Length * NewMWDishLibraryEntity.Width;
                                            }
                                        }

                                        string CSVMW_DishWeight = MW_DishDataTable.Rows[j]["WEIGHT"].ToString();

                                        if (!string.IsNullOrEmpty(CSVMW_DishWeight))
                                        {
                                            CheckParser = float.TryParse(CSVMW_DishWeight, out FloatParser);

                                            if (CheckParser)
                                                NewMWDishLibraryEntity.Weight = FloatParser;

                                            else
                                            {
                                                MW_DishTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(WEIGHT) coulumn's value: ({CSVMW_DishWeight}) must be a number",
                                                    IsDeleted = false,
                                                    IsLib = true,
                                                    RefTable = Helpers.Constants.TablesNames.TLImwDishLibrary.ToString(),
                                                    SheetName = "MW-Dish",
                                                    UniqueName = $"MODEL : {MW_DishLibraryModel}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }

                                        string CSVMW_DishDiameter = MW_DishDataTable.Rows[j]["DIAMETER_m"].ToString();
                                        if (!string.IsNullOrEmpty(CSVMW_DishDiameter))
                                        {
                                            CheckParser = float.TryParse(CSVMW_DishDiameter, out FloatParser);

                                            if (CheckParser)
                                                NewMWDishLibraryEntity.diameter = FloatParser;

                                            else
                                            {
                                                MW_DishTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(DIAMETER_m) coulumn's value: ({CSVMW_DishDiameter}) must be a number",
                                                    IsDeleted = false,
                                                    IsLib = true,
                                                    RefTable = Helpers.Constants.TablesNames.TLImwDishLibrary.ToString(),
                                                    SheetName = "MW-Dish",
                                                    UniqueName = $"MODEL : {MW_DishLibraryModel}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }

                                        string CSVMW_DishAsType = MW_DishDataTable.Rows[j]["AS_TYPE"].ToString();

                                        if (!string.IsNullOrEmpty(CSVMW_DishAsType))
                                        {
                                            TLIasType CheckAsType = _unitOfWork.AsTypeRepository
                                                .GetWhereFirst(x => x.Name.ToLower() == CSVMW_DishAsType.ToLower() && !x.Delete);

                                            if (CheckAsType != null)
                                                NewMWDishLibraryEntity.asTypeId = CheckAsType.Id;

                                            else
                                            {
                                                TLIasType NewAsTypeEntity = new TLIasType()
                                                {
                                                    Name = CSVMW_DishAsType,
                                                    Delete = false,
                                                    Disable = false
                                                };

                                                _unitOfWork.AsTypeRepository.Add(NewAsTypeEntity);
                                                _unitOfWork.SaveChanges();

                                                NewMWDishLibraryEntity.asTypeId = NewAsTypeEntity.Id;
                                            }
                                        }

                                        string CSVMW_DishPolarityType = MW_DishDataTable.Rows[j]["POLARITY"].ToString();

                                        if (!string.IsNullOrEmpty(CSVMW_DishPolarityType))
                                        {
                                            TLIpolarityType PolarityType = _unitOfWork.PolarityTypeRepository
                                                .GetWhereFirst(x => x.Name.ToLower() == CSVMW_DishPolarityType.ToLower() && !x.Delete);

                                            if (PolarityType != null)
                                                NewMWDishLibraryEntity.polarityTypeId = PolarityType.Id;

                                            else
                                            {
                                                TLIpolarityType NewPolarityTypeEntity = new TLIpolarityType()
                                                {
                                                    Name = CSVMW_DishPolarityType,
                                                    Delete = false,
                                                    Disable = false
                                                };

                                                _unitOfWork.PolarityTypeRepository.Add(NewPolarityTypeEntity);
                                                _unitOfWork.SaveChanges();

                                                NewMWDishLibraryEntity.polarityTypeId = NewPolarityTypeEntity.Id;
                                            }
                                        }

                                        _unitOfWork.MW_DishLibraryRepository.Add(NewMWDishLibraryEntity);
                                        _unitOfWork.SaveChanges();

                                        string Vendor = MW_DishDataTable.Rows[j]["VENDOR"].ToString();

                                        if (!string.IsNullOrEmpty(Vendor))
                                        {
                                            AddLogistical(Vendor, "Vendor", "MW", "TLImwDishLibrary", NewMWDishLibraryEntity.Id);
                                        }
                                    }

                                    var ObjectForAddInCashList = _unitOfWork.MW_DishLibraryRepository
                                        .GetIncludeWhereFirst(x => x.Id == NewMWDishLibraryEntity.Id, x => x.asType, x => x.polarityType);

                                    MW_DishTransaction.Complete();

                                    // MWLibraryService._MW_DishLibraryEntities.Add(ObjectForAddInCashList);
                                }
                                catch (Exception err)
                                {
                                    MW_DishTransaction.Dispose();

                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                    {
                                        CreatedAt = DateTime.Now,
                                        ErrMsg = err.Message,
                                        IsDeleted = false,
                                        IsLib = true,
                                        RefTable = Helpers.Constants.TablesNames.TLImwDishLibrary.ToString(),
                                        SheetName = "MW-Dish",
                                        UniqueName = $"MODEL : {MW_DishDataTable.Rows[j]["MODEL"].ToString()}"
                                    };

                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                    _unitOfWork.SaveChanges();

                                    continue;
                                }
                            }
                        }

                    ////////////////////////////////////////////////////////////
                    ///////////////////////// Power ////////////////////////
                    ////////////////////////////////////////////////////////////

                    Power:

                        ExcelWorksheet PowerSheet = package.Workbook.Worksheets.FirstOrDefault(x => x.Name.ToLower() == "Wind".ToLower());
                        int PowerRows = 0;
                        try
                        {
                            PowerRows = PowerSheet.Dimension.End.Row;
                        }
                        catch (NullReferenceException)
                        {
                            goto CivilWithLegs;
                        }
                        int PowerColumns = PowerSheet.Dimension.End.Column;

                        DataTable PowerDataTable = new DataTable();
                        List<string> PowerSheetColumn = new List<string>();

                        for (int i = 1; i <= PowerColumns; i++)
                        {
                            string ColName = PowerSheet.Cells[1, i].Value.ToString().Trim();
                            ColName = Regex.Replace(ColName, @"\s+", " ");
                            PowerSheetColumn.Add(ColName);
                            PowerDataTable.Columns.Add(ColName);
                        }

                        for (int i = 2; i <= PowerColumns; i++)
                        {
                            DataRow PowerDataRow = PowerDataTable.NewRow();
                            for (int j = 1; j <= PowerColumns; j++)
                            {
                                string ColName = PowerSheet.Cells[1, j].Value.ToString().Trim();
                                ColName = Regex.Replace(ColName, @"\s+", " ");

                                object Value = PowerSheet.Cells[i, j].Value;
                                if (Value != null)
                                {
                                    string ValueAsString = Value.ToString().Trim();
                                    ValueAsString = Regex.Replace(ValueAsString, @"\s+", " ");
                                    Value = ValueAsString;
                                    PowerDataRow[ColName] = Value;
                                }
                                else
                                {
                                    PowerDataRow[ColName] = Value;
                                }
                            }
                            PowerDataTable.Rows.Add(PowerDataRow);
                        }

                        TLItablesNames TLIPowerLibraryTableName = _unitOfWork.TablesNamesRepository
                            .GetWhereFirst(x => x.TableName.ToLower() == Helpers.Constants.TablesNames.TLIpowerLibrary.ToString().ToLower());

                        for (int j = 0; j <= PowerDataTable.Rows.Count - 1; j++)
                        {
                            using (TransactionScope PowerTransaction = new TransactionScope(TransactionScopeOption.Required,
                                new System.TimeSpan(0, 15, 0)))
                            {
                                try
                                {
                                    string PowerLibraryModel = PowerDataTable.Rows[j]["Name1"].ToString();

                                    if (!string.IsNullOrEmpty(PowerLibraryModel))
                                    {
                                        TLIpowerLibrary CheckPowerLibraryModelIfExist = _unitOfWork.PowerLibraryRepository
                                            .GetWhereFirst(x => x.Model.ToLower() == PowerLibraryModel.ToLower() && !x.Deleted);

                                        if (CheckPowerLibraryModelIfExist != null)
                                        {
                                            PowerTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Name1) coulumn's value: ({PowerLibraryModel}) is already exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = true,
                                                RefTable = Helpers.Constants.TablesNames.TLIpowerLibrary.ToString(),
                                                SheetName = "Wind",
                                                UniqueName = $"Name1 : {PowerLibraryModel}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        TLIpowerLibrary NewPowerLibraryEntity = new TLIpowerLibrary();

                                        NewPowerLibraryEntity.Model = PowerLibraryModel;
                                        NewPowerLibraryEntity.Type = PowerDataTable.Rows[j]["Type1"].ToString();
                                        NewPowerLibraryEntity.L_W_H = PowerDataTable.Rows[j]["L_W_H"].ToString();

                                        if (!NewPowerLibraryEntity.L_W_H.IsNullOrEmpty())
                                        {
                                            if (NewPowerLibraryEntity.L_W_H.Contains('x'))
                                            {
                                                string[] L_W_HSeperator = NewPowerLibraryEntity.L_W_H.Split(" x ");

                                                CheckParser = float.TryParse(L_W_HSeperator[0], out FloatParser);

                                                if (CheckParser)
                                                    NewPowerLibraryEntity.Length = FloatParser;

                                                CheckParser = float.TryParse(L_W_HSeperator[1], out FloatParser);

                                                if (CheckParser)
                                                    NewPowerLibraryEntity.width = FloatParser;

                                                CheckParser = float.TryParse(L_W_HSeperator[2], out FloatParser);

                                                if (CheckParser)
                                                    NewPowerLibraryEntity.Depth = FloatParser;

                                                else
                                                {
                                                    PowerTransaction.Dispose();

                                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                    {
                                                        CreatedAt = DateTime.Now,
                                                        ErrMsg = $"(L_W_H) coulumn's value: ({NewPowerLibraryEntity.L_W_H}) can't be seperated to " +
                                                            $"(Length, Width, Height)",
                                                        IsDeleted = false,
                                                        IsLib = true,
                                                        RefTable = Helpers.Constants.TablesNames.TLIpowerLibrary.ToString(),
                                                        SheetName = "Wind",
                                                        UniqueName = $"Name1 : {PowerLibraryModel}"
                                                    };

                                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                    _unitOfWork.SaveChanges();

                                                    continue;
                                                }

                                                NewPowerLibraryEntity.SpaceLibrary = NewPowerLibraryEntity.Length * NewPowerLibraryEntity.width;
                                            }
                                            else
                                            {
                                                string[] L_W_HSeperator = NewPowerLibraryEntity.L_W_H.Split(' ', '.');

                                                CheckParser = float.TryParse(L_W_HSeperator[0], out FloatParser);

                                                if (CheckParser)
                                                    NewPowerLibraryEntity.Length = FloatParser;

                                                CheckParser = float.TryParse(L_W_HSeperator[3], out FloatParser);

                                                if (CheckParser)
                                                    NewPowerLibraryEntity.width = FloatParser;

                                                CheckParser = float.TryParse(L_W_HSeperator[6], out FloatParser);

                                                if (CheckParser)
                                                    NewPowerLibraryEntity.Depth = FloatParser;

                                                else
                                                {
                                                    PowerTransaction.Dispose();

                                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                    {
                                                        CreatedAt = DateTime.Now,
                                                        ErrMsg = $"(L_W_H) coulumn's value: ({NewPowerLibraryEntity.L_W_H}) can't be seperated to " +
                                                            $"(Length, Width, Height)",
                                                        IsDeleted = false,
                                                        IsLib = true,
                                                        RefTable = Helpers.Constants.TablesNames.TLIpowerLibrary.ToString(),
                                                        SheetName = "Wind",
                                                        UniqueName = $"Name1 : {PowerLibraryModel}"
                                                    };

                                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                    _unitOfWork.SaveChanges();

                                                    continue;
                                                }

                                                NewPowerLibraryEntity.SpaceLibrary = NewPowerLibraryEntity.Length * NewPowerLibraryEntity.width;
                                            }
                                        }

                                        NewPowerLibraryEntity.Active = true;
                                        NewPowerLibraryEntity.Deleted = false;

                                        string CSVPowerLibraryWeight = PowerDataTable.Rows[j]["Weight"].ToString();

                                        if (!string.IsNullOrEmpty(CSVPowerLibraryWeight))
                                        {
                                            CheckParser = float.TryParse(CSVPowerLibraryWeight, out FloatParser);

                                            if (CheckParser)
                                                NewPowerLibraryEntity.Weight = FloatParser;

                                            else
                                            {
                                                PowerTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Weight) coulumn's value: ({CSVPowerLibraryWeight}) must be a number",
                                                    IsDeleted = false,
                                                    IsLib = true,
                                                    RefTable = Helpers.Constants.TablesNames.TLIpowerLibrary.ToString(),
                                                    SheetName = "Wind",
                                                    UniqueName = $"Name1 : {PowerLibraryModel}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }

                                        string CSVPowerLibrarySize = PowerDataTable.Rows[j]["Size"].ToString();

                                        if (!string.IsNullOrEmpty(CSVPowerLibrarySize))
                                        {
                                            CheckParser = float.TryParse(CSVPowerLibrarySize, out FloatParser);

                                            if (CheckParser)
                                                NewPowerLibraryEntity.Size = FloatParser;

                                            else
                                            {
                                                PowerTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Size) coulumn's value: ({CSVPowerLibrarySize}) must be a number",
                                                    IsDeleted = false,
                                                    IsLib = true,
                                                    RefTable = Helpers.Constants.TablesNames.TLIpowerLibrary.ToString(),
                                                    SheetName = "Wind",
                                                    UniqueName = $"Name1 : {PowerLibraryModel}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }

                                        _unitOfWork.PowerLibraryRepository.Add(NewPowerLibraryEntity);
                                        _unitOfWork.SaveChanges();

                                        string Vendor = PowerDataTable.Rows[j]["Vender"].ToString();
                                        if (!string.IsNullOrEmpty(Vendor))
                                        {
                                            AddLogistical(Vendor, "Vendor", "Power", "TLIpowerLibrary", NewPowerLibraryEntity.Id);
                                        }

                                        TLIdynamicAtt CSVMissedAttributes = _unitOfWork.DynamicAttRepository
                                            .GetIncludeWhereFirst(x => x.Key.ToLower() == "Area".ToLower() &&
                                                x.tablesNames.TableName.ToLower() == TLIPowerLibraryTableName.TableName.ToLower(),
                                                    x => x.tablesNames);

                                        if (CSVMissedAttributes != null && !string.IsNullOrEmpty(PowerDataTable.Rows[j]["Area"].ToString()))
                                        {
                                            TLIdynamicAttLibValue dynamicAttLibValue = new TLIdynamicAttLibValue()
                                            {
                                                ValueString = PowerDataTable.Rows[j]["Area"].ToString(),
                                                DynamicAttId = CSVMissedAttributes.Id,
                                                disable = false,
                                                tablesNamesId = TLIPowerLibraryTableName.Id,
                                                InventoryId = NewPowerLibraryEntity.Id
                                            };

                                            _unitOfWork.DynamicAttLibRepository.Add(dynamicAttLibValue);
                                            _unitOfWork.SaveChanges();
                                        }
                                        else
                                        {
                                            TLIdynamicAtt NewDynamicAttribute = new TLIdynamicAtt()
                                            {
                                                Key = "Area",
                                                LibraryAtt = true,
                                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                                Description = "ForImpotData",
                                                tablesNamesId = TLIPowerLibraryTableName.Id,
                                                Required = false,
                                                disable = false,
                                                DefaultValue = null
                                            };

                                            _unitOfWork.DynamicAttRepository.Add(NewDynamicAttribute);
                                            _unitOfWork.SaveChanges();

                                            if (!string.IsNullOrEmpty(PowerDataTable.Rows[j]["Area"].ToString()))
                                            {
                                                TLIdynamicAttLibValue NewDynamicAttributeLibraryValue = new TLIdynamicAttLibValue()
                                                {
                                                    ValueString = PowerDataTable.Rows[j]["Area"].ToString(),
                                                    DynamicAttId = NewDynamicAttribute.Id,
                                                    disable = false,
                                                    tablesNamesId = TLIPowerLibraryTableName.Id,
                                                    InventoryId = NewPowerLibraryEntity.Id
                                                };

                                                _unitOfWork.DynamicAttLibRepository.Add(NewDynamicAttributeLibraryValue);
                                                _unitOfWork.SaveChanges();
                                            }
                                        }

                                        var ObjectForAddInCashList = _unitOfWork.PowerLibraryRepository
                                            .GetIncludeWhereFirst(x => x.Id == NewPowerLibraryEntity.Id);

                                        PowerTransaction.Complete();

                                        //  PowerLibraryService._PowerLibraryEntities.Add(ObjectForAddInCashList);
                                    }
                                }
                                catch (Exception err)
                                {
                                    PowerTransaction.Dispose();

                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                    {
                                        CreatedAt = DateTime.Now,
                                        ErrMsg = err.Message,
                                        IsDeleted = false,
                                        IsLib = true,
                                        RefTable = Helpers.Constants.TablesNames.TLIpowerLibrary.ToString(),
                                        SheetName = "Wind",
                                        UniqueName = $"Name1 : {PowerDataTable.Rows[j]["Name1"].ToString()}"
                                    };

                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                    _unitOfWork.SaveChanges();

                                    continue;
                                }
                            }
                        }

                    CivilWithLegs:
                        ExcelWorksheet CivilWithLegsSheet = package.Workbook.Worksheets.FirstOrDefault(x => x.Name.ToLower() == "Type Of Support Specs".ToLower());
                        int CivilWithLegsRows = 0;
                        DataTable CivilWithLegsDataTable = new DataTable();

                        try
                        {
                            CivilWithLegsRows = CivilWithLegsSheet.Dimension.End.Row;
                        }
                        catch (NullReferenceException)
                        {
                            System.IO.File.Delete(FilePath);
                            return new Response<string>("Succeed");
                        }

                        int CivilWithLegsColumns = CivilWithLegsSheet.Dimension.End.Column;

                        List<string> CivilWithLegsSheetColumn = new List<string>();

                        for (int i = 1; i <= CivilWithLegsColumns; i++)
                        {
                            string ColName = CivilWithLegsSheet.Cells[1, i].Value.ToString().Trim();
                            ColName = Regex.Replace(ColName, @"\s+", " ");
                            CivilWithLegsSheetColumn.Add(ColName);
                            CivilWithLegsDataTable.Columns.Add(ColName);
                        }

                        for (int i = 2; i <= CivilWithLegsRows; i++)
                        {
                            DataRow CivilWithLegsDataRow = CivilWithLegsDataTable.NewRow();
                            for (int j = 1; j <= CivilWithLegsColumns; j++)
                            {
                                string ColName = CivilWithLegsSheet.Cells[1, j].Value.ToString().Trim();
                                ColName = Regex.Replace(ColName, @"\s+", " ");

                                object Value = CivilWithLegsSheet.Cells[i, j].Value;
                                if (Value != null)
                                {
                                    string ValueAsString = Value.ToString().Trim();
                                    ValueAsString = Regex.Replace(ValueAsString, @"\s+", " ");
                                    Value = ValueAsString;
                                    CivilWithLegsDataRow[ColName] = Value;
                                }
                                else
                                {
                                    CivilWithLegsDataRow[ColName] = Value;
                                }
                            }
                            CivilWithLegsDataTable.Rows.Add(CivilWithLegsDataRow);
                        }
                        for (int j = 0; j <= CivilWithLegsDataTable.Rows.Count - 1; j++)
                        {
                            using (TransactionScope CivilWithLegsTransaction = new TransactionScope(TransactionScopeOption.Required,
                                new System.TimeSpan(0, 15, 0)))
                            {
                                try
                                {
                                    string CivilWithLegsModel = CivilWithLegsDataTable.Rows[j]["Tower Type"].ToString();

                                    TLIcivilWithLegLibrary NewCivilWithLegsLibraryEntity = new TLIcivilWithLegLibrary();

                                    if (!string.IsNullOrEmpty(CivilWithLegsModel))
                                    {
                                        TLIcivilWithLegLibrary CheckSideArmModelIfExist = _unitOfWork.CivilWithLegLibraryRepository
                                            .GetWhereFirst(x => x.Model.ToLower() == CivilWithLegsModel.ToLower() && !x.Deleted);

                                        if (CheckSideArmModelIfExist != null)
                                        {
                                            CivilWithLegsTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Tower Type) coulumn's value: ({CivilWithLegsModel}) is already exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = true,
                                                RefTable = Helpers.Constants.TablesNames.TLIcivilWithLegLibrary.ToString(),
                                                SheetName = "Type Of Support Specs",
                                                UniqueName = $"(Tower Type) : ({CivilWithLegsModel})"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        NewCivilWithLegsLibraryEntity.Model = CivilWithLegsModel;

                                        string CivilWithLegsHeight_Designed = CivilWithLegsDataTable.Rows[j]["height"].ToString();
                                        if (!string.IsNullOrEmpty(CivilWithLegsHeight_Designed))
                                        {
                                            CheckParser = float.TryParse(CivilWithLegsHeight_Designed, out FloatParser);

                                            if (CheckParser)
                                                NewCivilWithLegsLibraryEntity.Height_Designed = FloatParser;

                                            else
                                            {
                                                CivilWithLegsTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(height) coulumn's value: ({CivilWithLegsHeight_Designed}) must be a number",
                                                    IsDeleted = false,
                                                    IsLib = true,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithLegLibrary.ToString(),
                                                    SheetName = "Type Of Support Specs",
                                                    UniqueName = $"(Tower Type) : ({CivilWithLegsModel})"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }

                                        string CivilWithLegsSupportType = CivilWithLegsDataTable.Rows[j]["Support Type"].ToString();
                                        if (!string.IsNullOrEmpty(CivilWithLegsSupportType))
                                        {
                                            TLIsupportTypeDesigned CheckCivilWithLegsSupportType = _unitOfWork.SupportTypeDesignedRepository
                                                .GetWhereFirst(x => x.Name.ToLower() == CivilWithLegsSupportType.ToLower() && !x.Deleted);

                                            if (CheckCivilWithLegsSupportType == null)
                                            {
                                                TLIsupportTypeDesigned NewCivilWithLegsSupportType = new TLIsupportTypeDesigned()
                                                {
                                                    Name = CivilWithLegsSupportType,
                                                    Deleted = false,
                                                    Disable = false
                                                };

                                                _unitOfWork.SupportTypeDesignedRepository.Add(NewCivilWithLegsSupportType);
                                                _unitOfWork.SaveChanges();

                                                NewCivilWithLegsLibraryEntity.supportTypeDesignedId = NewCivilWithLegsSupportType.Id;
                                            }
                                            else
                                            {
                                                NewCivilWithLegsLibraryEntity.supportTypeDesignedId = CheckCivilWithLegsSupportType.Id;
                                            }
                                        }

                                        NewCivilWithLegsLibraryEntity.Prefix = CivilWithLegsDataTable.Rows[j]["PREFIX"].ToString();

                                        string CivilWithLegsMax_load_M2 = CivilWithLegsDataTable.Rows[j]["Max load"].ToString();
                                        if (!string.IsNullOrEmpty(CivilWithLegsMax_load_M2))
                                        {
                                            CheckParser = float.TryParse(CivilWithLegsMax_load_M2, out FloatParser);

                                            if (CheckParser)
                                                NewCivilWithLegsLibraryEntity.Max_load_M2 = FloatParser;

                                            else
                                            {
                                                CivilWithLegsTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Max load) coulumn's value: ({CivilWithLegsMax_load_M2}) must be a number",
                                                    IsDeleted = false,
                                                    IsLib = true,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithLegLibrary.ToString(),
                                                    SheetName = "Type Of Support Specs",
                                                    UniqueName = $"(Tower Type) : ({CivilWithLegsModel})"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }

                                        string CivilWithLegsStructureType = CivilWithLegsDataTable.Rows[j]["Structure Type"].ToString();
                                        if (!string.IsNullOrEmpty(CivilWithLegsStructureType))
                                        {
                                            TLIstructureType CheckCivilWithLegsStructureType = _unitOfWork.StructureTypeRepository
                                                .GetWhereFirst(x => x.Name.ToLower() == CivilWithLegsStructureType.ToLower() && !x.Deleted);

                                            if (CheckCivilWithLegsStructureType == null)
                                            {
                                                TLIstructureType NewCivilWithLegsStructureType = new TLIstructureType()
                                                {
                                                    Name = CivilWithLegsSupportType,
                                                    Deleted = false,
                                                    Disable = false
                                                };

                                                _unitOfWork.StructureTypeRepository.Add(NewCivilWithLegsStructureType);
                                                _unitOfWork.SaveChanges();

                                                NewCivilWithLegsLibraryEntity.structureTypeId = NewCivilWithLegsStructureType.Id;
                                            }
                                            else
                                            {
                                                NewCivilWithLegsLibraryEntity.structureTypeId = CheckCivilWithLegsStructureType.Id;
                                            }
                                        }

                                        string CivilWithLegsSectionsLegType = CivilWithLegsDataTable.Rows[j]["Section(Leg)_type"].ToString();
                                        if (!string.IsNullOrEmpty(CivilWithLegsSectionsLegType))
                                        {
                                            TLIsectionsLegType CheckCivilWithLegsSectionsLegType = _unitOfWork.SectionsLegTypeRepository
                                                .GetWhereFirst(x => x.Name.ToLower() == CivilWithLegsStructureType.ToLower() && !x.Deleted);

                                            if (CheckCivilWithLegsSectionsLegType == null)
                                            {
                                                TLIsectionsLegType NewCivilWithLegsSectionsLegType = new TLIsectionsLegType()
                                                {
                                                    Name = CivilWithLegsSupportType,
                                                    Deleted = false,
                                                    Disable = false
                                                };

                                                _unitOfWork.SectionsLegTypeRepository.Add(NewCivilWithLegsSectionsLegType);
                                                _unitOfWork.SaveChanges();

                                                NewCivilWithLegsLibraryEntity.sectionsLegTypeId = NewCivilWithLegsSectionsLegType.Id;
                                            }
                                            else
                                            {
                                                NewCivilWithLegsLibraryEntity.sectionsLegTypeId = CheckCivilWithLegsSectionsLegType.Id;
                                            }
                                        }

                                        NewCivilWithLegsLibraryEntity.Deleted = false;
                                        NewCivilWithLegsLibraryEntity.Active = true;

                                        _unitOfWork.CivilWithLegLibraryRepository.Add(NewCivilWithLegsLibraryEntity);
                                        _unitOfWork.SaveChanges();

                                        string Supplier = CivilWithLegsDataTable.Rows[j]["Supplier"].ToString();
                                        if (!string.IsNullOrEmpty(Supplier))
                                        {
                                            AddLogistical(Supplier, "Supplier", "CivilSupport", "TLIcivilWithLegLibrary", NewCivilWithLegsLibraryEntity.Id);
                                        }

                                        var ObjectForAddInCashList = _unitOfWork.CivilWithLegLibraryRepository
                                            .GetIncludeWhereFirst(x => x.Id == NewCivilWithLegsLibraryEntity.Id, x => x.civilSteelSupportCategory,
                                                x => x.sectionsLegType, x => x.structureType, x => x.supportTypeDesigned);

                                        CivilWithLegsTransaction.Complete();

                                        //CivilLibraryService._CivilWithLegLibraryEntities.Add(ObjectForAddInCashList);

                                        // Dimensions / Bottom_ Top /  between legs
                                        // Diagonal member dimension (at base plate) (Installation)
                                        // NB.Bolts on connection leg (Installation)
                                        // Section Leg Dimension
                                        // Location at Design
                                    }
                                }
                                catch (Exception err)
                                {
                                    CivilWithLegsTransaction.Dispose();

                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                    {
                                        CreatedAt = DateTime.Now,
                                        ErrMsg = err.Message,
                                        IsDeleted = false,
                                        IsLib = true,
                                        RefTable = Helpers.Constants.TablesNames.TLIcivilWithLegLibrary.ToString(),
                                        SheetName = "Type Of Support Specs",
                                        UniqueName = $"(Tower Type) : ({CivilWithLegsDataTable.Rows[j]["Tower Type"]})"
                                    };

                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                    _unitOfWork.SaveChanges();

                                    continue;
                                }
                            }
                        }
                        System.IO.File.Delete(FilePath);
                        return new Response<string>("Succeed");
                    }
                }
                catch (Exception err)
                {
                    System.IO.File.Delete(FilePath);
                    return new Response<string>(err.Message);
                }
            }
        }
        public Response<string> ImportLibraryFileData(IFormFile File)
        {
            List<TLIdataType> DataTypes = _unitOfWork.DataTypeRepository.GetAllWithoutCount().ToList();
            List<TLItablesNames> TablesNames = _unitOfWork.TablesNamesRepository.GetAllWithoutCount().ToList();

            int RowNumber = 0;
            float FloatParser = 0;
            bool CheckParser = false;
            string FileConverter = string.Empty;
            try
            {
                FileConverter = SaveFileAndGetFilePath(File);
                ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
                ExcelPackage pck = new ExcelPackage();
                var ci = (CultureInfo)CultureInfo.CurrentCulture.Clone();
            }
            catch (Exception err)
            {
                return new Response<string>(err.Message);
            }

            #region Mast

            OleDbDataAdapter MastDbDataAdapter = new OleDbDataAdapter("SELECT * FROM [Mast$]", FileConverter);
            DataSet MastDataSet = new DataSet();

            try
            {
                MastDbDataAdapter.Fill(MastDataSet, "ExcelTable");
            }
            catch (OleDbException)
            {
                goto MW_ODUSection;
            }

            DataTable CivilWithoutLegLibrarytable = MastDataSet.Tables["ExcelTable"];

            RowNumber = 0;

            foreach (DataColumn Column in CivilWithoutLegLibrarytable.Columns)
            {
                Column.ColumnName = Column.ColumnName.Trim();
            }

            string MastCategroyName = Helpers.Constants.CivilWithoutLegCategories.Mast.ToString();

            foreach (DataRow row in CivilWithoutLegLibrarytable.Rows)
            {
                using (TransactionScope MastTransaction = new TransactionScope(TransactionScopeOption.Required,
                    new System.TimeSpan(0, 15, 0)))
                {
                    RowNumber++;

                    string MastModel = row["Model Name"].ToString();

                    if (!string.IsNullOrEmpty(MastModel))
                    {
                        TLIcivilWithoutLegLibrary CheckMastModelIfExist = _unitOfWork.CivilWithoutLegLibraryRepository
                            .GetIncludeWhereFirst(x => x.Model.ToLower() == MastModel.ToLower() && !x.Deleted &&
                                x.CivilWithoutLegCategory.Name.ToLower() == MastCategroyName.ToLower(), x => x.CivilWithoutLegCategory);

                        if (CheckMastModelIfExist != null)
                        {
                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                            {
                                CreatedAt = DateTime.Now,
                                ErrMsg = $"(Model Name) coulumn's value: ({MastModel}) is already exist in TLIS",
                                IsDeleted = false,
                                IsLib = true,
                                RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLegLibrary.ToString(),
                                SheetName = "Mast",
                                UniqueName = $"(Model Name) : {MastModel}"
                            };

                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                            _unitOfWork.SaveChanges();

                            MastTransaction.Complete();

                            continue;
                        }

                        TLIcivilWithoutLegLibrary NewMastEntity = new TLIcivilWithoutLegLibrary();

                        NewMastEntity.Model = MastModel;

                        string Type = row["Type1"].ToString();

                        TLIinstallationCivilwithoutLegsType CheckInstallationTypeIfExist = _unitOfWork.InstCivilwithoutLegsTypeRepository
                            .GetWhereFirst(x => x.Name.ToLower() == Type.ToLower() && !x.Deleted);

                        if (CheckInstallationTypeIfExist != null)
                            NewMastEntity.InstCivilwithoutLegsTypeId = CheckInstallationTypeIfExist.Id;

                        else
                        {
                            TLIinstallationCivilwithoutLegsType NewInstallationTypeEntity = new TLIinstallationCivilwithoutLegsType()
                            {
                                Name = Type,
                                Deleted = false,
                                Disable = false
                            };

                            _unitOfWork.InstCivilwithoutLegsTypeRepository.Add(NewInstallationTypeEntity);
                            _unitOfWork.SaveChanges();

                            NewMastEntity.InstCivilwithoutLegsTypeId = NewInstallationTypeEntity.Id;
                        }

                        string MastHeight_Designed = row["Height As Design (m)"].ToString();

                        if (!string.IsNullOrEmpty(MastHeight_Designed))
                        {
                            CheckParser = float.TryParse(MastHeight_Designed, out FloatParser);

                            if (CheckParser)
                                NewMastEntity.Height_Designed = FloatParser;

                            else
                            {
                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                {
                                    CreatedAt = DateTime.Now,
                                    ErrMsg = $"(Height As Design (m)) coulumn's value: ({MastHeight_Designed}) must be a number",
                                    IsDeleted = false,
                                    IsLib = true,
                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLegLibrary.ToString(),
                                    SheetName = "Mast",
                                    UniqueName = $"(Model Name) : {MastModel}"
                                };

                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                _unitOfWork.SaveChanges();

                                MastTransaction.Complete();

                                continue;
                            }
                        }

                        string MastMax_Load = row["Max Load (m2)"].ToString();

                        if (!string.IsNullOrEmpty(MastMax_Load))
                        {
                            CheckParser = float.TryParse(MastMax_Load, out FloatParser);

                            if (CheckParser)
                                NewMastEntity.Max_Load = FloatParser;

                            else
                            {
                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                {
                                    CreatedAt = DateTime.Now,
                                    ErrMsg = $"(Max Load (m2)) coulumn's value: ({MastMax_Load}) must be a number",
                                    IsDeleted = false,
                                    IsLib = true,
                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLegLibrary.ToString(),
                                    SheetName = "Mast",
                                    UniqueName = $"(Model Name) : {MastModel}"
                                };

                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                _unitOfWork.SaveChanges();

                                MastTransaction.Complete();

                                continue;
                            }
                        }

                        NewMastEntity.SpaceLibrary = 0;
                        NewMastEntity.Active = true;
                        NewMastEntity.Deleted = false;

                        NewMastEntity.CivilSteelSupportCategoryId = _unitOfWork.CivilSteelSupportCategoryRepository
                            .GetWhereFirst(x => x.Name.ToLower() == MastCategroyName.ToLower()).Id;

                        NewMastEntity.CivilWithoutLegCategoryId = _unitOfWork.CivilWithoutLegCategoryRepository
                            .GetWhereFirst(x => x.Name.ToLower() == Helpers.Constants.CivilWithoutLegCategories.Mast.ToString().ToLower()).Id;

                        _unitOfWork.CivilWithoutLegLibraryRepository.Add(NewMastEntity);
                        _unitOfWork.SaveChanges();
                    }
                    else
                    {
                        MastTransaction.Complete();
                        continue;
                    }

                    MastTransaction.Complete();
                }
            }
        #endregion
        #region mwODULibrary
        MW_ODUSection:
            OleDbDataAdapter MW_ODUDbDataAdapter = new OleDbDataAdapter("SELECT * FROM [ODU$]", FileConverter);
            DataSet ODUDataSet = new DataSet();

            try
            {
                MW_ODUDbDataAdapter.Fill(ODUDataSet, "ExcelTable");
            }
            catch (OleDbException)
            {
                goto RadioAntennaSection;
            }

            DataTable ODULibrary = ODUDataSet.Tables["ExcelTable"];
            RowNumber = 0;
            foreach (DataColumn Column in ODULibrary.Columns)
            {
                Column.ColumnName = Column.ColumnName.Trim();
            }

            TLItablesNames MW_ODULibraryTableNameEntity = _unitOfWork.TablesNamesRepository
                .GetWhereFirst(x => x.TableName.ToLower() == Helpers.Constants.TablesNames.TLImwODULibrary.ToString().ToLower());

            foreach (DataRow row in ODULibrary.Rows)
            {
                using (TransactionScope MW_ODUTransaction = new TransactionScope(TransactionScopeOption.Required,
                    new System.TimeSpan(0, 15, 0)))
                {
                    RowNumber++;

                    string MW_ODUModel = row["Name1"].ToString();

                    if (!string.IsNullOrEmpty(MW_ODUModel))
                    {
                        TLImwODULibrary CheckMW_ODUModelIfExist = _unitOfWork.MW_ODULibraryRepository
                            .GetWhereFirst(x => x.Model.ToLower() == MW_ODUModel.ToLower() && !x.Deleted);

                        if (CheckMW_ODUModelIfExist != null)
                        {
                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                            {
                                CreatedAt = DateTime.Now,
                                ErrMsg = $"(Name1) coulumn's value: ({MW_ODUModel}) is already exist in TLIS",
                                IsDeleted = false,
                                IsLib = true,
                                RefTable = Helpers.Constants.TablesNames.TLImwODULibrary.ToString(),
                                SheetName = "ODU",
                                UniqueName = $"Name1 : {MW_ODUModel}"
                            };

                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                            _unitOfWork.SaveChanges();

                            MW_ODUTransaction.Complete();

                            continue;
                        }

                        TLImwODULibrary NewMWODULibraryEntity = new TLImwODULibrary();

                        NewMWODULibraryEntity.Model = row["Name1"].ToString();

                        string H_W_D = row["H_W_D"].ToString();

                        if (!H_W_D.IsNullOrEmpty())
                        {
                            string[] H_W_D_Seperator = H_W_D.Split(' ', '.');

                            NewMWODULibraryEntity.H_W_D = H_W_D;

                            CheckParser = float.TryParse(H_W_D_Seperator[0], out FloatParser);

                            if (CheckParser)
                                NewMWODULibraryEntity.Height = FloatParser;

                            CheckParser = float.TryParse(H_W_D_Seperator[3], out FloatParser);

                            if (CheckParser)
                                NewMWODULibraryEntity.Width = FloatParser;

                            CheckParser = float.TryParse(H_W_D_Seperator[6], out FloatParser);

                            if (CheckParser)
                                NewMWODULibraryEntity.Depth = FloatParser;

                            if (!CheckParser)
                            {
                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                {
                                    CreatedAt = DateTime.Now,
                                    ErrMsg = $"(H_W_D) coulumn's value: ({H_W_D}) can't be seperated to (Height, Width, Depth)",
                                    IsDeleted = false,
                                    IsLib = true,
                                    RefTable = Helpers.Constants.TablesNames.TLImwODULibrary.ToString(),
                                    SheetName = "ODU",
                                    UniqueName = $"Name1 : {MW_ODUModel}"
                                };

                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                _unitOfWork.SaveChanges();

                                MW_ODUTransaction.Complete();

                                continue;
                            }
                            else
                                NewMWODULibraryEntity.SpaceLibrary = NewMWODULibraryEntity.Height * NewMWODULibraryEntity.Width;
                        }
                        else
                        {
                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                            {
                                CreatedAt = DateTime.Now,
                                ErrMsg = $"(H_W_D) coulumn's value can't be null",
                                IsDeleted = false,
                                IsLib = true,
                                RefTable = Helpers.Constants.TablesNames.TLImwODULibrary.ToString(),
                                SheetName = "ODU",
                                UniqueName = $"Name1 : {MW_ODUModel}"
                            };

                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                            _unitOfWork.SaveChanges();

                            MW_ODUTransaction.Complete();

                            continue;
                        }
                        string Party = row["Party"].ToString();

                        TLIparity CheckParityIfExist = _unitOfWork.ParityRepository
                            .GetWhereFirst(x => x.Name.ToLower() == Party.ToLower() && !x.Delete);

                        if (CheckParityIfExist != null)
                            NewMWODULibraryEntity.parityId = CheckParityIfExist.Id;

                        else
                        {
                            TLIparity NewParityEntity = new TLIparity()
                            {
                                Name = Party,
                                Delete = false,
                                Disable = false
                            };

                            _unitOfWork.ParityRepository.Add(NewParityEntity);
                            _unitOfWork.SaveChanges();

                            NewMWODULibraryEntity.parityId = NewParityEntity.Id;
                        }

                        NewMWODULibraryEntity.frequency_range = row["Frequency Range"].ToString();
                        NewMWODULibraryEntity.frequency_band = row["Freaquency Band"].ToString();

                        string MastWeight = row["Weight"].ToString();

                        if (!string.IsNullOrEmpty(MastWeight))
                        {
                            CheckParser = float.TryParse(row["Weight"].ToString(), out FloatParser);

                            if (CheckParser)
                                NewMWODULibraryEntity.Weight = FloatParser;

                            else
                            {
                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                {
                                    CreatedAt = DateTime.Now,
                                    ErrMsg = $"(Weight) coulumn's value: ({row["Weight"]}) must be a number",
                                    IsDeleted = false,
                                    IsLib = true,
                                    RefTable = Helpers.Constants.TablesNames.TLImwODULibrary.ToString(),
                                    SheetName = "ODU",
                                    UniqueName = $"Name1 : {MW_ODUModel}"
                                };

                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                _unitOfWork.SaveChanges();

                                MW_ODUTransaction.Complete();

                                continue;
                            }
                        }
                        else
                            NewMWODULibraryEntity.Weight = 0;

                        _unitOfWork.MW_ODULibraryRepository.Add(NewMWODULibraryEntity);
                        _unitOfWork.SaveChanges();

                        string Vendor = row["Vender Board Name"].ToString();

                        if (!string.IsNullOrEmpty(Vendor))
                        {
                            AddLogistical(Vendor, "Vendor", "MW", "TLImwODULibrary", NewMWODULibraryEntity.Id);
                        }

                        List<KeyValuePair<string, string>> MW_ODUDynamicAttributesToAdd = new List<KeyValuePair<string, string>>()
                            {
                                new KeyValuePair<string, string>("Size", row["Size"].ToString()),
                                new KeyValuePair<string, string>("Type1", row["Type1"].ToString()),
                                new KeyValuePair<string, string>("Vender Board Name", row["Vender Board Name"].ToString())
                            };

                        foreach (KeyValuePair<string, string> MW_ODUDynamicAttribute in MW_ODUDynamicAttributesToAdd)
                        {
                            TLIdynamicAtt CheckIfDynamicExist = _unitOfWork.DynamicAttRepository
                                .GetIncludeWhereFirst(x => x.Key.ToLower() == MW_ODUDynamicAttribute.Key.ToLower() &&
                                    x.tablesNames.TableName.ToLower() == MW_ODULibraryTableNameEntity.TableName.ToLower(),
                                        x => x.tablesNames);

                            if (CheckIfDynamicExist != null)
                            {
                                TLIdynamicAttLibValue NewDynamicAttributeForMW_ODUValue = new TLIdynamicAttLibValue();

                                NewDynamicAttributeForMW_ODUValue.ValueString = MW_ODUDynamicAttribute.Value;
                                NewDynamicAttributeForMW_ODUValue.DynamicAttId = CheckIfDynamicExist.Id;
                                NewDynamicAttributeForMW_ODUValue.disable = false;
                                NewDynamicAttributeForMW_ODUValue.tablesNamesId = MW_ODULibraryTableNameEntity.Id;

                                NewDynamicAttributeForMW_ODUValue.InventoryId = NewMWODULibraryEntity.Id;

                                _unitOfWork.DynamicAttLibRepository.Add(NewDynamicAttributeForMW_ODUValue);
                                _unitOfWork.SaveChanges();
                            }
                            else
                            {
                                TLIdynamicAtt NewDynamicAttributeForMW_ODU = new TLIdynamicAtt()
                                {
                                    Key = MW_ODUDynamicAttribute.Key,
                                    LibraryAtt = true,
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                    Description = "ForImpotData",
                                    tablesNamesId = MW_ODULibraryTableNameEntity.Id,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                };

                                _unitOfWork.DynamicAttRepository.Add(NewDynamicAttributeForMW_ODU);
                                _unitOfWork.SaveChanges();

                                if (!string.IsNullOrEmpty(MW_ODUDynamicAttribute.Value))
                                {
                                    TLIdynamicAttLibValue NewDynamicAttributeForMW_ODUValue = new TLIdynamicAttLibValue()
                                    {
                                        ValueString = MW_ODUDynamicAttribute.Value,
                                        disable = false,
                                        tablesNamesId = MW_ODULibraryTableNameEntity.Id,
                                        InventoryId = NewMWODULibraryEntity.Id,
                                    };

                                    _unitOfWork.DynamicAttLibRepository.Add(NewDynamicAttributeForMW_ODUValue);
                                    _unitOfWork.SaveChanges();
                                }
                            }
                        }
                    }
                    else
                    {
                        MW_ODUTransaction.Complete();
                        continue;
                    }

                    MW_ODUTransaction.Complete();
                }
            }
        #endregion
        #region Radio Ant
        RadioAntennaSection:


            OleDbDataAdapter RadioAntennaDbAdapter = new OleDbDataAdapter("SELECT * FROM [Radio Ant$]", FileConverter);
            DataSet RadioAntennaDataSet = new DataSet();

            try
            {
                RadioAntennaDbAdapter.Fill(RadioAntennaDataSet, "ExcelTable");
            }
            catch (OleDbException)
            {
                goto SideArmSection;
            }

            DataTable RadioAntLib = RadioAntennaDataSet.Tables["ExcelTable"];

            RowNumber = 0;
            foreach (DataColumn Column in RadioAntLib.Columns)
            {
                Column.ColumnName = Column.ColumnName.Trim();
            }

            TLItablesNames RadioAntennaLibraryTableNameEntity = _unitOfWork.TablesNamesRepository
                .GetWhereFirst(x => x.TableName.ToLower() == Helpers.Constants.TablesNames.TLIradioAntennaLibrary.ToString().ToLower());

            foreach (DataRow row in RadioAntLib.Rows)
            {
                using (TransactionScope RadioAntennaTransaction = new TransactionScope(TransactionScopeOption.Required,
                    new System.TimeSpan(0, 15, 0)))
                {
                    RowNumber++;

                    string RadioAntennaModel = row["antenna_model"].ToString();

                    if (!string.IsNullOrEmpty(RadioAntennaModel))
                    {
                        TLIradioAntennaLibrary radioAntennaLibrary = _unitOfWork.RadioAntennaLibraryRepository
                            .GetWhereFirst(x => x.Model.ToLower() == RadioAntennaModel.ToLower() && !x.Deleted);

                        if (radioAntennaLibrary != null)
                        {
                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                            {
                                CreatedAt = DateTime.Now,
                                ErrMsg = $"(antenna_model) coulumn's value: ({RadioAntennaModel}) is already exist in TLIS",
                                IsDeleted = false,
                                IsLib = true,
                                RefTable = Helpers.Constants.TablesNames.TLIradioAntennaLibrary.ToString(),
                                SheetName = "Radio Ant",
                                UniqueName = $"antenna_model : {RadioAntennaModel}"
                            };

                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                            _unitOfWork.SaveChanges();

                            RadioAntennaTransaction.Complete();

                            continue;
                        }

                        TLIradioAntennaLibrary NewRadioAntennaLibraryEntity = new TLIradioAntennaLibrary();

                        NewRadioAntennaLibraryEntity.Model = RadioAntennaModel;
                        NewRadioAntennaLibraryEntity.FrequencyBand = row["frequencyband"].ToString();

                        string CSVWidth = row["width_cm"].ToString();
                        string RadioAntennaWidth = Regex.Replace(CSVWidth, "[^.0-9]", "");

                        if (!string.IsNullOrEmpty(RadioAntennaWidth))
                        {
                            CheckParser = float.TryParse(RadioAntennaWidth, out FloatParser);

                            if (CheckParser)
                                NewRadioAntennaLibraryEntity.Width = FloatParser;

                            else
                            {
                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                {
                                    CreatedAt = DateTime.Now,
                                    ErrMsg = $"(width_cm) coulumn's value: ({CSVWidth}) must be a number",
                                    IsDeleted = false,
                                    IsLib = true,
                                    RefTable = Helpers.Constants.TablesNames.TLIradioAntennaLibrary.ToString(),
                                    SheetName = "Radio Ant",
                                    UniqueName = $"antenna_model : {RadioAntennaModel}"
                                };

                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                _unitOfWork.SaveChanges();

                                RadioAntennaTransaction.Complete();

                                continue;
                            }
                        }

                        string CSVDepth = row["Depth"].ToString();
                        string RadioAntennaDepth = Regex.Replace(CSVDepth, "[^.0-9]", "");

                        if (!string.IsNullOrEmpty(RadioAntennaDepth))
                        {
                            CheckParser = float.TryParse(RadioAntennaDepth, out FloatParser);

                            if (CheckParser)
                                NewRadioAntennaLibraryEntity.Depth = FloatParser;

                            else
                            {
                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                {
                                    CreatedAt = DateTime.Now,
                                    ErrMsg = $"(Depth) coulumn's value: ({CSVDepth}) must be a number",
                                    IsDeleted = false,
                                    IsLib = true,
                                    RefTable = Helpers.Constants.TablesNames.TLIradioAntennaLibrary.ToString(),
                                    SheetName = "Radio Ant",
                                    UniqueName = $"antenna_model : {RadioAntennaModel}"
                                };

                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                _unitOfWork.SaveChanges();

                                RadioAntennaTransaction.Complete();

                                continue;
                            }
                        }

                        NewRadioAntennaLibraryEntity.Deleted = false;
                        NewRadioAntennaLibraryEntity.Active = true;

                        string CSVWeight = row["weight"].ToString();
                        string RadioAntennaWeight = Regex.Replace(CSVWeight, "[^.0-9]", "");

                        if (!string.IsNullOrEmpty(RadioAntennaWeight))
                        {
                            CheckParser = float.TryParse(RadioAntennaWeight, out FloatParser);

                            if (CheckParser)
                                NewRadioAntennaLibraryEntity.Weight = FloatParser;

                            else
                            {
                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                {
                                    CreatedAt = DateTime.Now,
                                    ErrMsg = $"(weight) coulumn's value: ({CSVWeight}) must be a number",
                                    IsDeleted = false,
                                    IsLib = true,
                                    RefTable = Helpers.Constants.TablesNames.TLIradioAntennaLibrary.ToString(),
                                    SheetName = "Radio Ant",
                                    UniqueName = $"antenna_model : {RadioAntennaModel}"
                                };

                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                _unitOfWork.SaveChanges();

                                RadioAntennaTransaction.Complete();

                                continue;
                            }
                        }
                        else
                            NewRadioAntennaLibraryEntity.Weight = 0;

                        string CSVLength = row["length _cm"].ToString();
                        string RadioAntennaLength = Regex.Replace(CSVLength, "[^.0-9]", "");

                        if (!string.IsNullOrEmpty(RadioAntennaLength))
                        {
                            CheckParser = float.TryParse(RadioAntennaLength, out FloatParser);

                            if (CheckParser)
                                NewRadioAntennaLibraryEntity.Length = FloatParser;

                            else
                            {
                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                {
                                    CreatedAt = DateTime.Now,
                                    ErrMsg = $"(length _cm) coulumn's value: ({CSVLength}) must be a number",
                                    IsDeleted = false,
                                    IsLib = true,
                                    RefTable = Helpers.Constants.TablesNames.TLIradioAntennaLibrary.ToString(),
                                    SheetName = "Radio Ant",
                                    UniqueName = $"antenna_model : {RadioAntennaModel}"
                                };

                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                _unitOfWork.SaveChanges();

                                RadioAntennaTransaction.Complete();

                                continue;
                            }
                        }
                        else
                            NewRadioAntennaLibraryEntity.Length = 0;

                        if (!string.IsNullOrEmpty(RadioAntennaLength) && !string.IsNullOrEmpty(RadioAntennaWidth))
                            NewRadioAntennaLibraryEntity.SpaceLibrary = float.Parse(RadioAntennaLength) * float.Parse(RadioAntennaWidth);

                        _unitOfWork.RadioAntennaLibraryRepository.Add(NewRadioAntennaLibraryEntity);
                        _unitOfWork.SaveChanges();

                        string Vendor = row["vendor"].ToString();
                        if (!string.IsNullOrEmpty(Vendor))
                        {
                            AddLogistical(Vendor, "Vendor", "Radio", "TLIradioAntennaLibrary", NewRadioAntennaLibraryEntity.Id);
                        }

                        List<KeyValuePair<string, string>> RadioAntennaDynamicAttributes = new List<KeyValuePair<string, string>>()
                            {
                                new KeyValuePair<string, string>("Modified", row["Modified"].ToString()),
                                new KeyValuePair<string, string>("Modified By", row["Modified By"].ToString()),
                                new KeyValuePair<string, string>("Type1", row["Type1"].ToString())
                            };

                        foreach (KeyValuePair<string, string> RadioAntennaDynamicAttribute in RadioAntennaDynamicAttributes)
                        {
                            TLIdynamicAtt CheckIfDynamicIsAlreadyExist = _unitOfWork.DynamicAttRepository
                                .GetIncludeWhereFirst(x => x.Key == RadioAntennaDynamicAttribute.Key &&
                                    x.tablesNames.TableName.ToLower() == RadioAntennaLibraryTableNameEntity.TableName.ToLower(),
                                        x => x.tablesNames);

                            if (CheckIfDynamicIsAlreadyExist != null && !string.IsNullOrEmpty(RadioAntennaDynamicAttribute.Value))
                            {
                                TLIdynamicAttLibValue NewDynamicAttLibValue = new TLIdynamicAttLibValue()
                                {
                                    ValueString = RadioAntennaDynamicAttribute.Value,
                                    DynamicAttId = CheckIfDynamicIsAlreadyExist.Id,
                                    disable = false,
                                    tablesNamesId = RadioAntennaLibraryTableNameEntity.Id,
                                    InventoryId = NewRadioAntennaLibraryEntity.Id
                                };

                                _unitOfWork.DynamicAttLibRepository.Add(NewDynamicAttLibValue);
                                _unitOfWork.SaveChanges();
                            }
                            else
                            {
                                TLIdynamicAtt NewDynamicAttributeEntity = new TLIdynamicAtt()
                                {
                                    Key = RadioAntennaDynamicAttribute.Key,
                                    LibraryAtt = true,
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                    Description = "ForImpotData",
                                    tablesNamesId = RadioAntennaLibraryTableNameEntity.Id,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                };

                                _unitOfWork.DynamicAttRepository.Add(NewDynamicAttributeEntity);
                                _unitOfWork.SaveChanges();

                                if (!string.IsNullOrEmpty(RadioAntennaDynamicAttribute.Value))
                                {
                                    TLIdynamicAttLibValue NewDynamicAttLibValue = new TLIdynamicAttLibValue()
                                    {
                                        ValueString = RadioAntennaDynamicAttribute.Value,
                                        DynamicAttId = NewDynamicAttributeEntity.Id,
                                        disable = false,
                                        tablesNamesId = RadioAntennaLibraryTableNameEntity.Id,
                                        InventoryId = NewRadioAntennaLibraryEntity.Id
                                    };

                                    _unitOfWork.DynamicAttLibRepository.Add(NewDynamicAttLibValue);
                                    _unitOfWork.SaveChanges();
                                }
                            }
                        }
                    }

                    RadioAntennaTransaction.Complete();
                }
            }
        #endregion
        #region Side Arm Lib
        SideArmSection:
            OleDbDataAdapter SideArmLibraryDbAdapter = new OleDbDataAdapter("SELECT * FROM [Side Arm$]", FileConverter);
            DataSet SideArmDataSet = new DataSet();

            try
            {
                SideArmLibraryDbAdapter.Fill(SideArmDataSet, "ExcelTable");
            }
            catch (OleDbException)
            {
                goto RadioRRUSection;
            }

            DataTable SideArmLibrary = SideArmDataSet.Tables["ExcelTable"];
            RowNumber = 0;
            foreach (DataColumn Column in SideArmLibrary.Columns)
            {
                Column.ColumnName = Column.ColumnName.Trim();
            }

            List<TLIimportSheet> SideArmSheetList = _unitOfWork.ImportSheetRepository
                .GetWhere(x => x.SheetName.ToLower() == "Side Arm".ToLower() && x.IsLib && !x.IsDeleted).ToList();

            foreach (DataRow row in SideArmLibrary.Rows)
            {
                using (TransactionScope SideArmTransaction = new TransactionScope(TransactionScopeOption.Required,
                    new System.TimeSpan(0, 15, 0)))
                {
                    RowNumber++;

                    string SideArmModel = row["SIDE_ARM_SPECS_TYPE"].ToString();

                    if (!string.IsNullOrEmpty(SideArmModel))
                    {
                        List<TLIimportSheet> UniqueNameErrors = SideArmSheetList.Where(x =>
                            x.UniqueName.ToLower().Split(':')[1].Trim() == SideArmModel).ToList();

                        TLIsideArmLibrary CheckSideArmModelIfExist = _unitOfWork.SideArmLibraryRepository
                            .GetWhereFirst(x => x.Model.ToLower() == SideArmModel.ToLower() && !x.Deleted);

                        if (CheckSideArmModelIfExist != null)
                        {
                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                            {
                                CreatedAt = DateTime.Now,
                                ErrMsg = $"(SIDE_ARM_SPECS_TYPE) coulumn's value: ({SideArmModel}) is already exist in TLIS",
                                IsDeleted = false,
                                IsLib = true,
                                RefTable = Helpers.Constants.TablesNames.TLIsideArmLibrary.ToString(),
                                SheetName = "Side Arm",
                                UniqueName = $"(SIDE_ARM_SPECS_TYPE) : ({SideArmModel})"
                            };

                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                            _unitOfWork.SaveChanges();

                            SideArmTransaction.Complete();

                            continue;
                        }

                        TLIsideArmLibrary NewSideArmLibraryEntity = new TLIsideArmLibrary();

                        NewSideArmLibraryEntity.Model = row["SIDE_ARM_SPECS_TYPE"].ToString();
                        NewSideArmLibraryEntity.Note = row["NOTE"].ToString();
                        NewSideArmLibraryEntity.Height = 0;
                        NewSideArmLibraryEntity.Deleted = false;
                        NewSideArmLibraryEntity.Active = true;

                        string CSVSideArmWidth = row["weidth"].ToString();
                        if (!string.IsNullOrEmpty(CSVSideArmWidth))
                        {
                            CheckParser = float.TryParse(CSVSideArmWidth, out FloatParser);

                            if (CheckParser)
                                NewSideArmLibraryEntity.Width = FloatParser;

                            else
                            {
                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                {
                                    CreatedAt = DateTime.Now,
                                    ErrMsg = $"(weidth) coulumn's value: ({CSVSideArmWidth}) must be a number",
                                    IsDeleted = false,
                                    IsLib = true,
                                    RefTable = Helpers.Constants.TablesNames.TLIsideArmLibrary.ToString(),
                                    SheetName = "Side Arm",
                                    UniqueName = $"(SIDE_ARM_SPECS_TYPE) : ({SideArmModel})"
                                };

                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                _unitOfWork.SaveChanges();

                                SideArmTransaction.Complete();

                                continue;
                            }
                        }
                        else
                            NewSideArmLibraryEntity.Width = 0;

                        string CSVSideArmLength = row["LENGTH"].ToString();
                        if (!string.IsNullOrEmpty(CSVSideArmLength))
                        {
                            CheckParser = float.TryParse(CSVSideArmLength, out FloatParser);

                            if (CheckParser)
                                NewSideArmLibraryEntity.Length = FloatParser;

                            else
                            {
                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                {
                                    CreatedAt = DateTime.Now,
                                    ErrMsg = $"(LENGTH) coulumn's value: ({CSVSideArmLength}) must be a number",
                                    IsDeleted = false,
                                    IsLib = true,
                                    RefTable = Helpers.Constants.TablesNames.TLIsideArmLibrary.ToString(),
                                    SheetName = "Side Arm",
                                    UniqueName = $"(SIDE_ARM_SPECS_TYPE) : ({SideArmModel})"
                                };

                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                _unitOfWork.SaveChanges();

                                SideArmTransaction.Complete();

                                continue;
                            }
                        }
                        else
                            NewSideArmLibraryEntity.Length = 0;

                        string CSVSideArmWeight = row["weight"].ToString();
                        if (!string.IsNullOrEmpty(CSVSideArmWeight))
                        {
                            CheckParser = float.TryParse(CSVSideArmWeight, out FloatParser);

                            if (CheckParser)
                                NewSideArmLibraryEntity.Weight = FloatParser;

                            else
                            {
                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                {
                                    CreatedAt = DateTime.Now,
                                    ErrMsg = $"(weight) coulumn's value: ({CSVSideArmWeight}) must be a number",
                                    IsDeleted = false,
                                    IsLib = true,
                                    RefTable = Helpers.Constants.TablesNames.TLIsideArmLibrary.ToString(),
                                    SheetName = "Side Arm",
                                    UniqueName = $"(SIDE_ARM_SPECS_TYPE) : ({SideArmModel})"
                                };

                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                _unitOfWork.SaveChanges();

                                SideArmTransaction.Complete();

                                continue;
                            }
                        }
                        else
                            NewSideArmLibraryEntity.Weight = 0;

                        NewSideArmLibraryEntity.SpaceLibrary = NewSideArmLibraryEntity.Length * NewSideArmLibraryEntity.Width;

                        _unitOfWork.SideArmLibraryRepository.Add(NewSideArmLibraryEntity);
                        _unitOfWork.SaveChanges();
                    }
                    else
                        break;

                    SideArmTransaction.Complete();
                }
            }
        #endregion
        #region Radio RRU Library
        RadioRRUSection:
            OleDbDataAdapter RadioRRULibraryDbAdapter = new OleDbDataAdapter("SELECT * FROM [RRU$]", FileConverter);
            DataSet RadioRRUDataSet = new DataSet();

            try
            {
                RadioRRULibraryDbAdapter.Fill(RadioRRUDataSet, "ExcelTable");
            }
            catch (OleDbException)
            {
                goto MW_RFUSection;
            }

            DataTable radioRRULib = RadioRRUDataSet.Tables["ExcelTable"];

            RowNumber = 0;
            foreach (DataColumn Column in radioRRULib.Columns)
            {
                Column.ColumnName = Column.ColumnName.Trim();
            }
            foreach (DataRow row in radioRRULib.Rows)
            {
                using (TransactionScope RadioRRUTransaction = new TransactionScope(TransactionScopeOption.Required,
                    new System.TimeSpan(0, 15, 0)))
                {
                    RowNumber++;

                    string RadioRRUModel = row["Name1"].ToString();

                    if (!string.IsNullOrEmpty(RadioRRUModel))
                    {
                        TLIradioRRULibrary CheckRadioRRUModelIfExist = _unitOfWork.RadioRRULibraryRepository
                            .GetWhereFirst(x => x.Model.ToLower() == RadioRRUModel.ToLower() && !x.Deleted);

                        if (CheckRadioRRUModelIfExist != null)
                        {
                            TLIimportSheet MastLibraryModelMissed = new TLIimportSheet()
                            {
                                CreatedAt = DateTime.Now,
                                ErrMsg = $"(Name1) coulumn's value: ({RadioRRUModel}) is already exist in TLIS",
                                IsDeleted = false,
                                IsLib = true,
                                RefTable = Helpers.Constants.TablesNames.TLIradioRRULibrary.ToString(),
                                SheetName = "RRU",
                                UniqueName = $"Name1 : {RadioRRUModel}"
                            };

                            _unitOfWork.ImportSheetRepository.Add(MastLibraryModelMissed);
                            _unitOfWork.SaveChanges();

                            RadioRRUTransaction.Complete();

                            continue;
                        }

                        TLIradioRRULibrary NewRadioRRULibraryEntity = new TLIradioRRULibrary();

                        NewRadioRRULibraryEntity.Model = RadioRRUModel;
                        NewRadioRRULibraryEntity.Type = row["Type1"].ToString();
                        NewRadioRRULibraryEntity.Band = row["band"].ToString();
                        NewRadioRRULibraryEntity.Active = true;
                        NewRadioRRULibraryEntity.Deleted = false;

                        string CSVRadioRRUWeight = row["Weight"].ToString();

                        if (!string.IsNullOrEmpty(CSVRadioRRUWeight))
                        {
                            CheckParser = float.TryParse(CSVRadioRRUWeight, out FloatParser);

                            if (CheckParser)
                                NewRadioRRULibraryEntity.Weight = FloatParser;

                            else
                            {
                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                {
                                    CreatedAt = DateTime.Now,
                                    ErrMsg = $"(Weight) coulumn's value: ({CSVRadioRRUWeight}) must be a number",
                                    IsDeleted = false,
                                    IsLib = true,
                                    RefTable = Helpers.Constants.TablesNames.TLIradioRRULibrary.ToString(),
                                    SheetName = "RRU",
                                    UniqueName = $"Name1 : {RadioRRUModel}"
                                };

                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                _unitOfWork.SaveChanges();

                                RadioRRUTransaction.Complete();

                                continue;
                            }
                        }
                        else
                            NewRadioRRULibraryEntity.Weight = 0;

                        string RadioRRULibraryL_W_H = row["l_w_h_cm3"].ToString();

                        if (!string.IsNullOrEmpty(RadioRRULibraryL_W_H))
                        {
                            string[] L_W_HSpliter = RadioRRULibraryL_W_H.Split(' ', '.');

                            CheckParser = float.TryParse(L_W_HSpliter[0], out FloatParser);

                            if (CheckParser)
                                NewRadioRRULibraryEntity.Length = FloatParser;

                            CheckParser = float.TryParse(L_W_HSpliter[3], out FloatParser);

                            if (CheckParser)
                                NewRadioRRULibraryEntity.Width = FloatParser;

                            CheckParser = float.TryParse(L_W_HSpliter[6], out FloatParser);

                            if (CheckParser)
                                NewRadioRRULibraryEntity.Height = FloatParser;

                            else
                            {
                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                {
                                    CreatedAt = DateTime.Now,
                                    ErrMsg = $"(l_w_h_cm3) coulumn's value: ({RadioRRULibraryL_W_H}) can't be seperated to " +
                                        $"(Length, Width, Height)",
                                    IsDeleted = false,
                                    IsLib = true,
                                    RefTable = Helpers.Constants.TablesNames.TLIradioRRULibrary.ToString(),
                                    SheetName = "RRU",
                                    UniqueName = $"Name1 : {RadioRRUModel}"
                                };

                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                _unitOfWork.SaveChanges();

                                RadioRRUTransaction.Complete();

                                continue;
                            }

                            NewRadioRRULibraryEntity.SpaceLibrary = NewRadioRRULibraryEntity.Length * NewRadioRRULibraryEntity.Width;
                        }
                        else
                        {
                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                            {
                                CreatedAt = DateTime.Now,
                                ErrMsg = $"(l_w_h_cm3) coulumn's value can't be null or empty",
                                IsDeleted = false,
                                IsLib = true,
                                RefTable = Helpers.Constants.TablesNames.TLIradioRRULibrary.ToString(),
                                SheetName = "RRU",
                                UniqueName = $"Name1 : {RadioRRUModel}"
                            };

                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                            _unitOfWork.SaveChanges();

                            RadioRRUTransaction.Complete();

                            continue;
                        }
                        NewRadioRRULibraryEntity.L_W_H_cm3 = RadioRRULibraryL_W_H;

                        _unitOfWork.RadioRRULibraryRepository.Add(NewRadioRRULibraryEntity);
                        _unitOfWork.SaveChanges();
                    }

                    RadioRRUTransaction.Complete();
                }
            }
        #endregion
        #region MW RFU Library
        MW_RFUSection:
            OleDbDataAdapter MW_RFULibraryDbAdapter = new OleDbDataAdapter("SELECT * FROM [RFU$]", FileConverter);
            DataSet MW_RFULibraryDataSet = new DataSet();

            try
            {
                MW_RFULibraryDbAdapter.Fill(MW_RFULibraryDataSet, "ExcelTable");
            }
            catch (OleDbException)
            {
                goto MW_BUSection;
            }

            DataTable MWRFULibrary = MW_RFULibraryDataSet.Tables["ExcelTable"];
            RowNumber = 0;
            foreach (DataColumn Column in MWRFULibrary.Columns)
            {
                Column.ColumnName = Column.ColumnName.Trim();
            }
            foreach (DataRow row in MWRFULibrary.Rows)
            {
                using (TransactionScope MW_RFUTransaction = new TransactionScope(TransactionScopeOption.Required,
                    new System.TimeSpan(0, 15, 0)))
                {
                    RowNumber++;

                    string MW_RFULibraryModel = $"NA/{DateTime.Now}";

                    TLImwRFULibrary CheckMW_RFULibraryModelIfExist = _unitOfWork.MW_RFULibraryRepository
                        .GetWhereFirst(x => x.Model.ToLower() == MW_RFULibraryModel.ToLower() && !x.Deleted);

                    if (CheckMW_RFULibraryModelIfExist != null)
                    {
                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                        {
                            CreatedAt = DateTime.Now,
                            ErrMsg = $"(Model Name) coulumn's value: ({MW_RFULibraryModel}) is already exist in TLIS",
                            IsDeleted = false,
                            IsLib = true,
                            RefTable = Helpers.Constants.TablesNames.TLImwRFULibrary.ToString(),
                            SheetName = "RFU",
                            UniqueName = $"Model Name : {MW_RFULibraryModel}"
                        };

                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                        _unitOfWork.SaveChanges();

                        MW_RFUTransaction.Complete();

                        continue;
                    }

                    TLImwRFULibrary NewMW_RFULibraryEntity = new TLImwRFULibrary();

                    NewMW_RFULibraryEntity.Model = MW_RFULibraryModel;
                    //NewMW_RFULibraryEntity.tx_parity = row["Parity"].ToString();
                    NewMW_RFULibraryEntity.frequency_band = row["Frequency Band"].ToString();
                    NewMW_RFULibraryEntity.FrequencyRange = row["Frequency Range"].ToString();
                    //NewMW_RFULibraryEntity.RFUType = row["RFU Type"].ToString();
                    NewMW_RFULibraryEntity.size = row["Size"].ToString();
                    NewMW_RFULibraryEntity.VenferBoardName = row["Venfer Board Name"].ToString();
                    NewMW_RFULibraryEntity.L_W_H = row["L_W_H(cm3)"].ToString();

                    string CSVMW_RFULibraryWeight = row["Weight"].ToString();
                    if (!string.IsNullOrEmpty(CSVMW_RFULibraryWeight))
                    {
                        CheckParser = float.TryParse(CSVMW_RFULibraryWeight, out FloatParser);

                        if (CheckParser)
                            NewMW_RFULibraryEntity.Weight = FloatParser;

                        else
                        {
                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                            {
                                CreatedAt = DateTime.Now,
                                ErrMsg = $"(Weight) coulumn's value: ({CSVMW_RFULibraryWeight}) must be a number",
                                IsDeleted = false,
                                IsLib = true,
                                RefTable = Helpers.Constants.TablesNames.TLImwRFULibrary.ToString(),
                                SheetName = "RFU",
                                UniqueName = $"Model Name : {MW_RFULibraryModel}"
                            };

                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                            _unitOfWork.SaveChanges();

                            MW_RFUTransaction.Complete();

                            continue;
                        }
                    }
                    else
                        NewMW_RFULibraryEntity.Weight = 0;

                    if (!string.IsNullOrEmpty(NewMW_RFULibraryEntity.L_W_H))
                    {
                        string[] L_W_H = NewMW_RFULibraryEntity.L_W_H.Split(" x ");

                        CheckParser = float.TryParse(L_W_H[0], out FloatParser);

                        if (CheckParser)
                            NewMW_RFULibraryEntity.Length = FloatParser;

                        CheckParser = float.TryParse(L_W_H[1], out FloatParser);

                        if (CheckParser)
                            NewMW_RFULibraryEntity.Width = FloatParser;

                        CheckParser = float.TryParse(L_W_H[2], out FloatParser);

                        if (CheckParser)
                            NewMW_RFULibraryEntity.Height = FloatParser;

                        else
                        {
                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                            {
                                CreatedAt = DateTime.Now,
                                ErrMsg = $"(L_W_H(cm3)) coulumn's value: ({NewMW_RFULibraryEntity.L_W_H}) can't be seperated to " +
                                    $"(Length, Width, Height)",
                                IsDeleted = false,
                                IsLib = true,
                                RefTable = Helpers.Constants.TablesNames.TLImwRFULibrary.ToString(),
                                SheetName = "RFU",
                                UniqueName = $"Model Name : {MW_RFULibraryModel}"
                            };

                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                            _unitOfWork.SaveChanges();

                            MW_RFUTransaction.Complete();

                            continue;
                        }

                        NewMW_RFULibraryEntity.SpaceLibrary = NewMW_RFULibraryEntity.Length * NewMW_RFULibraryEntity.Width;
                    }
                    else
                    {
                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                        {
                            CreatedAt = DateTime.Now,
                            ErrMsg = $"(L_W_H(cm3)) coulumn's value can't be null or empty",
                            IsDeleted = false,
                            IsLib = true,
                            RefTable = Helpers.Constants.TablesNames.TLImwRFULibrary.ToString(),
                            SheetName = "RFU",
                            UniqueName = $"Model Name : {MW_RFULibraryModel}"
                        };

                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                        _unitOfWork.SaveChanges();

                        MW_RFUTransaction.Complete();

                        continue;
                    }
                    string CSVMW_RFULibraryDivesity = row["Divesity"].ToString();
                    if (!string.IsNullOrEmpty(CSVMW_RFULibraryDivesity))
                    {
                        TLIdiversityType DiversityTypeEntity = _unitOfWork.DiversityTypeRepository
                            .GetWhereFirst(x => x.Name.ToLower() == CSVMW_RFULibraryDivesity.ToLower() && !x.Deleted);

                        if (DiversityTypeEntity != null)
                            NewMW_RFULibraryEntity.diversityTypeId = DiversityTypeEntity.Id;

                        else
                        {
                            TLIdiversityType NewDiversityTypeEntity = new TLIdiversityType()
                            {
                                Name = CSVMW_RFULibraryDivesity,
                                Deleted = false,
                                Disable = false
                            };

                            _unitOfWork.DiversityTypeRepository.Add(NewDiversityTypeEntity);
                            _unitOfWork.SaveChanges();

                            NewMW_RFULibraryEntity.diversityTypeId = NewDiversityTypeEntity.Id;
                        }
                    }

                    _unitOfWork.MW_RFULibraryRepository.Add(NewMW_RFULibraryEntity);
                    _unitOfWork.SaveChanges();

                    string MW_RDULibraryVendor = row["Vender"].ToString();
                    if (!string.IsNullOrEmpty(MW_RDULibraryVendor))
                    {
                        AddLogistical(MW_RDULibraryVendor, "Vendor", "MW", "TLImwRFULibrary", NewMW_RFULibraryEntity.Id);
                    }

                    MW_RFUTransaction.Complete();
                }
            }
        #endregion
        #region MW BU Library
        MW_BUSection:
            TLItablesNames TLImwBULibraryTableName = TablesNames.FirstOrDefault(x =>
                x.TableName.ToLower() == Helpers.Constants.TablesNames.TLImwBULibrary.ToString().ToLower());

            OleDbDataAdapter MW_BULibraryDbAdapter = new OleDbDataAdapter("SELECT * FROM [Branching Unit$]", FileConverter);
            DataSet MW_BULibraryDataSet = new DataSet();

            try
            {
                MW_BULibraryDbAdapter.Fill(MW_BULibraryDataSet, "ExcelTable");
            }
            catch (OleDbException)
            {
                goto MW_DishSection;
            }

            DataTable mwBULib = MW_BULibraryDataSet.Tables["ExcelTable"];
            RowNumber = 0;
            foreach (DataColumn Column in mwBULib.Columns)
            {
                Column.ColumnName = Column.ColumnName.Trim();
            }
            foreach (DataRow row in mwBULib.Rows)
            {
                using (TransactionScope MW_BUTransaction = new TransactionScope(TransactionScopeOption.Required,
                    new System.TimeSpan(0, 15, 0)))
                {
                    RowNumber++;

                    string MW_BULibraryModel = row["Name1"].ToString();

                    if (!string.IsNullOrEmpty(MW_BULibraryModel))
                    {
                        TLImwBULibrary CheckMW_BULibraryModelIfExist = _unitOfWork.MW_BULibraryRepository
                            .GetWhereFirst(x => x.Model.ToLower() == MW_BULibraryModel.ToLower() && !x.Deleted);

                        if (CheckMW_BULibraryModelIfExist != null)
                        {
                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                            {
                                CreatedAt = DateTime.Now,
                                ErrMsg = $"(Name1) coulumn's value: ({MW_BULibraryModel}) is already exist in TLIS",
                                IsDeleted = false,
                                IsLib = true,
                                RefTable = Helpers.Constants.TablesNames.TLImwBULibrary.ToString(),
                                SheetName = "Branching Unit",
                                UniqueName = $"Name1 : {MW_BULibraryModel}"
                            };

                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                            _unitOfWork.SaveChanges();

                            MW_BUTransaction.Complete();

                            continue;
                        }

                        TLImwBULibrary MWBULibrary = new TLImwBULibrary();

                        MWBULibrary.Model = MW_BULibraryModel;
                        MWBULibrary.Type = row["BU Type"].ToString();
                        MWBULibrary.L_W_H = row["Long X Width X Hight"].ToString();
                        MWBULibrary.frequency_band = row["Frequency Band"].ToString();
                        MWBULibrary.Active = true;
                        MWBULibrary.Deleted = false;
                        MWBULibrary.FreqChannel = row["Freq Channel"].ToString();
                        MWBULibrary.BUSize = row["BU Size"].ToString();
                        MWBULibrary.Note = null;

                        if (!string.IsNullOrEmpty(row["Weight"].ToString()))
                        {
                            CheckParser = float.TryParse(row["Weight"].ToString(), out FloatParser);

                            if (CheckParser)
                                MWBULibrary.Weight = FloatParser;

                            else
                            {
                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                {
                                    CreatedAt = DateTime.Now,
                                    ErrMsg = $"(Weight) coulumn's value: ({row["Weight"]}) must be a number",
                                    IsDeleted = false,
                                    IsLib = true,
                                    RefTable = Helpers.Constants.TablesNames.TLImwBULibrary.ToString(),
                                    SheetName = "Branching Unit",
                                    UniqueName = $"Name1 : {MW_BULibraryModel}"
                                };

                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                _unitOfWork.SaveChanges();

                                MW_BUTransaction.Complete();

                                continue;
                            }
                        }
                        if (!string.IsNullOrEmpty(row["Num of RFU Ports"].ToString()))
                        {
                            CheckParser = float.TryParse(row["Num of RFU Ports"].ToString(), out FloatParser);

                            if (CheckParser)
                                MWBULibrary.NumOfRFU = int.Parse(FloatParser.ToString());

                            else
                            {
                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                {
                                    CreatedAt = DateTime.Now,
                                    ErrMsg = $"(Num of RFU Ports) coulumn's value: ({row["Num of RFU Ports"]}) must be a number",
                                    IsDeleted = false,
                                    IsLib = true,
                                    RefTable = Helpers.Constants.TablesNames.TLImwBULibrary.ToString(),
                                    SheetName = "Branching Unit",
                                    UniqueName = $"Name1 : {MW_BULibraryModel}"
                                };

                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                _unitOfWork.SaveChanges();

                                MW_BUTransaction.Complete();

                                continue;
                            }
                        }

                        string CSVMW_BUChannelBandwidth = row["Channel Bandwidth"].ToString();
                        if (!string.IsNullOrEmpty(CSVMW_BUChannelBandwidth))
                        {
                            CheckParser = float.TryParse(CSVMW_BUChannelBandwidth, out FloatParser);

                            if (CheckParser)
                                MWBULibrary.channel_bandwidth = FloatParser;

                            else
                            {
                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                {
                                    CreatedAt = DateTime.Now,
                                    ErrMsg = $"(Channel Bandwidth) coulumn's value: ({CSVMW_BUChannelBandwidth}) must be a number",
                                    IsDeleted = false,
                                    IsLib = true,
                                    RefTable = Helpers.Constants.TablesNames.TLImwBULibrary.ToString(),
                                    SheetName = "Branching Unit",
                                    UniqueName = $"Name1 : {MW_BULibraryModel}"
                                };

                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                _unitOfWork.SaveChanges();

                                MW_BUTransaction.Complete();

                                continue;
                            }
                        }

                        if (!string.IsNullOrEmpty(MWBULibrary.L_W_H))
                        {
                            string[] L_W_HSpliter = MWBULibrary.L_W_H.Split(' ', '.');

                            CheckParser = float.TryParse(L_W_HSpliter[0], out FloatParser);

                            if (CheckParser)
                                MWBULibrary.Length = FloatParser;

                            CheckParser = float.TryParse(L_W_HSpliter[3], out FloatParser);

                            if (CheckParser)
                                MWBULibrary.Width = FloatParser;

                            CheckParser = float.TryParse(L_W_HSpliter[6], out FloatParser);

                            if (CheckParser)
                                MWBULibrary.Height = FloatParser;

                            else
                            {
                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                {
                                    CreatedAt = DateTime.Now,
                                    ErrMsg = $"(Long X Width X Hight) coulumn's value can't be seperated to " +
                                        $"(Long, Width, Hight)",
                                    IsDeleted = false,
                                    IsLib = true,
                                    RefTable = Helpers.Constants.TablesNames.TLImwBULibrary.ToString(),
                                    SheetName = "Branching Unit",
                                    UniqueName = $"Name1 : {MW_BULibraryModel}"
                                };

                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                _unitOfWork.SaveChanges();

                                MW_BUTransaction.Complete();

                                continue;
                            }

                            MWBULibrary.SpaceLibrary = MWBULibrary.Width * MWBULibrary.Length;
                        }
                        else
                        {
                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                            {
                                CreatedAt = DateTime.Now,
                                ErrMsg = $"(Long X Width X Hight) coulumn's value can't be null or empty",
                                IsDeleted = false,
                                IsLib = true,
                                RefTable = Helpers.Constants.TablesNames.TLImwBULibrary.ToString(),
                                SheetName = "Branching Unit",
                                UniqueName = $"Name1 : {MW_BULibraryModel}"
                            };

                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                            _unitOfWork.SaveChanges();

                            MW_BUTransaction.Complete();

                            continue;
                        }
                        string CSVMW_RFULibraryDiversity = row["Divesity"].ToString();
                        if (!string.IsNullOrEmpty(CSVMW_RFULibraryDiversity))
                        {
                            TLIdiversityType MW_RFUDiversityEntity = _unitOfWork.DiversityTypeRepository
                                .GetWhereFirst(x => x.Name.ToLower() == CSVMW_RFULibraryDiversity.ToLower() && !x.Deleted);

                            if (MW_RFUDiversityEntity != null)
                                MWBULibrary.diversityTypeId = MW_RFUDiversityEntity.Id;

                            else
                            {
                                TLIdiversityType NewMW_RFUDiversityEntity = new TLIdiversityType()
                                {
                                    Name = CSVMW_RFULibraryDiversity,
                                    Deleted = false,
                                    Disable = false
                                };

                                _unitOfWork.DiversityTypeRepository.Add(NewMW_RFUDiversityEntity);
                                _unitOfWork.SaveChanges();

                                MWBULibrary.diversityTypeId = NewMW_RFUDiversityEntity.Id;
                            }
                        }

                        _unitOfWork.MW_BULibraryRepository.Add(MWBULibrary);
                        _unitOfWork.SaveChanges();

                        TLIdynamicAtt CSVMissedAttributes = _unitOfWork.DynamicAttRepository
                            .GetIncludeWhereFirst(x => x.Key.ToLower() == "ACCP".ToLower() &&
                                x.tablesNames.TableName.ToLower() == TLImwBULibraryTableName.TableName.ToLower(),
                                    x => x.tablesNames);

                        if (CSVMissedAttributes != null && !string.IsNullOrEmpty(row["ACCP"].ToString()))
                        {
                            TLIdynamicAttLibValue dynamicAttLibValue = new TLIdynamicAttLibValue()
                            {
                                ValueString = row["ACCP"].ToString(),
                                DynamicAttId = CSVMissedAttributes.Id,
                                disable = false,
                                tablesNamesId = TLImwBULibraryTableName.Id,
                                InventoryId = MWBULibrary.Id
                            };

                            _unitOfWork.DynamicAttLibRepository.Add(dynamicAttLibValue);
                            _unitOfWork.SaveChanges();
                        }
                        else
                        {
                            TLIdynamicAtt NewDynamicAttribute = new TLIdynamicAtt()
                            {
                                Key = "ACCP",
                                LibraryAtt = true,
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                Description = "ForImpotData",
                                tablesNamesId = TLImwBULibraryTableName.Id,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            };

                            _unitOfWork.DynamicAttRepository.Add(NewDynamicAttribute);
                            _unitOfWork.SaveChanges();

                            if (!string.IsNullOrEmpty(row["ACCP"].ToString()))
                            {
                                TLIdynamicAttLibValue NewDynamicAttributeLibraryValue = new TLIdynamicAttLibValue()
                                {
                                    ValueString = row["ACCP"].ToString(),
                                    DynamicAttId = NewDynamicAttribute.Id,
                                    disable = false,
                                    tablesNamesId = TLImwBULibraryTableName.Id,
                                    InventoryId = MWBULibrary.Id
                                };

                                _unitOfWork.DynamicAttLibRepository.Add(NewDynamicAttributeLibraryValue);
                                _unitOfWork.SaveChanges();
                            }
                        }
                    }

                    MW_BUTransaction.Complete();
                }
            }

        #endregion
        #region MWDishLibrary
        MW_DishSection:
            OleDbDataAdapter MW_DishLibraryDbAdapter = new OleDbDataAdapter("SELECT * FROM [MW-Dish$]", FileConverter);
            DataSet MW_DishLibraryDataSet = new DataSet();

            try
            {
                MW_DishLibraryDbAdapter.Fill(MW_DishLibraryDataSet, "ExcelTable");
            }
            catch (OleDbException)
            {
                goto PowerSection;
            }

            DataTable mwDish = MW_DishLibraryDataSet.Tables["ExcelTable"];
            RowNumber = 0;
            foreach (DataColumn Column in mwDish.Columns)
            {
                Column.ColumnName = Column.ColumnName.Trim();
            }
            foreach (DataRow DishRow in mwDish.Rows)
            {
                using (TransactionScope MW_BUTransaction = new TransactionScope(TransactionScopeOption.Required,
                    new System.TimeSpan(0, 15, 0)))
                {
                    RowNumber++;

                    string MW_DishLibraryModel = DishRow["MODEL"].ToString();

                    if (!string.IsNullOrEmpty(MW_DishLibraryModel))
                    {
                        TLImwDishLibrary CheckMW_DishLibraryModelIfExist = _unitOfWork.MW_DishLibraryRepository
                            .GetWhereFirst(x => x.Model.ToLower() == MW_DishLibraryModel.ToLower() && !x.Deleted);

                        if (CheckMW_DishLibraryModelIfExist != null)
                        {
                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                            {
                                CreatedAt = DateTime.Now,
                                ErrMsg = $"(MODEL) coulumn's value: ({MW_DishLibraryModel}) is already exist in TLIS",
                                IsDeleted = false,
                                IsLib = true,
                                RefTable = Helpers.Constants.TablesNames.TLImwDishLibrary.ToString(),
                                SheetName = "MW-Dish",
                                UniqueName = $"MODEL : {MW_DishLibraryModel}"
                            };

                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                            _unitOfWork.SaveChanges();

                            MW_BUTransaction.Complete();

                            continue;
                        }

                        TLImwDishLibrary NewMWDishLibraryEntity = new TLImwDishLibrary();

                        NewMWDishLibraryEntity.Model = MW_DishLibraryModel;
                        NewMWDishLibraryEntity.frequency_band = DishRow["FREQUENCY"].ToString();
                        NewMWDishLibraryEntity.Active = true;
                        NewMWDishLibraryEntity.Deleted = false;
                        NewMWDishLibraryEntity.dimensions = null;

                        string CSVMW_DishL_W_H = DishRow["L_W_H(mm3)"].ToString();
                        if (!string.IsNullOrEmpty(CSVMW_DishL_W_H))
                        {
                            if (CSVMW_DishL_W_H.Contains('x'))
                            {
                                string[] L_W_HSeperator = CSVMW_DishL_W_H.Split(" x ");

                                CheckParser = float.TryParse(L_W_HSeperator[0], out FloatParser);

                                if (CheckParser)
                                    NewMWDishLibraryEntity.Length = FloatParser;

                                CheckParser = float.TryParse(L_W_HSeperator[1], out FloatParser);

                                if (CheckParser)
                                    NewMWDishLibraryEntity.Width = FloatParser;

                                CheckParser = float.TryParse(L_W_HSeperator[2], out FloatParser);

                                if (CheckParser)
                                    NewMWDishLibraryEntity.Height = FloatParser;

                                else
                                {
                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                    {
                                        CreatedAt = DateTime.Now,
                                        ErrMsg = $"(L_W_H(mm3)) coulumn's value: ({CSVMW_DishL_W_H}) can't be seperated to " +
                                            $"(Length, Width, Height)",
                                        IsDeleted = false,
                                        IsLib = true,
                                        RefTable = Helpers.Constants.TablesNames.TLImwDishLibrary.ToString(),
                                        SheetName = "MW-Dish",
                                        UniqueName = $"MODEL : {MW_DishLibraryModel}"
                                    };

                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                    _unitOfWork.SaveChanges();

                                    MW_BUTransaction.Complete();

                                    continue;
                                }

                                NewMWDishLibraryEntity.SpaceLibrary = NewMWDishLibraryEntity.Length * NewMWDishLibraryEntity.Width;
                            }
                            else
                            {
                                string[] L_W_HSeperator = CSVMW_DishL_W_H.Split(' ', '.');

                                CheckParser = float.TryParse(L_W_HSeperator[0], out FloatParser);

                                if (CheckParser)
                                    NewMWDishLibraryEntity.Length = FloatParser;

                                CheckParser = float.TryParse(L_W_HSeperator[3], out FloatParser);

                                if (CheckParser)
                                    NewMWDishLibraryEntity.Width = FloatParser;

                                CheckParser = float.TryParse(L_W_HSeperator[6], out FloatParser);

                                if (CheckParser)
                                    NewMWDishLibraryEntity.Height = FloatParser;

                                else
                                {
                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                    {
                                        CreatedAt = DateTime.Now,
                                        ErrMsg = $"(L_W_H(mm3)) coulumn's value: ({CSVMW_DishL_W_H}) can't be seperated to " +
                                            $"(Length, Width, Height)",
                                        IsDeleted = false,
                                        IsLib = true,
                                        RefTable = Helpers.Constants.TablesNames.TLImwDishLibrary.ToString(),
                                        SheetName = "MW-Dish",
                                        UniqueName = $"MODEL : {MW_DishLibraryModel}"
                                    };

                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                    _unitOfWork.SaveChanges();

                                    MW_BUTransaction.Complete();

                                    continue;
                                }

                                NewMWDishLibraryEntity.SpaceLibrary = NewMWDishLibraryEntity.Length * NewMWDishLibraryEntity.Width;
                            }
                        }
                        else
                        {
                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                            {
                                CreatedAt = DateTime.Now,
                                ErrMsg = $"(L_W_H(mm3)) coulumn's value can't be null or empty",
                                IsDeleted = false,
                                IsLib = true,
                                RefTable = Helpers.Constants.TablesNames.TLImwDishLibrary.ToString(),
                                SheetName = "MW-Dish",
                                UniqueName = $"MODEL : {MW_DishLibraryModel}"
                            };

                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                            _unitOfWork.SaveChanges();

                            MW_BUTransaction.Complete();

                            continue;
                        }
                        string CSVMW_DishWeight = DishRow["WEIGHT"].ToString();

                        if (!string.IsNullOrEmpty(CSVMW_DishWeight))
                        {
                            CheckParser = float.TryParse(CSVMW_DishWeight, out FloatParser);

                            if (CheckParser)
                                NewMWDishLibraryEntity.Weight = FloatParser;

                            else
                            {
                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                {
                                    CreatedAt = DateTime.Now,
                                    ErrMsg = $"(WEIGHT) coulumn's value: ({CSVMW_DishWeight}) must be a number",
                                    IsDeleted = false,
                                    IsLib = true,
                                    RefTable = Helpers.Constants.TablesNames.TLImwDishLibrary.ToString(),
                                    SheetName = "MW-Dish",
                                    UniqueName = $"MODEL : {MW_DishLibraryModel}"
                                };

                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                _unitOfWork.SaveChanges();

                                MW_BUTransaction.Complete();

                                continue;
                            }
                        }

                        string CSVMW_DishDiameter = DishRow["DIAMETER_m"].ToString();
                        if (!string.IsNullOrEmpty(CSVMW_DishDiameter))
                        {
                            CheckParser = float.TryParse(CSVMW_DishDiameter, out FloatParser);

                            if (CheckParser)
                                NewMWDishLibraryEntity.diameter = FloatParser;

                            else
                            {
                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                {
                                    CreatedAt = DateTime.Now,
                                    ErrMsg = $"(DIAMETER_m) coulumn's value: ({CSVMW_DishDiameter}) must be a number",
                                    IsDeleted = false,
                                    IsLib = true,
                                    RefTable = Helpers.Constants.TablesNames.TLImwDishLibrary.ToString(),
                                    SheetName = "MW-Dish",
                                    UniqueName = $"MODEL : {MW_DishLibraryModel}"
                                };

                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                _unitOfWork.SaveChanges();

                                MW_BUTransaction.Complete();

                                continue;
                            }
                        }

                        string CSVMW_DishAsType = DishRow["AS_TYPE"].ToString();

                        TLIasType CheckAsType = _unitOfWork.AsTypeRepository
                            .GetWhereFirst(x => x.Name.ToLower() == CSVMW_DishAsType.ToLower() && !x.Delete);

                        if (CheckAsType != null)
                            NewMWDishLibraryEntity.asTypeId = CheckAsType.Id;

                        else
                        {
                            TLIasType NewAsTypeEntity = new TLIasType()
                            {
                                Name = CSVMW_DishAsType,
                                Delete = false,
                                Disable = false
                            };

                            _unitOfWork.AsTypeRepository.Add(NewAsTypeEntity);
                            _unitOfWork.SaveChanges();

                            NewMWDishLibraryEntity.asTypeId = NewAsTypeEntity.Id;
                        }

                        string CSVMW_DishPolarityType = DishRow["POLARITY"].ToString();

                        TLIpolarityType PolarityType = _unitOfWork.PolarityTypeRepository
                            .GetWhereFirst(x => x.Name.ToLower() == CSVMW_DishPolarityType.ToLower() && !x.Delete);

                        if (PolarityType != null)
                            NewMWDishLibraryEntity.polarityTypeId = PolarityType.Id;

                        else
                        {
                            TLIpolarityType NewPolarityTypeEntity = new TLIpolarityType()
                            {
                                Name = CSVMW_DishPolarityType,
                                Delete = false,
                                Disable = false
                            };

                            _unitOfWork.PolarityTypeRepository.Add(NewPolarityTypeEntity);
                            _unitOfWork.SaveChanges();

                            NewMWDishLibraryEntity.polarityTypeId = NewPolarityTypeEntity.Id;
                        }

                        _unitOfWork.MW_DishLibraryRepository.Add(NewMWDishLibraryEntity);
                        _unitOfWork.SaveChanges();

                        string Vendor = DishRow["VENDOR"].ToString();

                        if (!string.IsNullOrEmpty(Vendor))
                        {
                            AddLogistical(Vendor, "Vendor", "MW", "TLImwDishLibrary", NewMWDishLibraryEntity.Id);
                        }
                    }

                    MW_BUTransaction.Complete();
                }
            }

        #endregion
        #region PowerLibrary
        PowerSection:
            OleDbDataAdapter PowerLibraryDbAdapter = new OleDbDataAdapter("SELECT * FROM [Wind$]", FileConverter);
            DataSet PowerLibraryDataSet = new DataSet();

            try
            {
                PowerLibraryDbAdapter.Fill(PowerLibraryDataSet, "ExcelTable");
            }
            catch (OleDbException)
            {
                return new Response<string>("Succeed");
            }

            DataTable power = PowerLibraryDataSet.Tables["ExcelTable"];
            int RowNumber5 = 0;
            foreach (DataColumn Column in power.Columns)
            {
                Column.ColumnName = Column.ColumnName.Trim();
            }

            TLItablesNames TLIPowerLibraryTableName = _unitOfWork.TablesNamesRepository
                .GetWhereFirst(x => x.TableName.ToLower() == Helpers.Constants.TablesNames.TLIpowerLibrary.ToString().ToLower());

            foreach (DataRow row in power.Rows)
            {
                using (TransactionScope PowerTransaction = new TransactionScope(TransactionScopeOption.Required,
                    new System.TimeSpan(0, 15, 0)))
                {
                    RowNumber5++;

                    string PowerLibraryModel = row["Name1"].ToString();

                    if (!string.IsNullOrEmpty(PowerLibraryModel))
                    {
                        TLIpowerLibrary CheckPowerLibraryModelIfExist = _unitOfWork.PowerLibraryRepository
                            .GetWhereFirst(x => x.Model.ToLower() == PowerLibraryModel.ToLower() && !x.Deleted);

                        if (CheckPowerLibraryModelIfExist != null)
                        {
                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                            {
                                CreatedAt = DateTime.Now,
                                ErrMsg = $"(Name1) coulumn's value: ({PowerLibraryModel}) is already exist in TLIS",
                                IsDeleted = false,
                                IsLib = true,
                                RefTable = Helpers.Constants.TablesNames.TLIpowerLibrary.ToString(),
                                SheetName = "Wind",
                                UniqueName = $"Name1 : {PowerLibraryModel}"
                            };

                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                            _unitOfWork.SaveChanges();

                            PowerTransaction.Complete();

                            continue;
                        }

                        TLIpowerLibrary NewPowerLibraryEntity = new TLIpowerLibrary();

                        NewPowerLibraryEntity.Model = PowerLibraryModel;
                        NewPowerLibraryEntity.Type = row["Type1"].ToString();
                        NewPowerLibraryEntity.L_W_H = row["L_W_H"].ToString();

                        if (!NewPowerLibraryEntity.L_W_H.IsNullOrEmpty())
                        {
                            if (NewPowerLibraryEntity.L_W_H.Contains('x'))
                            {
                                string[] L_W_HSeperator = NewPowerLibraryEntity.L_W_H.Split(" x ");

                                CheckParser = float.TryParse(L_W_HSeperator[0], out FloatParser);

                                if (CheckParser)
                                    NewPowerLibraryEntity.Length = FloatParser;

                                CheckParser = float.TryParse(L_W_HSeperator[1], out FloatParser);

                                if (CheckParser)
                                    NewPowerLibraryEntity.width = FloatParser;

                                CheckParser = float.TryParse(L_W_HSeperator[2], out FloatParser);

                                if (CheckParser)
                                    NewPowerLibraryEntity.Depth = FloatParser;

                                else
                                {
                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                    {
                                        CreatedAt = DateTime.Now,
                                        ErrMsg = $"(L_W_H) coulumn's value: ({NewPowerLibraryEntity.L_W_H}) can't be seperated to " +
                                            $"(Length, Width, Height)",
                                        IsDeleted = false,
                                        IsLib = true,
                                        RefTable = Helpers.Constants.TablesNames.TLIpowerLibrary.ToString(),
                                        SheetName = "Wind",
                                        UniqueName = $"Name1 : {PowerLibraryModel}"
                                    };

                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                    _unitOfWork.SaveChanges();

                                    PowerTransaction.Complete();

                                    continue;
                                }

                                NewPowerLibraryEntity.SpaceLibrary = NewPowerLibraryEntity.Length * NewPowerLibraryEntity.width;
                            }
                            else
                            {
                                string[] L_W_HSeperator = NewPowerLibraryEntity.L_W_H.Split(' ', '.');

                                CheckParser = float.TryParse(L_W_HSeperator[0], out FloatParser);

                                if (CheckParser)
                                    NewPowerLibraryEntity.Length = FloatParser;

                                CheckParser = float.TryParse(L_W_HSeperator[3], out FloatParser);

                                if (CheckParser)
                                    NewPowerLibraryEntity.width = FloatParser;

                                CheckParser = float.TryParse(L_W_HSeperator[6], out FloatParser);

                                if (CheckParser)
                                    NewPowerLibraryEntity.Depth = FloatParser;

                                else
                                {
                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                    {
                                        CreatedAt = DateTime.Now,
                                        ErrMsg = $"(L_W_H) coulumn's value: ({NewPowerLibraryEntity.L_W_H}) can't be seperated to " +
                                            $"(Length, Width, Height)",
                                        IsDeleted = false,
                                        IsLib = true,
                                        RefTable = Helpers.Constants.TablesNames.TLIpowerLibrary.ToString(),
                                        SheetName = "Wind",
                                        UniqueName = $"Name1 : {PowerLibraryModel}"
                                    };

                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                    _unitOfWork.SaveChanges();

                                    PowerTransaction.Complete();

                                    continue;
                                }

                                NewPowerLibraryEntity.SpaceLibrary = NewPowerLibraryEntity.Length * NewPowerLibraryEntity.width;
                            }
                        }
                        else
                        {
                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                            {
                                CreatedAt = DateTime.Now,
                                ErrMsg = $"(L_W_H) coulumn's value can't be null or empty",
                                IsDeleted = false,
                                IsLib = true,
                                RefTable = Helpers.Constants.TablesNames.TLIpowerLibrary.ToString(),
                                SheetName = "Wind",
                                UniqueName = $"Name1 : {PowerLibraryModel}"
                            };

                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                            _unitOfWork.SaveChanges();

                            PowerTransaction.Complete();

                            continue;
                        }
                        NewPowerLibraryEntity.Active = true;
                        NewPowerLibraryEntity.Deleted = false;

                        string CSVPowerLibraryWeight = row["Weight"].ToString();

                        if (!string.IsNullOrEmpty(CSVPowerLibraryWeight))
                        {
                            CheckParser = float.TryParse(CSVPowerLibraryWeight, out FloatParser);

                            if (CheckParser)
                                NewPowerLibraryEntity.Weight = FloatParser;

                            else
                            {
                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                {
                                    CreatedAt = DateTime.Now,
                                    ErrMsg = $"(Weight) coulumn's value: ({CSVPowerLibraryWeight}) must be a number",
                                    IsDeleted = false,
                                    IsLib = true,
                                    RefTable = Helpers.Constants.TablesNames.TLIpowerLibrary.ToString(),
                                    SheetName = "Wind",
                                    UniqueName = $"Name1 : {PowerLibraryModel}"
                                };

                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                _unitOfWork.SaveChanges();

                                PowerTransaction.Complete();

                                continue;
                            }
                        }

                        string CSVPowerLibrarySize = row["Size"].ToString();

                        if (!string.IsNullOrEmpty(CSVPowerLibrarySize))
                        {
                            CheckParser = float.TryParse(CSVPowerLibrarySize, out FloatParser);

                            if (CheckParser)
                                NewPowerLibraryEntity.Size = FloatParser;

                            else
                            {
                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                {
                                    CreatedAt = DateTime.Now,
                                    ErrMsg = $"(Size) coulumn's value: ({CSVPowerLibrarySize}) must be a number",
                                    IsDeleted = false,
                                    IsLib = true,
                                    RefTable = Helpers.Constants.TablesNames.TLIpowerLibrary.ToString(),
                                    SheetName = "Wind",
                                    UniqueName = $"Name1 : {PowerLibraryModel}"
                                };

                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                _unitOfWork.SaveChanges();

                                PowerTransaction.Complete();

                                continue;
                            }
                        }

                        _unitOfWork.PowerLibraryRepository.Add(NewPowerLibraryEntity);
                        _unitOfWork.SaveChanges();

                        string Vendor = row["Vender"].ToString();
                        if (!string.IsNullOrEmpty(Vendor))
                        {
                            AddLogistical(Vendor, "Vendor", "Power", "TLIpowerLibrary", NewPowerLibraryEntity.Id);
                        }

                        TLIdynamicAtt CSVMissedAttributes = _unitOfWork.DynamicAttRepository
                            .GetIncludeWhereFirst(x => x.Key.ToLower() == "Area".ToLower() &&
                                x.tablesNames.TableName.ToLower() == TLIPowerLibraryTableName.TableName.ToLower(),
                                    x => x.tablesNames);

                        if (CSVMissedAttributes != null && !string.IsNullOrEmpty(row["Area"].ToString()))
                        {
                            TLIdynamicAttLibValue dynamicAttLibValue = new TLIdynamicAttLibValue()
                            {
                                ValueString = row["Area"].ToString(),
                                DynamicAttId = CSVMissedAttributes.Id,
                                disable = false,
                                tablesNamesId = TLIPowerLibraryTableName.Id,
                                InventoryId = NewPowerLibraryEntity.Id
                            };

                            _unitOfWork.DynamicAttLibRepository.Add(dynamicAttLibValue);
                            _unitOfWork.SaveChanges();
                        }
                        else
                        {
                            TLIdynamicAtt NewDynamicAttribute = new TLIdynamicAtt()
                            {
                                Key = "Area",
                                LibraryAtt = true,
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                Description = "ForImpotData",
                                tablesNamesId = TLIPowerLibraryTableName.Id,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            };

                            _unitOfWork.DynamicAttRepository.Add(NewDynamicAttribute);
                            _unitOfWork.SaveChanges();

                            if (!string.IsNullOrEmpty(row["Area"].ToString()))
                            {
                                TLIdynamicAttLibValue NewDynamicAttributeLibraryValue = new TLIdynamicAttLibValue()
                                {
                                    ValueString = row["Area"].ToString(),
                                    DynamicAttId = NewDynamicAttribute.Id,
                                    disable = false,
                                    tablesNamesId = TLIPowerLibraryTableName.Id,
                                    InventoryId = NewPowerLibraryEntity.Id
                                };

                                _unitOfWork.DynamicAttLibRepository.Add(NewDynamicAttributeLibraryValue);
                                _unitOfWork.SaveChanges();
                            }
                        }
                    }
                    PowerTransaction.Complete();
                }
            }

            #endregion
            return new Response<string>("Succeed");
        }
        public Response<string> ImportInstallationFileDataTower(IFormFile File, string ConnectionString)
        {
            List<TLIdataType> DataTypes = _unitOfWork.DataTypeRepository.GetAllWithoutCount().ToList();
            List<TLItablesNames> TablesName = _unitOfWork.TablesNamesRepository.GetAllWithoutCount().ToList();

            using (var connection = new OracleConnection(ConnectionString))
            {
                connection.Open();
                List<KeyValuePair<int, string>> UnsavedRows = new List<KeyValuePair<int, string>>();

                var FilePath = SaveFileAndGetFilePath(File);

                try
                {
                    FileInfo existingFile = new FileInfo(FilePath);
                    ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {
                        float FloatParser = 0;
                        bool CheckParser = false;

                        ////////////////////////////////////////////////////////////
                        /////////////////// Type Of Support Info ///////////////////
                        ////////////////////////////////////////////////////////////

                        ExcelWorksheet TypeOfSupportInfoSheet = package.Workbook.Worksheets.FirstOrDefault(x => x.Name.ToLower() == "Type of support info".ToLower());
                        int TypeOfSupportInfoRows = 0;
                        try
                        {
                            TypeOfSupportInfoRows = TypeOfSupportInfoSheet.Dimension.End.Row;
                        }
                        catch (NullReferenceException)
                        {
                            return new Response<string>("false");
                        }
                        int TypeOfSupportInfoColumns = TypeOfSupportInfoSheet.Dimension.End.Column;

                        DataTable TypeOfSupportInfoDataTable = new DataTable();
                        List<string> TypeOfSupportInfoSheetColumn = new List<string>();

                        for (int i = 1; i <= TypeOfSupportInfoColumns; i++)
                        {
                            string AfterTrim = TypeOfSupportInfoSheet.Cells[1, i].Value.ToString().Trim();
                            AfterTrim = Regex.Replace(AfterTrim, @"\s+", " ");
                            TypeOfSupportInfoSheetColumn.Add(AfterTrim);
                        }

                        for (int i = 1; i <= TypeOfSupportInfoColumns; i++)
                        {
                            var ColName = TypeOfSupportInfoSheet.Cells[1, i].Value.ToString().Trim();
                            ColName = Regex.Replace(ColName, @"\s+", " ");
                            TypeOfSupportInfoDataTable.Columns.Add(ColName);
                        }
                        for (int i = 2; i <= TypeOfSupportInfoRows; i++)
                        {
                            DataRow TypeOfSupportInfoDataRow = TypeOfSupportInfoDataTable.NewRow();
                            for (int j = 1; j <= TypeOfSupportInfoColumns; j++)
                            {
                                string ColName = TypeOfSupportInfoSheet.Cells[1, j].Value.ToString().Trim();
                                ColName = Regex.Replace(ColName, @"\s+", " ");
                                if (TypeOfSupportInfoSheet.Cells[i, j].Value != null)
                                {
                                    string ValueAsString = TypeOfSupportInfoSheet.Cells[i, j].Value.ToString().Trim();
                                    ValueAsString = Regex.Replace(ValueAsString, @"\s+", " ");
                                    object Value = ValueAsString;
                                    TypeOfSupportInfoDataRow[ColName] = Value;
                                }
                                else
                                    TypeOfSupportInfoDataRow[ColName] = TypeOfSupportInfoSheet.Cells[i, j].Value;
                            }
                            TypeOfSupportInfoDataTable.Rows.Add(TypeOfSupportInfoDataRow);
                        }
                        //
                        // Dynamic Attributes For Civil With Legs..
                        //

                        Array CivilWithLegsDynamicAttributes = Enum.GetValues(typeof(Helpers.Constants.CivilWithLegsInstallationMissedAttributes));

                        int CivilWithLegsTableNameId = TablesName.FirstOrDefault(x =>
                            x.TableName.ToLower() == Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString().ToLower()).Id;

                        foreach (object CivilWithLegsDynamicAttribute in CivilWithLegsDynamicAttributes)
                        {
                            string DynamicAttributeDataTypeName = Helpers.Constants.GetEnumDescription(
                                (Helpers.Constants.CivilWithLegsInstallationMissedAttributes)CivilWithLegsDynamicAttribute);

                            TLIdynamicAtt CheckIfDynamicAttributeAlreadyExist = _unitOfWork.DynamicAttRepository
                                .GetWhereFirst(x => x.Key.ToLower() == CivilWithLegsDynamicAttribute.ToString().ToLower().Replace('_', ' ') &&
                                    x.tablesNamesId == CivilWithLegsTableNameId);

                            if (CheckIfDynamicAttributeAlreadyExist == null)
                            {
                                TLIdynamicAtt SideArmNewDynamicAttribute = new TLIdynamicAtt
                                {
                                    Key = CivilWithLegsDynamicAttribute.ToString().Replace('_', ' '),
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == DynamicAttributeDataTypeName.ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = CivilWithLegsTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                };

                                _unitOfWork.DynamicAttRepository.Add(SideArmNewDynamicAttribute);
                                _unitOfWork.SaveChanges();
                            }
                        }
                        List<TLIdynamicAtt> CivilWithLegsDynamicAttributesInTLIS = _unitOfWork.DynamicAttRepository
                            .GetIncludeWhere(x => x.tablesNamesId == CivilWithLegsTableNameId, x => x.DataType).ToList();
                        for (int u = 0; u <= TypeOfSupportInfoDataTable.Rows.Count - 1; u++)
                        {
                            string CivilType = TypeOfSupportInfoDataTable.Rows[u]["Type"].ToString();
                            if (CivilType.ToLower() == "Tower".ToLower())
                            {
                                using (TransactionScope TowerTransaction = new TransactionScope(TransactionScopeOption.Required,
                                    new System.TimeSpan(0, 15, 0)))
                                {
                                    for (int j = 0; j <= TypeOfSupportInfoDataTable.Rows.Count - 1; j++)
                                    {

                                        try
                                        {
                                            //
                                            // Library Information..
                                            //

                                            string CivilWithLegsModel = TypeOfSupportInfoDataTable.Rows[j]["Tower Type"].ToString();

                                            TLIcivilWithLegLibrary CheckTowerType = new TLIcivilWithLegLibrary();

                                            if (string.IsNullOrEmpty(CivilWithLegsModel))
                                            {
                                                TowerTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Tower Type) coulumn's value can't be null or empty",
                                                    IsDeleted = false,
                                                    IsLib = true,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithLegLibrary.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                            else
                                            {
                                                CheckTowerType = _unitOfWork.CivilWithLegLibraryRepository
                                                    .GetWhereFirst(x => x.Model.ToLower() == CivilWithLegsModel.ToLower() && !x.Deleted);

                                                if (CheckTowerType == null)
                                                {
                                                    TowerTransaction.Dispose();

                                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                    {
                                                        CreatedAt = DateTime.Now,
                                                        ErrMsg = $"(Tower Type) coulumn's value: ({CivilWithLegsModel}) doesn't exist in TLIS",
                                                        IsDeleted = false,
                                                        IsLib = true,
                                                        RefTable = Helpers.Constants.TablesNames.TLIcivilWithLegLibrary.ToString(),
                                                        SheetName = "Type of support info",
                                                        UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                    };

                                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                    _unitOfWork.SaveChanges();

                                                    continue;
                                                }

                                                _unitOfWork.SaveChanges();
                                            }

                                            TLIcivilWithLegs NewCivilWithLegsEntity = new TLIcivilWithLegs();

                                            NewCivilWithLegsEntity.CivilWithLegsLibId = CheckTowerType.Id;

                                            string TowerName = TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"].ToString();
                                            NewCivilWithLegsEntity.Name = TowerName;

                                            string CivilWithLegsSiteCode = string.Empty;
                                            if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Site Code"].ToString()))
                                            {
                                                TLIsite SiteEntity = _unitOfWork.SiteRepository
                                                   .GetWhereFirst(x => x.SiteCode.ToLower() == TypeOfSupportInfoDataTable.Rows[j]["Site Code"].ToString().ToLower());

                                                if (SiteEntity != null)
                                                    CivilWithLegsSiteCode = SiteEntity.SiteCode;

                                                else
                                                {
                                                    TowerTransaction.Dispose();

                                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                    {
                                                        CreatedAt = DateTime.Now,
                                                        ErrMsg = $"({TypeOfSupportInfoDataTable.Rows[j]["Site Code"]}) coulumn's value: ({TypeOfSupportInfoDataTable.Rows[j]["Site Code"]}) doesn't exist in TLIS",
                                                        IsDeleted = false,
                                                        IsLib = false,
                                                        RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                                        SheetName = "Type of support info",
                                                        UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                    };

                                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                    _unitOfWork.SaveChanges();

                                                    continue;
                                                }
                                            }
                                            else if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Site Name"].ToString()))
                                            {
                                                TLIsite SiteEntity = _unitOfWork.SiteRepository
                                                    .GetWhereFirst(x => x.SiteName.ToLower() == TypeOfSupportInfoDataTable.Rows[j]["Site Name"].ToString().ToLower());

                                                if (SiteEntity != null)
                                                    CivilWithLegsSiteCode = SiteEntity.SiteCode;

                                                else
                                                {
                                                    TowerTransaction.Dispose();

                                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                    {
                                                        CreatedAt = DateTime.Now,
                                                        ErrMsg = $"({TypeOfSupportInfoDataTable.Rows[j]["Site Name"]}) coulumn's value: ({TypeOfSupportInfoDataTable.Rows[j]["Site Name"]}) doesn't exist in TLIS",
                                                        IsDeleted = false,
                                                        IsLib = false,
                                                        RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                                        SheetName = "Type of support info",
                                                        UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                    };

                                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                    _unitOfWork.SaveChanges();

                                                    continue;
                                                }
                                            }
                                            else
                                            {
                                                TowerTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"One of those columns must have a value: (Site Code, Site Name)",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }

                                            //
                                            // Check if This Tower Name is Already Exist in This Site..
                                            //

                                            TLIcivilSiteDate CheckCivilWithLegsNameIfDuplicate = _unitOfWork.CivilSiteDateRepository
                                                .GetIncludeWhereFirst(x => !x.Dismantle && x.SiteCode.ToLower() == CivilWithLegsSiteCode.ToLower() &&
                                                    !x.allCivilInst.Draft && (x.allCivilInst.civilWithLegsId != null ?
                                                        x.allCivilInst.civilWithLegs.Name.ToLower() == TowerName.ToLower() : false),
                                                            x => x.allCivilInst, x => x.allCivilInst.civilWithLegs);

                                            if (CheckCivilWithLegsNameIfDuplicate != null)
                                            {
                                                TowerTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Civil steel Name) column's value: ({TowerName}) and (type) : (Tower) is already exist in " +
                                                        $"this (SiteCode): ({CivilWithLegsSiteCode})",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }

                                            NewCivilWithLegsEntity.OtherBaseType = TypeOfSupportInfoDataTable.Rows[j]["Other Base Type"].ToString();
                                            NewCivilWithLegsEntity.BaseNote = TypeOfSupportInfoDataTable.Rows[j]["Notes"].ToString();
                                            NewCivilWithLegsEntity.DiagonalMemberPrefix = TypeOfSupportInfoDataTable.Rows[j]["Diagonal Member Prefix"].ToString();
                                            NewCivilWithLegsEntity.DiagonalMemberDimensions = TypeOfSupportInfoDataTable.Rows[j]["Diagonal Member Dimensions(mm)"].ToString();
                                            NewCivilWithLegsEntity.DiagonalMemberSection = TypeOfSupportInfoDataTable.Rows[j]["Diagonal Member section"].ToString();
                                            //NewCivilWithLegsEntity.BasePlateShape = TypeOfSupportInfoDataTable.Rows[j]["Base Plate Shape"].ToString();
                                            NewCivilWithLegsEntity.BasePlateDimensions = TypeOfSupportInfoDataTable.Rows[j]["Base Plate Dimentions(mm)"].ToString();
                                            NewCivilWithLegsEntity.BasePlatethickness = TypeOfSupportInfoDataTable.Rows[j]["Base Plate Thickness(mm)"].ToString();
                                            NewCivilWithLegsEntity.SteelCrossSection = TypeOfSupportInfoDataTable.Rows[j]["Steel Cross Section"].ToString();
                                            NewCivilWithLegsEntity.VerticalMeasurement = TypeOfSupportInfoDataTable.Rows[j]["Vertical measurement(mm)"].ToString();
                                            NewCivilWithLegsEntity.DimensionsLeg = TypeOfSupportInfoDataTable.Rows[j]["Dimensions/Leg(mm)"].ToString();
                                            NewCivilWithLegsEntity.WindMaxLoadm2 = 0;
                                            NewCivilWithLegsEntity.PoDate = DateTime.Now;

                                            if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Location Height(m)"].ToString()))
                                            {
                                                double DoubleParser = 0;

                                                CheckParser = double.TryParse(TypeOfSupportInfoDataTable.Rows[j]["Location Height(m)"].ToString(), out DoubleParser);

                                                if (CheckParser)
                                                    NewCivilWithLegsEntity.LocationHeight = DoubleParser;

                                                else
                                                {
                                                    TowerTransaction.Dispose();

                                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                    {
                                                        CreatedAt = DateTime.Now,
                                                        ErrMsg = $"(Location Height(m)) coulumn's value must be a number",
                                                        IsDeleted = false,
                                                        IsLib = false,
                                                        RefTable = Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString(),
                                                        SheetName = "Type of support info",
                                                        UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                    };

                                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                    _unitOfWork.SaveChanges();

                                                    continue;
                                                }
                                            }
                                            if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["TOWER HEIGHT"].ToString()))
                                            {
                                                CheckParser = float.TryParse(TypeOfSupportInfoDataTable.Rows[j]["TOWER HEIGHT"].ToString(), out FloatParser);

                                                if (CheckParser)
                                                    NewCivilWithLegsEntity.HeightBase = FloatParser;

                                                else
                                                {
                                                    TowerTransaction.Dispose();

                                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                    {
                                                        CreatedAt = DateTime.Now,
                                                        ErrMsg = $"(TOWER HEIGHT) coulumn's value must be a number",
                                                        IsDeleted = false,
                                                        IsLib = false,
                                                        RefTable = Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString(),
                                                        SheetName = "Type of support info",
                                                        UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                    };

                                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                    _unitOfWork.SaveChanges();

                                                    continue;
                                                }
                                            }
                                            if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Bolt Holes"].ToString()))
                                            {
                                                int intParser = 0;

                                                CheckParser = int.TryParse(TypeOfSupportInfoDataTable.Rows[j]["Bolt Holes"].ToString(), out intParser);

                                                if (CheckParser)
                                                    NewCivilWithLegsEntity.BoltHoles = intParser;

                                                else
                                                {
                                                    TowerTransaction.Dispose();

                                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                    {
                                                        CreatedAt = DateTime.Now,
                                                        ErrMsg = $"(Bolt Holes) coulumn's value must be a number",
                                                        IsDeleted = false,
                                                        IsLib = false,
                                                        RefTable = Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString(),
                                                        SheetName = "Type of support info",
                                                        UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                    };

                                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                    _unitOfWork.SaveChanges();

                                                    continue;
                                                }
                                            }
                                            if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Base Height H2"].ToString()))
                                            {
                                                double DoubleParser = 0;

                                                CheckParser = double.TryParse(TypeOfSupportInfoDataTable.Rows[j]["Base Height H2"].ToString(), out DoubleParser);

                                                if (CheckParser)
                                                    NewCivilWithLegsEntity.H2height = DoubleParser;

                                                else
                                                {
                                                    TowerTransaction.Dispose();

                                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                    {
                                                        CreatedAt = DateTime.Now,
                                                        ErrMsg = $"(Base Height H2) coulumn's value must be a number",
                                                        IsDeleted = false,
                                                        IsLib = false,
                                                        RefTable = Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString(),
                                                        SheetName = "Type of support info",
                                                        UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                    };

                                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                    _unitOfWork.SaveChanges();

                                                    continue;
                                                }
                                            }
                                            if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Total Height"].ToString()))
                                            {
                                                CheckParser = float.TryParse(TypeOfSupportInfoDataTable.Rows[j]["Total Height"].ToString(), out FloatParser);

                                                if (CheckParser)
                                                    NewCivilWithLegsEntity.TotalHeight = FloatParser;

                                                else
                                                {
                                                    TowerTransaction.Dispose();

                                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                    {
                                                        CreatedAt = DateTime.Now,
                                                        ErrMsg = $"(Total Height) coulumn's value must be a number",
                                                        IsDeleted = false,
                                                        IsLib = false,
                                                        RefTable = Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString(),
                                                        SheetName = "Type of support info",
                                                        UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                    };

                                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                    _unitOfWork.SaveChanges();

                                                    continue;
                                                }
                                            }
                                            if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Height of the enforcement"].ToString()))
                                            {
                                                CheckParser = float.TryParse(TypeOfSupportInfoDataTable.Rows[j]["Height of the enforcement"].ToString(), out FloatParser);

                                                if (CheckParser)
                                                    NewCivilWithLegsEntity.EnforcementHeightBase = FloatParser;

                                                else
                                                {
                                                    TowerTransaction.Dispose();

                                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                    {
                                                        CreatedAt = DateTime.Now,
                                                        ErrMsg = $"(Height of the enforcement) coulumn's value must be a number",
                                                        IsDeleted = false,
                                                        IsLib = false,
                                                        RefTable = Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString(),
                                                        SheetName = "Type of support info",
                                                        UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                    };

                                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                    _unitOfWork.SaveChanges();

                                                    continue;
                                                }
                                            }
                                            if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Enforcement level"].ToString()))
                                            {
                                                CheckParser = float.TryParse(TypeOfSupportInfoDataTable.Rows[j]["Enforcement level"].ToString(), out FloatParser);

                                                if (CheckParser)
                                                    NewCivilWithLegsEntity.Enforcementlevel = FloatParser;

                                                else
                                                {
                                                    TowerTransaction.Dispose();

                                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                    {
                                                        CreatedAt = DateTime.Now,
                                                        ErrMsg = $"(Enforcement level) coulumn's value must be a number",
                                                        IsDeleted = false,
                                                        IsLib = false,
                                                        RefTable = Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString(),
                                                        SheetName = "Type of support info",
                                                        UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                    };

                                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                    _unitOfWork.SaveChanges();

                                                    continue;
                                                }
                                            }

                                            //string TowerStructureType = TypeOfSupportInfoDataTable.Rows[j]["Structure Type Compatible With Design"].ToString();
                                            //if (!string.IsNullOrEmpty(TowerStructureType))
                                            //{
                                            //    if (TowerStructureType.ToLower() == "Yes".ToLower())
                                            //        NewCivilWithLegsEntity.StructureType = StructureTypeCompatibleWithDesign.Yes;

                                            //    else if (TowerStructureType.ToLower() == "No".ToLower())
                                            //        NewCivilWithLegsEntity.StructureType = StructureTypeCompatibleWithDesign.No;

                                            //    else
                                            //    {
                                            //        TowerTransaction.Dispose();

                                            //        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            //        {
                                            //            CreatedAt = DateTime.Now,
                                            //            ErrMsg = $"(Structure Type Compatible With Design) coulumn's value must be boolean (Yes/No)",
                                            //            IsDeleted = false,
                                            //            IsLib = false,
                                            //            RefTable = Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString(),
                                            //            SheetName = "Type of support info",
                                            //            UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                            //        };

                                            //        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            //        _unitOfWork.SaveChanges();

                                            //        continue;
                                            //    }
                                            //}

                                            //string TowerSectionsLegType = TypeOfSupportInfoDataTable.Rows[j]["Sections(Leg) Type Compatible With Design"].ToString();
                                            //if (!string.IsNullOrEmpty(TowerSectionsLegType))
                                            //{
                                            //    if (TowerSectionsLegType.ToLower() == "Yes".ToLower())
                                            //        NewCivilWithLegsEntity.SectionsLegType = SectionsLegTypeCompatibleWithDesign.Yes;

                                            //    else if (TowerSectionsLegType.ToLower() == "No".ToLower())
                                            //        NewCivilWithLegsEntity.SectionsLegType = SectionsLegTypeCompatibleWithDesign.No;

                                            //    else
                                            //    {
                                            //        TowerTransaction.Dispose();

                                            //        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            //        {
                                            //            CreatedAt = DateTime.Now,
                                            //            ErrMsg = $"(Sections(Leg) Type Compatible With Design) coulumn's value must be boolean (Yes/No)",
                                            //            IsDeleted = false,
                                            //            IsLib = false,
                                            //            RefTable = Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString(),
                                            //            SheetName = "Type of support info",
                                            //            UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                            //        };

                                            //        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            //        _unitOfWork.SaveChanges();

                                            //        continue;
                                            //    }
                                            //}

                                            string CivilWithLegsEnforcement = TypeOfSupportInfoDataTable.Rows[j]["Tower enforcement"].ToString();
                                            NewCivilWithLegsEntity.IsEnforeced = false;

                                            if (!string.IsNullOrEmpty(CivilWithLegsEnforcement))
                                            {
                                                if (CivilWithLegsEnforcement.ToLower() == "Yes".ToLower())
                                                    NewCivilWithLegsEntity.IsEnforeced = true;
                                            }

                                            string TowerOwner = TypeOfSupportInfoDataTable.Rows[j]["Support Owner"].ToString();
                                            if (!string.IsNullOrEmpty(TowerOwner))
                                            {
                                                TLIowner OwnerEntity = _unitOfWork.OwnerRepository
                                                    .GetWhereFirst(x => x.OwnerName.ToLower() == TowerOwner.ToLower() && !x.Deleted);

                                                if (OwnerEntity != null)
                                                    NewCivilWithLegsEntity.OwnerId = OwnerEntity.Id;

                                                else
                                                {
                                                    TLIowner NewOwnerEntity = new TLIowner();
                                                    NewOwnerEntity.OwnerName = TowerOwner;
                                                    _unitOfWork.OwnerRepository.Add(NewOwnerEntity);
                                                    _unitOfWork.SaveChanges();
                                                    NewCivilWithLegsEntity.OwnerId = NewOwnerEntity.Id;
                                                }
                                            }

                                            string TowerLocation = TypeOfSupportInfoDataTable.Rows[j]["Location"].ToString();
                                            if (!string.IsNullOrEmpty(TowerLocation))
                                            {
                                                TLIlocationType CheckLocation = _unitOfWork.LocationTypeRepository
                                                    .GetWhereFirst(x => x.Name.ToLower() == TowerLocation.ToLower() && !x.Deleted);

                                                if (CheckLocation != null)
                                                    NewCivilWithLegsEntity.locationTypeId = CheckLocation.Id;

                                                else
                                                {
                                                    TLIlocationType NewLocationTypeEntity = new TLIlocationType();
                                                    NewLocationTypeEntity.Name = TowerLocation;
                                                    _unitOfWork.LocationTypeRepository.Add(NewLocationTypeEntity);
                                                    _unitOfWork.SaveChanges();
                                                    NewCivilWithLegsEntity.locationTypeId = NewLocationTypeEntity.Id;
                                                }
                                            }

                                            string TowerSupportTypeImplemented = TypeOfSupportInfoDataTable.Rows[j]["Support Type"].ToString();
                                            if (!string.IsNullOrEmpty(TowerSupportTypeImplemented))
                                            {
                                                TLIsupportTypeImplemented supportTypeImplemented = _unitOfWork.SupportTypeImplementedRepository
                                                    .GetWhereFirst(x => x.Name.ToLower() == TowerSupportTypeImplemented.ToLower() && !x.Deleted);

                                                if (supportTypeImplemented != null)
                                                    NewCivilWithLegsEntity.SupportTypeImplementedId = supportTypeImplemented.Id;

                                                else
                                                {
                                                    TLIsupportTypeImplemented NewSupportTypeImplemented = new TLIsupportTypeImplemented();
                                                    NewSupportTypeImplemented.Name = TowerSupportTypeImplemented;
                                                    _unitOfWork.SupportTypeImplementedRepository.Add(NewSupportTypeImplemented);
                                                    _unitOfWork.SaveChanges();
                                                    NewCivilWithLegsEntity.SupportTypeImplementedId = NewSupportTypeImplemented.Id;
                                                }
                                            }

                                            string TowerBaseCivilWithLegsTypeName = TypeOfSupportInfoDataTable.Rows[j]["Base Type"].ToString();

                                            if (!string.IsNullOrEmpty(TowerBaseCivilWithLegsTypeName))
                                            {
                                                TLIbaseType BaseTypeForeignKeyEntity = _unitOfWork.BaseTypeRepository
                                                    .GetWhereFirst(x => x.Name.ToLower() == TowerBaseCivilWithLegsTypeName.ToLower() && !x.Deleted);

                                                if (BaseTypeForeignKeyEntity != null)
                                                    NewCivilWithLegsEntity.baseTypeId = BaseTypeForeignKeyEntity.Id;

                                                else
                                                {
                                                    TLIbaseType NewBaseTypeForeignKeyEntity = new TLIbaseType
                                                    {
                                                        Name = TowerBaseCivilWithLegsTypeName,
                                                        Disable = false,
                                                        Deleted = false
                                                    };
                                                    _unitOfWork.BaseTypeRepository.Add(NewBaseTypeForeignKeyEntity);
                                                    _unitOfWork.SaveChanges();

                                                    NewCivilWithLegsEntity.baseTypeId = NewBaseTypeForeignKeyEntity.Id;
                                                }

                                                TLIbaseCivilWithLegsType baseCivilWithLegsType = _unitOfWork.BaseCivilWithLegsTypeRepository
                                                    .GetWhereFirst(x => x.Name.ToLower() == TowerBaseCivilWithLegsTypeName.ToLower() && !x.Deleted);

                                                if (baseCivilWithLegsType != null)
                                                    NewCivilWithLegsEntity.BaseCivilWithLegTypeId = baseCivilWithLegsType.Id;

                                                else
                                                {
                                                    TLIbaseCivilWithLegsType NewbaseCivilWithLegsType = new TLIbaseCivilWithLegsType();
                                                    NewbaseCivilWithLegsType.Name = TowerBaseCivilWithLegsTypeName;
                                                    _unitOfWork.BaseCivilWithLegsTypeRepository.Add(NewbaseCivilWithLegsType);
                                                    _unitOfWork.SaveChanges();
                                                    NewCivilWithLegsEntity.BaseCivilWithLegTypeId = NewbaseCivilWithLegsType.Id;
                                                }
                                            }
                                            else
                                            {
                                                TLIbaseType BaseTypeForeignKeyEntity = _unitOfWork.BaseTypeRepository
                                                    .GetWhereFirst(x => x.Id == 0);

                                                if (BaseTypeForeignKeyEntity != null)
                                                {
                                                    NewCivilWithLegsEntity.baseTypeId = 0;
                                                }
                                                else
                                                {
                                                    TLIbaseType NewBaseTypeForeignKeyEntity = new TLIbaseType
                                                    {
                                                        Id = 0,
                                                        Name = "NA",
                                                        Disable = false,
                                                        Deleted = false
                                                    };

                                                    _unitOfWork.BaseTypeRepository.Add(NewBaseTypeForeignKeyEntity);
                                                    _unitOfWork.SaveChanges();

                                                    NewCivilWithLegsEntity.baseTypeId = NewBaseTypeForeignKeyEntity.Id;
                                                }
                                            }

                                            string TowerGuyLineType = TypeOfSupportInfoDataTable.Rows[j]["Guyed Type"].ToString();
                                            if (!string.IsNullOrEmpty(TowerGuyLineType))
                                            {
                                                TLIguyLineType guyLineType = _unitOfWork.GuyLineTypeRepository
                                                    .GetWhereFirst(x => x.Name.ToLower() == TowerGuyLineType.ToLower() && !x.Deleted);

                                                if (guyLineType != null)
                                                    NewCivilWithLegsEntity.GuylineTypeId = guyLineType.Id;

                                                else
                                                {
                                                    TLIguyLineType NewGuyLineType = new TLIguyLineType();
                                                    NewGuyLineType.Name = TowerGuyLineType;
                                                    _unitOfWork.GuyLineTypeRepository.Add(NewGuyLineType);
                                                    _unitOfWork.SaveChanges();
                                                    NewCivilWithLegsEntity.GuylineTypeId = NewGuyLineType.Id;
                                                }
                                            }

                                            db.TLIcivilWithLegs.Add(NewCivilWithLegsEntity);
                                            db.SaveChanges();
                                            //
                                            // Dynamic Attributes..
                                            //

                                            foreach (object CivilWithLegsDynamicAttribute in CivilWithLegsDynamicAttributes)
                                            {
                                                TLIdynamicAtt CivilWithLegsDynamicAttEntity = CivilWithLegsDynamicAttributesInTLIS.FirstOrDefault(x =>
                                                    x.Key.ToLower() == CivilWithLegsDynamicAttribute.ToString().Replace('_', ' ').ToLower());

                                                TLIdynamicAttInstValue NewCivilWithLegsDynamicAttributeInstallationValue = new TLIdynamicAttInstValue()
                                                {
                                                    DynamicAttId = CivilWithLegsDynamicAttEntity.Id,
                                                    InventoryId = NewCivilWithLegsEntity.Id,
                                                    tablesNamesId = CivilWithLegsTableNameId,
                                                    disable = false
                                                };
                                                if (CivilWithLegsDynamicAttEntity.Key.ToLower() == "Path".ToLower())
                                                {
                                                    //NewCivilWithLegsDynamicAttributeInstallationValue.ValueString = TypeOfSupportInfoDataTable.Rows[j][CivilWithLegsDynamicAttEntity.Key].ToString();
                                                    //string ProjectRootPath = _hostingEnvironment.ContentRootPath;
                                                    //System.IO.File.Copy("s", ProjectRootPath + "\\");
                                                }
                                                else
                                                {
                                                    if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j][CivilWithLegsDynamicAttEntity.Key].ToString()))
                                                    {
                                                        if (CivilWithLegsDynamicAttEntity.DataType.Name.ToLower() == "string".ToLower())
                                                            NewCivilWithLegsDynamicAttributeInstallationValue.ValueString = TypeOfSupportInfoDataTable.Rows[j][CivilWithLegsDynamicAttEntity.Key].ToString();
                                                        else if (CivilWithLegsDynamicAttEntity.DataType.Name.ToLower() == "int".ToLower() ||
                                                            CivilWithLegsDynamicAttEntity.DataType.Name.ToLower() == "double".ToLower())
                                                        {
                                                            double DoubleParser = 0;

                                                            CheckParser = double.TryParse(TypeOfSupportInfoDataTable.Rows[j][CivilWithLegsDynamicAttEntity.Key].ToString(), out DoubleParser);

                                                            if (CheckParser)
                                                                NewCivilWithLegsDynamicAttributeInstallationValue.ValueDouble = DoubleParser;

                                                            else
                                                            {
                                                                TowerTransaction.Dispose();

                                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                                {
                                                                    CreatedAt = DateTime.Now,
                                                                    ErrMsg = $"({CivilWithLegsDynamicAttEntity.Key}) coulumn's value must be a number",
                                                                    IsDeleted = false,
                                                                    IsLib = false,
                                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString(),
                                                                    SheetName = "Type of support info",
                                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                                };

                                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                                _unitOfWork.SaveChanges();

                                                                continue;
                                                            }
                                                        }
                                                        else if (CivilWithLegsDynamicAttEntity.DataType.Name.ToLower() == "boolean".ToLower())
                                                        {
                                                            bool BooleanParser = false;

                                                            CheckParser = bool.TryParse(TypeOfSupportInfoDataTable.Rows[j][CivilWithLegsDynamicAttEntity.Key].ToString(), out BooleanParser);

                                                            if (CheckParser)
                                                                NewCivilWithLegsDynamicAttributeInstallationValue.ValueBoolean = BooleanParser;

                                                            else
                                                            {
                                                                TowerTransaction.Dispose();

                                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                                {
                                                                    CreatedAt = DateTime.Now,
                                                                    ErrMsg = $"({CivilWithLegsDynamicAttEntity.Key}) coulumn's value must be a number",
                                                                    IsDeleted = false,
                                                                    IsLib = false,
                                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString(),
                                                                    SheetName = "Type of support info",
                                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                                };

                                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                                _unitOfWork.SaveChanges();

                                                                continue;
                                                            }
                                                        }
                                                        else if (CivilWithLegsDynamicAttEntity.DataType.Name.ToLower() == "datetime".ToLower())
                                                        {
                                                            DateTime DateTimeParser = DateTime.Now;

                                                            CheckParser = DateTime.TryParse(TypeOfSupportInfoDataTable.Rows[j][CivilWithLegsDynamicAttEntity.Key].ToString(), out DateTimeParser);

                                                            if (CheckParser)
                                                                NewCivilWithLegsDynamicAttributeInstallationValue.ValueDateTime = DateTimeParser;

                                                            else
                                                            {
                                                                TowerTransaction.Dispose();

                                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                                {
                                                                    CreatedAt = DateTime.Now,
                                                                    ErrMsg = $"({CivilWithLegsDynamicAttEntity.Key}) coulumn's value must be date",
                                                                    IsDeleted = false,
                                                                    IsLib = false,
                                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString(),
                                                                    SheetName = "Type of support info",
                                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                                };

                                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                                _unitOfWork.SaveChanges();

                                                                continue;
                                                            }
                                                        }

                                                        _unitOfWork.DynamicAttInstValueRepository.Add(NewCivilWithLegsDynamicAttributeInstallationValue);
                                                        _unitOfWork.SaveChanges();
                                                    }
                                                }
                                            }
                                            //
                                            // All Civil Inst Information..
                                            //

                                            TLIallCivilInst TowerAllCivilInst = new TLIallCivilInst();

                                            string TowerCurrentStatus = TypeOfSupportInfoDataTable.Rows[j]["Current Status"].ToString();
                                            if (!string.IsNullOrEmpty(TowerCurrentStatus))
                                            {
                                                TLIitemStatus CheckCurrentStatus = _unitOfWork.ItemStatusRepository
                                                    .GetWhereFirst(x => x.Name.ToLower() == TowerCurrentStatus.ToLower() && !x.Deleted);

                                                if (CheckCurrentStatus != null)
                                                    TowerAllCivilInst.ItemStatusId = CheckCurrentStatus.Id;

                                                else
                                                {
                                                    TLIitemStatus NewItemStatus = new TLIitemStatus();
                                                    NewItemStatus.Name = TowerCurrentStatus;
                                                    _unitOfWork.ItemStatusRepository.Add(NewItemStatus);
                                                    _unitOfWork.SaveChanges();
                                                    TowerAllCivilInst.ItemStatusId = NewItemStatus.Id;
                                                }
                                            }

                                            TowerAllCivilInst.civilWithLegsId = NewCivilWithLegsEntity.Id;
                                            TowerAllCivilInst.Draft = false;

                                            _unitOfWork.AllCivilInstRepository.Add(TowerAllCivilInst);
                                            _unitOfWork.SaveChanges();

                                            //
                                            // Civil Site Date Information..
                                            //

                                            TLIcivilSiteDate TowerCivilSiteDateEntity = new TLIcivilSiteDate();

                                            TowerCivilSiteDateEntity.SiteCode = CivilWithLegsSiteCode;
                                            TowerCivilSiteDateEntity.allCivilInstId = TowerAllCivilInst.Id;

                                            if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Status Date"].ToString()))
                                            {
                                                DateTime DateTimeParser = DateTime.Now;

                                                CheckParser = DateTime.TryParse(TypeOfSupportInfoDataTable.Rows[j]["Status Date"].ToString(), out DateTimeParser);

                                                if (CheckParser)
                                                    TowerCivilSiteDateEntity.InstallationDate = DateTimeParser;

                                                else
                                                {
                                                    TowerTransaction.Dispose();

                                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                    {
                                                        CreatedAt = DateTime.Now,
                                                        ErrMsg = $"(Status Date) coulumn's value must be date",
                                                        IsDeleted = false,
                                                        IsLib = false,
                                                        RefTable = Helpers.Constants.TablesNames.TLIcivilSiteDate.ToString(),
                                                        SheetName = "Type of support info",
                                                        UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                    };

                                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                    _unitOfWork.SaveChanges();

                                                    continue;
                                                }
                                            }
                                            else
                                                TowerCivilSiteDateEntity.InstallationDate = DateTime.Now;

                                            _unitOfWork.CivilSiteDateRepository.Add(TowerCivilSiteDateEntity);
                                            _unitOfWork.SaveChanges();


                                            //
                                            // Legs Inforamtion..
                                            //

                                            List<string> LegLetters = new List<string>()
                                        {
                                            "A",
                                            "B",
                                            "C",
                                            "D"
                                        };

                                            for (int k = 0; k < 4; k++)
                                            {
                                                TLIleg leg = new TLIleg();
                                                string legname = "leg" + (k + 1).ToString() + " Angle";

                                                if (k == 0)
                                                    legname += " as per 0 north";

                                                leg.CiviLegName = "Leg" + LegLetters[k];

                                                leg.LegAzimuth = float.Parse(TypeOfSupportInfoDataTable.Rows[j][legname].ToString());
                                                leg.CivilWithLegInstId = NewCivilWithLegsEntity.Id;

                                                _unitOfWork.LegRepository.Add(leg);
                                            }
                                            _unitOfWork.SaveChanges();

                                            string TowerReferenceName = TypeOfSupportInfoDataTable.Rows[j]["Reference Civil steel Name"].ToString();
                                            float TowerReferenceCivilSteelDistance = 0;
                                            if (!string.IsNullOrEmpty(TowerReferenceName))
                                            {
                                                string TowerDistanceFromReferenceCivilSteel = TypeOfSupportInfoDataTable.Rows[j]["Distance From reference civil steel"].ToString();

                                                if (!string.IsNullOrEmpty(TowerDistanceFromReferenceCivilSteel))
                                                {
                                                    CheckParser = float.TryParse(TowerDistanceFromReferenceCivilSteel, out FloatParser);

                                                    if (CheckParser)
                                                        TowerReferenceCivilSteelDistance = FloatParser;

                                                    else
                                                    {
                                                        TowerTransaction.Dispose();

                                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                        {
                                                            CreatedAt = DateTime.Now,
                                                            ErrMsg = $"(Distance From reference civil steel) coulumn's value must be a number",
                                                            IsDeleted = false,
                                                            IsLib = false,
                                                            RefTable = Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString(),
                                                            SheetName = "Type of support info",
                                                            UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                        };

                                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                        _unitOfWork.SaveChanges();

                                                        continue;
                                                    }
                                                }
                                                else
                                                {
                                                    TowerTransaction.Dispose();

                                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                    {
                                                        CreatedAt = DateTime.Now,
                                                        ErrMsg = $"(Distance From reference civil steel) coulumn's value can't be null or empty",
                                                        IsDeleted = false,
                                                        IsLib = false,
                                                        RefTable = Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString(),
                                                        SheetName = "Type of support info",
                                                        UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                    };

                                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                    _unitOfWork.SaveChanges();

                                                    continue;
                                                }

                                                string TowerAzimuthWithReferenceString = TypeOfSupportInfoDataTable.Rows[j]["Azimuth with reference civil steel"].ToString();
                                                float TowerAzimuthWithReference = 0;
                                                if (!string.IsNullOrEmpty(TowerAzimuthWithReferenceString))
                                                {
                                                    CheckParser = float.TryParse(TowerAzimuthWithReferenceString, out FloatParser);

                                                    if (CheckParser)
                                                        TowerAzimuthWithReference = FloatParser;

                                                    else
                                                    {
                                                        TowerTransaction.Dispose();

                                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                        {
                                                            CreatedAt = DateTime.Now,
                                                            ErrMsg = $"(Azimuth with reference civil steel) coulumn's value must be a number",
                                                            IsDeleted = false,
                                                            IsLib = false,
                                                            RefTable = Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString(),
                                                            SheetName = "Type of support info",
                                                            UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                        };

                                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                        _unitOfWork.SaveChanges();

                                                        continue;
                                                    }

                                                    AddDistance(TowerReferenceName, TowerAllCivilInst.Id, TowerAzimuthWithReference, TowerReferenceCivilSteelDistance, CivilWithLegsSiteCode);
                                                }
                                            }

                                            //
                                            // Logistical Information
                                            //

                                            string CivilWithLegsSupplier = TypeOfSupportInfoDataTable.Rows[j]["Supplier"].ToString();
                                            if (!string.IsNullOrEmpty(CivilWithLegsSupplier))
                                                AddLogistical(CivilWithLegsSupplier, "Supplier", "CivilSupport", "TLIcivilWithLegLibrary", NewCivilWithLegsEntity.CivilWithLegsLibId);

                                            string CivilWithLegsTowerContractor = TypeOfSupportInfoDataTable.Rows[j]["Tower Contractor"].ToString();
                                            if (!string.IsNullOrEmpty(CivilWithLegsTowerContractor))
                                                AddLogistical(CivilWithLegsTowerContractor, "Contractor", "CivilSupport", "TLIcivilWithLegLibrary", NewCivilWithLegsEntity.CivilWithLegsLibId);
                                            _unitOfWork.SaveChanges();

                                        }
                                        catch (Exception err)
                                        {
                                            TowerTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = err.Message,
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString(),
                                                SheetName = "Type of support info",
                                                UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                    }
                                    TowerTransaction.Complete();


                                }
                            }
                        }
                        return new Response<string>("Succeed");

                    }
                }
                catch (Exception err)
                {

                    return new Response<string>(err.Message);
                }


            }
        }

        public Response<string> ImportInstallationFileData2(IFormFile File, string ConnectionString)
        {
            List<TLIdataType> DataTypes = _unitOfWork.DataTypeRepository.GetAllWithoutCount().ToList();
            List<TLItablesNames> TablesName = _unitOfWork.TablesNamesRepository.GetAllWithoutCount().ToList();

            using (var connection = new OracleConnection(ConnectionString))
            {
                connection.Open();
                List<KeyValuePair<int, string>> UnsavedRows = new List<KeyValuePair<int, string>>();

                var FilePath = SaveFileAndGetFilePath(File);

                try
                {
                    FileInfo existingFile = new FileInfo(FilePath);
                    ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {
                        float FloatParser = 0;
                        bool CheckParser = false;

                        ////////////////////////////////////////////////////////////
                        /////////////////// Type Of Support Info ///////////////////
                        ////////////////////////////////////////////////////////////

                        ExcelWorksheet TypeOfSupportInfoSheet = package.Workbook.Worksheets.FirstOrDefault(x => x.Name.ToLower() == "Type of support info".ToLower());
                        int TypeOfSupportInfoRows = 0;
                        try
                        {
                            TypeOfSupportInfoRows = TypeOfSupportInfoSheet.Dimension.End.Row;
                        }
                        catch (NullReferenceException)
                        {
                            goto SideArm;
                        }
                        int TypeOfSupportInfoColumns = TypeOfSupportInfoSheet.Dimension.End.Column;

                        DataTable TypeOfSupportInfoDataTable = new DataTable();
                        List<string> TypeOfSupportInfoSheetColumn = new List<string>();

                        for (int i = 1; i <= TypeOfSupportInfoColumns; i++)
                        {
                            string AfterTrim = TypeOfSupportInfoSheet.Cells[1, i].Value.ToString().Trim();
                            AfterTrim = Regex.Replace(AfterTrim, @"\s+", " ");
                            TypeOfSupportInfoSheetColumn.Add(AfterTrim);
                        }

                        for (int i = 1; i <= TypeOfSupportInfoColumns; i++)
                        {
                            var ColName = TypeOfSupportInfoSheet.Cells[1, i].Value.ToString().Trim();
                            ColName = Regex.Replace(ColName, @"\s+", " ");
                            TypeOfSupportInfoDataTable.Columns.Add(ColName);
                        }
                        for (int i = 2; i <= TypeOfSupportInfoRows; i++)
                        {
                            DataRow TypeOfSupportInfoDataRow = TypeOfSupportInfoDataTable.NewRow();
                            for (int j = 1; j <= TypeOfSupportInfoColumns; j++)
                            {
                                string ColName = TypeOfSupportInfoSheet.Cells[1, j].Value.ToString().Trim();
                                ColName = Regex.Replace(ColName, @"\s+", " ");
                                if (TypeOfSupportInfoSheet.Cells[i, j].Value != null)
                                {
                                    string ValueAsString = TypeOfSupportInfoSheet.Cells[i, j].Value.ToString().Trim();
                                    ValueAsString = Regex.Replace(ValueAsString, @"\s+", " ");
                                    object Value = ValueAsString;
                                    TypeOfSupportInfoDataRow[ColName] = Value;
                                }
                                else
                                    TypeOfSupportInfoDataRow[ColName] = TypeOfSupportInfoSheet.Cells[i, j].Value;
                            }
                            TypeOfSupportInfoDataTable.Rows.Add(TypeOfSupportInfoDataRow);
                        }
                        //
                        // Dynamic Attributes For Civil With Legs..
                        //

                        Array CivilWithLegsDynamicAttributes = Enum.GetValues(typeof(Helpers.Constants.CivilWithLegsInstallationMissedAttributes));

                        int CivilWithLegsTableNameId = TablesName.FirstOrDefault(x =>
                            x.TableName.ToLower() == Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString().ToLower()).Id;

                        foreach (object CivilWithLegsDynamicAttribute in CivilWithLegsDynamicAttributes)
                        {
                            string DynamicAttributeDataTypeName = Helpers.Constants.GetEnumDescription(
                                (Helpers.Constants.CivilWithLegsInstallationMissedAttributes)CivilWithLegsDynamicAttribute);

                            TLIdynamicAtt CheckIfDynamicAttributeAlreadyExist = _unitOfWork.DynamicAttRepository
                                .GetWhereFirst(x => x.Key.ToLower() == CivilWithLegsDynamicAttribute.ToString().ToLower().Replace('_', ' ') &&
                                    x.tablesNamesId == CivilWithLegsTableNameId);

                            if (CheckIfDynamicAttributeAlreadyExist == null)
                            {
                                TLIdynamicAtt SideArmNewDynamicAttribute = new TLIdynamicAtt
                                {
                                    Key = CivilWithLegsDynamicAttribute.ToString().Replace('_', ' '),
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == DynamicAttributeDataTypeName.ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = CivilWithLegsTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                };

                                _unitOfWork.DynamicAttRepository.Add(SideArmNewDynamicAttribute);
                                _unitOfWork.SaveChanges();
                            }
                        }
                        List<TLIdynamicAtt> CivilWithLegsDynamicAttributesInTLIS = _unitOfWork.DynamicAttRepository
                            .GetIncludeWhere(x => x.tablesNamesId == CivilWithLegsTableNameId, x => x.DataType).ToList();

                        //
                        // Dynamic Attributes For Civil Without Leg (Mast)..
                        //

                        int MastCategoryId = _unitOfWork.CivilWithoutLegCategoryRepository
                            .GetWhereFirst(x => x.Name.ToLower() == Helpers.Constants.CivilWithoutLegCategories.Mast.ToString().ToLower()).Id;

                        int CivilWithoutLegMastTableNameId = TablesName.FirstOrDefault(x =>
                            x.TableName.ToLower() == Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString().ToLower()).Id;

                        List<TLIdynamicAtt> MastMissedAttributeCSV = new List<TLIdynamicAtt>()
                        {
                            new TLIdynamicAtt
                            {
                                Key = "concrete base width (m)",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "Double".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = MastCategoryId,
                                tablesNamesId = CivilWithoutLegMastTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Created",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "DateTime".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = MastCategoryId,
                                tablesNamesId = CivilWithoutLegMastTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Created By",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = MastCategoryId,
                                tablesNamesId = CivilWithoutLegMastTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Spindles Base plate thickness (cm)",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "Double".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = MastCategoryId,
                                tablesNamesId = CivilWithoutLegMastTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "st1 Horizontal Spindle length (m)",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "Double".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = MastCategoryId,
                                tablesNamesId = CivilWithoutLegMastTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "st1 Longitudinal spindle length (m)",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "Double".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = MastCategoryId,
                                tablesNamesId = CivilWithoutLegMastTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "st2 Horizontal Spindle length (m)",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "Double".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = MastCategoryId,
                                tablesNamesId = CivilWithoutLegMastTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "st2 Longitudinal spindle length (m)",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "Double".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = MastCategoryId,
                                tablesNamesId = CivilWithoutLegMastTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "st3 Horizontal Spindle length (m)",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "Double".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = MastCategoryId,
                                tablesNamesId = CivilWithoutLegMastTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "st3 Longitudinal spindle length (m)",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "Double".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = MastCategoryId,
                                tablesNamesId = CivilWithoutLegMastTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "st4 Horizontal Spindle length (m)",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "Double".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = MastCategoryId,
                                tablesNamesId = CivilWithoutLegMastTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "st4 Longitudinal spindle length (m)",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "Double".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = MastCategoryId,
                                tablesNamesId = CivilWithoutLegMastTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Related Plan",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = MastCategoryId,
                                tablesNamesId = CivilWithoutLegMastTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Mast Number",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "Double".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = MastCategoryId,
                                tablesNamesId = CivilWithoutLegMastTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Modified",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "DateTime".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = MastCategoryId,
                                tablesNamesId = CivilWithoutLegMastTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Modified By",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = MastCategoryId,
                                tablesNamesId = CivilWithoutLegMastTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Location",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = MastCategoryId,
                                tablesNamesId = CivilWithoutLegMastTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Site visit date",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = MastCategoryId,
                                tablesNamesId = CivilWithoutLegMastTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Title",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = MastCategoryId,
                                tablesNamesId = CivilWithoutLegMastTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "TTT",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = MastCategoryId,
                                tablesNamesId = CivilWithoutLegMastTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "te",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = MastCategoryId,
                                tablesNamesId = CivilWithoutLegMastTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "getcollectplanstatue",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = MastCategoryId,
                                tablesNamesId = CivilWithoutLegMastTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "dddddd",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = MastCategoryId,
                                tablesNamesId = CivilWithoutLegMastTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "sinarule",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = MastCategoryId,
                                tablesNamesId = CivilWithoutLegMastTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Path",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = MastCategoryId,
                                tablesNamesId = CivilWithoutLegMastTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                        };

                        List<TLIdynamicAtt> MastAllDynamicAttribute = _unitOfWork.DynamicAttRepository
                            .GetWhere(x => x.tablesNamesId == CivilWithoutLegMastTableNameId &&
                                x.CivilWithoutLegCategoryId == MastCategoryId).ToList();

                        List<TLIdynamicAtt> MastMissedAttributes = MastMissedAttributeCSV
                           .Except(MastAllDynamicAttribute, new TLIdynamicAttComparer())
                           .ToList();

                        _unitOfWork.DynamicAttRepository.AddRange(MastMissedAttributes);
                        _unitOfWork.SaveChanges();

                        //
                        // Dynamic Attribute For Civil Without Leg (Monopole)..
                        //

                        int CivilWithoutLegMonopoleTableNameId = TablesName.FirstOrDefault(x =>
                            x.TableName.ToLower() == Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString().ToLower()).Id;

                        int MonopoleCategoryId = _unitOfWork.CivilWithoutLegCategoryRepository
                            .GetWhereFirst(x => x.Name.ToLower() == Helpers.Constants.CivilWithoutLegCategories.Monopole.ToString().ToLower()).Id;

                        List<TLIdynamicAtt> MonopoleMissedAttributeCSV = new List<TLIdynamicAtt>()
                        {
                            new TLIdynamicAtt
                            {
                                Key = "Title",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = MonopoleCategoryId,
                                tablesNamesId = CivilWithoutLegMonopoleTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "TTT",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = MonopoleCategoryId,
                                tablesNamesId = CivilWithoutLegMonopoleTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "te",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = MonopoleCategoryId,
                                tablesNamesId = CivilWithoutLegMonopoleTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "getcollectplanstatue",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = MonopoleCategoryId,
                                tablesNamesId = CivilWithoutLegMonopoleTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "dddddd",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = MonopoleCategoryId,
                                tablesNamesId = CivilWithoutLegMonopoleTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "sinarule",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = MonopoleCategoryId,
                                tablesNamesId = CivilWithoutLegMonopoleTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Path",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = MonopoleCategoryId,
                                tablesNamesId = CivilWithoutLegMonopoleTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Item Type",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = MonopoleCategoryId,
                                tablesNamesId = CivilWithoutLegMonopoleTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Add Date",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "DateTime".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = MonopoleCategoryId,
                                tablesNamesId = CivilWithoutLegMonopoleTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Height",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "Double".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = MonopoleCategoryId,
                                tablesNamesId = CivilWithoutLegMonopoleTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            }
                        };

                        List<TLIdynamicAtt> MonopoleAllDynamicAttribute = _unitOfWork.DynamicAttRepository
                            .GetWhere(x => x.tablesNamesId == CivilWithoutLegMonopoleTableNameId &&
                                x.CivilWithoutLegCategoryId == MonopoleCategoryId).ToList();

                        List<TLIdynamicAtt> MonopoleMissedAttributes = MonopoleMissedAttributeCSV.Except(MonopoleAllDynamicAttribute
                            , new TLIdynamicAttComparer()).ToList();

                        _unitOfWork.DynamicAttRepository.AddRange(MonopoleMissedAttributes);
                        _unitOfWork.SaveChanges();

                        //
                        // Dynamic Attribute For Civil Non Steel..
                        //

                        Array CivilNonSteelDynamicAttributes = Enum.GetValues(typeof(Helpers.Constants.CivilNonSteelInstallationMissedAttributes));

                        int CivilNonSteelTableNameId = TablesName.FirstOrDefault(x =>
                            x.TableName.ToLower() == Helpers.Constants.TablesNames.TLIcivilNonSteel.ToString().ToLower()).Id;

                        foreach (object CivilNonSteelDynamicAttribute in CivilNonSteelDynamicAttributes)
                        {
                            string DynamicAttributeDataTypeName = Helpers.Constants.GetEnumDescription(
                                (Helpers.Constants.CivilNonSteelInstallationMissedAttributes)CivilNonSteelDynamicAttribute);

                            TLIdynamicAtt CheckIfDynamicAttributeAlreadyExist = _unitOfWork.DynamicAttRepository
                                .GetWhereFirst(x => x.Key.ToLower() == CivilNonSteelDynamicAttribute.ToString().ToLower().Replace('_', ' ') &&
                                    x.tablesNamesId == CivilNonSteelTableNameId);

                            if (CheckIfDynamicAttributeAlreadyExist == null)
                            {
                                TLIdynamicAtt CivilNonSteelNewDynamicAttribute = new TLIdynamicAtt
                                {
                                    Key = CivilNonSteelDynamicAttribute.ToString().Replace('_', ' '),
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == DynamicAttributeDataTypeName.ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = CivilNonSteelTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                };

                                _unitOfWork.DynamicAttRepository.Add(CivilNonSteelNewDynamicAttribute);
                                _unitOfWork.SaveChanges();
                            }
                        }

                        for (int j = 0; j <= TypeOfSupportInfoDataTable.Rows.Count - 1; j++)
                        {
                            string CivilType = TypeOfSupportInfoDataTable.Rows[j]["Type"].ToString();

                            if (CivilType.ToLower() == "Tower".ToLower())
                            {
                                using (TransactionScope TowerTransaction = new TransactionScope(TransactionScopeOption.Required,
                                    new System.TimeSpan(0, 15, 0)))
                                {
                                    try
                                    {
                                        //
                                        // Library Information..
                                        //

                                        string CivilWithLegsModel = TypeOfSupportInfoDataTable.Rows[j]["Tower Type"].ToString();

                                        TLIcivilWithLegLibrary CheckTowerType = new TLIcivilWithLegLibrary();

                                        if (string.IsNullOrEmpty(CivilWithLegsModel))
                                        {
                                            TowerTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Tower Type) coulumn's value can't be null or empty",
                                                IsDeleted = false,
                                                IsLib = true,
                                                RefTable = Helpers.Constants.TablesNames.TLIcivilWithLegLibrary.ToString(),
                                                SheetName = "Type of support info",
                                                UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }
                                        else
                                        {
                                            CheckTowerType = _unitOfWork.CivilWithLegLibraryRepository
                                                .GetWhereFirst(x => x.Model.ToLower() == CivilWithLegsModel.ToLower() && !x.Deleted);

                                            if (CheckTowerType == null)
                                            {
                                                TowerTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Tower Type) coulumn's value: ({CivilWithLegsModel}) doesn't exist in TLIS",
                                                    IsDeleted = false,
                                                    IsLib = true,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithLegLibrary.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }

                                            _unitOfWork.SaveChanges();
                                        }

                                        TLIcivilWithLegs NewCivilWithLegsEntity = new TLIcivilWithLegs();

                                        NewCivilWithLegsEntity.CivilWithLegsLibId = CheckTowerType.Id;

                                        string TowerName = TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"].ToString();
                                        NewCivilWithLegsEntity.Name = TowerName;

                                        string CivilWithLegsSiteCode = string.Empty;
                                        if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Site Code"].ToString()))
                                        {
                                            TLIsite SiteEntity = _unitOfWork.SiteRepository
                                               .GetWhereFirst(x => x.SiteCode.ToLower() == TypeOfSupportInfoDataTable.Rows[j]["Site Code"].ToString().ToLower());

                                            if (SiteEntity != null)
                                                CivilWithLegsSiteCode = SiteEntity.SiteCode;

                                            else
                                            {
                                                TowerTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"({TypeOfSupportInfoDataTable.Rows[j]["Site Code"]}) coulumn's value: ({TypeOfSupportInfoDataTable.Rows[j]["Site Code"]}) doesn't exist in TLIS",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                        else if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Site Name"].ToString()))
                                        {
                                            TLIsite SiteEntity = _unitOfWork.SiteRepository
                                                .GetWhereFirst(x => x.SiteName.ToLower() == TypeOfSupportInfoDataTable.Rows[j]["Site Name"].ToString().ToLower());

                                            if (SiteEntity != null)
                                                CivilWithLegsSiteCode = SiteEntity.SiteCode;

                                            else
                                            {
                                                TowerTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"({TypeOfSupportInfoDataTable.Rows[j]["Site Name"]}) coulumn's value: ({TypeOfSupportInfoDataTable.Rows[j]["Site Name"]}) doesn't exist in TLIS",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                        else
                                        {
                                            TowerTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"One of those columns must have a value: (Site Code, Site Name)",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                                SheetName = "Type of support info",
                                                UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        //
                                        // Check if This Tower Name is Already Exist in This Site..
                                        //

                                        TLIcivilSiteDate CheckCivilWithLegsNameIfDuplicate = _unitOfWork.CivilSiteDateRepository
                                            .GetIncludeWhereFirst(x => !x.Dismantle && x.SiteCode.ToLower() == CivilWithLegsSiteCode.ToLower() &&
                                                !x.allCivilInst.Draft && (x.allCivilInst.civilWithLegsId != null ?
                                                    x.allCivilInst.civilWithLegs.Name.ToLower() == TowerName.ToLower() : false),
                                                        x => x.allCivilInst, x => x.allCivilInst.civilWithLegs);

                                        if (CheckCivilWithLegsNameIfDuplicate != null)
                                        {
                                            TowerTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Civil steel Name) column's value: ({TowerName}) and (type) : (Tower) is already exist in " +
                                                    $"this (SiteCode): ({CivilWithLegsSiteCode})",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString(),
                                                SheetName = "Type of support info",
                                                UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        NewCivilWithLegsEntity.OtherBaseType = TypeOfSupportInfoDataTable.Rows[j]["Other Base Type"].ToString();
                                        NewCivilWithLegsEntity.BaseNote = TypeOfSupportInfoDataTable.Rows[j]["Notes"].ToString();
                                        NewCivilWithLegsEntity.DiagonalMemberPrefix = TypeOfSupportInfoDataTable.Rows[j]["Diagonal Member Prefix"].ToString();
                                        NewCivilWithLegsEntity.DiagonalMemberDimensions = TypeOfSupportInfoDataTable.Rows[j]["Diagonal Member Dimensions(mm)"].ToString();
                                        NewCivilWithLegsEntity.DiagonalMemberSection = TypeOfSupportInfoDataTable.Rows[j]["Diagonal Member section"].ToString();
                                        //NewCivilWithLegsEntity.BasePlateShape = TypeOfSupportInfoDataTable.Rows[j]["Base Plate Shape"].ToString();
                                        NewCivilWithLegsEntity.BasePlateDimensions = TypeOfSupportInfoDataTable.Rows[j]["Base Plate Dimentions(mm)"].ToString();
                                        NewCivilWithLegsEntity.BasePlatethickness = TypeOfSupportInfoDataTable.Rows[j]["Base Plate Thickness(mm)"].ToString();
                                        NewCivilWithLegsEntity.SteelCrossSection = TypeOfSupportInfoDataTable.Rows[j]["Steel Cross Section"].ToString();
                                        NewCivilWithLegsEntity.VerticalMeasurement = TypeOfSupportInfoDataTable.Rows[j]["Vertical measurement(mm)"].ToString();
                                        NewCivilWithLegsEntity.DimensionsLeg = TypeOfSupportInfoDataTable.Rows[j]["Dimensions/Leg(mm)"].ToString();
                                        NewCivilWithLegsEntity.WindMaxLoadm2 = 0;
                                        NewCivilWithLegsEntity.PoDate = DateTime.Now;

                                        if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Location Height(m)"].ToString()))
                                        {
                                            double DoubleParser = 0;

                                            CheckParser = double.TryParse(TypeOfSupportInfoDataTable.Rows[j]["Location Height(m)"].ToString(), out DoubleParser);

                                            if (CheckParser)
                                                NewCivilWithLegsEntity.LocationHeight = DoubleParser;

                                            else
                                            {
                                                TowerTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Location Height(m)) coulumn's value must be a number",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                        if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["TOWER HEIGHT"].ToString()))
                                        {
                                            CheckParser = float.TryParse(TypeOfSupportInfoDataTable.Rows[j]["TOWER HEIGHT"].ToString(), out FloatParser);

                                            if (CheckParser)
                                                NewCivilWithLegsEntity.HeightBase = FloatParser;

                                            else
                                            {
                                                TowerTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(TOWER HEIGHT) coulumn's value must be a number",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                        if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Bolt Holes"].ToString()))
                                        {
                                            int intParser = 0;

                                            CheckParser = int.TryParse(TypeOfSupportInfoDataTable.Rows[j]["Bolt Holes"].ToString(), out intParser);

                                            if (CheckParser)
                                                NewCivilWithLegsEntity.BoltHoles = intParser;

                                            else
                                            {
                                                TowerTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Bolt Holes) coulumn's value must be a number",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                        if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Base Height H2"].ToString()))
                                        {
                                            double DoubleParser = 0;

                                            CheckParser = double.TryParse(TypeOfSupportInfoDataTable.Rows[j]["Base Height H2"].ToString(), out DoubleParser);

                                            if (CheckParser)
                                                NewCivilWithLegsEntity.H2height = DoubleParser;

                                            else
                                            {
                                                TowerTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Base Height H2) coulumn's value must be a number",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                        if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Total Height"].ToString()))
                                        {
                                            CheckParser = float.TryParse(TypeOfSupportInfoDataTable.Rows[j]["Total Height"].ToString(), out FloatParser);

                                            if (CheckParser)
                                                NewCivilWithLegsEntity.TotalHeight = FloatParser;

                                            else
                                            {
                                                TowerTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Total Height) coulumn's value must be a number",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                        if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Height of the enforcement"].ToString()))
                                        {
                                            CheckParser = float.TryParse(TypeOfSupportInfoDataTable.Rows[j]["Height of the enforcement"].ToString(), out FloatParser);

                                            if (CheckParser)
                                                NewCivilWithLegsEntity.EnforcementHeightBase = FloatParser;

                                            else
                                            {
                                                TowerTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Height of the enforcement) coulumn's value must be a number",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                        if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Enforcement level"].ToString()))
                                        {
                                            CheckParser = float.TryParse(TypeOfSupportInfoDataTable.Rows[j]["Enforcement level"].ToString(), out FloatParser);

                                            if (CheckParser)
                                                NewCivilWithLegsEntity.Enforcementlevel = FloatParser;

                                            else
                                            {
                                                TowerTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Enforcement level) coulumn's value must be a number",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }

                                        //string TowerStructureType = TypeOfSupportInfoDataTable.Rows[j]["Structure Type Compatible With Design"].ToString();
                                        //if (!string.IsNullOrEmpty(TowerStructureType))
                                        //{
                                        //    if (TowerStructureType.ToLower() == "Yes".ToLower())
                                        //        NewCivilWithLegsEntity.StructureType = StructureTypeCompatibleWithDesign.Yes;

                                        //    else if (TowerStructureType.ToLower() == "No".ToLower())
                                        //        NewCivilWithLegsEntity.StructureType = StructureTypeCompatibleWithDesign.No;

                                        //    else
                                        //    {
                                        //        TowerTransaction.Dispose();

                                        //        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                        //        {
                                        //            CreatedAt = DateTime.Now,
                                        //            ErrMsg = $"(Structure Type Compatible With Design) coulumn's value must be boolean (Yes/No)",
                                        //            IsDeleted = false,
                                        //            IsLib = false,
                                        //            RefTable = Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString(),
                                        //            SheetName = "Type of support info",
                                        //            UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                        //        };

                                        //        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                        //        _unitOfWork.SaveChanges();

                                        //        continue;
                                        //    }
                                        //}

                                        //string TowerSectionsLegType = TypeOfSupportInfoDataTable.Rows[j]["Sections(Leg) Type Compatible With Design"].ToString();
                                        //if (!string.IsNullOrEmpty(TowerSectionsLegType))
                                        //{
                                        //    if (TowerSectionsLegType.ToLower() == "Yes".ToLower())
                                        //        NewCivilWithLegsEntity.SectionsLegType = SectionsLegTypeCompatibleWithDesign.Yes;

                                        //    else if (TowerSectionsLegType.ToLower() == "No".ToLower())
                                        //        NewCivilWithLegsEntity.SectionsLegType = SectionsLegTypeCompatibleWithDesign.No;

                                        //    else
                                        //    {
                                        //        TowerTransaction.Dispose();

                                        //        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                        //        {
                                        //            CreatedAt = DateTime.Now,
                                        //            ErrMsg = $"(Sections(Leg) Type Compatible With Design) coulumn's value must be boolean (Yes/No)",
                                        //            IsDeleted = false,
                                        //            IsLib = false,
                                        //            RefTable = Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString(),
                                        //            SheetName = "Type of support info",
                                        //            UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                        //        };

                                        //        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                        //        _unitOfWork.SaveChanges();

                                        //        continue;
                                        //    }
                                        //}

                                        string CivilWithLegsEnforcement = TypeOfSupportInfoDataTable.Rows[j]["Tower enforcement"].ToString();
                                        NewCivilWithLegsEntity.IsEnforeced = false;

                                        if (!string.IsNullOrEmpty(CivilWithLegsEnforcement))
                                        {
                                            if (CivilWithLegsEnforcement.ToLower() == "Yes".ToLower())
                                                NewCivilWithLegsEntity.IsEnforeced = true;
                                        }

                                        string TowerOwner = TypeOfSupportInfoDataTable.Rows[j]["Support Owner"].ToString();
                                        if (!string.IsNullOrEmpty(TowerOwner))
                                        {
                                            TLIowner OwnerEntity = _unitOfWork.OwnerRepository
                                                .GetWhereFirst(x => x.OwnerName.ToLower() == TowerOwner.ToLower() && !x.Deleted);

                                            if (OwnerEntity != null)
                                                NewCivilWithLegsEntity.OwnerId = OwnerEntity.Id;

                                            else
                                            {
                                                TLIowner NewOwnerEntity = new TLIowner();
                                                NewOwnerEntity.OwnerName = TowerOwner;
                                                _unitOfWork.OwnerRepository.Add(NewOwnerEntity);
                                                _unitOfWork.SaveChanges();
                                                NewCivilWithLegsEntity.OwnerId = NewOwnerEntity.Id;
                                            }
                                        }

                                        string TowerLocation = TypeOfSupportInfoDataTable.Rows[j]["Location"].ToString();
                                        if (!string.IsNullOrEmpty(TowerLocation))
                                        {
                                            TLIlocationType CheckLocation = _unitOfWork.LocationTypeRepository
                                                .GetWhereFirst(x => x.Name.ToLower() == TowerLocation.ToLower() && !x.Deleted);

                                            if (CheckLocation != null)
                                                NewCivilWithLegsEntity.locationTypeId = CheckLocation.Id;

                                            else
                                            {
                                                TLIlocationType NewLocationTypeEntity = new TLIlocationType();
                                                NewLocationTypeEntity.Name = TowerLocation;
                                                _unitOfWork.LocationTypeRepository.Add(NewLocationTypeEntity);
                                                _unitOfWork.SaveChanges();
                                                NewCivilWithLegsEntity.locationTypeId = NewLocationTypeEntity.Id;
                                            }
                                        }

                                        string TowerSupportTypeImplemented = TypeOfSupportInfoDataTable.Rows[j]["Support Type"].ToString();
                                        if (!string.IsNullOrEmpty(TowerSupportTypeImplemented))
                                        {
                                            TLIsupportTypeImplemented supportTypeImplemented = _unitOfWork.SupportTypeImplementedRepository
                                                .GetWhereFirst(x => x.Name.ToLower() == TowerSupportTypeImplemented.ToLower() && !x.Deleted);

                                            if (supportTypeImplemented != null)
                                                NewCivilWithLegsEntity.SupportTypeImplementedId = supportTypeImplemented.Id;

                                            else
                                            {
                                                TLIsupportTypeImplemented NewSupportTypeImplemented = new TLIsupportTypeImplemented();
                                                NewSupportTypeImplemented.Name = TowerSupportTypeImplemented;
                                                _unitOfWork.SupportTypeImplementedRepository.Add(NewSupportTypeImplemented);
                                                _unitOfWork.SaveChanges();
                                                NewCivilWithLegsEntity.SupportTypeImplementedId = NewSupportTypeImplemented.Id;
                                            }
                                        }

                                        string TowerBaseCivilWithLegsTypeName = TypeOfSupportInfoDataTable.Rows[j]["Base Type"].ToString();

                                        if (!string.IsNullOrEmpty(TowerBaseCivilWithLegsTypeName))
                                        {
                                            TLIbaseType BaseTypeForeignKeyEntity = _unitOfWork.BaseTypeRepository
                                                .GetWhereFirst(x => x.Name.ToLower() == TowerBaseCivilWithLegsTypeName.ToLower() && !x.Deleted);

                                            if (BaseTypeForeignKeyEntity != null)
                                                NewCivilWithLegsEntity.baseTypeId = BaseTypeForeignKeyEntity.Id;

                                            else
                                            {
                                                TLIbaseType NewBaseTypeForeignKeyEntity = new TLIbaseType
                                                {
                                                    Name = TowerBaseCivilWithLegsTypeName,
                                                    Disable = false,
                                                    Deleted = false
                                                };
                                                _unitOfWork.BaseTypeRepository.Add(NewBaseTypeForeignKeyEntity);
                                                _unitOfWork.SaveChanges();

                                                NewCivilWithLegsEntity.baseTypeId = NewBaseTypeForeignKeyEntity.Id;
                                            }

                                            TLIbaseCivilWithLegsType baseCivilWithLegsType = _unitOfWork.BaseCivilWithLegsTypeRepository
                                                .GetWhereFirst(x => x.Name.ToLower() == TowerBaseCivilWithLegsTypeName.ToLower() && !x.Deleted);

                                            if (baseCivilWithLegsType != null)
                                                NewCivilWithLegsEntity.BaseCivilWithLegTypeId = baseCivilWithLegsType.Id;

                                            else
                                            {
                                                TLIbaseCivilWithLegsType NewbaseCivilWithLegsType = new TLIbaseCivilWithLegsType();
                                                NewbaseCivilWithLegsType.Name = TowerBaseCivilWithLegsTypeName;
                                                _unitOfWork.BaseCivilWithLegsTypeRepository.Add(NewbaseCivilWithLegsType);
                                                _unitOfWork.SaveChanges();
                                                NewCivilWithLegsEntity.BaseCivilWithLegTypeId = NewbaseCivilWithLegsType.Id;
                                            }
                                        }
                                        else
                                        {
                                            TLIbaseType BaseTypeForeignKeyEntity = _unitOfWork.BaseTypeRepository
                                                .GetWhereFirst(x => x.Id == 0);

                                            if (BaseTypeForeignKeyEntity != null)
                                            {
                                                NewCivilWithLegsEntity.baseTypeId = 0;
                                            }
                                            else
                                            {
                                                TLIbaseType NewBaseTypeForeignKeyEntity = new TLIbaseType
                                                {
                                                    Id = 0,
                                                    Name = "NA",
                                                    Disable = false,
                                                    Deleted = false
                                                };

                                                _unitOfWork.BaseTypeRepository.Add(NewBaseTypeForeignKeyEntity);
                                                _unitOfWork.SaveChanges();

                                                NewCivilWithLegsEntity.baseTypeId = NewBaseTypeForeignKeyEntity.Id;
                                            }
                                        }

                                        string TowerGuyLineType = TypeOfSupportInfoDataTable.Rows[j]["Guyed Type"].ToString();
                                        if (!string.IsNullOrEmpty(TowerGuyLineType))
                                        {
                                            TLIguyLineType guyLineType = _unitOfWork.GuyLineTypeRepository
                                                .GetWhereFirst(x => x.Name.ToLower() == TowerGuyLineType.ToLower() && !x.Deleted);

                                            if (guyLineType != null)
                                                NewCivilWithLegsEntity.GuylineTypeId = guyLineType.Id;

                                            else
                                            {
                                                TLIguyLineType NewGuyLineType = new TLIguyLineType();
                                                NewGuyLineType.Name = TowerGuyLineType;
                                                _unitOfWork.GuyLineTypeRepository.Add(NewGuyLineType);
                                                _unitOfWork.SaveChanges();
                                                NewCivilWithLegsEntity.GuylineTypeId = NewGuyLineType.Id;
                                            }
                                        }

                                        db.TLIcivilWithLegs.Add(NewCivilWithLegsEntity);
                                        db.SaveChanges();

                                        //
                                        // Dynamic Attributes..
                                        //

                                        foreach (object CivilWithLegsDynamicAttribute in CivilWithLegsDynamicAttributes)
                                        {
                                            TLIdynamicAtt CivilWithLegsDynamicAttEntity = CivilWithLegsDynamicAttributesInTLIS.FirstOrDefault(x =>
                                                x.Key.ToLower() == CivilWithLegsDynamicAttribute.ToString().Replace('_', ' ').ToLower());

                                            TLIdynamicAttInstValue NewCivilWithLegsDynamicAttributeInstallationValue = new TLIdynamicAttInstValue()
                                            {
                                                DynamicAttId = CivilWithLegsDynamicAttEntity.Id,
                                                InventoryId = NewCivilWithLegsEntity.Id,
                                                tablesNamesId = CivilWithLegsTableNameId,
                                                disable = false
                                            };
                                            //if (CivilWithLegsDynamicAttEntity.Key.ToLower() == "Path".ToLower())
                                            //{
                                            //    //NewCivilWithLegsDynamicAttributeInstallationValue.ValueString = TypeOfSupportInfoDataTable.Rows[j][CivilWithLegsDynamicAttEntity.Key].ToString();
                                            //    //string ProjectRootPath = _hostingEnvironment.ContentRootPath;
                                            //    //System.IO.File.Copy("s", ProjectRootPath + "\\");
                                            //}

                                            if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j][CivilWithLegsDynamicAttEntity.Key].ToString()))
                                            {
                                                if (CivilWithLegsDynamicAttEntity.DataType.Name.ToLower() == "string".ToLower())
                                                    NewCivilWithLegsDynamicAttributeInstallationValue.ValueString = TypeOfSupportInfoDataTable.Rows[j][CivilWithLegsDynamicAttEntity.Key].ToString();
                                                else if (CivilWithLegsDynamicAttEntity.DataType.Name.ToLower() == "int".ToLower() ||
                                                    CivilWithLegsDynamicAttEntity.DataType.Name.ToLower() == "double".ToLower())
                                                {
                                                    double DoubleParser = 0;

                                                    CheckParser = double.TryParse(TypeOfSupportInfoDataTable.Rows[j][CivilWithLegsDynamicAttEntity.Key].ToString(), out DoubleParser);

                                                    if (CheckParser)
                                                        NewCivilWithLegsDynamicAttributeInstallationValue.ValueDouble = DoubleParser;

                                                    else
                                                    {
                                                        TowerTransaction.Dispose();

                                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                        {
                                                            CreatedAt = DateTime.Now,
                                                            ErrMsg = $"({CivilWithLegsDynamicAttEntity.Key}) coulumn's value must be a number",
                                                            IsDeleted = false,
                                                            IsLib = false,
                                                            RefTable = Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString(),
                                                            SheetName = "Type of support info",
                                                            UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                        };

                                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                        _unitOfWork.SaveChanges();

                                                        continue;
                                                    }
                                                }
                                                else if (CivilWithLegsDynamicAttEntity.DataType.Name.ToLower() == "boolean".ToLower())
                                                {
                                                    bool BooleanParser = false;

                                                    CheckParser = bool.TryParse(TypeOfSupportInfoDataTable.Rows[j][CivilWithLegsDynamicAttEntity.Key].ToString(), out BooleanParser);

                                                    if (CheckParser)
                                                        NewCivilWithLegsDynamicAttributeInstallationValue.ValueBoolean = BooleanParser;

                                                    else
                                                    {
                                                        TowerTransaction.Dispose();

                                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                        {
                                                            CreatedAt = DateTime.Now,
                                                            ErrMsg = $"({CivilWithLegsDynamicAttEntity.Key}) coulumn's value must be a number",
                                                            IsDeleted = false,
                                                            IsLib = false,
                                                            RefTable = Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString(),
                                                            SheetName = "Type of support info",
                                                            UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                        };

                                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                        _unitOfWork.SaveChanges();

                                                        continue;
                                                    }
                                                }
                                                else if (CivilWithLegsDynamicAttEntity.DataType.Name.ToLower() == "datetime".ToLower())
                                                {
                                                    DateTime DateTimeParser = DateTime.Now;

                                                    CheckParser = DateTime.TryParse(TypeOfSupportInfoDataTable.Rows[j][CivilWithLegsDynamicAttEntity.Key].ToString(), out DateTimeParser);

                                                    if (CheckParser)
                                                        NewCivilWithLegsDynamicAttributeInstallationValue.ValueDateTime = DateTimeParser;

                                                    else
                                                    {
                                                        TowerTransaction.Dispose();

                                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                        {
                                                            CreatedAt = DateTime.Now,
                                                            ErrMsg = $"({CivilWithLegsDynamicAttEntity.Key}) coulumn's value must be date",
                                                            IsDeleted = false,
                                                            IsLib = false,
                                                            RefTable = Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString(),
                                                            SheetName = "Type of support info",
                                                            UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                        };

                                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                        _unitOfWork.SaveChanges();

                                                        continue;
                                                    }
                                                }

                                                _unitOfWork.DynamicAttInstValueRepository.Add(NewCivilWithLegsDynamicAttributeInstallationValue);
                                                _unitOfWork.SaveChanges();
                                            }

                                        }

                                        //
                                        // All Civil Inst Information..
                                        //

                                        TLIallCivilInst TowerAllCivilInst = new TLIallCivilInst();

                                        string TowerCurrentStatus = TypeOfSupportInfoDataTable.Rows[j]["Current Status"].ToString();
                                        if (!string.IsNullOrEmpty(TowerCurrentStatus))
                                        {
                                            TLIitemStatus CheckCurrentStatus = _unitOfWork.ItemStatusRepository
                                                .GetWhereFirst(x => x.Name.ToLower() == TowerCurrentStatus.ToLower() && !x.Deleted);

                                            if (CheckCurrentStatus != null)
                                                TowerAllCivilInst.ItemStatusId = CheckCurrentStatus.Id;

                                            else
                                            {
                                                TLIitemStatus NewItemStatus = new TLIitemStatus();
                                                NewItemStatus.Name = TowerCurrentStatus;
                                                _unitOfWork.ItemStatusRepository.Add(NewItemStatus);
                                                _unitOfWork.SaveChanges();
                                                TowerAllCivilInst.ItemStatusId = NewItemStatus.Id;
                                            }
                                        }

                                        TowerAllCivilInst.civilWithLegsId = NewCivilWithLegsEntity.Id;
                                        TowerAllCivilInst.Draft = false;

                                        _unitOfWork.AllCivilInstRepository.Add(TowerAllCivilInst);
                                        _unitOfWork.SaveChanges();

                                        //
                                        // Civil Site Date Information..
                                        //

                                        TLIcivilSiteDate TowerCivilSiteDateEntity = new TLIcivilSiteDate();

                                        TowerCivilSiteDateEntity.SiteCode = CivilWithLegsSiteCode;
                                        TowerCivilSiteDateEntity.allCivilInstId = TowerAllCivilInst.Id;

                                        if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Status Date"].ToString()))
                                        {
                                            DateTime DateTimeParser = DateTime.Now;

                                            CheckParser = DateTime.TryParse(TypeOfSupportInfoDataTable.Rows[j]["Status Date"].ToString(), out DateTimeParser);

                                            if (CheckParser)
                                                TowerCivilSiteDateEntity.InstallationDate = DateTimeParser;

                                            else
                                            {
                                                TowerTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Status Date) coulumn's value must be date",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilSiteDate.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                        else
                                            TowerCivilSiteDateEntity.InstallationDate = DateTime.Now;

                                        _unitOfWork.CivilSiteDateRepository.Add(TowerCivilSiteDateEntity);
                                        _unitOfWork.SaveChanges();


                                        //
                                        // Legs Inforamtion..
                                        //

                                        List<string> LegLetters = new List<string>()
                                        {
                                            "A",
                                            "B",
                                            "C",
                                            "D"
                                        };

                                        for (int k = 0; k < 4; k++)
                                        {
                                            TLIleg leg = new TLIleg();
                                            string legname = "leg" + (k + 1).ToString() + " Angle";

                                            if (k == 0)
                                                legname += " as per 0 north";

                                            leg.CiviLegName = "Leg" + LegLetters[k];

                                            float legAzimuth;
                                            if (float.TryParse(TypeOfSupportInfoDataTable.Rows[j][legname].ToString(), out legAzimuth))
                                            {
                                                leg.LegAzimuth = legAzimuth;
                                            }
                                            else
                                            {
                                                TowerTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"Error parsing '{TypeOfSupportInfoDataTable.Rows[j][legname].ToString()}' as float for {legname}",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;

                                            }

                                            leg.CivilWithLegInstId = NewCivilWithLegsEntity.Id;

                                            _unitOfWork.LegRepository.Add(leg);
                                        }
                                        _unitOfWork.SaveChanges();

                                        string TowerReferenceName = TypeOfSupportInfoDataTable.Rows[j]["Reference Civil steel Name"].ToString();
                                        float TowerReferenceCivilSteelDistance = 0;
                                        if (!string.IsNullOrEmpty(TowerReferenceName))
                                        {
                                            string TowerDistanceFromReferenceCivilSteel = TypeOfSupportInfoDataTable.Rows[j]["Distance From reference civil steel"].ToString();

                                            if (!string.IsNullOrEmpty(TowerDistanceFromReferenceCivilSteel))
                                            {
                                                CheckParser = float.TryParse(TowerDistanceFromReferenceCivilSteel, out FloatParser);

                                                if (CheckParser)
                                                    TowerReferenceCivilSteelDistance = FloatParser;

                                                else
                                                {
                                                    TowerTransaction.Dispose();

                                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                    {
                                                        CreatedAt = DateTime.Now,
                                                        ErrMsg = $"(Distance From reference civil steel) coulumn's value must be a number",
                                                        IsDeleted = false,
                                                        IsLib = false,
                                                        RefTable = Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString(),
                                                        SheetName = "Type of support info",
                                                        UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                    };

                                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                    _unitOfWork.SaveChanges();

                                                    continue;
                                                }
                                            }
                                            else
                                            {
                                                TowerTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Distance From reference civil steel) coulumn's value can't be null or empty",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }

                                            string TowerAzimuthWithReferenceString = TypeOfSupportInfoDataTable.Rows[j]["Azimuth with reference civil steel"].ToString();
                                            float TowerAzimuthWithReference = 0;
                                            if (!string.IsNullOrEmpty(TowerAzimuthWithReferenceString))
                                            {
                                                CheckParser = float.TryParse(TowerAzimuthWithReferenceString, out FloatParser);

                                                if (CheckParser)
                                                    TowerAzimuthWithReference = FloatParser;

                                                else
                                                {
                                                    TowerTransaction.Dispose();

                                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                    {
                                                        CreatedAt = DateTime.Now,
                                                        ErrMsg = $"(Azimuth with reference civil steel) coulumn's value must be a number",
                                                        IsDeleted = false,
                                                        IsLib = false,
                                                        RefTable = Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString(),
                                                        SheetName = "Type of support info",
                                                        UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                    };

                                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                    _unitOfWork.SaveChanges();

                                                    continue;
                                                }

                                                AddDistance(TowerReferenceName, TowerAllCivilInst.Id, TowerAzimuthWithReference, TowerReferenceCivilSteelDistance, CivilWithLegsSiteCode);
                                            }
                                        }

                                        //
                                        // Logistical Information
                                        //
                                        try
                                        {
                                            string CivilWithLegsSupplier = TypeOfSupportInfoDataTable.Rows[j]["Supplier"].ToString();
                                            if (!string.IsNullOrEmpty(CivilWithLegsSupplier))
                                                AddLogistical(CivilWithLegsSupplier, "Supplier", "CivilSupport", "TLIcivilWithLegLibrary", NewCivilWithLegsEntity.CivilWithLegsLibId);

                                            string CivilWithLegsTowerContractor = TypeOfSupportInfoDataTable.Rows[j]["Tower Contractor"].ToString();
                                            if (!string.IsNullOrEmpty(CivilWithLegsTowerContractor))
                                                AddLogistical(CivilWithLegsTowerContractor, "Contractor", "CivilSupport", "TLIcivilWithLegLibrary", NewCivilWithLegsEntity.CivilWithLegsLibId);
                                            _unitOfWork.SaveChanges();
                                        }
                                        catch (Exception err)
                                        {

                                            return new Response<string>(err.Message);
                                        }


                                        TowerTransaction.Complete();
                                    }
                                    catch (Exception err)
                                    {
                                        TowerTransaction.Dispose();

                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                        {
                                            CreatedAt = DateTime.Now,
                                            ErrMsg = err.Message,
                                            IsDeleted = false,
                                            IsLib = false,
                                            RefTable = Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString(),
                                            SheetName = "Type of support info",
                                            UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                        };

                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                        _unitOfWork.SaveChanges();

                                        continue;
                                    }
                                }
                            }
                            else if (CivilType.ToLower() == "Mast".ToLower())
                            {
                                using (TransactionScope MastTransaction = new TransactionScope(TransactionScopeOption.Required,
                                    new System.TimeSpan(0, 15, 0)))
                                {
                                    try
                                    {
                                        //
                                        // Library Information..
                                        //

                                        TLIcivilWithoutLegLibrary CheckTowerType = new TLIcivilWithoutLegLibrary();

                                        string MastModel = TypeOfSupportInfoDataTable.Rows[j]["Mast Model Name"].ToString();
                                        int MastLibraryId = 0;

                                        if (string.IsNullOrEmpty(MastModel))
                                        {
                                            MastTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Mast Model Name) coulumn's value can't be null or empty",
                                                IsDeleted = false,
                                                IsLib = true,
                                                RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLegLibrary.ToString(),
                                                SheetName = "Type of support info",
                                                UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }
                                        else
                                        {
                                            CheckTowerType = _unitOfWork.CivilWithoutLegLibraryRepository
                                                .GetWhereFirst(x => x.Model.ToLower() == MastModel.ToLower() && !x.Deleted &&
                                                    x.CivilWithoutLegCategoryId == MastCategoryId);

                                            if (CheckTowerType == null)
                                            {
                                                MastTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Mast Model Name) coulumn's value: ({MastModel}) doesn't exist in TLIS",
                                                    IsDeleted = false,
                                                    IsLib = true,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithLegLibrary.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }

                                            MastLibraryId = CheckTowerType.Id;

                                            _unitOfWork.SaveChanges();
                                        }

                                        //
                                        // Installation Info..
                                        //

                                        TLIcivilWithoutLeg NewCivilWithoutLegEntity = new TLIcivilWithoutLeg();
                                        NewCivilWithoutLegEntity.CivilWithoutlegsLibId = MastLibraryId;
                                        string CivilWithoutLegMastCivilName = TypeOfSupportInfoDataTable.Rows[j]["Civil Steel Name"].ToString();
                                        NewCivilWithoutLegEntity.Name = CivilWithoutLegMastCivilName;

                                        //
                                        // Check if This Tower Name is Already Exist in This Site..
                                        //

                                        string MastSiteCode = string.Empty;
                                        if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Site Code"].ToString()))
                                        {
                                            TLIsite SiteEntity = _unitOfWork.SiteRepository
                                               .GetWhereFirst(x => x.SiteCode.ToLower() == TypeOfSupportInfoDataTable.Rows[j]["Site Code"].ToString().ToLower());

                                            if (SiteEntity != null)
                                                MastSiteCode = SiteEntity.SiteCode;

                                            else
                                            {
                                                MastTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"({TypeOfSupportInfoDataTable.Rows[j]["Site Code"]}) coulumn's value: ({TypeOfSupportInfoDataTable.Rows[j]["Site Code"]}) doesn't exist in TLIS",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                        else if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Site Name"].ToString()))
                                        {
                                            TLIsite SiteEntity = _unitOfWork.SiteRepository
                                                .GetWhereFirst(x => x.SiteName.ToLower() == TypeOfSupportInfoDataTable.Rows[j]["Site Name"].ToString().ToLower());

                                            if (SiteEntity != null)
                                                MastSiteCode = SiteEntity.SiteCode;

                                            else
                                            {
                                                MastTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"({TypeOfSupportInfoDataTable.Rows[j]["Site Name"]}) coulumn's value: ({TypeOfSupportInfoDataTable.Rows[j]["Site Name"]}) doesn't exist in TLIS",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                        else
                                        {
                                            MastTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"One of those columns must have a value: (Site Code, Site Name)",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                                SheetName = "Type of support info",
                                                UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        TLIcivilSiteDate CheckCivilWithoutLegNameIfDuplicate = _unitOfWork.CivilSiteDateRepository
                                            .GetIncludeWhereFirst(x => !x.Dismantle && x.SiteCode.ToLower() == MastSiteCode.ToLower() &&
                                                !x.allCivilInst.Draft && (x.allCivilInst.civilWithoutLegId != null ?
                                                    x.allCivilInst.civilWithoutLeg.Name.ToLower() == NewCivilWithoutLegEntity.Name.ToLower() : false),
                                                        x => x.allCivilInst, x => x.allCivilInst.civilWithoutLeg);

                                        if (CheckCivilWithoutLegNameIfDuplicate != null)
                                        {
                                            MastTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Civil steel Name) column's value: ({NewCivilWithoutLegEntity.Name}) and (type) : (Mast) is already exist in " +
                                                    $"this (SiteCode): ({MastSiteCode})",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString(),
                                                SheetName = "Type of support info",
                                                UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Mast Implemented Height (m)"].ToString()))
                                        {
                                            CheckParser = float.TryParse(TypeOfSupportInfoDataTable.Rows[j]["Mast Implemented Height (m)"].ToString(), out FloatParser);

                                            if (CheckParser)
                                                NewCivilWithoutLegEntity.HeightImplemented = FloatParser;

                                            else
                                            {
                                                MastTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Mast Implemented Height (m)) coulumn's value must be a number",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                        if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Bottom Part length (m)"].ToString()))
                                        {
                                            CheckParser = float.TryParse(TypeOfSupportInfoDataTable.Rows[j]["Bottom Part length (m)"].ToString(), out FloatParser);

                                            if (CheckParser)
                                                NewCivilWithoutLegEntity.BottomPartLengthm = FloatParser;

                                            else
                                            {
                                                MastTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Bottom Part length (m)) coulumn's value must be a number",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                        if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Number of mast parts"].ToString()))
                                        {
                                            int IntegerParser = 0;

                                            CheckParser = int.TryParse(TypeOfSupportInfoDataTable.Rows[j]["Number of mast parts"].ToString(), out IntegerParser);

                                            if (CheckParser)
                                                NewCivilWithoutLegEntity.NumberOfCivilParts = IntegerParser;

                                            else
                                            {
                                                MastTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Number of mast parts) coulumn's value must be a number",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                        if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Upper Part length (m)"].ToString()))
                                        {
                                            CheckParser = float.TryParse(TypeOfSupportInfoDataTable.Rows[j]["Upper Part length (m)"].ToString(), out FloatParser);

                                            if (CheckParser)
                                                NewCivilWithoutLegEntity.UpperPartLengthm = FloatParser;

                                            else
                                            {
                                                MastTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Upper Part length (m)) coulumn's value must be a number",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                        //if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Bottom part diameter (mm)"].ToString()))
                                        //{
                                        //    CheckParser = float.TryParse(TypeOfSupportInfoDataTable.Rows[j]["Bottom part diameter (mm)"].ToString(), out FloatParser);

                                        //    if (CheckParser)
                                        //        NewCivilWithoutLegEntity.BottomPartDiametermm = FloatParser;

                                        //    else
                                        //    {
                                        //        MastTransaction.Dispose();

                                        //        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                        //        {
                                        //            CreatedAt = DateTime.Now,
                                        //            ErrMsg = $"(Bottom part diameter (mm)) coulumn's value must be a number",
                                        //            IsDeleted = false,
                                        //            IsLib = false,
                                        //            RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString(),
                                        //            SheetName = "Type of support info",
                                        //            UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                        //        };

                                        //        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                        //        _unitOfWork.SaveChanges();

                                        //        continue;
                                        //    }
                                        //}
                                        if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Flange Diameter (cm)"].ToString()))
                                        {
                                            CheckParser = float.TryParse(TypeOfSupportInfoDataTable.Rows[j]["Flange Diameter (cm)"].ToString(), out FloatParser);

                                            if (CheckParser)
                                                NewCivilWithoutLegEntity.FlangeDiametercm = FloatParser;

                                            else
                                            {
                                                MastTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Flange Diameter (cm)) coulumn's value must be a number",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                        if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Flange thickness (cm)"].ToString()))
                                        {
                                            CheckParser = float.TryParse(TypeOfSupportInfoDataTable.Rows[j]["Flange thickness (cm)"].ToString(), out FloatParser);

                                            if (CheckParser)
                                                NewCivilWithoutLegEntity.FlangeThicknesscm = FloatParser;

                                            else
                                            {
                                                MastTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Flange thickness (cm)) coulumn's value must be a number",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                        if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Upper part diameter (mm)"].ToString()))
                                        {
                                            CheckParser = float.TryParse(TypeOfSupportInfoDataTable.Rows[j]["Upper part diameter (mm)"].ToString(), out FloatParser);

                                            if (CheckParser)
                                                NewCivilWithoutLegEntity.UpperPartDiameterm = FloatParser;

                                            else
                                            {
                                                MastTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Upper part diameter (mm)) coulumn's value must be a number",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                        if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Flange Bolts diameter (mm)"].ToString()))
                                        {
                                            CheckParser = float.TryParse(TypeOfSupportInfoDataTable.Rows[j]["Flange Bolts diameter (mm)"].ToString(), out FloatParser);

                                            if (CheckParser)
                                                NewCivilWithoutLegEntity.FlangeBoltsDiametermm = FloatParser;

                                            else
                                            {
                                                MastTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Flange Bolts diameter (mm)) coulumn's value must be a number",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                        if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Mast length above the end of spindles (m)"].ToString()))
                                        {
                                            CheckParser = float.TryParse(TypeOfSupportInfoDataTable.Rows[j]["Mast length above the end of spindles (m)"].ToString(), out FloatParser);

                                            if (CheckParser)
                                                NewCivilWithoutLegEntity.CivilLengthAboveEndOfSpindles = FloatParser;

                                            else
                                            {
                                                MastTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Mast length above the end of spindles (m)) coulumn's value must be a number",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                        if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Number of Longitudinal spindles"].ToString()))
                                        {
                                            int IntegerParser = 0;

                                            CheckParser = int.TryParse(TypeOfSupportInfoDataTable.Rows[j]["Number of Longitudinal spindles"].ToString(), out IntegerParser);

                                            if (CheckParser)
                                                NewCivilWithoutLegEntity.NumberOfLongitudinalSpindles = IntegerParser;

                                            else
                                            {
                                                MastTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Number of Longitudinal spindles) coulumn's value must be a number",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                        if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Number of Horizontal Spindle"].ToString()))
                                        {
                                            int IntegerParser = 0;

                                            CheckParser = int.TryParse(TypeOfSupportInfoDataTable.Rows[j]["Number of Horizontal Spindle"].ToString(), out IntegerParser);

                                            if (CheckParser)
                                                NewCivilWithoutLegEntity.NumberOfhorizontalSpindle = IntegerParser;

                                            else
                                            {
                                                MastTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Number of Horizontal Spindle) coulumn's value must be a number",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                        if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["concrete base thickness (m)"].ToString()))
                                        {
                                            CheckParser = float.TryParse(TypeOfSupportInfoDataTable.Rows[j]["concrete base thickness (m)"].ToString(), out FloatParser);

                                            if (CheckParser)
                                                NewCivilWithoutLegEntity.ConcreteBaseThicknessm = FloatParser;

                                            else
                                            {
                                                MastTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(concrete base thickness (m)) coulumn's value must be a number",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                        if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["concrete base length (m)"].ToString()))
                                        {
                                            CheckParser = float.TryParse(TypeOfSupportInfoDataTable.Rows[j]["concrete base length (m)"].ToString(), out FloatParser);

                                            if (CheckParser)
                                                NewCivilWithoutLegEntity.ConcreteBaseLengthm = FloatParser;

                                            else
                                            {
                                                MastTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(concrete base length (m)) coulumn's value must be a number",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                        if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Building Height H3"].ToString()))
                                        {
                                            CheckParser = float.TryParse(TypeOfSupportInfoDataTable.Rows[j]["Building Height H3"].ToString(), out FloatParser);

                                            if (CheckParser)
                                                NewCivilWithoutLegEntity.BuildingHeightH3 = FloatParser;

                                            else
                                            {
                                                MastTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Building Height H3) coulumn's value must be a number",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                        if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Base Beam Section (mm)"].ToString()))
                                        {
                                            CheckParser = float.TryParse(TypeOfSupportInfoDataTable.Rows[j]["Base Beam Section (mm)"].ToString(), out FloatParser);

                                            if (CheckParser)
                                                NewCivilWithoutLegEntity.BaseBeamSectionmm = FloatParser;

                                            else
                                            {
                                                MastTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Base Beam Section (mm)) coulumn's value must be a number",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                        if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Base plate Bolts/Anchor Diameter (mm)"].ToString()))
                                        {
                                            CheckParser = float.TryParse(TypeOfSupportInfoDataTable.Rows[j]["Base plate Bolts/Anchor Diameter (mm)"].ToString(), out FloatParser);

                                            if (CheckParser)
                                                NewCivilWithoutLegEntity.BPlateBoltsAnchorDiametermm = FloatParser;

                                            else
                                            {
                                                MastTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Base plate Bolts/Anchor Diameter (mm)) coulumn's value must be a number",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                        if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Base plate length (cm)"].ToString()))
                                        {
                                            CheckParser = float.TryParse(TypeOfSupportInfoDataTable.Rows[j]["Base plate length (cm)"].ToString(), out FloatParser);

                                            if (CheckParser)
                                                NewCivilWithoutLegEntity.BasePlateLengthcm = FloatParser;

                                            else
                                            {
                                                MastTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Base plate length (cm)) coulumn's value must be a number",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                        if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Base plate thickness (cm)"].ToString()))
                                        {
                                            CheckParser = float.TryParse(TypeOfSupportInfoDataTable.Rows[j]["Base plate thickness (cm)"].ToString(), out FloatParser);

                                            if (CheckParser)
                                                NewCivilWithoutLegEntity.BasePlateThicknesscm = FloatParser;

                                            else
                                            {
                                                MastTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Base plate thickness (cm)) coulumn's value must be a number",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                        if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Base plate width (cm)"].ToString()))
                                        {
                                            CheckParser = float.TryParse(TypeOfSupportInfoDataTable.Rows[j]["Base plate width (cm)"].ToString(), out FloatParser);

                                            if (CheckParser)
                                                NewCivilWithoutLegEntity.BasePlateWidthcm = FloatParser;

                                            else
                                            {
                                                MastTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Base plate width (cm)) coulumn's value must be a number",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                        if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Horizontal spindle Diameter (mm)"].ToString()))
                                        {
                                            CheckParser = float.TryParse(TypeOfSupportInfoDataTable.Rows[j]["Horizontal spindle Diameter (mm)"].ToString(), out FloatParser);

                                            if (CheckParser)
                                                NewCivilWithoutLegEntity.HorizontalSpindleDiametermm = FloatParser;

                                            else
                                            {
                                                MastTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Horizontal spindle Diameter (mm)) coulumn's value must be a number",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                        if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Horizontal spindles HBA (m)"].ToString()))
                                        {
                                            CheckParser = float.TryParse(TypeOfSupportInfoDataTable.Rows[j]["Horizontal spindles HBA (m)"].ToString(), out FloatParser);

                                            if (CheckParser)
                                                NewCivilWithoutLegEntity.HorizontalSpindlesHBAm = FloatParser;

                                            else
                                            {
                                                MastTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Horizontal spindles HBA (m)) coulumn's value must be a number",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                        if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Longitudinal spindles diameter (mm)"].ToString()))
                                        {
                                            CheckParser = float.TryParse(TypeOfSupportInfoDataTable.Rows[j]["Longitudinal spindles diameter (mm)"].ToString(), out FloatParser);

                                            if (CheckParser)
                                                NewCivilWithoutLegEntity.LongitudinalSpinDiameterrmm = FloatParser;

                                            else
                                            {
                                                MastTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Longitudinal spindles diameter (mm)) coulumn's value must be a number",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                        if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Mast base level from ground (m)"].ToString()))
                                        {
                                            CheckParser = float.TryParse(TypeOfSupportInfoDataTable.Rows[j]["Mast base level from ground (m)"].ToString(), out FloatParser);

                                            if (CheckParser)
                                                NewCivilWithoutLegEntity.CivilBaseLevelFromGround = FloatParser;

                                            else
                                            {
                                                MastTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Mast base level from ground (m)) coulumn's value must be a number",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                        if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Spindles Base plate Anchor diameter (mm)"].ToString()))
                                        {
                                            CheckParser = float.TryParse(TypeOfSupportInfoDataTable.Rows[j]["Spindles Base plate Anchor diameter (mm)"].ToString(), out FloatParser);

                                            if (CheckParser)
                                                NewCivilWithoutLegEntity.SpinBasePlateAnchorDiametercm = FloatParser;

                                            else
                                            {
                                                MastTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Spindles Base plate Anchor diameter (mm)) coulumn's value must be a number",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                        if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Spindles Base plate length (cm)"].ToString()))
                                        {
                                            CheckParser = float.TryParse(TypeOfSupportInfoDataTable.Rows[j]["Spindles Base plate length (cm)"].ToString(), out FloatParser);

                                            if (CheckParser)
                                                NewCivilWithoutLegEntity.SpindlesBasePlateLengthcm = FloatParser;

                                            else
                                            {
                                                MastTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Spindles Base plate length (cm)) coulumn's value must be a number",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                        if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Spindles Base plate width (cm)"].ToString()))
                                        {
                                            CheckParser = float.TryParse(TypeOfSupportInfoDataTable.Rows[j]["Spindles Base plate width (cm)"].ToString(), out FloatParser);

                                            if (CheckParser)
                                                NewCivilWithoutLegEntity.SpindlesBasePlateWidthcm = FloatParser;

                                            else
                                            {
                                                MastTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Spindles Base plate width (cm)) coulumn's value must be a number",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }

                                        string MastOwner = TypeOfSupportInfoDataTable.Rows[j]["Support Owner"].ToString();

                                        if (!string.IsNullOrEmpty(MastOwner))
                                        {
                                            TLIowner OwnerEntity = _unitOfWork.OwnerRepository
                                                .GetWhereFirst(x => x.OwnerName.ToLower() == MastOwner.ToLower() && !x.Deleted);

                                            if (OwnerEntity != null)
                                                NewCivilWithoutLegEntity.OwnerId = OwnerEntity.Id;

                                            else
                                            {
                                                TLIowner NewOwnerEntity = new TLIowner();
                                                NewOwnerEntity.OwnerName = MastOwner;
                                                _unitOfWork.OwnerRepository.Add(NewOwnerEntity);
                                                _unitOfWork.SaveChanges();
                                                NewCivilWithoutLegEntity.OwnerId = NewOwnerEntity.Id;
                                            }
                                        }

                                        _unitOfWork.CivilWithoutLegRepository.Add(NewCivilWithoutLegEntity);
                                        _unitOfWork.SaveChanges();

                                        //
                                        // Dynamic Attributes..
                                        //

                                        List<TLIdynamicAttInstValue> CivilWithoutLegMastDynamicValues = new List<TLIdynamicAttInstValue>();

                                        foreach (TLIdynamicAtt MissedAttribute in MastMissedAttributes)
                                        {
                                            if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j][MissedAttribute.Key].ToString()))
                                            {
                                                TLIdynamicAttInstValue MissedAttributeValue = new TLIdynamicAttInstValue()
                                                {
                                                    tablesNamesId = CivilWithoutLegMastTableNameId,
                                                    disable = false,
                                                    DynamicAttId = MissedAttribute.Id,
                                                    InventoryId = NewCivilWithoutLegEntity.Id
                                                };

                                                if (MissedAttribute.DataType.Name.ToLower() == "string".ToLower())
                                                    MissedAttributeValue.ValueString = TypeOfSupportInfoDataTable.Rows[j][MissedAttribute.Key].ToString();
                                                else if (MissedAttribute.DataType.Name.ToLower() == "int".ToLower() ||
                                                    MissedAttribute.DataType.Name.ToLower() == "double".ToLower())
                                                {
                                                    double DoubleParser = 0;

                                                    CheckParser = double.TryParse(TypeOfSupportInfoDataTable.Rows[j][MissedAttribute.Key].ToString(), out DoubleParser);

                                                    if (CheckParser)
                                                        MissedAttributeValue.ValueDouble = DoubleParser;

                                                    else
                                                    {
                                                        MastTransaction.Dispose();

                                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                        {
                                                            CreatedAt = DateTime.Now,
                                                            ErrMsg = $"({TypeOfSupportInfoDataTable.Rows[j][MissedAttribute.Key]}) coulumn's value must be a number",
                                                            IsDeleted = false,
                                                            IsLib = false,
                                                            RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString(),
                                                            SheetName = "Type of support info",
                                                            UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                        };

                                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                        _unitOfWork.SaveChanges();

                                                        continue;
                                                    }
                                                }
                                                else if (MissedAttribute.DataType.Name.ToLower() == "boolean".ToLower())
                                                {
                                                    bool BooleanParser = false;

                                                    CheckParser = bool.TryParse(TypeOfSupportInfoDataTable.Rows[j][MissedAttribute.Key].ToString(), out BooleanParser);

                                                    if (CheckParser)
                                                        MissedAttributeValue.ValueBoolean = BooleanParser;

                                                    else
                                                    {
                                                        MastTransaction.Dispose();

                                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                        {
                                                            CreatedAt = DateTime.Now,
                                                            ErrMsg = $"({TypeOfSupportInfoDataTable.Rows[j][MissedAttribute.Key]}) coulumn's value must be boolean (Yes/No)",
                                                            IsDeleted = false,
                                                            IsLib = false,
                                                            RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString(),
                                                            SheetName = "Type of support info",
                                                            UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                        };

                                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                        _unitOfWork.SaveChanges();

                                                        continue;
                                                    }
                                                }
                                                else if (MissedAttribute.DataType.Name.ToLower() == "datetime".ToLower())
                                                {
                                                    DateTime DateTimeParser = DateTime.Now;

                                                    CheckParser = DateTime.TryParse(TypeOfSupportInfoDataTable.Rows[j][MissedAttribute.Key].ToString(), out DateTimeParser);

                                                    if (CheckParser)
                                                        MissedAttributeValue.ValueDateTime = DateTimeParser;

                                                    else
                                                    {
                                                        MastTransaction.Dispose();

                                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                        {
                                                            CreatedAt = DateTime.Now,
                                                            ErrMsg = $"({TypeOfSupportInfoDataTable.Rows[j][MissedAttribute.Key]}) coulumn's value must be date",
                                                            IsDeleted = false,
                                                            IsLib = false,
                                                            RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString(),
                                                            SheetName = "Type of support info",
                                                            UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                        };

                                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                        _unitOfWork.SaveChanges();

                                                        continue;
                                                    }
                                                }

                                                CivilWithoutLegMastDynamicValues.Add(MissedAttributeValue);
                                            }
                                        }
                                        if (CivilWithoutLegMastDynamicValues.Count() > 0)
                                        {
                                            _unitOfWork.DynamicAttInstValueRepository.AddRange(CivilWithoutLegMastDynamicValues);
                                            _unitOfWork.SaveChanges();
                                        }

                                        //
                                        // All Civil Inst..
                                        //

                                        TLIallCivilInst MastAllCivilInst = new TLIallCivilInst();

                                        MastAllCivilInst.civilWithoutLegId = NewCivilWithoutLegEntity.Id;

                                        string MastCurrentStatus = TypeOfSupportInfoDataTable.Rows[j]["Current Status"].ToString();
                                        if (!string.IsNullOrEmpty(MastCurrentStatus))
                                        {
                                            TLIitemStatus CheckCurrentStatus = _unitOfWork.ItemStatusRepository
                                                .GetWhereFirst(x => x.Name.ToLower() == MastCurrentStatus.ToLower());

                                            if (CheckCurrentStatus != null)
                                                MastAllCivilInst.ItemStatusId = CheckCurrentStatus.Id;

                                            else
                                            {
                                                TLIitemStatus itemStatus = new TLIitemStatus();
                                                itemStatus.Name = MastCurrentStatus;
                                                _unitOfWork.ItemStatusRepository.Add(itemStatus);
                                                _unitOfWork.SaveChanges();
                                                MastAllCivilInst.ItemStatusId = itemStatus.Id;
                                            }
                                        }

                                        _unitOfWork.AllCivilInstRepository.Add(MastAllCivilInst);
                                        _unitOfWork.SaveChanges();

                                        //
                                        // Civil Site Date..
                                        //

                                        TLIcivilSiteDate MastCivilSiteDateEntity = new TLIcivilSiteDate();

                                        MastCivilSiteDateEntity.SiteCode = MastSiteCode;
                                        MastCivilSiteDateEntity.allCivilInstId = MastAllCivilInst.Id;
                                        MastCivilSiteDateEntity.Dismantle = false;

                                        if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Status Date"].ToString()))
                                        {
                                            DateTime DateTimeParser = DateTime.Now;

                                            CheckParser = DateTime.TryParse(TypeOfSupportInfoDataTable.Rows[j]["Status Date"].ToString(), out DateTimeParser);

                                            if (CheckParser)
                                                MastCivilSiteDateEntity.InstallationDate = DateTimeParser;

                                            else
                                            {
                                                MastTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Status Date) coulumn's value must be date",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                        else
                                            MastCivilSiteDateEntity.InstallationDate = DateTime.Now;

                                        _unitOfWork.CivilSiteDateRepository.Add(MastCivilSiteDateEntity);
                                        _unitOfWork.SaveChanges();

                                        //
                                        // Logistical..
                                        //

                                        string CivilWithoutLegMastSupplier = TypeOfSupportInfoDataTable.Rows[j]["Supplier"].ToString();
                                        if (!string.IsNullOrEmpty(CivilWithoutLegMastSupplier))
                                            AddLogistical(CivilWithoutLegMastSupplier, "Supplier", "CivilSupport", "TLIcivilWithoutLegLibrary", NewCivilWithoutLegEntity.CivilWithoutlegsLibId);

                                        string CivilWithoutLegMastDesigner = TypeOfSupportInfoDataTable.Rows[j]["Designer"].ToString();
                                        if (!string.IsNullOrEmpty(CivilWithoutLegMastDesigner))
                                            AddLogistical(CivilWithoutLegMastDesigner, "Designer", "CivilSupport", "TLIcivilWithoutLegLibrary", NewCivilWithoutLegEntity.CivilWithoutlegsLibId);

                                        string MastReferenceName = TypeOfSupportInfoDataTable.Rows[j]["Reference Civil steel Name"].ToString();
                                        float MastReferenceCivilSteelDistance = 0;
                                        float MastAzimuthWithReference = 0;
                                        if (!string.IsNullOrEmpty(MastReferenceName))
                                        {
                                            string TowerDistanceFromReferenceCivilSteel = TypeOfSupportInfoDataTable.Rows[j]["Distance From reference civil steel"].ToString();
                                            if (!string.IsNullOrEmpty(TowerDistanceFromReferenceCivilSteel))
                                            {
                                                CheckParser = float.TryParse(TowerDistanceFromReferenceCivilSteel, out FloatParser);

                                                if (CheckParser)
                                                    MastReferenceCivilSteelDistance = FloatParser;

                                                else
                                                {
                                                    MastTransaction.Dispose();

                                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                    {
                                                        CreatedAt = DateTime.Now,
                                                        ErrMsg = $"(Distance From reference civil steel) coulumn's value must be a number",
                                                        IsDeleted = false,
                                                        IsLib = false,
                                                        RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString(),
                                                        SheetName = "Type of support info",
                                                        UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                    };

                                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                    _unitOfWork.SaveChanges();

                                                    continue;
                                                }
                                            }
                                            else
                                            {
                                                MastTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Distance From reference civil steel) coulumn's value can't be null or empty",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }

                                            string TowerAzimuthWithReferenceString = TypeOfSupportInfoDataTable.Rows[j]["Azimuth with reference civil steel"].ToString();
                                            if (!string.IsNullOrEmpty(TowerAzimuthWithReferenceString))
                                            {
                                                CheckParser = float.TryParse(TowerAzimuthWithReferenceString, out FloatParser);

                                                if (CheckParser)
                                                    MastAzimuthWithReference = FloatParser;

                                                else
                                                {
                                                    MastTransaction.Dispose();

                                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                    {
                                                        CreatedAt = DateTime.Now,
                                                        ErrMsg = $"(Azimuth with reference civil steel) coulumn's value must be a number",
                                                        IsDeleted = false,
                                                        IsLib = false,
                                                        RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString(),
                                                        SheetName = "Type of support info",
                                                        UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                    };

                                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                    _unitOfWork.SaveChanges();

                                                    continue;
                                                }
                                            }

                                            AddDistance(MastReferenceName, MastAllCivilInst.Id, MastAzimuthWithReference,
                                                MastReferenceCivilSteelDistance, MastSiteCode);
                                        }

                                        _unitOfWork.SaveChanges();

                                        MastTransaction.Complete();
                                    }
                                    catch (Exception err)
                                    {
                                        MastTransaction.Dispose();

                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                        {
                                            CreatedAt = DateTime.Now,
                                            ErrMsg = err.Message,
                                            IsDeleted = false,
                                            IsLib = false,
                                            RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString(),
                                            SheetName = "Type of support info",
                                            UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                        };

                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                        _unitOfWork.SaveChanges();

                                        continue;
                                    }
                                }
                            }
                            else if (CivilType.ToLower() == "Monopole".ToLower())
                            {
                                using (TransactionScope MonopoleTransaction = new TransactionScope(TransactionScopeOption.Required,
                                    new System.TimeSpan(0, 15, 0)))
                                {
                                    try
                                    {
                                        //
                                        // Library Information..
                                        //

                                        TLIcivilWithoutLegLibrary CheckTowerType = new TLIcivilWithoutLegLibrary();

                                        string MonopoleModel = TypeOfSupportInfoDataTable.Rows[j]["Support Model"].ToString();
                                        int MonopoleLibraryId = 0;

                                        if (!string.IsNullOrEmpty(MonopoleModel))
                                        {
                                            CheckTowerType = _unitOfWork.CivilWithoutLegLibraryRepository
                                                .GetWhereFirst(x => x.Model.ToLower() == MonopoleModel.ToLower() && !x.Deleted &&
                                                    x.CivilWithoutLegCategoryId == MonopoleCategoryId);

                                            if (CheckTowerType == null)
                                            {
                                                MonopoleTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Support Model) coulumn's value: ({MonopoleModel}) doesn't exist in TLIS",
                                                    IsDeleted = false,
                                                    IsLib = true,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithLegLibrary.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }

                                            MonopoleLibraryId = CheckTowerType.Id;

                                            _unitOfWork.SaveChanges();
                                        }
                                        else
                                        {
                                            MonopoleTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Support Model) coulumn's value can't be null or empty",
                                                IsDeleted = false,
                                                IsLib = true,
                                                RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLegLibrary.ToString(),
                                                SheetName = "Type of support info",
                                                UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        TLIcivilWithoutLeg NewMonopoleEntity = new TLIcivilWithoutLeg();

                                        NewMonopoleEntity.CivilWithoutlegsLibId = MonopoleLibraryId;
                                        NewMonopoleEntity.Name = TypeOfSupportInfoDataTable.Rows[j]["Civil Steel Name"].ToString();

                                        //
                                        // Check if This Tower Name is Already Exist in This Site..
                                        //

                                        string MonopoleSiteCode = string.Empty;
                                        if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Site Code"].ToString()))
                                        {
                                            TLIsite SiteEntity = _unitOfWork.SiteRepository
                                               .GetWhereFirst(x => x.SiteCode.ToLower() == TypeOfSupportInfoDataTable.Rows[j]["Site Code"].ToString().ToLower());

                                            if (SiteEntity != null)
                                                MonopoleSiteCode = SiteEntity.SiteCode;

                                            else
                                            {
                                                MonopoleTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"({TypeOfSupportInfoDataTable.Rows[j]["Site Code"]}) coulumn's value: ({TypeOfSupportInfoDataTable.Rows[j]["Site Code"]}) doesn't exist in TLIS",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                        else if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Site Name"].ToString()))
                                        {
                                            TLIsite SiteEntity = _unitOfWork.SiteRepository
                                                .GetWhereFirst(x => x.SiteName.ToLower() == TypeOfSupportInfoDataTable.Rows[j]["Site Name"].ToString().ToLower());

                                            if (SiteEntity != null)
                                                MonopoleSiteCode = SiteEntity.SiteCode;

                                            else
                                            {
                                                MonopoleTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"({TypeOfSupportInfoDataTable.Rows[j]["Site Name"]}) coulumn's value: ({TypeOfSupportInfoDataTable.Rows[j]["Site Name"]}) doesn't exist in TLIS",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                        else
                                        {
                                            MonopoleTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"One of those columns must have a value: (Site Code, Site Name)",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                                SheetName = "Type of support info",
                                                UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        TLIcivilSiteDate CheckCivilWithoutLegNameIfDuplicate = _unitOfWork.CivilSiteDateRepository
                                             .GetIncludeWhereFirst(x => !x.Dismantle && x.SiteCode.ToLower() == MonopoleSiteCode.ToLower() &&
                                                 !x.allCivilInst.Draft && (x.allCivilInst.civilWithoutLegId != null ?
                                                     x.allCivilInst.civilWithoutLeg.Name.ToLower() == NewMonopoleEntity.Name.ToLower() : false),
                                                         x => x.allCivilInst, x => x.allCivilInst.civilWithoutLeg);

                                        if (CheckCivilWithoutLegNameIfDuplicate != null)
                                        {
                                            MonopoleTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Civil steel Name) column's value: ({NewMonopoleEntity.Name}) and (type) : (Mast) is already exist in " +
                                                    $"this (SiteCode): ({MonopoleSiteCode})",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString(),
                                                SheetName = "Type of support info",
                                                UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Subtype"].ToString()))
                                        {
                                            string MonopoleSubType = TypeOfSupportInfoDataTable.Rows[j]["Subtype"].ToString();
                                            if (!string.IsNullOrEmpty(MonopoleSubType))
                                            {
                                                TLIsubType SubTypeEntity = _unitOfWork.SubTypeRepository
                                                    .GetWhereFirst(x => x.Name.ToLower() == MonopoleSubType.ToLower() && !x.Delete);

                                                if (SubTypeEntity != null)
                                                    NewMonopoleEntity.subTypeId = SubTypeEntity.Id;

                                                else
                                                {
                                                    TLIsubType NewSubTypeEntity = new TLIsubType();
                                                    NewSubTypeEntity.Name = MonopoleSubType;
                                                    _unitOfWork.SubTypeRepository.Add(NewSubTypeEntity);
                                                    _unitOfWork.SaveChanges();
                                                    NewMonopoleEntity.subTypeId = NewSubTypeEntity.Id;
                                                }
                                            }
                                        }
                                        if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Height (m)"].ToString()))
                                        {
                                            CheckParser = float.TryParse(TypeOfSupportInfoDataTable.Rows[j]["Height (m)"].ToString(), out FloatParser);

                                            if (CheckParser)
                                                NewMonopoleEntity.HeightBase = FloatParser;

                                            else
                                            {
                                                MonopoleTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Height (m)) coulumn's value must be a number",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                        if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Building Height H3"].ToString()))
                                        {
                                            CheckParser = float.TryParse(TypeOfSupportInfoDataTable.Rows[j]["Building Height H3"].ToString(), out FloatParser);

                                            if (CheckParser)
                                                NewMonopoleEntity.BuildingHeightH3 = FloatParser;

                                            else
                                            {
                                                MonopoleTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Building Height H3) coulumn's value must be a number",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }

                                        //string MonopoleReinforcedForType = TypeOfSupportInfoDataTable.Rows[j]["Reinforced"].ToString();
                                        //NewMonopoleEntity.reinforced = Reinforced.No;

                                        //if (!string.IsNullOrEmpty(MonopoleReinforcedForType))
                                        //{
                                        //    if (MonopoleReinforcedForType.ToLower() == "Yes".ToLower())
                                        //        NewMonopoleEntity.reinforced = Reinforced.Yes;
                                        //}

                                        string MonopoleLadder_Steps = TypeOfSupportInfoDataTable.Rows[j]["Ladder /steps"].ToString();
                                        if (!string.IsNullOrEmpty(MonopoleLadder_Steps))
                                        {
                                            if (MonopoleLadder_Steps.ToLower() == "Ladder".ToLower())
                                                NewMonopoleEntity.ladderSteps = LadderSteps.Ladder;

                                            else if (MonopoleLadder_Steps.ToLower() == "Steps".ToLower())
                                                NewMonopoleEntity.ladderSteps = LadderSteps.Steps;
                                        }

                                        //string MonopoleAvailablityOfWorkPlatforms = TypeOfSupportInfoDataTable.Rows[j]["Availability of work platforms"].ToString();
                                        //NewMonopoleEntity.availabilityOfWorkPlatforms = AvailabilityOfWorkPlatforms.No;

                                        //if (!string.IsNullOrEmpty(MonopoleAvailablityOfWorkPlatforms))
                                        //{
                                        //    if (MonopoleAvailablityOfWorkPlatforms.ToLower() == "Yes".ToLower())
                                        //        NewMonopoleEntity.availabilityOfWorkPlatforms = AvailabilityOfWorkPlatforms.Yes;
                                        //}

                                        string MonopoleEquipmentsLocation = TypeOfSupportInfoDataTable.Rows[j]["Equipments Location"].ToString();
                                        if (!string.IsNullOrEmpty(MonopoleEquipmentsLocation))
                                        {
                                            if (MonopoleEquipmentsLocation.ToLower() == "Platform".ToLower())
                                                NewMonopoleEntity.equipmentsLocation = EquipmentsLocation.Platform;

                                            else if (MonopoleEquipmentsLocation.ToLower() == "Together".ToLower())
                                                NewMonopoleEntity.equipmentsLocation = EquipmentsLocation.Together;

                                            else if (MonopoleEquipmentsLocation.ToLower() == "Body".ToLower())
                                                NewMonopoleEntity.equipmentsLocation = EquipmentsLocation.Body;
                                        }

                                        _unitOfWork.CivilWithoutLegRepository.Add(NewMonopoleEntity);
                                        _unitOfWork.SaveChanges();

                                        //
                                        // Dynamic Attributes..
                                        //

                                        List<TLIdynamicAttInstValue> CivilWithoutLegMastDynamicValues = new List<TLIdynamicAttInstValue>();

                                        foreach (TLIdynamicAtt MissedAttribute in MonopoleMissedAttributes)
                                        {
                                            if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j][MissedAttribute.Key].ToString()))
                                            {
                                                TLIdynamicAttInstValue MissedAttributeValue = new TLIdynamicAttInstValue()
                                                {
                                                    tablesNamesId = CivilWithoutLegMonopoleTableNameId,
                                                    disable = false,
                                                    DynamicAttId = MissedAttribute.Id,
                                                    InventoryId = NewMonopoleEntity.Id
                                                };

                                                if (MissedAttribute.DataType.Name.ToLower() == "string".ToLower())
                                                    MissedAttributeValue.ValueString = TypeOfSupportInfoDataTable.Rows[j][MissedAttribute.Key].ToString();
                                                else if (MissedAttribute.DataType.Name.ToLower() == "int".ToLower() ||
                                                    MissedAttribute.DataType.Name.ToLower() == "double".ToLower())
                                                {
                                                    double DoubleParser = 0;

                                                    CheckParser = double.TryParse(TypeOfSupportInfoDataTable.Rows[j][MissedAttribute.Key].ToString(), out DoubleParser);

                                                    if (CheckParser)
                                                        MissedAttributeValue.ValueDouble = DoubleParser;

                                                    else
                                                    {
                                                        MonopoleTransaction.Dispose();

                                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                        {
                                                            CreatedAt = DateTime.Now,
                                                            ErrMsg = $"({TypeOfSupportInfoDataTable.Rows[j][MissedAttribute.Key]}) coulumn's value must be a number",
                                                            IsDeleted = false,
                                                            IsLib = false,
                                                            RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString(),
                                                            SheetName = "Type of support info",
                                                            UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                        };

                                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                        _unitOfWork.SaveChanges();

                                                        continue;
                                                    }
                                                }
                                                else if (MissedAttribute.DataType.Name.ToLower() == "boolean".ToLower())
                                                {
                                                    bool BooleanParser = false;

                                                    CheckParser = bool.TryParse(TypeOfSupportInfoDataTable.Rows[j][MissedAttribute.Key].ToString(), out BooleanParser);

                                                    if (CheckParser)
                                                        MissedAttributeValue.ValueBoolean = BooleanParser;

                                                    else
                                                    {
                                                        MonopoleTransaction.Dispose();

                                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                        {
                                                            CreatedAt = DateTime.Now,
                                                            ErrMsg = $"({TypeOfSupportInfoDataTable.Rows[j][MissedAttribute.Key]}) coulumn's value must be boolean (Yes/No)",
                                                            IsDeleted = false,
                                                            IsLib = false,
                                                            RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString(),
                                                            SheetName = "Type of support info",
                                                            UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                        };

                                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                        _unitOfWork.SaveChanges();

                                                        continue;
                                                    }
                                                }
                                                else if (MissedAttribute.DataType.Name.ToLower() == "datetime".ToLower())
                                                {
                                                    DateTime DateTimeParser = DateTime.Now;

                                                    CheckParser = DateTime.TryParse(TypeOfSupportInfoDataTable.Rows[j][MissedAttribute.Key].ToString(), out DateTimeParser);

                                                    if (CheckParser)
                                                        MissedAttributeValue.ValueDateTime = DateTimeParser;

                                                    else
                                                    {
                                                        MonopoleTransaction.Dispose();

                                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                        {
                                                            CreatedAt = DateTime.Now,
                                                            ErrMsg = $"({TypeOfSupportInfoDataTable.Rows[j][MissedAttribute.Key]}) coulumn's value must be date",
                                                            IsDeleted = false,
                                                            IsLib = false,
                                                            RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString(),
                                                            SheetName = "Type of support info",
                                                            UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                        };

                                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                        _unitOfWork.SaveChanges();

                                                        continue;
                                                    }
                                                }

                                                CivilWithoutLegMastDynamicValues.Add(MissedAttributeValue);
                                            }
                                        }
                                        if (CivilWithoutLegMastDynamicValues.Count() > 0)
                                        {
                                            _unitOfWork.DynamicAttInstValueRepository.AddRange(CivilWithoutLegMastDynamicValues);
                                            _unitOfWork.SaveChanges();
                                        }


                                        //
                                        // All Civil Installation..
                                        //

                                        TLIallCivilInst MonopoleAllCivilInst = new TLIallCivilInst();

                                        MonopoleAllCivilInst.civilWithoutLegId = NewMonopoleEntity.Id;

                                        string MonopoleCurrentStatus = TypeOfSupportInfoDataTable.Rows[j]["Current Status"].ToString();
                                        if (!string.IsNullOrEmpty(MonopoleCurrentStatus))
                                        {
                                            TLIitemStatus CheckCurrentStatus = _unitOfWork.ItemStatusRepository
                                                .GetWhereFirst(x => x.Name.ToLower() == MonopoleCurrentStatus.ToLower() && !x.Deleted);

                                            if (CheckCurrentStatus != null)
                                                MonopoleAllCivilInst.ItemStatusId = CheckCurrentStatus.Id;

                                            else
                                            {
                                                TLIitemStatus NewItemStatusEntity = new TLIitemStatus();
                                                NewItemStatusEntity.Name = MonopoleCurrentStatus;
                                                _unitOfWork.ItemStatusRepository.Add(NewItemStatusEntity);
                                                _unitOfWork.SaveChanges();

                                                MonopoleAllCivilInst.ItemStatusId = NewItemStatusEntity.Id;
                                            }
                                        }

                                        _unitOfWork.AllCivilInstRepository.Add(MonopoleAllCivilInst);
                                        _unitOfWork.SaveChanges();

                                        //
                                        // Civil Site Date..
                                        //

                                        TLIcivilSiteDate MonopoleCivilSiteDateEntity = new TLIcivilSiteDate();

                                        MonopoleCivilSiteDateEntity.SiteCode = MonopoleSiteCode;
                                        MonopoleCivilSiteDateEntity.allCivilInstId = MonopoleAllCivilInst.Id;
                                        MonopoleCivilSiteDateEntity.Dismantle = false;

                                        if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Status Date"].ToString()))
                                        {
                                            DateTime DateTimeParser = DateTime.Now;

                                            CheckParser = DateTime.TryParse(TypeOfSupportInfoDataTable.Rows[j]["Status Date"].ToString(), out DateTimeParser);

                                            if (CheckParser)
                                                MonopoleCivilSiteDateEntity.InstallationDate = DateTimeParser;

                                            else
                                            {
                                                MonopoleTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Status Date) coulumn's value must be date",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                        else
                                            MonopoleCivilSiteDateEntity.InstallationDate = DateTime.Now;

                                        _unitOfWork.CivilSiteDateRepository.Add(MonopoleCivilSiteDateEntity);
                                        _unitOfWork.SaveChanges();

                                        //
                                        // Logistical..
                                        //

                                        string MonopoleDesigner = TypeOfSupportInfoDataTable.Rows[j]["Designer"].ToString();
                                        if (!string.IsNullOrEmpty(MonopoleDesigner))
                                            AddLogistical(MonopoleDesigner, "Designer", "CivilSupport", "TLIcivilWithoutLegLibrary", MonopoleLibraryId);

                                        string MonopoleSupplier = TypeOfSupportInfoDataTable.Rows[j]["Supplier"].ToString();
                                        if (!string.IsNullOrEmpty(MonopoleSupplier))
                                            AddLogistical(MonopoleSupplier, "Supplier", "CivilSupport", "TLIcivilWithoutLegLibrary", MonopoleLibraryId);

                                        _unitOfWork.SaveChanges();

                                        MonopoleTransaction.Complete();
                                    }
                                    catch (Exception err)
                                    {
                                        MonopoleTransaction.Dispose();

                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                        {
                                            CreatedAt = DateTime.Now,
                                            ErrMsg = err.Message,
                                            IsDeleted = false,
                                            IsLib = false,
                                            RefTable = Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString(),
                                            SheetName = "Type of support info",
                                            UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                        };

                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                        _unitOfWork.SaveChanges();

                                        continue;
                                    }
                                }
                            }
                            else if (CivilType.ToLower() == "Non-Steel".ToLower())
                            {
                                TLIcivilNonSteelLibrary CheckTowerType = new TLIcivilNonSteelLibrary();

                                string CivilNonSteelTypeName = TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"].ToString();
                                if (string.IsNullOrEmpty(CivilNonSteelTypeName))
                                {
                                    // CivilNonSteelTransaction.Dispose();

                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                    {
                                        CreatedAt = DateTime.Now,
                                        ErrMsg = $"(Civil steel Name) coulumn's value can't be null or empty",
                                        IsDeleted = false,
                                        IsLib = true,
                                        RefTable = Helpers.Constants.TablesNames.TLIcivilNonSteelLibrary.ToString(),
                                        SheetName = "Type Of Support Info",
                                        UniqueName = CivilNonSteelTypeName
                                    };

                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                    _unitOfWork.SaveChanges();

                                    continue;
                                }

                                string NonSteelModel = TypeOfSupportInfoDataTable.Rows[j]["Non-Steel Type"].ToString();
                                CheckTowerType = _unitOfWork.CivilNonSteelLibraryRepository
                                     .GetWhereFirst(x => x.Model.ToLower() == NonSteelModel.ToLower() && !x.Deleted);

                                if (CheckTowerType == null)
                                {

                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                    {
                                        CreatedAt = DateTime.Now,
                                        ErrMsg = $"(Non-Steel Type) coulumn's value: ({NonSteelModel}) doesn't exist in TLIS",
                                        IsDeleted = false,
                                        IsLib = true,
                                        RefTable = Helpers.Constants.TablesNames.TLIcivilNonSteelLibrary.ToString(),
                                        SheetName = "Type of support info",
                                        UniqueName = $"(Civil steel Name) : {TypeOfSupportInfoDataTable.Rows[j]["Civil steel Name"]}"
                                    };

                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                    _unitOfWork.SaveChanges();

                                    continue;
                                }

                                _unitOfWork.SaveChanges();
                                // Dummy Library For All Civil Non Steel Types..

                                int CivilNonSteelLibraryId = CheckTowerType.Id;

                                TLIcivilNonSteel NewCivilNonSteelEntity = new TLIcivilNonSteel();
                                NewCivilNonSteelEntity.Name = CivilNonSteelTypeName;

                                NewCivilNonSteelEntity.CivilNonSteelLibraryId = CivilNonSteelLibraryId;

                                if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Location"].ToString()))
                                {
                                    TLIlocationType LocationTypeForCivilNonSteel = _unitOfWork.LocationTypeRepository
                                        .GetWhereFirst(x => x.Name.ToLower() == TypeOfSupportInfoDataTable.Rows[j]["Location"].ToString().ToLower() && !x.Deleted);

                                    if (LocationTypeForCivilNonSteel != null)
                                        NewCivilNonSteelEntity.locationTypeId = LocationTypeForCivilNonSteel.Id;
                                }

                                if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Height"].ToString()))
                                {
                                    CheckParser = float.TryParse(TypeOfSupportInfoDataTable.Rows[j]["Height"].ToString(), out FloatParser);

                                    if (CheckParser)
                                        NewCivilNonSteelEntity.H2Height = FloatParser;

                                    else
                                    {
                                        // CivilNonSteelTransaction.Dispose();

                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                        {
                                            CreatedAt = DateTime.Now,
                                            ErrMsg = $"(Height) coulumn's value: ({TypeOfSupportInfoDataTable.Rows[j]["Height"]}) must be a number",
                                            IsDeleted = false,
                                            IsLib = false,
                                            RefTable = Helpers.Constants.TablesNames.TLIcivilNonSteel.ToString(),
                                            SheetName = "Type Of Support Info",
                                            UniqueName = CivilNonSteelTypeName
                                        };

                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                        _unitOfWork.SaveChanges();

                                        continue;
                                    }
                                }

                                _unitOfWork.CivilNonSteelRepository.Add(NewCivilNonSteelEntity);
                                _unitOfWork.SaveChanges();

                                using (TransactionScope CivilNonSteelTransaction = new TransactionScope(TransactionScopeOption.Required,
                                    new System.TimeSpan(0, 15, 0)))
                                {

                                    try
                                    {

                                        //
                                        // Dynamic Attribute..
                                        //

                                        List<TLIdynamicAtt> CivilNonSteelDynamicAttributesInTLIS = _unitOfWork.DynamicAttRepository
                                            .GetIncludeWhere(x => x.tablesNamesId == CivilNonSteelTableNameId, x => x.DataType).ToList();

                                        foreach (object CivilNonSteelDynamicAttribute in CivilNonSteelDynamicAttributes)
                                        {
                                            TLIdynamicAtt CivilNonSteelDynamicAttEntity = CivilNonSteelDynamicAttributesInTLIS.FirstOrDefault(x =>
                                                x.Key.ToLower() == CivilNonSteelDynamicAttribute.ToString().Replace('_', ' ').ToLower());

                                            TLIdynamicAttInstValue NewCivilNonSteelDynamicAttributeInstallationValue = new TLIdynamicAttInstValue()
                                            {
                                                DynamicAttId = CivilNonSteelDynamicAttEntity.Id,
                                                InventoryId = NewCivilNonSteelEntity.Id,
                                                tablesNamesId = CivilNonSteelTableNameId,
                                                disable = false
                                            };

                                            if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j][CivilNonSteelDynamicAttEntity.Key].ToString()))
                                            {
                                                if (CivilNonSteelDynamicAttEntity.DataType.Name.ToLower() == "string".ToLower())
                                                    NewCivilNonSteelDynamicAttributeInstallationValue.ValueString = TypeOfSupportInfoDataTable.Rows[j][CivilNonSteelDynamicAttEntity.Key].ToString();
                                                else if (CivilNonSteelDynamicAttEntity.DataType.Name.ToLower() == "int".ToLower() ||
                                                    CivilNonSteelDynamicAttEntity.DataType.Name.ToLower() == "double".ToLower())
                                                {
                                                    double DoubleParser = 0;

                                                    CheckParser = double.TryParse(TypeOfSupportInfoDataTable.Rows[j][CivilNonSteelDynamicAttEntity.Key].ToString(), out DoubleParser);

                                                    if (CheckParser)
                                                        NewCivilNonSteelDynamicAttributeInstallationValue.ValueDouble = DoubleParser;

                                                    else
                                                    {
                                                        CivilNonSteelTransaction.Dispose();

                                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                        {
                                                            CreatedAt = DateTime.Now,
                                                            ErrMsg = $"({CivilNonSteelDynamicAttEntity.Key}) coulumn's value must be a number",
                                                            IsDeleted = false,
                                                            IsLib = false,
                                                            RefTable = Helpers.Constants.TablesNames.TLIcivilNonSteel.ToString(),
                                                            SheetName = "Type of support info",
                                                            UniqueName = CivilNonSteelTypeName
                                                        };

                                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                        _unitOfWork.SaveChanges();

                                                        continue;
                                                    }
                                                }
                                                else if (CivilNonSteelDynamicAttEntity.DataType.Name.ToLower() == "boolean".ToLower())
                                                {
                                                    bool BooleanParser = false;

                                                    CheckParser = bool.TryParse(TypeOfSupportInfoDataTable.Rows[j][CivilNonSteelDynamicAttEntity.Key].ToString(), out BooleanParser);

                                                    if (CheckParser)
                                                        NewCivilNonSteelDynamicAttributeInstallationValue.ValueBoolean = BooleanParser;

                                                    else
                                                    {
                                                        CivilNonSteelTransaction.Dispose();

                                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                        {
                                                            CreatedAt = DateTime.Now,
                                                            ErrMsg = $"({CivilNonSteelDynamicAttEntity.Key}) coulumn's value must be a number",
                                                            IsDeleted = false,
                                                            IsLib = false,
                                                            RefTable = Helpers.Constants.TablesNames.TLIcivilNonSteel.ToString(),
                                                            SheetName = "Type of support info",
                                                            UniqueName = CivilNonSteelTypeName
                                                        };

                                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                        _unitOfWork.SaveChanges();

                                                        continue;
                                                    }
                                                }
                                                else if (CivilNonSteelDynamicAttEntity.DataType.Name.ToLower() == "datetime".ToLower())
                                                {
                                                    DateTime DateTimeParser = DateTime.Now;

                                                    CheckParser = DateTime.TryParse(TypeOfSupportInfoDataTable.Rows[j][CivilNonSteelDynamicAttEntity.Key].ToString(), out DateTimeParser);

                                                    if (CheckParser)
                                                        NewCivilNonSteelDynamicAttributeInstallationValue.ValueDateTime = DateTimeParser;

                                                    else
                                                    {
                                                        CivilNonSteelTransaction.Dispose();

                                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                        {
                                                            CreatedAt = DateTime.Now,
                                                            ErrMsg = $"({CivilNonSteelDynamicAttEntity.Key}) coulumn's value must be date",
                                                            IsDeleted = false,
                                                            IsLib = false,
                                                            RefTable = Helpers.Constants.TablesNames.TLIcivilNonSteel.ToString(),
                                                            SheetName = "Type of support info",
                                                            UniqueName = CivilNonSteelTypeName
                                                        };

                                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                        _unitOfWork.SaveChanges();

                                                        continue;
                                                    }
                                                }

                                                _unitOfWork.DynamicAttInstValueRepository.Add(NewCivilNonSteelDynamicAttributeInstallationValue);
                                                _unitOfWork.SaveChanges();
                                            }
                                        }

                                        //
                                        // All Civil Inst Information..
                                        //

                                        TLIallCivilInst TowerAllCivilInst = new TLIallCivilInst();

                                        string TowerCurrentStatus = TypeOfSupportInfoDataTable.Rows[j]["Current Status"].ToString();
                                        if (!string.IsNullOrEmpty(TowerCurrentStatus))
                                        {
                                            TLIitemStatus CheckCurrentStatus = _unitOfWork.ItemStatusRepository
                                                .GetWhereFirst(x => x.Name.ToLower() == TowerCurrentStatus.ToLower() && !x.Deleted);

                                            if (CheckCurrentStatus != null)
                                                TowerAllCivilInst.ItemStatusId = CheckCurrentStatus.Id;

                                            else
                                            {
                                                TLIitemStatus NewItemStatus = new TLIitemStatus();
                                                NewItemStatus.Name = TowerCurrentStatus;
                                                _unitOfWork.ItemStatusRepository.Add(NewItemStatus);
                                                _unitOfWork.SaveChanges();
                                                TowerAllCivilInst.ItemStatusId = NewItemStatus.Id;
                                            }
                                        }

                                        TowerAllCivilInst.civilNonSteelId = NewCivilNonSteelEntity.Id;
                                        TowerAllCivilInst.Draft = false;

                                        _unitOfWork.AllCivilInstRepository.Add(TowerAllCivilInst);
                                        _unitOfWork.SaveChanges();

                                        //
                                        // Civil Site Date Information..
                                        //

                                        string CivilNonSteelSiteCode = string.Empty;
                                        if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Site Code"].ToString()))
                                        {
                                            TLIsite SiteEntity = _unitOfWork.SiteRepository
                                               .GetWhereFirst(x => x.SiteCode.ToLower() == TypeOfSupportInfoDataTable.Rows[j]["Site Code"].ToString().ToLower());

                                            if (SiteEntity != null)
                                                CivilNonSteelSiteCode = SiteEntity.SiteCode;

                                            else
                                            {
                                                CivilNonSteelTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"({TypeOfSupportInfoDataTable.Rows[j]["Site Code"]}) coulumn's value: ({TypeOfSupportInfoDataTable.Rows[j]["Site Code"]}) doesn't exist in TLIS",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = CivilNonSteelTypeName
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                        else if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Site Name"].ToString()))
                                        {
                                            TLIsite SiteEntity = _unitOfWork.SiteRepository
                                                .GetWhereFirst(x => x.SiteName.ToLower() == TypeOfSupportInfoDataTable.Rows[j]["Site Name"].ToString().ToLower());

                                            if (SiteEntity != null)
                                                CivilNonSteelSiteCode = SiteEntity.SiteCode;

                                            else
                                            {
                                                CivilNonSteelTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"({TypeOfSupportInfoDataTable.Rows[j]["Site Name"]}) coulumn's value: ({TypeOfSupportInfoDataTable.Rows[j]["Site Name"]}) doesn't exist in TLIS",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = CivilNonSteelTypeName
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                        else
                                        {
                                            CivilNonSteelTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"One of those columns must have a value: (Site Code, Site Name)",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                                SheetName = "Type of support info",
                                                UniqueName = CivilNonSteelTypeName
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        TLIcivilSiteDate CheckCivilNonSteelName = _unitOfWork.CivilSiteDateRepository
                                            .GetIncludeWhereFirst(x => !x.Dismantle && x.SiteCode.ToLower() == CivilNonSteelSiteCode.ToLower() &&
                                                x.allCivilInst.civilNonSteelId != null ?
                                                    (!x.allCivilInst.Draft && x.allCivilInst.civilNonSteel.Name.ToLower() == CivilNonSteelTypeName.ToLower()) : false,
                                                        x => x.allCivilInst, x => x.allCivilInst.civilNonSteel);

                                        if (CheckCivilNonSteelName != null)
                                        {
                                            CivilNonSteelTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Non Steel Type) column's value: ({CivilNonSteelTypeName}) is already exist in this " +
                                                    $"site code: ({CivilNonSteelSiteCode})",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                                SheetName = "Type of support info",
                                                UniqueName = CivilNonSteelTypeName
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        TLIcivilSiteDate TowerCivilSiteDateEntity = new TLIcivilSiteDate();

                                        TowerCivilSiteDateEntity.SiteCode = CivilNonSteelSiteCode;
                                        TowerCivilSiteDateEntity.allCivilInstId = TowerAllCivilInst.Id;

                                        if (!string.IsNullOrEmpty(TypeOfSupportInfoDataTable.Rows[j]["Status Date"].ToString()))
                                        {
                                            DateTime DateTimeParser = DateTime.Now;

                                            CheckParser = DateTime.TryParse(TypeOfSupportInfoDataTable.Rows[j]["Status Date"].ToString(), out DateTimeParser);

                                            if (CheckParser)
                                                TowerCivilSiteDateEntity.InstallationDate = DateTimeParser;

                                            else
                                            {
                                                CivilNonSteelTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Status Date) coulumn's value must be date",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilSiteDate.ToString(),
                                                    SheetName = "Type of support info",
                                                    UniqueName = CivilNonSteelTypeName
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                        else
                                            TowerCivilSiteDateEntity.InstallationDate = DateTime.Now;

                                        _unitOfWork.CivilSiteDateRepository.Add(TowerCivilSiteDateEntity);
                                        _unitOfWork.SaveChanges();

                                        _unitOfWork.SaveChanges();

                                        CivilNonSteelTransaction.Complete();
                                    }
                                    catch (Exception err)
                                    {
                                        CivilNonSteelTransaction.Dispose();

                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                        {
                                            CreatedAt = DateTime.Now,
                                            ErrMsg = err.Message,
                                            IsDeleted = false,
                                            IsLib = false,
                                            RefTable = Helpers.Constants.TablesNames.TLIcivilNonSteel.ToString(),
                                            SheetName = "Type of support info",
                                            UniqueName = CivilNonSteelTypeName
                                        };

                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                        _unitOfWork.SaveChanges();

                                        continue;
                                    }
                                }
                            }
                        }

                    ////////////////////////////////////////////////////////////
                    ///////////////////////// Side Arm /////////////////////////
                    ////////////////////////////////////////////////////////////

                    SideArm:

                        Array SideArmDynamicAttributes = Enum.GetValues(typeof(Helpers.Constants.SideArmInstallationMissedAttributes));

                        int SideArmTableNameId = TablesName.FirstOrDefault(x =>
                            x.TableName.ToLower() == Helpers.Constants.TablesNames.TLIsideArm.ToString().ToLower()).Id;

                        foreach (object SideArmDynamicAttribute in SideArmDynamicAttributes)
                        {
                            string DynamicAttributeDataTypeName = Helpers.Constants.GetEnumDescription(
                                (Helpers.Constants.SideArmInstallationMissedAttributes)SideArmDynamicAttribute);

                            TLIdynamicAtt CheckIfDynamicAttributeAlreadyExist = _unitOfWork.DynamicAttRepository
                                .GetWhereFirst(x => x.Key.ToLower() == SideArmDynamicAttribute.ToString().ToLower().Replace('_', ' ') &&
                                    x.tablesNamesId == SideArmTableNameId);

                            if (CheckIfDynamicAttributeAlreadyExist == null)
                            {
                                TLIdynamicAtt SideArmNewDynamicAttribute = new TLIdynamicAtt
                                {
                                    Key = SideArmDynamicAttribute.ToString().Replace('_', ' '),
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == DynamicAttributeDataTypeName.ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SideArmTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                };

                                _unitOfWork.DynamicAttRepository.Add(SideArmNewDynamicAttribute);
                                _unitOfWork.SaveChanges();
                            }
                        }

                        ExcelWorksheet SideArmSheet = package.Workbook.Worksheets.FirstOrDefault(x => x.Name.ToLower() == "Side Arm info".ToLower());
                        int SideArmRows = 0;
                        try
                        {
                            SideArmRows = SideArmSheet.Dimension.End.Row;
                        }
                        catch (NullReferenceException)
                        {
                            goto MW_Dish;
                        }
                        int SideArmColumns = SideArmSheet.Dimension.End.Column;

                        DataTable SideArmDataTable = new DataTable();
                        List<string> SideArmSheetColumn = new List<string>();

                        for (int i = 1; i <= SideArmColumns; i++)
                        {
                            string ColName = SideArmSheet.Cells[1, i].Value.ToString().Trim();
                            ColName = Regex.Replace(ColName, @"\s+", " ");
                            SideArmSheetColumn.Add(ColName);
                            SideArmDataTable.Columns.Add(ColName);
                        }

                        for (int i = 2; i <= SideArmRows; i++)
                        {
                            DataRow SideArmDataRow = SideArmDataTable.NewRow();
                            for (int j = 1; j <= SideArmColumns; j++)
                            {
                                string ColName = SideArmSheet.Cells[1, j].Value.ToString().Trim();
                                ColName = Regex.Replace(ColName, @"\s+", " ");

                                object Value = SideArmSheet.Cells[i, j].Value;
                                if (Value != null)
                                {
                                    string ValueAsString = Value.ToString().Trim();
                                    ValueAsString = Regex.Replace(ValueAsString, @"\s+", " ");
                                    Value = ValueAsString;
                                    SideArmDataRow[ColName] = Value;
                                }
                                else
                                {
                                    SideArmDataRow[ColName] = Value;
                                }
                            }
                            SideArmDataTable.Rows.Add(SideArmDataRow);
                        }

                        DataColumn[] SideArmInstallationColumns = SideArmDataTable.Columns.Cast<DataColumn>().ToArray();

                        for (int j = 0; j <= SideArmDataTable.Rows.Count - 1; j++)
                        {
                            using (TransactionScope SideArmTransaction = new TransactionScope(TransactionScopeOption.Required,
                                new System.TimeSpan(0, 15, 0)))
                            {
                                try
                                {
                                    //
                                    // Library Information..
                                    //

                                    int SideArmLibraryId = 0;

                                    string SideArmLibraryModel = SideArmDataTable.Rows[j]["Side Arm Specs"].ToString();
                                    if (!string.IsNullOrEmpty(SideArmLibraryModel))
                                    {
                                        TLIsideArmLibrary CheckSideArmLibraryModelIfExist = _unitOfWork.SideArmLibraryRepository
                                            .GetWhereFirst(x => x.Model.ToLower() == SideArmLibraryModel.ToLower() && !x.Deleted);

                                        if (CheckSideArmLibraryModelIfExist != null)
                                        {
                                            SideArmLibraryId = CheckSideArmLibraryModelIfExist.Id;
                                        }
                                        else
                                        {
                                            SideArmTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Side Arm Specs) coulumn's value: ({SideArmLibraryModel}) doesn't exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = true,
                                                RefTable = Helpers.Constants.TablesNames.TLIsideArmLibrary.ToString(),
                                                SheetName = "Side Arm info",
                                                UniqueName = $"(Side Arm Name) : {SideArmDataTable.Rows[j]["Side Arm Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        SideArmTransaction.Dispose();

                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                        {
                                            CreatedAt = DateTime.Now,
                                            ErrMsg = $"(Side Arm Specs) coulumn's value can't be null or empty",
                                            IsDeleted = false,
                                            IsLib = true,
                                            RefTable = Helpers.Constants.TablesNames.TLIsideArmLibrary.ToString(),
                                            SheetName = "Side Arm info",
                                            UniqueName = $"(Side Arm Name) : {SideArmDataTable.Rows[j]["Side Arm Name"]}"
                                        };

                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                        _unitOfWork.SaveChanges();

                                        continue;
                                    }

                                    //
                                    // Installation Information..
                                    //

                                    TLIsideArm NewSideArmEntity = new TLIsideArm();

                                    NewSideArmEntity.sideArmLibraryId = SideArmLibraryId;
                                    NewSideArmEntity.Name = SideArmDataTable.Rows[j]["Side Arm Name"].ToString();

                                    //
                                    // Auto Complete Installation Name Attribute if it is Null Or Empty in The CSV File..
                                    //

                                    if (string.IsNullOrEmpty(NewSideArmEntity.Name))
                                        NewSideArmEntity.Name = SideArmDataTable.Rows[j]["Civil Steel Name"].ToString() +
                                            (!string.IsNullOrEmpty(SideArmDataTable.Rows[j]["Civil Steel leg Sector"].ToString()) ?
                                                SideArmDataTable.Rows[j]["Civil Steel leg Sector"].ToString() : "") +
                                            (!string.IsNullOrEmpty(SideArmDataTable.Rows[j]["Second Leg"].ToString()) ?
                                                SideArmDataTable.Rows[j]["Second Leg"].ToString() : "") +
                                            (!string.IsNullOrEmpty(SideArmDataTable.Rows[j]["Side Arm Height"].ToString()) ?
                                                SideArmDataTable.Rows[j]["Side Arm Height"].ToString() : "") +
                                            (!string.IsNullOrEmpty(SideArmDataTable.Rows[j]["Side Arm Azimuth"].ToString()) ?
                                                SideArmDataTable.Rows[j]["Side Arm Azimuth"].ToString() : "");

                                    string SideArmSiteCodeValue = string.Empty;
                                    string SideArmSiteCode = SideArmDataTable.Rows[j]["Site Code"].ToString();
                                    string SideArmSite = SideArmDataTable.Rows[j]["Site"].ToString();
                                    string SideArmSiteName = SideArmDataTable.Rows[j]["Site Name"].ToString();

                                    if (!string.IsNullOrEmpty(SideArmSiteCode))
                                    {
                                        TLIsite CheckSideArmSiteCodeIfExist = _unitOfWork.SiteRepository
                                            .GetWhereFirst(x => x.SiteCode.ToLower() == SideArmSiteCode.ToLower());

                                        if (CheckSideArmSiteCodeIfExist != null)
                                            SideArmSiteCodeValue = SideArmSiteCode;

                                        else
                                        {
                                            SideArmTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Site Code) coulumn's value: ({SideArmSiteCode}) doesn't exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                                SheetName = "Side Arm info",
                                                UniqueName = $"(Side Arm Name) : {NewSideArmEntity.Name}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }
                                    }
                                    else if (!string.IsNullOrEmpty(SideArmSite))
                                    {
                                        TLIsite CheckSideArmSiteCodeIfExist = _unitOfWork.SiteRepository
                                            .GetWhereFirst(x => x.SiteCode.ToLower() == SideArmSite.ToLower());

                                        if (CheckSideArmSiteCodeIfExist != null)
                                            SideArmSiteCodeValue = SideArmSite;

                                        else
                                        {
                                            SideArmTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Site) coulumn's value: ({SideArmSite}) doesn't exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                                SheetName = "Side Arm info",
                                                UniqueName = $"(Side Arm Name) : {NewSideArmEntity.Name}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }
                                    }
                                    else if (!string.IsNullOrEmpty(SideArmSiteName))
                                    {
                                        TLIsite CheckSideArmSiteCodeIfExist = _unitOfWork.SiteRepository
                                            .GetWhereFirst(x => x.SiteName.ToLower() == SideArmSiteName.ToLower());

                                        if (CheckSideArmSiteCodeIfExist != null)
                                            SideArmSiteCodeValue = CheckSideArmSiteCodeIfExist.SiteCode;

                                        else
                                        {
                                            SideArmTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Site Name) coulumn's value: ({SideArmSiteName}) doesn't exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                                SheetName = "Side Arm info",
                                                UniqueName = $"(Side Arm Name) : {NewSideArmEntity.Name}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        SideArmTransaction.Dispose();

                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                        {
                                            CreatedAt = DateTime.Now,
                                            ErrMsg = $"One of those columns must have a value: (Site Code, Site, Site Name)",
                                            IsDeleted = false,
                                            IsLib = false,
                                            RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                            SheetName = "Side Arm info",
                                            UniqueName = $"(Side Arm Name) : {NewSideArmEntity.Name}"
                                        };

                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                        _unitOfWork.SaveChanges();

                                        continue;
                                    }

                                    //
                                    // Check If This SideArm Name Attribute is Already Exist as an Installation in The Same Site..
                                    //

                                    TLIcivilLoads CheckIfSideArmNameIsAlreadyExist = _unitOfWork.CivilLoadsRepository
                                        .GetIncludeWhereFirst(x => !x.Dismantle && (x.sideArmId != null ?
                                            (!x.sideArm.Draft && x.SiteCode.ToLower() == SideArmSiteCodeValue.ToLower() &&
                                            x.sideArm.Name.ToLower() == NewSideArmEntity.Name.ToLower()) : false),
                                                x => x.sideArm);

                                    if (CheckIfSideArmNameIsAlreadyExist != null)
                                    {
                                        SideArmTransaction.Dispose();

                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                        {
                                            CreatedAt = DateTime.Now,
                                            ErrMsg = $"(Side Arm Name) column's value: ({NewSideArmEntity.Name}) is already exist in site",
                                            IsDeleted = false,
                                            IsLib = false,
                                            RefTable = Helpers.Constants.TablesNames.TLIsideArm.ToString(),
                                            SheetName = "Side Arm info",
                                            UniqueName = $"(Side Arm Name) : {NewSideArmEntity.Name}"
                                        };

                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                        _unitOfWork.SaveChanges();

                                        continue;
                                    }

                                    NewSideArmEntity.Notes = SideArmDataTable.Rows[j]["Side Arm Notes"].ToString();
                                    NewSideArmEntity.VisibleStatus = SideArmDataTable.Rows[j]["Current Status"].ToString();
                                    NewSideArmEntity.ReservedSpace = false;
                                    NewSideArmEntity.CenterHigh = 0;
                                    NewSideArmEntity.HBA = 0;
                                    NewSideArmEntity.HieghFromLand = 0;
                                    NewSideArmEntity.EquivalentSpace = 0;
                                    NewSideArmEntity.SpaceInstallation = 0;
                                    NewSideArmEntity.Draft = false;

                                    string SideArmHeight = SideArmDataTable.Rows[j]["Side Arm Height"].ToString();
                                    if (!string.IsNullOrEmpty(SideArmHeight))
                                    {
                                        CheckParser = float.TryParse(SideArmHeight, out FloatParser);

                                        if (CheckParser)
                                            NewSideArmEntity.HeightBase = FloatParser;

                                        else
                                        {
                                            SideArmTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Side Arm Height) coulumn's value must be a number",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIsideArm.ToString(),
                                                SheetName = "Side Arm info",
                                                UniqueName = $"(Side Arm Name) : {SideArmDataTable.Rows[j]["Side Arm Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }
                                    }

                                    string SideArmAzimuth = SideArmDataTable.Rows[j]["Side Arm Azimuth"].ToString();
                                    if (!string.IsNullOrEmpty(SideArmAzimuth))
                                    {
                                        CheckParser = float.TryParse(SideArmAzimuth, out FloatParser);

                                        if (CheckParser)
                                            NewSideArmEntity.Azimuth = FloatParser;

                                        else
                                        {
                                            SideArmTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Side Arm Azimuth) coulumn's value must be a number",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIsideArm.ToString(),
                                                SheetName = "Side Arm info",
                                                UniqueName = $"(Side Arm Name) : {SideArmDataTable.Rows[j]["Side Arm Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }
                                    }

                                    string SideArmActiveComponent = SideArmDataTable.Rows[j]["Active component"].ToString();
                                    NewSideArmEntity.Active = true;

                                    if (!string.IsNullOrEmpty(SideArmActiveComponent))
                                    {
                                        if (SideArmActiveComponent.ToLower() != "Yes".ToLower())
                                            NewSideArmEntity.Active = false;
                                    }

                                    string SideArmOwnerName = SideArmDataTable.Rows[j]["Side Arm Owner"].ToString();

                                    if (!string.IsNullOrEmpty(SideArmOwnerName))
                                    {
                                        TLIowner CheckRRUOwnerIfExist = _unitOfWork.OwnerRepository
                                            .GetWhereFirst(x => x.OwnerName.ToLower() == SideArmOwnerName.ToLower() && !x.Deleted);

                                        if (CheckRRUOwnerIfExist != null)
                                            NewSideArmEntity.ownerId = CheckRRUOwnerIfExist.Id;

                                        else
                                        {
                                            SideArmTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Side Arm Owner) coulumn's value: ({SideArmOwnerName}) doesn't exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIowner.ToString(),
                                                SheetName = "Side Arm info",
                                                UniqueName = $"(Side Arm Name) : {NewSideArmEntity.Name}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }
                                    }

                                    string SideArmTypeName = SideArmDataTable.Rows[j]["Side Arm Type"].ToString();
                                    if (!string.IsNullOrEmpty(SideArmTypeName))
                                    {
                                        TLIsideArmType CheckSideArmTypeNameIfExist = _unitOfWork.SideArmTypeRepository
                                            .GetIncludeWhereFirst(x => x.Name.ToLower() == SideArmTypeName.ToLower() && !x.Deleted);

                                        if (CheckSideArmTypeNameIfExist != null)
                                            NewSideArmEntity.sideArmTypeId = CheckSideArmTypeNameIfExist.Id;

                                        else
                                        {
                                            SideArmTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Side Arm Type) coulumn's value: ({SideArmTypeName}) doesn't exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIsideArmType.ToString(),
                                                SheetName = "Side Arm info",
                                                UniqueName = $"(Side Arm Name) : {NewSideArmEntity.Name}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        SideArmTransaction.Dispose();

                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                        {
                                            CreatedAt = DateTime.Now,
                                            ErrMsg = $"(Side Arm Type) coulumn's value: ({SideArmTypeName}) can't be null or empty",
                                            IsDeleted = false,
                                            IsLib = false,
                                            RefTable = Helpers.Constants.TablesNames.TLIsideArmType.ToString(),
                                            SheetName = "Side Arm info",
                                            UniqueName = $"(Side Arm Name) : {NewSideArmEntity.Name}"
                                        };

                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                        _unitOfWork.SaveChanges();

                                        continue;
                                    }

                                    string SideArmInstallationPlaceName = SideArmDataTable.Rows[j]["Side Arm installation place"].ToString();
                                    if (!string.IsNullOrEmpty(SideArmInstallationPlaceName))
                                    {
                                        TLIsideArmInstallationPlace CheckSideArminstallationplace = _unitOfWork.SideArmInstallationPlaceRepository
                                            .GetWhereFirst(x => x.Name.ToLower() == SideArmInstallationPlaceName.ToLower() && !x.Deleted);

                                        if (CheckSideArminstallationplace != null)
                                            NewSideArmEntity.sideArmInstallationPlaceId = CheckSideArminstallationplace.Id;

                                        else
                                        {
                                            SideArmTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Side Arm installation place) coulumn's value: " +
                                                    $"({SideArmInstallationPlaceName}) doesn't exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIsideArmInstallationPlace.ToString(),
                                                SheetName = "Side Arm info",
                                                UniqueName = $"(Side Arm Name) : {NewSideArmEntity.Name}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }
                                    }

                                    string SideArmCurrentStatus = SideArmDataTable.Rows[j]["Current Status"].ToString();
                                    if (!string.IsNullOrEmpty(SideArmCurrentStatus))
                                    {
                                        TLIitemStatus CheckCurrentStatusradioAntenna = _unitOfWork.ItemStatusRepository
                                            .GetWhereFirst(x => x.Name.ToLower() == SideArmCurrentStatus.ToLower() && !x.Deleted);

                                        if (CheckCurrentStatusradioAntenna != null)
                                            NewSideArmEntity.ItemStatusId = CheckCurrentStatusradioAntenna.Id;

                                        else
                                        {
                                            TLIitemStatus NewItemStatus = new TLIitemStatus();

                                            NewItemStatus.Name = SideArmCurrentStatus;
                                            _unitOfWork.ItemStatusRepository.Add(NewItemStatus);
                                            _unitOfWork.SaveChanges();

                                            NewSideArmEntity.ItemStatusId = NewItemStatus.Id;
                                        }
                                    }

                                    _unitOfWork.SideArmRepository.Add(NewSideArmEntity);
                                    _unitOfWork.SaveChanges();

                                    //
                                    // Dynamic Attribute..
                                    //

                                    int NewSideArmEntityId = NewSideArmEntity.Id;
                                    List<TLIdynamicAtt> SideArmDynamicAttributesInTLIS = _unitOfWork.DynamicAttRepository
                                        .GetIncludeWhere(x => x.tablesNamesId == SideArmTableNameId, x => x.DataType).ToList();

                                    foreach (object SideArmDynamicAttribute in SideArmDynamicAttributes)
                                    {
                                        TLIdynamicAtt SideArmDynamicAttEntity = SideArmDynamicAttributesInTLIS.FirstOrDefault(x =>
                                            x.Key.ToLower() == SideArmDynamicAttribute.ToString().Replace('_', ' ').ToLower());

                                        if (!string.IsNullOrEmpty(SideArmDataTable.Rows[j][SideArmDynamicAttEntity.Key].ToString()))
                                        {
                                            TLIdynamicAttInstValue NewSideArmDynamicAttributeInstallationValue = new TLIdynamicAttInstValue()
                                            {
                                                DynamicAttId = SideArmDynamicAttEntity.Id,
                                                InventoryId = NewSideArmEntityId,
                                                tablesNamesId = SideArmTableNameId,
                                                disable = false
                                            };

                                            if (SideArmDynamicAttEntity.DataType.Name.ToLower() == "string".ToLower())
                                                NewSideArmDynamicAttributeInstallationValue.ValueString = SideArmDataTable.Rows[j][SideArmDynamicAttEntity.Key].ToString();
                                            else if (SideArmDynamicAttEntity.DataType.Name.ToLower() == "int".ToLower() ||
                                                SideArmDynamicAttEntity.DataType.Name.ToLower() == "double".ToLower())
                                            {
                                                CheckParser = float.TryParse(SideArmDataTable.Rows[j][SideArmDynamicAttEntity.Key].ToString(), out FloatParser);

                                                if (CheckParser)
                                                    NewSideArmDynamicAttributeInstallationValue.ValueDouble = FloatParser;

                                                else
                                                {
                                                    SideArmTransaction.Dispose();

                                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                    {
                                                        CreatedAt = DateTime.Now,
                                                        ErrMsg = $"({SideArmDynamicAttEntity.Key}) coulumn's value must be a number",
                                                        IsDeleted = false,
                                                        IsLib = false,
                                                        RefTable = Helpers.Constants.TablesNames.TLIsideArm.ToString(),
                                                        SheetName = "Side Arm info",
                                                        UniqueName = $"(Side Arm Name) : {SideArmDataTable.Rows[j]["Side Arm Name"]}"
                                                    };

                                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                    _unitOfWork.SaveChanges();

                                                    continue;
                                                }
                                            }
                                            else if (SideArmDynamicAttEntity.DataType.Name.ToLower() == "boolean".ToLower())
                                            {
                                                bool BooleanParser = false;

                                                CheckParser = bool.TryParse(SideArmDataTable.Rows[j][SideArmDynamicAttEntity.Key].ToString(), out BooleanParser);

                                                if (CheckParser)
                                                    NewSideArmDynamicAttributeInstallationValue.ValueBoolean = BooleanParser;

                                                else
                                                {
                                                    SideArmTransaction.Dispose();

                                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                    {
                                                        CreatedAt = DateTime.Now,
                                                        ErrMsg = $"({SideArmDynamicAttEntity.Key}) coulumn's value must be boolean (Yes/No)",
                                                        IsDeleted = false,
                                                        IsLib = false,
                                                        RefTable = Helpers.Constants.TablesNames.TLIsideArm.ToString(),
                                                        SheetName = "Side Arm info",
                                                        UniqueName = $"(Side Arm Name) : {SideArmDataTable.Rows[j]["Side Arm Name"]}"
                                                    };

                                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                    _unitOfWork.SaveChanges();

                                                    continue;
                                                }
                                            }
                                            else if (SideArmDynamicAttEntity.DataType.Name.ToLower() == "datetime".ToLower())
                                            {
                                                DateTime DateTimeParser = DateTime.Now;

                                                CheckParser = DateTime.TryParse(SideArmDataTable.Rows[j][SideArmDynamicAttEntity.Key].ToString(), out DateTimeParser);

                                                if (CheckParser)
                                                    NewSideArmDynamicAttributeInstallationValue.ValueDateTime = DateTimeParser;

                                                else
                                                {
                                                    SideArmTransaction.Dispose();

                                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                    {
                                                        CreatedAt = DateTime.Now,
                                                        ErrMsg = $"({SideArmDynamicAttEntity.Key}) coulumn's value must be date",
                                                        IsDeleted = false,
                                                        IsLib = false,
                                                        RefTable = Helpers.Constants.TablesNames.TLIsideArm.ToString(),
                                                        SheetName = "Side Arm info",
                                                        UniqueName = $"(Side Arm Name) : {SideArmDataTable.Rows[j]["Side Arm Name"]}"
                                                    };

                                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                    _unitOfWork.SaveChanges();

                                                    continue;
                                                }
                                            }

                                            _unitOfWork.DynamicAttInstValueRepository.Add(NewSideArmDynamicAttributeInstallationValue);
                                            _unitOfWork.SaveChanges();
                                        }
                                    }

                                    //
                                    // Civil Loads Information..
                                    //

                                    TLIcivilLoads NewSideArmCivilLoads = new TLIcivilLoads();

                                    NewSideArmCivilLoads.sideArmId = NewSideArmEntity.Id;
                                    NewSideArmCivilLoads.SiteCode = SideArmSiteCodeValue;

                                    string SideArmCivilType = SideArmDataTable.Rows[j]["type"].ToString();
                                    if (!string.IsNullOrEmpty(SideArmCivilType))
                                    {
                                        string SideArmCivilName = SideArmDataTable.Rows[j]["Civil Steel Name"].ToString();

                                        if (string.IsNullOrEmpty(SideArmCivilName))
                                        {
                                            SideArmTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Civil Steel Name) coulumn's value can't be null or empty",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = String.Empty,
                                                SheetName = "Side Arm info",
                                                UniqueName = $"(Side Arm Name) : {NewSideArmEntity.Name}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }
                                        if (SideArmCivilType.ToLower() == "Tower".ToLower())
                                        {
                                            TLIcivilSiteDate SideArmCivilSiteDate = _unitOfWork.CivilSiteDateRepository
                                                .GetIncludeWhereFirst(x => !x.Dismantle && x.allCivilInst.civilWithLegsId != null ?
                                                    (!x.allCivilInst.Draft && x.allCivilInst.civilWithLegs.Name.ToLower() == SideArmCivilName.ToLower()) : false,
                                                        x => x.allCivilInst, x => x.allCivilInst.civilWithLegs);

                                            if (SideArmCivilSiteDate == null)
                                            {
                                                SideArmTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Civil Steel Name) coulumn's value: ({SideArmCivilName}) with (type) coulumn's" +
                                                        $" value: ({SideArmCivilType}) doesn't exist in TLIS",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilSiteDate.ToString(),
                                                    SheetName = "Side Arm info",
                                                    UniqueName = $"(Side Arm Name) : {NewSideArmEntity.Name}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }

                                            NewSideArmCivilLoads.allCivilInstId = SideArmCivilSiteDate.allCivilInstId;
                                        }
                                        else if (SideArmCivilType.ToLower() == Helpers.Constants.CivilWithoutLegCategories.Mast.ToString().ToLower() ||
                                            SideArmCivilType.ToLower() == Helpers.Constants.CivilWithoutLegCategories.Monopole.ToString().ToLower())
                                        {
                                            TLIcivilSiteDate SideArmCivilSiteDate = _unitOfWork.CivilSiteDateRepository
                                                .GetIncludeWhereFirst(x => !x.Dismantle && x.allCivilInst.civilWithoutLegId != null ?
                                                    (!x.allCivilInst.Draft && x.allCivilInst.civilWithoutLeg.Name.ToLower() == SideArmCivilName.ToLower()) : false,
                                                        x => x.allCivilInst, x => x.allCivilInst.civilWithoutLeg);

                                            if (SideArmCivilSiteDate == null)
                                            {
                                                SideArmTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Civil Steel Name) coulumn's value: ({SideArmCivilName}) with (type) coulumn's" +
                                                        $" value: ({SideArmCivilType}) doesn't exist in TLIS",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilSiteDate.ToString(),
                                                    SheetName = "Side Arm info",
                                                    UniqueName = $"(Side Arm Name) : {NewSideArmEntity.Name}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }

                                            NewSideArmCivilLoads.allCivilInstId = SideArmCivilSiteDate.allCivilInstId;
                                        }
                                        else if (SideArmCivilType.ToLower() == "Non Steel".ToLower())
                                        {
                                            TLIcivilSiteDate SideArmCivilSiteDate = _unitOfWork.CivilSiteDateRepository
                                                .GetIncludeWhereFirst(x => !x.Dismantle && x.allCivilInst.civilNonSteelId != null ?
                                                    (!x.allCivilInst.Draft && x.allCivilInst.civilNonSteel.Name.ToLower() == SideArmCivilName.ToLower()) : false,
                                                        x => x.allCivilInst, x => x.allCivilInst.civilNonSteel);

                                            if (SideArmCivilSiteDate == null)
                                            {
                                                SideArmTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Civil Steel Name) coulumn's value: ({SideArmCivilName}) with (type) coulumn's" +
                                                        $" value: ({SideArmCivilType}) doesn't exist in TLIS",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilSiteDate.ToString(),
                                                    SheetName = "Side Arm info",
                                                    UniqueName = $"(Side Arm Name) : {NewSideArmEntity.Name}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }

                                            NewSideArmCivilLoads.allCivilInstId = SideArmCivilSiteDate.allCivilInstId;
                                        }
                                        else
                                        {
                                            SideArmTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(type) coulumn's value can only be one of those values " +
                                                    $"(Tower, Mast, Monopole, Non Steel)",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = String.Empty,
                                                SheetName = "Side Arm info",
                                                UniqueName = $"(Side Arm Name) : {NewSideArmEntity.Name}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        SideArmTransaction.Dispose();

                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                        {
                                            CreatedAt = DateTime.Now,
                                            ErrMsg = $"(type) coulumn's value can't be null or empty ",
                                            IsDeleted = false,
                                            IsLib = false,
                                            RefTable = String.Empty,
                                            SheetName = "Side Arm info",
                                            UniqueName = $"(Side Arm Name) : {NewSideArmEntity.Name}"
                                        };

                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                        _unitOfWork.SaveChanges();

                                        continue;
                                    }

                                    string SideArmFirstLegName = SideArmDataTable.Rows[j]["Civil Steel leg Sector"].ToString();
                                    if (!string.IsNullOrEmpty(SideArmFirstLegName))
                                    {
                                        TLIleg CheckSideArmFirstLegNameIfExist = _unitOfWork.LegRepository
                                            .GetWhereFirst(x => x.CiviLegName.ToLower() == SideArmFirstLegName.ToLower());

                                        if (CheckSideArmFirstLegNameIfExist == null)
                                        {
                                            SideArmTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Civil Steel leg Sector) coulumn's value: ({SideArmFirstLegName}) doesn't exist in TLIS ",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIleg.ToString(),
                                                SheetName = "Side Arm info",
                                                UniqueName = $"(Side Arm Name) : {NewSideArmEntity.Name}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        if (!string.IsNullOrEmpty(SideArmDataTable.Rows[j]["Civil Steel Leg Mngle"].ToString()))
                                            CheckSideArmFirstLegNameIfExist.LegAzimuth = float.Parse(SideArmDataTable.Rows[j]["Civil Steel Leg Mngle"].ToString());

                                        NewSideArmCivilLoads.legId = CheckSideArmFirstLegNameIfExist.Id;

                                        string SideArmSecondLegName = SideArmDataTable.Rows[j]["Second Leg"].ToString();
                                        if (!string.IsNullOrEmpty(SideArmSecondLegName))
                                        {
                                            TLIleg CheckSideArmSecondLegNameIfExist = _unitOfWork.LegRepository
                                                .GetWhereFirst(x => x.CiviLegName.ToLower() == SideArmSecondLegName.ToLower());

                                            if (CheckSideArmSecondLegNameIfExist == null)
                                            {
                                                SideArmTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Second Leg) coulumn's value: ({SideArmSecondLegName}) doesn't exist in TLIS ",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIleg.ToString(),
                                                    SheetName = "Side Arm info",
                                                    UniqueName = $"(Side Arm Name) : {NewSideArmEntity.Name}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }

                                            NewSideArmCivilLoads.Leg2Id = CheckSideArmSecondLegNameIfExist.Id;
                                        }
                                    }

                                    string SideArmStatusDateAsString = SideArmDataTable.Rows[j]["Status Date"].ToString();
                                    if (!string.IsNullOrEmpty(SideArmStatusDateAsString))
                                    {
                                        if (!string.IsNullOrEmpty(SideArmStatusDateAsString))
                                        {
                                            DateTime DateTimeParser = DateTime.Now;

                                            CheckParser = DateTime.TryParse(SideArmStatusDateAsString, out DateTimeParser);

                                            if (CheckParser)
                                                NewSideArmCivilLoads.InstallationDate = DateTimeParser;

                                            else
                                            {
                                                SideArmTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Status Date) coulumn's value must be a date",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilLoads.ToString(),
                                                    SheetName = "Side Arm info",
                                                    UniqueName = $"(Side Arm Name) : {SideArmDataTable.Rows[j]["Side Arm Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }
                                    }

                                    else
                                        NewSideArmCivilLoads.InstallationDate = DateTime.Now;

                                    _unitOfWork.CivilLoadsRepository.Add(NewSideArmCivilLoads);
                                    _unitOfWork.SaveChanges();

                                    SideArmTransaction.Complete();
                                }
                                catch (Exception err)
                                {
                                    SideArmTransaction.Dispose();

                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                    {
                                        CreatedAt = DateTime.Now,
                                        ErrMsg = err.Message,
                                        IsDeleted = false,
                                        IsLib = false,
                                        RefTable = Helpers.Constants.TablesNames.TLIsideArm.ToString(),
                                        SheetName = "Side Arm info",
                                        UniqueName = $"(Side Arm Name) : {SideArmDataTable.Rows[j]["Side Arm Name"].ToString()}"
                                    };

                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                    _unitOfWork.SaveChanges();

                                    continue;
                                }
                            }
                        }

                    ////////////////////////////////////////////////////////////
                    /////////////////// MW Dish //////////////////////////////////
                    ////////////////////////////////////////////////////////////

                    MW_Dish:

                        ExcelWorksheet MW_DishSheet = package.Workbook.Worksheets.FirstOrDefault(x => x.Name.ToLower() == "MW Dish Info".ToLower());
                        int MW_DishRows = 0;
                        try
                        {
                            MW_DishRows = MW_DishSheet.Dimension.End.Row;
                        }
                        catch (NullReferenceException)
                        {
                            goto MW_BU;
                        }
                        int MW_DishColumns = MW_DishSheet.Dimension.End.Column;

                        DataTable MW_DishDataTable = new DataTable();
                        List<string> MW_DishSheetColumn = new List<string>();

                        for (int i = 1; i <= MW_DishColumns; i++)
                        {
                            string ColName = MW_DishSheet.Cells[1, i].Value.ToString().Trim();
                            ColName = Regex.Replace(ColName, @"\s+", " ");

                            MW_DishSheetColumn.Add(ColName);
                            MW_DishDataTable.Columns.Add(ColName);
                        }

                        for (int i = 2; i <= MW_DishRows; i++)
                        {
                            DataRow MW_DishDataRow = MW_DishDataTable.NewRow();
                            for (int j = 1; j <= MW_DishColumns; j++)
                            {
                                string ColName = MW_DishSheet.Cells[1, j].Value.ToString().Trim();
                                ColName = Regex.Replace(ColName, @"\s+", " ");

                                object Value = MW_DishSheet.Cells[i, j].Value;
                                if (Value != null)
                                {
                                    string ValueAsString = Value.ToString().Trim();
                                    ValueAsString = Regex.Replace(ValueAsString, @"\s+", " ");

                                    Value = ValueAsString;
                                    MW_DishDataRow[ColName] = Value;
                                }
                                else
                                {
                                    MW_DishDataRow[ColName] = Value;
                                }
                            }
                            MW_DishDataTable.Rows.Add(MW_DishDataRow);
                        }

                        //
                        // Dynamic Attributes For MW_Dish..
                        //

                        int MW_DishTableNameId = TablesName.FirstOrDefault(x =>
                           x.TableName.ToLower() == Helpers.Constants.TablesNames.TLImwDish.ToString().ToLower()).Id;

                        List<TLIdynamicAtt> MW_DishMissedAttributeCSV = new List<TLIdynamicAtt>()
                        {
                            new TLIdynamicAtt
                            {
                                Key = "Related Plan",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_DishTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Far End Site Name",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_DishTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Created By",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_DishTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Modified",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "DateTime".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_DishTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Modified By",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_DishTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Status Date",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "DateTime".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_DishTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "user",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_DishTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Current Plan",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_DishTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "collect plan",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_DishTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Read",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_DishTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Title",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_DishTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "plan type",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_DishTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "F40",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_DishTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "F41",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_DishTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "F42",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_DishTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "F43",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_DishTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "F44",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_DishTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "F45",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_DishTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "F46",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_DishTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            }
                        };

                        List<TLIdynamicAtt> MW_DishAllDynamicAttribute = _unitOfWork.DynamicAttRepository
                            .GetWhere(x => x.tablesNamesId == MW_DishTableNameId).ToList();

                        List<TLIdynamicAtt> MW_DishMissedAttributes = MW_DishMissedAttributeCSV
                         .Except(MW_DishAllDynamicAttribute, new TLIdynamicAttComparer())
                         .ToList();

                        _unitOfWork.DynamicAttRepository.AddRange(MW_DishMissedAttributes);
                        _unitOfWork.SaveChanges();

                        for (int j = 0; j <= MW_DishDataTable.Rows.Count - 1; j++)
                        {
                            using (TransactionScope MW_DishTransaction = new TransactionScope(TransactionScopeOption.Required,
                                new System.TimeSpan(0, 15, 0)))
                            {
                                try
                                {
                                    //
                                    // Library Information..
                                    // 

                                    string MW_DishLibraryModel = MW_DishDataTable.Rows[j]["MW-Dish-Model"].ToString();
                                    int MW_DishLibraryId = 0;
                                    float MW_DishHeight = 0;

                                    if (!string.IsNullOrEmpty(MW_DishLibraryModel))
                                    {
                                        TLImwDishLibrary CheckMW_DishModel = _unitOfWork.MW_DishLibraryRepository
                                            .GetWhereFirst(x => x.Model.ToLower() == MW_DishLibraryModel.ToLower() && !x.Deleted);

                                        if (CheckMW_DishModel != null)
                                        {
                                            MW_DishLibraryId = CheckMW_DishModel.Id;
                                        }
                                        else
                                        {
                                            MW_DishTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(MW-Dish-Model) coulumn's value: ({MW_DishLibraryModel}) doesn't exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = true,
                                                RefTable = Helpers.Constants.TablesNames.TLImwDishLibrary.ToString(),
                                                SheetName = "MW Dish Info",
                                                UniqueName = $"(MW Dish Name) : {MW_DishDataTable.Rows[j]["MW Dish Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        MW_DishTransaction.Dispose();

                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                        {
                                            CreatedAt = DateTime.Now,
                                            ErrMsg = $"(MW-Dish-Model) coulumn's value can't be null or empty",
                                            IsDeleted = false,
                                            IsLib = true,
                                            RefTable = Helpers.Constants.TablesNames.TLImwDishLibrary.ToString(),
                                            SheetName = "MW Dish Info",
                                            UniqueName = $"(MW Dish Name) : {MW_DishDataTable.Rows[j]["MW Dish Name"]}"
                                        };

                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                        _unitOfWork.SaveChanges();

                                        continue;
                                    }

                                    //
                                    // Installation Information
                                    //

                                    TLImwDish NewMW_DishEntity = new TLImwDish();

                                    string MW_Dish_SiteCodeAfterCheck = string.Empty;
                                    string MW_Dish_SiteCode = MW_DishDataTable.Rows[j]["Site Code"].ToString();
                                    string MW_Dish_SiteName = MW_DishDataTable.Rows[j]["Site Name"].ToString();
                                    string MW_Dish_Site = MW_DishDataTable.Rows[j]["Site"].ToString();

                                    if (!string.IsNullOrEmpty(MW_Dish_SiteCode))
                                    {
                                        TLIsite CheckSiteCode = _unitOfWork.SiteRepository
                                            .GetWhereFirst(x => x.SiteCode.ToLower() == MW_Dish_SiteCode.ToLower());

                                        if (CheckSiteCode == null)
                                        {
                                            MW_DishTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Site Code) coulumn's value: ({MW_Dish_SiteCode}) doesn't exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                                SheetName = "MW Dish Info",
                                                UniqueName = $"(MW Dish Name) : {MW_DishDataTable.Rows[j]["MW Dish Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        MW_Dish_SiteCodeAfterCheck = MW_Dish_SiteCode;
                                    }
                                    else if (!string.IsNullOrEmpty(MW_Dish_SiteName))
                                    {
                                        TLIsite CheckSiteCode = _unitOfWork.SiteRepository
                                            .GetWhereFirst(x => x.SiteName.ToLower() == MW_Dish_SiteName.ToLower());

                                        if (CheckSiteCode == null)
                                        {
                                            MW_DishTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Site Name) coulumn's value: ({MW_Dish_SiteName}) doesn't exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                                SheetName = "MW Dish Info",
                                                UniqueName = $"(MW Dish Name) : {MW_DishDataTable.Rows[j]["MW Dish Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        MW_Dish_SiteCodeAfterCheck = CheckSiteCode.SiteCode;
                                    }
                                    else if (!string.IsNullOrEmpty(MW_Dish_Site))
                                    {
                                        TLIsite CheckSiteCode = _unitOfWork.SiteRepository
                                            .GetWhereFirst(x => x.SiteCode.ToLower() == MW_Dish_Site.ToLower());

                                        if (CheckSiteCode == null)
                                        {
                                            MW_DishTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Site) coulumn's value: ({MW_Dish_Site}) doesn't exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                                SheetName = "MW Dish Info",
                                                UniqueName = $"(MW Dish Name) : {MW_DishDataTable.Rows[j]["MW Dish Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        MW_Dish_SiteCodeAfterCheck = MW_Dish_Site;
                                    }
                                    else
                                    {
                                        MW_DishTransaction.Dispose();

                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                        {
                                            CreatedAt = DateTime.Now,
                                            ErrMsg = $"One of those columns must have a value (Site Code, Site Name, Site)",
                                            IsDeleted = false,
                                            IsLib = false,
                                            RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                            SheetName = "MW Dish Info",
                                            UniqueName = $"(MW Dish Name) : {MW_DishDataTable.Rows[j]["MW Dish Name"]}"
                                        };

                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                        _unitOfWork.SaveChanges();

                                        continue;
                                    }

                                    string MW_DishCivilSteelName = MW_DishDataTable.Rows[j]["Civil Steel Name"].ToString();
                                    string MW_DishCivilType = MW_DishDataTable.Rows[j]["type"].ToString();
                                    if (string.IsNullOrEmpty(MW_DishCivilSteelName))
                                    {
                                        MW_DishTransaction.Dispose();

                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                        {
                                            CreatedAt = DateTime.Now,
                                            ErrMsg = $"(Civil Steel Name) column's value: ({MW_DishCivilSteelName}) can't be null or empty",
                                            IsDeleted = false,
                                            IsLib = false,
                                            RefTable = Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString(),
                                            SheetName = "MW Dish Info",
                                            UniqueName = $"(MW Dish Name) : {MW_DishDataTable.Rows[j]["MW Dish Name"]}"
                                        };

                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                        _unitOfWork.SaveChanges();

                                        continue;
                                    }

                                    string MW_DishCheckSideArmName = MW_DishDataTable.Rows[j]["Side Arm Name"].ToString();
                                    string MW_DishLegName = MW_DishDataTable.Rows[j]["Leg name"].ToString();
                                    int? MW_DishSideArmId = null;
                                    int? MW_DishLegId = null;
                                    int MW_DishAllCivilInstId = 0;
                                    int? MW_DishCivilSteelSupportCategoryId = 0;

                                    if (string.IsNullOrEmpty(MW_DishCheckSideArmName))
                                    {
                                        if (string.IsNullOrEmpty(MW_DishLegName))
                                        {
                                            MW_DishTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"One of those columns must have a value (Side Arm Name, Leg name)",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIcivilLoads.ToString(),
                                                SheetName = "MW Dish Info",
                                                UniqueName = $"(MW Dish Name) : {MW_DishDataTable.Rows[j]["MW Dish Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        TLIleg CheckMW_DishLegIfExist = _unitOfWork.LegRepository
                                            .GetWhereFirst(x => x.CiviLegName.ToLower() == MW_DishLegName.ToLower());

                                        if (CheckMW_DishLegIfExist == null)
                                        {
                                            MW_DishTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Leg name) column's value: ({MW_DishLegName}) doesn't exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIcivilLoads.ToString(),
                                                SheetName = "MW Dish Info",
                                                UniqueName = $"(MW Dish Name) : {MW_DishDataTable.Rows[j]["MW Dish Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        TLIcivilSiteDate CheckIfLegCivilDoesExistInSite = _unitOfWork.CivilSiteDateRepository
                                            .GetIncludeWhereFirst(x => !x.Dismantle && x.SiteCode.ToLower() == MW_Dish_SiteCodeAfterCheck.ToLower() &&
                                                x.allCivilInst.civilWithLegsId != null ?
                                                    x.allCivilInst.civilWithLegsId.Value == CheckMW_DishLegIfExist.Id : false,
                                                        x => x.allCivilInst, x => x.allCivilInst.civilWithLegs);

                                        if (CheckIfLegCivilDoesExistInSite == null)
                                        {
                                            MW_DishTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Leg name) column's value: ({MW_DishLegName}) is intalled in this " +
                                                    $"Tower: ({CheckIfLegCivilDoesExistInSite.allCivilInst.civilWithLegs.Name})" +
                                                    $"and doesn't exist in this site: ({MW_Dish_SiteCodeAfterCheck})",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIcivilSiteDate.ToString(),
                                                SheetName = "MW Dish Info",
                                                UniqueName = $"(MW Dish Name) : {MW_DishDataTable.Rows[j]["MW Dish Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        MW_DishLegId = CheckMW_DishLegIfExist.Id;
                                    }
                                    else
                                    {
                                        TLIcivilLoads CheckSideArmNameIfExistInTLIS = null;

                                        if (MW_DishCivilType.ToLower() == "Tower".ToLower())
                                        {
                                            CheckSideArmNameIfExistInTLIS = _unitOfWork.CivilLoadsRepository
                                                .GetIncludeWhereFirst(x => !x.Dismantle && x.SiteCode.ToLower() == MW_Dish_SiteCodeAfterCheck.ToLower() &&
                                                    (x.sideArmId != null ? (!x.sideArm.Draft &&
                                                        x.sideArm.Name.ToLower() == MW_DishCheckSideArmName.ToLower()) : false) &&
                                                    (x.allCivilInst.civilWithLegsId != null ?
                                                        x.allCivilInst.civilWithLegs.Name.ToLower() == MW_DishCivilSteelName.ToLower() : false),
                                                            x => x.sideArm, x => x.allCivilInst, x => x.allCivilInst.civilWithLegs, x => x.allCivilInst.civilWithLegs.CivilWithLegsLib);

                                            if (CheckSideArmNameIfExistInTLIS != null)
                                                MW_DishCivilSteelSupportCategoryId = CheckSideArmNameIfExistInTLIS.allCivilInst.civilWithLegs.CivilWithLegsLib.civilSteelSupportCategoryId;
                                        }
                                        else if (MW_DishCivilType.ToLower() == "Mast".ToLower())
                                        {
                                            CheckSideArmNameIfExistInTLIS = _unitOfWork.CivilLoadsRepository
                                                .GetIncludeWhereFirst(x => !x.Dismantle && x.SiteCode.ToLower() == MW_Dish_SiteCodeAfterCheck.ToLower() &&
                                                    (x.sideArmId != null ? (!x.sideArm.Draft &&
                                                        x.sideArm.Name.ToLower() == MW_DishCheckSideArmName.ToLower()) : false) &&
                                                    (x.allCivilInst.civilWithoutLegId != null ?
                                                        (x.allCivilInst.civilWithoutLeg.Name.ToLower() == MW_DishCivilSteelName.ToLower() &&
                                                        x.allCivilInst.civilWithoutLeg.CivilWithoutlegsLib.CivilSteelSupportCategory.Name.ToLower() ==
                                                            Helpers.Constants.CivilWithoutLegCategories.Mast.ToString().ToLower()) : false),
                                                                x => x.sideArm, x => x.allCivilInst, x => x.allCivilInst.civilWithoutLeg, x => x.allCivilInst.civilWithoutLeg.CivilWithoutlegsLib);

                                            if (CheckSideArmNameIfExistInTLIS != null)
                                                MW_DishCivilSteelSupportCategoryId = CheckSideArmNameIfExistInTLIS.allCivilInst.civilWithoutLeg.CivilWithoutlegsLib.CivilSteelSupportCategoryId;
                                        }
                                        else if (MW_DishCivilType.ToLower() == "Monopole".ToLower())
                                        {
                                            CheckSideArmNameIfExistInTLIS = _unitOfWork.CivilLoadsRepository
                                                .GetIncludeWhereFirst(x => !x.Dismantle && x.SiteCode.ToLower() == MW_Dish_SiteCodeAfterCheck.ToLower() &&
                                                    (x.sideArmId != null ? (!x.sideArm.Draft &&
                                                        x.sideArm.Name.ToLower() == MW_DishCheckSideArmName.ToLower()) : false) &&
                                                    (x.allCivilInst.civilWithoutLegId != null ?
                                                        (x.allCivilInst.civilWithoutLeg.Name.ToLower() == MW_DishCivilSteelName.ToLower() &&
                                                        x.allCivilInst.civilWithoutLeg.CivilWithoutlegsLib.CivilSteelSupportCategory.Name.ToLower() ==
                                                            Helpers.Constants.CivilWithoutLegCategories.Monopole.ToString().ToLower()) : false),
                                                                x => x.sideArm, x => x.allCivilInst, x => x.allCivilInst.civilWithoutLeg, x => x.allCivilInst.civilWithoutLeg.CivilWithoutlegsLib);

                                            if (CheckSideArmNameIfExistInTLIS != null)
                                                MW_DishCivilSteelSupportCategoryId = CheckSideArmNameIfExistInTLIS.allCivilInst.civilWithoutLeg.CivilWithoutlegsLib.CivilSteelSupportCategoryId;
                                        }
                                        else if (MW_DishCivilType.ToLower() == "Non Steel".ToLower())
                                        {
                                            CheckSideArmNameIfExistInTLIS = _unitOfWork.CivilLoadsRepository
                                                .GetIncludeWhereFirst(x => !x.Dismantle && x.SiteCode.ToLower() == MW_Dish_SiteCodeAfterCheck.ToLower() &&
                                                    (x.sideArmId != null ? (!x.sideArm.Draft &&
                                                        x.sideArm.Name.ToLower() == MW_DishCheckSideArmName.ToLower()) : false) &&
                                                    (x.allCivilInst.civilNonSteelId != null ?
                                                        x.allCivilInst.civilNonSteel.Name.ToLower() == MW_DishCivilSteelName.ToLower() : false),
                                                            x => x.sideArm, x => x.allCivilInst, x => x.allCivilInst.civilNonSteel);
                                        }
                                        else
                                        {
                                            MW_DishTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(type) column's value must be one of these values (Tower, Mast, Monopole, Non Steel)",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIcivilLoads.ToString(),
                                                SheetName = "MW Dish Info",
                                                UniqueName = $"(MW Dish Name) : {MW_DishDataTable.Rows[j]["MW Dish Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        if (CheckSideArmNameIfExistInTLIS == null)
                                        {
                                            MW_DishTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Side Arm Name) coulumn's value: ({MW_DishCheckSideArmName}) doesn't exist in this " +
                                                    $"Tower: ({MW_DishCivilSteelName}) on this site: ({MW_Dish_SiteCodeAfterCheck})",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIcivilLoads.ToString(),
                                                SheetName = "MW Dish Info",
                                                UniqueName = $"(MW Dish Name) : {MW_DishDataTable.Rows[j]["MW Dish Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        MW_DishAllCivilInstId = CheckSideArmNameIfExistInTLIS.allCivilInstId;
                                        MW_DishSideArmId = CheckSideArmNameIfExistInTLIS.sideArmId.Value;
                                    }

                                    string MW_DishAzimuth = MW_DishDataTable.Rows[j]["MW-Dish-AZIMUTH"].ToString();
                                    if (!string.IsNullOrEmpty(MW_DishAzimuth))
                                    {
                                        CheckParser = float.TryParse(MW_DishAzimuth, out FloatParser);

                                        if (CheckParser)
                                            NewMW_DishEntity.Azimuth = FloatParser;

                                        else
                                        {
                                            MW_DishTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(MW-Dish-AZIMUTH) coulumn's value: ({MW_DishAzimuth}) must be a number",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLImwDish.ToString(),
                                                SheetName = "MW Dish Info",
                                                UniqueName = $"(MW Dish Name) : {MW_DishDataTable.Rows[j]["MW Dish Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        MW_DishTransaction.Dispose();

                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                        {
                                            CreatedAt = DateTime.Now,
                                            ErrMsg = $"(MW-Dish-AZIMUTH) coulumn's value can't be null or empty",
                                            IsDeleted = false,
                                            IsLib = false,
                                            RefTable = Helpers.Constants.TablesNames.TLImwDish.ToString(),
                                            SheetName = "MW Dish Info",
                                            UniqueName = $"(MW Dish Name) : {MW_DishDataTable.Rows[j]["MW Dish Name"]}"
                                        };

                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                        _unitOfWork.SaveChanges();

                                        continue;
                                    }

                                    string MW_DishName = MW_DishDataTable.Rows[j]["MW Dish Name"].ToString();

                                    // Auto Complete Installation Name Attribute if it is Null Or Empty in The CSV File..

                                    if (string.IsNullOrEmpty(MW_DishName))
                                    {
                                        // Dish Name = Side Arm Name + Height + Azimuth..

                                        if (!string.IsNullOrEmpty(MW_DishCheckSideArmName))
                                        {
                                            MW_DishName = $"{MW_DishCheckSideArmName} {MW_DishHeight} {MW_DishAzimuth}";

                                            NewMW_DishEntity.Temp = MW_DishCheckSideArmName;
                                        }

                                        // Dish Name = Leg Name + Height + Azimuth..

                                        else if (!string.IsNullOrEmpty(MW_DishLegName))
                                        {
                                            MW_DishName = $"{MW_DishLegName} {MW_DishHeight} {MW_DishAzimuth}";

                                            NewMW_DishEntity.Temp = MW_DishLegName;
                                        }
                                    }

                                    // Check If MW_Dish Name is Already Exist in This Site
                                    TLIcivilLoads CheckMW_DishNameIfExistInSite = _unitOfWork.CivilLoadsRepository
                                        .GetIncludeWhereFirst(x => !x.Dismantle && x.SiteCode.ToLower() == MW_Dish_SiteCodeAfterCheck.ToLower() &&
                                            x.allLoadInstId != null ? (!x.allLoadInst.Draft && x.allLoadInst.mwDishId != null ?
                                                x.allLoadInst.mwDish.DishName.ToLower() == MW_DishName.ToLower() : false) : false,
                                                    x => x.allLoadInst, x => x.allLoadInst.mwDish);

                                    if (CheckMW_DishNameIfExistInSite != null)
                                    {
                                        MW_DishTransaction.Dispose();

                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                        {
                                            CreatedAt = DateTime.Now,
                                            ErrMsg = $"(MW Dish Name) column's value: ({MW_DishName}) is already exist in " +
                                                $"this site: ({MW_Dish_SiteCodeAfterCheck})",
                                            IsDeleted = false,
                                            IsLib = false,
                                            RefTable = Helpers.Constants.TablesNames.TLIcivilLoads.ToString(),
                                            SheetName = "MW Dish Info",
                                            UniqueName = $"(MW Dish Name) : {MW_DishDataTable.Rows[j]["MW Dish Name"]}"
                                        };

                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                        _unitOfWork.SaveChanges();

                                        continue;
                                    }

                                    NewMW_DishEntity.DishName = MW_DishName;
                                    NewMW_DishEntity.MwDishLibraryId = MW_DishLibraryId;
                                    NewMW_DishEntity.Far_End_Site_Code = MW_DishDataTable.Rows[j]["Far End Site Code"].ToString();
                                    //  NewMW_DishEntity.HBA_Surface = MW_DishDataTable.Rows[j]["HBA From Surface"].ToString();
                                    NewMW_DishEntity.Notes = MW_DishDataTable.Rows[j]["Notes"].ToString();

                                    string MW_DishSerialNumber = MW_DishDataTable.Rows[j]["Serial Number"].ToString();

                                    string MW_DishOwner = MW_DishDataTable.Rows[j]["MW Dish Owner"].ToString();
                                    if (!string.IsNullOrEmpty(MW_DishOwner))
                                    {
                                        TLIowner CheckMW_DishOwnerIfExist = _unitOfWork.OwnerRepository
                                            .GetWhereFirst(x => x.OwnerName.ToLower() == MW_DishOwner.ToLower() && !x.Deleted);

                                        if (CheckMW_DishOwnerIfExist == null)
                                        {
                                            MW_DishTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(MW Dish Owner) coulumn's value: ({MW_DishOwner}) doesn't exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIowner.ToString(),
                                                SheetName = "MW Dish Info",
                                                UniqueName = $"(MW Dish Name) : {MW_DishDataTable.Rows[j]["MW Dish Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        NewMW_DishEntity.ownerId = CheckMW_DishOwnerIfExist.Id;
                                    }

                                    string MW_DishPolarityOnLocation = MW_DishDataTable.Rows[j]["MW-Dish-POLARITY On Location"].ToString();
                                    if (!string.IsNullOrEmpty(MW_DishPolarityOnLocation))
                                    {
                                        TLIpolarityOnLocation CheckPolarityOnLocation = _unitOfWork.PolarityOnLocationRepository
                                            .GetWhereFirst(x => x.Name.ToLower() == MW_DishPolarityOnLocation.ToLower() && !x.Deleted);

                                        if (CheckPolarityOnLocation != null)
                                            NewMW_DishEntity.PolarityOnLocationId = CheckPolarityOnLocation.Id;

                                        else
                                        {
                                            TLIpolarityOnLocation NewPolarityOnLocationEntity = new TLIpolarityOnLocation();

                                            NewPolarityOnLocationEntity.Name = MW_DishPolarityOnLocation;
                                            NewPolarityOnLocationEntity.Deleted = false;
                                            NewPolarityOnLocationEntity.Disable = false;

                                            _unitOfWork.PolarityOnLocationRepository.Add(NewPolarityOnLocationEntity);
                                            _unitOfWork.SaveChanges();

                                            NewMW_DishEntity.PolarityOnLocationId = NewPolarityOnLocationEntity.Id;
                                        }
                                    }

                                    string MW_DishInstallationPlace = MW_DishDataTable.Rows[j]["MW dish-installation place"].ToString();
                                    if (!string.IsNullOrEmpty(MW_DishInstallationPlace))
                                    {
                                        TLIinstallationPlace CheckMW_DishInstallationPlace = _unitOfWork.InstallationPlaceRepository
                                            .GetWhereFirst(x => x.Name.ToLower() == MW_DishInstallationPlace.ToLower());

                                        if (CheckMW_DishInstallationPlace != null)
                                            NewMW_DishEntity.InstallationPlaceId = CheckMW_DishInstallationPlace.Id;

                                        else
                                        {
                                            TLIinstallationPlace NewInstallationPlaceEntity = new TLIinstallationPlace();
                                            NewInstallationPlaceEntity.Name = MW_DishInstallationPlace;
                                            _unitOfWork.InstallationPlaceRepository.Add(NewInstallationPlaceEntity);
                                            _unitOfWork.SaveChanges();

                                            NewMW_DishEntity.InstallationPlaceId = NewInstallationPlaceEntity.Id;
                                        }
                                    }

                                    _unitOfWork.MW_DishRepository.Add(NewMW_DishEntity);
                                    _unitOfWork.SaveChanges();

                                    //
                                    // Dynamic Information..
                                    //

                                    List<TLIdynamicAttInstValue> MW_DishDynamicValues = new List<TLIdynamicAttInstValue>();

                                    foreach (TLIdynamicAtt MissedAttribute in MW_DishMissedAttributes)
                                    {
                                        if (!string.IsNullOrEmpty(MW_DishDataTable.Rows[j][MissedAttribute.Key].ToString()))
                                        {
                                            TLIdynamicAttInstValue MissedAttributeValue = new TLIdynamicAttInstValue()
                                            {
                                                tablesNamesId = MW_DishTableNameId,
                                                disable = false,
                                                DynamicAttId = MissedAttribute.Id,
                                                InventoryId = NewMW_DishEntity.Id
                                            };

                                            if (MissedAttribute.DataType.Name.ToLower() == "string".ToLower())
                                                MissedAttributeValue.ValueString = MW_DishDataTable.Rows[j][MissedAttribute.Key].ToString();
                                            else if (MissedAttribute.DataType.Name.ToLower() == "int".ToLower() ||
                                                MissedAttribute.DataType.Name.ToLower() == "double".ToLower())
                                            {
                                                double DoubleParser = 0;

                                                CheckParser = double.TryParse(MW_DishDataTable.Rows[j][MissedAttribute.Key].ToString(), out DoubleParser);

                                                if (CheckParser)
                                                    MissedAttributeValue.ValueDouble = DoubleParser;

                                                else
                                                {
                                                    MW_DishTransaction.Dispose();

                                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                    {
                                                        CreatedAt = DateTime.Now,
                                                        ErrMsg = $"({MissedAttribute.Key}) coulumn's value: ({MW_DishDataTable.Rows[j][MissedAttribute.Key]}) must be a number",
                                                        IsDeleted = false,
                                                        IsLib = false,
                                                        RefTable = Helpers.Constants.TablesNames.TLIdynamicAttInstValue.ToString(),
                                                        SheetName = "MW Dish Info",
                                                        UniqueName = $"(MW Dish Name) : {MW_DishDataTable.Rows[j]["MW Dish Name"]}"
                                                    };

                                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                    _unitOfWork.SaveChanges();

                                                    continue;
                                                }
                                            }
                                            else if (MissedAttribute.DataType.Name.ToLower() == "boolean".ToLower())
                                            {
                                                bool BooleanParser = false;

                                                CheckParser = bool.TryParse(MW_DishDataTable.Rows[j][MissedAttribute.Key].ToString(), out BooleanParser);

                                                if (CheckParser)
                                                    MissedAttributeValue.ValueBoolean = BooleanParser;

                                                else
                                                {
                                                    MW_DishTransaction.Dispose();

                                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                    {
                                                        CreatedAt = DateTime.Now,
                                                        ErrMsg = $"({MissedAttribute.Key}) coulumn's value: ({MW_DishDataTable.Rows[j][MissedAttribute.Key]}) must be boolean (Yes/No)",
                                                        IsDeleted = false,
                                                        IsLib = false,
                                                        RefTable = Helpers.Constants.TablesNames.TLIdynamicAttInstValue.ToString(),
                                                        SheetName = "MW Dish Info",
                                                        UniqueName = $"(MW Dish Name) : {MW_DishDataTable.Rows[j]["MW Dish Name"]}"
                                                    };

                                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                    _unitOfWork.SaveChanges();

                                                    continue;
                                                }
                                            }
                                            else if (MissedAttribute.DataType.Name.ToLower() == "datetime".ToLower())
                                            {
                                                DateTime DateTimeParser = DateTime.Now;

                                                CheckParser = DateTime.TryParse(MW_DishDataTable.Rows[j][MissedAttribute.Key].ToString(), out DateTimeParser);

                                                if (CheckParser)
                                                    MissedAttributeValue.ValueDateTime = DateTimeParser;

                                                else
                                                {
                                                    MW_DishTransaction.Dispose();

                                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                    {
                                                        CreatedAt = DateTime.Now,
                                                        ErrMsg = $"({MissedAttribute.Key}) coulumn's value: ({MW_DishDataTable.Rows[j][MissedAttribute.Key]}) must be date",
                                                        IsDeleted = false,
                                                        IsLib = false,
                                                        RefTable = Helpers.Constants.TablesNames.TLIdynamicAttInstValue.ToString(),
                                                        SheetName = "MW Dish Info",
                                                        UniqueName = $"(MW Dish Name) : {MW_DishDataTable.Rows[j]["MW Dish Name"]}"
                                                    };

                                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                    _unitOfWork.SaveChanges();

                                                    continue;
                                                }
                                            }

                                            MW_DishDynamicValues.Add(MissedAttributeValue);
                                        }
                                    }
                                    if (MW_DishDynamicValues.Count() > 0)
                                    {
                                        _unitOfWork.DynamicAttInstValueRepository.AddRange(MW_DishDynamicValues);
                                        _unitOfWork.SaveChanges();
                                    }

                                    //
                                    // Logistical Information..
                                    //

                                    string MW_DishVendor = MW_DishDataTable.Rows[j]["MW-Dish-Vendor"].ToString();

                                    if (!string.IsNullOrEmpty(MW_DishVendor))
                                        AddLogistical(MW_DishVendor, "Vendor", "MW", "TLImwDishLibrary", NewMW_DishEntity.MwDishLibraryId);

                                    //
                                    // All Load Installation Information..
                                    //

                                    TLIallLoadInst NewMW_DishAllLoadInstEntity = new TLIallLoadInst();

                                    NewMW_DishAllLoadInstEntity.mwDishId = NewMW_DishEntity.Id;

                                    string MW_DishActive = MW_DishDataTable.Rows[j]["Active component"].ToString();
                                    NewMW_DishAllLoadInstEntity.Active = true;

                                    if (MW_DishActive.ToLower() != "Yes".ToLower())
                                        NewMW_DishAllLoadInstEntity.Active = false;

                                    string MW_DishCurrentStatus = MW_DishDataTable.Rows[j]["Current Status"].ToString();
                                    if (!string.IsNullOrEmpty(MW_DishCurrentStatus))
                                    {
                                        TLIitemStatus CheckMW_DishCurrentStatus = _unitOfWork.ItemStatusRepository
                                            .GetWhereFirst(x => x.Name.ToLower() == MW_DishCurrentStatus.ToLower() && !x.Deleted);

                                        if (CheckMW_DishCurrentStatus != null)
                                            NewMW_DishAllLoadInstEntity.ItemStatusId = CheckMW_DishCurrentStatus.Id;

                                        else
                                        {
                                            TLIitemStatus NewItemStatusEntity = new TLIitemStatus();

                                            NewItemStatusEntity.Name = MW_DishCurrentStatus;
                                            NewItemStatusEntity.Deleted = false;
                                            NewItemStatusEntity.Deleted = false;

                                            _unitOfWork.ItemStatusRepository.Add(NewItemStatusEntity);
                                            _unitOfWork.SaveChanges();

                                            NewMW_DishAllLoadInstEntity.ItemStatusId = NewItemStatusEntity.Id;
                                        }
                                    }

                                    _unitOfWork.AllLoadInstRepository.Add(NewMW_DishAllLoadInstEntity);
                                    _unitOfWork.SaveChanges();

                                    TLIcivilLoads NewMW_DishCivilLoadsEntity = new TLIcivilLoads();

                                    NewMW_DishCivilLoadsEntity.allLoadInstId = NewMW_DishAllLoadInstEntity.Id;
                                    NewMW_DishCivilLoadsEntity.SiteCode = MW_Dish_SiteCodeAfterCheck;
                                    NewMW_DishCivilLoadsEntity.sideArmId = MW_DishSideArmId;
                                    NewMW_DishCivilLoadsEntity.legId = MW_DishLegId;
                                    NewMW_DishCivilLoadsEntity.allCivilInstId = MW_DishAllCivilInstId;

                                    string MW_DishCreated = MW_DishDataTable.Rows[j]["Created"].ToString();
                                    if (!string.IsNullOrEmpty(MW_DishCreated))
                                    {
                                        DateTime DateTimeParser = DateTime.Now;

                                        CheckParser = DateTime.TryParse(MW_DishCreated, out DateTimeParser);

                                        if (CheckParser)
                                            NewMW_DishCivilLoadsEntity.InstallationDate = DateTimeParser;

                                        else
                                            NewMW_DishCivilLoadsEntity.InstallationDate = DateTime.Now;
                                    }
                                    else
                                        NewMW_DishCivilLoadsEntity.InstallationDate = DateTime.Now;

                                    _unitOfWork.CivilLoadsRepository.Add(NewMW_DishCivilLoadsEntity);
                                    _unitOfWork.SaveChanges();

                                    MW_DishTransaction.Complete();
                                }
                                catch (Exception err)
                                {
                                    MW_DishTransaction.Dispose();

                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                    {
                                        CreatedAt = DateTime.Now,
                                        ErrMsg = err.Message,
                                        IsDeleted = false,
                                        IsLib = false,
                                        RefTable = Helpers.Constants.TablesNames.TLImwDish.ToString(),
                                        SheetName = "MW Dish Info",
                                        UniqueName = $"(MW Dish Name) : {MW_DishDataTable.Rows[j]["MW Dish Name"]}"
                                    };

                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                    _unitOfWork.SaveChanges();

                                    continue;
                                }
                            }
                        }

                    ////////////////////////////////////////////////////////////
                    /////////////////// MW BU //////////////////////////////////
                    ////////////////////////////////////////////////////////////

                    MW_BU:

                        ExcelWorksheet MW_BUSheet = package.Workbook.Worksheets.FirstOrDefault(x => x.Name.ToLower() == "Branching Unit Info".ToLower());
                        int MW_BURows = 0;
                        try
                        {
                            MW_BURows = MW_BUSheet.Dimension.End.Row;
                        }
                        catch (NullReferenceException)
                        {
                            goto RadioAntenna;
                        }
                        int MW_BUColumns = MW_BUSheet.Dimension.End.Column;

                        DataTable MW_BUDataTable = new DataTable();
                        List<string> MW_BUSheetColumn = new List<string>();

                        for (int i = 1; i <= MW_BUColumns; i++)
                        {
                            string ColName = MW_BUSheet.Cells[1, i].Value.ToString().Trim();
                            ColName = Regex.Replace(ColName, @"\s+", " ");

                            MW_BUSheetColumn.Add(ColName);
                            MW_BUDataTable.Columns.Add(ColName);
                        }

                        for (int i = 2; i <= MW_BURows; i++)
                        {
                            DataRow MW_BUDataRow = MW_BUDataTable.NewRow();
                            for (int j = 1; j <= MW_BUColumns; j++)
                            {
                                string ColName = MW_BUSheet.Cells[1, j].Value.ToString().Trim();
                                ColName = Regex.Replace(ColName, @"\s+", " ");

                                object Value = MW_BUSheet.Cells[i, j].Value;
                                if (Value != null)
                                {
                                    string ValueAsString = Value.ToString().Trim();
                                    ValueAsString = Regex.Replace(ValueAsString, @"\s+", " ");

                                    Value = ValueAsString;
                                    MW_BUDataRow[ColName] = Value;
                                }
                                else
                                {
                                    MW_BUDataRow[ColName] = Value;
                                }
                            }
                            MW_BUDataTable.Rows.Add(MW_BUDataRow);
                        }

                        //
                        // Dynamic Attribute For MW_BU..
                        //

                        int MW_BUTableNameId = TablesName.FirstOrDefault(x =>
                            x.TableName.ToLower() == Helpers.Constants.TablesNames.TLImwBU.ToString().ToLower()).Id;

                        List<TLIdynamicAtt> MW_BUMissedAttributeCSV = new List<TLIdynamicAtt>()
                        {
                            new TLIdynamicAtt
                            {
                                Key = "Current Plan",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_BUTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Related Plan",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_BUTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "user",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_BUTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "collect plan",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_BUTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Read",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_BUTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Created",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "DateTime".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_BUTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Created By",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_BUTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Modified",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "DateTime".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_BUTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Modified By",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_BUTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Cascaded BU",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_BUTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            }
                        };

                        List<TLIdynamicAtt> MW_BUAllDynamicAttribute = _unitOfWork.DynamicAttRepository
                            .GetWhere(x => x.tablesNamesId == MW_BUTableNameId).ToList();

                        List<TLIdynamicAtt> MW_BUMissedAttributes = MW_BUMissedAttributeCSV.Except(MW_BUAllDynamicAttribute).ToList();

                        _unitOfWork.DynamicAttRepository.AddRange(MW_BUMissedAttributes);
                        _unitOfWork.SaveChanges();

                        for (int j = 0; j <= MW_BUDataTable.Rows.Count - 1; j++)
                        {
                            using (TransactionScope MW_BUTransaction = new TransactionScope(TransactionScopeOption.Required,
                                new System.TimeSpan(0, 15, 0)))
                            {
                                try
                                {
                                    //
                                    // Library Information..
                                    //

                                    string BULibraryModel = MW_BUDataTable.Rows[j]["Branching Unit Model"].ToString();
                                    int BULibraryId = 0;
                                    if (!string.IsNullOrEmpty(BULibraryModel))
                                    {
                                        TLImwBULibrary CheckBranchingUnitModel = _unitOfWork.MW_BULibraryRepository
                                            .GetWhereFirst(x => x.Model.ToLower() == BULibraryModel.ToLower() && !x.Deleted);

                                        if (CheckBranchingUnitModel != null)
                                        {
                                            BULibraryId = CheckBranchingUnitModel.Id;
                                        }
                                        else
                                        {
                                            MW_BUTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Branching Unit Model) coulumn's value: ({BULibraryModel}) doesn't exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = true,
                                                RefTable = Helpers.Constants.TablesNames.TLImwBULibrary.ToString(),
                                                SheetName = "Branching Unit Info",
                                                UniqueName = $"(Branching Unit Name) : {MW_BUDataTable.Rows[j]["Branching Unit Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        MW_BUTransaction.Dispose();

                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                        {
                                            CreatedAt = DateTime.Now,
                                            ErrMsg = $"(Branching Unit Model) coulumn's value can't be null or empty",
                                            IsDeleted = false,
                                            IsLib = true,
                                            RefTable = Helpers.Constants.TablesNames.TLImwBULibrary.ToString(),
                                            SheetName = "Branching Unit Info",
                                            UniqueName = $"(Branching Unit Name) : {MW_BUDataTable.Rows[j]["Branching Unit Name"]}"
                                        };

                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                        _unitOfWork.SaveChanges();

                                        continue;
                                    }

                                    //
                                    // Installation Information..
                                    //

                                    TLImwBU NewMW_BUEntity = new TLImwBU();

                                    string BU_SiteCodeAfterCheck = string.Empty;
                                    string BU_SiteCode = MW_BUDataTable.Rows[j]["Site Code"].ToString();
                                    string BU_SiteName = MW_BUDataTable.Rows[j]["Site Name"].ToString();

                                    if (!string.IsNullOrEmpty(BU_SiteCode))
                                    {
                                        TLIsite CheckSiteCode = _unitOfWork.SiteRepository
                                            .GetWhereFirst(x => x.SiteCode.ToLower() == BU_SiteCode.ToLower());

                                        if (CheckSiteCode == null)
                                        {
                                            MW_BUTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Site Code) coulumn's value: ({BU_SiteCode}) doesn't exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                                SheetName = "Branching Unit Info",
                                                UniqueName = $"(Branching Unit Name) : {MW_BUDataTable.Rows[j]["Branching Unit Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        BU_SiteCodeAfterCheck = BU_SiteCode;
                                    }
                                    else if (!string.IsNullOrEmpty(BU_SiteName))
                                    {
                                        TLIsite CheckSiteCode = _unitOfWork.SiteRepository
                                            .GetWhereFirst(x => x.SiteName.ToLower() == BU_SiteName.ToLower());

                                        if (CheckSiteCode == null)
                                        {
                                            MW_BUTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Site Name) coulumn's value: ({BU_SiteName}) doesn't exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                                SheetName = "Branching Unit Info",
                                                UniqueName = $"(Branching Unit Name) : {MW_BUDataTable.Rows[j]["Branching Unit Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        BU_SiteCodeAfterCheck = CheckSiteCode.SiteCode;
                                    }
                                    else
                                    {
                                        MW_BUTransaction.Dispose();

                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                        {
                                            CreatedAt = DateTime.Now,
                                            ErrMsg = $"One of those columns must have a value (Site Code, Site Name)",
                                            IsDeleted = false,
                                            IsLib = false,
                                            RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                            SheetName = "Branching Unit Info",
                                            UniqueName = $"(Branching Unit Name) : {MW_BUDataTable.Rows[j]["Branching Unit Name"]}"
                                        };

                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                        _unitOfWork.SaveChanges();

                                        continue;
                                    }

                                    string MU_BUName = MW_BUDataTable.Rows[j]["Branching Unit Name"].ToString();

                                    string MW_BUCheckHeight = MW_BUDataTable.Rows[j]["Branching Unit-Height (m)"].ToString();
                                    float MW_BUCheckHeightValue = 0;

                                    if (!string.IsNullOrEmpty(MW_BUCheckHeight))
                                    {
                                        CheckParser = float.TryParse(MW_BUCheckHeight, out FloatParser);

                                        if (CheckParser)
                                            MW_BUCheckHeightValue = FloatParser;

                                        else
                                        {
                                            MW_BUTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Branching Unit-Height (m)) coulumn's value: ({MW_BUCheckHeight}) must be a number",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLImwBU.ToString(),
                                                SheetName = "Branching Unit Info",
                                                UniqueName = $"(Branching Unit Name) : {MW_BUDataTable.Rows[j]["Branching Unit Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }
                                    }

                                    string MW_BUCheckSideArmName = MW_BUDataTable.Rows[j]["Side Arm Name"].ToString();
                                    int MW_BUSideArmId = 0;

                                    if (!string.IsNullOrEmpty(MW_BUCheckSideArmName))
                                    {
                                        TLIcivilLoads CheckSideArmNameIfExistInTLIS = _unitOfWork.CivilLoadsRepository
                                            .GetIncludeWhereFirst(x => !x.Dismantle && x.SiteCode.ToLower() == BU_SiteCodeAfterCheck.ToLower() &&
                                                x.sideArmId != null ? (x.sideArm.Name.ToLower() == MW_BUCheckSideArmName.ToLower()) : false,
                                                    x => x.sideArm);

                                        if (CheckSideArmNameIfExistInTLIS == null)
                                        {
                                            MW_BUTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Side Arm Name) coulumn's value: ({MW_BUCheckSideArmName}) doesn't exist in this " +
                                                    $"site: ({BU_SiteCodeAfterCheck})",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIsideArm.ToString(),
                                                SheetName = "Branching Unit Info",
                                                UniqueName = $"(Branching Unit Name) : {MW_BUDataTable.Rows[j]["Branching Unit Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        MW_BUSideArmId = CheckSideArmNameIfExistInTLIS.sideArmId.Value;
                                    }

                                    //
                                    // Auto Complete Installation Name Attribute if it is Null Or Empty in The CSV File..
                                    //

                                    if (string.IsNullOrEmpty(MU_BUName))
                                    {
                                        // MW_BU Name = SideArm Name + Model + Height..
                                        // This Info is From (TLIS_Analytical Study_V5_note done) Word Document..

                                        // 1. Side Arm Name..
                                        // string MW_BUCheckSideArmName = MW_BUDataTable.Rows[j]["Side Arm Name"].ToString();

                                        // 2. MW_BU Library Model..
                                        // We Have The MW_BU Library Model From Previous Section (Library Information)..
                                        // string BULibraryModel = MW_BUDataTable.Rows[j]["Branching Unit Model"].ToString();

                                        // 3. MW_BU Height..
                                        // string MW_BUCheckHeight = MW_BUDataTable.Rows[j]["Branching Unit-Height (m)"].ToString();

                                        MU_BUName = $"{MW_BUCheckSideArmName} {BULibraryModel} {MW_BUCheckHeight}";
                                    }

                                    NewMW_BUEntity.Name = MU_BUName;
                                    NewMW_BUEntity.MwBULibraryId = BULibraryId;
                                    NewMW_BUEntity.Height = MW_BUCheckHeightValue;
                                    NewMW_BUEntity.Active = true;
                                    NewMW_BUEntity.Notes = MW_BUDataTable.Rows[j]["Notes"].ToString();
                                    NewMW_BUEntity.SpaceInstallation = 0;

                                    //
                                    // Check if MW_BU Name is Already Exist in Site and Installed in The Tower..
                                    //

                                    string MW_BUTowerName = MW_BUDataTable.Rows[j]["Tower Name"].ToString();
                                    int? MW_BUCivilSupportCategoryId = 0;
                                    int MW_BUAllCivilInstId = 0;
                                    if (string.IsNullOrEmpty(MW_BUTowerName))
                                    {
                                        MW_BUTransaction.Dispose();

                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                        {
                                            CreatedAt = DateTime.Now,
                                            ErrMsg = $"(Tower Name) coulumn's value can't be null or empty",
                                            IsDeleted = false,
                                            IsLib = false,
                                            RefTable = Helpers.Constants.TablesNames.TLIcivilSiteDate.ToString(),
                                            SheetName = "Branching Unit Info",
                                            UniqueName = $"(Branching Unit Name) : {MW_BUDataTable.Rows[j]["Branching Unit Name"]}"
                                        };

                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                        _unitOfWork.SaveChanges();

                                        continue;
                                    }
                                    else
                                    {
                                        TLIcivilSiteDate CheckMW_BUTowerNameIfAlreadyExist = _unitOfWork.CivilSiteDateRepository
                                            .GetIncludeWhereFirst(x => !x.Dismantle && !x.allCivilInst.Draft && x.allCivilInst.civilWithLegsId != null ?
                                                (x.allCivilInst.civilWithLegs.Name.ToLower() == MW_BUTowerName.ToLower() &&
                                                x.SiteCode.ToLower() == BU_SiteCodeAfterCheck.ToLower()) : false,
                                                    x => x.allCivilInst, x => x.allCivilInst.civilWithLegs, x => x.allCivilInst.civilWithLegs.CivilWithLegsLib);

                                        if (CheckMW_BUTowerNameIfAlreadyExist == null)
                                        {
                                            MW_BUTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Tower Name) coulumn's value: ({MW_BUTowerName}) doesn't exist in this " +
                                                    $"site: ({BU_SiteCodeAfterCheck})",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIcivilSiteDate.ToString(),
                                                SheetName = "Branching Unit Info",
                                                UniqueName = $"(Branching Unit Name) : {MW_BUDataTable.Rows[j]["Branching Unit Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        MW_BUCivilSupportCategoryId = CheckMW_BUTowerNameIfAlreadyExist.allCivilInst.civilWithLegs
                                            .CivilWithLegsLib.civilSteelSupportCategoryId;

                                        MW_BUAllCivilInstId = CheckMW_BUTowerNameIfAlreadyExist.allCivilInstId;
                                    }

                                    TLIcivilLoads CheckMW_BUNameIfAlreadyExist = _unitOfWork.CivilLoadsRepository
                                        .GetIncludeWhereFirst(x => !x.Dismantle && !x.allCivilInst.Draft && x.SiteCode.ToLower() == BU_SiteCodeAfterCheck.ToLower() &&
                                            (x.allCivilInst.civilWithLegsId != null ?
                                                (x.allCivilInst.civilWithLegs.Name.ToLower() == MW_BUTowerName.ToLower()) : false) &&
                                            x.allLoadInstId != null ?
                                                (!x.allLoadInst.Draft && (x.allLoadInst.mwBUId != null ?
                                                    (x.allLoadInst.mwBU.Name.ToLower() == MU_BUName.ToLower()) : false)) : false,
                                                        x => x.allLoadInst, x => x.allLoadInst.mwBU, x => x.allCivilInst, x => x.allCivilInst.civilWithLegs);

                                    if (CheckMW_BUNameIfAlreadyExist != null)
                                    {
                                        MW_BUTransaction.Dispose();

                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                        {
                                            CreatedAt = DateTime.Now,
                                            ErrMsg = $"(Branching Unit Name) coulumn's value: ({MU_BUName}) is already exist in this " +
                                                $"site: ({BU_SiteCodeAfterCheck}) and installed on this tower: ({MW_BUTowerName})",
                                            IsDeleted = false,
                                            IsLib = false,
                                            RefTable = Helpers.Constants.TablesNames.TLIcivilLoads.ToString(),
                                            SheetName = "Branching Unit Info",
                                            UniqueName = $"(Branching Unit Name) : {MW_BUDataTable.Rows[j]["Branching Unit Name"]}"
                                        };

                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                        _unitOfWork.SaveChanges();

                                        continue;
                                    }

                                    // When Checking If MW_BU's Serial Number is Already Exist in TLIS
                                    // We Only Have to Check if There is a Real Installation of MW_BU on a Site (Regardless Where or On What Civil)..

                                    NewMW_BUEntity.Serial_Number = MW_BUDataTable.Rows[j]["Serial Number"].ToString();

                                    if (!string.IsNullOrEmpty(NewMW_BUEntity.Serial_Number))
                                    {
                                        TLIcivilLoads CheckMW_BUSerialNumberIfAlreadyExist = _unitOfWork.CivilLoadsRepository
                                            .GetIncludeWhereFirst(x => !x.Dismantle && !x.allCivilInst.Draft &&
                                                x.allLoadInstId != null ?
                                                    (!x.allLoadInst.Draft && (x.allLoadInst.mwBUId != null ?
                                                        (x.allLoadInst.mwBU.Serial_Number.ToLower() == NewMW_BUEntity.Serial_Number.ToLower()) : false)) : false,
                                                            x => x.allLoadInst, x => x.allLoadInst.mwBU);

                                        if (CheckMW_BUSerialNumberIfAlreadyExist != null)
                                        {
                                            MW_BUTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Serial_Number) coulumn's value: ({NewMW_BUEntity.Serial_Number}) is already exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLImwBU.ToString(),
                                                SheetName = "Branching Unit Info",
                                                UniqueName = $"(Branching Unit Name) : {MW_BUDataTable.Rows[j]["Branching Unit Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        MW_BUTransaction.Dispose();

                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                        {
                                            CreatedAt = DateTime.Now,
                                            ErrMsg = $"(Serial_Number) coulumn's value can't be null or empty",
                                            IsDeleted = false,
                                            IsLib = false,
                                            RefTable = Helpers.Constants.TablesNames.TLImwBU.ToString(),
                                            SheetName = "Branching Unit Info",
                                            UniqueName = $"(Branching Unit Name) : {MW_BUDataTable.Rows[j]["Branching Unit Name"]}"
                                        };

                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                        _unitOfWork.SaveChanges();

                                        continue;
                                    }

                                    string MW_BUNumber = MW_BUDataTable.Rows[j]["Branching Unit Number"].ToString();
                                    if (string.IsNullOrEmpty(MW_BUNumber))
                                    {
                                        //TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                        //{
                                        //    CreatedAt = DateTime.Now,
                                        //    ErrMsg = $"(Branching Unit Number) coulumn's value can't be null or empty",
                                        //    IsDeleted = false,
                                        //    IsLib = false,
                                        //    RefTable = Helpers.Constants.TablesNames.TLImwBU.ToString(),
                                        //    SheetName = "Branching Unit Info",
                                        //    UniqueName = $"(Branching Unit Name) : {MW_BUDataTable.Rows[j]["Branching Unit Name"]}"
                                        //};

                                        //_unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                        //_unitOfWork.SaveChanges();

                                        //MW_BUTransaction.Complete();

                                        //continue;
                                        NewMW_BUEntity.BUNumber = 0;
                                    }
                                    else
                                    {
                                        int IntegerParser = 0;

                                        CheckParser = int.TryParse(MW_BUNumber, out IntegerParser);

                                        if (CheckParser)
                                            NewMW_BUEntity.BUNumber = IntegerParser;

                                        else
                                        {
                                            MW_BUTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Branching Unit Number) coulumn's value: ({MW_BUDataTable.Rows[j]["Branching Unit Number"]}) must be a number",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLImwBU.ToString(),
                                                SheetName = "Branching Unit Info",
                                                UniqueName = $"(Branching Unit Name) : {MW_BUDataTable.Rows[j]["Branching Unit Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }
                                    }

                                    string MW_BUAzimuth = MW_BUDataTable.Rows[j]["Branching Unit-Azimuth"].ToString();
                                    if (string.IsNullOrEmpty(MW_BUAzimuth))
                                    {
                                        //TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                        //{
                                        //    CreatedAt = DateTime.Now,
                                        //    ErrMsg = $"(Branching Unit-Azimuth) coulumn's value can't be null or empty",
                                        //    IsDeleted = false,
                                        //    IsLib = false,
                                        //    RefTable = Helpers.Constants.TablesNames.TLImwBU.ToString(),
                                        //    SheetName = "Branching Unit Info",
                                        //    UniqueName = $"(Branching Unit Name) : {MW_BUDataTable.Rows[j]["Branching Unit Name"]}"
                                        //};

                                        //_unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                        //_unitOfWork.SaveChanges();

                                        //MW_BUTransaction.Complete();

                                        //continue;

                                        NewMW_BUEntity.Azimuth = 0;
                                    }
                                    else
                                    {
                                        CheckParser = float.TryParse(MW_BUAzimuth, out FloatParser);

                                        if (CheckParser)
                                            NewMW_BUEntity.Azimuth = FloatParser;

                                        else
                                        {
                                            MW_BUTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Branching Unit-Azimuth) coulumn's value: ({MW_BUAzimuth}) must be a number",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLImwBU.ToString(),
                                                SheetName = "Branching Unit Info",
                                                UniqueName = $"(Branching Unit Name) : {MW_BUDataTable.Rows[j]["Branching Unit Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }
                                    }

                                    string MW_BUMainDishName = MW_BUDataTable.Rows[j]["Main MW Dish Name"].ToString();
                                    if (!string.IsNullOrEmpty(MW_BUMainDishName))
                                    {
                                        TLIcivilLoads CheckMW_BUMainDishNameIfExist = _unitOfWork.CivilLoadsRepository
                                            .GetIncludeWhereFirst(x => !x.Dismantle && x.SiteCode.ToLower() == BU_SiteCodeAfterCheck.ToLower() &&
                                                (x.allCivilInst.civilWithLegsId != null ?
                                                    (x.allCivilInst.civilWithLegs.Name.ToLower() == MW_BUTowerName.ToLower()) : false) &&
                                                (x.allLoadInstId != null ?
                                                    (!x.allLoadInst.Draft &&
                                                    (x.allLoadInst.mwDishId != null ?
                                                        x.allLoadInst.mwDish.DishName.ToLower() == MW_BUMainDishName.ToLower() : false)) : false),
                                                            x => x.allLoadInst, x => x.allLoadInst.mwDish, x => x.allCivilInst
                                                            , x => x.allCivilInst.civilWithLegs);

                                        if (CheckMW_BUMainDishNameIfExist == null)
                                        {
                                            //TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            //{
                                            //    CreatedAt = DateTime.Now,
                                            //    ErrMsg = $"(Main MW Dish Name) coulumn's value: ({MW_BUMainDishName}) is not exist in this " +
                                            //        $"site: ({BU_SiteCodeAfterCheck}) and on this tower: ({MW_BUTowerName})",
                                            //    IsDeleted = false,
                                            //    IsLib = false,
                                            //    RefTable = Helpers.Constants.TablesNames.TLImwBU.ToString(),
                                            //    SheetName = "Branching Unit Info",
                                            //    UniqueName = $"(Branching Unit Name) : {MW_BUDataTable.Rows[j]["Branching Unit Name"]}"
                                            //};

                                            //_unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            //_unitOfWork.SaveChanges();

                                            //MW_BUTransaction.Complete();

                                            //continue;

                                            //NewMW_BUEntity.MainDishId = null;
                                        }
                                        else
                                        {
                                            string MW_BUSecondaryDishName = MW_BUDataTable.Rows[j]["SD MW Dish Name"].ToString();
                                            if (!string.IsNullOrEmpty(MW_BUSecondaryDishName))
                                            {
                                                TLIcivilLoads CheckMW_BUSecondaryDishNameIfExist = _unitOfWork.CivilLoadsRepository
                                                    .GetIncludeWhereFirst(x => !x.Dismantle && x.SiteCode.ToLower() == BU_SiteCodeAfterCheck.ToLower() &&
                                                        (x.allCivilInst.civilWithLegsId != null ?
                                                            (x.allCivilInst.civilWithLegs.Name.ToLower() == MW_BUTowerName.ToLower()) : false) &&
                                                        (x.allLoadInstId != null ?
                                                            (x.allLoadInst.Draft &&
                                                            (x.allLoadInst.mwDishId != null ?
                                                                x.allLoadInst.mwDish.DishName.ToLower() == MW_BUSecondaryDishName.ToLower() : false)) : false),
                                                                    x => x.allLoadInst, x => x.allLoadInst.mwDish);

                                                if (CheckMW_BUSecondaryDishNameIfExist == null)
                                                {
                                                    //TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                    //{
                                                    //    CreatedAt = DateTime.Now,
                                                    //    ErrMsg = $"(Main MW Dish Name) coulumn's value: ({MW_BUSecondaryDishName}) is not exist in this " +
                                                    //        $"site: ({BU_SiteCodeAfterCheck}) and on this tower: ({MW_BUTowerName})",
                                                    //    IsDeleted = false,
                                                    //    IsLib = false,
                                                    //    RefTable = Helpers.Constants.TablesNames.TLImwBU.ToString(),
                                                    //    SheetName = "Branching Unit Info",
                                                    //    UniqueName = $"(Branching Unit Name) : {MW_BUDataTable.Rows[j]["Branching Unit Name"]}"
                                                    //};

                                                    //_unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                    //_unitOfWork.SaveChanges();

                                                    //MW_BUTransaction.Complete();

                                                    //continue;

                                                    CheckMW_BUSecondaryDishNameIfExist = null;
                                                }
                                                else
                                                    NewMW_BUEntity.SdDishId = CheckMW_BUSecondaryDishNameIfExist.allLoadInst.mwDishId;
                                            }
                                        }
                                        //NewMW_BUEntity.MainDishId = CheckMW_BUMainDishNameIfExist.allLoadInst.mwDishId;
                                    }

                                    string MW_BUInstallationPlaceName = MW_BUDataTable.Rows[j]["Branching Unit- installation place"].ToString();
                                    if (string.IsNullOrEmpty(MW_BUInstallationPlaceName))
                                    {
                                        MW_BUTransaction.Dispose();

                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                        {
                                            CreatedAt = DateTime.Now,
                                            ErrMsg = $"(Branching Unit- installation place) coulumn's value can't be null or empty",
                                            IsDeleted = false,
                                            IsLib = false,
                                            RefTable = Helpers.Constants.TablesNames.TLImwBU.ToString(),
                                            SheetName = "Branching Unit Info",
                                            UniqueName = $"(Branching Unit Name) : {MW_BUDataTable.Rows[j]["Branching Unit Name"]}"
                                        };

                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                        _unitOfWork.SaveChanges();

                                        continue;
                                    }
                                    else
                                    {
                                        TLIinstallationPlace CheckMW_BUInstallationPlaceIfExist = _unitOfWork.InstallationPlaceRepository
                                            .GetWhereFirst(x => x.Name.ToLower() == MW_BUInstallationPlaceName.ToLower() && !x.Deleted);

                                        if (CheckMW_BUInstallationPlaceIfExist == null)
                                        {
                                            MW_BUTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Branching Unit- installation place) coulumn's value: ({MW_BUInstallationPlaceName}) doesn't exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIinstallationPlace.ToString(),
                                                SheetName = "Branching Unit Info",
                                                UniqueName = $"(Branching Unit Name) : {MW_BUDataTable.Rows[j]["Branching Unit Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        NewMW_BUEntity.InstallationPlaceId = CheckMW_BUInstallationPlaceIfExist.Id;
                                    }

                                    string MW_BUOwnerName = MW_BUDataTable.Rows[j]["Branching Unit-Owner"].ToString();
                                    if (!string.IsNullOrEmpty(MW_BUOwnerName))
                                    {
                                        TLIowner CheckMW_BUOwnerIfExist = _unitOfWork.OwnerRepository
                                            .GetWhereFirst(x => x.OwnerName.ToLower() == MW_BUOwnerName.ToLower() && !x.Deleted);

                                        if (CheckMW_BUOwnerIfExist == null)
                                        {
                                            MW_BUTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Branching Unit-Owner) coulumn's value: ({MW_BUOwnerName}) doesn't exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIowner.ToString(),
                                                SheetName = "Branching Unit Info",
                                                UniqueName = $"(Branching Unit Name) : {MW_BUDataTable.Rows[j]["Branching Unit Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        NewMW_BUEntity.OwnerId = CheckMW_BUOwnerIfExist.Id;
                                    }

                                    TLIbaseBU MW_BUBaseBU = _unitOfWork.BaseBURepository
                                        .GetWhereFirst(x => x.Name.ToLower() == "NA".ToLower());

                                    if (MW_BUBaseBU != null)
                                        NewMW_BUEntity.BaseBUId = MW_BUBaseBU.Id;
                                    else
                                    {
                                        TLIbaseBU NewBaseBUEntity = new TLIbaseBU()
                                        {
                                            Id = 0,
                                            Deleted = true,
                                            Disable = true,
                                            Name = "NA"
                                        };
                                        _unitOfWork.BaseBURepository.Add(MW_BUBaseBU);
                                        _unitOfWork.SaveChanges();

                                        NewMW_BUEntity.BaseBUId = NewBaseBUEntity.Id;
                                    }

                                    _unitOfWork.MW_BURepository.Add(NewMW_BUEntity);
                                    _unitOfWork.SaveChanges();

                                    //
                                    // Dynamic Attributes..
                                    //

                                    List<TLIdynamicAttInstValue> MW_BUDynamicValues = new List<TLIdynamicAttInstValue>();

                                    foreach (TLIdynamicAtt MissedAttribute in MW_BUMissedAttributes)
                                    {
                                        if (!string.IsNullOrEmpty(MW_BUDataTable.Rows[j][MissedAttribute.Key].ToString()))
                                        {
                                            TLIdynamicAttInstValue MissedAttributeValue = new TLIdynamicAttInstValue()
                                            {
                                                tablesNamesId = MW_BUTableNameId,
                                                disable = false,
                                                DynamicAttId = MissedAttribute.Id,
                                                InventoryId = NewMW_BUEntity.Id
                                            };

                                            if (MissedAttribute.DataType.Name.ToLower() == "string".ToLower())
                                                MissedAttributeValue.ValueString = MW_BUDataTable.Rows[j][MissedAttribute.Key].ToString();
                                            else if (MissedAttribute.DataType.Name.ToLower() == "int".ToLower() ||
                                                MissedAttribute.DataType.Name.ToLower() == "double".ToLower())
                                            {
                                                double DoubleParser = 0;

                                                CheckParser = double.TryParse(MW_BUDataTable.Rows[j][MissedAttribute.Key].ToString(), out DoubleParser);

                                                if (CheckParser)
                                                    MissedAttributeValue.ValueDouble = DoubleParser;

                                                else
                                                {
                                                    MW_BUTransaction.Dispose();

                                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                    {
                                                        CreatedAt = DateTime.Now,
                                                        ErrMsg = $"({MissedAttribute.Key}) coulumn's value: ({MW_BUDataTable.Rows[j][MissedAttribute.Key]}) must be a number",
                                                        IsDeleted = false,
                                                        IsLib = false,
                                                        RefTable = Helpers.Constants.TablesNames.TLImwBU.ToString(),
                                                        SheetName = "Branching Unit Info",
                                                        UniqueName = $"(Branching Unit Name) : {MW_BUDataTable.Rows[j]["Branching Unit Name"]}"
                                                    };

                                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                    _unitOfWork.SaveChanges();

                                                    continue;
                                                }
                                            }
                                            else if (MissedAttribute.DataType.Name.ToLower() == "boolean".ToLower())
                                            {
                                                bool BooleanParser = false;

                                                CheckParser = bool.TryParse(MW_BUDataTable.Rows[j][MissedAttribute.Key].ToString(), out BooleanParser);

                                                if (CheckParser)
                                                    MissedAttributeValue.ValueBoolean = BooleanParser;

                                                else
                                                {
                                                    MW_BUTransaction.Dispose();

                                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                    {
                                                        CreatedAt = DateTime.Now,
                                                        ErrMsg = $"({MissedAttribute.Key}) coulumn's value: ({MW_BUDataTable.Rows[j][MissedAttribute.Key]}) must be boolean (Yes/No)",
                                                        IsDeleted = false,
                                                        IsLib = false,
                                                        RefTable = Helpers.Constants.TablesNames.TLImwBU.ToString(),
                                                        SheetName = "Branching Unit Info",
                                                        UniqueName = $"(Branching Unit Name) : {MW_BUDataTable.Rows[j]["Branching Unit Name"]}"
                                                    };

                                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                    _unitOfWork.SaveChanges();

                                                    continue;
                                                }
                                            }
                                            else if (MissedAttribute.DataType.Name.ToLower() == "datetime".ToLower())
                                            {
                                                DateTime DateTimeParser = DateTime.Now;

                                                CheckParser = DateTime.TryParse(MW_BUDataTable.Rows[j][MissedAttribute.Key].ToString(), out DateTimeParser);

                                                if (CheckParser)
                                                    MissedAttributeValue.ValueDateTime = DateTimeParser;

                                                else
                                                {
                                                    MW_BUTransaction.Dispose();

                                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                    {
                                                        CreatedAt = DateTime.Now,
                                                        ErrMsg = $"({MissedAttribute.Key}) coulumn's value: ({MW_BUDataTable.Rows[j][MissedAttribute.Key]}) must be date",
                                                        IsDeleted = false,
                                                        IsLib = false,
                                                        RefTable = Helpers.Constants.TablesNames.TLImwBU.ToString(),
                                                        SheetName = "Branching Unit Info",
                                                        UniqueName = $"(Branching Unit Name) : {MW_BUDataTable.Rows[j]["Branching Unit Name"]}"
                                                    };

                                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                    _unitOfWork.SaveChanges();

                                                    continue;
                                                }
                                            }

                                            MW_BUDynamicValues.Add(MissedAttributeValue);
                                        }
                                    }
                                    if (MW_BUDynamicValues.Count() > 0)
                                    {
                                        _unitOfWork.DynamicAttInstValueRepository.AddRange(MW_BUDynamicValues);
                                        _unitOfWork.SaveChanges();
                                    }

                                    //
                                    // Ports Information..
                                    //

                                    for (int k = 0; k < 4; k++)
                                    {
                                        string CheckPort = MW_BUDataTable.Rows[j]["Port" + (k + 1).ToString() + "-TX-Frequency"].ToString();

                                        if (!string.IsNullOrEmpty(CheckPort))
                                            continue;

                                        TLImwPort mwPort = new TLImwPort()
                                        {
                                            Port_Name = "Port" + (k + 1).ToString() + "-TX-Frequency",
                                            TX_Frequency = CheckPort,
                                            MwBUId = NewMW_BUEntity.Id,
                                            MwBULibraryId = NewMW_BUEntity.MwBULibraryId
                                        };

                                        _unitOfWork.MW_PortRepository.Add(mwPort);
                                        _unitOfWork.SaveChanges();
                                    }

                                    //
                                    // All Load Installation Information..
                                    //

                                    TLIallLoadInst NewMW_BUAllLoadInstEntity = new TLIallLoadInst();

                                    NewMW_BUAllLoadInstEntity.mwBUId = NewMW_BUEntity.Id;
                                    NewMW_BUAllLoadInstEntity.Draft = false;

                                    string MW_BUCurrentStatus = MW_BUDataTable.Rows[j]["Current Status"].ToString();
                                    if (!string.IsNullOrEmpty(MW_BUCurrentStatus))
                                    {
                                        TLIitemStatus CheckItemStatusIfExist = _unitOfWork.ItemStatusRepository
                                            .GetWhereFirst(x => x.Name.ToLower() == MW_BUCurrentStatus.ToLower() && !x.Deleted);

                                        if (CheckItemStatusIfExist != null)
                                            NewMW_BUAllLoadInstEntity.ItemStatusId = CheckItemStatusIfExist.Id;

                                        else
                                        {
                                            TLIitemStatus NewItemStatusEntity = new TLIitemStatus();

                                            NewItemStatusEntity.Name = MW_BUCurrentStatus;
                                            _unitOfWork.ItemStatusRepository.Add(NewItemStatusEntity);
                                            _unitOfWork.SaveChanges();

                                            NewMW_BUAllLoadInstEntity.ItemStatusId = NewItemStatusEntity.Id;
                                        }
                                    }

                                    string MW_BUActive = MW_BUDataTable.Rows[j]["Active component"].ToString();
                                    NewMW_BUAllLoadInstEntity.Active = true;

                                    if (!string.IsNullOrEmpty(MW_BUActive))
                                    {
                                        if (MW_BUActive.ToLower() != "Yes".ToLower())
                                            NewMW_BUAllLoadInstEntity.Active = false;
                                    }

                                    _unitOfWork.AllLoadInstRepository.Add(NewMW_BUAllLoadInstEntity);
                                    _unitOfWork.SaveChanges();

                                    //
                                    // Civil Loads Information..
                                    //

                                    TLIcivilLoads NewMW_BUCivilLoadsEntity = new TLIcivilLoads();

                                    NewMW_BUCivilLoadsEntity.SiteCode = BU_SiteCodeAfterCheck;
                                    NewMW_BUCivilLoadsEntity.allLoadInstId = NewMW_BUAllLoadInstEntity.Id;
                                    NewMW_BUCivilLoadsEntity.sideArmId = MW_BUSideArmId;
                                    NewMW_BUCivilLoadsEntity.civilSteelSupportCategoryId = MW_BUCivilSupportCategoryId;
                                    NewMW_BUCivilLoadsEntity.allCivilInstId = MW_BUAllCivilInstId;
                                    NewMW_BUCivilLoadsEntity.InstallationDate = DateTime.Now;

                                    _unitOfWork.CivilLoadsRepository.Add(NewMW_BUCivilLoadsEntity);
                                    _unitOfWork.SaveChanges();

                                    MW_BUTransaction.Complete();
                                }
                                catch (Exception err)
                                {
                                    MW_BUTransaction.Dispose();

                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                    {
                                        CreatedAt = DateTime.Now,
                                        ErrMsg = err.Message,
                                        IsDeleted = false,
                                        IsLib = false,
                                        RefTable = Helpers.Constants.TablesNames.TLImwBU.ToString(),
                                        SheetName = "Branching Unit Info",
                                        UniqueName = $"(Branching Unit Name) : {MW_BUDataTable.Rows[j]["Branching Unit Name"]}"
                                    };

                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                    _unitOfWork.SaveChanges();

                                    continue;
                                }
                            }
                        }

                    ////////////////////////////////////////////////////////////
                    /////////////////// Radio Antenna //////////////////////////
                    ////////////////////////////////////////////////////////////

                    RadioAntenna:

                        ExcelWorksheet RadioAntannaSheet = package.Workbook.Worksheets.FirstOrDefault(x => x.Name.ToLower() == "Radio Antenna info".ToLower());
                        int RadioAntannaRows = 0;
                        try
                        {
                            RadioAntannaRows = RadioAntannaSheet.Dimension.End.Row;
                        }
                        catch (NullReferenceException)
                        {
                            goto MW_RFU;
                        }
                        int RadioAntannaColumns = RadioAntannaSheet.Dimension.End.Column;

                        DataTable RadioAntannaDataTable = new DataTable();
                        List<string> RadioAntannaSheetColumn = new List<string>();

                        for (int i = 1; i <= RadioAntannaColumns; i++)
                        {
                            string ColName = RadioAntannaSheet.Cells[1, i].Value.ToString().Trim();
                            ColName = Regex.Replace(ColName, @"\s+", " ");

                            RadioAntannaSheetColumn.Add(ColName);
                            RadioAntannaDataTable.Columns.Add(ColName);
                        }

                        for (int i = 2; i <= RadioAntannaRows; i++)
                        {
                            DataRow RadioAntannaDataRow = RadioAntannaDataTable.NewRow();
                            for (int j = 1; j <= RadioAntannaColumns; j++)
                            {
                                string ColName = RadioAntannaSheet.Cells[1, j].Value.ToString().Trim();
                                ColName = Regex.Replace(ColName, @"\s+", " ");

                                object Value = RadioAntannaSheet.Cells[i, j].Value;
                                if (Value != null)
                                {
                                    string ValueAsString = Value.ToString().Trim();
                                    ValueAsString = Regex.Replace(ValueAsString, @"\s+", " ");

                                    Value = ValueAsString;
                                    RadioAntannaDataRow[ColName] = Value;
                                }
                                else
                                {
                                    RadioAntannaDataRow[ColName] = Value;
                                }
                            }
                            RadioAntannaDataTable.Rows.Add(RadioAntannaDataRow);
                        }

                        //
                        // Dynamic Attributes For Radio Antenna..
                        //

                        int RadioAntennaTableNameId = TablesName.FirstOrDefault(x =>
                            x.TableName.ToLower() == Helpers.Constants.TablesNames.TLIradioAntenna.ToString().ToLower()).Id;

                        List<TLIdynamicAtt> RadioAntennaMissedAttributeCSV = new List<TLIdynamicAtt>()
                        {
                            new TLIdynamicAtt
                            {
                                Key = "Ant-Area(mm^2)",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "Double".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = RadioAntennaTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Created",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "DateTime".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = RadioAntennaTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Created By",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = RadioAntennaTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Modified",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "DateTime".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = RadioAntennaTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Modified By",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = RadioAntennaTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Related Plan",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = RadioAntennaTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "user",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = RadioAntennaTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Current Plan",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = RadioAntennaTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "collect data",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = RadioAntennaTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "H2",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "Double".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = RadioAntennaTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Title",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = RadioAntennaTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "sinarule",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = RadioAntennaTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "collect plan",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = RadioAntennaTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                        };

                        List<TLIdynamicAtt> RadioAntennaAllDynamicAttribute = _unitOfWork.DynamicAttRepository
                            .GetWhere(x => x.tablesNamesId == RadioAntennaTableNameId).ToList();

                        List<TLIdynamicAtt> RadioAntennaMissedAttributes = RadioAntennaMissedAttributeCSV
                           .Except(RadioAntennaAllDynamicAttribute, new TLIdynamicAttComparer())
                           .ToList();

                        _unitOfWork.DynamicAttRepository.AddRange(RadioAntennaMissedAttributes);
                        _unitOfWork.SaveChanges();

                    //for (int j = 0; j <= RadioAntannaDataTable.Rows.Count - 1; j++)
                    //{
                    //    using (TransactionScope RadioAntennaTransaction = new TransactionScope(TransactionScopeOption.Required,
                    //        new System.TimeSpan(0, 15, 0)))
                    //    {
                    //        try
                    //        {
                    //            //
                    //            // Library Information..
                    //            //

                    //            string RadioAntennaLibraryModel = RadioAntannaDataTable.Rows[j]["Ant-Model"].ToString();
                    //            int RadioAntennaLibraryId = 0;
                    //            if (!string.IsNullOrEmpty(RadioAntennaLibraryModel))
                    //            {
                    //                TLIradioAntennaLibrary RadioAntennaLibraryEntity = _unitOfWork.RadioAntennaLibraryRepository
                    //                    .GetWhereFirst(x => x.Model.ToLower() == RadioAntennaLibraryModel.ToLower() && !x.Deleted);

                    //                if (RadioAntennaLibraryEntity == null)
                    //                {
                    //                    RadioAntennaTransaction.Dispose();

                    //                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //                    {
                    //                        CreatedAt = DateTime.Now,
                    //                        ErrMsg = $"(Ant-Model) coulumn's value: ({RadioAntennaLibraryModel}) doesn't exist in TLIS",
                    //                        IsDeleted = false,
                    //                        IsLib = true,
                    //                        RefTable = Helpers.Constants.TablesNames.TLIradioAntennaLibrary.ToString(),
                    //                        SheetName = "Radio Antenna info",
                    //                        UniqueName = $"(Antenna Name) : {RadioAntannaDataTable.Rows[j]["Antenna Name"]}"
                    //                    };

                    //                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //                    _unitOfWork.SaveChanges();

                    //                    continue;
                    //                }
                    //                RadioAntennaLibraryId = RadioAntennaLibraryEntity.Id;

                    //                string RadioAntennaLibraryVendor = RadioAntannaDataTable.Rows[j]["Ant-Vendor"].ToString();
                    //                if (!string.IsNullOrEmpty(RadioAntennaLibraryVendor))
                    //                    AddLogistical(RadioAntannaDataTable.Rows[j]["Ant-Vendor"].ToString(), "Vendor",
                    //                        "Radio", "TLIradioAntennaLibrary", RadioAntennaLibraryId);
                    //            }
                    //            else
                    //            {
                    //                RadioAntennaTransaction.Dispose();

                    //                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //                {
                    //                    CreatedAt = DateTime.Now,
                    //                    ErrMsg = $"(Ant-Model) coulumn's value can't be null or empty",
                    //                    IsDeleted = false,
                    //                    IsLib = true,
                    //                    RefTable = Helpers.Constants.TablesNames.TLIradioAntennaLibrary.ToString(),
                    //                    SheetName = "Radio Antenna info",
                    //                    UniqueName = $"(Antenna Name) : {RadioAntannaDataTable.Rows[j]["Antenna Name"]}"
                    //                };

                    //                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //                _unitOfWork.SaveChanges();

                    //                continue;
                    //            }

                    //            string RadioAntenna_SiteCodeAfterCheck = string.Empty;
                    //            string RadioAntenna_SiteCode = RadioAntannaDataTable.Rows[j]["Site Code"].ToString();
                    //            string RadioAntenna_SiteName = RadioAntannaDataTable.Rows[j]["Site Name"].ToString();
                    //            string RadioAntenna_Site = RadioAntannaDataTable.Rows[j]["Site"].ToString();

                    //            if (!string.IsNullOrEmpty(RadioAntenna_SiteCode))
                    //            {
                    //                TLIsite CheckSiteCode = _unitOfWork.SiteRepository
                    //                    .GetWhereFirst(x => x.SiteCode.ToLower() == RadioAntenna_SiteCode.ToLower());

                    //                if (CheckSiteCode == null)
                    //                {
                    //                    RadioAntennaTransaction.Dispose();

                    //                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //                    {
                    //                        CreatedAt = DateTime.Now,
                    //                        ErrMsg = $"(Site Code) coulumn's value: ({RadioAntenna_SiteCode}) doesn't exist in TLIS",
                    //                        IsDeleted = false,
                    //                        IsLib = false,
                    //                        RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                    //                        SheetName = "Radio Antenna info",
                    //                        UniqueName = $"(Antenna Name) : {RadioAntannaDataTable.Rows[j]["Antenna Name"]}"
                    //                    };

                    //                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //                    _unitOfWork.SaveChanges();

                    //                    continue;
                    //                }

                    //                RadioAntenna_SiteCodeAfterCheck = RadioAntenna_SiteCode;
                    //            }
                    //            else if (!string.IsNullOrEmpty(RadioAntenna_SiteName))
                    //            {
                    //                TLIsite CheckSiteCode = _unitOfWork.SiteRepository
                    //                    .GetWhereFirst(x => x.SiteName.ToLower() == RadioAntenna_SiteName.ToLower());

                    //                if (CheckSiteCode == null)
                    //                {
                    //                    RadioAntennaTransaction.Dispose();

                    //                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //                    {
                    //                        CreatedAt = DateTime.Now,
                    //                        ErrMsg = $"(Site Name) coulumn's value: ({RadioAntenna_SiteName}) doesn't exist in TLIS",
                    //                        IsDeleted = false,
                    //                        IsLib = false,
                    //                        RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                    //                        SheetName = "Radio Antenna info",
                    //                        UniqueName = $"(Antenna Name) : {RadioAntannaDataTable.Rows[j]["Antenna Name"]}"
                    //                    };

                    //                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //                    _unitOfWork.SaveChanges();

                    //                    continue;
                    //                }

                    //                RadioAntenna_SiteCodeAfterCheck = CheckSiteCode.SiteCode;
                    //            }
                    //            else if (!string.IsNullOrEmpty(RadioAntenna_Site))
                    //            {
                    //                TLIsite CheckSiteCode = _unitOfWork.SiteRepository
                    //                    .GetWhereFirst(x => x.SiteCode.ToLower() == RadioAntenna_Site.ToLower());

                    //                if (CheckSiteCode == null)
                    //                {
                    //                    RadioAntennaTransaction.Dispose();

                    //                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //                    {
                    //                        CreatedAt = DateTime.Now,
                    //                        ErrMsg = $"(Site) coulumn's value: ({RadioAntenna_Site}) doesn't exist in TLIS",
                    //                        IsDeleted = false,
                    //                        IsLib = false,
                    //                        RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                    //                        SheetName = "Radio Antenna info",
                    //                        UniqueName = $"(Antenna Name) : {RadioAntannaDataTable.Rows[j]["Antenna Name"]}"
                    //                    };

                    //                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //                    _unitOfWork.SaveChanges();

                    //                    continue;
                    //                }

                    //                RadioAntenna_SiteCodeAfterCheck = RadioAntenna_Site;
                    //            }
                    //            else
                    //            {
                    //                RadioAntennaTransaction.Dispose();

                    //                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //                {
                    //                    CreatedAt = DateTime.Now,
                    //                    ErrMsg = $"One of those columns must have a value (Site Code, Site Name, Site)",
                    //                    IsDeleted = false,
                    //                    IsLib = false,
                    //                    RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                    //                    SheetName = "Radio Antenna info",
                    //                    UniqueName = $"(Antenna Name) : {RadioAntannaDataTable.Rows[j]["Antenna Name"]}"
                    //                };

                    //                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //                _unitOfWork.SaveChanges();

                    //                continue;
                    //            }

                    //            string RadioAntennaName = RadioAntannaDataTable.Rows[j]["Antenna Name"].ToString();
                    //            string RadioAntennaSideArmName = RadioAntannaDataTable.Rows[j]["Side Arm Name"].ToString();
                    //            string RadioAntennaLegName = RadioAntannaDataTable.Rows[j]["Leg name"].ToString();
                    //            string RadioAntennaHeightBaseString = RadioAntannaDataTable.Rows[j]["Antenna Height H1"].ToString();
                    //            string RadioAntennaAzimuthString = RadioAntannaDataTable.Rows[j]["Ant-Azimuth"].ToString();

                    //            float RadioAntennaHeightBase = 0;
                    //            float RadioAntennaAzimuth = 0;

                    //            if (string.IsNullOrEmpty(RadioAntennaName))
                    //            {
                    //                if (!string.IsNullOrEmpty(RadioAntennaSideArmName))
                    //                    RadioAntennaName = RadioAntennaSideArmName;

                    //                else if (!string.IsNullOrEmpty(RadioAntennaLegName))
                    //                    RadioAntennaName = RadioAntennaLegName;

                    //                else
                    //                {
                    //                    RadioAntennaTransaction.Dispose();

                    //                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //                    {
                    //                        CreatedAt = DateTime.Now,
                    //                        ErrMsg = $"When (Antenna Name) column's value is empty then " +
                    //                            $"one of those columns must have a value (Side Arm Name, Leg name)",
                    //                        IsDeleted = false,
                    //                        IsLib = false,
                    //                        RefTable = Helpers.Constants.TablesNames.TLIradioAntenna.ToString(),
                    //                        SheetName = "Radio Antenna info",
                    //                        UniqueName = $"(Antenna Name) : {RadioAntannaDataTable.Rows[j]["Antenna Name"]}"
                    //                    };

                    //                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //                    _unitOfWork.SaveChanges();

                    //                    continue;
                    //                }

                    //                if (!string.IsNullOrEmpty(RadioAntennaHeightBaseString))
                    //                {
                    //                    CheckParser = float.TryParse(RadioAntennaHeightBaseString, out FloatParser);

                    //                    if (CheckParser)
                    //                        RadioAntennaHeightBase = FloatParser;

                    //                    else
                    //                    {
                    //                        RadioAntennaTransaction.Dispose();

                    //                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //                        {
                    //                            CreatedAt = DateTime.Now,
                    //                            ErrMsg = $"(Antenna Height H1) coulumn's value: ({RadioAntennaHeightBaseString}) must be a number",
                    //                            IsDeleted = false,
                    //                            IsLib = false,
                    //                            RefTable = Helpers.Constants.TablesNames.TLIradioAntenna.ToString(),
                    //                            SheetName = "Radio Antenna info",
                    //                            UniqueName = $"(Antenna Name) : {RadioAntannaDataTable.Rows[j]["Antenna Name"]}"
                    //                        };

                    //                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //                        _unitOfWork.SaveChanges();

                    //                        continue;
                    //                    }
                    //                }
                    //                else
                    //                {
                    //                    RadioAntennaTransaction.Dispose();

                    //                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //                    {
                    //                        CreatedAt = DateTime.Now,
                    //                        ErrMsg = $"(Antenna Height H1) coulumn's value can't be null or empty",
                    //                        IsDeleted = false,
                    //                        IsLib = false,
                    //                        RefTable = Helpers.Constants.TablesNames.TLIradioAntenna.ToString(),
                    //                        SheetName = "Radio Antenna info",
                    //                        UniqueName = $"(Antenna Name) : {RadioAntannaDataTable.Rows[j]["Antenna Name"]}"
                    //                    };

                    //                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //                    _unitOfWork.SaveChanges();

                    //                    continue;
                    //                }

                    //                if (!string.IsNullOrEmpty(RadioAntennaAzimuthString))
                    //                {
                    //                    CheckParser = float.TryParse(RadioAntennaAzimuthString, out FloatParser);

                    //                    if (CheckParser)
                    //                        RadioAntennaAzimuth = FloatParser;

                    //                    else
                    //                    {
                    //                        RadioAntennaTransaction.Dispose();

                    //                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //                        {
                    //                            CreatedAt = DateTime.Now,
                    //                            ErrMsg = $"(Ant-Azimuth) coulumn's value: ({RadioAntennaHeightBaseString}) must be a number",
                    //                            IsDeleted = false,
                    //                            IsLib = false,
                    //                            RefTable = Helpers.Constants.TablesNames.TLIradioAntenna.ToString(),
                    //                            SheetName = "Radio Antenna info",
                    //                            UniqueName = $"(Antenna Name) : {RadioAntannaDataTable.Rows[j]["Antenna Name"]}"
                    //                        };

                    //                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //                        _unitOfWork.SaveChanges();

                    //                        continue;
                    //                    }
                    //                }
                    //                else
                    //                {
                    //                    RadioAntennaTransaction.Dispose();

                    //                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //                    {
                    //                        CreatedAt = DateTime.Now,
                    //                        ErrMsg = $"(Ant-Azimuth) coulumn's value can't be null or empty",
                    //                        IsDeleted = false,
                    //                        IsLib = false,
                    //                        RefTable = Helpers.Constants.TablesNames.TLIradioAntenna.ToString(),
                    //                        SheetName = "Radio Antenna info",
                    //                        UniqueName = $"(Antenna Name) : {RadioAntannaDataTable.Rows[j]["Antenna Name"]}"
                    //                    };

                    //                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //                    _unitOfWork.SaveChanges();

                    //                    continue;
                    //                }

                    //                RadioAntennaName = $"{RadioAntennaName} {RadioAntennaHeightBaseString} {RadioAntennaAzimuthString}";
                    //            }

                    //            // Check If This Radio Antenna Name is Already Exist in This Site Code..

                    //            TLIcivilLoads CheckRadioAntennaName = _unitOfWork.CivilLoadsRepository
                    //                .GetIncludeWhereFirst(x => !x.Dismantle && x.SiteCode.ToLower() == RadioAntenna_SiteCodeAfterCheck.ToLower() &&
                    //                    (x.allLoadInstId != null ? (x.allLoadInst.radioAntennaId != null ?
                    //                        (x.allLoadInst.radioAntenna.Name.ToLower() == RadioAntennaName.ToLower() && !x.allLoadInst.Draft) : false) : false),
                    //                            x => x.allLoadInst, x => x.allLoadInst.radioAntenna);

                    //            if (CheckRadioAntennaName != null)
                    //            {
                    //                RadioAntennaTransaction.Dispose();

                    //                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //                {
                    //                    CreatedAt = DateTime.Now,
                    //                    ErrMsg = $"(Antenna Name) column's value: ({RadioAntennaName}) is already exist in " +
                    //                        $"this site: ({RadioAntenna_SiteCodeAfterCheck})",
                    //                    IsDeleted = false,
                    //                    IsLib = false,
                    //                    RefTable = Helpers.Constants.TablesNames.TLIcivilLoads.ToString(),
                    //                    SheetName = "Radio Antenna info",
                    //                    UniqueName = $"(Antenna Name) : {RadioAntannaDataTable.Rows[j]["Antenna Name"]}"
                    //                };

                    //                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //                _unitOfWork.SaveChanges();

                    //                continue;
                    //            }

                    //            string RadioAntenaaCivilType = RadioAntannaDataTable.Rows[j]["type"].ToString();
                    //            string RadioAntennaCivilName = RadioAntannaDataTable.Rows[j]["Civil Steel Name"].ToString();

                    //            int RadioAntennaAllCivilInstId = 0;
                    //            int? RadioAntennaAllCivilSteelSupportCategoryId = 0;
                    //            int? RadioAntennaLegId = null;
                    //            int? RadioAntennaSideArmId = null;

                    //            if (!string.IsNullOrEmpty(RadioAntenaaCivilType))
                    //            {
                    //                if (string.IsNullOrEmpty(RadioAntennaCivilName))
                    //                {
                    //                    RadioAntennaTransaction.Dispose();

                    //                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //                    {
                    //                        CreatedAt = DateTime.Now,
                    //                        ErrMsg = $"(Civil Steel Name) column's value can't be null or empty",
                    //                        IsDeleted = false,
                    //                        IsLib = false,
                    //                        RefTable = Helpers.Constants.TablesNames.TLIradioAntenna.ToString(),
                    //                        SheetName = "Radio Antenna info",
                    //                        UniqueName = $"(Antenna Name) : {RadioAntannaDataTable.Rows[j]["Antenna Name"]}"
                    //                    };

                    //                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //                    _unitOfWork.SaveChanges();

                    //                    continue;
                    //                }

                    //                if (RadioAntenaaCivilType.ToLower() == "Tower".ToLower())
                    //                {
                    //                    TLIcivilSiteDate CheckRadioAntennaCivilName = _unitOfWork.CivilSiteDateRepository
                    //                        .GetIncludeWhereFirst(x => !x.Dismantle && !x.allCivilInst.Draft &&
                    //                            x.SiteCode.ToLower() == RadioAntenna_SiteCodeAfterCheck.ToLower() &&
                    //                            x.allCivilInst.civilWithLegsId != null ?
                    //                                (x.allCivilInst.civilWithLegs.Name.ToLower() == RadioAntennaCivilName.ToLower()) : false,
                    //                                    x => x.allCivilInst, x => x.allCivilInst.civilWithLegs, x => x.allCivilInst.civilWithLegs.CivilWithLegsLib);

                    //                    if (CheckRadioAntennaCivilName == null)
                    //                    {
                    //                        RadioAntennaTransaction.Dispose();

                    //                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //                        {
                    //                            CreatedAt = DateTime.Now,
                    //                            ErrMsg = $"(Civil Steel Name) column's value: ({RadioAntennaCivilName}) doesn't exist in" +
                    //                                $"this site: ({RadioAntenna_SiteCodeAfterCheck})",
                    //                            IsDeleted = false,
                    //                            IsLib = false,
                    //                            RefTable = Helpers.Constants.TablesNames.TLIradioAntenna.ToString(),
                    //                            SheetName = "Radio Antenna info",
                    //                            UniqueName = $"(Antenna Name) : {RadioAntannaDataTable.Rows[j]["Antenna Name"]}"
                    //                        };

                    //                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //                        _unitOfWork.SaveChanges();

                    //                        continue;
                    //                    }

                    //                    RadioAntennaAllCivilInstId = CheckRadioAntennaCivilName.allCivilInstId;
                    //                    RadioAntennaAllCivilSteelSupportCategoryId = CheckRadioAntennaCivilName.allCivilInst.civilWithLegs.CivilWithLegsLib.civilSteelSupportCategoryId;

                    //                    TLIleg CheckRadioAntennaLegName = _unitOfWork.LegRepository
                    //                        .GetWhereFirst(x => x.CiviLegName.ToLower() == RadioAntennaLegName.ToLower() &&
                    //                            x.CivilWithLegInstId == CheckRadioAntennaCivilName.allCivilInst.civilWithLegsId.Value);

                    //                    if (CheckRadioAntennaLegName != null)
                    //                    {
                    //                        RadioAntennaLegId = CheckRadioAntennaLegName.Id;
                    //                    }
                    //                }
                    //                else if (RadioAntenaaCivilType.ToLower() == "Mast".ToLower())
                    //                {
                    //                    string RadioAntennaMastCategoryName = Helpers.Constants.CivilWithoutLegCategories.Mast.ToString();

                    //                    TLIcivilSiteDate CheckRadioAntennaCivilName = _unitOfWork.CivilSiteDateRepository
                    //                        .GetIncludeWhereFirst(x => !x.Dismantle && !x.allCivilInst.Draft &&
                    //                            x.SiteCode.ToLower() == RadioAntenna_SiteCodeAfterCheck.ToLower() &&
                    //                            x.allCivilInst.civilWithoutLegId != null ?
                    //                                (x.allCivilInst.civilWithoutLeg.Name.ToLower() == RadioAntennaCivilName.ToLower() &&
                    //                                x.allCivilInst.civilWithoutLeg.CivilWithoutlegsLib.CivilWithoutLegCategory.Name.ToLower() == RadioAntennaMastCategoryName.ToLower()) : false,
                    //                                    x => x.allCivilInst, x => x.allCivilInst.civilWithoutLeg, x => x.allCivilInst.civilWithoutLeg.CivilWithoutlegsLib,
                    //                                    x => x.allCivilInst.civilWithoutLeg.CivilWithoutlegsLib.CivilWithoutLegCategory);

                    //                    if (CheckRadioAntennaCivilName == null)
                    //                    {
                    //                        RadioAntennaTransaction.Dispose();

                    //                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //                        {
                    //                            CreatedAt = DateTime.Now,
                    //                            ErrMsg = $"(Civil Steel Name) column's value: ({RadioAntennaCivilName}) doesn't exist in" +
                    //                                $"this site: ({RadioAntenna_SiteCodeAfterCheck})",
                    //                            IsDeleted = false,
                    //                            IsLib = false,
                    //                            RefTable = Helpers.Constants.TablesNames.TLIradioAntenna.ToString(),
                    //                            SheetName = "Radio Antenna info",
                    //                            UniqueName = $"(Antenna Name) : {RadioAntannaDataTable.Rows[j]["Antenna Name"]}"
                    //                        };

                    //                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //                        _unitOfWork.SaveChanges();

                    //                        continue;
                    //                    }

                    //                    RadioAntennaAllCivilInstId = CheckRadioAntennaCivilName.allCivilInstId;
                    //                    RadioAntennaAllCivilSteelSupportCategoryId = CheckRadioAntennaCivilName.allCivilInst.civilWithoutLeg.CivilWithoutlegsLib.CivilSteelSupportCategoryId;
                    //                }
                    //                else if (RadioAntenaaCivilType.ToLower() == "Monopole".ToLower())
                    //                {
                    //                    string RadioAntennaMonopoleCategoryName = Helpers.Constants.CivilWithoutLegCategories.Monopole.ToString();

                    //                    TLIcivilSiteDate CheckRadioAntennaCivilName = _unitOfWork.CivilSiteDateRepository
                    //                        .GetIncludeWhereFirst(x => !x.Dismantle && !x.allCivilInst.Draft &&
                    //                            x.SiteCode.ToLower() == RadioAntenna_SiteCodeAfterCheck.ToLower() &&
                    //                            x.allCivilInst.civilWithoutLegId != null ?
                    //                                (x.allCivilInst.civilWithoutLeg.Name.ToLower() == RadioAntennaCivilName.ToLower() &&
                    //                                x.allCivilInst.civilWithoutLeg.CivilWithoutlegsLib.CivilWithoutLegCategory.Name.ToLower() == RadioAntennaMonopoleCategoryName.ToLower()) : false,
                    //                                    x => x.allCivilInst, x => x.allCivilInst.civilWithoutLeg, x => x.allCivilInst.civilWithoutLeg.CivilWithoutlegsLib,
                    //                                    x => x.allCivilInst.civilWithoutLeg.CivilWithoutlegsLib.CivilWithoutLegCategory);

                    //                    if (CheckRadioAntennaCivilName == null)
                    //                    {
                    //                        RadioAntennaTransaction.Dispose();

                    //                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //                        {
                    //                            CreatedAt = DateTime.Now,
                    //                            ErrMsg = $"(Civil Steel Name) column's value: ({RadioAntennaCivilName}) doesn't exist in" +
                    //                                $"this site: ({RadioAntenna_SiteCodeAfterCheck})",
                    //                            IsDeleted = false,
                    //                            IsLib = false,
                    //                            RefTable = Helpers.Constants.TablesNames.TLIradioAntenna.ToString(),
                    //                            SheetName = "Radio Antenna info",
                    //                            UniqueName = $"(Antenna Name) : {RadioAntannaDataTable.Rows[j]["Antenna Name"]}"
                    //                        };

                    //                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //                        _unitOfWork.SaveChanges();

                    //                        continue;
                    //                    }

                    //                    RadioAntennaAllCivilInstId = CheckRadioAntennaCivilName.allCivilInstId;
                    //                    RadioAntennaAllCivilSteelSupportCategoryId = CheckRadioAntennaCivilName.allCivilInst.civilWithoutLeg.CivilWithoutlegsLib.CivilSteelSupportCategoryId;
                    //                }
                    //                else if (RadioAntenaaCivilType.ToLower() == "Non Steel".ToLower())
                    //                {
                    //                    TLIcivilSiteDate CheckRadioAntennaCivilName = _unitOfWork.CivilSiteDateRepository
                    //                        .GetIncludeWhereFirst(x => !x.Dismantle && !x.allCivilInst.Draft &&
                    //                            x.SiteCode.ToLower() == RadioAntenna_SiteCodeAfterCheck.ToLower() &&
                    //                            x.allCivilInst.civilNonSteelId != null ?
                    //                                (x.allCivilInst.civilNonSteel.Name.ToLower() == RadioAntennaCivilName.ToLower()) : false,
                    //                                    x => x.allCivilInst, x => x.allCivilInst.civilNonSteel);

                    //                    if (CheckRadioAntennaCivilName == null)
                    //                    {
                    //                        RadioAntennaTransaction.Dispose();

                    //                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //                        {
                    //                            CreatedAt = DateTime.Now,
                    //                            ErrMsg = $"(Civil Steel Name) column's value: ({RadioAntennaCivilName}) doesn't exist in" +
                    //                                $"this site: ({RadioAntenna_SiteCodeAfterCheck})",
                    //                            IsDeleted = false,
                    //                            IsLib = false,
                    //                            RefTable = Helpers.Constants.TablesNames.TLIradioAntenna.ToString(),
                    //                            SheetName = "Radio Antenna info",
                    //                            UniqueName = $"(Antenna Name) : {RadioAntannaDataTable.Rows[j]["Antenna Name"]}"
                    //                        };

                    //                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //                        _unitOfWork.SaveChanges();

                    //                        continue;
                    //                    }

                    //                    RadioAntennaAllCivilInstId = CheckRadioAntennaCivilName.allCivilInstId;
                    //                }
                    //                else
                    //                {
                    //                    RadioAntennaTransaction.Dispose();

                    //                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //                    {
                    //                        CreatedAt = DateTime.Now,
                    //                        ErrMsg = $"(type) column's value must be one of those values (Tower, Mast, Monopole, Non Steel)",
                    //                        IsDeleted = false,
                    //                        IsLib = false,
                    //                        RefTable = Helpers.Constants.TablesNames.TLIcivilSiteDate.ToString(),
                    //                        SheetName = "Radio Antenna info",
                    //                        UniqueName = $"(Antenna Name) : {RadioAntannaDataTable.Rows[j]["Antenna Name"]}"
                    //                    };

                    //                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //                    _unitOfWork.SaveChanges();

                    //                    continue;
                    //                }
                    //            }

                    //            if (!string.IsNullOrEmpty(RadioAntennaSideArmName))
                    //            {
                    //                TLIcivilLoads CheckRadioAntennaSideArm = _unitOfWork.CivilLoadsRepository
                    //                    .GetIncludeWhereFirst(x => !x.Dismantle && x.allCivilInstId == RadioAntennaAllCivilInstId &&
                    //                        x.SiteCode.ToLower() == RadioAntenna_SiteCodeAfterCheck.ToLower() && x.sideArmId != null ?
                    //                        (!x.sideArm.Draft && x.sideArm.Name.ToLower() == RadioAntennaSideArmName.ToLower()) : false);

                    //                if (CheckRadioAntennaSideArm == null)
                    //                {
                    //                    RadioAntennaTransaction.Dispose();

                    //                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //                    {
                    //                        CreatedAt = DateTime.Now,
                    //                        ErrMsg = $"(Side Arm Name) column's value: ({RadioAntennaSideArmName}) doesn't exist in this site: ({RadioAntenna_SiteCodeAfterCheck}) " +
                    //                            $"nor on this tower: ({RadioAntennaCivilName})",
                    //                        IsDeleted = false,
                    //                        IsLib = false,
                    //                        RefTable = Helpers.Constants.TablesNames.TLIcivilLoads.ToString(),
                    //                        SheetName = "Radio Antenna info",
                    //                        UniqueName = $"(Antenna Name) : {RadioAntannaDataTable.Rows[j]["Antenna Name"]}"
                    //                    };

                    //                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //                    _unitOfWork.SaveChanges();

                    //                    continue;
                    //                }

                    //                RadioAntennaSideArmId = CheckRadioAntennaSideArm.sideArmId;
                    //            }

                    //            //
                    //            // Installation Information..
                    //            //

                    //            string RadioAntennaSerialNumber = RadioAntannaDataTable.Rows[j]["Serial Number"].ToString();

                    //            string RadioAntennaMechanicalTiltString = RadioAntannaDataTable.Rows[j]["Ant-Mechanical-Tilt"].ToString();
                    //            float? RadioAntennaMechanicalTilt = null;
                    //            if (!string.IsNullOrEmpty(RadioAntennaMechanicalTiltString))
                    //            {
                    //                CheckParser = float.TryParse(RadioAntennaMechanicalTiltString, out FloatParser);

                    //                if (CheckParser)
                    //                    RadioAntennaMechanicalTilt = FloatParser;

                    //                else
                    //                {
                    //                    RadioAntennaTransaction.Dispose();

                    //                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //                    {
                    //                        CreatedAt = DateTime.Now,
                    //                        ErrMsg = $"(Ant-Mechanical-Tilt) coulumn's value: ({RadioAntennaMechanicalTiltString}) must be a number",
                    //                        IsDeleted = false,
                    //                        IsLib = false,
                    //                        RefTable = Helpers.Constants.TablesNames.TLIradioAntenna.ToString(),
                    //                        SheetName = "Radio Antenna info",
                    //                        UniqueName = $"(Antenna Name) : {RadioAntannaDataTable.Rows[j]["Antenna Name"]}"
                    //                    };

                    //                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //                    _unitOfWork.SaveChanges();

                    //                    continue;
                    //                }
                    //            }

                    //            string RadioAntennaHBAString = RadioAntannaDataTable.Rows[j]["HBA From Land"].ToString();
                    //            float RadioAntennaHBA = 0;
                    //            if (!string.IsNullOrEmpty(RadioAntennaHBAString))
                    //            {
                    //                CheckParser = float.TryParse(RadioAntennaHBAString, out FloatParser);

                    //                if (CheckParser)
                    //                    RadioAntennaHBA = FloatParser;

                    //                else
                    //                {
                    //                    RadioAntennaTransaction.Dispose();

                    //                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //                    {
                    //                        CreatedAt = DateTime.Now,
                    //                        ErrMsg = $"(HBA From Land) coulumn's value: ({RadioAntennaHBAString}) must be a number",
                    //                        IsDeleted = false,
                    //                        IsLib = false,
                    //                        RefTable = Helpers.Constants.TablesNames.TLIradioAntenna.ToString(),
                    //                        SheetName = "Radio Antenna info",
                    //                        UniqueName = $"(Antenna Name) : {RadioAntannaDataTable.Rows[j]["Antenna Name"]}"
                    //                    };

                    //                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //                    _unitOfWork.SaveChanges();

                    //                    continue;
                    //                }
                    //            }

                    //            // Owner
                    //            string RadioAntennaOwnerName = RadioAntannaDataTable.Rows[j]["Ant-Owner"].ToString();
                    //            int? RadioAntennaOwnerId = null;

                    //            if (!string.IsNullOrEmpty(RadioAntennaOwnerName))
                    //            {
                    //                TLIowner CheckRadioAntennaOwnerIfExist = _unitOfWork.OwnerRepository
                    //                    .GetWhereFirst(x => x.OwnerName.ToLower() == RadioAntennaOwnerName.ToLower() && !x.Deleted);

                    //                if (CheckRadioAntennaOwnerIfExist == null)
                    //                {
                    //                    RadioAntennaTransaction.Dispose();

                    //                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //                    {
                    //                        CreatedAt = DateTime.Now,
                    //                        ErrMsg = $"(Ant-Owner) coulumn's value: ({RadioAntennaOwnerName}) doesn't exist in TLIS",
                    //                        IsDeleted = false,
                    //                        IsLib = false,
                    //                        RefTable = Helpers.Constants.TablesNames.TLIowner.ToString(),
                    //                        SheetName = "Radio Antenna info",
                    //                        UniqueName = $"(Antenna Name) : {RadioAntannaDataTable.Rows[j]["Antenna Name"]}"
                    //                    };

                    //                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //                    _unitOfWork.SaveChanges();

                    //                    continue;
                    //                }

                    //                RadioAntennaOwnerId = CheckRadioAntennaOwnerIfExist.Id;
                    //            }

                    //            // Installation Place..
                    //            string RadioAntennaInstallationPlace = RadioAntannaDataTable.Rows[j]["Ant-installation place"].ToString();
                    //            int? RadioAntennaInstallationPlaceId = null;

                    //            if (!string.IsNullOrEmpty(RadioAntennaInstallationPlace))
                    //            {
                    //                TLIinstallationPlace CheckRadioAntennaInstallationPlaceIfExist = _unitOfWork.InstallationPlaceRepository
                    //                    .GetWhereFirst(x => x.Name.ToLower() == RadioAntennaInstallationPlace.ToLower() && !x.Deleted);

                    //                if (CheckRadioAntennaInstallationPlaceIfExist == null)
                    //                {
                    //                    RadioAntennaTransaction.Dispose();

                    //                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //                    {
                    //                        CreatedAt = DateTime.Now,
                    //                        ErrMsg = $"(Ant-installation place) coulumn's value: ({RadioAntennaInstallationPlace}) doesn't exist in TLIS",
                    //                        IsDeleted = false,
                    //                        IsLib = false,
                    //                        RefTable = Helpers.Constants.TablesNames.TLIinstallationPlace.ToString(),
                    //                        SheetName = "Radio Antenna info",
                    //                        UniqueName = $"(Antenna Name) : {RadioAntannaDataTable.Rows[j]["Antenna Name"]}"
                    //                    };

                    //                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //                    _unitOfWork.SaveChanges();

                    //                    continue;
                    //                }

                    //                RadioAntennaInstallationPlaceId = CheckRadioAntennaInstallationPlaceIfExist.Id;
                    //            }

                    //            //TLIradioAntenna NewRadioAntennaEntity = new TLIradioAntenna()
                    //            //{
                    //            //    Name = RadioAntennaName,
                    //            //    radioAntennaLibraryId = RadioAntennaLibraryId,
                    //            //    Notes = RadioAntannaDataTable.Rows[j]["Note"].ToString(),
                    //            //    HBASurface = RadioAntannaDataTable.Rows[j]["HBA From Surface"].ToString(),
                    //            //    HeightBase = RadioAntennaHeightBase,
                    //            //    Azimuth = RadioAntennaAzimuth,
                    //            //    SerialNumber = RadioAntennaSerialNumber,
                    //            //    MechanicalTilt = RadioAntennaMechanicalTilt,
                    //            //    HBA = RadioAntennaHBA,
                    //            //    ownerId = RadioAntennaOwnerId,
                    //            //    installationPlaceId = RadioAntennaInstallationPlaceId
                    //            //};

                    //            //_unitOfWork.RadioAntennaRepository.Add(NewRadioAntennaEntity);
                    //            //_unitOfWork.SaveChanges();

                    //            //
                    //            // Dynamic Attribute..
                    //            //

                    //            List<TLIdynamicAttInstValue> RadioAntennaDynamicValues = new List<TLIdynamicAttInstValue>();

                    //            foreach (TLIdynamicAtt MissedAttribute in RadioAntennaMissedAttributes)
                    //            {
                    //                if (!string.IsNullOrEmpty(RadioAntannaDataTable.Rows[j][MissedAttribute.Key].ToString()))
                    //                {
                    //                    //TLIdynamicAttInstValue MissedAttributeValue = new TLIdynamicAttInstValue()
                    //                    //{
                    //                    //    tablesNamesId = RadioAntennaTableNameId,
                    //                    //    disable = false,
                    //                    //    DynamicAttId = MissedAttribute.Id,
                    //                    //    InventoryId = NewRadioAntennaEntity.Id
                    //                    //};

                    //                    if (MissedAttribute.DataType.Name.ToLower() == "string".ToLower())
                    //                        MissedAttributeValue.ValueString = RadioAntannaDataTable.Rows[j][MissedAttribute.Key].ToString();
                    //                    else if (MissedAttribute.DataType.Name.ToLower() == "int".ToLower() ||
                    //                        MissedAttribute.DataType.Name.ToLower() == "double".ToLower())
                    //                    {
                    //                        double DoubleParser = 0;

                    //                        CheckParser = double.TryParse(RadioAntannaDataTable.Rows[j][MissedAttribute.Key].ToString(), out DoubleParser);

                    //                        if (CheckParser)
                    //                            MissedAttributeValue.ValueDouble = DoubleParser;

                    //                        else
                    //                        {
                    //                            RadioAntennaTransaction.Dispose();

                    //                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //                            {
                    //                                CreatedAt = DateTime.Now,
                    //                                ErrMsg = $"({MissedAttribute.Key}) coulumn's value: ({RadioAntannaDataTable.Rows[j][MissedAttribute.Key]}) must be a number",
                    //                                IsDeleted = false,
                    //                                IsLib = false,
                    //                                RefTable = Helpers.Constants.TablesNames.TLIdynamicAtt.ToString(),
                    //                                SheetName = "Radio Antenna info",
                    //                                UniqueName = $"(Antenna Name) : {RadioAntannaDataTable.Rows[j]["Antenna Name"]}"
                    //                            };

                    //                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //                            _unitOfWork.SaveChanges();

                    //                            continue;
                    //                        }
                    //                    }
                    //                    else if (MissedAttribute.DataType.Name.ToLower() == "boolean".ToLower())
                    //                    {
                    //                        bool BooleanParser = false;

                    //                        CheckParser = bool.TryParse(RadioAntannaDataTable.Rows[j][MissedAttribute.Key].ToString(), out BooleanParser);

                    //                        if (CheckParser)
                    //                            MissedAttributeValue.ValueBoolean = BooleanParser;

                    //                        else
                    //                        {
                    //                            RadioAntennaTransaction.Dispose();

                    //                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //                            {
                    //                                CreatedAt = DateTime.Now,
                    //                                ErrMsg = $"({MissedAttribute.Key}) coulumn's value: ({RadioAntannaDataTable.Rows[j][MissedAttribute.Key]}) must be boolean (Yes/No)",
                    //                                IsDeleted = false,
                    //                                IsLib = false,
                    //                                RefTable = Helpers.Constants.TablesNames.TLIdynamicAtt.ToString(),
                    //                                SheetName = "Radio Antenna info",
                    //                                UniqueName = $"(Antenna Name) : {RadioAntannaDataTable.Rows[j]["Antenna Name"]}"
                    //                            };

                    //                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //                            _unitOfWork.SaveChanges();

                    //                            continue;
                    //                        }
                    //                    }
                    //                    else if (MissedAttribute.DataType.Name.ToLower() == "datetime".ToLower())
                    //                    {
                    //                        DateTime DateTimeParser = DateTime.Now;

                    //                        CheckParser = DateTime.TryParse(RadioAntannaDataTable.Rows[j][MissedAttribute.Key].ToString(), out DateTimeParser);

                    //                        if (CheckParser)
                    //                            MissedAttributeValue.ValueDateTime = DateTimeParser;

                    //                        else
                    //                        {
                    //                            RadioAntennaTransaction.Dispose();

                    //                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //                            {
                    //                                CreatedAt = DateTime.Now,
                    //                                ErrMsg = $"({MissedAttribute.Key}) coulumn's value: ({RadioAntannaDataTable.Rows[j][MissedAttribute.Key]}) must be date",
                    //                                IsDeleted = false,
                    //                                IsLib = false,
                    //                                RefTable = Helpers.Constants.TablesNames.TLIdynamicAtt.ToString(),
                    //                                SheetName = "Radio Antenna info",
                    //                                UniqueName = $"(Antenna Name) : {RadioAntannaDataTable.Rows[j]["Antenna Name"]}"
                    //                            };

                    //                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //                            _unitOfWork.SaveChanges();

                    //                            continue;
                    //                        }
                    //                    }

                    //                    RadioAntennaDynamicValues.Add(MissedAttributeValue);
                    //                }
                    //            }

                    //            if (RadioAntennaDynamicValues.Count() > 0)
                    //            {
                    //                _unitOfWork.DynamicAttInstValueRepository.AddRange(RadioAntennaDynamicValues);
                    //                _unitOfWork.SaveChanges();
                    //            }

                    //            //
                    //            // All Load Installation..
                    //            //

                    //            TLIallLoadInst NewRadioAntennaAlLLoadInstEntity = new TLIallLoadInst();

                    //            NewRadioAntennaAlLLoadInstEntity.radioAntennaId = NewRadioAntennaEntity.Id;

                    //            string RadioAntennaActiveComponent = RadioAntannaDataTable.Rows[j]["Active component"].ToString();
                    //            NewRadioAntennaAlLLoadInstEntity.Active = true;

                    //            if (!string.IsNullOrEmpty(RadioAntennaActiveComponent))
                    //            {
                    //                if (RadioAntennaActiveComponent.ToLower() == "Yes".ToLower())
                    //                    NewRadioAntennaAlLLoadInstEntity.Active = false;
                    //            }

                    //            string RadioAntennaCurrentStatus = RadioAntannaDataTable.Rows[j]["Current Status"].ToString();
                    //            if (!string.IsNullOrEmpty(RadioAntennaCurrentStatus))
                    //            {
                    //                TLIitemStatus CheckCurrentStatusradioAntenna = _unitOfWork.ItemStatusRepository
                    //                    .GetWhereFirst(x => x.Name.ToLower() == RadioAntennaCurrentStatus.ToLower() && !x.Deleted);

                    //                if (CheckCurrentStatusradioAntenna != null)
                    //                    NewRadioAntennaAlLLoadInstEntity.ItemStatusId = CheckCurrentStatusradioAntenna.Id;

                    //                else
                    //                {
                    //                    TLIitemStatus NewItemStatus = new TLIitemStatus()
                    //                    {
                    //                        Name = RadioAntennaCurrentStatus,
                    //                        Active = true,
                    //                        Deleted = false
                    //                    };

                    //                    _unitOfWork.ItemStatusRepository.Add(NewItemStatus);
                    //                    _unitOfWork.SaveChanges();

                    //                    NewRadioAntennaAlLLoadInstEntity.ItemStatusId = NewItemStatus.Id;
                    //                }
                    //            }

                    //            _unitOfWork.AllLoadInstRepository.Add(NewRadioAntennaAlLLoadInstEntity);
                    //            _unitOfWork.SaveChanges();

                    //            //
                    //            // Civil Installation..
                    //            //

                    //            TLIcivilLoads NewCivilLoadsForRadioAntenna = new TLIcivilLoads();

                    //            NewCivilLoadsForRadioAntenna.allLoadInstId = NewRadioAntennaAlLLoadInstEntity.Id;
                    //            NewCivilLoadsForRadioAntenna.SiteCode = RadioAntenna_SiteCodeAfterCheck;
                    //            NewCivilLoadsForRadioAntenna.sideArmId = RadioAntennaSideArmId;
                    //            NewCivilLoadsForRadioAntenna.allCivilInstId = RadioAntennaAllCivilInstId;
                    //            NewCivilLoadsForRadioAntenna.civilSteelSupportCategoryId = RadioAntennaAllCivilSteelSupportCategoryId;
                    //            NewCivilLoadsForRadioAntenna.legId = RadioAntennaLegId;

                    //            string InstallationDateString = RadioAntannaDataTable.Rows[j]["Status Date"].ToString();

                    //            if (!string.IsNullOrEmpty(InstallationDateString))
                    //            {
                    //                DateTime DateTimeParser = DateTime.Now;

                    //                CheckParser = DateTime.TryParse(InstallationDateString, out DateTimeParser);

                    //                if (CheckParser)
                    //                    NewCivilLoadsForRadioAntenna.InstallationDate = DateTimeParser;

                    //                else
                    //                    NewCivilLoadsForRadioAntenna.InstallationDate = DateTime.Now;
                    //            }
                    //            else
                    //                NewCivilLoadsForRadioAntenna.InstallationDate = DateTime.Now;

                    //            _unitOfWork.CivilLoadsRepository.Add(NewCivilLoadsForRadioAntenna);
                    //            _unitOfWork.SaveChanges();

                    //            RadioAntennaTransaction.Complete();
                    //        }
                    //        catch (Exception err)
                    //        {
                    //            RadioAntennaTransaction.Dispose();

                    //            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //            {
                    //                CreatedAt = DateTime.Now,
                    //                ErrMsg = err.Message,
                    //                IsDeleted = false,
                    //                IsLib = false,
                    //                RefTable = Helpers.Constants.TablesNames.TLIradioAntenna.ToString(),
                    //                SheetName = "Radio Antenna info",
                    //                UniqueName = $"(Antenna Name) : {RadioAntannaDataTable.Rows[j]["Antenna Name"]}"
                    //            };

                    //            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //            _unitOfWork.SaveChanges();

                    //            continue;
                    //        }
                    //    }
                    //}

                    ////////////////////////////////////////////////////////////
                    /////////////////// MW RFU /////////////////////////////////
                    ////////////////////////////////////////////////////////////

                    MW_RFU:

                        ExcelWorksheet MW_RFUSheet = package.Workbook.Worksheets.FirstOrDefault(x => x.Name.ToLower() == "RFU info".ToLower());
                        int MW_RFURows = 0;
                        try
                        {
                            MW_RFURows = MW_RFUSheet.Dimension.End.Row;
                        }
                        catch (NullReferenceException)
                        {
                            goto MW_ODU;
                        }
                        int MW_RFUColumns = MW_RFUSheet.Dimension.End.Column;

                        DataTable MW_RFUDataTable = new DataTable();
                        List<string> MW_RFUSheetColumn = new List<string>();

                        for (int i = 1; i <= MW_RFUColumns; i++)
                        {
                            string ColName = MW_RFUSheet.Cells[1, i].Value.ToString().Trim();
                            ColName = Regex.Replace(ColName, @"\s+", " ");

                            MW_RFUSheetColumn.Add(MW_RFUSheet.Cells[1, i].Value.ToString());
                            MW_RFUDataTable.Columns.Add(ColName);
                        }

                        for (int i = 2; i <= MW_RFURows; i++)
                        {
                            DataRow MW_RFUDataRow = MW_RFUDataTable.NewRow();
                            for (int j = 1; j <= MW_RFUColumns; j++)
                            {
                                string ColName = MW_RFUSheet.Cells[1, j].Value.ToString().Trim();
                                ColName = Regex.Replace(ColName, @"\s+", " ");

                                object Value = MW_RFUSheet.Cells[i, j].Value;
                                if (Value != null)
                                {
                                    string ValueAsString = Value.ToString().Trim();
                                    ValueAsString = Regex.Replace(ValueAsString, @"\s+", " ");

                                    Value = ValueAsString;
                                    MW_RFUDataRow[ColName] = Value;
                                }
                                else
                                {
                                    MW_RFUDataRow[ColName] = Value;
                                }
                            }
                            MW_RFUDataTable.Rows.Add(MW_RFUDataRow);
                        }

                        //
                        // Dynamic Attributes For MW_RFU..
                        //

                        int MW_RFUTableNameId = TablesName.FirstOrDefault(x =>
                            x.TableName.ToLower() == Helpers.Constants.TablesNames.TLImwRFU.ToString().ToLower()).Id;

                        List<TLIdynamicAtt> MW_RFUMissedAttributeCSV = new List<TLIdynamicAtt>()
                        {
                            new TLIdynamicAtt
                            {
                                Key = "Created",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "DateTime".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_RFUTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Created By",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_RFUTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Modified",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "DateTime".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_RFUTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Modified By",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_RFUTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Related Plan",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_RFUTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "user",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_RFUTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Current Plan",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_RFUTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "collect plan",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_RFUTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Read",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_RFUTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            }
                        };

                        List<TLIdynamicAtt> MW_RFUAllDynamicAttribute = _unitOfWork.DynamicAttRepository
                            .GetWhere(x => x.tablesNamesId == MW_RFUTableNameId).ToList();

                        List<TLIdynamicAtt> MW_RFUMissedAttributes = MW_RFUMissedAttributeCSV.Except(MW_RFUAllDynamicAttribute).ToList();

                        _unitOfWork.DynamicAttRepository.AddRange(MW_RFUMissedAttributes);
                        _unitOfWork.SaveChanges();

                        for (int j = 0; j <= MW_RFUDataTable.Rows.Count - 1; j++)
                        {
                            using (TransactionScope MW_RFUTransaction = new TransactionScope(TransactionScopeOption.Required,
                                new System.TimeSpan(0, 15, 0)))
                            {
                                try
                                {
                                    //
                                    // Library Information..
                                    //

                                    string MW_RFU_LibraryModel = MW_RFUDataTable.Rows[j]["RFU Type"].ToString();
                                    int MW_RFULibraryId = 0;
                                    if (!string.IsNullOrEmpty(MW_RFU_LibraryModel))
                                    {
                                        TLImwRFULibrary MW_RFULibraryEntity = _unitOfWork.MW_RFULibraryRepository
                                            .GetWhereFirst(x => x.Model.ToLower() == MW_RFU_LibraryModel.ToLower() && !x.Deleted);

                                        if (MW_RFULibraryEntity == null)
                                        {
                                            MW_RFUTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(RFU Type) coulumn's value: ({MW_RFU_LibraryModel}) doesn't exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = true,
                                                RefTable = Helpers.Constants.TablesNames.TLImwRFULibrary.ToString(),
                                                SheetName = "RFU info",
                                                UniqueName = $"(RFU Name) : {MW_RFUDataTable.Rows[j]["RFU Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        MW_RFULibraryId = MW_RFULibraryEntity.Id;
                                    }

                                    //
                                    // Installation Information..
                                    //

                                    string MW_RFU_SiteCodeAfterCheck = string.Empty;
                                    string MW_RFU_SiteCode = MW_RFUDataTable.Rows[j]["Site Code"].ToString();
                                    string MW_RFU_SiteName = MW_RFUDataTable.Rows[j]["Site Name"].ToString();
                                    string MW_RFU_Site = MW_RFUDataTable.Rows[j]["Site"].ToString();

                                    if (!string.IsNullOrEmpty(MW_RFU_SiteCode))
                                    {
                                        TLIsite CheckSiteCode = _unitOfWork.SiteRepository
                                            .GetWhereFirst(x => x.SiteCode.ToLower() == MW_RFU_SiteCode.ToLower());

                                        if (CheckSiteCode == null)
                                        {
                                            MW_RFUTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Site Code) coulumn's value: ({MW_RFU_SiteCode}) doesn't exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                                SheetName = "RFU info",
                                                UniqueName = $"(RFU Name) : {MW_RFUDataTable.Rows[j]["RFU Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        MW_RFU_SiteCodeAfterCheck = MW_RFU_SiteCode;
                                    }
                                    else if (!string.IsNullOrEmpty(MW_RFU_SiteName))
                                    {
                                        TLIsite CheckSiteCode = _unitOfWork.SiteRepository
                                            .GetWhereFirst(x => x.SiteName.ToLower() == MW_RFU_SiteName.ToLower());

                                        if (CheckSiteCode == null)
                                        {
                                            MW_RFUTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Site Name) coulumn's value: ({MW_RFU_SiteName}) doesn't exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                                SheetName = "RFU info",
                                                UniqueName = $"(RFU Name) : {MW_RFUDataTable.Rows[j]["RFU Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        MW_RFU_SiteCodeAfterCheck = CheckSiteCode.SiteCode;
                                    }
                                    else if (!string.IsNullOrEmpty(MW_RFU_Site))
                                    {
                                        TLIsite CheckSiteCode = _unitOfWork.SiteRepository
                                            .GetWhereFirst(x => x.SiteCode.ToLower() == MW_RFU_Site.ToLower());

                                        if (CheckSiteCode == null)
                                        {
                                            MW_RFUTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Site) coulumn's value: ({MW_RFU_Site}) doesn't exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                                SheetName = "RFU info",
                                                UniqueName = $"(RFU Name) : {MW_RFUDataTable.Rows[j]["RFU Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        MW_RFU_SiteCodeAfterCheck = MW_RFU_Site;
                                    }
                                    else
                                    {
                                        MW_RFUTransaction.Dispose();

                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                        {
                                            CreatedAt = DateTime.Now,
                                            ErrMsg = $"One of those columns must have a value (Site Code, Site Name, Site)",
                                            IsDeleted = false,
                                            IsLib = false,
                                            RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                            SheetName = "RFU info",
                                            UniqueName = $"(RFU Name) : {MW_RFUDataTable.Rows[j]["RFU Name"]}"
                                        };

                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                        _unitOfWork.SaveChanges();

                                        continue;
                                    }

                                    string MW_RFUName = MW_RFUDataTable.Rows[j]["RFU Name"].ToString();
                                    if (string.IsNullOrEmpty(MW_RFUName))
                                    {
                                        MW_RFUTransaction.Dispose();

                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                        {
                                            CreatedAt = DateTime.Now,
                                            ErrMsg = $"(RFU Name) column's value can't be null or empty ",
                                            IsDeleted = false,
                                            IsLib = false,
                                            RefTable = Helpers.Constants.TablesNames.TLImwRFU.ToString(),
                                            SheetName = "RFU info",
                                            UniqueName = $"(RFU Name) : {MW_RFUDataTable.Rows[j]["RFU Name"]}"
                                        };

                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                        _unitOfWork.SaveChanges();

                                        continue;
                                    }

                                    // Check If This Radio Antenna Name is Already Exist in This Site Code..

                                    TLIcivilLoads CheckMW_RFUName = _unitOfWork.CivilLoadsRepository
                                        .GetIncludeWhereFirst(x => !x.Dismantle && x.SiteCode.ToLower() == MW_RFU_SiteCodeAfterCheck.ToLower() &&
                                            (x.allLoadInstId != null ? (x.allLoadInst.mwRFUId != null ?
                                                (x.allLoadInst.mwRFU.Name.ToLower() == MW_RFUName.ToLower() && !x.allLoadInst.Draft) : false) : false),
                                                    x => x.allLoadInst, x => x.allLoadInst.mwRFU);

                                    if (CheckMW_RFUName != null)
                                    {
                                        MW_RFUTransaction.Dispose();

                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                        {
                                            CreatedAt = DateTime.Now,
                                            ErrMsg = $"(RFU Name) column's value: ({MW_RFUName}) is already exist in " +
                                                $"this site: ({MW_RFU_SiteCodeAfterCheck})",
                                            IsDeleted = false,
                                            IsLib = false,
                                            RefTable = Helpers.Constants.TablesNames.TLImwRFU.ToString(),
                                            SheetName = "RFU info",
                                            UniqueName = $"(RFU Name) : {MW_RFUDataTable.Rows[j]["RFU Name"]}"
                                        };

                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                        _unitOfWork.SaveChanges();

                                        continue;
                                    }

                                    int MW_RFUAllCivilInstId = 0;
                                    int? MW_RFUCivilSteelSupportCategoryId = 0;
                                    string MW_RFUBU_Name = MW_RFUDataTable.Rows[j]["Branching Unit Name"].ToString();
                                    int? MW_RFUPortId = null;
                                    if (!string.IsNullOrEmpty(MW_RFUBU_Name))
                                    {
                                        TLImwPort RFU_Port = _unitOfWork.MW_PortRepository
                                            .GetIncludeWhereFirst(x => x.MwBU.Name.ToLower() == MW_RFUBU_Name.ToLower(), x => x.MwBU);

                                        if (RFU_Port == null)
                                        {
                                            MW_RFUTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Branching Unit Name) coulumn's value: ({MW_RFUBU_Name}) doesn't exist in TLIS as port for RFU",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLImwPort.ToString(),
                                                SheetName = "RFU info",
                                                UniqueName = $"(RFU Name) : {MW_RFUDataTable.Rows[j]["RFU Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }
                                        else
                                        {
                                            MW_RFUPortId = RFU_Port.Id;

                                            TLIcivilLoads CivilLoadsForMWBU = _unitOfWork.CivilLoadsRepository
                                                .GetIncludeWhereFirst(x => !x.Dismantle && (x.allLoadInstId != null ?
                                                    (x.allLoadInst.mwBUId != null ?
                                                        (x.allLoadInst.mwBUId == RFU_Port.MwBUId && !x.allLoadInst.Draft) : false) : false),
                                                            x => x.allLoadInst, x => x.allCivilInst);

                                            if (CivilLoadsForMWBU == null)
                                            {
                                                MW_RFUTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Branching Unit Name) coulumn's value: ({MW_RFUBU_Name}) doesn't exist in TLIS",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilLoads.ToString(),
                                                    SheetName = "RFU info",
                                                    UniqueName = $"(RFU Name) : {MW_RFUDataTable.Rows[j]["RFU Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }

                                            MW_RFUAllCivilInstId = CivilLoadsForMWBU.allCivilInstId;

                                            if (CivilLoadsForMWBU.allCivilInst.civilWithLegsId != null)
                                                MW_RFUCivilSteelSupportCategoryId = _unitOfWork.CivilWithLegsRepository
                                                    .GetIncludeWhereFirst(x => x.Id == CivilLoadsForMWBU.allCivilInst.civilWithLegsId,
                                                        x => x.CivilWithLegsLib).CivilWithLegsLib.civilSteelSupportCategoryId;

                                            else if (CivilLoadsForMWBU.allCivilInst.civilWithoutLegId != null)
                                                MW_RFUCivilSteelSupportCategoryId = _unitOfWork.CivilWithoutLegRepository
                                                    .GetIncludeWhereFirst(x => x.Id == CivilLoadsForMWBU.allCivilInst.civilWithoutLegId,
                                                        x => x.CivilWithoutlegsLib).CivilWithoutlegsLib.CivilSteelSupportCategoryId;
                                        }
                                    }

                                    string MW_RFUSideArmName = MW_RFUDataTable.Rows[j]["Side Arm Name"].ToString();
                                    int? MW_RFUSideArmId = null;
                                    if (!string.IsNullOrEmpty(MW_RFUSideArmName))
                                    {
                                        TLIcivilLoads CheckMW_RFUSideArm = _unitOfWork.CivilLoadsRepository
                                            .GetIncludeWhereFirst(x => !x.Dismantle && // x.SiteCode.ToLower() == MW_RFU_SiteCodeAfterCheck.ToLower() &&
                                                x.sideArmId != null ? (!x.sideArm.Draft && x.sideArm.Name.ToLower() == MW_RFUSideArmName.ToLower()) : false,
                                                    x => x.sideArm);

                                        if (CheckMW_RFUSideArm == null)
                                        {
                                            MW_RFUTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Side Arm Name) coulumn's value: ({MW_RFUSideArmName}) doesn't exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIcivilLoads.ToString(),
                                                SheetName = "RFU info",
                                                UniqueName = $"(RFU Name) : {MW_RFUDataTable.Rows[j]["RFU Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }
                                        if (CheckMW_RFUSideArm.SiteCode.ToLower() != MW_RFU_SiteCodeAfterCheck.ToLower())
                                        {
                                            MW_RFUTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Side Arm Name) coulumn's value: ({MW_RFUSideArmName}) doesn't exist in this site: ({MW_RFU_SiteCodeAfterCheck})",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIcivilLoads.ToString(),
                                                SheetName = "RFU info",
                                                UniqueName = $"(RFU Name) : {MW_RFUDataTable.Rows[j]["RFU Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        MW_RFUSideArmId = CheckMW_RFUSideArm.sideArmId;
                                        MW_RFUAllCivilInstId = CheckMW_RFUSideArm.allCivilInstId;
                                    }

                                    // SideArm Name Or BU Name Must Have a Value..
                                    if (MW_RFUPortId == null && MW_RFUSideArmId == null)
                                    {
                                        MW_RFUTransaction.Dispose();

                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                        {
                                            CreatedAt = DateTime.Now,
                                            ErrMsg = $"One of those columns must have a value: (Branching Unit Name - Side Arm Name)",
                                            IsDeleted = false,
                                            IsLib = false,
                                            RefTable = Helpers.Constants.TablesNames.TLImwRFU.ToString(),
                                            SheetName = "RFU info",
                                            UniqueName = $"(RFU Name) : {MW_RFUDataTable.Rows[j]["RFU Name"]}"
                                        };

                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                        _unitOfWork.SaveChanges();

                                        continue;
                                    }

                                    string MW_RFUHeightBaseString = MW_RFUDataTable.Rows[j]["RFU Height (m)"].ToString();
                                    float MW_RFUHeightBase = 0;
                                    if (!string.IsNullOrEmpty(MW_RFUHeightBaseString))
                                    {
                                        CheckParser = float.TryParse(MW_RFUHeightBaseString, out FloatParser);

                                        if (CheckParser)
                                            MW_RFUHeightBase = FloatParser;

                                        else
                                        {
                                            MW_RFUTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(RFU Height (m)) coulumn's value: ({MW_RFUHeightBaseString}) must be a number",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLImwRFU.ToString(),
                                                SheetName = "RFU info",
                                                UniqueName = $"(RFU Name) : {MW_RFUDataTable.Rows[j]["RFU Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        MW_RFUTransaction.Dispose();

                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                        {
                                            CreatedAt = DateTime.Now,
                                            ErrMsg = $"(RFU Height (m)) coulumn's value can't be null or empty",
                                            IsDeleted = false,
                                            IsLib = false,
                                            RefTable = Helpers.Constants.TablesNames.TLImwRFU.ToString(),
                                            SheetName = "RFU info",
                                            UniqueName = $"(RFU Name) : {MW_RFUDataTable.Rows[j]["RFU Name"]}"
                                        };

                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                        _unitOfWork.SaveChanges();

                                        continue;
                                    }

                                    string MW_RFUAzimuthString = MW_RFUDataTable.Rows[j]["RFU Azimuth"].ToString();
                                    float MW_RFUAzimuth = 0;
                                    if (!string.IsNullOrEmpty(MW_RFUAzimuthString))
                                    {
                                        CheckParser = float.TryParse(MW_RFUAzimuthString, out FloatParser);

                                        if (CheckParser)
                                            MW_RFUAzimuth = FloatParser;

                                        else
                                        {
                                            MW_RFUTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(RFU Azimuth) coulumn's value: ({MW_RFUAzimuthString}) must be a number",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLImwRFU.ToString(),
                                                SheetName = "RFU info",
                                                UniqueName = $"(RFU Name) : {MW_RFUDataTable.Rows[j]["RFU Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        MW_RFUTransaction.Dispose();

                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                        {
                                            CreatedAt = DateTime.Now,
                                            ErrMsg = $"(RFU Azimuth) coulumn's value can't be null or empty",
                                            IsDeleted = false,
                                            IsLib = false,
                                            RefTable = Helpers.Constants.TablesNames.TLImwRFU.ToString(),
                                            SheetName = "RFU info",
                                            UniqueName = $"(RFU Name) : {MW_RFUDataTable.Rows[j]["RFU Name"]}"
                                        };

                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                        _unitOfWork.SaveChanges();

                                        continue;
                                    }

                                    string MW_RFUOwnerName = MW_RFUDataTable.Rows[j]["RFU-Owner"].ToString();
                                    int? MW_RFUOwnerId = null;
                                    if (!string.IsNullOrEmpty(MW_RFUOwnerName))
                                    {
                                        TLIowner CheckMW_RFUOwnerName = _unitOfWork.OwnerRepository
                                            .GetWhereFirst(x => x.OwnerName.ToLower() == MW_RFUOwnerName.ToLower() && !x.Deleted);

                                        if (CheckMW_RFUOwnerName == null)
                                        {
                                            MW_RFUTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(RFU-Owner) coulumn's value: ({CheckMW_RFUName}) doesn't exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLImwRFU.ToString(),
                                                SheetName = "RFU info",
                                                UniqueName = $"(RFU Name) : {MW_RFUDataTable.Rows[j]["RFU Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        MW_RFUOwnerId = CheckMW_RFUOwnerName.Id;
                                    }

                                    //TLImwRFU NewMW_RFUEntity = new TLImwRFU()
                                    //{
                                    //    Name = MW_RFUName,
                                    //    MwRFULibraryId = MW_RFULibraryId,
                                    //    heightBase = MW_RFUHeightBase,
                                    //    Azimuth = MW_RFUAzimuth,
                                    //    OwnerId = MW_RFUOwnerId,
                                    //    MwPortId = MW_RFUPortId,
                                    //    Note = MW_RFUDataTable.Rows[j]["Notes"].ToString(),
                                    //    SerialNumber = MW_RFUDataTable.Rows[j]["Serial Number"].ToString()
                                    //};

                                    //_unitOfWork.MW_RFURepository.Add(NewMW_RFUEntity);
                                    //_unitOfWork.SaveChanges();

                                    //
                                    // Dynamic Attribute Information..
                                    //

                                    List<TLIdynamicAttInstValue> MW_RFUDynamicValues = new List<TLIdynamicAttInstValue>();

                                    foreach (TLIdynamicAtt MissedAttribute in MW_RFUMissedAttributes)
                                    {
                                        if (!string.IsNullOrEmpty(MW_RFUDataTable.Rows[j][MissedAttribute.Key].ToString()))
                                        {
                                            TLIdynamicAttInstValue MissedAttributeValue = new TLIdynamicAttInstValue()
                                            {
                                                tablesNamesId = MW_RFUTableNameId,
                                                disable = false,
                                                DynamicAttId = MissedAttribute.Id,
                                                //InventoryId = NewMW_RFUEntity.Id
                                            };

                                            if (MissedAttribute.DataType.Name.ToLower() == "string".ToLower())
                                                MissedAttributeValue.ValueString = MW_RFUDataTable.Rows[j][MissedAttribute.Key].ToString();
                                            else if (MissedAttribute.DataType.Name.ToLower() == "int".ToLower() ||
                                                MissedAttribute.DataType.Name.ToLower() == "double".ToLower())
                                            {
                                                double DoubleParser = 0;

                                                CheckParser = double.TryParse(MW_RFUDataTable.Rows[j][MissedAttribute.Key].ToString(), out DoubleParser);

                                                if (CheckParser)
                                                    MissedAttributeValue.ValueDouble = DoubleParser;

                                                else
                                                {
                                                    MW_RFUTransaction.Dispose();

                                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                    {
                                                        CreatedAt = DateTime.Now,
                                                        ErrMsg = $"({MissedAttribute.Key}) coulumn's value must be a number",
                                                        IsDeleted = false,
                                                        IsLib = false,
                                                        RefTable = Helpers.Constants.TablesNames.TLImwRFU.ToString(),
                                                        SheetName = "RFU info",
                                                        UniqueName = $"(RFU Name) : {MW_RFUDataTable.Rows[j]["RFU Name"]}"
                                                    };

                                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                    _unitOfWork.SaveChanges();

                                                    continue;
                                                }
                                            }
                                            else if (MissedAttribute.DataType.Name.ToLower() == "boolean".ToLower())
                                            {
                                                bool BooleanParser = false;

                                                CheckParser = bool.TryParse(MW_RFUDataTable.Rows[j][MissedAttribute.Key].ToString(), out BooleanParser);

                                                if (CheckParser)
                                                    MissedAttributeValue.ValueBoolean = BooleanParser;

                                                else
                                                {
                                                    MW_RFUTransaction.Dispose();

                                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                    {
                                                        CreatedAt = DateTime.Now,
                                                        ErrMsg = $"({MissedAttribute.Key}) coulumn's value must be a number",
                                                        IsDeleted = false,
                                                        IsLib = false,
                                                        RefTable = Helpers.Constants.TablesNames.TLImwRFU.ToString(),
                                                        SheetName = "RFU info",
                                                        UniqueName = $"(RFU Name) : {MW_RFUDataTable.Rows[j]["RFU Name"]}"
                                                    };

                                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                    _unitOfWork.SaveChanges();

                                                    continue;
                                                }
                                            }
                                            else if (MissedAttribute.DataType.Name.ToLower() == "datetime".ToLower())
                                            {
                                                DateTime DateTimeParser = DateTime.Now;

                                                CheckParser = DateTime.TryParse(MW_RFUDataTable.Rows[j][MissedAttribute.Key].ToString(), out DateTimeParser);

                                                if (CheckParser)
                                                    MissedAttributeValue.ValueDateTime = DateTimeParser;

                                                else
                                                {
                                                    MW_RFUTransaction.Dispose();

                                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                    {
                                                        CreatedAt = DateTime.Now,
                                                        ErrMsg = $"({MissedAttribute.Key}) coulumn's value must be a number",
                                                        IsDeleted = false,
                                                        IsLib = false,
                                                        RefTable = Helpers.Constants.TablesNames.TLImwRFU.ToString(),
                                                        SheetName = "RFU info",
                                                        UniqueName = $"(RFU Name) : {MW_RFUDataTable.Rows[j]["RFU Name"]}"
                                                    };

                                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                    _unitOfWork.SaveChanges();

                                                    continue;
                                                }
                                            }

                                            MW_RFUDynamicValues.Add(MissedAttributeValue);
                                        }
                                    }
                                    if (MW_RFUDynamicValues.Count() > 0)
                                    {
                                        _unitOfWork.DynamicAttInstValueRepository.AddRange(MW_RFUDynamicValues);
                                        _unitOfWork.SaveChanges();
                                    }

                                    //
                                    // AllLoadInst Information..
                                    //

                                    string MW_RFUAllLoadActiveName = MW_RFUDataTable.Rows[j]["Active component"].ToString();
                                    bool MW_RFUAllLoadActive = true;
                                    if (!string.IsNullOrEmpty(MW_RFUAllLoadActiveName))
                                        if (MW_RFUAllLoadActiveName.ToLower() != "Yes".ToLower())
                                            MW_RFUAllLoadActive = false;

                                    string MW_RFUAllLoadInstCurrentStatusName = MW_RFUDataTable.Rows[j]["Current Status"].ToString();
                                    int? MW_RFUAllLoadInstCurrentStatus = null;
                                    if (!string.IsNullOrEmpty(MW_RFUAllLoadInstCurrentStatusName))
                                    {
                                        TLIitemStatus CheckMW_RFUAllLoadInstCurrentStatusName = _unitOfWork.ItemStatusRepository
                                            .GetWhereFirst(x => x.Name.ToLower() == MW_RFUAllLoadInstCurrentStatusName.ToLower() && !x.Deleted);

                                        if (CheckMW_RFUAllLoadInstCurrentStatusName == null)
                                        {
                                            MW_RFUTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Current Status) coulumn's value: ({MW_RFUAllLoadInstCurrentStatusName}) doesn't exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIitemStatus.ToString(),
                                                SheetName = "RFU info",
                                                UniqueName = $"(RFU Name) : {MW_RFUDataTable.Rows[j]["RFU Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        MW_RFUAllLoadInstCurrentStatus = CheckMW_RFUAllLoadInstCurrentStatusName.Id;
                                    }

                                    //TLIallLoadInst MW_RFUAllLoadInst = new TLIallLoadInst()
                                    //{
                                    //    Active = MW_RFUAllLoadActive,
                                    //    mwRFUId = NewMW_RFUEntity.Id,
                                    //    ItemStatusId = MW_RFUAllLoadInstCurrentStatus,
                                    //    Draft = false
                                    //};

                                    //_unitOfWork.AllLoadInstRepository.Add(MW_RFUAllLoadInst);
                                    //_unitOfWork.SaveChanges();

                                    //
                                    // CivilLoads Information..
                                    //

                                    string MW_RFUCivilLoadsStatusDateString = MW_RFUDataTable.Rows[j]["Status Date"].ToString();
                                    DateTime MW_RFUCivilLoadsStatusDate = DateTime.Now;
                                    if (!string.IsNullOrEmpty(MW_RFUCivilLoadsStatusDateString))
                                    {
                                        DateTime DateTimeParser = DateTime.Now;

                                        CheckParser = DateTime.TryParse(MW_RFUCivilLoadsStatusDateString, out DateTimeParser);

                                        if (CheckParser)
                                            MW_RFUCivilLoadsStatusDate = DateTimeParser;
                                    }

                                    //TLIcivilLoads MW_RFUCivilLoads = new TLIcivilLoads()
                                    //{
                                    //    allCivilInstId = MW_RFUAllCivilInstId,
                                    //    allLoadInstId = MW_RFUAllLoadInst.Id,
                                    //    sideArmId = MW_RFUSideArmId,
                                    //    Dismantle = false,
                                    //    SiteCode = MW_RFU_SiteCodeAfterCheck,
                                    //    civilSteelSupportCategoryId = MW_RFUCivilSteelSupportCategoryId,
                                    //    InstallationDate = MW_RFUCivilLoadsStatusDate
                                    //};

                                    //_unitOfWork.CivilLoadsRepository.Add(MW_RFUCivilLoads);
                                    //_unitOfWork.SaveChanges();

                                    MW_RFUTransaction.Complete();
                                }
                                catch (Exception err)
                                {
                                    MW_RFUTransaction.Dispose();

                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                    {
                                        CreatedAt = DateTime.Now,
                                        ErrMsg = err.Message,
                                        IsDeleted = false,
                                        IsLib = false,
                                        RefTable = Helpers.Constants.TablesNames.TLImwRFU.ToString(),
                                        SheetName = "RFU info",
                                        UniqueName = $"(RFU Name) : {MW_RFUDataTable.Rows[j]["RFU Name"]}"
                                    };

                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                    _unitOfWork.SaveChanges();

                                    continue;
                                }
                            }
                        }

                    ////////////////////////////////////////////////////////////
                    /////////////////// MW ODU /////////////////////////////////
                    ////////////////////////////////////////////////////////////

                    MW_ODU:

                        ExcelWorksheet MW_ODUSheet = package.Workbook.Worksheets.FirstOrDefault(x => x.Name.ToLower() == "ODU info".ToLower());
                        int MW_ODURows = 0;
                        try
                        {
                            MW_ODURows = MW_ODUSheet.Dimension.End.Row;
                        }
                        catch (NullReferenceException)
                        {
                            goto RadioRRU;
                        }
                        int MW_ODUColumns = MW_ODUSheet.Dimension.End.Column;

                        DataTable MW_ODUDataTable = new DataTable();
                        List<string> MW_ODUSheetColumn = new List<string>();

                        for (int i = 1; i <= MW_ODUColumns; i++)
                        {
                            string ColName = MW_ODUSheet.Cells[1, i].Value.ToString().Trim();
                            ColName = Regex.Replace(ColName, @"\s+", " ");

                            MW_ODUSheetColumn.Add(MW_ODUSheet.Cells[1, i].Value.ToString());
                            MW_ODUDataTable.Columns.Add(ColName);
                        }

                        for (int i = 2; i <= MW_ODURows; i++)
                        {
                            DataRow MW_ODUDataRow = MW_ODUDataTable.NewRow();
                            for (int j = 1; j <= MW_ODUColumns; j++)
                            {
                                string ColName = MW_ODUSheet.Cells[1, j].Value.ToString().Trim();
                                ColName = Regex.Replace(ColName, @"\s+", " ");

                                object Value = MW_ODUSheet.Cells[i, j].Value;
                                if (Value != null)
                                {
                                    string ValueAsString = Value.ToString().Trim();
                                    ValueAsString = Regex.Replace(ValueAsString, @"\s+", " ");

                                    Value = ValueAsString;
                                    MW_ODUDataRow[ColName] = Value;
                                }
                                else
                                {
                                    MW_ODUDataRow[ColName] = Value;
                                }
                            }
                            MW_ODUDataTable.Rows.Add(MW_ODUDataRow);
                        }

                        //
                        // Dynamic Attributes For MW_ODU..
                        //

                        int MW_ODUTableNameId = TablesName.FirstOrDefault(x =>
                            x.TableName.ToLower() == Helpers.Constants.TablesNames.TLImwODU.ToString().ToLower()).Id;

                        List<TLIdynamicAtt> MW_ODUMissedAttributeCSV = new List<TLIdynamicAtt>()
                        {
                            new TLIdynamicAtt
                            {
                                Key = "ODU-AZIMUTH",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "Double".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_ODUTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Related Plan",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_ODUTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "user",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_ODUTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Current Plan",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_ODUTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "collect plan",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_ODUTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Read",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_ODUTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Title",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_ODUTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "F33",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_ODUTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "F34",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_ODUTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "F35",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_ODUTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "F36",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_ODUTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "F37",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_ODUTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "F38",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_ODUTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "F39",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_ODUTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "F40",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_ODUTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "F41",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_ODUTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "F42",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_ODUTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "F43",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = MW_ODUTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                        };

                        List<TLIdynamicAtt> MW_ODUAllDynamicAttribute = _unitOfWork.DynamicAttRepository
                            .GetWhere(x => x.tablesNamesId == MW_ODUTableNameId).ToList();


                        List<TLIdynamicAtt> MW_ODUMissedAttributes = MW_ODUMissedAttributeCSV
                       .Except(MW_ODUAllDynamicAttribute, new TLIdynamicAttComparer())
                       .ToList();


                        _unitOfWork.DynamicAttRepository.AddRange(MW_ODUMissedAttributes);
                        _unitOfWork.SaveChanges();

                    //for (int j = 0; j <= MW_ODUDataTable.Rows.Count - 1; j++)
                    //{
                    //    using (TransactionScope MW_ODUTransaction = new TransactionScope(TransactionScopeOption.Required,
                    //        new System.TimeSpan(0, 15, 0)))
                    //    {
                    //        try
                    //        {
                    //            // Unique Constraint (Serial Number)..

                    //            string MW_ODUSerialNumber = MW_ODUDataTable.Rows[j]["Serial Number"].ToString();

                    //            //
                    //            // Library Information..
                    //            //

                    //            string MW_ODULibraryModelName = MW_ODUDataTable.Rows[j]["ODU Type"].ToString();
                    //            int MW_ODULibraryId = 0;
                    //            if (!string.IsNullOrEmpty(MW_ODULibraryModelName))
                    //            {
                    //                TLImwODULibrary CheckMW_ODULibraryModelName = _unitOfWork.MW_ODULibraryRepository
                    //                    .GetWhereFirst(x => x.Model.ToLower() == MW_ODULibraryModelName.ToLower() && !x.Deleted);

                    //                if (CheckMW_ODULibraryModelName != null)
                    //                {
                    //                    MW_ODULibraryId = CheckMW_ODULibraryModelName.Id;
                    //                }
                    //                else
                    //                {
                    //                    MW_ODUTransaction.Dispose();

                    //                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //                    {
                    //                        CreatedAt = DateTime.Now,
                    //                        ErrMsg = $"(ODU Type) coulumn's value: ({MW_ODULibraryModelName}) doesn't exist in TLIS",
                    //                        IsDeleted = false,
                    //                        IsLib = true,
                    //                        RefTable = Helpers.Constants.TablesNames.TLImwODULibrary.ToString(),
                    //                        SheetName = "ODU info",
                    //                        UniqueName = $"(Serial Number) : {MW_ODUSerialNumber}"
                    //                    };

                    //                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //                    _unitOfWork.SaveChanges();

                    //                    continue;
                    //                }
                    //            }
                    //            else
                    //            {
                    //                MW_ODUTransaction.Dispose();

                    //                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //                {
                    //                    CreatedAt = DateTime.Now,
                    //                    ErrMsg = $"(ODU Type) coulumn's value can't be null or empty",
                    //                    IsDeleted = false,
                    //                    IsLib = true,
                    //                    RefTable = Helpers.Constants.TablesNames.TLImwODULibrary.ToString(),
                    //                    SheetName = "ODU info",
                    //                    UniqueName = $"(Serial Number) : {MW_ODUSerialNumber}"
                    //                };

                    //                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //                _unitOfWork.SaveChanges();

                    //                continue;
                    //            }

                    //            string MW_ODU_SiteCodeAfterCheck = string.Empty;
                    //            string MW_ODU_SiteCode = MW_ODUDataTable.Rows[j]["Site Code"].ToString();
                    //            string MW_ODU_SiteName = MW_ODUDataTable.Rows[j]["Site Name"].ToString();
                    //            string MW_ODU_Site = MW_ODUDataTable.Rows[j]["Site"].ToString();

                    //            if (!string.IsNullOrEmpty(MW_ODU_SiteCode))
                    //            {
                    //                TLIsite CheckSiteCode = _unitOfWork.SiteRepository
                    //                    .GetWhereFirst(x => x.SiteCode.ToLower() == MW_ODU_SiteCode.ToLower());

                    //                if (CheckSiteCode == null)
                    //                {
                    //                    MW_ODUTransaction.Dispose();

                    //                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //                    {
                    //                        CreatedAt = DateTime.Now,
                    //                        ErrMsg = $"(Site Code) coulumn's value: ({MW_ODU_SiteCode}) doesn't exist in TLIS",
                    //                        IsDeleted = false,
                    //                        IsLib = false,
                    //                        RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                    //                        SheetName = "ODU info",
                    //                        UniqueName = $"(Serial Number) : {MW_ODUSerialNumber}"
                    //                    };

                    //                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //                    _unitOfWork.SaveChanges();

                    //                    continue;
                    //                }

                    //                MW_ODU_SiteCodeAfterCheck = MW_ODU_SiteCode;
                    //            }
                    //            else if (!string.IsNullOrEmpty(MW_ODU_SiteName))
                    //            {
                    //                TLIsite CheckSiteCode = _unitOfWork.SiteRepository
                    //                    .GetWhereFirst(x => x.SiteName.ToLower() == MW_ODU_SiteName.ToLower());

                    //                if (CheckSiteCode == null)
                    //                {
                    //                    MW_ODUTransaction.Dispose();

                    //                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //                    {
                    //                        CreatedAt = DateTime.Now,
                    //                        ErrMsg = $"(Site Name) coulumn's value: ({MW_ODU_SiteName}) doesn't exist in TLIS",
                    //                        IsDeleted = false,
                    //                        IsLib = false,
                    //                        RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                    //                        SheetName = "ODU info",
                    //                        UniqueName = $"(Serial Number) : {MW_ODUSerialNumber}"
                    //                    };

                    //                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //                    _unitOfWork.SaveChanges();

                    //                    continue;
                    //                }

                    //                MW_ODU_SiteCodeAfterCheck = CheckSiteCode.SiteCode;
                    //            }
                    //            else if (!string.IsNullOrEmpty(MW_ODU_Site))
                    //            {
                    //                TLIsite CheckSiteCode = _unitOfWork.SiteRepository
                    //                    .GetWhereFirst(x => x.SiteCode.ToLower() == MW_ODU_Site.ToLower());

                    //                if (CheckSiteCode == null)
                    //                {
                    //                    MW_ODUTransaction.Dispose();

                    //                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //                    {
                    //                        CreatedAt = DateTime.Now,
                    //                        ErrMsg = $"(Site) coulumn's value: ({MW_ODU_Site}) doesn't exist in TLIS",
                    //                        IsDeleted = false,
                    //                        IsLib = false,
                    //                        RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                    //                        SheetName = "ODU info",
                    //                        UniqueName = $"(Serial Number) : {MW_ODUSerialNumber}"
                    //                    };

                    //                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //                    _unitOfWork.SaveChanges();

                    //                    continue;
                    //                }

                    //                MW_ODU_SiteCodeAfterCheck = MW_ODU_Site;
                    //            }
                    //            else
                    //            {
                    //                MW_ODUTransaction.Dispose();

                    //                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //                {
                    //                    CreatedAt = DateTime.Now,
                    //                    ErrMsg = $"One of those columns must have a value (Site Code, Site Name, Site)",
                    //                    IsDeleted = false,
                    //                    IsLib = false,
                    //                    RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                    //                    SheetName = "ODU info",
                    //                    UniqueName = $"(Serial Number) : {MW_ODUSerialNumber}"
                    //                };

                    //                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //                _unitOfWork.SaveChanges();

                    //                continue;
                    //            }

                    //            // Auto Fill The MW_ODU Name Because it's not Found in The CSV File..
                    //            // MW_ODU Name = Dish Name + ODU Model + Polarity on Location..

                    //            string MW_ODUName = string.Empty;
                    //            string MW_ODU_MW_DishName = MW_ODUDataTable.Rows[j]["ODU MW Dish Name"].ToString();

                    //            int? MW_ODUCivilSupportCategoryId = 0;
                    //            string MW_ODUTowerType = MW_ODUDataTable.Rows[j]["type"].ToString();

                    //            if (string.IsNullOrEmpty(MW_ODU_MW_DishName))
                    //            {
                    //                MW_ODUTransaction.Dispose();

                    //                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //                {
                    //                    CreatedAt = DateTime.Now,
                    //                    ErrMsg = $"(ODU MW Dish Name) column's : ({MW_ODU_MW_DishName}) doesn't exist on this civil type : ({MW_ODUTowerType})",
                    //                    IsDeleted = false,
                    //                    IsLib = false,
                    //                    RefTable = Helpers.Constants.TablesNames.TLIcivilLoads.ToString(),
                    //                    SheetName = "ODU info",
                    //                    UniqueName = $"(Serial Number) : {MW_ODUSerialNumber}"
                    //                };

                    //                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //                _unitOfWork.SaveChanges();

                    //                continue;
                    //            }

                    //            TLIcivilLoads CheckMW_ODU_MW_DishName = _unitOfWork.CivilLoadsRepository
                    //                .GetIncludeWhereFirst(x => !x.Dismantle && x.allLoadInstId != null ?
                    //                    (x.allLoadInst.mwDishId != null ? (!x.allLoadInst.Draft &&
                    //                        x.allLoadInst.mwDish.DishName.ToLower() == MW_ODU_MW_DishName.ToLower()) : false) : false,
                    //                            x => x.allLoadInst, x => x.allLoadInst.mwDish, x => x.allLoadInst.mwDish.PolarityOnLocation,
                    //                            x => x.allCivilInst, x => x.allCivilInst.civilWithLegs, x => x.allCivilInst.civilWithLegs.CivilWithLegsLib,
                    //                            x => x.allCivilInst.civilWithoutLeg, x => x.allCivilInst.civilWithoutLeg.CivilWithoutlegsLib,
                    //                            x => x.allCivilInst.civilWithoutLeg.CivilWithoutlegsLib.CivilWithoutLegCategory);

                    //            if (CheckMW_ODU_MW_DishName != null)
                    //            {
                    //                if (CheckMW_ODU_MW_DishName.allLoadInst.mwDish.PolarityOnLocation != null)
                    //                    MW_ODUName = $"{MW_ODULibraryModelName} {MW_ODU_MW_DishName} " +
                    //                        $"{CheckMW_ODU_MW_DishName.allLoadInst.mwDish.PolarityOnLocation.Name}";
                    //                else
                    //                    MW_ODUName = $"{MW_ODULibraryModelName} {MW_ODU_MW_DishName}";

                    //                //MW_ODU_MW_DishId = CheckMW_ODU_MW_DishName.allLoadInst.mwDishId;

                    //                if (!string.IsNullOrEmpty(MW_ODUTowerType))
                    //                {
                    //                    if (MW_ODUTowerType.ToLower() == "Tower".ToLower() ? CheckMW_ODU_MW_DishName.allCivilInst.civilWithLegsId != null : false)
                    //                    {
                    //                        MW_ODUCivilSupportCategoryId = CheckMW_ODU_MW_DishName.allCivilInst.civilWithLegs.CivilWithLegsLib.civilSteelSupportCategoryId;
                    //                    }
                    //                    else if (MW_ODUTowerType.ToLower() == "Mast".ToLower() ?
                    //                        (CheckMW_ODU_MW_DishName.allCivilInst.civilWithoutLegId != null ?
                    //                           CheckMW_ODU_MW_DishName.allCivilInst.civilWithoutLeg.CivilWithoutlegsLib.CivilWithoutLegCategory.Name.ToLower() == "Mast".ToLower() : false) : false)
                    //                    {
                    //                        MW_ODUCivilSupportCategoryId = CheckMW_ODU_MW_DishName.allCivilInst.civilWithoutLeg.CivilWithoutlegsLib.CivilSteelSupportCategoryId;
                    //                    }
                    //                    else if (MW_ODUTowerType.ToLower() == "Monopole".ToLower() ?
                    //                        (CheckMW_ODU_MW_DishName.allCivilInst.civilWithoutLegId != null ?
                    //                           CheckMW_ODU_MW_DishName.allCivilInst.civilWithoutLeg.CivilWithoutlegsLib.CivilWithoutLegCategory.Name.ToLower() == "Monopole".ToLower() : false) : false)
                    //                    {
                    //                        MW_ODUCivilSupportCategoryId = CheckMW_ODU_MW_DishName.allCivilInst.civilWithoutLeg.CivilWithoutlegsLib.CivilSteelSupportCategoryId;
                    //                    }
                    //                    else
                    //                    {
                    //                        MW_ODUTransaction.Dispose();

                    //                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //                        {
                    //                            CreatedAt = DateTime.Now,
                    //                            ErrMsg = $"This Microwave Dish : ({MW_ODU_MW_DishName}) doesn't exist on this civil type : ({MW_ODUTowerType})",
                    //                            IsDeleted = false,
                    //                            IsLib = false,
                    //                            RefTable = Helpers.Constants.TablesNames.TLIcivilLoads.ToString(),
                    //                            SheetName = "ODU info",
                    //                            UniqueName = $"(Serial Number) : {MW_ODUSerialNumber}"
                    //                        };

                    //                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //                        _unitOfWork.SaveChanges();

                    //                        continue;
                    //                    }
                    //                }
                    //                else
                    //                {
                    //                    MW_ODUTransaction.Dispose();

                    //                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //                    {
                    //                        CreatedAt = DateTime.Now,
                    //                        ErrMsg = $"(type) column's value can't be null or empty",
                    //                        IsDeleted = false,
                    //                        IsLib = false,
                    //                        RefTable = Helpers.Constants.TablesNames.TLIcivilLoads.ToString(),
                    //                        SheetName = "ODU info",
                    //                        UniqueName = $"(Serial Number) : {MW_ODUSerialNumber}"
                    //                    };

                    //                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //                    _unitOfWork.SaveChanges();

                    //                    continue;
                    //                }
                    //            }
                    //            else
                    //            {
                    //                MW_ODUTransaction.Dispose();

                    //                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //                {
                    //                    CreatedAt = DateTime.Now,
                    //                    ErrMsg = $"(ODU MW Dish Name) column's value : ({MW_ODU_MW_DishName}) doesn't exist in TLIS",
                    //                    IsDeleted = false,
                    //                    IsLib = false,
                    //                    RefTable = Helpers.Constants.TablesNames.TLIcivilLoads.ToString(),
                    //                    SheetName = "ODU info",
                    //                    UniqueName = $"(Serial Number) : {MW_ODUSerialNumber}"
                    //                };

                    //                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //                _unitOfWork.SaveChanges();

                    //                continue;
                    //            }

                    //            string MW_ODUHeightString = MW_ODUDataTable.Rows[j]["ODU-Height (m):"].ToString();
                    //            float? MW_ODUHeight = null;
                    //            if (!string.IsNullOrEmpty(MW_ODUHeightString))
                    //            {
                    //                CheckParser = float.TryParse(MW_ODUHeightString, out FloatParser);

                    //                if (CheckParser)
                    //                    MW_ODUHeight = FloatParser;

                    //                else
                    //                {
                    //                    MW_ODUTransaction.Dispose();

                    //                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //                    {
                    //                        CreatedAt = DateTime.Now,
                    //                        ErrMsg = $"(ODU-Height (m):) coulumn's value: ({MW_ODUHeightString}) must be a number",
                    //                        IsDeleted = false,
                    //                        IsLib = false,
                    //                        RefTable = Helpers.Constants.TablesNames.TLImwODU.ToString(),
                    //                        SheetName = "ODU info",
                    //                        UniqueName = $"(Serial Number) : {MW_ODUSerialNumber}"
                    //                    };

                    //                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //                    _unitOfWork.SaveChanges();

                    //                    continue;
                    //                }
                    //            }

                    //            string MW_ODUOwnerName = MW_ODUDataTable.Rows[j]["ODU-Owner"].ToString();
                    //            int? MW_ODUOwnerId = null;
                    //            if (!string.IsNullOrEmpty(MW_ODUOwnerName))
                    //            {
                    //                TLIowner CheckMW_ODUOwnerName = _unitOfWork.OwnerRepository
                    //                    .GetWhereFirst(x => x.OwnerName.ToLower() == MW_ODUOwnerName.ToLower() && !x.Deleted);

                    //                if (CheckMW_ODUOwnerName == null)
                    //                {
                    //                    MW_ODUTransaction.Dispose();

                    //                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //                    {
                    //                        CreatedAt = DateTime.Now,
                    //                        ErrMsg = $"(ODU-Owner) coulumn's value: ({MW_ODUOwnerName}) doesn't exist in TLIS",
                    //                        IsDeleted = false,
                    //                        IsLib = false,
                    //                        RefTable = Helpers.Constants.TablesNames.TLIowner.ToString(),
                    //                        SheetName = "ODU info",
                    //                        UniqueName = $"(Serial Number) : {MW_ODUSerialNumber}"
                    //                    };

                    //                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //                    _unitOfWork.SaveChanges();

                    //                    continue;
                    //                }

                    //                MW_ODUOwnerId = CheckMW_ODUOwnerName.Id;
                    //            }

                    //            string MW_ODUInstallationPlaceName = MW_ODUDataTable.Rows[j]["ODU-installation place"].ToString();
                    //            int? MW_ODUInstallationPlaceId = null;
                    //            if (!string.IsNullOrEmpty(MW_ODUInstallationPlaceName))
                    //            {
                    //                TLIinstallationPlace CheckMW_ODUInstallationPlaceName = _unitOfWork.InstallationPlaceRepository
                    //                    .GetWhereFirst(x => x.Name.ToLower() == MW_ODUInstallationPlaceName.ToLower() && !x.Deleted);

                    //                if (CheckMW_ODUInstallationPlaceName == null)
                    //                {
                    //                    MW_ODUTransaction.Dispose();

                    //                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //                    {
                    //                        CreatedAt = DateTime.Now,
                    //                        ErrMsg = $"(ODU-installation place) coulumn's value: ({MW_ODUInstallationPlaceName}) doesn't exist in TLIS",
                    //                        IsDeleted = false,
                    //                        IsLib = false,
                    //                        RefTable = Helpers.Constants.TablesNames.TLIinstallationPlace.ToString(),
                    //                        SheetName = "ODU info",
                    //                        UniqueName = $"(Serial Number) : {MW_ODUSerialNumber}"
                    //                    };

                    //                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //                    _unitOfWork.SaveChanges();

                    //                    continue;
                    //                }

                    //                MW_ODUInstallationPlaceId = CheckMW_ODUInstallationPlaceName.Id;
                    //            }

                    //            // Check MW_ODU Name if Already Exist in The Same Site..

                    //            TLIcivilLoads CheckMW_ODUNameIfAlreadyExist = _unitOfWork.CivilLoadsRepository
                    //                .GetIncludeWhereFirst(x => !x.Dismantle && x.SiteCode.ToLower() == MW_ODU_SiteCodeAfterCheck.ToLower() && x.allLoadInstId != null ?
                    //                    (!x.allLoadInst.Draft && x.allLoadInst.mwODUId != null ?
                    //                        (x.allLoadInst.mwODU.Name.ToLower() == MW_ODUName.ToLower()) : false) : false,
                    //                            x => x.allLoadInst, x => x.allLoadInst.mwODU);

                    //            if (CheckMW_ODUNameIfAlreadyExist != null)
                    //            {
                    //                MW_ODUTransaction.Dispose();

                    //                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //                {
                    //                    CreatedAt = DateTime.Now,
                    //                    ErrMsg = $"(ODU Name) value: ({MW_ODUName}) is already exist in this site: ({MW_ODU_SiteCodeAfterCheck})",
                    //                    IsDeleted = false,
                    //                    IsLib = false,
                    //                    RefTable = Helpers.Constants.TablesNames.TLIcivilLoads.ToString(),
                    //                    SheetName = "ODU info",
                    //                    UniqueName = $"(Serial Number) : {MW_ODUSerialNumber}"
                    //                };

                    //                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //                _unitOfWork.SaveChanges();

                    //                continue;
                    //            }

                    //            //TLImwODU NewMW_ODUEntity = new TLImwODU()
                    //            //{
                    //            //    CenterHigh = 0,
                    //            //    HBA = 0,
                    //            //    HieghFromLand = 0,
                    //            //    EquivalentSpace = 0,
                    //            //    SpaceInstallation = 0,
                    //            //    Name = MW_ODUName,
                    //            //    Height = MW_ODUHeight,
                    //            //    Serial_Number = MW_ODUSerialNumber,
                    //            //    Notes = MW_ODUDataTable.Rows[j]["Notes"].ToString(),
                    //            //    MwODULibraryId = MW_ODULibraryId,
                    //            //    Visiable_Status = MW_ODUDataTable.Rows[j]["Current Status"].ToString(),
                    //            //    OwnerId = MW_ODUOwnerId,
                    //            //    //Mw_DishId = MW_ODU_MW_DishId
                    //            //};

                    //            // if ODU Connections == SeparateMount => SideArmName Can't Be Null Or Empty..
                    //            // else if ODU Connections == DirectMount => MW_DishName Can't Be Null Or Empty..

                    //            TLIcivilLoads CheckMW_ODUSideArmName = new TLIcivilLoads();

                    //            string MW_ODUSideArmName = MW_ODUDataTable.Rows[j]["Side Arm Name"].ToString();
                    //            int? MW_ODUSideArmId = null;
                    //            if (!string.IsNullOrEmpty(MW_ODUSideArmName))
                    //            {
                    //                CheckMW_ODUSideArmName = _unitOfWork.CivilLoadsRepository
                    //                    .GetIncludeWhereFirst(x => !x.Dismantle && x.sideArmId != null ?
                    //                        (!x.sideArm.Draft && x.sideArm.Name.ToLower() == MW_ODUSideArmName.ToLower()) : false,
                    //                            x => x.sideArm, x => x.allCivilInst, x => x.allCivilInst.civilWithLegs,
                    //                            x => x.allCivilInst.civilWithLegs.CivilWithLegsLib, x => x.allCivilInst.civilWithoutLeg,
                    //                            x => x.allCivilInst.civilWithoutLeg.CivilWithoutlegsLib, x => x.allCivilInst.civilWithoutLeg.CivilWithoutlegsLib.CivilWithoutLegCategory);

                    //                if (CheckMW_ODUSideArmName == null)
                    //                {
                    //                    MW_ODUTransaction.Dispose();

                    //                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //                    {
                    //                        CreatedAt = DateTime.Now,
                    //                        ErrMsg = $"(Side Arm Name) column's value: ({MW_ODUSideArmName}) doesn't exist in TLIS",
                    //                        IsDeleted = false,
                    //                        IsLib = false,
                    //                        RefTable = Helpers.Constants.TablesNames.TLIcivilLoads.ToString(),
                    //                        SheetName = "ODU info",
                    //                        UniqueName = $"(Serial Number) : {MW_ODUSerialNumber}"
                    //                    };

                    //                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //                    _unitOfWork.SaveChanges();

                    //                    continue;
                    //                }

                    //                MW_ODUSideArmId = CheckMW_ODUSideArmName.sideArmId;

                    //                if (!string.IsNullOrEmpty(MW_ODUTowerType))
                    //                {
                    //                    if (MW_ODUTowerType.ToLower() == "Tower".ToLower() ? CheckMW_ODUSideArmName.allCivilInst.civilWithLegsId != null : false)
                    //                    {
                    //                        MW_ODUCivilSupportCategoryId = CheckMW_ODUSideArmName.allCivilInst.civilWithLegs.CivilWithLegsLib.civilSteelSupportCategoryId;
                    //                    }
                    //                    else if (MW_ODUTowerType.ToLower() == "Mast".ToLower() ?
                    //                        (CheckMW_ODUSideArmName.allCivilInst.civilWithoutLegId != null ?
                    //                           CheckMW_ODUSideArmName.allCivilInst.civilWithoutLeg.CivilWithoutlegsLib.CivilWithoutLegCategory.Name.ToLower() == "Mast".ToLower() : false) : false)
                    //                    {
                    //                        MW_ODUCivilSupportCategoryId = CheckMW_ODUSideArmName.allCivilInst.civilWithoutLeg.CivilWithoutlegsLib.CivilSteelSupportCategoryId;
                    //                    }
                    //                    else if (MW_ODUTowerType.ToLower() == "Monopole".ToLower() ?
                    //                        (CheckMW_ODUSideArmName.allCivilInst.civilWithoutLegId != null ?
                    //                           CheckMW_ODUSideArmName.allCivilInst.civilWithoutLeg.CivilWithoutlegsLib.CivilWithoutLegCategory.Name.ToLower() == "Monopole".ToLower() : false) : false)
                    //                    {
                    //                        MW_ODUCivilSupportCategoryId = CheckMW_ODUSideArmName.allCivilInst.civilWithoutLeg.CivilWithoutlegsLib.CivilSteelSupportCategoryId;
                    //                    }
                    //                    else
                    //                    {
                    //                        MW_ODUTransaction.Dispose();

                    //                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //                        {
                    //                            CreatedAt = DateTime.Now,
                    //                            ErrMsg = $"This SideArm : ({MW_ODUSideArmName}) doesn't exist on this civil type : ({MW_ODUTowerType})",
                    //                            IsDeleted = false,
                    //                            IsLib = false,
                    //                            RefTable = Helpers.Constants.TablesNames.TLIcivilLoads.ToString(),
                    //                            SheetName = "ODU info",
                    //                            UniqueName = $"(Serial Number) : {MW_ODUSerialNumber}"
                    //                        };

                    //                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //                        _unitOfWork.SaveChanges();

                    //                        continue;
                    //                    }
                    //                }
                    //                else
                    //                {
                    //                    MW_ODUTransaction.Dispose();

                    //                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //                    {
                    //                        CreatedAt = DateTime.Now,
                    //                        ErrMsg = $"(type) column's value can't be null or empty",
                    //                        IsDeleted = false,
                    //                        IsLib = false,
                    //                        RefTable = Helpers.Constants.TablesNames.TLIcivilLoads.ToString(),
                    //                        SheetName = "ODU info",
                    //                        UniqueName = $"(Serial Number) : {MW_ODUSerialNumber}"
                    //                    };

                    //                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //                    _unitOfWork.SaveChanges();

                    //                    continue;
                    //                }
                    //            }

                    //            string ODUConnectionsImportValue = MW_ODUDataTable.Rows[j]["ODU Connections"].ToString();
                    //            if (!string.IsNullOrEmpty(ODUConnectionsImportValue))
                    //            {
                    //                if (ODUConnectionsImportValue.ToLower() == "SeparateMount".ToLower() ||
                    //                    ODUConnectionsImportValue.ToLower() == "Separate Mount".ToLower())
                    //                {
                    //                    NewMW_ODUEntity.ODUConnections = ODUConnections.SeparateMount;

                    //                    if (MW_ODUSideArmId == null)
                    //                    {
                    //                        MW_ODUTransaction.Dispose();

                    //                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //                        {
                    //                            CreatedAt = DateTime.Now,
                    //                            ErrMsg = $"When (ODU Connections) column's value is equal to: ({ODUConnectionsImportValue}) then " +
                    //                                $"(Side Arm Name) column's value can't be null or empty",
                    //                            IsDeleted = false,
                    //                            IsLib = false,
                    //                            RefTable = Helpers.Constants.TablesNames.TLImwODU.ToString(),
                    //                            SheetName = "ODU info",
                    //                            UniqueName = $"(Serial Number) : {MW_ODUSerialNumber}"
                    //                        };

                    //                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //                        _unitOfWork.SaveChanges();

                    //                        continue;
                    //                    }
                    //                }
                    //                else if (ODUConnectionsImportValue.ToLower() == "DirectMount".ToLower() ||
                    //                    ODUConnectionsImportValue.ToLower() == "Direct Mount".ToLower())
                    //                {
                    //                    NewMW_ODUEntity.ODUConnections = ODUConnections.DirectMount;

                    //                    //if (MW_ODU_MW_DishId == null)
                    //                    //{
                    //                    //    MW_ODUTransaction.Dispose();

                    //                    //    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //                    //    {
                    //                    //        CreatedAt = DateTime.Now,
                    //                    //        ErrMsg = $"When (ODU Connections) column's value is equal to: ({ODUConnectionsImportValue}) then " +
                    //                    //            $"(ODU MW Dish Name) column's value can't be null or empty",
                    //                    //        IsDeleted = false,
                    //                    //        IsLib = false,
                    //                    //        RefTable = Helpers.Constants.TablesNames.TLImwODU.ToString(),
                    //                    //        SheetName = "ODU info",
                    //                    //        UniqueName = $"(Serial Number) : {MW_ODUSerialNumber}"
                    //                    //    };

                    //                    //    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //                    //    _unitOfWork.SaveChanges();

                    //                    //    continue;
                    //                    //}
                    //                }
                    //                else
                    //                {
                    //                    MW_ODUTransaction.Dispose();

                    //                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //                    {
                    //                        CreatedAt = DateTime.Now,
                    //                        ErrMsg = $"(ODU Connections) coulumn's value must be either (SeparateMount, DirectMount)",
                    //                        IsDeleted = false,
                    //                        IsLib = false,
                    //                        RefTable = Helpers.Constants.TablesNames.TLImwODU.ToString(),
                    //                        SheetName = "ODU info",
                    //                        UniqueName = $"(Serial Number) : {MW_ODUSerialNumber}"
                    //                    };

                    //                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //                    _unitOfWork.SaveChanges();

                    //                    continue;
                    //                }
                    //            }
                    //            else
                    //            {
                    //                MW_ODUTransaction.Dispose();

                    //                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //                {
                    //                    CreatedAt = DateTime.Now,
                    //                    ErrMsg = $"(ODU Connections) coulumn's value can't be null or empty",
                    //                    IsDeleted = false,
                    //                    IsLib = false,
                    //                    RefTable = Helpers.Constants.TablesNames.TLImwODU.ToString(),
                    //                    SheetName = "ODU info",
                    //                    UniqueName = $"(Serial Number) : {MW_ODUSerialNumber}"
                    //                };

                    //                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //                _unitOfWork.SaveChanges();

                    //                continue;
                    //            }
                    //            _unitOfWork.MW_ODURepository.Add(NewMW_ODUEntity);
                    //            _unitOfWork.SaveChanges();

                    //            //
                    //            // Dynamic Attributes..
                    //            //

                    //            List<TLIdynamicAttInstValue> MW_ODUDynamicValues = new List<TLIdynamicAttInstValue>();

                    //            foreach (TLIdynamicAtt MissedAttribute in MW_ODUMissedAttributes)
                    //            {
                    //                if (!string.IsNullOrEmpty(MW_ODUDataTable.Rows[j][MissedAttribute.Key].ToString()))
                    //                {
                    //                    TLIdynamicAttInstValue MissedAttributeValue = new TLIdynamicAttInstValue()
                    //                    {
                    //                        tablesNamesId = MW_ODUTableNameId,
                    //                        disable = false,
                    //                        DynamicAttId = MissedAttribute.Id,
                    //                        InventoryId = NewMW_ODUEntity.Id
                    //                    };

                    //                    if (MissedAttribute.DataType.Name.ToLower() == "string".ToLower())
                    //                        MissedAttributeValue.ValueString = MW_ODUDataTable.Rows[j][MissedAttribute.Key].ToString();
                    //                    else if (MissedAttribute.DataType.Name.ToLower() == "int".ToLower() ||
                    //                        MissedAttribute.DataType.Name.ToLower() == "double".ToLower())
                    //                    {
                    //                        double DoubleParser = 0;

                    //                        CheckParser = double.TryParse(MW_ODUDataTable.Rows[j][MissedAttribute.Key].ToString(), out DoubleParser);

                    //                        if (CheckParser)
                    //                            MissedAttributeValue.ValueDouble = DoubleParser;

                    //                        else
                    //                        {
                    //                            MW_ODUTransaction.Dispose();

                    //                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //                            {
                    //                                CreatedAt = DateTime.Now,
                    //                                ErrMsg = $"({MissedAttribute.Key}) coulumn's value: ({MW_ODUDataTable.Rows[j][MissedAttribute.Key]}) must be a number",
                    //                                IsDeleted = false,
                    //                                IsLib = false,
                    //                                RefTable = Helpers.Constants.TablesNames.TLImwODU.ToString(),
                    //                                SheetName = "ODU info",
                    //                                UniqueName = $"(Serial Number) : {MW_ODUSerialNumber}"
                    //                            };

                    //                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //                            _unitOfWork.SaveChanges();

                    //                            continue;
                    //                        }
                    //                    }
                    //                    else if (MissedAttribute.DataType.Name.ToLower() == "boolean".ToLower())
                    //                    {
                    //                        bool BooleanParser = false;

                    //                        CheckParser = bool.TryParse(MW_ODUDataTable.Rows[j][MissedAttribute.Key].ToString(), out BooleanParser);

                    //                        if (CheckParser)
                    //                            MissedAttributeValue.ValueBoolean = BooleanParser;

                    //                        else
                    //                        {
                    //                            MW_ODUTransaction.Dispose();

                    //                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //                            {
                    //                                CreatedAt = DateTime.Now,
                    //                                ErrMsg = $"({MissedAttribute.Key}) coulumn's value: ({MW_ODUDataTable.Rows[j][MissedAttribute.Key]}) must be boolean (Yes/No)",
                    //                                IsDeleted = false,
                    //                                IsLib = false,
                    //                                RefTable = Helpers.Constants.TablesNames.TLImwODU.ToString(),
                    //                                SheetName = "ODU info",
                    //                                UniqueName = $"(Serial Number) : {MW_ODUSerialNumber}"
                    //                            };

                    //                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //                            _unitOfWork.SaveChanges();

                    //                            continue;
                    //                        }
                    //                    }
                    //                    else if (MissedAttribute.DataType.Name.ToLower() == "datetime".ToLower())
                    //                    {
                    //                        DateTime DateTimeParser = DateTime.Now;

                    //                        CheckParser = DateTime.TryParse(MW_ODUDataTable.Rows[j][MissedAttribute.Key].ToString(), out DateTimeParser);

                    //                        if (CheckParser)
                    //                            MissedAttributeValue.ValueDateTime = DateTimeParser;

                    //                        else
                    //                        {
                    //                            MW_ODUTransaction.Dispose();

                    //                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //                            {
                    //                                CreatedAt = DateTime.Now,
                    //                                ErrMsg = $"({MissedAttribute.Key}) coulumn's value: ({MW_ODUDataTable.Rows[j][MissedAttribute.Key]}) must be date",
                    //                                IsDeleted = false,
                    //                                IsLib = false,
                    //                                RefTable = Helpers.Constants.TablesNames.TLImwODU.ToString(),
                    //                                SheetName = "ODU info",
                    //                                UniqueName = $"(Serial Number) : {MW_ODUSerialNumber}"
                    //                            };

                    //                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //                            _unitOfWork.SaveChanges();

                    //                            continue;
                    //                        }
                    //                    }

                    //                    MW_ODUDynamicValues.Add(MissedAttributeValue);
                    //                }
                    //            }
                    //            if (MW_ODUDynamicValues.Count() > 0)
                    //            {
                    //                _unitOfWork.DynamicAttInstValueRepository.AddRange(MW_ODUDynamicValues);
                    //                _unitOfWork.SaveChanges();
                    //            }

                    //            //
                    //            // AllLoadInst Information..
                    //            //

                    //            bool MW_ODUAllLoadInstActiveComponent = true;
                    //            if (!string.IsNullOrEmpty(MW_ODUDataTable.Rows[j]["Active component"].ToString()))
                    //            {
                    //                if (MW_ODUDataTable.Rows[j]["Active component"].ToString().ToLower() != "Yes".ToLower())
                    //                    MW_ODUAllLoadInstActiveComponent = false;
                    //            }

                    //            string MW_ODUCurrentStatus = MW_ODUDataTable.Rows[j]["Current Status"].ToString();
                    //            int? MW_ODUAllLoadInstItemStatusId = null;
                    //            if (!string.IsNullOrEmpty(MW_ODUCurrentStatus))
                    //            {
                    //                TLIitemStatus CheckItemStatusIfExist = _unitOfWork.ItemStatusRepository
                    //                    .GetWhereFirst(x => x.Name.ToLower() == MW_ODUCurrentStatus.ToLower() && !x.Deleted);

                    //                if (CheckItemStatusIfExist != null)
                    //                    MW_ODUAllLoadInstItemStatusId = CheckItemStatusIfExist.Id;

                    //                else
                    //                {
                    //                    TLIitemStatus itemStatus = new TLIitemStatus();
                    //                    itemStatus.Name = MW_ODUCurrentStatus;
                    //                    _unitOfWork.ItemStatusRepository.Add(itemStatus);
                    //                    _unitOfWork.SaveChanges();

                    //                    MW_ODUAllLoadInstItemStatusId = itemStatus.Id;
                    //                }
                    //            }

                    //            TLIallLoadInst MW_ODU_AllLoadInst = new TLIallLoadInst()
                    //            {
                    //                mwODUId = NewMW_ODUEntity.Id,
                    //                Active = MW_ODUAllLoadInstActiveComponent,
                    //                Draft = false,
                    //                ItemStatusId = MW_ODUAllLoadInstItemStatusId
                    //            };

                    //            _unitOfWork.AllLoadInstRepository.Add(MW_ODU_AllLoadInst);
                    //            _unitOfWork.SaveChanges();

                    //            //
                    //            // Civil Loads Information..
                    //            //

                    //            int MW_ODUAllCivilInstId = 0;
                    //            if (!string.IsNullOrEmpty(MW_ODUSideArmName))
                    //            {
                    //                if (CheckMW_ODUSideArmName.SiteCode.ToLower() != MW_ODU_SiteCodeAfterCheck.ToLower())
                    //                {
                    //                    MW_ODUTransaction.Dispose();

                    //                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //                    {
                    //                        CreatedAt = DateTime.Now,
                    //                        ErrMsg = $"(Side Arm Name) column's value: ({MW_ODUSideArmName}) doesn't exist in this site: ({MW_ODU_SiteCodeAfterCheck})",
                    //                        IsDeleted = false,
                    //                        IsLib = false,
                    //                        RefTable = Helpers.Constants.TablesNames.TLIcivilLoads.ToString(),
                    //                        SheetName = "ODU info",
                    //                        UniqueName = $"(Serial Number) : {MW_ODUSerialNumber}"
                    //                    };

                    //                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //                    _unitOfWork.SaveChanges();

                    //                    continue;
                    //                }

                    //                MW_ODUSideArmId = CheckMW_ODUSideArmName.sideArmId;
                    //                MW_ODUAllCivilInstId = CheckMW_ODUSideArmName.allCivilInstId;
                    //            }

                    //            string MW_ODUStatusDateString = MW_ODUDataTable.Rows[j]["Status Date"].ToString();
                    //            DateTime MW_ODUStatusDate = DateTime.Now;
                    //            if (!string.IsNullOrEmpty(MW_ODUStatusDateString))
                    //            {
                    //                DateTime DateTimeParser = DateTime.Now;

                    //                CheckParser = DateTime.TryParse(MW_ODUStatusDateString, out DateTimeParser);

                    //                if (CheckParser)
                    //                    MW_ODUStatusDate = DateTimeParser;

                    //                else
                    //                {
                    //                    MW_ODUTransaction.Dispose();

                    //                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //                    {
                    //                        CreatedAt = DateTime.Now,
                    //                        ErrMsg = $"(Status Date) coulumn's value must be date",
                    //                        IsDeleted = false,
                    //                        IsLib = false,
                    //                        RefTable = Helpers.Constants.TablesNames.TLIcivilLoads.ToString(),
                    //                        SheetName = "ODU info",
                    //                        UniqueName = $"(Serial Number) : {MW_ODUSerialNumber}"
                    //                    };

                    //                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //                    _unitOfWork.SaveChanges();

                    //                    continue;
                    //                }
                    //            }

                    //            TLIcivilLoads MW_ODUCivilLoads = new TLIcivilLoads()
                    //            {
                    //                SiteCode = MW_ODU_SiteCodeAfterCheck,
                    //                allCivilInstId = MW_ODUAllCivilInstId,
                    //                sideArmId = MW_ODUSideArmId,
                    //                allLoadInstId = MW_ODU_AllLoadInst.Id,
                    //                legId = null,
                    //                InstallationDate = MW_ODUStatusDate,
                    //                civilSteelSupportCategoryId = MW_ODUCivilSupportCategoryId
                    //            };

                    //            _unitOfWork.CivilLoadsRepository.Add(MW_ODUCivilLoads);
                    //            _unitOfWork.SaveChanges();

                    //            MW_ODUTransaction.Complete();
                    //        }
                    //        catch (Exception err)
                    //        {
                    //            MW_ODUTransaction.Dispose();

                    //            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                    //            {
                    //                CreatedAt = DateTime.Now,
                    //                ErrMsg = err.Message,
                    //                IsDeleted = false,
                    //                IsLib = false,
                    //                RefTable = Helpers.Constants.TablesNames.TLImwODU.ToString(),
                    //                SheetName = "ODU info",
                    //                UniqueName = $"(Serial Number) : {MW_ODUDataTable.Rows[j]["Serial Number"]}"
                    //            };

                    //            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                    //            _unitOfWork.SaveChanges();

                    //            continue;
                    //        }
                    //    }
                    //}

                    ////////////////////////////////////////////////////////////
                    /////////////////// Radio RRU //////////////////////////////
                    ////////////////////////////////////////////////////////////

                    RadioRRU:

                        ExcelWorksheet RadioRRUSheet = package.Workbook.Worksheets.FirstOrDefault(x => x.Name.ToLower() == "RRU info".ToLower());
                        int RadioRRURows = 0;
                        try
                        {
                            RadioRRURows = RadioRRUSheet.Dimension.End.Row;
                        }
                        catch (NullReferenceException)
                        {
                            goto Power;
                        }
                        int RadioRRUColumns = RadioRRUSheet.Dimension.End.Column;

                        DataTable RadioRRUDataTable = new DataTable();
                        List<string> RadioRRUSheetColumn = new List<string>();

                        for (int i = 1; i <= RadioRRUColumns; i++)
                        {
                            string ColName = RadioRRUSheet.Cells[1, i].Value.ToString().Trim();
                            ColName = Regex.Replace(ColName, @"\s+", " ");

                            RadioRRUSheetColumn.Add(ColName);
                            RadioRRUDataTable.Columns.Add(ColName);
                        }

                        for (int i = 2; i <= RadioRRURows; i++)
                        {
                            DataRow RadioRRUDataRow = RadioRRUDataTable.NewRow();
                            for (int j = 1; j <= RadioRRUColumns; j++)
                            {
                                string ColName = RadioRRUSheet.Cells[1, j].Value.ToString().Trim();
                                ColName = Regex.Replace(ColName, @"\s+", " ");

                                object Value = RadioRRUSheet.Cells[i, j].Value;
                                if (Value != null)
                                {
                                    string ValueAsString = Value.ToString().Trim();
                                    ValueAsString = Regex.Replace(ValueAsString, @"\s+", " ");

                                    Value = ValueAsString;
                                    RadioRRUDataRow[ColName] = Value;
                                }
                                else
                                {
                                    RadioRRUDataRow[ColName] = Value;
                                }
                            }
                            RadioRRUDataTable.Rows.Add(RadioRRUDataRow);
                        }

                        //
                        // Dynamic Attributes For Radio RRU..
                        //

                        int RadioRRUTableNameId = TablesName.FirstOrDefault(x =>
                            x.TableName.ToLower() == Helpers.Constants.TablesNames.TLIradioRRU.ToString().ToLower()).Id;

                        List<TLIdynamicAtt> RadioRRUMissedAttributeCSV = new List<TLIdynamicAtt>()
                        {
                            new TLIdynamicAtt
                            {
                                Key = "Created",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "DateTime".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = RadioRRUTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Created By",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = RadioRRUTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Modified",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "DateTime".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = RadioRRUTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Modified By",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = RadioRRUTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Related Plan",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = RadioRRUTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "user",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = RadioRRUTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Current Plan",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = RadioRRUTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "collect plan",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = RadioRRUTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Read",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = RadioRRUTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Title",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = RadioRRUTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            }
                        };

                        List<TLIdynamicAtt> RadioRRUAllDynamicAttribute = _unitOfWork.DynamicAttRepository
                            .GetWhere(x => x.tablesNamesId == RadioRRUTableNameId).ToList();

                        List<TLIdynamicAtt> RadioRRUMissedAttributes = RadioRRUMissedAttributeCSV
                          .Except(RadioRRUAllDynamicAttribute, new TLIdynamicAttComparer())
                          .ToList();

                        _unitOfWork.DynamicAttRepository.AddRange(RadioRRUMissedAttributes);
                        _unitOfWork.SaveChanges();

                        for (int j = 0; j <= RadioRRUDataTable.Rows.Count - 1; j++)
                        {
                            using (TransactionScope RadioRRUTransaction = new TransactionScope(TransactionScopeOption.Required,
                                new System.TimeSpan(0, 15, 0)))
                            {
                                try
                                {
                                    //
                                    // Library Information..
                                    //

                                    string RadioRRULibraryModel = RadioRRUDataTable.Rows[j]["RRU Type"].ToString();
                                    int RadioRRULibraryId = 0;
                                    if (!string.IsNullOrEmpty(RadioRRULibraryModel))
                                    {
                                        TLIradioRRULibrary RadioRRULibraryEntity = _unitOfWork.RadioRRULibraryRepository
                                            .GetWhereFirst(x => x.Model.ToLower() == RadioRRULibraryModel.ToLower() && !x.Deleted);

                                        if (RadioRRULibraryEntity == null)
                                        {
                                            RadioRRUTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(RRU Type) coulumn's value: ({RadioRRULibraryModel}) doesn't exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = true,
                                                RefTable = Helpers.Constants.TablesNames.TLIradioRRULibrary.ToString(),
                                                SheetName = "RRU info",
                                                UniqueName = $"(Serial Number) : {RadioRRUDataTable.Rows[j]["Serial Number"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        RadioRRULibraryId = RadioRRULibraryEntity.Id;
                                    }
                                    else
                                    {
                                        RadioRRUTransaction.Dispose();

                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                        {
                                            CreatedAt = DateTime.Now,
                                            ErrMsg = $"(RRU Type) coulumn's value can't be null or empty",
                                            IsDeleted = false,
                                            IsLib = true,
                                            RefTable = Helpers.Constants.TablesNames.TLIradioRRULibrary.ToString(),
                                            SheetName = "RRU info",
                                            UniqueName = $"(Serial Number) : {RadioRRUDataTable.Rows[j]["Serial Number"]}"
                                        };

                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                        _unitOfWork.SaveChanges();

                                        continue;
                                    }

                                    //
                                    // Installation Information..
                                    //

                                    string RadioRRU_SiteCodeAfterCheck = string.Empty;
                                    string RadioRRU_SiteCode = RadioRRUDataTable.Rows[j]["Site Code"].ToString();
                                    string RadioRRU_SiteName = RadioRRUDataTable.Rows[j]["Site Name"].ToString();
                                    string RadioRRU_Site = RadioRRUDataTable.Rows[j]["Site"].ToString();

                                    if (!string.IsNullOrEmpty(RadioRRU_SiteCode))
                                    {
                                        TLIsite CheckSiteCode = _unitOfWork.SiteRepository
                                            .GetWhereFirst(x => x.SiteCode.ToLower() == RadioRRU_SiteCode.ToLower());

                                        if (CheckSiteCode == null)
                                        {
                                            RadioRRUTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Site Code) coulumn's value: ({RadioRRU_SiteCode}) doesn't exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                                SheetName = "RRU info",
                                                UniqueName = $"(Serial Number) : {RadioRRUDataTable.Rows[j]["Serial Number"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        RadioRRU_SiteCodeAfterCheck = RadioRRU_SiteCode;
                                    }
                                    else if (!string.IsNullOrEmpty(RadioRRU_SiteName))
                                    {
                                        TLIsite CheckSiteCode = _unitOfWork.SiteRepository
                                            .GetWhereFirst(x => x.SiteName.ToLower() == RadioRRU_SiteName.ToLower());

                                        if (CheckSiteCode == null)
                                        {
                                            RadioRRUTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Site Name) coulumn's value: ({RadioRRU_SiteName}) doesn't exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                                SheetName = "RRU info",
                                                UniqueName = $"(Serial Number) : {RadioRRUDataTable.Rows[j]["Serial Number"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        RadioRRU_SiteCodeAfterCheck = CheckSiteCode.SiteCode;
                                    }
                                    else if (!string.IsNullOrEmpty(RadioRRU_Site))
                                    {
                                        TLIsite CheckSiteCode = _unitOfWork.SiteRepository
                                            .GetWhereFirst(x => x.SiteCode.ToLower() == RadioRRU_Site.ToLower());

                                        if (CheckSiteCode == null)
                                        {
                                            RadioRRUTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Site) coulumn's value: ({RadioRRU_Site}) doesn't exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                                SheetName = "RRU info",
                                                UniqueName = $"(Serial Number) : {RadioRRUDataTable.Rows[j]["Serial Number"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        RadioRRU_SiteCodeAfterCheck = RadioRRU_Site;
                                    }
                                    else
                                    {
                                        RadioRRUTransaction.Dispose();

                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                        {
                                            CreatedAt = DateTime.Now,
                                            ErrMsg = $"One of those columns must have a value (Site Code, Site Name, Site)",
                                            IsDeleted = false,
                                            IsLib = false,
                                            RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                            SheetName = "RRU info",
                                            UniqueName = $"(Serial Number) : {RadioRRUDataTable.Rows[j]["Serial Number"]}"
                                        };

                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                        _unitOfWork.SaveChanges();

                                        continue;
                                    }

                                    string RadioRRUSerialNumber = RadioRRUDataTable.Rows[j]["Serial Number"].ToString();

                                    string RadioRRUHeightBaseString = RadioRRUDataTable.Rows[j]["RRU Height"].ToString();
                                    float RadioRRUHeightBase = 0;
                                    if (!string.IsNullOrEmpty(RadioRRUHeightBaseString))
                                    {
                                        CheckParser = float.TryParse(RadioRRUHeightBaseString, out FloatParser);

                                        if (CheckParser)
                                            RadioRRUHeightBase = FloatParser;

                                        else
                                        {
                                            RadioRRUTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(RRU Height) coulumn's value: ({RadioRRUHeightBaseString}) must be a number",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIradioRRU.ToString(),
                                                SheetName = "RRU info",
                                                UniqueName = $"(Serial Number) : {RadioRRUDataTable.Rows[j]["Serial Number"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }
                                    }

                                    string RadioRRUAzimuthString = RadioRRUDataTable.Rows[j]["RRU Azimuth"].ToString();
                                    float RadioRRUAzimuth = 0;
                                    if (!string.IsNullOrEmpty(RadioRRUAzimuthString))
                                    {
                                        CheckParser = float.TryParse(RadioRRUAzimuthString, out FloatParser);

                                        if (CheckParser)
                                            RadioRRUAzimuth = FloatParser;

                                        else
                                        {
                                            RadioRRUTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(RRU Azimuth) coulumn's value: ({RadioRRUAzimuthString}) must be a number",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIradioRRU.ToString(),
                                                SheetName = "RRU info",
                                                UniqueName = $"(Serial Number) : {RadioRRUDataTable.Rows[j]["Serial Number"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }
                                    }

                                    string RadioRRUOwnerName = RadioRRUDataTable.Rows[j]["RRU Owner"].ToString();
                                    int? RadioRRUOwnerId = null;
                                    if (!string.IsNullOrEmpty(RadioRRUOwnerName))
                                    {
                                        TLIowner CheckRadioRRUOwnerName = _unitOfWork.OwnerRepository
                                            .GetWhereFirst(x => x.OwnerName.ToLower() == RadioRRUOwnerName.ToLower() && !x.Deleted);

                                        if (CheckRadioRRUOwnerName != null)
                                            RadioRRUOwnerId = CheckRadioRRUOwnerName.Id;

                                        else
                                        {
                                            TLIowner NewRadioRRUOwnerEntity = new TLIowner()
                                            {
                                                OwnerName = RadioRRUOwnerName,
                                                Deleted = false,
                                                Disable = false
                                            };

                                            _unitOfWork.OwnerRepository.Add(NewRadioRRUOwnerEntity);
                                            _unitOfWork.SaveChanges();

                                            RadioRRUOwnerId = NewRadioRRUOwnerEntity.Id;
                                        }
                                    }

                                    int RadioRRUAllCivilInstId = 0;

                                    string RadioRRU_RadioAntennaName = RadioRRUDataTable.Rows[j]["Antenna Name"].ToString();
                                    int? RadioRRU_RadioAntennaId = null;

                                    string RadioRRUSideArmName = RadioRRUDataTable.Rows[j]["Side Arm Name"].ToString();
                                    int? RadioRRUSideArmId = null;

                                    string RadioRRULegName = RadioRRUDataTable.Rows[j]["Leg name"].ToString();
                                    int? RadioRRULegId = null;

                                    if (!string.IsNullOrEmpty(RadioRRU_RadioAntennaName))
                                    {
                                        TLIcivilLoads CheckRadioRRU_RadioAntennaName = _unitOfWork.CivilLoadsRepository
                                            .GetIncludeWhereFirst(x => !x.Dismantle && (x.allLoadInstId != null ?
                                                (!x.allLoadInst.Draft && (x.allLoadInst.radioAntennaId != null ?
                                                    x.allLoadInst.radioAntenna.Name.ToLower() == RadioRRU_RadioAntennaName.ToLower() : false)) : false),
                                                        x => x.allLoadInst, x => x.allLoadInst.radioAntenna);

                                        if (CheckRadioRRU_RadioAntennaName != null)
                                        {
                                            if (CheckRadioRRU_RadioAntennaName.SiteCode.ToLower() != RadioRRU_SiteCodeAfterCheck.ToLower())
                                            {
                                                RadioRRUTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Antenna Name) coulumn's value: ({RadioRRU_RadioAntennaName}) doesn't exist on this site: ({RadioRRU_SiteCodeAfterCheck})",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilLoads.ToString(),
                                                    SheetName = "RRU info",
                                                    UniqueName = $"(Serial Number) : {RadioRRUDataTable.Rows[j]["Serial Number"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }

                                            RadioRRU_RadioAntennaId = CheckRadioRRU_RadioAntennaName.allLoadInst.radioAntennaId;
                                            RadioRRUAllCivilInstId = CheckRadioRRU_RadioAntennaName.allCivilInstId;
                                        }
                                        else
                                        {
                                            RadioRRUTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Antenna Name) coulumn's value: ({RadioRRU_RadioAntennaName}) doesn't exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIcivilLoads.ToString(),
                                                SheetName = "RRU info",
                                                UniqueName = $"(Serial Number) : {RadioRRUDataTable.Rows[j]["Serial Number"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }
                                    }
                                    else if (!string.IsNullOrEmpty(RadioRRUSideArmName))
                                    {
                                        TLIcivilLoads CheckRadioRRUSideArmName = _unitOfWork.CivilLoadsRepository
                                            .GetIncludeWhereFirst(x => !x.Dismantle && (x.sideArmId != null ?
                                                (!x.sideArm.Draft && x.sideArm.Name.ToLower() == RadioRRUSideArmName.ToLower()) : false),
                                                        x => x.sideArm);

                                        if (CheckRadioRRUSideArmName != null)
                                        {
                                            if (CheckRadioRRUSideArmName.SiteCode.ToLower() != RadioRRU_SiteCodeAfterCheck.ToLower())
                                            {
                                                RadioRRUTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Side Arm Name) coulumn's value: ({RadioRRUSideArmName}) doesn't exist on this site: ({RadioRRU_SiteCodeAfterCheck})",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilLoads.ToString(),
                                                    SheetName = "RRU info",
                                                    UniqueName = $"(Serial Number) : {RadioRRUDataTable.Rows[j]["Serial Number"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }

                                            RadioRRUSideArmId = CheckRadioRRUSideArmName.sideArmId;
                                            RadioRRUAllCivilInstId = CheckRadioRRUSideArmName.allCivilInstId;
                                        }
                                        else
                                        {
                                            RadioRRUTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Side Arm Name) coulumn's value: ({RadioRRUSideArmName}) doesn't exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIcivilLoads.ToString(),
                                                SheetName = "RRU info",
                                                UniqueName = $"(Serial Number) : {RadioRRUDataTable.Rows[j]["Serial Number"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }
                                    }
                                    else if (!string.IsNullOrEmpty(RadioRRULegName))
                                    {
                                        TLIcivilLoads CheckRadioRRULegName = _unitOfWork.CivilLoadsRepository
                                            .GetIncludeWhereFirst(x => !x.Dismantle && (x.legId != null ?
                                                x.sideArm.Name.ToLower() == RadioRRUSideArmName.ToLower() : false),
                                                    x => x.leg);

                                        if (CheckRadioRRULegName != null)
                                        {
                                            if (CheckRadioRRULegName.SiteCode.ToLower() != RadioRRU_SiteCodeAfterCheck.ToLower())
                                            {
                                                RadioRRUTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Leg name) coulumn's value: ({RadioRRULegName}) doesn't exist on this site: ({RadioRRU_SiteCodeAfterCheck})",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIcivilLoads.ToString(),
                                                    SheetName = "RRU info",
                                                    UniqueName = $"(Serial Number) : {RadioRRUDataTable.Rows[j]["Serial Number"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }

                                            RadioRRULegId = CheckRadioRRULegName.legId;
                                            RadioRRUAllCivilInstId = CheckRadioRRULegName.allCivilInstId;
                                        }
                                        else
                                        {
                                            RadioRRUTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Leg name) coulumn's value: ({RadioRRULegName}) doesn't exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIcivilLoads.ToString(),
                                                SheetName = "RRU info",
                                                UniqueName = $"(Serial Number) : {RadioRRUDataTable.Rows[j]["Serial Number"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        RadioRRUTransaction.Dispose();

                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                        {
                                            CreatedAt = DateTime.Now,
                                            ErrMsg = $"One of those columns must have a valid value: (Antenna Name, Side Arm Name, Leg name)",
                                            IsDeleted = false,
                                            IsLib = false,
                                            RefTable = Helpers.Constants.TablesNames.TLIcivilLoads.ToString(),
                                            SheetName = "RRU info",
                                            UniqueName = $"(Serial Number) : {RadioRRUDataTable.Rows[j]["Serial Number"]}"
                                        };

                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                        _unitOfWork.SaveChanges();

                                        continue;
                                    }

                                    int? RadioRRUCivilSupportCategoryId = 0;
                                    string RadioRRUCivilType = RadioRRUDataTable.Rows[j]["type"].ToString();

                                    TLIallCivilInst RadioRRUAllCivilInst = _unitOfWork.AllCivilInstRepository
                                        .GetIncludeWhereFirst(x => x.Id == RadioRRUAllCivilInstId, x => x.civilWithLegs, x => x.civilWithLegs.CivilWithLegsLib,
                                            x => x.civilWithoutLeg, x => x.civilWithoutLeg.CivilWithoutlegsLib, x => x.civilWithoutLeg.CivilWithoutlegsLib.CivilWithoutLegCategory);

                                    if (RadioRRUAllCivilInst.civilWithLegsId != null)
                                        RadioRRUCivilSupportCategoryId = RadioRRUAllCivilInst.civilWithLegs.CivilWithLegsLib.civilSteelSupportCategoryId;

                                    else if (RadioRRUAllCivilInst.civilWithLegsId != null)
                                        RadioRRUCivilSupportCategoryId = RadioRRUAllCivilInst.civilWithoutLeg.CivilWithoutlegsLib.CivilSteelSupportCategoryId;

                                    string RadioRRUInstallationPlaceName = RadioRRUDataTable.Rows[j]["RRU-installation place"].ToString();
                                    int? RadioRRUInstallationPlaceId = null;

                                    if (!string.IsNullOrEmpty(RadioRRUInstallationPlaceName))
                                    {
                                        TLIinstallationPlace CheckRRUInstallationPlace = _unitOfWork.InstallationPlaceRepository
                                            .GetWhereFirst(x => x.Name.ToLower() == RadioRRUInstallationPlaceName.ToLower() && !x.Deleted);

                                        if (CheckRRUInstallationPlace != null)
                                            RadioRRUInstallationPlaceId = CheckRRUInstallationPlace.Id;

                                        else
                                        {
                                            TLIinstallationPlace NewInstallationPlace = new TLIinstallationPlace()
                                            {
                                                Name = RadioRRUInstallationPlaceName,
                                                Deleted = false,
                                                Disable = false
                                            };

                                            _unitOfWork.InstallationPlaceRepository.Add(NewInstallationPlace);
                                            _unitOfWork.SaveChanges();

                                            RadioRRUInstallationPlaceId = NewInstallationPlace.Id;
                                        }
                                    }

                                    TLIRadioRRU NewRadioRRUEntity = new TLIRadioRRU()
                                    {
                                        radioRRULibraryId = RadioRRULibraryId,
                                        SerialNumber = RadioRRUSerialNumber,
                                        Name = RadioRRUSerialNumber,
                                        CenterHigh = 0,
                                        HBA = 0,
                                        EquivalentSpace = 0,
                                        SpaceInstallation = 0,
                                        HeightBase = RadioRRUHeightBase,
                                        Azimuth = RadioRRUAzimuth,
                                        Notes = RadioRRUDataTable.Rows[j]["Notes"].ToString(),
                                        VisibleStatus = RadioRRUDataTable.Rows[j]["Current Status"].ToString(),
                                        ownerId = RadioRRUOwnerId,
                                        installationPlaceId = RadioRRUInstallationPlaceId,
                                        radioAntennaId = RadioRRU_RadioAntennaId
                                    };

                                    _unitOfWork.RadioRRURepository.Add(NewRadioRRUEntity);
                                    _unitOfWork.SaveChanges();

                                    //
                                    // Dynamic Attribute..
                                    //

                                    List<TLIdynamicAttInstValue> RadioRRUDynamicValues = new List<TLIdynamicAttInstValue>();

                                    foreach (TLIdynamicAtt MissedAttribute in RadioRRUMissedAttributes)
                                    {
                                        if (!string.IsNullOrEmpty(RadioRRUDataTable.Rows[j][MissedAttribute.Key].ToString()))
                                        {
                                            TLIdynamicAttInstValue MissedAttributeValue = new TLIdynamicAttInstValue()
                                            {
                                                tablesNamesId = RadioRRUTableNameId,
                                                disable = false,
                                                DynamicAttId = MissedAttribute.Id,
                                                InventoryId = NewRadioRRUEntity.Id
                                            };

                                            if (MissedAttribute.DataType.Name.ToLower() == "string".ToLower())
                                                MissedAttributeValue.ValueString = RadioRRUDataTable.Rows[j][MissedAttribute.Key].ToString();
                                            else if (MissedAttribute.DataType.Name.ToLower() == "int".ToLower() ||
                                                MissedAttribute.DataType.Name.ToLower() == "double".ToLower())
                                            {
                                                double DoubleParser = 0;

                                                CheckParser = double.TryParse(RadioRRUDataTable.Rows[j][MissedAttribute.Key].ToString(), out DoubleParser);

                                                if (CheckParser)
                                                    MissedAttributeValue.ValueDouble = DoubleParser;

                                                else
                                                {
                                                    RadioRRUTransaction.Dispose();

                                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                    {
                                                        CreatedAt = DateTime.Now,
                                                        ErrMsg = $"({MissedAttribute.Key}) coulumn's value: ({RadioRRUDataTable.Rows[j][MissedAttribute.Key]}) must be a number",
                                                        IsDeleted = false,
                                                        IsLib = false,
                                                        RefTable = Helpers.Constants.TablesNames.TLImwODU.ToString(),
                                                        SheetName = "RRU info",
                                                        UniqueName = $"(Serial Number) : {RadioRRUDataTable.Rows[j]["Serial Number"]}"
                                                    };

                                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                    _unitOfWork.SaveChanges();

                                                    continue;
                                                }
                                            }
                                            else if (MissedAttribute.DataType.Name.ToLower() == "boolean".ToLower())
                                            {
                                                bool BooleanParser = false;

                                                CheckParser = bool.TryParse(RadioRRUDataTable.Rows[j][MissedAttribute.Key].ToString(), out BooleanParser);

                                                if (CheckParser)
                                                    MissedAttributeValue.ValueBoolean = BooleanParser;

                                                else
                                                {
                                                    RadioRRUTransaction.Dispose();

                                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                    {
                                                        CreatedAt = DateTime.Now,
                                                        ErrMsg = $"({MissedAttribute.Key}) coulumn's value: ({RadioRRUDataTable.Rows[j][MissedAttribute.Key]}) must be boolean (Yes/No)",
                                                        IsDeleted = false,
                                                        IsLib = false,
                                                        RefTable = Helpers.Constants.TablesNames.TLImwODU.ToString(),
                                                        SheetName = "RRU info",
                                                        UniqueName = $"(Serial Number) : {RadioRRUDataTable.Rows[j]["Serial Number"]}"
                                                    };

                                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                    _unitOfWork.SaveChanges();

                                                    continue;
                                                }
                                            }
                                            else if (MissedAttribute.DataType.Name.ToLower() == "datetime".ToLower())
                                            {
                                                DateTime DateTimeParser = DateTime.Now;

                                                CheckParser = DateTime.TryParse(RadioRRUDataTable.Rows[j][MissedAttribute.Key].ToString(), out DateTimeParser);

                                                if (CheckParser)
                                                    MissedAttributeValue.ValueDateTime = DateTimeParser;

                                                else
                                                {
                                                    RadioRRUTransaction.Dispose();

                                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                    {
                                                        CreatedAt = DateTime.Now,
                                                        ErrMsg = $"({MissedAttribute.Key}) coulumn's value: ({RadioRRUDataTable.Rows[j][MissedAttribute.Key]}) must be date",
                                                        IsDeleted = false,
                                                        IsLib = false,
                                                        RefTable = Helpers.Constants.TablesNames.TLImwODU.ToString(),
                                                        SheetName = "RRU info",
                                                        UniqueName = $"(Serial Number) : {RadioRRUDataTable.Rows[j]["Serial Number"]}"
                                                    };

                                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                    _unitOfWork.SaveChanges();

                                                    continue;
                                                }
                                            }

                                            RadioRRUDynamicValues.Add(MissedAttributeValue);
                                        }
                                    }
                                    if (RadioRRUDynamicValues.Count() > 0)
                                    {
                                        _unitOfWork.DynamicAttInstValueRepository.AddRange(RadioRRUDynamicValues);
                                        _unitOfWork.SaveChanges();
                                    }

                                    //
                                    // All Load Installation Informatin..
                                    //

                                    string RadioRRUCurrentStatusName = RadioRRUDataTable.Rows[j]["Current Status"].ToString();
                                    int? RadioRRUCurrentStatusId = null;
                                    if (!string.IsNullOrEmpty(RadioRRUCurrentStatusName))
                                    {
                                        TLIitemStatus CheckCurrentStatusradioAntenna = _unitOfWork.ItemStatusRepository
                                            .GetWhereFirst(x => x.Name.ToLower() == RadioRRUCurrentStatusName.ToLower() && !x.Deleted);

                                        if (CheckCurrentStatusradioAntenna != null)
                                            RadioRRUCurrentStatusId = CheckCurrentStatusradioAntenna.Id;

                                        else
                                        {
                                            TLIitemStatus NewItemStatus = new TLIitemStatus()
                                            {
                                                Name = RadioRRUCurrentStatusName,
                                                Deleted = false
                                            };

                                            _unitOfWork.ItemStatusRepository.Add(NewItemStatus);
                                            _unitOfWork.SaveChanges();

                                            RadioRRUCurrentStatusId = NewItemStatus.Id;
                                        }
                                    }

                                    string RRUActiveComponentName = RadioRRUDataTable.Rows[j]["Active component"].ToString();
                                    bool RRUActiveComponent = true;
                                    if (RRUActiveComponentName.ToLower() != "Yes".ToLower())
                                        RRUActiveComponent = false;

                                    TLIallLoadInst NewRRU_AllLoadInstEntity = new TLIallLoadInst()
                                    {
                                        ItemStatusId = RadioRRUCurrentStatusId,
                                        Draft = false,
                                        radioRRUId = NewRadioRRUEntity.Id,
                                        Active = RRUActiveComponent
                                    };

                                    _unitOfWork.AllLoadInstRepository.Add(NewRRU_AllLoadInstEntity);
                                    _unitOfWork.SaveChanges();

                                    //
                                    // Civil Loads Information..
                                    //

                                    string RadioRRUInstallationDateAsString = RadioRRUDataTable.Rows[j]["Status Date"].ToString();
                                    DateTime RadioRRUInstallationDate = DateTime.Now;
                                    if (!string.IsNullOrEmpty(RadioRRUInstallationDateAsString))
                                    {
                                        DateTime DateTimeParser = DateTime.Now;

                                        CheckParser = DateTime.TryParse(RadioRRUInstallationDateAsString, out DateTimeParser);

                                        if (CheckParser)
                                            RadioRRUInstallationDate = DateTimeParser;

                                        else
                                        {
                                            RadioRRUTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Status Date) coulumn's value must be date",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIcivilLoads.ToString(),
                                                SheetName = "RRU info",
                                                UniqueName = $"(Serial Number) : {RadioRRUDataTable.Rows[j]["Serial Number"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }
                                    }

                                    TLIcivilLoads NewRRUCivilLoadsEntity = new TLIcivilLoads()
                                    {
                                        allLoadInstId = NewRRU_AllLoadInstEntity.Id,
                                        SiteCode = RadioRRU_SiteCodeAfterCheck,
                                        Dismantle = false,
                                        allCivilInstId = RadioRRUAllCivilInstId,
                                        civilSteelSupportCategoryId = RadioRRUCivilSupportCategoryId,
                                        InstallationDate = RadioRRUInstallationDate,
                                        legId = RadioRRULegId,
                                        sideArmId = RadioRRUSideArmId,

                                    };

                                    _unitOfWork.CivilLoadsRepository.Add(NewRRUCivilLoadsEntity);
                                    _unitOfWork.SaveChanges();

                                    RadioRRUTransaction.Complete();
                                }
                                catch (Exception err)
                                {
                                    RadioRRUTransaction.Dispose();

                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                    {
                                        CreatedAt = DateTime.Now,
                                        ErrMsg = err.Message,
                                        IsDeleted = false,
                                        IsLib = false,
                                        RefTable = Helpers.Constants.TablesNames.TLIradioRRU.ToString(),
                                        SheetName = "RRU info",
                                        UniqueName = $"(Serial Number) : {RadioRRUDataTable.Rows[j]["Serial Number"]}"
                                    };

                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                    _unitOfWork.SaveChanges();

                                    continue;
                                }
                            }
                        }

                    ////////////////////////////////////////////////////////////
                    /////////////////// Power //////////////////////////////////
                    ////////////////////////////////////////////////////////////

                    Power:

                        ExcelWorksheet PowerSheet = package.Workbook.Worksheets.FirstOrDefault(x => x.Name.ToLower() == "Wind info".ToLower());
                        int PowerRows = 0;
                        try
                        {
                            PowerRows = PowerSheet.Dimension.End.Row;
                        }
                        catch (NullReferenceException)
                        {
                            goto Solar;
                        }
                        int PowerColumns = PowerSheet.Dimension.End.Column;

                        DataTable PowerDataTable = new DataTable();
                        List<string> PowerSheetColumn = new List<string>();

                        for (int i = 1; i <= PowerColumns; i++)
                        {
                            string ColName = PowerSheet.Cells[1, i].Value.ToString().Trim();
                            ColName = Regex.Replace(ColName, @"\s+", " ");

                            PowerSheetColumn.Add(ColName);
                            PowerDataTable.Columns.Add(ColName);
                        }

                        for (int i = 2; i <= PowerRows; i++)
                        {
                            DataRow PowerDataRow = PowerDataTable.NewRow();
                            for (int j = 1; j <= PowerColumns; j++)
                            {
                                string ColName = PowerSheet.Cells[1, j].Value.ToString().Trim();
                                ColName = Regex.Replace(ColName, @"\s+", " ");

                                object Value = PowerSheet.Cells[i, j].Value;
                                if (Value != null)
                                {
                                    string ValueAsString = Value.ToString().Trim();
                                    ValueAsString = Regex.Replace(ValueAsString, @"\s+", " ");

                                    Value = ValueAsString;
                                    PowerDataRow[ColName] = Value;
                                }
                                else
                                {
                                    PowerDataRow[ColName] = Value;
                                }
                            }
                            PowerDataTable.Rows.Add(PowerDataRow);
                        }

                        //
                        // Dynamic Attributes For Power..
                        //

                        int PowerTableNameId = TablesName.FirstOrDefault(x =>
                            x.TableName.ToLower() == Helpers.Constants.TablesNames.TLIpower.ToString().ToLower()).Id;

                        List<TLIdynamicAtt> PowerMissedAttributeCSV = new List<TLIdynamicAtt>()
                        {
                            new TLIdynamicAtt
                            {
                                Key = "Related Plan",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = PowerTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "user",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = PowerTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Current Plan",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = PowerTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "collect plan",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = PowerTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            },
                            new TLIdynamicAtt
                            {
                                Key = "Read",
                                DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                LibraryAtt = false,
                                Description = null,
                                CivilWithoutLegCategoryId = null,
                                tablesNamesId = PowerTableNameId,
                                Required = false,
                                disable = false,
                                DefaultValue = null
                            }
                        };

                        List<TLIdynamicAtt> PowerAllDynamicAttribute = _unitOfWork.DynamicAttRepository
                            .GetWhere(x => x.tablesNamesId == PowerTableNameId).ToList();

                        List<TLIdynamicAtt> PowerMissedAttributes = PowerMissedAttributeCSV.Except(PowerAllDynamicAttribute).ToList();

                        _unitOfWork.DynamicAttRepository.AddRange(PowerMissedAttributes);
                        _unitOfWork.SaveChanges();

                        for (int j = 0; j <= PowerDataTable.Rows.Count - 1; j++)
                        {
                            using (TransactionScope PowerTransaction = new TransactionScope(TransactionScopeOption.Required,
                                new System.TimeSpan(0, 15, 0)))
                            {
                                try
                                {
                                    //
                                    // Library Information..
                                    //

                                    string PowerLibraryModel = PowerDataTable.Rows[j]["wind Type"].ToString();
                                    int PowerLibraryId = 0;
                                    if (!string.IsNullOrEmpty(PowerLibraryModel))
                                    {
                                        PowerTransaction.Dispose();

                                        TLIpowerLibrary CheckPowerLibraryModel = _unitOfWork.PowerLibraryRepository
                                            .GetWhereFirst(x => x.Model.ToLower() == PowerLibraryModel.ToLower() && !x.Deleted);

                                        if (CheckPowerLibraryModel == null)
                                        {
                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(wind Type) coulumn's value: ({PowerLibraryModel}) doesn't exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = true,
                                                RefTable = Helpers.Constants.TablesNames.TLIpowerLibrary.ToString(),
                                                SheetName = "Wind info",
                                                UniqueName = $"(Wind Name) : {PowerDataTable.Rows[j]["Wind Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        PowerLibraryId = CheckPowerLibraryModel.Id;
                                    }
                                    else
                                    {
                                        PowerTransaction.Dispose();

                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                        {
                                            CreatedAt = DateTime.Now,
                                            ErrMsg = $"(wind Type) coulumn's value can't be null or empty",
                                            IsDeleted = false,
                                            IsLib = true,
                                            RefTable = Helpers.Constants.TablesNames.TLIpowerLibrary.ToString(),
                                            SheetName = "Wind info",
                                            UniqueName = $"(Wind Name) : {PowerDataTable.Rows[j]["Wind Name"]}"
                                        };

                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                        _unitOfWork.SaveChanges();

                                        continue;
                                    }

                                    //
                                    // Installation Information..
                                    //

                                    string Power_SiteCodeAfterCheck = string.Empty;
                                    string Power_SiteCode = PowerDataTable.Rows[j]["Site Code"].ToString();
                                    string Power_SiteName = PowerDataTable.Rows[j]["Site Name"].ToString();
                                    string Power_Site = PowerDataTable.Rows[j]["Site"].ToString();

                                    if (!string.IsNullOrEmpty(Power_SiteCode))
                                    {
                                        TLIsite CheckSiteCode = _unitOfWork.SiteRepository
                                            .GetWhereFirst(x => x.SiteCode.ToLower() == Power_SiteCode.ToLower());

                                        if (CheckSiteCode == null)
                                        {
                                            PowerTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Site Code) coulumn's value: ({Power_SiteCode}) doesn't exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                                SheetName = "Wind info",
                                                UniqueName = $"(Wind Name) : {PowerDataTable.Rows[j]["Wind Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        Power_SiteCodeAfterCheck = Power_SiteCode;
                                    }
                                    else if (!string.IsNullOrEmpty(Power_SiteName))
                                    {
                                        TLIsite CheckSiteCode = _unitOfWork.SiteRepository
                                            .GetWhereFirst(x => x.SiteName.ToLower() == Power_SiteName.ToLower());

                                        if (CheckSiteCode == null)
                                        {
                                            PowerTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Site Name) coulumn's value: ({Power_SiteName}) doesn't exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                                SheetName = "Wind info",
                                                UniqueName = $"(Wind Name) : {PowerDataTable.Rows[j]["Wind Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        Power_SiteCodeAfterCheck = CheckSiteCode.SiteCode;
                                    }
                                    else if (!string.IsNullOrEmpty(Power_Site))
                                    {
                                        TLIsite CheckSiteCode = _unitOfWork.SiteRepository
                                            .GetWhereFirst(x => x.SiteCode.ToLower() == Power_Site.ToLower());

                                        if (CheckSiteCode == null)
                                        {
                                            PowerTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Site) coulumn's value: ({Power_Site}) doesn't exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                                SheetName = "Wind info",
                                                UniqueName = $"(Wind Name) : {PowerDataTable.Rows[j]["Wind Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        Power_SiteCodeAfterCheck = Power_Site;
                                    }
                                    else
                                    {
                                        PowerTransaction.Dispose();

                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                        {
                                            CreatedAt = DateTime.Now,
                                            ErrMsg = $"One of those columns must have a value (Site Code, Site Name, Site)",
                                            IsDeleted = false,
                                            IsLib = false,
                                            RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                            SheetName = "Wind info",
                                            UniqueName = $"(Wind Name) : {PowerDataTable.Rows[j]["Wind Name"]}"
                                        };

                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                        _unitOfWork.SaveChanges();

                                        continue;
                                    }

                                    string PowerHeightString = PowerDataTable.Rows[j]["Wind Height"].ToString();
                                    float PowerHeight = 0;
                                    if (!string.IsNullOrEmpty(PowerHeightString))
                                    {
                                        CheckParser = float.TryParse(PowerHeightString, out FloatParser);

                                        if (CheckParser)
                                            PowerHeight = FloatParser;

                                        else
                                        {
                                            PowerTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Wind Height) coulumn's value: ({PowerHeightString}) must be a number",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIpower.ToString(),
                                                SheetName = "Wind info",
                                                UniqueName = $"(Wind Name) : {PowerDataTable.Rows[j]["Wind Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }
                                    }

                                    string PowerAzimuthString = PowerDataTable.Rows[j]["Wind Azimuth"].ToString();
                                    float PowerAzimuth = 0;
                                    if (!string.IsNullOrEmpty(PowerAzimuthString))
                                    {
                                        CheckParser = float.TryParse(PowerAzimuthString, out FloatParser);

                                        if (CheckParser)
                                            PowerAzimuth = FloatParser;

                                        else
                                        {
                                            PowerTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Wind Azimuth) coulumn's value: ({PowerAzimuthString}) must be a number",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIpower.ToString(),
                                                SheetName = "Wind info",
                                                UniqueName = $"(Wind Name) : {PowerDataTable.Rows[j]["Wind Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }
                                    }

                                    int PowerAllCivilInstId = 0;
                                    int? PowerCivilSupportCategoryId = 0;

                                    string PowerSideArmName = PowerDataTable.Rows[j]["Side Arm Name"].ToString();
                                    int? PowerSideArmId = null;

                                    string PowerLegName = PowerDataTable.Rows[j]["Leg name"].ToString();
                                    int? PowerLegId = null;

                                    if (!string.IsNullOrEmpty(PowerSideArmName))
                                    {
                                        TLIcivilLoads CheckPowerSideArmName = _unitOfWork.CivilLoadsRepository
                                            .GetIncludeWhereFirst(x => !x.Dismantle && x.sideArmId != null ?
                                                (!x.sideArm.Draft && x.sideArm.Name.ToLower() == PowerSideArmName.ToLower()) : false,
                                                    x => x.sideArm, x => x.allCivilInst, x => x.allCivilInst.civilWithLegs, x => x.allCivilInst.civilWithLegs.CivilWithLegsLib,
                                                    x => x.allCivilInst.civilWithoutLeg, x => x.allCivilInst.civilWithoutLeg.CivilWithoutlegsLib);

                                        if (CheckPowerSideArmName == null)
                                        {
                                            PowerTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Side Arm Name) column's value: ({PowerSideArmName}) doesn't exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIcivilLoads.ToString(),
                                                SheetName = "Wind info",
                                                UniqueName = $"(Wind Name) : {PowerDataTable.Rows[j]["Wind Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }
                                        if (CheckPowerSideArmName.SiteCode.ToLower() != Power_SiteCodeAfterCheck.ToLower())
                                        {
                                            PowerTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Side Arm Name) column's value: ({PowerSideArmName}) doesn't exist on this site: ({Power_SiteCodeAfterCheck})",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIcivilLoads.ToString(),
                                                SheetName = "Wind info",
                                                UniqueName = $"(Wind Name) : {PowerDataTable.Rows[j]["Wind Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        PowerSideArmId = CheckPowerSideArmName.sideArmId;
                                        PowerAllCivilInstId = CheckPowerSideArmName.allCivilInstId;

                                        if (CheckPowerSideArmName.allCivilInst.civilWithLegsId != null)
                                            PowerCivilSupportCategoryId = CheckPowerSideArmName.allCivilInst.civilWithLegs.CivilWithLegsLib.civilSteelSupportCategoryId;

                                        else if (CheckPowerSideArmName.allCivilInst.civilWithoutLegId != null)
                                            PowerCivilSupportCategoryId = CheckPowerSideArmName.allCivilInst.civilWithoutLeg.CivilWithoutlegsLib.CivilSteelSupportCategoryId;
                                    }
                                    else if (!string.IsNullOrEmpty(PowerLegName))
                                    {
                                        TLIleg CheckPowerLegNameIfExist = _unitOfWork.LegRepository
                                            .GetWhereFirst(x => x.CiviLegName.ToLower() == PowerLegName.ToLower());

                                        if (CheckPowerLegNameIfExist == null)
                                        {
                                            PowerTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Leg name) column's value: ({PowerLegName}) doesn't exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIleg.ToString(),
                                                SheetName = "Wind info",
                                                UniqueName = $"(Wind Name) : {PowerDataTable.Rows[j]["Wind Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        TLIcivilSiteDate CheckPowerLegName = _unitOfWork.CivilSiteDateRepository
                                            .GetIncludeWhereFirst(x => !x.Dismantle && x.SiteCode.ToLower() == Power_SiteCodeAfterCheck.ToLower() && x.allCivilInst.civilWithLegsId != null ?
                                                x.allCivilInst.civilWithLegsId.Value == CheckPowerLegNameIfExist.CivilWithLegInstId : false,
                                                    x => x.allCivilInst, x => x.allCivilInst.civilWithLegs, x => x.allCivilInst.civilWithLegs.CivilWithLegsLib,
                                                    x => x.allCivilInst.civilWithoutLeg, x => x.allCivilInst.civilWithoutLeg.CivilWithoutlegsLib);

                                        if (CheckPowerLegName == null)
                                        {
                                            PowerTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Leg name) column's value: ({PowerLegName}) doesn't exist on this site: ({Power_SiteCodeAfterCheck})",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIleg.ToString(),
                                                SheetName = "Wind info",
                                                UniqueName = $"(Wind Name) : {PowerDataTable.Rows[j]["Wind Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        PowerLegId = CheckPowerLegNameIfExist.Id;
                                        PowerAllCivilInstId = CheckPowerLegName.allCivilInstId;

                                        if (CheckPowerLegName.allCivilInst.civilWithLegsId != null)
                                            PowerCivilSupportCategoryId = CheckPowerLegName.allCivilInst.civilWithLegs.CivilWithLegsLib.civilSteelSupportCategoryId;

                                        else if (CheckPowerLegName.allCivilInst.civilWithoutLegId != null)
                                            PowerCivilSupportCategoryId = CheckPowerLegName.allCivilInst.civilWithoutLeg.CivilWithoutlegsLib.CivilSteelSupportCategoryId;
                                    }

                                    string PowerName = PowerDataTable.Rows[j]["Wind Name"].ToString();
                                    if (string.IsNullOrEmpty(PowerName))
                                    {
                                        if (!string.IsNullOrEmpty(PowerSideArmName))
                                            PowerName = $"{PowerSideArmName} {PowerHeightString}";

                                        else if (!string.IsNullOrEmpty(PowerLegName))
                                            PowerName = $"{PowerLegName} {PowerHeightString}";

                                        else
                                        {
                                            PowerTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"When (Wind Name) column's value is null or empty then one of those column's must have a valid value: " +
                                                    $"(Side Arm Name, Leg name)",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIpower.ToString(),
                                                SheetName = "Wind info",
                                                UniqueName = $"(Wind Name) : {PowerDataTable.Rows[j]["Wind Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }
                                    }

                                    // Check if Power Name is Already Exist on This Site..

                                    TLIcivilLoads CheckPowerName = _unitOfWork.CivilLoadsRepository
                                        .GetIncludeWhereFirst(x => !x.Dismantle && x.SiteCode.ToLower() == Power_SiteCodeAfterCheck.ToLower() && x.allLoadInstId != null ?
                                            (!x.allLoadInst.Draft && x.allLoadInst.powerId != null ?
                                                (x.allLoadInst.power.Name.ToLower() == PowerName.ToLower()) : false) : false,
                                                    x => x.allLoadInst, x => x.allLoadInst.power);

                                    if (CheckPowerName != null)
                                    {
                                        PowerTransaction.Dispose();

                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                        {
                                            CreatedAt = DateTime.Now,
                                            ErrMsg = $"(Wind Name) column's value: ({PowerName}) is already exist on this site: ({Power_SiteCodeAfterCheck})",
                                            IsDeleted = false,
                                            IsLib = false,
                                            RefTable = Helpers.Constants.TablesNames.TLIcivilLoads.ToString(),
                                            SheetName = "Wind info",
                                            UniqueName = $"(Wind Name) : {PowerDataTable.Rows[j]["Wind Name"]}"
                                        };

                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                        _unitOfWork.SaveChanges();

                                        continue;
                                    }

                                    string PowerInstallationPlaceName = PowerDataTable.Rows[j]["Wind installation place"].ToString();
                                    int? PowerInstallationPlaceId = null;
                                    if (!string.IsNullOrEmpty(PowerInstallationPlaceName))
                                    {
                                        TLIinstallationPlace CheckPowerInstallationPlaceName = _unitOfWork.InstallationPlaceRepository
                                            .GetWhereFirst(x => x.Name.ToLower() == PowerInstallationPlaceName.ToLower() && !x.Deleted);

                                        if (CheckPowerInstallationPlaceName != null)
                                            PowerInstallationPlaceId = CheckPowerInstallationPlaceName.Id;

                                        else
                                        {
                                            TLIinstallationPlace NewInstallationPlaceEntity = new TLIinstallationPlace()
                                            {
                                                Name = PowerInstallationPlaceName,
                                                Deleted = false,
                                                Disable = false
                                            };

                                            _unitOfWork.InstallationPlaceRepository.Add(NewInstallationPlaceEntity);
                                            _unitOfWork.SaveChanges();

                                            PowerInstallationPlaceId = NewInstallationPlaceEntity.Id;
                                        }
                                    }

                                    string PowerOwnerName = PowerDataTable.Rows[j]["Wind-Owner"].ToString();
                                    int? PowerOwnerId = null;
                                    if (!string.IsNullOrEmpty(PowerOwnerName))
                                    {
                                        TLIowner CheckPowerOwnerName = _unitOfWork.OwnerRepository
                                            .GetWhereFirst(x => x.OwnerName.ToLower() == PowerOwnerName.ToLower() && !x.Deleted);

                                        if (CheckPowerOwnerName != null)
                                            PowerOwnerId = CheckPowerOwnerName.Id;

                                        else
                                        {
                                            TLIowner NewOwnerEntity = new TLIowner()
                                            {
                                                OwnerName = PowerOwnerName,
                                                Deleted = false,
                                                Disable = false
                                            };

                                            _unitOfWork.OwnerRepository.Add(NewOwnerEntity);
                                            _unitOfWork.SaveChanges();

                                            PowerOwnerId = NewOwnerEntity.Id;
                                        }
                                    }

                                    ////TLIpower NewPowerEntity = new TLIpower()
                                    ////{
                                    ////    Name = PowerName,
                                    ////    Notes = PowerDataTable.Rows[j]["Notes"].ToString(),
                                    ////    ownerId = PowerOwnerId,
                                    ////    installationPlaceId = PowerInstallationPlaceId,
                                    ////    Azimuth = PowerAzimuth,
                                    ////    HeightBase = PowerHeight,
                                    ////    powerLibraryId = PowerLibraryId
                                    ////};

                                    //_unitOfWork.PowerRepository.Add(NewPowerEntity);
                                    //_unitOfWork.SaveChanges();

                                    //
                                    // Dynamic Attributes..
                                    //

                                    List<TLIdynamicAttInstValue> PowerDynamicValues = new List<TLIdynamicAttInstValue>();

                                    //foreach (TLIdynamicAtt MissedAttribute in PowerMissedAttributes)
                                    //{
                                    //    if (!string.IsNullOrEmpty(PowerDataTable.Rows[j][MissedAttribute.Key].ToString()))
                                    //    {
                                    //        TLIdynamicAttInstValue MissedAttributeValue = new TLIdynamicAttInstValue()
                                    //        {
                                    //            tablesNamesId = PowerTableNameId,
                                    //            disable = false,
                                    //            DynamicAttId = MissedAttribute.Id,
                                    //            InventoryId = NewPowerEntity.Id
                                    //        };

                                    //        if (MissedAttribute.DataType.Name.ToLower() == "string".ToLower())
                                    //            MissedAttributeValue.ValueString = PowerDataTable.Rows[j][MissedAttribute.Key].ToString();
                                    //        else if (MissedAttribute.DataType.Name.ToLower() == "int".ToLower() ||
                                    //            MissedAttribute.DataType.Name.ToLower() == "double".ToLower())
                                    //        {
                                    //            double DoubleParser = 0;

                                    //            CheckParser = double.TryParse(PowerDataTable.Rows[j][MissedAttribute.Key].ToString(), out DoubleParser);

                                    //            if (CheckParser)
                                    //                MissedAttributeValue.ValueDouble = DoubleParser;

                                    //            else
                                    //            {
                                    //                PowerTransaction.Dispose();

                                    //                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                    //                {
                                    //                    CreatedAt = DateTime.Now,
                                    //                    ErrMsg = $"({MissedAttribute.Key}) coulumn's value: ({PowerDataTable.Rows[j][MissedAttribute.Key]}) must be a number",
                                    //                    IsDeleted = false,
                                    //                    IsLib = false,
                                    //                    RefTable = Helpers.Constants.TablesNames.TLIpower.ToString(),
                                    //                    SheetName = "Wind info",
                                    //                    UniqueName = $"(Wind Name) : {PowerDataTable.Rows[j]["Wind Name"]}"
                                    //                };

                                    //                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                    //                _unitOfWork.SaveChanges();

                                    //                continue;
                                    //            }
                                    //        }
                                    //        else if (MissedAttribute.DataType.Name.ToLower() == "boolean".ToLower())
                                    //        {
                                    //            bool BooleanParser = false;

                                    //            CheckParser = bool.TryParse(PowerDataTable.Rows[j][MissedAttribute.Key].ToString(), out BooleanParser);

                                    //            if (CheckParser)
                                    //                MissedAttributeValue.ValueBoolean = BooleanParser;

                                    //            else
                                    //            {
                                    //                PowerTransaction.Dispose();

                                    //                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                    //                {
                                    //                    CreatedAt = DateTime.Now,
                                    //                    ErrMsg = $"({MissedAttribute.Key}) coulumn's value: ({PowerDataTable.Rows[j][MissedAttribute.Key]}) must be boolean (Yes/No)",
                                    //                    IsDeleted = false,
                                    //                    IsLib = false,
                                    //                    RefTable = Helpers.Constants.TablesNames.TLIpower.ToString(),
                                    //                    SheetName = "Wind info",
                                    //                    UniqueName = $"(Wind Name) : {PowerDataTable.Rows[j]["Wind Name"]}"
                                    //                };

                                    //                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                    //                _unitOfWork.SaveChanges();

                                    //                continue;
                                    //            }
                                    //        }
                                    //        else if (MissedAttribute.DataType.Name.ToLower() == "datetime".ToLower())
                                    //        {
                                    //            DateTime DateTimeParser = DateTime.Now;

                                    //            CheckParser = DateTime.TryParse(PowerDataTable.Rows[j][MissedAttribute.Key].ToString(), out DateTimeParser);

                                    //            if (CheckParser)
                                    //                MissedAttributeValue.ValueDateTime = DateTimeParser;

                                    //            else
                                    //            {
                                    //                PowerTransaction.Dispose();

                                    //                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                    //                {
                                    //                    CreatedAt = DateTime.Now,
                                    //                    ErrMsg = $"({MissedAttribute.Key}) coulumn's value: ({PowerDataTable.Rows[j][MissedAttribute.Key]}) must be date",
                                    //                    IsDeleted = false,
                                    //                    IsLib = false,
                                    //                    RefTable = Helpers.Constants.TablesNames.TLIpower.ToString(),
                                    //                    SheetName = "Wind info",
                                    //                    UniqueName = $"(Wind Name) : {PowerDataTable.Rows[j]["Wind Name"]}"
                                    //                };

                                    //                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                    //                _unitOfWork.SaveChanges();

                                    //                continue;
                                    //            }
                                    //        }

                                    //        PowerDynamicValues.Add(MissedAttributeValue);
                                    //    }
                                    //}
                                    if (PowerDynamicValues.Count() > 0)
                                    {
                                        _unitOfWork.DynamicAttInstValueRepository.AddRange(PowerDynamicValues);
                                        _unitOfWork.SaveChanges();
                                    }

                                    //
                                    // All Load Installation Information..
                                    //

                                    //TLIallLoadInst NewPowerAllLoadInstEntity = new TLIallLoadInst()
                                    //{
                                    //    powerId = NewPowerEntity.Id,
                                    //    Draft = false,
                                    //    Active = true
                                    //};

                                    //_unitOfWork.AllLoadInstRepository.Add(NewPowerAllLoadInstEntity);
                                    //_unitOfWork.SaveChanges();

                                    //
                                    // Civil Loads Information..
                                    //

                                    //TLIcivilLoads NewPowerCivilLoadsEntity = new TLIcivilLoads()
                                    //{
                                    //    allLoadInstId = NewPowerAllLoadInstEntity.Id,
                                    //    SiteCode = Power_SiteCodeAfterCheck,
                                    //    civilSteelSupportCategoryId = PowerCivilSupportCategoryId,
                                    //    allCivilInstId = PowerAllCivilInstId,
                                    //    Dismantle = false,
                                    //    InstallationDate = DateTime.Now,
                                    //    sideArmId = PowerSideArmId,
                                    //    legId = PowerLegId
                                    //};
                                    //_unitOfWork.CivilLoadsRepository.Add(NewPowerCivilLoadsEntity);
                                    //_unitOfWork.SaveChanges();
                                    PowerTransaction.Complete();
                                }
                                catch (Exception err)
                                {
                                    PowerTransaction.Dispose();

                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                    {
                                        CreatedAt = DateTime.Now,
                                        ErrMsg = err.Message,
                                        IsDeleted = false,
                                        IsLib = false,
                                        RefTable = Helpers.Constants.TablesNames.TLIradioRRU.ToString(),
                                        SheetName = "Wind info",
                                        UniqueName = $"(Wind Name) : {PowerDataTable.Rows[j]["Wind Name"]}"
                                    };

                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                    _unitOfWork.SaveChanges();

                                    continue;
                                }
                            }
                        }

                    ////////////////////////////////////////////////////////////
                    /////////////////// Solar //////////////////////////////////
                    ////////////////////////////////////////////////////////////

                    Solar:

                        ExcelWorksheet SolarSheet = package.Workbook.Worksheets.FirstOrDefault(x => x.Name.ToLower() == "Solar".ToLower());
                        int SolarRows = 0;
                        try
                        {
                            SolarRows = SolarSheet.Dimension.End.Row;
                        }
                        catch (NullReferenceException)
                        {
                            goto Generator;
                        }
                        int SolarColumns = SolarSheet.Dimension.End.Column;

                        DataTable SolarDataTable = new DataTable();
                        List<string> SolarSheetColumn = new List<string>();

                        for (int i = 1; i <= SolarColumns; i++)
                        {
                            string ColName = SolarSheet.Cells[1, i].Value.ToString().Trim();
                            ColName = Regex.Replace(ColName, @"\s+", " ");

                            SolarSheetColumn.Add(ColName);
                            SolarDataTable.Columns.Add(ColName);
                        }

                        for (int i = 2; i <= SolarRows; i++)
                        {
                            DataRow SolarDataRow = SolarDataTable.NewRow();
                            for (int j = 1; j <= SolarColumns; j++)
                            {
                                string ColName = SolarSheet.Cells[1, j].Value.ToString().Trim();
                                ColName = Regex.Replace(ColName, @"\s+", " ");

                                object Value = SolarSheet.Cells[i, j].Value;
                                if (Value != null)
                                {
                                    string ValueAsString = Value.ToString().Trim();
                                    ValueAsString = Regex.Replace(ValueAsString, @"\s+", " ");

                                    Value = ValueAsString;
                                    SolarDataRow[ColName] = Value;
                                }
                                else
                                {
                                    SolarDataRow[ColName] = Value;
                                }
                            }
                            SolarDataTable.Rows.Add(SolarDataRow);
                        }

                        //
                        // Dynamic Attributes For Power..
                        //

                        int SolarTableNameId = TablesName.FirstOrDefault(x =>
                         x.TableName.ToLower() == Helpers.Constants.TablesNames.TLIsolar.ToString().ToLower()).Id;

                        List<TLIdynamicAtt> SolarMissedAttributeCSV = new List<TLIdynamicAtt>()
                            {
                                new TLIdynamicAtt
                                {
                                    Key = "dd",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Visit Date",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "DateTime".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "SN",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Height from back_m",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "Double".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Height from front_m",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "Double".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Total panels Dimensions",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Structure design",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Base Plate Dimension",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv1",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv2",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv3",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                } ,
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv4",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv5",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Expr1026",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv7",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv8",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv9",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv10",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv11",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv12",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv13",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Expr1034",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv15",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv16",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv17",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv18",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv19",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv20",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv21",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv22",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv23",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv24",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv25",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv26",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv27",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Expr1048",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv29",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv30",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Attachments1",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv6",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                }
                                ,new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv14",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                }
                                ,new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv28",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                }
                                ,new TLIdynamicAtt
                                {
                                    Key = "Content Type",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "App Created By",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "App Modified By",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Attachments",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Workflow Instance ID",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "File Type",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Modified",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "datetime".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Created",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "datetime".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                }
                                ,new TLIdynamicAtt
                                {
                                    Key = "Created By",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                }
                                ,new TLIdynamicAtt
                                {
                                    Key = "Modified By",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                }
                                ,new TLIdynamicAtt
                                {
                                    Key = "URL Path",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                }
                                ,new TLIdynamicAtt
                                {
                                    Key = "Path",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                }
                                ,new TLIdynamicAtt
                                {
                                    Key = "Item Type",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                }
                                ,new TLIdynamicAtt
                                {
                                    Key = "Encoded Absolute URL",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                            };

                        List<TLIdynamicAtt> SolarAllDynamicAttribute = _unitOfWork.DynamicAttRepository
                            .GetWhere(x => x.tablesNamesId == SolarTableNameId).ToList();


                        List<TLIdynamicAtt> SolarMissedAttributes = SolarMissedAttributeCSV
                           .Except(SolarAllDynamicAttribute, new TLIdynamicAttComparer())
                           .ToList();

                        _unitOfWork.DynamicAttRepository.AddRange(SolarMissedAttributes);
                        _unitOfWork.SaveChanges();

                        for (int j = 0; j <= SolarDataTable.Rows.Count - 1; j++)
                        {
                            using (TransactionScope SolarTransaction = new TransactionScope(TransactionScopeOption.Required,
                                new System.TimeSpan(0, 15, 0)))
                            {
                                try
                                {
                                    //
                                    // Library Information..
                                    //

                                    string SolarLibraryModel = SolarDataTable.Rows[j]["Solar design"].ToString();
                                    int SolarLibraryId = 0;
                                    if (!string.IsNullOrEmpty(SolarLibraryModel))
                                    {
                                        SolarTransaction.Dispose();

                                        TLIsolarLibrary CheckSolarLibraryModel = _unitOfWork.SolarLibraryRepository
                                             .GetWhereFirst(x => x.Model.ToLower() == SolarLibraryModel.ToLower() && !x.Deleted);

                                        if (CheckSolarLibraryModel == null)
                                        {
                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Solar design) coulumn's value: ({SolarLibraryModel}) doesn't exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = true,
                                                RefTable = Helpers.Constants.TablesNames.TLIsolarLibrary.ToString(),
                                                SheetName = "Solar",
                                                UniqueName = $"(Solar Name) : {SolarDataTable.Rows[j]["Solar Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        SolarLibraryId = CheckSolarLibraryModel.Id;
                                    }
                                    else
                                    {
                                        SolarTransaction.Dispose();

                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                        {
                                            CreatedAt = DateTime.Now,
                                            ErrMsg = $"(Solar design) coulumn's value can't be null or empty",
                                            IsDeleted = false,
                                            IsLib = true,
                                            RefTable = Helpers.Constants.TablesNames.TLIsolarLibrary.ToString(),
                                            SheetName = "Solar",
                                            UniqueName = $"(Solar Name) : {SolarDataTable.Rows[j]["Solar Name"]}"
                                        };

                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                        _unitOfWork.SaveChanges();

                                        continue;
                                    }

                                    //
                                    // Installation Information..
                                    //

                                    string Solar_SiteCodeAfterCheck = string.Empty;
                                    string Solar_SiteCode = SolarDataTable.Rows[j]["Site_Code"].ToString();
                                    string Solar_SiteName = SolarDataTable.Rows[j]["Site_Name"].ToString();

                                    if (!string.IsNullOrEmpty(Solar_SiteCode))
                                    {
                                        TLIsite CheckSiteCode = _unitOfWork.SiteRepository
                                            .GetWhereFirst(x => x.SiteCode.ToLower() == Solar_SiteCode.ToLower());

                                        if (CheckSiteCode == null)
                                        {
                                            SolarTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Site Code) coulumn's value: ({Solar_SiteCode}) doesn't exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                                SheetName = "Solar",
                                                UniqueName = $"(Solar Name) : {SolarDataTable.Rows[j]["Solar Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        Solar_SiteCodeAfterCheck = Solar_SiteCode;
                                    }
                                    else if (!string.IsNullOrEmpty(Solar_SiteName))
                                    {
                                        TLIsite CheckSiteCode = _unitOfWork.SiteRepository
                                            .GetWhereFirst(x => x.SiteName.ToLower() == Solar_SiteName.ToLower());

                                        if (CheckSiteCode == null)
                                        {
                                            SolarTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Site Name) coulumn's value: ({Solar_SiteName}) doesn't exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                                SheetName = "solar",
                                                UniqueName = $"(Solar Name) : {SolarDataTable.Rows[j]["Solar Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        Solar_SiteCodeAfterCheck = CheckSiteCode.SiteCode;
                                    }
                                    else
                                    {
                                        SolarTransaction.Dispose();

                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                        {
                                            CreatedAt = DateTime.Now,
                                            ErrMsg = $"One of those columns must have a value (Site Code, Site Name, Site)",
                                            IsDeleted = false,
                                            IsLib = false,
                                            RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                            SheetName = "Solar",
                                            UniqueName = $"(Solar Name) : {SolarDataTable.Rows[j]["Solar Name"]}"
                                        };

                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                        _unitOfWork.SaveChanges();

                                        continue;
                                    }
                                    int IntParser = 0;
                                    string SolarAzimuthString = SolarDataTable.Rows[j]["PV array Azimuth"].ToString();
                                    string SolarAngelAngelString = SolarDataTable.Rows[j]["PV array Angel"].ToString();
                                    string SolarPREFIXString = SolarDataTable.Rows[j]["PREFIX"].ToString();
                                    string SolarExtenstionDimensionString = SolarDataTable.Rows[j]["Extension Dimension"].ToString();
                                    string SolarPowerlossratioString = SolarDataTable.Rows[j]["Power loss ratio"].ToString();
                                    string SolarExtensionString = SolarDataTable.Rows[j]["extension"].ToString();

                                    string SolarNumberOfSSUtString = SolarDataTable.Rows[j]["NO# of SSU"].ToString();
                                    int SolarNumberOfSSU = 0;
                                    if (!string.IsNullOrEmpty(SolarNumberOfSSUtString))
                                    {
                                        CheckParser = int.TryParse(SolarNumberOfSSUtString, out IntParser);

                                        if (CheckParser)
                                            SolarNumberOfSSU = IntParser;

                                        else
                                        {
                                            SolarTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(NumberOfSSU) coulumn's value: ({SolarNumberOfSSUtString}) must be a number",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIsolar.ToString(),
                                                SheetName = "Wind info",
                                                UniqueName = $"(Solar Name) : {SolarDataTable.Rows[j]["Solar Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }
                                    }


                                    string SolarNumberOfInstallPVsString = SolarDataTable.Rows[j]["NO# of install pvs"].ToString();
                                    int SolarNumberOfInstallPVs = 0;
                                    if (!string.IsNullOrEmpty(SolarNumberOfInstallPVsString))
                                    {
                                        CheckParser = int.TryParse(SolarNumberOfInstallPVsString, out IntParser);

                                        if (CheckParser)
                                            SolarNumberOfInstallPVs = IntParser;

                                        else
                                        {
                                            SolarTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(NumberOfInstallPVs) coulumn's value: ({SolarNumberOfInstallPVsString}) must be a number",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIsolar.ToString(),
                                                SheetName = "Wind info",
                                                UniqueName = $"(Solar Name) : {SolarDataTable.Rows[j]["Solar Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }
                                    }
                                    string SolarLibraryModelI = SolarDataTable.Rows[j]["Solar design"].ToString();
                                    int SolarLibraryModelId = 0;
                                    if (!string.IsNullOrEmpty(SolarLibraryModel))
                                    {
                                        TLIsolarLibrary CheckSolarLibraryModel = _unitOfWork.SolarLibraryRepository
                                            .GetWhereFirst(x => x.Model.ToLower() == SolarLibraryModelI.ToLower() && !x.Deleted);

                                        if (CheckSolarLibraryModel == null)
                                        {
                                            SolarTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(SolarLibraryModel) coulumn's value: ({SolarLibraryModelI}) doesn't exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIsolarLibrary.ToString(),
                                                SheetName = "Solar",
                                                UniqueName = $"(Solar Name) : {SolarDataTable.Rows[j]["Solar Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        SolarLibraryModelId = CheckSolarLibraryModel.Id;
                                    }

                                    string SolarName = SolarDataTable.Rows[j]["Solar Name"].ToString();
                                    if (string.IsNullOrEmpty(SolarName))
                                    {
                                        SolarName = SolarLibraryModel + " " + Solar_SiteName;
                                    }

                                    // Check if Power Name is Already Exist on This Site..

                                    TLIotherInSite CheckSolarName = _unitOfWork.OtherInSiteRepository
                                        .GetIncludeWhereFirst(x => !x.Dismantle && x.SiteCode.ToLower() == Solar_SiteCodeAfterCheck.ToLower() && x.allOtherInventoryInstId != null ?
                                            (!x.allOtherInventoryInst.Draft && x.allOtherInventoryInst.solarId != null ?
                                                (x.allOtherInventoryInst.solar.Name.ToLower() == SolarName.ToLower()) : false) : false,
                                                    x => x.allOtherInventoryInst, x => x.allOtherInventoryInst.solar);

                                    if (CheckSolarName != null)
                                    {
                                        SolarTransaction.Dispose();

                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                        {
                                            CreatedAt = DateTime.Now,
                                            ErrMsg = $"(Solar Name) column's value: ({SolarName}) is already exist on this site: ({Solar_SiteCodeAfterCheck})",
                                            IsDeleted = false,
                                            IsLib = false,
                                            RefTable = Helpers.Constants.TablesNames.TLIotherInSite.ToString(),
                                            SheetName = "Solar",
                                            UniqueName = $"(Solar Name) : {SolarDataTable.Rows[j]["Solar Name"]}"
                                        };

                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                        _unitOfWork.SaveChanges();

                                        continue;
                                    }

                                    TLIsolar NewSolarEntity = new TLIsolar()
                                    {
                                        Name = SolarName,
                                        PVArrayAzimuth = SolarAzimuthString,
                                        PVArrayAngel = SolarAngelAngelString,
                                        Prefix = SolarPREFIXString,
                                        PowerLossRatio = SolarPowerlossratioString,
                                        NumberOfSSU = SolarNumberOfSSU,
                                        SolarLibraryId = SolarLibraryModelId,
                                        NumberOfInstallPVs = SolarNumberOfInstallPVs,
                                        Extension = SolarExtensionString,
                                        ExtenstionDimension = SolarExtenstionDimensionString

                                    };

                                    _unitOfWork.SolarRepository.Add(NewSolarEntity);
                                    _unitOfWork.SaveChanges();


                                    //
                                    // Dynamic Attributes..
                                    //

                                    List<TLIdynamicAttInstValue> SolarDynamicValues = new List<TLIdynamicAttInstValue>();

                                    foreach (TLIdynamicAtt MissedAttribute in SolarMissedAttributes)
                                    {
                                        if (!string.IsNullOrEmpty(SolarDataTable.Rows[j][MissedAttribute.Key].ToString()))
                                        {
                                            TLIdynamicAttInstValue MissedAttributeValue = new TLIdynamicAttInstValue()
                                            {
                                                tablesNamesId = SolarTableNameId,
                                                disable = false,
                                                DynamicAttId = MissedAttribute.Id,
                                                InventoryId = NewSolarEntity.Id
                                            };

                                            if (MissedAttribute.DataType.Name.ToLower() == "string".ToLower())
                                                MissedAttributeValue.ValueString = SolarDataTable.Rows[j][MissedAttribute.Key].ToString();
                                            else if (MissedAttribute.DataType.Name.ToLower() == "int".ToLower() ||
                                                MissedAttribute.DataType.Name.ToLower() == "double".ToLower())
                                            {
                                                double DoubleParser = 0;

                                                CheckParser = double.TryParse(SolarDataTable.Rows[j][MissedAttribute.Key].ToString(), out DoubleParser);

                                                if (CheckParser)
                                                    MissedAttributeValue.ValueDouble = DoubleParser;

                                                else
                                                {
                                                    SolarTransaction.Dispose();

                                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                    {
                                                        CreatedAt = DateTime.Now,
                                                        ErrMsg = $"({MissedAttribute.Key}) coulumn's value: ({SolarDataTable.Rows[j][MissedAttribute.Key]}) must be a number",
                                                        IsDeleted = false,
                                                        IsLib = false,
                                                        RefTable = Helpers.Constants.TablesNames.TLIsolar.ToString(),
                                                        SheetName = "Solar",
                                                        UniqueName = $"(Solar Name) : {SolarDataTable.Rows[j]["Solar Name"]}"
                                                    };

                                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                    _unitOfWork.SaveChanges();

                                                    continue;
                                                }
                                            }
                                            else if (MissedAttribute.DataType.Name.ToLower() == "boolean".ToLower())
                                            {
                                                bool BooleanParser = false;

                                                CheckParser = bool.TryParse(SolarDataTable.Rows[j][MissedAttribute.Key].ToString(), out BooleanParser);

                                                if (CheckParser)
                                                    MissedAttributeValue.ValueBoolean = BooleanParser;

                                                else
                                                {
                                                    SolarTransaction.Dispose();

                                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                    {
                                                        CreatedAt = DateTime.Now,
                                                        ErrMsg = $"({MissedAttribute.Key}) coulumn's value: ({SolarDataTable.Rows[j][MissedAttribute.Key]}) must be boolean (Yes/No)",
                                                        IsDeleted = false,
                                                        IsLib = false,
                                                        RefTable = Helpers.Constants.TablesNames.TLIsolar.ToString(),
                                                        SheetName = "Solar",
                                                        UniqueName = $"(Solar Name) : {SolarDataTable.Rows[j]["Solar Name"]}"
                                                    };

                                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                    _unitOfWork.SaveChanges();

                                                    continue;
                                                }
                                            }
                                            else if (MissedAttribute.DataType.Name.ToLower() == "datetime".ToLower())
                                            {
                                                DateTime DateTimeParser = DateTime.Now;

                                                CheckParser = DateTime.TryParse(SolarDataTable.Rows[j][MissedAttribute.Key].ToString(), out DateTimeParser);

                                                if (CheckParser)
                                                    MissedAttributeValue.ValueDateTime = DateTimeParser;

                                                else
                                                {
                                                    SolarTransaction.Dispose();

                                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                    {
                                                        CreatedAt = DateTime.Now,
                                                        ErrMsg = $"({MissedAttribute.Key}) coulumn's value: ({SolarDataTable.Rows[j][MissedAttribute.Key]}) must be date",
                                                        IsDeleted = false,
                                                        IsLib = false,
                                                        RefTable = Helpers.Constants.TablesNames.TLIsolar.ToString(),
                                                        SheetName = "Solar",
                                                        UniqueName = $"(Solar Name) : {SolarDataTable.Rows[j]["Solar Name"]}"
                                                    };

                                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                    _unitOfWork.SaveChanges();

                                                    continue;
                                                }
                                            }

                                            SolarDynamicValues.Add(MissedAttributeValue);
                                        }
                                    }
                                    if (SolarDynamicValues.Count() > 0)
                                    {
                                        _unitOfWork.DynamicAttInstValueRepository.AddRange(SolarDynamicValues);
                                        _unitOfWork.SaveChanges();
                                    }

                                    //
                                    // All Load Installation Information..
                                    //

                                    TLIallOtherInventoryInst NewSolarAllOtherInventoryEntity = new TLIallOtherInventoryInst()
                                    {
                                        solarId = NewSolarEntity.Id,
                                        Draft = false
                                    };

                                    _unitOfWork.AllOtherInventoryInstRepository.Add(NewSolarAllOtherInventoryEntity);
                                    _unitOfWork.SaveChanges();

                                    //
                                    // OtherInSite Information..
                                    //
                                    TLIotherInSite tLIotherInSite = new TLIotherInSite()
                                    {
                                        InstallationDate = DateTime.Now,
                                        SiteCode = Solar_SiteCode,
                                        allOtherInventoryInstId = NewSolarAllOtherInventoryEntity.Id,
                                        ReservedSpace = true,
                                        Dismantle = false

                                    };
                                    _unitOfWork.OtherInSiteRepository.Add(tLIotherInSite);
                                    _unitOfWork.SaveChanges();

                                    SolarTransaction.Complete();
                                }
                                catch (Exception err)
                                {
                                    SolarTransaction.Dispose();

                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                    {
                                        CreatedAt = DateTime.Now,
                                        ErrMsg = err.Message,
                                        IsDeleted = false,
                                        IsLib = false,
                                        RefTable = Helpers.Constants.TablesNames.TLIsolar.ToString(),
                                        SheetName = "Solar",
                                        UniqueName = $"(Solar Name) : {SolarDataTable.Rows[j]["Solar Name"]}"
                                    };

                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                    _unitOfWork.SaveChanges();

                                    continue;
                                }
                            }
                        }

                    ////////////////////////////////////////////////////////////
                    /////////////////// Generator //////////////////////////////////
                    ////////////////////////////////////////////////////////////

                    Generator:

                        ExcelWorksheet GeneratorSheet = package.Workbook.Worksheets.FirstOrDefault(x => x.Name.ToLower() == "Generator".ToLower());
                        int GeneratorRows = 0;
                        try
                        {
                            GeneratorRows = GeneratorSheet.Dimension.End.Row;
                        }
                        catch (NullReferenceException)
                        {
                            System.IO.File.Delete(FilePath);
                            return new Response<string>("Succeed");
                        }
                        int GeneratorColumns = GeneratorSheet.Dimension.End.Column;

                        DataTable GeneratorDataTable = new DataTable();
                        List<string> GeneratorSheetColumn = new List<string>();

                        for (int i = 1; i <= GeneratorColumns; i++)
                        {
                            string ColName = GeneratorSheet.Cells[1, i].Value.ToString().Trim();
                            ColName = Regex.Replace(ColName, @"\s+", " ");

                            GeneratorSheetColumn.Add(ColName);
                            GeneratorDataTable.Columns.Add(ColName);
                        }

                        for (int i = 2; i <= GeneratorRows; i++)
                        {
                            DataRow GeneratorDataRow = GeneratorDataTable.NewRow();
                            for (int j = 1; j <= GeneratorColumns; j++)
                            {
                                string ColName = GeneratorSheet.Cells[1, j].Value.ToString().Trim();
                                ColName = Regex.Replace(ColName, @"\s+", " ");

                                object Value = GeneratorSheet.Cells[i, j].Value;
                                if (Value != null)
                                {
                                    string ValueAsString = Value.ToString().Trim();
                                    ValueAsString = Regex.Replace(ValueAsString, @"\s+", " ");

                                    Value = ValueAsString;
                                    GeneratorDataRow[ColName] = Value;
                                }
                                else
                                {
                                    GeneratorDataRow[ColName] = Value;
                                }
                            }
                            GeneratorDataTable.Rows.Add(GeneratorDataRow);
                        }

                        //
                        // Dynamic Attributes For Generator..
                        //

                        int GeneratorTableNameId = TablesName.FirstOrDefault(x =>
                         x.TableName.ToLower() == Helpers.Constants.TablesNames.TLIgenerator.ToString().ToLower()).Id;

                        List<TLIdynamicAtt> GeneratorMissedAttributeCSV = new List<TLIdynamicAtt>()
                            {
                                new TLIdynamicAtt
                                {
                                    Key = "Region",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = GeneratorTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Area",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = GeneratorTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Short Code",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = GeneratorTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Capacity",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "int".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = GeneratorTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Brand",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = GeneratorTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "status date",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "datetime".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = GeneratorTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Notes",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = GeneratorTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Ampere type",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "double".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = GeneratorTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Site Name",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = GeneratorTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "New installation-Replacement",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = GeneratorTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "New installation-Replacement",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = GeneratorTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                 new TLIdynamicAtt
                                {
                                    Key = "Fuel Tank Capacity",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = GeneratorTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },

                            };

                        List<TLIdynamicAtt> GeneratorAllDynamicAttribute = _unitOfWork.DynamicAttRepository
                            .GetWhere(x => x.tablesNamesId == GeneratorTableNameId).ToList();


                        List<TLIdynamicAtt> GeneratorMissedAttributes = GeneratorMissedAttributeCSV
                           .Except(GeneratorAllDynamicAttribute, new TLIdynamicAttComparer())
                           .ToList();

                        _unitOfWork.DynamicAttRepository.AddRange(GeneratorMissedAttributes);
                        _unitOfWork.SaveChanges();

                        for (int j = 0; j <= GeneratorDataTable.Rows.Count - 1; j++)
                        {
                            using (TransactionScope GeneratorTransaction = new TransactionScope(TransactionScopeOption.Required,
                                new System.TimeSpan(0, 15, 0)))
                            {
                                try
                                {
                                    //
                                    // Library Information..
                                    //

                                    string GeneratorLibraryModel = GeneratorDataTable.Rows[j]["Generator Library"].ToString();
                                    int GeneratorLibraryId = 0;
                                    if (!string.IsNullOrEmpty(GeneratorLibraryModel))
                                    {
                                        GeneratorTransaction.Dispose();

                                        TLIgeneratorLibrary CheckGeneratorLibraryModel = _unitOfWork.GeneratorLibraryRepository
                                             .GetWhereFirst(x => x.Model.ToLower() == GeneratorLibraryModel.ToLower() && !x.Deleted);

                                        if (CheckGeneratorLibraryModel == null)
                                        {
                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Generator Type) coulumn's value: ({GeneratorLibraryModel}) doesn't exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = true,
                                                RefTable = Helpers.Constants.TablesNames.TLIgeneratorLibrary.ToString(),
                                                SheetName = "Generator",
                                                UniqueName = $"(Generator Name) : {GeneratorDataTable.Rows[j]["Generator Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        GeneratorLibraryId = CheckGeneratorLibraryModel.Id;
                                    }
                                    else
                                    {
                                        GeneratorTransaction.Dispose();

                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                        {
                                            CreatedAt = DateTime.Now,
                                            ErrMsg = $"(Generator Library) coulumn's value can't be null or empty",
                                            IsDeleted = false,
                                            IsLib = true,
                                            RefTable = Helpers.Constants.TablesNames.TLIgeneratorLibrary.ToString(),
                                            SheetName = "Generator",
                                            UniqueName = $"(Generator Name) : {GeneratorDataTable.Rows[j]["Generator Name"]}"
                                        };

                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                        _unitOfWork.SaveChanges();

                                        continue;
                                    }

                                    //
                                    // Installation Information..
                                    //

                                    string Generator_SiteCodeAfterCheck = string.Empty;
                                    string Generator_SiteCode = GeneratorDataTable.Rows[j]["Site Code"].ToString();
                                    string Generator_SiteName = GeneratorDataTable.Rows[j]["Site Name"].ToString();

                                    if (!string.IsNullOrEmpty(Generator_SiteCode))
                                    {
                                        TLIsite CheckSiteCode = _unitOfWork.SiteRepository
                                            .GetWhereFirst(x => x.SiteCode.ToLower() == Generator_SiteCode.ToLower());

                                        if (CheckSiteCode == null)
                                        {
                                            GeneratorTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Site Code) coulumn's value: ({Generator_SiteCode}) doesn't exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                                SheetName = "Generator",
                                                UniqueName = $"(Generator Name) : {GeneratorDataTable.Rows[j]["Generator Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }
                                        else
                                        {
                                            if (CheckSiteCode.SiteName.ToLower() != Generator_SiteName.ToLower())
                                            {
                                                GeneratorTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Site Name) coulumn's value: ({Generator_SiteName}) doesn't correct SiteName to SiteCode ({Generator_SiteCode})",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                                    SheetName = "Generator",
                                                    UniqueName = $"(Generator Name) : {GeneratorDataTable.Rows[j]["Generator Name"]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }

                                        Generator_SiteCodeAfterCheck = Generator_SiteCode;
                                    }
                                    else
                                    {
                                        GeneratorTransaction.Dispose();

                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                        {
                                            CreatedAt = DateTime.Now,
                                            ErrMsg = $"The column must have a value (Site Code)",
                                            IsDeleted = false,
                                            IsLib = false,
                                            RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                            SheetName = "Generator",
                                            UniqueName = $"(Generator Name) : {GeneratorDataTable.Rows[j]["Generator Name"]}"
                                        };

                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                        _unitOfWork.SaveChanges();

                                        continue;
                                    }
                                    int IntParser = 0;
                                    string SolarNumberOfSSUtString = GeneratorDataTable.Rows[j]["NumOfFuelTanKs"].ToString();
                                    int NumOfFuelTanKs = 0;
                                    if (!string.IsNullOrEmpty(SolarNumberOfSSUtString))
                                    {
                                        CheckParser = int.TryParse(SolarNumberOfSSUtString, out IntParser);

                                        if (CheckParser)
                                            NumOfFuelTanKs = IntParser;

                                        else
                                        {
                                            GeneratorTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(NumOfFuelTanKs) coulumn's value: ({SolarNumberOfSSUtString}) must be a number",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIsolar.ToString(),
                                                SheetName = "Generator",
                                                UniqueName = $"(Generator Name) : {GeneratorDataTable.Rows[j]["Generator Name"]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }
                                    }

                                    string GeneratorName = GeneratorDataTable.Rows[j]["Generator Name"].ToString();
                                    if (string.IsNullOrEmpty(GeneratorName))
                                    {
                                        GeneratorName = GeneratorLibraryModel + " " + Generator_SiteName;
                                    }

                                    // Check if Power Name is Already Exist on This Site..

                                    TLIotherInSite CheckGeneratorName = _unitOfWork.OtherInSiteRepository
                                            .GetIncludeWhereFirst(x => !x.Dismantle && x.SiteCode.ToLower() == Generator_SiteCodeAfterCheck.ToLower() && x.allOtherInventoryInstId != null ?
                                                (!x.allOtherInventoryInst.Draft && x.allOtherInventoryInst.generatorId != null ?
                                                    (x.allOtherInventoryInst.generator.Name.ToLower() == GeneratorName.ToLower()) : false) : false,
                                                        x => x.allOtherInventoryInst, x => x.allOtherInventoryInst.generator);

                                    if (CheckGeneratorName != null)
                                    {
                                        GeneratorTransaction.Dispose();

                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                        {
                                            CreatedAt = DateTime.Now,
                                            ErrMsg = $"(Generator Name) column's value: ({GeneratorName}) is already exist on this site: ({Generator_SiteCodeAfterCheck})",
                                            IsDeleted = false,
                                            IsLib = false,
                                            RefTable = Helpers.Constants.TablesNames.TLIotherInSite.ToString(),
                                            SheetName = "Generator",
                                            UniqueName = $"(Generator Name) : {GeneratorDataTable.Rows[j]["Generator Name"]}"
                                        };

                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                        _unitOfWork.SaveChanges();

                                        continue;
                                    }

                                    TLIgenerator NewGeneratorEntity = new TLIgenerator()
                                    {
                                        Name = GeneratorName,
                                        NumberOfFuelTanks = NumOfFuelTanKs,
                                        GeneratorLibraryId = GeneratorLibraryId

                                    };

                                    _unitOfWork.GeneratorRepository.Add(NewGeneratorEntity);
                                    _unitOfWork.SaveChanges();


                                    //
                                    // Dynamic Attributes..
                                    //

                                    List<TLIdynamicAttInstValue> GeneratorDynamicValues = new List<TLIdynamicAttInstValue>();

                                    foreach (TLIdynamicAtt MissedAttribute in GeneratorMissedAttributes)
                                    {
                                        if (!string.IsNullOrEmpty(GeneratorDataTable.Rows[j][MissedAttribute.Key].ToString()))
                                        {
                                            TLIdynamicAttInstValue MissedAttributeValue = new TLIdynamicAttInstValue()
                                            {
                                                tablesNamesId = GeneratorTableNameId,
                                                disable = false,
                                                DynamicAttId = MissedAttribute.Id,
                                                InventoryId = NewGeneratorEntity.Id
                                            };

                                            if (MissedAttribute.DataType.Name.ToLower() == "string".ToLower())
                                                MissedAttributeValue.ValueString = GeneratorDataTable.Rows[j][MissedAttribute.Key].ToString();
                                            else if (MissedAttribute.DataType.Name.ToLower() == "int".ToLower() ||
                                                MissedAttribute.DataType.Name.ToLower() == "double".ToLower())
                                            {
                                                double DoubleParser = 0;

                                                CheckParser = double.TryParse(GeneratorDataTable.Rows[j][MissedAttribute.Key].ToString(), out DoubleParser);

                                                if (CheckParser)
                                                    MissedAttributeValue.ValueDouble = DoubleParser;

                                                else
                                                {
                                                    GeneratorTransaction.Dispose();

                                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                    {
                                                        CreatedAt = DateTime.Now,
                                                        ErrMsg = $"({MissedAttribute.Key}) coulumn's value: ({GeneratorDataTable.Rows[j][MissedAttribute.Key]}) must be a number",
                                                        IsDeleted = false,
                                                        IsLib = false,
                                                        RefTable = Helpers.Constants.TablesNames.TLIgenerator.ToString(),
                                                        SheetName = "Generator",
                                                        UniqueName = $"(Generator Name) : {GeneratorDataTable.Rows[j]["Generator Name"]}"
                                                    };

                                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                    _unitOfWork.SaveChanges();

                                                    continue;
                                                }
                                            }
                                            else if (MissedAttribute.DataType.Name.ToLower() == "boolean".ToLower())
                                            {
                                                bool BooleanParser = false;

                                                CheckParser = bool.TryParse(GeneratorDataTable.Rows[j][MissedAttribute.Key].ToString(), out BooleanParser);

                                                if (CheckParser)
                                                    MissedAttributeValue.ValueBoolean = BooleanParser;

                                                else
                                                {
                                                    GeneratorTransaction.Dispose();

                                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                    {
                                                        CreatedAt = DateTime.Now,
                                                        ErrMsg = $"({MissedAttribute.Key}) coulumn's value: ({GeneratorDataTable.Rows[j][MissedAttribute.Key]}) must be boolean (Yes/No)",
                                                        IsDeleted = false,
                                                        IsLib = false,
                                                        RefTable = Helpers.Constants.TablesNames.TLIgenerator.ToString(),
                                                        SheetName = "Generator",
                                                        UniqueName = $"(Generator Name) : {GeneratorDataTable.Rows[j]["Generator Name"]}"
                                                    };

                                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                    _unitOfWork.SaveChanges();

                                                    continue;
                                                }
                                            }
                                            else if (MissedAttribute.DataType.Name.ToLower() == "datetime".ToLower())
                                            {
                                                DateTime DateTimeParser = DateTime.Now;

                                                CheckParser = DateTime.TryParse(GeneratorDataTable.Rows[j][MissedAttribute.Key].ToString(), out DateTimeParser);

                                                if (CheckParser)
                                                    MissedAttributeValue.ValueDateTime = DateTimeParser;

                                                else
                                                {
                                                    GeneratorTransaction.Dispose();

                                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                    {
                                                        CreatedAt = DateTime.Now,
                                                        ErrMsg = $"({MissedAttribute.Key}) coulumn's value: ({GeneratorDataTable.Rows[j][MissedAttribute.Key]}) must be date",
                                                        IsDeleted = false,
                                                        IsLib = false,
                                                        RefTable = Helpers.Constants.TablesNames.TLIgenerator.ToString(),
                                                        SheetName = "Generator",
                                                        UniqueName = $"(Generator Name) : {GeneratorDataTable.Rows[j]["Generator Name"]}"
                                                    };

                                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                    _unitOfWork.SaveChanges();

                                                    continue;
                                                }
                                            }

                                            GeneratorDynamicValues.Add(MissedAttributeValue);
                                        }
                                    }
                                    if (GeneratorDynamicValues.Count() > 0)
                                    {
                                        _unitOfWork.DynamicAttInstValueRepository.AddRange(GeneratorDynamicValues);
                                        _unitOfWork.SaveChanges();
                                    }

                                    //
                                    // All Load Installation Information..
                                    //

                                    TLIallOtherInventoryInst NewGeneratorllOtherInventoryEntity = new TLIallOtherInventoryInst()
                                    {
                                        generatorId = NewGeneratorEntity.Id,
                                        Draft = false
                                    };

                                    _unitOfWork.AllOtherInventoryInstRepository.Add(NewGeneratorllOtherInventoryEntity);
                                    _unitOfWork.SaveChanges();

                                    //
                                    // OtherInSite Information..
                                    //
                                    TLIotherInSite tLIotherInSite = new TLIotherInSite()
                                    {
                                        InstallationDate = DateTime.Now,
                                        SiteCode = Generator_SiteCode,
                                        allOtherInventoryInstId = NewGeneratorllOtherInventoryEntity.Id,
                                        ReservedSpace = true,
                                        Dismantle = false

                                    };
                                    _unitOfWork.OtherInSiteRepository.Add(tLIotherInSite);
                                    _unitOfWork.SaveChanges();

                                    GeneratorTransaction.Complete();
                                }
                                catch (Exception err)
                                {
                                    GeneratorTransaction.Dispose();

                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                    {
                                        CreatedAt = DateTime.Now,
                                        ErrMsg = err.Message,
                                        IsDeleted = false,
                                        IsLib = false,
                                        RefTable = Helpers.Constants.TablesNames.TLIgenerator.ToString(),
                                        SheetName = "Generator",
                                        UniqueName = $"(Generator Name) : {GeneratorDataTable.Rows[j]["Generator Name"]}"
                                    };

                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                    _unitOfWork.SaveChanges();

                                    continue;
                                }
                            }
                        }
                    ////////////////////////////////////////////////////////////
                    /////////////////// CivilWithLegAttachFile //////////////////////////////////
                    ////////////////////////////////////////////////////////////
                    SiteAttachFile:

                        ExcelWorksheet AttachSheet = package.Workbook.Worksheets.FirstOrDefault(x => x.Name.ToLower() == "SiteAttachFile".ToLower());
                        int AttachRows = 0;
                        try
                        {
                            AttachRows = AttachSheet.Dimension.End.Row;
                        }
                        catch (NullReferenceException)
                        {
                            System.IO.File.Delete(FilePath);
                            return new Response<string>("Succeed");
                        }
                        int AttachColumns = AttachSheet.Dimension.End.Column;

                        DataTable AttachDataTable = new DataTable();
                        List<string> AttachSheetColumn = new List<string>();

                        for (int i = 1; i <= AttachColumns; i++)
                        {
                            string ColName = AttachSheet.Cells[1, i].Value.ToString().Trim();
                            ColName = Regex.Replace(ColName, @"\s+", " ");

                            AttachSheetColumn.Add(ColName);
                            AttachDataTable.Columns.Add(ColName);
                        }

                        for (int i = 2; i <= AttachRows; i++)
                        {
                            DataRow AttachDataRow = AttachDataTable.NewRow();
                            for (int j = 1; j <= AttachColumns; j++)
                            {
                                string ColName = AttachSheet.Cells[1, j].Value.ToString().Trim();
                                ColName = Regex.Replace(ColName, @"\s+", " ");

                                object Value = AttachSheet.Cells[i, j].Value;
                                if (Value != null)
                                {
                                    string ValueAsString = Value.ToString().Trim();
                                    ValueAsString = Regex.Replace(ValueAsString, @"\s+", " ");

                                    Value = ValueAsString;
                                    AttachDataRow[ColName] = Value;
                                }
                                else
                                {
                                    AttachDataRow[ColName] = Value;
                                }
                            }
                            AttachDataTable.Rows.Add(AttachDataRow);
                        }
                        for (int j = 0; j <= AttachDataTable.Rows.Count - 1; j++)
                        {
                            using (TransactionScope AttachTransaction = new TransactionScope(TransactionScopeOption.Required,
                                new System.TimeSpan(0, 15, 0)))
                            {
                                try
                                {
                                    int TabelNameId = 0;
                                    string SiteCode = AttachDataTable.Rows[j]["SiteCode"].ToString();
                                    var TabelNames = db.TLItablesNames.FirstOrDefault(x => x.TableName == "TLIsite");
                                    if (TabelNames != null)
                                    {
                                        TabelNameId = TabelNames.Id;
                                    }
                                    string Path = AttachDataTable.Rows[j]["Path"].ToString();
                                    List<string> imgTypes = new List<string>() { "JPEG", "JPG", "PNG", "GIF", "TIFF", "PSD", "AI", "INDD", "RAW" };
                                    var filePaths = System.IO.Path.Combine(_Config["StoreFiles"], Path);
                                    string[] full = System.IO.Directory.GetFiles(filePaths);


                                    foreach (var filePath in full)
                                    {
                                        FileInfo fileInfo = new FileInfo(filePath);

                                        string fileNameWithoutExtension = System.IO.Path.GetFileNameWithoutExtension(filePath); // Extract file name without extension
                                        string fileExtensionFromInfo = fileInfo.Extension.TrimStart('.').ToUpper(); // Get file extension from FileInfo object and convert to uppercase
                                                                                                                    // Calculate file size in megabytes
                                        long fileSizeBytes = fileInfo.Length;
                                        float fileSizePerMega = (float)fileSizeBytes / (1024 * 1024); // Convert bytes to megabytes

                                        bool IsImg = imgTypes.Contains(fileExtensionFromInfo.ToUpper());
                                        var connectiont = _Config["ConnectionStrings:ActiveConnection"];
                                        var connectionString = new OracleConnection(connectiont);
                                        var IsImage = IsImg == false ? 0 : 1;

                                        OracleCommand cmd = connectionString.CreateCommand();



                                        cmd.CommandText = "INSERT INTO \"TLIattachedFiles\" (\"Name\", \"Path\", \"RecordId\", \"tablesNamesId\",\"IsImg\",\"documenttypeId\",\"fileSize\",\"SiteCode\",\"Description\",\"Description2\",\"UnAttached\")" +
                                         " VALUES ('" + fileNameWithoutExtension + "','" + filePath + "','0'," + TabelNameId + "," + IsImage + "," + 0 + "," + fileSizePerMega + ",'" + SiteCode + "','NA','NA',0)";


                                        connectionString.Open();
                                        cmd.ExecuteNonQuery();
                                        connectionString.Close();
                                    }
                                    AttachTransaction.Complete();
                                }
                                catch (Exception err)
                                {
                                    AttachTransaction.Dispose();

                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                    {
                                        CreatedAt = DateTime.Now,
                                        ErrMsg = err.Message,
                                        IsDeleted = false,
                                        IsLib = false,
                                        RefTable = Helpers.Constants.TablesNames.TLIgenerator.ToString(),
                                        SheetName = "SiteAttachFile",
                                        UniqueName = $"(SiteCode) : {AttachDataTable.Rows[j]["SiteCode"]}"
                                    };

                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                    _unitOfWork.SaveChanges();

                                    continue;
                                }
                            }
                        }
                        //////////////////////////////////////////////////////////////
                        ///////////////////// CivilWithoutLegAttachFile //////////////////////////////////
                        //////////////////////////////////////////////////////////////
                        //CivilWithoutLegAttachFile:

                        //    ExcelWorksheet AttachCivilWithoutLegAttachFileSheet = package.Workbook.Worksheets.FirstOrDefault(x => x.Name.ToLower() == "CivilWithoutLegAttachFile".ToLower());
                        //    int AttacCivilWithoutLegAttachFilehRows = 0;
                        //    try
                        //    {
                        //        AttachRows = AttachCivilWithoutLegAttachFileSheet.Dimension.End.Row;
                        //    }
                        //    catch (NullReferenceException)
                        //    {
                        //        goto CivilNonSteelAttachFile;
                        //    }
                        //    int AttachCivilWithoutLegAttachFileColumns = AttachCivilWithoutLegAttachFileSheet.Dimension.End.Column;

                        //    DataTable AttachCivilWithoutLegAttachFileDataTable = new DataTable();
                        //    List<string> AttachCivilWithoutLegAttachFileSheetColumn = new List<string>();

                        //    for (int i = 1; i <= AttachCivilWithoutLegAttachFileColumns; i++)
                        //    {
                        //        string ColName = AttachCivilWithoutLegAttachFileSheet.Cells[1, i].Value.ToString().Trim();
                        //        ColName = Regex.Replace(ColName, @"\s+", " ");

                        //        AttachCivilWithoutLegAttachFileSheetColumn.Add(ColName);
                        //        AttachCivilWithoutLegAttachFileDataTable.Columns.Add(ColName);
                        //    }

                        //    for (int i = 2; i <= AttachRows; i++)
                        //    {
                        //        DataRow AttachCivilWithoutLegAttachFileDataRow = AttachCivilWithoutLegAttachFileDataTable.NewRow();
                        //        for (int j = 1; j <= AttachCivilWithoutLegAttachFileColumns; j++)
                        //        {
                        //            string ColName = AttachCivilWithoutLegAttachFileSheet.Cells[1, j].Value.ToString().Trim();
                        //            ColName = Regex.Replace(ColName, @"\s+", " ");

                        //            object Value = AttachCivilWithoutLegAttachFileSheet.Cells[i, j].Value;
                        //            if (Value != null)
                        //            {
                        //                string ValueAsString = Value.ToString().Trim();
                        //                ValueAsString = Regex.Replace(ValueAsString, @"\s+", " ");

                        //                Value = ValueAsString;
                        //                AttachCivilWithoutLegAttachFileDataRow[ColName] = Value;
                        //            }
                        //            else
                        //            {
                        //                AttachCivilWithoutLegAttachFileDataRow[ColName] = Value;
                        //            }
                        //        }
                        //        AttachCivilWithoutLegAttachFileDataTable.Rows.Add(AttachCivilWithoutLegAttachFileDataRow);
                        //    }
                        //    for (int j = 0; j < 1; j++)
                        //    {
                        //        using (TransactionScope AttachTransaction = new TransactionScope(TransactionScopeOption.Required,
                        //            new System.TimeSpan(0, 15, 0)))
                        //        {
                        //            try
                        //            {
                        //                int RecordId = 0;
                        //                int TabelNameId = 0;
                        //                string SiteCode = AttachCivilWithoutLegAttachFileDataTable.Rows[j]["SITECODE"].ToString();
                        //                string RecordName = AttachCivilWithoutLegAttachFileDataTable.Rows[j]["Name"].ToString();

                        //                var Record = db.TLIcivilWithoutLeg.FirstOrDefault(x => x.Name == RecordName);
                        //                if (Record != null)
                        //                {
                        //                    RecordId = Record.Id;
                        //                }
                        //                var TabelNames = db.TLItablesNames.FirstOrDefault(x => x.TableName == "TLIcivilWithoutLeg");
                        //                if (TabelNames != null)
                        //                {
                        //                    TabelNameId = TabelNames.Id;
                        //                }
                        //                string Path = AttachCivilWithoutLegAttachFileDataTable.Rows[j]["Path"].ToString();
                        //                List<string> imgTypes = new List<string>() { "JPEG", "JPG", "PNG", "GIF", "TIFF", "PSD", "AI", "INDD", "RAW" };
                        //                var filePaths = System.IO.Path.Combine(_Config["StoreFiles"], Path);
                        //                string[] full = System.IO.Directory.GetFiles(filePaths);


                        //                foreach (var filePath in full)
                        //                {
                        //                    FileInfo fileInfo = new FileInfo(filePath);

                        //                    string fileNameWithoutExtension = System.IO.Path.GetFileNameWithoutExtension(filePath); // Extract file name without extension
                        //                    string fileExtensionFromInfo = fileInfo.Extension.TrimStart('.').ToUpper(); // Get file extension from FileInfo object and convert to uppercase
                        //                                                                                                // Calculate file size in megabytes
                        //                    long fileSizeBytes = fileInfo.Length;
                        //                    float fileSizePerMega = (float)fileSizeBytes / (1024 * 1024); // Convert bytes to megabytes

                        //                    bool IsImg = imgTypes.Contains(fileExtensionFromInfo.ToUpper());
                        //                    var connectiont = _Config["ConnectionStrings:ActiveConnection"];
                        //                    var connectionString = new OracleConnection(connectiont);
                        //                    var IsImage = IsImg == false ? 0 : 1;

                        //                    OracleCommand cmd = connectionString.CreateCommand();



                        //                    cmd.CommandText = "INSERT INTO \"TLIattachedFiles\" (\"Name\", \"Path\", \"RecordId\", \"tablesNamesId\",\"IsImg\",\"documenttypeId\",\"fileSize\",\"SiteCode\",\"Description\",\"Description2\",\"UnAttached\")" +
                        //                     " VALUES ('" + fileNameWithoutExtension + "','" + filePath + "','0'," + TabelNameId + "," + IsImage + "," + 0 + "," + fileSizePerMega + ",'" + SiteCode + "','NA','NA',0)";


                        //                    connectionString.Open();
                        //                    cmd.ExecuteNonQuery();
                        //                    connectionString.Close();

                        //                }
                        //                AttachTransaction.Complete();
                        //            }
                        //            catch (Exception err)
                        //            {
                        //                AttachTransaction.Dispose();

                        //                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                        //                {
                        //                    CreatedAt = DateTime.Now,
                        //                    ErrMsg = err.Message,
                        //                    IsDeleted = false,
                        //                    IsLib = false,
                        //                    RefTable = Helpers.Constants.TablesNames.TLIgenerator.ToString(),
                        //                    SheetName = "CivilWithoutLegAttachFile",
                        //                    UniqueName = $"(Civil Name) : {AttachCivilWithoutLegAttachFileDataTable.Rows[j]["Name"]}"
                        //                };

                        //                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                        //                _unitOfWork.SaveChanges();

                        //                continue;
                        //            }
                        //        }
                        //    }
                        //////////////////////////////////////////////////////////////
                        ///////////////////// CivilNonSteelAttachFile //////////////////////////////////
                        //////////////////////////////////////////////////////////////
                        //CivilNonSteelAttachFile:

                        //    ExcelWorksheet AttachCivilNonSteelAttachFileSheet = package.Workbook.Worksheets.FirstOrDefault(x => x.Name.ToLower() == "CivilNonSteelAttachFile".ToLower());
                        //    int AttachCivilNonSteelAttachFileRows = 0;
                        //    try
                        //    {
                        //        AttachCivilNonSteelAttachFileRows = AttachCivilNonSteelAttachFileSheet.Dimension.End.Row;
                        //    }
                        //    catch (NullReferenceException)
                        //    {
                        //        goto SideArmAttachFile;
                        //    }
                        //    int AttachCivilNonSteelAttachFileColumns = AttachCivilNonSteelAttachFileSheet.Dimension.End.Column;

                        //    DataTable AttachCivilNonSteelAttachFileDataTable = new DataTable();
                        //    List<string> AttachCivilNonSteelAttachFileSheetColumn = new List<string>();

                        //    for (int i = 1; i <= AttachCivilNonSteelAttachFileColumns; i++)
                        //    {
                        //        string ColName = AttachCivilNonSteelAttachFileSheet.Cells[1, i].Value.ToString().Trim();
                        //        ColName = Regex.Replace(ColName, @"\s+", " ");

                        //        AttachCivilNonSteelAttachFileSheetColumn.Add(ColName);
                        //        AttachCivilNonSteelAttachFileDataTable.Columns.Add(ColName);
                        //    }

                        //    for (int i = 2; i <= AttachRows; i++)
                        //    {
                        //        DataRow AttachCivilNonSteelAttachFileDataRow = AttachCivilNonSteelAttachFileDataTable.NewRow();
                        //        for (int j = 1; j <= AttachCivilNonSteelAttachFileColumns; j++)
                        //        {
                        //            string ColName = AttachCivilNonSteelAttachFileSheet.Cells[1, j].Value.ToString().Trim();
                        //            ColName = Regex.Replace(ColName, @"\s+", " ");

                        //            object Value = AttachCivilNonSteelAttachFileSheet.Cells[i, j].Value;
                        //            if (Value != null)
                        //            {
                        //                string ValueAsString = Value.ToString().Trim();
                        //                ValueAsString = Regex.Replace(ValueAsString, @"\s+", " ");

                        //                Value = ValueAsString;
                        //                AttachCivilNonSteelAttachFileDataRow[ColName] = Value;
                        //            }
                        //            else
                        //            {
                        //                AttachCivilNonSteelAttachFileDataRow[ColName] = Value;
                        //            }
                        //        }
                        //        AttachCivilNonSteelAttachFileDataTable.Rows.Add(AttachCivilNonSteelAttachFileDataRow);
                        //    }
                        //    for (int j = 0; j < 1; j++)
                        //    {
                        //        using (TransactionScope AttachTransaction = new TransactionScope(TransactionScopeOption.Required,
                        //            new System.TimeSpan(0, 15, 0)))
                        //        {
                        //            try
                        //            {
                        //                int RecordId = 0;
                        //                int TabelNameId = 0;
                        //                string SiteCode = AttachCivilNonSteelAttachFileDataTable.Rows[j]["SITECODE"].ToString();
                        //                string RecordName = AttachCivilNonSteelAttachFileDataTable.Rows[j]["Name"].ToString();

                        //                var Record = db.TLIcivilNonSteel.FirstOrDefault(x => x.Name == RecordName);
                        //                if (Record != null)
                        //                {
                        //                    RecordId = Record.Id;
                        //                }

                        //                var TabelNames = db.TLItablesNames.FirstOrDefault(x => x.TableName == "TLIcivilNonSteel");
                        //                if (TabelNames != null)
                        //                {
                        //                    TabelNameId = TabelNames.Id;
                        //                }
                        //                string Path = AttachCivilNonSteelAttachFileDataTable.Rows[j]["Path"].ToString();
                        //                List<string> imgTypes = new List<string>() { "JPEG", "JPG", "PNG", "GIF", "TIFF", "PSD", "AI", "INDD", "RAW" };

                        //                var filePaths = System.IO.Path.Combine(_Config["StoreFiles"], Path);
                        //                string[] full = System.IO.Directory.GetFiles(filePaths);


                        //                foreach (var filePath in full)
                        //                {
                        //                    FileInfo fileInfo = new FileInfo(filePath);

                        //                    string fileNameWithoutExtension = System.IO.Path.GetFileNameWithoutExtension(filePath); // Extract file name without extension
                        //                    string fileExtensionFromInfo = fileInfo.Extension.TrimStart('.').ToUpper(); // Get file extension from FileInfo object and convert to uppercase
                        //                                                                                                // Calculate file size in megabytes
                        //                    long fileSizeBytes = fileInfo.Length;
                        //                    float fileSizePerMega = (float)fileSizeBytes / (1024 * 1024); // Convert bytes to megabytes

                        //                    bool IsImg = imgTypes.Contains(fileExtensionFromInfo.ToUpper());
                        //                    var connectiont = _Config["ConnectionStrings:ActiveConnection"];
                        //                    var connectionString = new OracleConnection(connectiont);
                        //                    var IsImage = IsImg == false ? 0 : 1;

                        //                    OracleCommand cmd = connectionString.CreateCommand();



                        //                    cmd.CommandText = "INSERT INTO \"TLIattachedFiles\" (\"Name\", \"Path\", \"RecordId\", \"tablesNamesId\",\"IsImg\",\"documenttypeId\",\"fileSize\",\"SiteCode\",\"Description\",\"Description2\",\"UnAttached\")" +
                        //                     " VALUES ('" + fileNameWithoutExtension + "','" + filePath + "','0'," + TabelNameId + "," + IsImage + "," + 0 + "," + fileSizePerMega + ",'" + SiteCode + "','NA','NA',0)";


                        //                    connectionString.Open();
                        //                    cmd.ExecuteNonQuery();
                        //                    connectionString.Close();

                        //                }
                        //                AttachTransaction.Complete();
                        //            }
                        //            catch (Exception err)
                        //            {
                        //                AttachTransaction.Dispose();

                        //                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                        //                {
                        //                    CreatedAt = DateTime.Now,
                        //                    ErrMsg = err.Message,
                        //                    IsDeleted = false,
                        //                    IsLib = false,
                        //                    RefTable = Helpers.Constants.TablesNames.TLIgenerator.ToString(),
                        //                    SheetName = "CivilNonSteelAttachFile",
                        //                    UniqueName = $"(Civil Name) : {AttachCivilNonSteelAttachFileDataTable.Rows[j]["Name"]}"
                        //                };

                        //                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                        //                _unitOfWork.SaveChanges();

                        //                continue;
                        //            }
                        //        }
                        //    }
                        //////////////////////////////////////////////////////////////
                        ///////////////////// SideArmAttachFile //////////////////////////////////
                        //////////////////////////////////////////////////////////////
                        //SideArmAttachFile:

                        //    ExcelWorksheet AttachSideArmAttachFileSheet = package.Workbook.Worksheets.FirstOrDefault(x => x.Name.ToLower() == "SideArmAttachFile".ToLower());
                        //    int AttachSideArmAttachFileRows = 0;
                        //    try
                        //    {
                        //        AttachSideArmAttachFileRows = AttachSideArmAttachFileSheet.Dimension.End.Row;
                        //    }
                        //    catch (NullReferenceException)
                        //    {
                        //        goto MWODUAttachFileFile;
                        //    }
                        //    int AttachSideArmAttachFileColumns = AttachSideArmAttachFileSheet.Dimension.End.Column;

                        //    DataTable AttachSideArmAttachFileDataTable = new DataTable();
                        //    List<string> AttachSideArmAttachFileSheetColumn = new List<string>();

                        //    for (int i = 1; i <= AttachSideArmAttachFileColumns; i++)
                        //    {
                        //        string ColName = AttachSideArmAttachFileSheet.Cells[1, i].Value.ToString().Trim();
                        //        ColName = Regex.Replace(ColName, @"\s+", " ");

                        //        AttachSideArmAttachFileSheetColumn.Add(ColName);
                        //        AttachSideArmAttachFileDataTable.Columns.Add(ColName);
                        //    }

                        //    for (int i = 2; i <= AttachRows; i++)
                        //    {
                        //        DataRow AttachSideArmAttachFileDataRow = AttachSideArmAttachFileDataTable.NewRow();
                        //        for (int j = 1; j <= AttachSideArmAttachFileColumns; j++)
                        //        {
                        //            string ColName = AttachSideArmAttachFileSheet.Cells[1, j].Value.ToString().Trim();
                        //            ColName = Regex.Replace(ColName, @"\s+", " ");

                        //            object Value = AttachSideArmAttachFileSheet.Cells[i, j].Value;
                        //            if (Value != null)
                        //            {
                        //                string ValueAsString = Value.ToString().Trim();
                        //                ValueAsString = Regex.Replace(ValueAsString, @"\s+", " ");

                        //                Value = ValueAsString;
                        //                AttachSideArmAttachFileDataRow[ColName] = Value;
                        //            }
                        //            else
                        //            {
                        //                AttachSideArmAttachFileDataRow[ColName] = Value;
                        //            }
                        //        }
                        //        AttachSideArmAttachFileDataTable.Rows.Add(AttachSideArmAttachFileDataRow);
                        //    }
                        //    for (int j = 0; j < 1; j++)
                        //    {
                        //        using (TransactionScope AttachTransaction = new TransactionScope(TransactionScopeOption.Required,
                        //            new System.TimeSpan(0, 15, 0)))
                        //        {
                        //            try
                        //            {
                        //                int RecordId = 0;
                        //                int TabelNameId = 0;
                        //                string SiteCode = AttachSideArmAttachFileDataTable.Rows[j]["SITECODE"].ToString();
                        //                string RecordName = AttachSideArmAttachFileDataTable.Rows[j]["Name"].ToString();

                        //                var Record = db.TLIcivilNonSteel.FirstOrDefault(x => x.Name == RecordName);
                        //                if (Record != null)
                        //                {
                        //                    RecordId = Record.Id;
                        //                }
                        //                var TabelNames = db.TLItablesNames.FirstOrDefault(x => x.TableName == "TLIsideArm");
                        //                if (TabelNames != null)
                        //                {
                        //                    TabelNameId = TabelNames.Id;
                        //                }
                        //                string Path = AttachSideArmAttachFileDataTable.Rows[j]["Path"].ToString();
                        //                List<string> imgTypes = new List<string>() { "JPEG", "JPG", "PNG", "GIF", "TIFF", "PSD", "AI", "INDD", "RAW" };

                        //                var filePaths = System.IO.Path.Combine(_Config["StoreFiles"], Path);
                        //                string[] full = System.IO.Directory.GetFiles(filePaths);


                        //                foreach (var filePath in full)
                        //                {
                        //                    FileInfo fileInfo = new FileInfo(filePath);

                        //                    string fileNameWithoutExtension = System.IO.Path.GetFileNameWithoutExtension(filePath); // Extract file name without extension
                        //                    string fileExtensionFromInfo = fileInfo.Extension.TrimStart('.').ToUpper(); // Get file extension from FileInfo object and convert to uppercase
                        //                                                                                                // Calculate file size in megabytes
                        //                    long fileSizeBytes = fileInfo.Length;
                        //                    float fileSizePerMega = (float)fileSizeBytes / (1024 * 1024); // Convert bytes to megabytes

                        //                    bool IsImg = imgTypes.Contains(fileExtensionFromInfo.ToUpper());
                        //                    var connectiont = _Config["ConnectionStrings:ActiveConnection"];
                        //                    var connectionString = new OracleConnection(connectiont);
                        //                    var IsImage = IsImg == false ? 0 : 1;

                        //                    OracleCommand cmd = connectionString.CreateCommand();



                        //                    cmd.CommandText = "INSERT INTO \"TLIattachedFiles\" (\"Name\", \"Path\", \"RecordId\", \"tablesNamesId\",\"IsImg\",\"documenttypeId\",\"fileSize\",\"SiteCode\",\"Description\",\"Description2\",\"UnAttached\")" +
                        //                     " VALUES ('" + fileNameWithoutExtension + "','" + filePath + "','0'," + TabelNameId + "," + IsImage + "," + 0 + "," + fileSizePerMega + ",'" + SiteCode + "','NA','NA',0)";


                        //                    connectionString.Open();
                        //                    cmd.ExecuteNonQuery();
                        //                    connectionString.Close();

                        //                }
                        //                AttachTransaction.Complete();
                        //            }
                        //            catch (Exception err)
                        //            {
                        //                AttachTransaction.Dispose();

                        //                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                        //                {
                        //                    CreatedAt = DateTime.Now,
                        //                    ErrMsg = err.Message,
                        //                    IsDeleted = false,
                        //                    IsLib = false,
                        //                    RefTable = Helpers.Constants.TablesNames.TLIgenerator.ToString(),
                        //                    SheetName = "SideArmAttachFile",
                        //                    UniqueName = $"(Civil Name) : {AttachSideArmAttachFileDataTable.Rows[j]["Name"]}"
                        //                };

                        //                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                        //                _unitOfWork.SaveChanges();

                        //                continue;
                        //            }
                        //        }
                        //    }
                        //////////////////////////////////////////////////////////////
                        ///////////////////// MWODUAttachFile //////////////////////////////////
                        //////////////////////////////////////////////////////////////
                        //MWODUAttachFileFile:

                        //    ExcelWorksheet MWODUAttachFileSheet = package.Workbook.Worksheets.FirstOrDefault(x => x.Name.ToLower() == "MWODUAttachFileFile".ToLower());
                        //    int MWODUAttachFileRows = 0;
                        //    try
                        //    {
                        //        MWODUAttachFileRows = MWODUAttachFileSheet.Dimension.End.Row;
                        //    }
                        //    catch (NullReferenceException)
                        //    {
                        //        goto MWDishAttachFile;
                        //    }
                        //    int MWODUAttachFileColumns = MWODUAttachFileSheet.Dimension.End.Column;

                        //    DataTable MWODUAttachFileDataTable = new DataTable();
                        //    List<string> MWODUAttachFileSheetColumn = new List<string>();

                        //    for (int i = 1; i <= MWODUAttachFileColumns; i++)
                        //    {
                        //        string ColName = MWODUAttachFileSheet.Cells[1, i].Value.ToString().Trim();
                        //        ColName = Regex.Replace(ColName, @"\s+", " ");

                        //        MWODUAttachFileSheetColumn.Add(ColName);
                        //        MWODUAttachFileDataTable.Columns.Add(ColName);
                        //    }

                        //    for (int i = 2; i <= MWODUAttachFileRows; i++)
                        //    {
                        //        DataRow MWODUAttachFileDataRow = MWODUAttachFileDataTable.NewRow();
                        //        for (int j = 1; j <= MWODUAttachFileColumns; j++)
                        //        {
                        //            string ColName = MWODUAttachFileSheet.Cells[1, j].Value.ToString().Trim();
                        //            ColName = Regex.Replace(ColName, @"\s+", " ");

                        //            object Value = MWODUAttachFileSheet.Cells[i, j].Value;
                        //            if (Value != null)
                        //            {
                        //                string ValueAsString = Value.ToString().Trim();
                        //                ValueAsString = Regex.Replace(ValueAsString, @"\s+", " ");

                        //                Value = ValueAsString;
                        //                MWODUAttachFileDataRow[ColName] = Value;
                        //            }
                        //            else
                        //            {
                        //                MWODUAttachFileDataRow[ColName] = Value;
                        //            }
                        //        }
                        //        MWODUAttachFileDataTable.Rows.Add(MWODUAttachFileDataRow);
                        //    }
                        //    for (int j = 0; j < 1; j++)
                        //    {
                        //        using (TransactionScope MWODUAttachFileTransaction = new TransactionScope(TransactionScopeOption.Required,
                        //            new System.TimeSpan(0, 15, 0)))
                        //        {
                        //            try
                        //            {
                        //                int RecordId = 0;
                        //                int TabelNameId = 0;
                        //                string SiteCode = MWODUAttachFileDataTable.Rows[j]["SITECODE"].ToString();
                        //                string RecordName = MWODUAttachFileDataTable.Rows[j]["Name"].ToString();

                        //                var Record = db.TLIcivilWithLegs.FirstOrDefault(x => x.Name == RecordName);
                        //                if (Record != null)
                        //                {
                        //                    RecordId = Record.Id;
                        //                }
                        //                var TabelNames = db.TLItablesNames.FirstOrDefault(x => x.TableName == "TLImwODU");
                        //                if (TabelNames != null)
                        //                {
                        //                    TabelNameId = TabelNames.Id;
                        //                }
                        //                string Path = MWODUAttachFileDataTable.Rows[j]["Path"].ToString();
                        //                List<string> imgTypes = new List<string>() { "JPEG", "JPG", "PNG", "GIF", "TIFF", "PSD", "AI", "INDD", "RAW" };

                        //                var filePaths = System.IO.Path.Combine(_Config["StoreFiles"], Path);
                        //                string[] full = System.IO.Directory.GetFiles(filePaths);


                        //                foreach (var filePath in full)
                        //                {
                        //                    FileInfo fileInfo = new FileInfo(filePath);

                        //                    string fileNameWithoutExtension = System.IO.Path.GetFileNameWithoutExtension(filePath); // Extract file name without extension
                        //                    string fileExtensionFromInfo = fileInfo.Extension.TrimStart('.').ToUpper(); // Get file extension from FileInfo object and convert to uppercase
                        //                                                                                                // Calculate file size in megabytes
                        //                    long fileSizeBytes = fileInfo.Length;
                        //                    float fileSizePerMega = (float)fileSizeBytes / (1024 * 1024); // Convert bytes to megabytes

                        //                    bool IsImg = imgTypes.Contains(fileExtensionFromInfo.ToUpper());
                        //                    var connectiont = _Config["ConnectionStrings:ActiveConnection"];
                        //                    var connectionString = new OracleConnection(connectiont);
                        //                    var IsImage = IsImg == false ? 0 : 1;

                        //                    OracleCommand cmd = connectionString.CreateCommand();



                        //                    cmd.CommandText = "INSERT INTO \"TLIMWODUAttachFileedFiles\" (\"Name\", \"Path\", \"RecordId\", \"tablesNamesId\",\"IsImg\",\"documenttypeId\",\"fileSize\",\"SiteCode\",\"Description\",\"Description2\",\"UnMWODUAttachFileed\")" +
                        //                     " VALUES ('" + fileNameWithoutExtension + "','" + filePath + "','0'," + TabelNameId + "," + IsImage + "," + 0 + "," + fileSizePerMega + ",'" + SiteCode + "','NA','NA',0)";


                        //                    connectionString.Open();
                        //                    cmd.ExecuteNonQuery();
                        //                    connectionString.Close();

                        //                }
                        //                MWODUAttachFileTransaction.Complete();
                        //            }
                        //            catch (Exception err)
                        //            {
                        //                MWODUAttachFileTransaction.Dispose();

                        //                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                        //                {
                        //                    CreatedAt = DateTime.Now,
                        //                    ErrMsg = err.Message,
                        //                    IsDeleted = false,
                        //                    IsLib = false,
                        //                    RefTable = Helpers.Constants.TablesNames.TLIgenerator.ToString(),
                        //                    SheetName = "MWODUAttachFileFile",
                        //                    UniqueName = $"(Civil Name) : {MWODUAttachFileDataTable.Rows[j]["Name"]}"
                        //                };

                        //                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                        //                _unitOfWork.SaveChanges();

                        //                continue;
                        //            }
                        //        }
                        //    } 
                        //////////////////////////////////////////////////////////////
                        ///////////////////// MWDishAttachFile //////////////////////////////////
                        //////////////////////////////////////////////////////////////
                        //MWDishAttachFile:

                        //    ExcelWorksheet MWDishAttachFileSheet = package.Workbook.Worksheets.FirstOrDefault(x => x.Name.ToLower() == "MWDishAttachFile".ToLower());
                        //    int MWDishAttachFileRows = 0;
                        //    try
                        //    {
                        //        MWDishAttachFileRows = MWDishAttachFileSheet.Dimension.End.Row;
                        //    }
                        //    catch (NullReferenceException)
                        //    {
                        //        goto RadioAntennaAttachFile;
                        //    }
                        //    int MWDishAttachFileColumns = MWDishAttachFileSheet.Dimension.End.Column;

                        //    DataTable MWDishAttachFileDataTable = new DataTable();
                        //    List<string> MWDishAttachFileSheetColumn = new List<string>();

                        //    for (int i = 1; i <= MWDishAttachFileColumns; i++)
                        //    {
                        //        string ColName = MWDishAttachFileSheet.Cells[1, i].Value.ToString().Trim();
                        //        ColName = Regex.Replace(ColName, @"\s+", " ");

                        //        MWDishAttachFileSheetColumn.Add(ColName);
                        //        MWDishAttachFileDataTable.Columns.Add(ColName);
                        //    }

                        //    for (int i = 2; i <= MWDishAttachFileRows; i++)
                        //    {
                        //        DataRow MWDishAttachFileDataRow = MWDishAttachFileDataTable.NewRow();
                        //        for (int j = 1; j <= MWDishAttachFileColumns; j++)
                        //        {
                        //            string ColName = MWDishAttachFileSheet.Cells[1, j].Value.ToString().Trim();
                        //            ColName = Regex.Replace(ColName, @"\s+", " ");

                        //            object Value = MWDishAttachFileSheet.Cells[i, j].Value;
                        //            if (Value != null)
                        //            {
                        //                string ValueAsString = Value.ToString().Trim();
                        //                ValueAsString = Regex.Replace(ValueAsString, @"\s+", " ");

                        //                Value = ValueAsString;
                        //                MWDishAttachFileDataRow[ColName] = Value;
                        //            }
                        //            else
                        //            {
                        //                MWDishAttachFileDataRow[ColName] = Value;
                        //            }
                        //        }
                        //        MWDishAttachFileDataTable.Rows.Add(MWDishAttachFileDataRow);
                        //    }
                        //    for (int j = 0; j < 1; j++)
                        //    {
                        //        using (TransactionScope MWDishAttachFileTransaction = new TransactionScope(TransactionScopeOption.Required,
                        //            new System.TimeSpan(0, 15, 0)))
                        //        {
                        //            try
                        //            {
                        //                int RecordId = 0;
                        //                int TabelNameId = 0;
                        //                string SiteCode = MWDishAttachFileDataTable.Rows[j]["SITECODE"].ToString();
                        //                string RecordName = MWDishAttachFileDataTable.Rows[j]["Name"].ToString();

                        //                var Record = db.TLIcivilWithLegs.FirstOrDefault(x => x.Name == RecordName);
                        //                if (Record != null)
                        //                {
                        //                    RecordId = Record.Id;
                        //                }

                        //                var TabelNames = db.TLItablesNames.FirstOrDefault(x => x.TableName == "TLImwDish");
                        //                if (TabelNames != null)
                        //                {
                        //                    TabelNameId = TabelNames.Id;
                        //                }
                        //                string Path = MWDishAttachFileDataTable.Rows[j]["Path"].ToString();
                        //                List<string> imgTypes = new List<string>() { "JPEG", "JPG", "PNG", "GIF", "TIFF", "PSD", "AI", "INDD", "RAW" };

                        //                var filePaths = System.IO.Path.Combine(_Config["StoreFiles"], Path);
                        //                string[] full = System.IO.Directory.GetFiles(filePaths);


                        //                foreach (var filePath in full)
                        //                {
                        //                    FileInfo fileInfo = new FileInfo(filePath);

                        //                    string fileNameWithoutExtension = System.IO.Path.GetFileNameWithoutExtension(filePath); // Extract file name without extension
                        //                    string fileExtensionFromInfo = fileInfo.Extension.TrimStart('.').ToUpper(); // Get file extension from FileInfo object and convert to uppercase
                        //                                                                                                // Calculate file size in megabytes
                        //                    long fileSizeBytes = fileInfo.Length;
                        //                    float fileSizePerMega = (float)fileSizeBytes / (1024 * 1024); // Convert bytes to megabytes

                        //                    bool IsImg = imgTypes.Contains(fileExtensionFromInfo.ToUpper());
                        //                    var connectiont = _Config["ConnectionStrings:ActiveConnection"];
                        //                    var connectionString = new OracleConnection(connectiont);
                        //                    var IsImage = IsImg == false ? 0 : 1;

                        //                    OracleCommand cmd = connectionString.CreateCommand();



                        //                    cmd.CommandText = "INSERT INTO \"TLIMWDishAttachFileedFiles\" (\"Name\", \"Path\", \"RecordId\", \"tablesNamesId\",\"IsImg\",\"documenttypeId\",\"fileSize\",\"SiteCode\",\"Description\",\"Description2\",\"UnMWDishAttachFileed\")" +
                        //                     " VALUES ('" + fileNameWithoutExtension + "','" + filePath + "','0'," + TabelNameId + "," + IsImage + "," + 0 + "," + fileSizePerMega + ",'" + SiteCode + "','NA','NA',0)";


                        //                    connectionString.Open();
                        //                    cmd.ExecuteNonQuery();
                        //                    connectionString.Close();

                        //                }
                        //                MWDishAttachFileTransaction.Complete();
                        //            }
                        //            catch (Exception err)
                        //            {
                        //                MWDishAttachFileTransaction.Dispose();

                        //                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                        //                {
                        //                    CreatedAt = DateTime.Now,
                        //                    ErrMsg = err.Message,
                        //                    IsDeleted = false,
                        //                    IsLib = false,
                        //                    RefTable = Helpers.Constants.TablesNames.TLIgenerator.ToString(),
                        //                    SheetName = "MWDishAttachFile",
                        //                    UniqueName = $"(Civil Name) : {MWDishAttachFileDataTable.Rows[j]["Name"]}"
                        //                };

                        //                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                        //                _unitOfWork.SaveChanges();

                        //                continue;
                        //            }
                        //        }
                        //    }
                        //////////////////////////////////////////////////////////////
                        ///////////////////// RadioAntennaAttachFile //////////////////////////////////
                        //////////////////////////////////////////////////////////////
                        //RadioAntennaAttachFile:

                        //    ExcelWorksheet RadioAntennaAttachFile = package.Workbook.Worksheets.FirstOrDefault(x => x.Name.ToLower() == "RadioAntennaAttachFile".ToLower());
                        //    int RadioAntennaAttachFileRows = 0;
                        //    try
                        //    {
                        //        RadioAntennaAttachFileRows = RadioAntennaAttachFile.Dimension.End.Row;
                        //    }
                        //    catch (NullReferenceException)
                        //    {
                        //        goto RadioRRUAttachFile;
                        //    }
                        //    int RadioAntennaAttachFileColumns = RadioAntennaAttachFile.Dimension.End.Column;

                        //    DataTable RadioAntennaAttachFileDataTable = new DataTable();
                        //    List<string> RadioAntennaAttachFileColumn = new List<string>();

                        //    for (int i = 1; i <= RadioAntennaAttachFileColumns; i++)
                        //    {
                        //        string ColName = RadioAntennaAttachFile.Cells[1, i].Value.ToString().Trim();
                        //        ColName = Regex.Replace(ColName, @"\s+", " ");

                        //        RadioAntennaAttachFileColumn.Add(ColName);
                        //        RadioAntennaAttachFileDataTable.Columns.Add(ColName);
                        //    }

                        //    for (int i = 2; i <= RadioAntennaAttachFileRows; i++)
                        //    {
                        //        DataRow RadioAntennaAttachFileDataRow = RadioAntennaAttachFileDataTable.NewRow();
                        //        for (int j = 1; j <= RadioAntennaAttachFileColumns; j++)
                        //        {
                        //            string ColName = RadioAntennaAttachFile.Cells[1, j].Value.ToString().Trim();
                        //            ColName = Regex.Replace(ColName, @"\s+", " ");

                        //            object Value = RadioAntennaAttachFile.Cells[i, j].Value;
                        //            if (Value != null)
                        //            {
                        //                string ValueAsString = Value.ToString().Trim();
                        //                ValueAsString = Regex.Replace(ValueAsString, @"\s+", " ");

                        //                Value = ValueAsString;
                        //                RadioAntennaAttachFileDataRow[ColName] = Value;
                        //            }
                        //            else
                        //            {
                        //                RadioAntennaAttachFileDataRow[ColName] = Value;
                        //            }
                        //        }
                        //        RadioAntennaAttachFileDataTable.Rows.Add(RadioAntennaAttachFileDataRow);
                        //    }
                        //    for (int j = 0; j < 1; j++)
                        //    {
                        //        using (TransactionScope RadioAntennaAttachFileTransaction = new TransactionScope(TransactionScopeOption.Required,
                        //            new System.TimeSpan(0, 15, 0)))
                        //        {
                        //            try
                        //            {
                        //                int RecordId = 0;
                        //                int TabelNameId = 0;
                        //                string SiteCode = RadioAntennaAttachFileDataTable.Rows[j]["SITECODE"].ToString();
                        //                string RecordName = RadioAntennaAttachFileDataTable.Rows[j]["Name"].ToString();

                        //                var Record = db.TLIcivilWithLegs.FirstOrDefault(x => x.Name == RecordName);
                        //                if (Record != null)
                        //                {
                        //                    RecordId = Record.Id;
                        //                }

                        //                var TabelNames = db.TLItablesNames.FirstOrDefault(x => x.TableName == "TLIradioAntenna");
                        //                if (TabelNames != null)
                        //                {
                        //                    TabelNameId = TabelNames.Id;
                        //                }
                        //                string Path = RadioAntennaAttachFileDataTable.Rows[j]["Path"].ToString();
                        //                List<string> imgTypes = new List<string>() { "JPEG", "JPG", "PNG", "GIF", "TIFF", "PSD", "AI", "INDD", "RAW" };

                        //                var filePaths = System.IO.Path.Combine(_Config["StoreFiles"], Path);
                        //                string[] full = System.IO.Directory.GetFiles(filePaths);


                        //                foreach (var filePath in full)
                        //                {
                        //                    FileInfo fileInfo = new FileInfo(filePath);

                        //                    string fileNameWithoutExtension = System.IO.Path.GetFileNameWithoutExtension(filePath); // Extract file name without extension
                        //                    string fileExtensionFromInfo = fileInfo.Extension.TrimStart('.').ToUpper(); // Get file extension from FileInfo object and convert to uppercase
                        //                                                                                                // Calculate file size in megabytes
                        //                    long fileSizeBytes = fileInfo.Length;
                        //                    float fileSizePerMega = (float)fileSizeBytes / (1024 * 1024); // Convert bytes to megabytes

                        //                    bool IsImg = imgTypes.Contains(fileExtensionFromInfo.ToUpper());
                        //                    var connectiont = _Config["ConnectionStrings:ActiveConnection"];
                        //                    var connectionString = new OracleConnection(connectiont);
                        //                    var IsImage = IsImg == false ? 0 : 1;

                        //                    OracleCommand cmd = connectionString.CreateCommand();



                        //                    cmd.CommandText = "INSERT INTO \"TLIRadioAntennaAttachFileedFiles\" (\"Name\", \"Path\", \"RecordId\", \"tablesNamesId\",\"IsImg\",\"documenttypeId\",\"fileSize\",\"SiteCode\",\"Description\",\"Description2\",\"UnRadioAntennaAttachFileed\")" +
                        //                     " VALUES ('" + fileNameWithoutExtension + "','" + filePath + "','0'," + TabelNameId + "," + IsImage + "," + 0 + "," + fileSizePerMega + ",'" + SiteCode + "','NA','NA',0)";


                        //                    connectionString.Open();
                        //                    cmd.ExecuteNonQuery();
                        //                    connectionString.Close();

                        //                }
                        //                RadioAntennaAttachFileTransaction.Complete();
                        //            }
                        //            catch (Exception err)
                        //            {
                        //                RadioAntennaAttachFileTransaction.Dispose();

                        //                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                        //                {
                        //                    CreatedAt = DateTime.Now,
                        //                    ErrMsg = err.Message,
                        //                    IsDeleted = false,
                        //                    IsLib = false,
                        //                    RefTable = Helpers.Constants.TablesNames.TLIgenerator.ToString(),
                        //                    SheetName = "RadioAntennaAttachFile",
                        //                    UniqueName = $"(Civil Name) : {RadioAntennaAttachFileDataTable.Rows[j]["Name"]}"
                        //                };

                        //                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                        //                _unitOfWork.SaveChanges();

                        //                continue;
                        //            }
                        //        }
                        //    }
                        //////////////////////////////////////////////////////////////
                        ///////////////////// RadioRRUAttachFile //////////////////////////////////
                        //////////////////////////////////////////////////////////////
                        //RadioRRUAttachFile:

                        //    ExcelWorksheet RadioRRUAttachFile = package.Workbook.Worksheets.FirstOrDefault(x => x.Name.ToLower() == "RadioRRUAttachFile".ToLower());
                        //    int RadioRRUAttachFileRows = 0;
                        //    try
                        //    {
                        //        RadioRRUAttachFileRows = RadioRRUAttachFile.Dimension.End.Row;
                        //    }
                        //    catch (NullReferenceException)
                        //    {
                        //        goto SolarAttachFile;
                        //    }
                        //    int RadioRRUAttachFileColumns = RadioRRUAttachFile.Dimension.End.Column;

                        //    DataTable RadioRRUAttachFileDataTable = new DataTable();
                        //    List<string> RadioRRUAttachFileColumn = new List<string>();

                        //    for (int i = 1; i <= RadioRRUAttachFileColumns; i++)
                        //    {
                        //        string ColName = RadioRRUAttachFile.Cells[1, i].Value.ToString().Trim();
                        //        ColName = Regex.Replace(ColName, @"\s+", " ");

                        //        RadioRRUAttachFileColumn.Add(ColName);
                        //        RadioRRUAttachFileDataTable.Columns.Add(ColName);
                        //    }

                        //    for (int i = 2; i <= RadioRRUAttachFileRows; i++)
                        //    {
                        //        DataRow RadioRRUAttachFileDataRow = RadioRRUAttachFileDataTable.NewRow();
                        //        for (int j = 1; j <= RadioRRUAttachFileColumns; j++)
                        //        {
                        //            string ColName = RadioRRUAttachFile.Cells[1, j].Value.ToString().Trim();
                        //            ColName = Regex.Replace(ColName, @"\s+", " ");

                        //            object Value = RadioRRUAttachFile.Cells[i, j].Value;
                        //            if (Value != null)
                        //            {
                        //                string ValueAsString = Value.ToString().Trim();
                        //                ValueAsString = Regex.Replace(ValueAsString, @"\s+", " ");

                        //                Value = ValueAsString;
                        //                RadioRRUAttachFileDataRow[ColName] = Value;
                        //            }
                        //            else
                        //            {
                        //                RadioRRUAttachFileDataRow[ColName] = Value;
                        //            }
                        //        }
                        //        RadioRRUAttachFileDataTable.Rows.Add(RadioRRUAttachFileDataRow);
                        //    }
                        //    for (int j = 0; j < 1; j++)
                        //    {
                        //        using (TransactionScope RadioRRUAttachFileTransaction = new TransactionScope(TransactionScopeOption.Required,
                        //            new System.TimeSpan(0, 15, 0)))
                        //        {
                        //            try
                        //            {
                        //                int RecordId = 0;
                        //                int TabelNameId = 0;
                        //                string SiteCode = RadioRRUAttachFileDataTable.Rows[j]["SITECODE"].ToString();
                        //                string RecordName = RadioRRUAttachFileDataTable.Rows[j]["Name"].ToString();

                        //                var Record = db.TLIcivilWithLegs.FirstOrDefault(x => x.Name == RecordName);
                        //                if (Record != null)
                        //                {
                        //                    RecordId = Record.Id;
                        //                }

                        //                var TabelNames = db.TLItablesNames.FirstOrDefault(x => x.TableName == "TLIradioRRU");
                        //                if (TabelNames != null)
                        //                {
                        //                    TabelNameId = TabelNames.Id;
                        //                }
                        //                string Path = RadioRRUAttachFileDataTable.Rows[j]["Path"].ToString();
                        //                List<string> imgTypes = new List<string>() { "JPEG", "JPG", "PNG", "GIF", "TIFF", "PSD", "AI", "INDD", "RAW" };

                        //                var filePaths = System.IO.Path.Combine(_Config["StoreFiles"], Path);
                        //                string[] full = System.IO.Directory.GetFiles(filePaths);


                        //                foreach (var filePath in full)
                        //                {
                        //                    FileInfo fileInfo = new FileInfo(filePath);

                        //                    string fileNameWithoutExtension = System.IO.Path.GetFileNameWithoutExtension(filePath); // Extract file name without extension
                        //                    string fileExtensionFromInfo = fileInfo.Extension.TrimStart('.').ToUpper(); // Get file extension from FileInfo object and convert to uppercase
                        //                                                                                                // Calculate file size in megabytes
                        //                    long fileSizeBytes = fileInfo.Length;
                        //                    float fileSizePerMega = (float)fileSizeBytes / (1024 * 1024); // Convert bytes to megabytes

                        //                    bool IsImg = imgTypes.Contains(fileExtensionFromInfo.ToUpper());
                        //                    var connectiont = _Config["ConnectionStrings:ActiveConnection"];
                        //                    var connectionString = new OracleConnection(connectiont);
                        //                    var IsImage = IsImg == false ? 0 : 1;

                        //                    OracleCommand cmd = connectionString.CreateCommand();



                        //                    cmd.CommandText = "INSERT INTO \"TLIRadioRRUAttachFileedFiles\" (\"Name\", \"Path\", \"RecordId\", \"tablesNamesId\",\"IsImg\",\"documenttypeId\",\"fileSize\",\"SiteCode\",\"Description\",\"Description2\",\"UnRadioRRUAttachFileed\")" +
                        //                     " VALUES ('" + fileNameWithoutExtension + "','" + filePath + "','0'," + TabelNameId + "," + IsImage + "," + 0 + "," + fileSizePerMega + ",'" + SiteCode + "','NA','NA',0)";


                        //                    connectionString.Open();
                        //                    cmd.ExecuteNonQuery();
                        //                    connectionString.Close();

                        //                }
                        //                RadioRRUAttachFileTransaction.Complete();
                        //            }
                        //            catch (Exception err)
                        //            {
                        //                RadioRRUAttachFileTransaction.Dispose();

                        //                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                        //                {
                        //                    CreatedAt = DateTime.Now,
                        //                    ErrMsg = err.Message,
                        //                    IsDeleted = false,
                        //                    IsLib = false,
                        //                    RefTable = Helpers.Constants.TablesNames.TLIgenerator.ToString(),
                        //                    SheetName = "RadioRRUAttachFile",
                        //                    UniqueName = $"(Civil Name) : {RadioRRUAttachFileDataTable.Rows[j]["Name"]}"
                        //                };

                        //                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                        //                _unitOfWork.SaveChanges();

                        //                continue;
                        //            }
                        //        }
                        //    }
                        //////////////////////////////////////////////////////////////
                        ///////////////////// SolarAttachFile //////////////////////////////////
                        //////////////////////////////////////////////////////////////
                        //SolarAttachFile:

                        //    ExcelWorksheet SolarAttachFile = package.Workbook.Worksheets.FirstOrDefault(x => x.Name.ToLower() == "SolarAttachFile".ToLower());
                        //    int SolarAttachFileRows = 0;
                        //    try
                        //    {
                        //        SolarAttachFileRows = SolarAttachFile.Dimension.End.Row;
                        //    }
                        //    catch (NullReferenceException)
                        //    {
                        //        goto GeneratorAttachFile;
                        //    }
                        //    int SolarAttachFileColumns = SolarAttachFile.Dimension.End.Column;

                        //    DataTable SolarAttachFileDataTable = new DataTable();
                        //    List<string> SolarAttachFileColumn = new List<string>();

                        //    for (int i = 1; i <= SolarAttachFileColumns; i++)
                        //    {
                        //        string ColName = SolarAttachFile.Cells[1, i].Value.ToString().Trim();
                        //        ColName = Regex.Replace(ColName, @"\s+", " ");

                        //        SolarAttachFileColumn.Add(ColName);
                        //        SolarAttachFileDataTable.Columns.Add(ColName);
                        //    }

                        //    for (int i = 2; i <= SolarAttachFileRows; i++)
                        //    {
                        //        DataRow SolarAttachFileDataRow = SolarAttachFileDataTable.NewRow();
                        //        for (int j = 1; j <= SolarAttachFileColumns; j++)
                        //        {
                        //            string ColName = SolarAttachFile.Cells[1, j].Value.ToString().Trim();
                        //            ColName = Regex.Replace(ColName, @"\s+", " ");

                        //            object Value = SolarAttachFile.Cells[i, j].Value;
                        //            if (Value != null)
                        //            {
                        //                string ValueAsString = Value.ToString().Trim();
                        //                ValueAsString = Regex.Replace(ValueAsString, @"\s+", " ");

                        //                Value = ValueAsString;
                        //                SolarAttachFileDataRow[ColName] = Value;
                        //            }
                        //            else
                        //            {
                        //                SolarAttachFileDataRow[ColName] = Value;
                        //            }
                        //        }
                        //        SolarAttachFileDataTable.Rows.Add(SolarAttachFileDataRow);
                        //    }
                        //    for (int j = 0; j < 1; j++)
                        //    {
                        //        using (TransactionScope SolarAttachFileTransaction = new TransactionScope(TransactionScopeOption.Required,
                        //            new System.TimeSpan(0, 15, 0)))
                        //        {
                        //            try
                        //            {
                        //                int RecordId = 0;
                        //                int TabelNameId = 0;
                        //                string SiteCode = SolarAttachFileDataTable.Rows[j]["SITECODE"].ToString();
                        //                string RecordName = SolarAttachFileDataTable.Rows[j]["Name"].ToString();

                        //                var Record = db.TLIcivilWithLegs.FirstOrDefault(x => x.Name == RecordName);
                        //                if (Record != null)
                        //                {
                        //                    RecordId = Record.Id;
                        //                }

                        //                var TabelNames = db.TLItablesNames.FirstOrDefault(x => x.TableName == "TLIsolar");
                        //                if (TabelNames != null)
                        //                {
                        //                    TabelNameId = TabelNames.Id;
                        //                }
                        //                string Path = SolarAttachFileDataTable.Rows[j]["Path"].ToString();
                        //                List<string> imgTypes = new List<string>() { "JPEG", "JPG", "PNG", "GIF", "TIFF", "PSD", "AI", "INDD", "RAW" };

                        //                var filePaths = System.IO.Path.Combine(_Config["StoreFiles"], Path);
                        //                string[] full = System.IO.Directory.GetFiles(filePaths);


                        //                foreach (var filePath in full)
                        //                {
                        //                    FileInfo fileInfo = new FileInfo(filePath);

                        //                    string fileNameWithoutExtension = System.IO.Path.GetFileNameWithoutExtension(filePath); // Extract file name without extension
                        //                    string fileExtensionFromInfo = fileInfo.Extension.TrimStart('.').ToUpper(); // Get file extension from FileInfo object and convert to uppercase
                        //                                                                                                // Calculate file size in megabytes
                        //                    long fileSizeBytes = fileInfo.Length;
                        //                    float fileSizePerMega = (float)fileSizeBytes / (1024 * 1024); // Convert bytes to megabytes

                        //                    bool IsImg = imgTypes.Contains(fileExtensionFromInfo.ToUpper());
                        //                    var connectiont = _Config["ConnectionStrings:ActiveConnection"];
                        //                    var connectionString = new OracleConnection(connectiont);
                        //                    var IsImage = IsImg == false ? 0 : 1;

                        //                    OracleCommand cmd = connectionString.CreateCommand();



                        //                    cmd.CommandText = "INSERT INTO \"TLISolarAttachFileedFiles\" (\"Name\", \"Path\", \"RecordId\", \"tablesNamesId\",\"IsImg\",\"documenttypeId\",\"fileSize\",\"SiteCode\",\"Description\",\"Description2\",\"UnSolarAttachFileed\")" +
                        //                     " VALUES ('" + fileNameWithoutExtension + "','" + filePath + "','0'," + TabelNameId + "," + IsImage + "," + 0 + "," + fileSizePerMega + ",'" + SiteCode + "','NA','NA',0)";


                        //                    connectionString.Open();
                        //                    cmd.ExecuteNonQuery();
                        //                    connectionString.Close();

                        //                }
                        //                SolarAttachFileTransaction.Complete();
                        //            }
                        //            catch (Exception err)
                        //            {
                        //                SolarAttachFileTransaction.Dispose();

                        //                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                        //                {
                        //                    CreatedAt = DateTime.Now,
                        //                    ErrMsg = err.Message,
                        //                    IsDeleted = false,
                        //                    IsLib = false,
                        //                    RefTable = Helpers.Constants.TablesNames.TLIgenerator.ToString(),
                        //                    SheetName = "SolarAttachFile",
                        //                    UniqueName = $"(Civil Name) : {SolarAttachFileDataTable.Rows[j]["Name"]}"
                        //                };

                        //                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                        //                _unitOfWork.SaveChanges();

                        //                continue;
                        //            }
                        //        }
                        //    }
                        //////////////////////////////////////////////////////////////
                        ///////////////////// GeneratorAttachFile //////////////////////////////////
                        //////////////////////////////////////////////////////////////
                        //GeneratorAttachFile:

                        //    ExcelWorksheet GeneratorAttachFile = package.Workbook.Worksheets.FirstOrDefault(x => x.Name.ToLower() == "GeneratorAttachFile".ToLower());
                        //    int GeneratorAttachFileRows = 0;
                        //    try
                        //    {
                        //        GeneratorAttachFileRows = GeneratorAttachFile.Dimension.End.Row;
                        //    }
                        //    catch (NullReferenceException)
                        //    {
                        //        System.IO.File.Delete(FilePath);
                        //        return new Response<string>("Succeed");
                        //    }
                        //    int GeneratorAttachFileColumns = GeneratorAttachFile.Dimension.End.Column;

                        //    DataTable GeneratorAttachFileDataTable = new DataTable();
                        //    List<string> GeneratorAttachFileColumn = new List<string>();

                        //    for (int i = 1; i <= GeneratorAttachFileColumns; i++)
                        //    {
                        //        string ColName = GeneratorAttachFile.Cells[1, i].Value.ToString().Trim();
                        //        ColName = Regex.Replace(ColName, @"\s+", " ");

                        //        GeneratorAttachFileColumn.Add(ColName);
                        //        GeneratorAttachFileDataTable.Columns.Add(ColName);
                        //    }

                        //    for (int i = 2; i <= GeneratorAttachFileRows; i++)
                        //    {
                        //        DataRow GeneratorAttachFileDataRow = GeneratorAttachFileDataTable.NewRow();
                        //        for (int j = 1; j <= GeneratorAttachFileColumns; j++)
                        //        {
                        //            string ColName = GeneratorAttachFile.Cells[1, j].Value.ToString().Trim();
                        //            ColName = Regex.Replace(ColName, @"\s+", " ");

                        //            object Value = GeneratorAttachFile.Cells[i, j].Value;
                        //            if (Value != null)
                        //            {
                        //                string ValueAsString = Value.ToString().Trim();
                        //                ValueAsString = Regex.Replace(ValueAsString, @"\s+", " ");

                        //                Value = ValueAsString;
                        //                GeneratorAttachFileDataRow[ColName] = Value;
                        //            }
                        //            else
                        //            {
                        //                GeneratorAttachFileDataRow[ColName] = Value;
                        //            }
                        //        }
                        //        GeneratorAttachFileDataTable.Rows.Add(GeneratorAttachFileDataRow);
                        //    }
                        //    for (int j = 0; j < 1; j++)
                        //    {
                        //        using (TransactionScope GeneratorAttachFileTransaction = new TransactionScope(TransactionScopeOption.Required,
                        //            new System.TimeSpan(0, 15, 0)))
                        //        {
                        //            try
                        //            {
                        //                int RecordId = 0;
                        //                int TabelNameId = 0;
                        //                string SiteCode = GeneratorAttachFileDataTable.Rows[j]["SITECODE"].ToString();
                        //                string RecordName = GeneratorAttachFileDataTable.Rows[j]["Name"].ToString();

                        //                var Record = db.TLIcivilWithLegs.FirstOrDefault(x => x.Name == RecordName);
                        //                if (Record != null)
                        //                {
                        //                    RecordId = Record.Id;
                        //                }

                        //                var TabelNames = db.TLItablesNames.FirstOrDefault(x => x.TableName == "TLIgenerator");
                        //                if (TabelNames != null)
                        //                {
                        //                    TabelNameId = TabelNames.Id;
                        //                }
                        //                string Path = GeneratorAttachFileDataTable.Rows[j]["Path"].ToString();
                        //                List<string> imgTypes = new List<string>() { "JPEG", "JPG", "PNG", "GIF", "TIFF", "PSD", "AI", "INDD", "RAW" };

                        //                var filePaths = System.IO.Path.Combine(_Config["StoreFiles"], Path);
                        //                string[] full = System.IO.Directory.GetFiles(filePaths);


                        //                foreach (var filePath in full)
                        //                {
                        //                    FileInfo fileInfo = new FileInfo(filePath);

                        //                    string fileNameWithoutExtension = System.IO.Path.GetFileNameWithoutExtension(filePath); // Extract file name without extension
                        //                    string fileExtensionFromInfo = fileInfo.Extension.TrimStart('.').ToUpper(); // Get file extension from FileInfo object and convert to uppercase
                        //                                                                                                // Calculate file size in megabytes
                        //                    long fileSizeBytes = fileInfo.Length;
                        //                    float fileSizePerMega = (float)fileSizeBytes / (1024 * 1024); // Convert bytes to megabytes

                        //                    bool IsImg = imgTypes.Contains(fileExtensionFromInfo.ToUpper());
                        //                    var connectiont = _Config["ConnectionStrings:ActiveConnection"];
                        //                    var connectionString = new OracleConnection(connectiont);
                        //                    var IsImage = IsImg == false ? 0 : 1;

                        //                    OracleCommand cmd = connectionString.CreateCommand();



                        //                    cmd.CommandText = "INSERT INTO \"TLIGeneratorAttachFileedFiles\" (\"Name\", \"Path\", \"RecordId\", \"tablesNamesId\",\"IsImg\",\"documenttypeId\",\"fileSize\",\"SiteCode\",\"Description\",\"Description2\",\"UnGeneratorAttachFileed\")" +
                        //                     " VALUES ('" + fileNameWithoutExtension + "','" + filePath + "','0'," + TabelNameId + "," + IsImage + "," + 0 + "," + fileSizePerMega + ",'" + SiteCode + "','NA','NA',0)";


                        //                    connectionString.Open();
                        //                    cmd.ExecuteNonQuery();
                        //                    connectionString.Close();

                        //                }
                        //                GeneratorAttachFileTransaction.Complete();
                        //            }
                        //            catch (Exception err)
                        //            {
                        //                GeneratorAttachFileTransaction.Dispose();

                        //                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                        //                {
                        //                    CreatedAt = DateTime.Now,
                        //                    ErrMsg = err.Message,
                        //                    IsDeleted = false,
                        //                    IsLib = false,
                        //                    RefTable = Helpers.Constants.TablesNames.TLIgenerator.ToString(),
                        //                    SheetName = "GeneratorAttachFile",
                        //                    UniqueName = $"(Civil Name) : {GeneratorAttachFileDataTable.Rows[j]["Name"]}"
                        //                };

                        //                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                        //                _unitOfWork.SaveChanges();

                        //                continue;
                        //            }
                        //        }
                        //    }
                        System.IO.File.Delete(FilePath);
                        return new Response<string>("Succeed");


                    }

                }
                catch (Exception err)
                {
                    System.IO.File.Delete(FilePath);
                    return new Response<string>(err.Message);
                }
            }
        }

        #region save file
        public string SaveFile(IFormFile file)
        {
            //string fileDirectory = Directory.GetCurrentDirectory();
            //string DirectoryPath = null;
            string FilePath = null;
            string DirectoryPath = (_Config["CSVFiles"]);
            if (!Directory.Exists(DirectoryPath))
            {
                Directory.CreateDirectory(DirectoryPath);
            }
            //Create file path

            if (file.Length > 0)
            {
                var FileName = file.FileName;
                FilePath = Path.Combine(DirectoryPath, $"{FileName}");
                //if (System.IO.File.Exists(FilePath))
                //{
                //    System.IO.File.Delete(FilePath);
                //}
                using (Stream fileStream = new FileStream(FilePath, FileMode.Create))
                {
                    file.CopyTo(fileStream);
                }
            }
            string filePath = FilePath;
            FileInfo existingFile = new FileInfo(filePath);

            var connectionString = "";
            if (existingFile.FullName.EndsWith(".xls"))
            {
                connectionString = string.Format("Provider=Microsoft.Jet.OLEDB.4.0; data source={0}; Extended Properties=Excel 8.0;", filePath);
            }
            else if (existingFile.FullName.EndsWith(".xlsx"))
            {
                connectionString = string.Format("Provider=Microsoft.ACE.OLEDB.12.0;Data Source={0};Extended Properties=\"Excel 12.0 Xml;HDR=YES;IMEX=1\";", filePath);
            }
            return connectionString;

        }
        #endregion
        #region AddLogistical
        public void AddLogistical(string Logistical, string Type, string Part, string TableName, int RecordId)
        {
            int LogistcalId = 0;

            TLIlogistical Exist = _unitOfWork.LogistcalRepository
                .GetIncludeWhereFirst(x => (x.Name.ToLower() == Logistical.ToLower() && x.logisticalType.Name.ToLower() == Type.ToLower() &&
                    x.tablePartName.PartName.ToLower() == Part.ToLower()), x => x.logisticalType, x => x.tablePartName);

            if (Exist != null)
            {
                LogistcalId = Exist.Id;
            }
            else
            {
                TLIlogistical Newlogistical = new TLIlogistical();
                Newlogistical.Name = Logistical;
                _unitOfWork.LogistcalRepository.Add(Newlogistical);
                var logisticalType = _unitOfWork.logisticalTypeRepository.GetWhereFirst(x => x.Name == Type);
                if (logisticalType != null)
                    Newlogistical.logisticalTypeId = logisticalType.Id;

                Newlogistical.tablePartNameId = _unitOfWork.TablePartNameRepository.GetWhereFirst(x => x.PartName == Part).Id;
                _unitOfWork.SaveChanges();
                LogistcalId = Newlogistical.Id;
            }

            TLItablesNames tablesNames = _unitOfWork.TablesNamesRepository.GetWhereFirst(x => x.TableName == TableName);
            TLIlogisticalitem logisticalitem = new TLIlogisticalitem();
            logisticalitem.logisticalId = LogistcalId;
            logisticalitem.tablesNamesId = tablesNames.Id;

            logisticalitem.RecordId = RecordId;
            _unitOfWork.LogisticalitemRepository.Add(logisticalitem);
            _unitOfWork.SaveChanges();
        }
        #endregion
        #region Generate Excel
        public void saveDt(ExcelPackage pck, string sheetName, DataTable dt)
        {
            ExcelWorksheet teamSheet = pck.Workbook.Worksheets.Add(sheetName);
            teamSheet.Cells[1, 1].LoadFromDataTable(dt);
        }
        public string GenerateExcel(ExcelPackage pck)
        {
            string fileDirectory = Directory.GetCurrentDirectory();
            if (!Directory.Exists(fileDirectory))
            {
                Directory.CreateDirectory(fileDirectory);
            }
            //Create new file path to my file
            var filePath = Path.Combine(fileDirectory, "Error_Records" + ".xlsx");
            //if file path is already exists return true or false if true delete filePath
            if (System.IO.File.Exists(filePath))
            {
                System.IO.File.Delete(filePath);
            }
            var file = new FileInfo(filePath);

            pck.SaveAs(file);
            return filePath;
        }

        #endregion
        #region Add Distance
        public void AddDistance(string ReferenceCivilSteelName, int AllCivilId, float Azimuth, float Distance, string SiteCode)
        {
            int AllcivilInstId = 0;

            if (!string.IsNullOrEmpty(ReferenceCivilSteelName))
            {
                TLIcivilWithLegs CheckCivilWithLegs = _unitOfWork.CivilWithLegsRepository
                    .GetWhereFirst(x => x.Name.ToLower() == ReferenceCivilSteelName.ToLower());

                if (CheckCivilWithLegs != null)
                {
                    TLIallCivilInst CheckAllCivilInst = _unitOfWork.AllCivilInstRepository
                        .GetWhereFirst(x => x.civilWithLegsId == CheckCivilWithLegs.Id);

                    if (CheckAllCivilInst != null)
                        AllcivilInstId = CheckAllCivilInst.Id;
                }
                else
                {
                    TLIcivilWithoutLeg CheckCivilWithOutLegs = _unitOfWork.CivilWithoutLegRepository
                        .GetWhereFirst(x => x.Name.ToLower() == ReferenceCivilSteelName.ToLower());

                    if (CheckCivilWithOutLegs != null)
                    {
                        TLIallCivilInst CheckAllCivilInst = _unitOfWork.AllCivilInstRepository
                            .GetWhereFirst(x => x.civilWithoutLegId == CheckCivilWithOutLegs.Id);

                        if (CheckAllCivilInst != null)
                            AllcivilInstId = CheckAllCivilInst.Id;
                    }
                    else
                    {
                        TLIcivilNonSteel CheckCivilNonSteel = _unitOfWork.CivilNonSteelRepository
                            .GetWhereFirst(x => x.Name.ToLower() == ReferenceCivilSteelName.ToLower());

                        if (CheckCivilNonSteel != null)
                        {
                            TLIallCivilInst CheckAllCivilInst = _unitOfWork.AllCivilInstRepository
                                .GetWhereFirst(x => x.civilNonSteelId == CheckCivilNonSteel.Id);

                            if (CheckAllCivilInst != null)
                                AllcivilInstId = CheckAllCivilInst.Id;
                        }
                    }
                }
                _unitOfWork.CivilSupportDistanceRepository.Add(new TLIcivilSupportDistance()
                {
                    ReferenceCivilId = AllcivilInstId,
                    CivilInstId = AllCivilId,
                    Azimuth = Azimuth,
                    Distance = Distance,
                    SiteCode = SiteCode
                });
                _unitOfWork.SaveChanges();
            }
        }
        #endregion

        public Response<List<ImportSheetViewModel>> GetAllWarningData(ClxFilter f)
        {
            List<ImportSheetViewModel> OutPut = new List<ImportSheetViewModel>();

            if (f.Filters != null ? f.Filters.Any(x => x.Key.ToLower() == "SheetName".ToLower()) : false)
            {
                OutPut = _mapper.Map<List<ImportSheetViewModel>>(_unitOfWork.ImportSheetRepository
                    .GetWhere(x => !x.IsDeleted).ToList());
            }
            else
            {
                OutPut = _mapper.Map<List<ImportSheetViewModel>>(_unitOfWork.ImportSheetRepository
                    .GetWhere(x => !x.IsDeleted && x.SheetName.ToLower() != "Sites".ToLower()).ToList());
            }

            if (f.Filters != null)
            {
                foreach (SimpleFilter Filter in f.Filters)
                {
                    PropertyInfo Attribute = typeof(ImportSheetViewModel).GetProperties()
                        .FirstOrDefault(x => x.Name.ToLower() == Filter.Key.ToLower());

                    if (Attribute.PropertyType.Name.ToLower() == typeof(string).Name.ToLower())
                    {
                        OutPut = OutPut.Where(x => Attribute.GetValue(x, null).ToString().ToLower()
                            .StartsWith(Filter.Values.FirstOrDefault().ToLower())).ToList();
                    }
                    else if (Attribute.PropertyType.Name.ToLower() == typeof(DateTime).Name.ToLower())
                    {
                        OutPut = OutPut.Where(x => DateTime.Parse(Attribute.GetValue(x, null).ToString()).ToString("dd/MM/yyyy")
                            == DateTime.Parse(Filter.Values.FirstOrDefault().ToString()).ToString("dd/MM/yyyy")).ToList();
                    }
                    else if (Attribute.PropertyType.Name.ToLower() == typeof(Boolean).Name.ToLower())
                    {
                        OutPut = OutPut.Where(x => bool.Parse(Attribute.GetValue(x, null).ToString())
                            == bool.Parse(Filter.Values.FirstOrDefault().ToString())).ToList();
                    }
                    else if (Attribute.PropertyType.Name.ToLower() == typeof(double).Name.ToLower())
                    {
                        OutPut = OutPut.Where(x => double.Parse(Attribute.GetValue(x, null).ToString())
                            == double.Parse(Filter.Values.FirstOrDefault().ToString())).ToList();
                    }
                }
            }

            int Count = OutPut.Count();
            OutPut = OutPut.Skip((f.PageIndex - 1) * f.PageSize).Take(f.PageSize).ToList();

            return new Response<List<ImportSheetViewModel>>(true, OutPut, null, null, (int)Helpers.Constants.ApiReturnCode.success, Count);
        }
        public Response<string> ExportErrorDataTable(string ErrorType, string FileDirectory)
        {
            string FileName = ErrorType;

            if (!Directory.Exists(FileDirectory))
            {
                Directory.CreateDirectory(FileDirectory);
            }

            string FilePath = Path.Combine(FileDirectory, FileName + ".xlsx");
            if (System.IO.File.Exists(FilePath))
            {
                System.IO.File.Delete(FilePath);
            }

            FileInfo File = new FileInfo(FilePath);

            ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
            using (ExcelPackage Package = new ExcelPackage())
            {
                ExcelWorksheet Sheet = Package.Workbook.Worksheets.Add(ErrorType);

                List<ImportSheetViewModel> ErrorsData = new List<ImportSheetViewModel>();

                if (ErrorType.ToLower() == "Sites".ToLower())
                {
                    ErrorsData = _mapper.Map<List<ImportSheetViewModel>>(_unitOfWork.ImportSheetRepository.
                        GetWhere(x => x.SheetName.ToLower() == "Sites".ToLower()).ToList());
                }
                else if (ErrorType.ToLower() == "Library".ToLower())
                {
                    ErrorsData = _mapper.Map<List<ImportSheetViewModel>>(_unitOfWork.ImportSheetRepository.
                        GetWhere(x => x.SheetName.ToLower() != "Sites".ToLower() && x.IsLib).ToList());
                }
                else if (ErrorType.ToLower() == "Installation".ToLower())
                {
                    ErrorsData = _mapper.Map<List<ImportSheetViewModel>>(_unitOfWork.ImportSheetRepository.
                        GetWhere(x => x.SheetName.ToLower() != "Sites".ToLower() && !x.IsLib).ToList());
                }

                List<string> ImportSheetsAttributes = typeof(ImportSheetViewModel).GetProperties()
                    .Where(x => x.Name.ToLower() != "Id".ToLower()).Select(x => x.Name).ToList();

                for (int i = 0; i < ImportSheetsAttributes.Count(); i++)
                {
                    string ColName = ImportSheetsAttributes[i];
                    ColName = Regex.Replace(ColName, @"\s+", " ");
                    Sheet.Cells[1, i + 1].Value = ColName;
                }

                for (int i = 0; i < ErrorsData.Count(); i++)
                {
                    for (int j = 0; j < ImportSheetsAttributes.Count(); j++)
                    {
                        string ColName = Sheet.Cells[1, j + 1].Value.ToString();

                        object Value = ErrorsData[i].GetType().GetProperties().FirstOrDefault(x => x.Name.ToLower() == ColName.ToLower())
                            .GetValue(ErrorsData[i], null);

                        Sheet.Cells[i + 2, j + 1].Value = Value;
                    }
                }

                Package.Workbook.Properties.Title = ErrorType;
                Package.Workbook.Properties.Author = "DIS";
                Sheet.Calculate();
                Sheet.Cells.AutoFitColumns(0);
                Package.SaveAs(File);
                return new Response<string>(true, File.DirectoryName, null, null, (int)Helpers.Constants.ApiReturnCode.success);
            }
        }
        public class TLIdynamicAttComparer : IEqualityComparer<TLIdynamicAtt>
        {
            public bool Equals(TLIdynamicAtt x, TLIdynamicAtt y)
            {
                // Define your criteria for equality here
                return x.Key == y.Key && x.DataTypeId == y.DataTypeId;
            }

            public int GetHashCode(TLIdynamicAtt obj)
            {
                // Define a hash function here based on the properties you want to consider
                return (obj.Key + obj.DataTypeId.ToString()).GetHashCode();
            }
        }
        public Response<string> MigrationFiles(IFormFile File, string ConnectionString)
        {
            List<KeyValuePair<int, string>> UnsavedRows = new List<KeyValuePair<int, string>>();
            var FilePath = SaveFileAndGetFilePath(File);
            try
            {
                FileInfo existingFile = new FileInfo(FilePath);
                ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
                int TabelNameId = 0;
                using (ExcelPackage package = new ExcelPackage(existingFile))
                {
                    ExcelWorksheet TypeOfSupportInfoSheet = package.Workbook.Worksheets.FirstOrDefault(x => x.Name.ToLower() == "MigrationFiles".ToLower());
                    int TypeOfSupportInfoRows = 0;
                    try
                    {
                        TypeOfSupportInfoRows = TypeOfSupportInfoSheet.Dimension.End.Row;
                    }
                    catch (NullReferenceException)
                    {
                        System.IO.File.Delete(FilePath);
                        return new Response<string>("Succeed");
                    }
                    int TypeOfSupportInfoColumns = TypeOfSupportInfoSheet.Dimension.End.Column;

                    DataTable TypeOfSupportInfoDataTable = new DataTable();

                    for (int i = 1; i <= TypeOfSupportInfoColumns; i++)
                    {
                        var ColName = TypeOfSupportInfoSheet.Cells[1, i].Value.ToString().Trim();
                        ColName = Regex.Replace(ColName, @"\s+", " ");
                        TypeOfSupportInfoDataTable.Columns.Add(ColName);
                    }
                    for (int i = 2; i <= TypeOfSupportInfoRows; i++)
                    {
                        DataRow TypeOfSupportInfoDataRow = TypeOfSupportInfoDataTable.NewRow();
                        for (int j = 1; j <= TypeOfSupportInfoColumns; j++)
                        {
                            string ColName = TypeOfSupportInfoSheet.Cells[1, j].Value.ToString().Trim();
                            ColName = Regex.Replace(ColName, @"\s+", " ");
                            if (TypeOfSupportInfoSheet.Cells[i, j].Value != null)
                            {
                                string ValueAsString = TypeOfSupportInfoSheet.Cells[i, j].Value.ToString().Trim();
                                ValueAsString = Regex.Replace(ValueAsString, @"\s+", " ");
                                object Value = ValueAsString;
                                TypeOfSupportInfoDataRow[ColName] = Value;
                            }
                            else
                                TypeOfSupportInfoDataRow[ColName] = TypeOfSupportInfoSheet.Cells[i, j].Value;
                        }
                        TypeOfSupportInfoDataTable.Rows.Add(TypeOfSupportInfoDataRow);
                    }

                    for (int j = 0; j <= TypeOfSupportInfoDataTable.Rows.Count - 1; j++)
                    {
                        using (TransactionScope AttachTransaction = new TransactionScope(TransactionScopeOption.Required,
                          new System.TimeSpan(0, 15, 0)))
                        {
                            try
                            {
                                string Site_Code = TypeOfSupportInfoDataTable.Rows[j]["Site_Code"].ToString();
                                var split_Site_Code = Site_Code.Split('#');
                                var SiteCode = split_Site_Code.Length > 1 ? split_Site_Code[1] : "";
                                string Paths = TypeOfSupportInfoDataTable.Rows[j]["Path"].ToString();
                                string FileName = TypeOfSupportInfoDataTable.Rows[j]["Name"].ToString();
                                string FolderName = Site_Code;
                                var FileDirectory = _Config["CSVFiles"];
                                var FileDirect = Path.Combine(FileDirectory, SiteCode);
                                string SourceFile = Path.Combine(FileDirectory, Paths);
                                var TabelNames = db.TLItablesNames.FirstOrDefault(x => x.TableName == "TLIsite");
                                if (TabelNames != null)
                                {
                                    TabelNameId = TabelNames.Id;
                                }
                                if (!Directory.Exists(FileDirect))
                                {
                                    Directory.CreateDirectory(FileDirect);
                                }
                                string destinationFilePath = Path.Combine(FileDirect, FileName);
                                string SourceFilePath = Path.Combine(SourceFile, FileName);
                                if (Directory.Exists(SourceFilePath))
                                {

                                    Directory.Move(SourceFilePath, destinationFilePath);
                                    System.IO.File.Delete(SourceFilePath);
                                }

                                List<string> imgTypes = new List<string>() { "JPEG", "JPG", "PNG", "GIF", "TIFF", "PSD", "AI", "INDD", "RAW" };
                                string[] full = System.IO.Directory.GetFiles(FileDirect);
                                foreach (var filePath in full)
                                {
                                    FileInfo fileInfo = new FileInfo(filePath);

                                    string fileNameWithoutExtension = System.IO.Path.GetFileNameWithoutExtension(filePath);
                                    string fileExtensionFromInfo = fileInfo.Extension.TrimStart('.').ToUpper();

                                    long fileSizeBytes = fileInfo.Length;
                                    float fileSizePerMega = (float)fileSizeBytes / (1024 * 1024);

                                    bool IsImg = imgTypes.Contains(fileExtensionFromInfo.ToUpper());
                                    var connectiont = _Config["ConnectionStrings:ActiveConnection"];
                                    var connectionString = new OracleConnection(connectiont);
                                    var IsImage = IsImg == false ? 0 : 1;

                                    OracleCommand cmd = connectionString.CreateCommand();

                                    cmd.CommandText = "INSERT INTO \"TLIattachedFiles\" (\"Name\", \"Path\", \"RecordId\", \"tablesNamesId\",\"IsImg\",\"documenttypeId\",\"fileSize\",\"SiteCode\",\"Description\",\"Description2\",\"UnAttached\")" +
                                     " VALUES ('" + fileNameWithoutExtension + "','" + filePath + "','0'," + TabelNameId + "," + IsImage + "," + 0 + "," + fileSizePerMega + ",'" + SiteCode + "','NA','NA',0)";

                                    connectionString.Open();
                                    cmd.ExecuteNonQuery();
                                    connectionString.Close();

                                }
                            }
                            catch (Exception err)
                            {

                                AttachTransaction.Dispose();

                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                {
                                    CreatedAt = DateTime.Now,
                                    ErrMsg = err.Message,
                                    IsDeleted = false,
                                    IsLib = false,
                                    RefTable = Helpers.Constants.TablesNames.TLIgenerator.ToString(),
                                    SheetName = "SiteAttachFile",
                                    UniqueName = $"(SiteCode) : {TypeOfSupportInfoDataTable.Rows[j]["Site_Code"]}"
                                };

                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                _unitOfWork.SaveChanges();

                                continue;
                            }
                            AttachTransaction.Complete();
                        }

                    }

                }

                return new Response<string>("Sucess");
            }
            catch (Exception err)
            {
                System.IO.File.Delete(FilePath);
                return new Response<string>(err.Message);

            }
        }
        public Response<string> ImportGeneratorInstallation(IFormFile File, string ConnectionString)
        {
            List<TLIdataType> DataTypes = _unitOfWork.DataTypeRepository.GetAllWithoutCount().ToList();
            List<TLItablesNames> TablesName = _unitOfWork.TablesNamesRepository.GetAllWithoutCount().ToList();

            using (var connection = new OracleConnection(ConnectionString))
            {
                connection.Open();
                List<KeyValuePair<int, string>> UnsavedRows = new List<KeyValuePair<int, string>>();

                var FilePath = SaveFileAndGetFilePath(File);

                try
                {
                    FileInfo existingFile = new FileInfo(FilePath);
                    ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {
                        bool CheckParser = false;
                        ExcelWorksheet GeneratorSheet = package.Workbook.Worksheets.FirstOrDefault(x => x.Name.ToLower() == "Generator".ToLower());
                        int GeneratorRows = 0;
                        try
                        {
                            GeneratorRows = GeneratorSheet.Dimension.End.Row;
                        }
                        catch (NullReferenceException)
                        {
                            System.IO.File.Delete(FilePath);
                            throw new Exception("The worksheet 'Generator' is missing.");
                        }
                        int GeneratorColumns = GeneratorSheet.Dimension.End.Column;

                        DataTable GeneratorDataTable = new DataTable();
                        List<string> GeneratorSheetColumn = new List<string>();

                        for (int i = 1; i <= GeneratorColumns; i++)
                        {
                            string ColName = GeneratorSheet.Cells[1, i].Value.ToString().Trim();
                            ColName = Regex.Replace(ColName, @"\s+", " ");

                            GeneratorSheetColumn.Add(ColName);
                            GeneratorDataTable.Columns.Add(ColName);
                        }

                        for (int i = 2; i <= GeneratorRows; i++)
                        {
                            DataRow GeneratorDataRow = GeneratorDataTable.NewRow();
                            for (int j = 1; j <= GeneratorColumns; j++)
                            {
                                string ColName = GeneratorSheet.Cells[1, j].Value.ToString().Trim();
                                ColName = Regex.Replace(ColName, @"\s+", " ");

                                object Value = GeneratorSheet.Cells[i, j].Value;
                                if (Value != null)
                                {
                                    string ValueAsString = Value.ToString().Trim();
                                    ValueAsString = Regex.Replace(ValueAsString, @"\s+", " ");

                                    Value = ValueAsString;
                                    GeneratorDataRow[ColName] = Value;
                                }
                                else
                                {
                                    GeneratorDataRow[ColName] = Value;
                                }
                            }
                            GeneratorDataTable.Rows.Add(GeneratorDataRow);
                        }

                        //
                        // Dynamic Attributes For Generator..
                        //

                        int GeneratorTableNameId = TablesName.FirstOrDefault(x =>
                         x.TableName.ToLower() == Helpers.Constants.TablesNames.TLIgenerator.ToString().ToLower()).Id;

                        List<TLIdynamicAtt> GeneratorMissedAttributeCSV = new List<TLIdynamicAtt>()
                            {
                                new TLIdynamicAtt
                                {
                                    Key = "Region",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = GeneratorTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Area",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = GeneratorTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                               
                                new TLIdynamicAtt
                                {
                                    Key = "Capacity",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "double".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = GeneratorTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Brand",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = GeneratorTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "status date",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "datetime".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = GeneratorTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Notes",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = GeneratorTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Ampere type",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = GeneratorTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "New installation-Replacement",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = GeneratorTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                               
                                 new TLIdynamicAtt
                                {
                                    Key = "Fuel Tank Capacity",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "double".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = GeneratorTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                   new TLIdynamicAtt
                                {
                                    Key = "engineSerialNumber",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = GeneratorTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },

                            };

                        List<TLIdynamicAtt> GeneratorAllDynamicAttribute = _unitOfWork.DynamicAttRepository
                            .GetWhere(x => x.tablesNamesId == GeneratorTableNameId).ToList();


                        List<TLIdynamicAtt> GeneratorMissedAttributes = GeneratorMissedAttributeCSV
                           .Except(GeneratorAllDynamicAttribute, new TLIdynamicAttComparer())
                           .ToList();

                        _unitOfWork.DynamicAttRepository.AddRange(GeneratorMissedAttributes);
                        _unitOfWork.SaveChanges();

                        for (int j = 0; j <= GeneratorDataTable.Rows.Count - 1; j++)
                        {
                            using (TransactionScope GeneratorTransaction = new TransactionScope(TransactionScopeOption.Required,
                                new System.TimeSpan(0, 15, 0)))
                            {
                                try
                                {
                                    //
                                    // Library Information..
                                    //

                                    string GeneratorLibraryModel = GeneratorDataTable.Rows[j]["Generator Library"].ToString();
                                    int GeneratorLibraryId = 0;
                                    if (!string.IsNullOrEmpty(GeneratorLibraryModel))
                                    {
                                        GeneratorTransaction.Dispose();
                                        TLIgeneratorLibrary CheckGeneratorLibraryModel = _unitOfWork.GeneratorLibraryRepository
                                        .GetWhereFirst(x =>
                                            x.Model.ToLower().Trim() ==GeneratorLibraryModel.ToLower().Trim() &&
                                            !x.Deleted);

                                       

                                        if (CheckGeneratorLibraryModel == null)
                                        {
                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Generator Library) coulumn's value: ({GeneratorLibraryModel}) doesn't exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = true,
                                                RefTable = Helpers.Constants.TablesNames.TLIgeneratorLibrary.ToString(),
                                                SheetName = "Generator",
                                                UniqueName = $"(Generator Library) coulumn and value in the Row {GeneratorDataTable.Rows[j]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        GeneratorLibraryId = CheckGeneratorLibraryModel.Id;
                                    }
                                    else
                                    {
                                        GeneratorTransaction.Dispose();

                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                        {
                                            CreatedAt = DateTime.Now,
                                            ErrMsg = $"(Generator Library) coulumn's value can't be null or empty",
                                            IsDeleted = false,
                                            IsLib = true,
                                            RefTable = Helpers.Constants.TablesNames.TLIgeneratorLibrary.ToString(),
                                            SheetName = "Generator",
                                            UniqueName = $"(Generator Library) coulumn and value in the Row {GeneratorDataTable.Rows[j]}"
                                        };

                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                        _unitOfWork.SaveChanges();

                                        continue;
                                    }

                                    //
                                    // Installation Information..
                                    //

                                    string Generator_SiteCodeAfterCheck = string.Empty;
                                    string Generator_SiteCode = GeneratorDataTable.Rows[j]["Code"].ToString();
                                    string Generator_SiteName = GeneratorDataTable.Rows[j]["English Name"].ToString();
                                    string Generator_serialNumber = GeneratorDataTable.Rows[j]["serialNumber"].ToString();
                                    int? BaseGeneratorTypeId = null;
                                    string generatorTypeName = GeneratorDataTable.Rows[j]["generator Type"].ToString();

                                    if (!string.IsNullOrEmpty(generatorTypeName))
                                    {
                                        TLIbaseGeneratorType BaseTypeForeignKeyEntity = _unitOfWork.BaseGeneratorTypeRepository
                                            .GetWhereFirst(x => x.Name.ToLower() == generatorTypeName.ToLower() && !x.Deleted);

                                        if (BaseTypeForeignKeyEntity != null)
                                            BaseGeneratorTypeId = BaseTypeForeignKeyEntity.Id;

                                        else
                                        {
                                            TLIbaseGeneratorType NewBaseTypeForeignKeyEntity = new TLIbaseGeneratorType
                                            {
                                                Name = generatorTypeName,
                                                Disable = false,
                                                Deleted = false
                                            };
                                            _unitOfWork.BaseGeneratorTypeRepository.Add(NewBaseTypeForeignKeyEntity);
                                            _unitOfWork.SaveChanges();

                                            BaseGeneratorTypeId = NewBaseTypeForeignKeyEntity.Id;
                                        }

                                        
                                    }
                                    else
                                    {
                                        
                                         BaseGeneratorTypeId = null;
                                        
                                       
                                    }
                                    if (!string.IsNullOrEmpty(Generator_SiteCode))
                                    {
                                        TLIsite CheckSiteCode = _unitOfWork.SiteRepository
                                            .GetWhereFirst(x => x.SiteCode.ToLower().Trim() == Generator_SiteCode.ToLower().Trim());

                                        if (CheckSiteCode == null)
                                        {
                                            GeneratorTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Site Code) coulumn's value: ({Generator_SiteCode}) doesn't exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                                SheetName = "Generator",
                                                UniqueName = $"(Site Code) coulumn and value in the Row {GeneratorDataTable.Rows[j]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }
                                        else
                                        {
                                            if (CheckSiteCode.SiteName.ToLower().Trim() != Generator_SiteName.ToLower().Trim())
                                            {
                                                GeneratorTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Site Name) coulumn's value: ({Generator_SiteName}) doesn't correct SiteName to SiteCode ({Generator_SiteCode})",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                                    SheetName = "Generator",
                                                    UniqueName = $"(Site Name) coulumn and value in the Row {GeneratorDataTable.Rows[j]}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }

                                        Generator_SiteCodeAfterCheck = Generator_SiteCode;
                                    }
                                    else
                                    {
                                        GeneratorTransaction.Dispose();

                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                        {
                                            CreatedAt = DateTime.Now,
                                            ErrMsg = $"The column must have a value (Site Code)",
                                            IsDeleted = false,
                                            IsLib = false,
                                            RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                            SheetName = "Generator",
                                            UniqueName = $"(Site Code) coulumn and value in the Row {GeneratorDataTable.Rows[j]}"
                                        };

                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                        _unitOfWork.SaveChanges();

                                        continue;
                                    }
                                    int IntParser = 0;
                                    string SolarNumberOfSSUtString = GeneratorDataTable.Rows[j]["NumOfFuelTanKs"].ToString();
                                    int NumOfFuelTanKs = 0;
                                    if (!string.IsNullOrEmpty(SolarNumberOfSSUtString))
                                    {
                                        CheckParser = int.TryParse(SolarNumberOfSSUtString, out IntParser);

                                        if (CheckParser)
                                            NumOfFuelTanKs = IntParser;

                                        else
                                        {
                                            GeneratorTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(NumOfFuelTanKs) coulumn's value: ({SolarNumberOfSSUtString}) must be a number",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIsolar.ToString(),
                                                SheetName = "Generator",
                                                UniqueName = $"(NumOfFuelTanKs) coulumn and value in the Row {GeneratorDataTable.Rows[j]}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }
                                    }

                                   
                                     string GeneratorName = GeneratorLibraryModel + " " + Generator_SiteName;




                                    // Check if Power Name is Already Exist on This Site..

                                    TLIotherInSite CheckGeneratorName = _unitOfWork.OtherInSiteRepository
                                      .GetIncludeWhereFirst(
                                          x => !x.Dismantle &&
                                               x.SiteCode.ToLower().Trim() == Generator_SiteCodeAfterCheck.ToLower().Trim() &&
                                               x.allOtherInventoryInst.generator.Name.ToLower().Trim() ==
                                               GeneratorName.ToLower().Trim(),
                                          x => x.allOtherInventoryInst, x => x.allOtherInventoryInst.generator
                                      );

                                    if (CheckGeneratorName != null)
                                    {
                                        GeneratorTransaction.Dispose();

                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                        {
                                            CreatedAt = DateTime.Now,
                                            ErrMsg = $"(Generator Name) column's value: ({GeneratorName}) is already exist on this site: ({Generator_SiteCodeAfterCheck})",
                                            IsDeleted = false,
                                            IsLib = false,
                                            RefTable = Helpers.Constants.TablesNames.TLIotherInSite.ToString(),
                                            SheetName = "Generator",
                                            UniqueName = $"( in the Row {GeneratorDataTable.Rows[j]}"
                                        };

                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                        _unitOfWork.SaveChanges();

                                        continue;
                                    }

                                    TLIgenerator NewGeneratorEntity = new TLIgenerator()
                                    {
                                        Name = GeneratorName,
                                        NumberOfFuelTanks = NumOfFuelTanKs,
                                        GeneratorLibraryId = GeneratorLibraryId,
                                        SerialNumber= Generator_serialNumber,
                                        BaseGeneratorTypeId= BaseGeneratorTypeId

                                    };

                                    _unitOfWork.GeneratorRepository.Add(NewGeneratorEntity);
                                    _unitOfWork.SaveChanges();


                                    //
                                    // Dynamic Attributes..
                                    //

                                    List<TLIdynamicAttInstValue> GeneratorDynamicValues = new List<TLIdynamicAttInstValue>();

                                    foreach (TLIdynamicAtt MissedAttribute in GeneratorMissedAttributes)
                                    {
                                        if (!string.IsNullOrEmpty(GeneratorDataTable.Rows[j][MissedAttribute.Key].ToString()))
                                        {
                                            TLIdynamicAttInstValue MissedAttributeValue = new TLIdynamicAttInstValue()
                                            {
                                                tablesNamesId = GeneratorTableNameId,
                                                disable = false,
                                                DynamicAttId = MissedAttribute.Id,
                                                InventoryId = NewGeneratorEntity.Id
                                            };

                                            if (MissedAttribute.DataType.Name.ToLower() == "string".ToLower())
                                                MissedAttributeValue.ValueString = GeneratorDataTable.Rows[j][MissedAttribute.Key].ToString();
                                            else if (MissedAttribute.DataType.Name.ToLower() == "int".ToLower() ||
                                                MissedAttribute.DataType.Name.ToLower() == "double".ToLower())
                                            {
                                                double DoubleParser = 0;

                                                CheckParser = double.TryParse(GeneratorDataTable.Rows[j][MissedAttribute.Key].ToString(), out DoubleParser);

                                                if (CheckParser)
                                                    MissedAttributeValue.ValueDouble = DoubleParser;

                                                else
                                                {
                                                    GeneratorTransaction.Dispose();

                                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                    {
                                                        CreatedAt = DateTime.Now,
                                                        ErrMsg = $"({MissedAttribute.Key}) coulumn's value: ({GeneratorDataTable.Rows[j][MissedAttribute.Key]}) must be a number",
                                                        IsDeleted = false,
                                                        IsLib = false,
                                                        RefTable = Helpers.Constants.TablesNames.TLIgenerator.ToString(),
                                                        SheetName = "Generator",
                                                        UniqueName = $"({MissedAttribute.Key}) coulumn and value in the Row {GeneratorDataTable.Rows[j]}"
                                                    };

                                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                    _unitOfWork.SaveChanges();

                                                    continue;
                                                }
                                            }
                                            else if (MissedAttribute.DataType.Name.ToLower() == "boolean".ToLower())
                                            {
                                                bool BooleanParser = false;

                                                CheckParser = bool.TryParse(GeneratorDataTable.Rows[j][MissedAttribute.Key].ToString(), out BooleanParser);

                                                if (CheckParser)
                                                    MissedAttributeValue.ValueBoolean = BooleanParser;

                                                else
                                                {
                                                    GeneratorTransaction.Dispose();

                                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                    {
                                                        CreatedAt = DateTime.Now,
                                                        ErrMsg = $"({MissedAttribute.Key}) coulumn's value: ({GeneratorDataTable.Rows[j][MissedAttribute.Key]}) must be boolean (Yes/No)",
                                                        IsDeleted = false,
                                                        IsLib = false,
                                                        RefTable = Helpers.Constants.TablesNames.TLIgenerator.ToString(),
                                                        SheetName = "Generator",
                                                        UniqueName = $"({MissedAttribute.Key}) coulumn and value in the Row {GeneratorDataTable.Rows[j]}"
                                                    };

                                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                    _unitOfWork.SaveChanges();

                                                    continue;
                                                }
                                            }
                                            else if (MissedAttribute.DataType.Name.ToLower() == "datetime".ToLower())
                                            {
                                                DateTime DateTimeParser = DateTime.Now;

                                                CheckParser = DateTime.TryParse(GeneratorDataTable.Rows[j][MissedAttribute.Key].ToString(), out DateTimeParser);

                                                if (CheckParser)
                                                    MissedAttributeValue.ValueDateTime = DateTimeParser;

                                                else
                                                {
                                                    GeneratorTransaction.Dispose();

                                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                    {
                                                        CreatedAt = DateTime.Now,
                                                        ErrMsg = $"({MissedAttribute.Key}) coulumn's value: ({GeneratorDataTable.Rows[j][MissedAttribute.Key]}) must be date",
                                                        IsDeleted = false,
                                                        IsLib = false,
                                                        RefTable = Helpers.Constants.TablesNames.TLIgenerator.ToString(),
                                                        SheetName = "Generator",
                                                        UniqueName = $"({MissedAttribute.Key}) coulumn and value in the Row {GeneratorDataTable.Rows[j]}"
                                                    };

                                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                    _unitOfWork.SaveChanges();

                                                    continue;
                                                }
                                            }

                                            GeneratorDynamicValues.Add(MissedAttributeValue);
                                        }
                                    }
                                    if (GeneratorDynamicValues.Count() > 0)
                                    {
                                        _unitOfWork.DynamicAttInstValueRepository.AddRange(GeneratorDynamicValues);
                                        _unitOfWork.SaveChanges();
                                    }

                                    //
                                    // All Load Installation Information..
                                    //

                                    TLIallOtherInventoryInst NewGeneratorllOtherInventoryEntity = new TLIallOtherInventoryInst()
                                    {
                                        generatorId = NewGeneratorEntity.Id,
                                        Draft = false
                                    };

                                    _unitOfWork.AllOtherInventoryInstRepository.Add(NewGeneratorllOtherInventoryEntity);
                                    _unitOfWork.SaveChanges();

                                    //
                                    // OtherInSite Information..
                                    //
                                    TLIotherInSite tLIotherInSite = new TLIotherInSite()
                                    {
                                        InstallationDate = DateTime.Now,
                                        SiteCode = Generator_SiteCode,
                                        allOtherInventoryInstId = NewGeneratorllOtherInventoryEntity.Id,
                                        ReservedSpace = true,
                                        Dismantle = false

                                    };
                                    _unitOfWork.OtherInSiteRepository.Add(tLIotherInSite);
                                    _unitOfWork.SaveChanges();

                                    GeneratorTransaction.Complete();
                                }
                                catch (Exception err)
                                {
                                    GeneratorTransaction.Dispose();

                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                    {
                                        CreatedAt = DateTime.Now,
                                        ErrMsg = err.Message,
                                        IsDeleted = false,
                                        IsLib = false,
                                        RefTable = Helpers.Constants.TablesNames.TLIgenerator.ToString(),
                                        SheetName = "Generator",
                                        UniqueName = $"(in the Row {GeneratorDataTable.Rows[j]}"
                                    };

                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                    _unitOfWork.SaveChanges();

                                    continue;
                                }
                            }
                        }
                        System.IO.File.Delete(FilePath);
                        return new Response<string>("Succeed");
                    }

                }
                catch (Exception err)
                {
                    System.IO.File.Delete(FilePath);
                    return new Response<string>(err.Message);
                }
            }

        }
        
        public Response<string> ImportSolarInstallation(IFormFile File, string ConnectionString)
        {
            List<TLIdataType> DataTypes = _unitOfWork.DataTypeRepository.GetAllWithoutCount().ToList();
            List<TLItablesNames> TablesName = _unitOfWork.TablesNamesRepository.GetAllWithoutCount().ToList();

            using (var connection = new OracleConnection(ConnectionString))
            {
                connection.Open();
                List<KeyValuePair<int, string>> UnsavedRows = new List<KeyValuePair<int, string>>();

                var FilePath = SaveFileAndGetFilePath(File);

                try
                {
                    FileInfo existingFile = new FileInfo(FilePath);
                    ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

                    using (ExcelPackage package = new ExcelPackage(existingFile))
                    {
                        bool CheckParser = false;
                        ExcelWorksheet SolarSheet = package.Workbook.Worksheets.FirstOrDefault(x => x.Name.ToLower() == "Solar".ToLower());
                        int SolarRows = 0;
                        try
                        {
                            SolarRows = SolarSheet.Dimension.End.Row;
                        }
                        catch (NullReferenceException)
                        {
                            System.IO.File.Delete(FilePath);
                            throw new Exception("The worksheet 'Solar' is missing.");
                        }
                        int SolarColumns = SolarSheet.Dimension.End.Column;

                        DataTable SolarDataTable = new DataTable();
                        List<string> SolarSheetColumn = new List<string>();

                        for (int i = 1; i <= SolarColumns; i++)
                        {
                            string ColName = SolarSheet.Cells[1, i].Value.ToString().Trim();
                            ColName = Regex.Replace(ColName, @"\s+", " ");

                            SolarSheetColumn.Add(ColName);
                            SolarDataTable.Columns.Add(ColName);
                        }

                        for (int i = 2; i <= SolarRows; i++)
                        {
                            DataRow SolarDataRow = SolarDataTable.NewRow();
                            for (int j = 1; j <= SolarColumns; j++)
                            {
                                string ColName = SolarSheet.Cells[1, j].Value.ToString().Trim();
                                ColName = Regex.Replace(ColName, @"\s+", " ");

                                object Value = SolarSheet.Cells[i, j].Value;
                                if (Value != null)
                                {
                                    string ValueAsString = Value.ToString().Trim();
                                    ValueAsString = Regex.Replace(ValueAsString, @"\s+", " ");

                                    Value = ValueAsString;
                                    SolarDataRow[ColName] = Value;
                                }
                                else
                                {
                                    SolarDataRow[ColName] = Value;
                                }
                            }
                            SolarDataTable.Rows.Add(SolarDataRow);
                        }

                        //
                        // Dynamic Attributes For Power..
                        //

                        int SolarTableNameId = TablesName.FirstOrDefault(x =>
                         x.TableName.ToLower() == Helpers.Constants.TablesNames.TLIsolar.ToString().ToLower()).Id;

                        List<TLIdynamicAtt> SolarMissedAttributeCSV = new List<TLIdynamicAtt>()
                            {
                                new TLIdynamicAtt
                                {
                                    Key = "Visit Date",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "DateTime".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                              
                                new TLIdynamicAtt
                                {
                                    Key = "SN",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Type",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Height from back_m",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "Double".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Height from front_m",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "Double".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                               
                                new TLIdynamicAtt
                                {
                                    Key = "Structure design",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Total panels Dimensions",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                 new TLIdynamicAtt
                                {
                                    Key = "Base Plate Dimension",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv1",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv2",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv3",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                } ,
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv4",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv5",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv6",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv7",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "String".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv8",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv9",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv10",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv11",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv12",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv13",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv14",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv15",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv16",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv17",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv18",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv19",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv20",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv21",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv22",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv23",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv24",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv25",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv26",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv27",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv28",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv29",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Serial Number pv30",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "string".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                                new TLIdynamicAtt
                                {
                                    Key = "Add Date",
                                    DataTypeId = DataTypes.FirstOrDefault(x => x.Name.ToLower() == "DateTime".ToLower()).Id,
                                    LibraryAtt = false,
                                    Description = null,
                                    CivilWithoutLegCategoryId = null,
                                    tablesNamesId = SolarTableNameId,
                                    Required = false,
                                    disable = false,
                                    DefaultValue = null
                                },
                            };

                        List<TLIdynamicAtt> SolarAllDynamicAttribute = _unitOfWork.DynamicAttRepository
                            .GetWhere(x => x.tablesNamesId == SolarTableNameId).ToList();


                        List<TLIdynamicAtt> SolarMissedAttributes = SolarMissedAttributeCSV
                           .Except(SolarAllDynamicAttribute, new TLIdynamicAttComparer())
                           .ToList();

                        _unitOfWork.DynamicAttRepository.AddRange(SolarMissedAttributes);
                        _unitOfWork.SaveChanges();

                        for (int j = 0; j <= SolarDataTable.Rows.Count - 1; j++)
                        {
                            using (TransactionScope SolarTransaction = new TransactionScope(TransactionScopeOption.Required,
                                new System.TimeSpan(0, 15, 0)))
                            {
                                try
                                {
                                    //
                                    // Library Information..
                                    //

                                    string SolarLibraryModel = SolarDataTable.Rows[j]["Solar design"].ToString();
                                    int SolarLibraryId = 0;
                                    if (!string.IsNullOrEmpty(SolarLibraryModel))
                                    {
                                        SolarTransaction.Dispose();

                                        TLIsolarLibrary CheckSolarLibraryModel = _unitOfWork.SolarLibraryRepository
                                      .GetWhereFirst(x =>x.Model.ToLower().Trim()== SolarLibraryModel.ToLower().Trim()&&
                                          !x.Deleted);


                                        if (CheckSolarLibraryModel == null)
                                        {
                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Solar Library) coulumn's value: ({SolarLibraryModel}) doesn't exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = true,
                                                RefTable = Helpers.Constants.TablesNames.TLIsolarLibrary.ToString(),
                                                SheetName = "Solar",
                                                UniqueName = $"(Solar Library) coulumn and value in the Row{j}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }

                                        SolarLibraryId = CheckSolarLibraryModel.Id;
                                    }
                                    else
                                    {
                                        SolarTransaction.Dispose();

                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                        {
                                            CreatedAt = DateTime.Now,
                                            ErrMsg = $"(Solar design) coulumn's value can't be null or empty",
                                            IsDeleted = false,
                                            IsLib = true,
                                            RefTable = Helpers.Constants.TablesNames.TLIsolarLibrary.ToString(),
                                            SheetName = "Solar",
                                            UniqueName = $"(Solar Library) coulumn and value in the Row{j}"
                                        };

                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                        _unitOfWork.SaveChanges();

                                        continue;
                                    }

                                    //
                                    // Installation Information..
                                    //

                                    string Solar_SiteCodeAfterCheck = string.Empty;
                                    string Solar_SiteCode = SolarDataTable.Rows[j]["Site_Code"].ToString();
                                    string Solar_SiteName = SolarDataTable.Rows[j]["Site_Name"].ToString();

                                    if (!string.IsNullOrEmpty(Solar_SiteCode))
                                    {
                                        TLIsite CheckSiteCode = _unitOfWork.SiteRepository
                                            .GetWhereFirst(x => x.SiteCode.ToLower().Trim() == Solar_SiteCode.ToLower().Trim());

                                        if (CheckSiteCode == null)
                                        {
                                            SolarTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(Site Code) coulumn's value: ({Solar_SiteCode}) doesn't exist in TLIS",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                                SheetName = "Solar",
                                                UniqueName = $"(Site Code) coulumn and value in the Row{j}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }
                                        else
                                        {
                                            if (CheckSiteCode.SiteName.ToLower().Trim() != Solar_SiteName.ToLower().Trim())
                                            {
                                                SolarTransaction.Dispose();

                                                TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                {
                                                    CreatedAt = DateTime.Now,
                                                    ErrMsg = $"(Site Name) coulumn's value: ({Solar_SiteName}) doesn't correct SiteName to SiteCode ({Solar_SiteCode})",
                                                    IsDeleted = false,
                                                    IsLib = false,
                                                    RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                                    SheetName = "Solar",
                                                    UniqueName = $"(Site Name) coulumn and value in the Row{j}"
                                                };

                                                _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                _unitOfWork.SaveChanges();

                                                continue;
                                            }
                                        }

                                        Solar_SiteCodeAfterCheck = Solar_SiteCode;
                                    }
                                    else
                                    {
                                        SolarTransaction.Dispose();

                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                        {
                                            CreatedAt = DateTime.Now,
                                            ErrMsg = $"This columns must have a value (Site Code)",
                                            IsDeleted = false,
                                            IsLib = false,
                                            RefTable = Helpers.Constants.TablesNames.TLIsite.ToString(),
                                            SheetName = "Solar",
                                            UniqueName = $"(Site Code) coulumn and value in the Row{j}"
                                        };

                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                        _unitOfWork.SaveChanges();

                                        continue;
                                    }
                                    int IntParser = 0;
                                    string SolarAzimuthString = SolarDataTable.Rows[j]["PV array Azimuth"].ToString();
                                    string SolarAngelAngelString = SolarDataTable.Rows[j]["PV array Angel"].ToString();
                                    string SolarPREFIXString = SolarDataTable.Rows[j]["PREFIX"].ToString();
                                    string SolarExtenstionDimensionString = SolarDataTable.Rows[j]["Extension Dimension"].ToString();
                                    string SolarPowerlossratioString = SolarDataTable.Rows[j]["Power loss ratio"].ToString();
                                    string SolarExtensionString = SolarDataTable.Rows[j]["extension"].ToString();

                                    string SolarNumberOfSSUtString = SolarDataTable.Rows[j]["NO# of SSU"].ToString();
                                    int SolarNumberOfSSU = 0;
                                    if (!string.IsNullOrEmpty(SolarNumberOfSSUtString))
                                    {
                                        CheckParser = int.TryParse(SolarNumberOfSSUtString, out IntParser);

                                        if (CheckParser)
                                            SolarNumberOfSSU = IntParser;

                                        else
                                        {
                                            SolarTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(NumberOfSSU) coulumn's value: ({SolarNumberOfSSUtString}) must be a number",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIsolar.ToString(),
                                                SheetName = "Solar",
                                                UniqueName = $"(NumberOfSSU) coulumn and value in the Row{j}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }
                                    }


                                    string SolarNumberOfInstallPVsString = SolarDataTable.Rows[j]["NO# of install pvs"].ToString();
                                    int SolarNumberOfInstallPVs = 0;
                                    if (!string.IsNullOrEmpty(SolarNumberOfInstallPVsString))
                                    {
                                        CheckParser = int.TryParse(SolarNumberOfInstallPVsString, out IntParser);

                                        if (CheckParser)
                                            SolarNumberOfInstallPVs = IntParser;

                                        else
                                        {
                                            SolarTransaction.Dispose();

                                            TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                            {
                                                CreatedAt = DateTime.Now,
                                                ErrMsg = $"(NumberOfInstallPVs) coulumn's value: ({SolarNumberOfInstallPVsString}) must be a number",
                                                IsDeleted = false,
                                                IsLib = false,
                                                RefTable = Helpers.Constants.TablesNames.TLIsolar.ToString(),
                                                SheetName = "Solar",
                                                UniqueName = $"(NumberOfInstallPVs) coulumn and value in the Row{j}"
                                            };

                                            _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                            _unitOfWork.SaveChanges();

                                            continue;
                                        }
                                    }

                               
                                      var SolarName = SolarLibraryModel + " " + Solar_SiteName;


                                    // Check if Power Name is Already Exist on This Site..
                                    TLIotherInSite CheckSolarName = _unitOfWork.OtherInSiteRepository
                                        .GetIncludeWhereFirst(
                                            x => !x.Dismantle &&
                                                 x.SiteCode.ToLower().Trim() == Solar_SiteCodeAfterCheck.ToLower().Trim() &&
                                                 x.allOtherInventoryInst.solar.Name.ToLower().Trim() ==
                                                 SolarName.ToLower().Trim(),
                                            x => x.allOtherInventoryInst, x => x.allOtherInventoryInst.solar
                                        );


                                    if (CheckSolarName != null)
                                    {
                                        SolarTransaction.Dispose();

                                        TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                        {
                                            CreatedAt = DateTime.Now,
                                            ErrMsg = $"(Solar Name) column's value: ({SolarName}) is already exist on this site: ({Solar_SiteCodeAfterCheck})",
                                            IsDeleted = false,
                                            IsLib = false,
                                            RefTable = Helpers.Constants.TablesNames.TLIotherInSite.ToString(),
                                            SheetName = "Solar",
                                            UniqueName = $" in the Row{j}"
                                        };

                                        _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                        _unitOfWork.SaveChanges();

                                        continue;
                                    }

                                    TLIsolar NewSolarEntity = new TLIsolar()
                                    {
                                        Name = SolarName,
                                        PVArrayAzimuth = SolarAzimuthString,
                                        PVArrayAngel = SolarAngelAngelString,
                                        Prefix = SolarPREFIXString,
                                        PowerLossRatio = SolarPowerlossratioString,
                                        NumberOfSSU = SolarNumberOfSSU,
                                        SolarLibraryId = SolarLibraryId,
                                        NumberOfInstallPVs = SolarNumberOfInstallPVs,
                                        Extension = SolarExtensionString,
                                        ExtenstionDimension = SolarExtenstionDimensionString

                                    };

                                    _unitOfWork.SolarRepository.Add(NewSolarEntity);
                                    _unitOfWork.SaveChanges();


                                    //
                                    // Dynamic Attributes..
                                    //

                                    List<TLIdynamicAttInstValue> SolarDynamicValues = new List<TLIdynamicAttInstValue>();

                                    foreach (TLIdynamicAtt MissedAttribute in SolarMissedAttributes)
                                    {
                                        if (!string.IsNullOrEmpty(SolarDataTable.Rows[j][MissedAttribute.Key].ToString()))
                                        {
                                            TLIdynamicAttInstValue MissedAttributeValue = new TLIdynamicAttInstValue()
                                            {
                                                tablesNamesId = SolarTableNameId,
                                                disable = false,
                                                DynamicAttId = MissedAttribute.Id,
                                                InventoryId = NewSolarEntity.Id
                                            };

                                            if (MissedAttribute.DataType.Name.ToLower() == "string".ToLower())
                                                MissedAttributeValue.ValueString = SolarDataTable.Rows[j][MissedAttribute.Key].ToString();
                                            else if (MissedAttribute.DataType.Name.ToLower() == "int".ToLower() ||
                                                MissedAttribute.DataType.Name.ToLower() == "double".ToLower())
                                            {
                                                double DoubleParser = 0;

                                                CheckParser = double.TryParse(SolarDataTable.Rows[j][MissedAttribute.Key].ToString(), out DoubleParser);

                                                if (CheckParser)
                                                    MissedAttributeValue.ValueDouble = DoubleParser;

                                                else
                                                {
                                                    SolarTransaction.Dispose();

                                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                    {
                                                        CreatedAt = DateTime.Now,
                                                        ErrMsg = $"({MissedAttribute.Key}) coulumn's value: ({SolarDataTable.Rows[j][MissedAttribute.Key]}) must be a number",
                                                        IsDeleted = false,
                                                        IsLib = false,
                                                        RefTable = Helpers.Constants.TablesNames.TLIsolar.ToString(),
                                                        SheetName = "Solar",
                                                        UniqueName = $"({MissedAttribute.Key}) coulumn and value in the Row{j}"
                                                    };

                                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                    _unitOfWork.SaveChanges();

                                                    continue;
                                                }
                                            }
                                            else if (MissedAttribute.DataType.Name.ToLower() == "boolean".ToLower())
                                            {
                                                bool BooleanParser = false;

                                                CheckParser = bool.TryParse(SolarDataTable.Rows[j][MissedAttribute.Key].ToString(), out BooleanParser);

                                                if (CheckParser)
                                                    MissedAttributeValue.ValueBoolean = BooleanParser;

                                                else
                                                {
                                                    SolarTransaction.Dispose();

                                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                    {
                                                        CreatedAt = DateTime.Now,
                                                        ErrMsg = $"({MissedAttribute.Key}) coulumn's value: ({SolarDataTable.Rows[j][MissedAttribute.Key]}) must be boolean (Yes/No)",
                                                        IsDeleted = false,
                                                        IsLib = false,
                                                        RefTable = Helpers.Constants.TablesNames.TLIsolar.ToString(),
                                                        SheetName = "Solar",
                                                        UniqueName = $"({MissedAttribute.Key}) coulumn and value in the Row{j}"
                                                    };

                                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                    _unitOfWork.SaveChanges();

                                                    continue;
                                                }
                                            }
                                            else if (MissedAttribute.DataType.Name.ToLower() == "datetime".ToLower())
                                            {
                                                DateTime DateTimeParser = DateTime.Now;

                                                CheckParser = DateTime.TryParse(SolarDataTable.Rows[j][MissedAttribute.Key].ToString(), out DateTimeParser);

                                                if (CheckParser)
                                                    MissedAttributeValue.ValueDateTime = DateTimeParser;

                                                else
                                                {
                                                    SolarTransaction.Dispose();

                                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                                    {
                                                        CreatedAt = DateTime.Now,
                                                        ErrMsg = $"({MissedAttribute.Key}) coulumn's value: ({SolarDataTable.Rows[j][MissedAttribute.Key]}) must be date",
                                                        IsDeleted = false,
                                                        IsLib = false,
                                                        RefTable = Helpers.Constants.TablesNames.TLIsolar.ToString(),
                                                        SheetName = "Solar",
                                                        UniqueName = $"({MissedAttribute.Key}) coulumn and value in the Row{j}"
                                                    };

                                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                                    _unitOfWork.SaveChanges();

                                                    continue;
                                                }
                                            }

                                            SolarDynamicValues.Add(MissedAttributeValue);
                                        }
                                    }
                                    if (SolarDynamicValues.Count() > 0)
                                    {
                                        _unitOfWork.DynamicAttInstValueRepository.AddRange(SolarDynamicValues);
                                        _unitOfWork.SaveChanges();
                                    }

                                    //
                                    // All Load Installation Information..
                                    //

                                    TLIallOtherInventoryInst NewSolarAllOtherInventoryEntity = new TLIallOtherInventoryInst()
                                    {
                                        solarId = NewSolarEntity.Id,
                                        Draft = false
                                    };

                                    _unitOfWork.AllOtherInventoryInstRepository.Add(NewSolarAllOtherInventoryEntity);
                                    _unitOfWork.SaveChanges();

                                    //
                                    // OtherInSite Information..
                                    //
                                    TLIotherInSite tLIotherInSite = new TLIotherInSite()
                                    {
                                        InstallationDate = DateTime.Now,
                                        SiteCode = Solar_SiteCode,
                                        allOtherInventoryInstId = NewSolarAllOtherInventoryEntity.Id,
                                        ReservedSpace = true,
                                        Dismantle = false

                                    };
                                    _unitOfWork.OtherInSiteRepository.Add(tLIotherInSite);
                                    _unitOfWork.SaveChanges();

                                    SolarTransaction.Complete();
                                }
                                catch (Exception err)
                                {
                                    SolarTransaction.Dispose();

                                    TLIimportSheet NewImportSheetEntity = new TLIimportSheet()
                                    {
                                        CreatedAt = DateTime.Now,
                                        ErrMsg = err.Message,
                                        IsDeleted = false,
                                        IsLib = false,
                                        RefTable = Helpers.Constants.TablesNames.TLIsolar.ToString(),
                                        SheetName = "Solar",
                                        UniqueName = $"in the Row{j}"
                                    };

                                    _unitOfWork.ImportSheetRepository.Add(NewImportSheetEntity);
                                    _unitOfWork.SaveChanges();

                                    continue;
                                }
                            }
                        }

                    }
                    System.IO.File.Delete(FilePath);
                    return new Response<string>("Succeed");


                }
                catch (Exception err)
                {
                    System.IO.File.Delete(FilePath);
                    return new Response<string>(err.Message);
                }
            }

        }
    } 
}