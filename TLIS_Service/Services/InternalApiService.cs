using AutoMapper;
using LinqToExcel.Extensions;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using NLog.Fluent;
using OfficeOpenXml.FormulaParsing.Excel.Functions.Database;
using OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering;
using OfficeOpenXml.VBA;
using Oracle.ManagedDataAccess.Client;
using Org.BouncyCastle.Pkix;
using Remotion.Collections;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Data.Linq;
using System.Dynamic;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Net.Http.Json;
using System.Reflection;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Threading.Tasks;
using System.Transactions;
using System.Xml.Linq;
using TLIS_DAL;
using TLIS_DAL.Helper;
using TLIS_DAL.Helper.Filters;
using TLIS_DAL.Helpers;
using TLIS_DAL.Models;
using TLIS_DAL.ViewModelBase;
using TLIS_DAL.ViewModels.ActorDTOs;
using TLIS_DAL.ViewModels.AllCivilInstDTOs;
using TLIS_DAL.ViewModels.AsTypeDTOs;
using TLIS_DAL.ViewModels.AttActivatedCategoryDTOs;
using TLIS_DAL.ViewModels.AttributeActivatedDTOs;
using TLIS_DAL.ViewModels.BaseBUDTOs;
using TLIS_DAL.ViewModels.BoardTypeDTOs;
using TLIS_DAL.ViewModels.CabinetDTOs;
using TLIS_DAL.ViewModels.CabinetPowerLibraryDTOs;
using TLIS_DAL.ViewModels.CabinetPowerTypeDTOs;
using TLIS_DAL.ViewModels.CabinetTelecomLibraryDTOs;
using TLIS_DAL.ViewModels.CapacityDTOs;
using TLIS_DAL.ViewModels.CivilLoadsDTOs;
using TLIS_DAL.ViewModels.CivilNonSteelDTOs;
using TLIS_DAL.ViewModels.CivilWithLegDTOs;
using TLIS_DAL.ViewModels.CivilWithLegsDTOs;
using TLIS_DAL.ViewModels.CivilWithoutLegCategoryDTOs;
using TLIS_DAL.ViewModels.CivilWithoutLegDTOs;
using TLIS_DAL.ViewModels.DataTypeDTOs;
using TLIS_DAL.ViewModels.DependencyDTOs;
using TLIS_DAL.ViewModels.DependencyRowDTOs;
using TLIS_DAL.ViewModels.DismantleDto;
using TLIS_DAL.ViewModels.DiversityTypeDTOs;
using TLIS_DAL.ViewModels.DynamicAttDTOs;
using TLIS_DAL.ViewModels.DynamicAttInstValueDTOs;
using TLIS_DAL.ViewModels.DynamicAttLibValueDTOs;
using TLIS_DAL.ViewModels.GeneratorDTOs;
using TLIS_DAL.ViewModels.GeneratorLibraryDTOs;
using TLIS_DAL.ViewModels.InstallationCivilwithoutLegsTypeDTOs;
using TLIS_DAL.ViewModels.ItemConnectToDTOs;
using TLIS_DAL.ViewModels.LoadOtherDTOs;
using TLIS_DAL.ViewModels.LoadOtherLibraryDTOs;
using TLIS_DAL.ViewModels.LoadPartDTOs;
using TLIS_DAL.ViewModels.MW_BUDTOs;
using TLIS_DAL.ViewModels.MW_BULibraryDTOs;
using TLIS_DAL.ViewModels.MW_DishDTOs;
using TLIS_DAL.ViewModels.MW_DishLbraryDTOs;
using TLIS_DAL.ViewModels.MW_ODUDTOs;
using TLIS_DAL.ViewModels.Mw_OtherDTOs;
using TLIS_DAL.ViewModels.MW_OtherLibraryDTOs;
using TLIS_DAL.ViewModels.MW_PortDTOs;
using TLIS_DAL.ViewModels.MW_RFUDTOs;
using TLIS_DAL.ViewModels.OwnerDTOs;
using TLIS_DAL.ViewModels.ParityDTOs;
using TLIS_DAL.ViewModels.PartDTOs;
using TLIS_DAL.ViewModels.PolarityOnLocationDTOs;
using TLIS_DAL.ViewModels.PolarityTypeDTOs;
using TLIS_DAL.ViewModels.PowerDTOs;
using TLIS_DAL.ViewModels.RadioAntennaDTOs;
using TLIS_DAL.ViewModels.RadioAntennaLibraryDTOs;
using TLIS_DAL.ViewModels.RadioOtherDTOs;
using TLIS_DAL.ViewModels.RadioOtherLibraryDTOs;
using TLIS_DAL.ViewModels.RadioRRUDTOs;
using TLIS_DAL.ViewModels.RadioRRULibraryDTOs;
using TLIS_DAL.ViewModels.RepeaterTypeDTOs;
using TLIS_DAL.ViewModels.RowRuleDTOs;
using TLIS_DAL.ViewModels.RuleDTOs;
using TLIS_DAL.ViewModels.SectionsLegTypeDTOs;
using TLIS_DAL.ViewModels.SideArmDTOs;
using TLIS_DAL.ViewModels.SideArmLibraryDTOs;
using TLIS_DAL.ViewModels.SideArmTypeDTOs;
using TLIS_DAL.ViewModels.SiteDTOs;
using TLIS_DAL.ViewModels.SolarDTOs;
using TLIS_DAL.ViewModels.SolarLibraryDTOs;
using TLIS_DAL.ViewModels.StructureTypeDTOs;
using TLIS_DAL.ViewModels.SupportTypeDesignedDTOs;
using TLIS_DAL.ViewModels.TablesNamesDTOs;
using TLIS_DAL.ViewModels.TelecomTypeDTOs;
using TLIS_DAL.ViewModels.TicketDTOs;
using TLIS_Repository.Base;
using TLIS_Repository.IRepository;
using TLIS_Service.Helpers;
using TLIS_Service.IService;
using static Microsoft.EntityFrameworkCore.DbLoggerCategory;
using static Microsoft.EntityFrameworkCore.DbLoggerCategory.Database;
using static System.Net.WebRequestMethods;
using static TLIS_Repository.Helpers.Constants;
using static TLIS_Service.Helpers.Constants;

using ApiReturnCode = TLIS_Service.Helpers.Constants.ApiReturnCode;
using LoadSubType = TLIS_Service.Helpers.Constants.LoadSubType;
using TablePartName = TLIS_Service.Helpers.Constants.TablePartName;
using TablesNames = TLIS_Service.Helpers.Constants.TablesNames;

namespace TLIS_Service.Services
{
    public class InternalApiService : IInternalApiService
    {
        IUnitOfWork _unitOfWork;
        IServiceCollection _services;
        ServiceProvider _serviceProvider;
        private ApplicationDbContext db;
        private IMapper _mapper;

        public InternalApiService(IUnitOfWork unitOfWork, IServiceCollection services, ApplicationDbContext _ApplicationDbContext, IMapper mapper)
        {
            _unitOfWork = unitOfWork;
            _services = services;
            _serviceProvider = _services.BuildServiceProvider();
            db = _ApplicationDbContext;
            _mapper = mapper;
        }
        public List<TLIcivilLoads> GetCivilLoadsWithConditions(SiteFilter BaseFilter, CombineFilters CombineFilters)
        {
            List<FilterObjectList> ObjectAttributeFilters = CombineFilters.filters;
            List<DateFilterViewModel> DateFilter = CombineFilters.DateFilter;

            List<StringFilterObjectList> AttributeFilters = new List<StringFilterObjectList>();
            List<AttributeActivatedViewModel> SideArmInstallationAttribute = new List<AttributeActivatedViewModel>();

            if ((DateFilter != null ? DateFilter.Count() > 0 : false) ||
                (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0))
            {
                SideArmInstallationAttribute = _mapper.Map<List<AttributeActivatedViewModel>>(_unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                    x.Enable && x.AttributeActivatedId != null &&
                    x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.SideArmInstallation.ToString() &&
                    x.EditableManagmentView.TLItablesNames1.TableName == TablesNames.TLIsideArm.ToString(),
                        x => x.AttributeActivated, x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1,
                        x => x.EditableManagmentView.TLItablesNames2)
                .Select(x => x.AttributeActivated).ToList());
            }

            if (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0)
            {
                List<AttributeActivatedViewModel> NotDateDateSideArmInstallationAttribute = SideArmInstallationAttribute.Where(x =>
                    x.DataType.ToLower() != "datetime").ToList();

                foreach (FilterObjectList item in ObjectAttributeFilters)
                {
                    List<string> value = item.value.Select(x => x.ToString().ToLower()).ToList();

                    AttributeActivatedViewModel AttributeKey = NotDateDateSideArmInstallationAttribute.FirstOrDefault(x =>
                        x.Label.ToLower() == item.key.ToLower());

                    string Key = "";
                    if (AttributeKey != null)
                        Key = AttributeKey.Key;

                    else
                        Key = item.key;

                    AttributeFilters.Add(new StringFilterObjectList
                    {
                        key = Key,
                        value = value
                    });
                }
            }

            //
            // DateTime Objects Filters..
            //
            List<DateFilterViewModel> AfterConvertDateFilters = new List<DateFilterViewModel>();
            if (DateFilter != null ? DateFilter.Count() > 0 : false)
            {
                List<AttributeActivatedViewModel> DateSideArmInstallationAttribute = SideArmInstallationAttribute.Where(x =>
                    x.DataType.ToLower() == "datetime").ToList();

                foreach (DateFilterViewModel item in DateFilter)
                {
                    DateTime DateFrom = Convert.ToDateTime(item.DateFrom);
                    DateTime DateTo = Convert.ToDateTime(item.DateTo);

                    if (DateFrom > DateTo)
                    {
                        DateTime Replacer = DateFrom;
                        DateFrom = DateTo;
                        DateTo = Replacer;
                    }

                    AttributeActivatedViewModel AttributeKey = DateSideArmInstallationAttribute.FirstOrDefault(x =>
                        x.Label.ToLower() == item.key.ToLower());
                    string Key = "";

                    if (AttributeKey != null)
                        Key = AttributeKey.Key;
                    else
                        Key = item.key;

                    AfterConvertDateFilters.Add(new DateFilterViewModel
                    {
                        key = Key,
                        DateFrom = DateFrom,
                        DateTo = DateTo
                    });
                }
            }

            List<int> SideArmsIds = new List<int>();
            List<int> WithoutDateFilterSideArmInstallation = new List<int>();
            List<int> WithDateFilterSideArmInstallation = new List<int>();

            if (AttributeFilters != null && AttributeFilters.Count > 0)
            {
                //
                // Installation Dynamic Attributes...
                //
                List<TLIdynamicAtt> InstDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                    AttributeFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                    !x.LibraryAtt && !x.disable &&
                    x.tablesNames.TableName == TablesNames.TLIsideArm.ToString()
                        , x => x.tablesNames, x => x.DataType).ToList();

                List<int> DynamicInstValueListIds = new List<int>();
                bool DynamicInstExist = false;
                if (InstDynamicAttListIds.Count() > 0)
                {
                    DynamicInstExist = true;
                    GetInventoriesIdsFromDynamicAttributes(out DynamicInstValueListIds, InstDynamicAttListIds, AttributeFilters);
                }

                //
                // Installation Attribute Activated...
                //
                bool AttrInstExist = typeof(SideArmViewModel).GetProperties().ToList().Exists(x =>
                    AttributeFilters.Exists(y =>
                        y.key.ToLower() == x.Name.ToLower() && y.key.ToLower() != "id"));

                List<int> InstallationAttributeActivated = new List<int>();
                if (AttrInstExist)
                {
                    List<PropertyInfo> NotStringProps = typeof(SideArmViewModel).GetProperties().Where(x =>
                        x.PropertyType.Name.ToLower() != "string" &&
                            AttributeFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower())).ToList();

                    List<PropertyInfo> StringProps = typeof(SideArmViewModel).GetProperties().Where(x =>
                        x.PropertyType.Name.ToLower() == "string" &&
                            AttributeFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower())).ToList();

                    List<StringFilterObjectList> AttrInstAttributeFilters = AttributeFilters.Where(x =>
                        NotStringProps.Exists(y => y.Name.ToLower() == x.key.ToLower()) ||
                        StringProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                    InstallationAttributeActivated = _unitOfWork.SideArmRepository.GetWhere(x =>
                             AttrInstAttributeFilters.All(z =>
                                NotStringProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (y.GetValue(_mapper.Map<SideArmViewModel>(x), null) != null ? z.value.Contains(y.GetValue(_mapper.Map<SideArmViewModel>(x), null).ToString().ToLower()) : false)) ||
                                StringProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (z.value.Any(w =>
                                     y.GetValue(_mapper.Map<SideArmViewModel>(x), null) != null ? y.GetValue(_mapper.Map<SideArmViewModel>(x), null).ToString().ToLower().StartsWith(w.ToLower()) : false))))
                         ).Select(i => i.Id).ToList();
                }

                //
                // Installation (Attribute Activated + Dynamic) Attributes...
                //
                List<int> IntersectInstallationIds = new List<int>();
                if (AttrInstExist && DynamicInstExist)
                {
                    WithoutDateFilterSideArmInstallation = InstallationAttributeActivated.Intersect(DynamicInstValueListIds).ToList();
                }
                else if (AttrInstExist)
                {
                    WithoutDateFilterSideArmInstallation = InstallationAttributeActivated;
                }
                else if (DynamicInstExist)
                {
                    WithoutDateFilterSideArmInstallation = DynamicInstValueListIds;
                }
            }

            if (DateFilter != null ? DateFilter.Count() > 0 : false)
            {
                List<TLIdynamicAtt> DateTimeInstDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                    AfterConvertDateFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                    !x.LibraryAtt && !x.disable &&
                    x.tablesNames.TableName == TablesNames.TLIsideArm.ToString()
                        , x => x.tablesNames, x => x.DataType).ToList();

                List<int> DynamicInstValueListIds = new List<int>();
                bool DynamicInstExist = false;

                if (DateTimeInstDynamicAttListIds.Count > 0)
                {
                    DynamicInstExist = true;
                    List<DateFilterViewModel> DynamicInstAttributeFilters = AfterConvertDateFilters.Where(x =>
                        DateTimeInstDynamicAttListIds.Exists(y => y.Key.ToLower() == x.key.ToLower())).ToList();

                    DynamicInstValueListIds = new List<int>();

                    List<TLIdynamicAttInstValue> DynamicInstValueListObjects = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                        DateTimeInstDynamicAttListIds.Exists(y => y.Id == x.DynamicAttId) && !x.disable).ToList();

                    List<int> InventoriesIds = DynamicInstValueListObjects.Select(x => x.InventoryId).Distinct().ToList();

                    foreach (int InventoryId in InventoriesIds)
                    {
                        List<TLIdynamicAttInstValue> DynamicInstValueListInventories = DynamicInstValueListObjects.Where(x =>
                            x.InventoryId == InventoryId).ToList();

                        if (DynamicInstAttributeFilters.All(y => DynamicInstValueListInventories.Exists(x =>
                            (x.ValueDateTime != null ?
                                (x.ValueDateTime >= y.DateFrom && x.ValueDateTime <= y.DateTo) : (false)))))
                        {
                            DynamicInstValueListIds.Add(InventoryId);
                        }
                    }
                }

                //
                // Installation Attribute Activated...
                //
                List<PropertyInfo> InstallationProps = typeof(SideArmViewModel).GetProperties().Where(x =>
                    AfterConvertDateFilters.Exists(y =>
                        y.key.ToLower() == x.Name.ToLower())).ToList();

                List<int> InstallationAttributeActivatedIds = new List<int>();
                bool AttrInstExist = false;

                if (InstallationProps != null)
                {
                    AttrInstExist = true;

                    List<DateFilterViewModel> InstallationPropsAttributeFilters = AfterConvertDateFilters.Where(x =>
                        InstallationProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                    InstallationAttributeActivatedIds = _unitOfWork.SideArmRepository.GetWhere(x =>
                        InstallationPropsAttributeFilters.All(z =>
                            (InstallationProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && ((y.GetValue(_mapper.Map<SideArmViewModel>(x), null) != null) ?
                                ((z.DateFrom <= Convert.ToDateTime(y.GetValue(_mapper.Map<SideArmViewModel>(x), null))) &&
                                 (z.DateTo >= Convert.ToDateTime(y.GetValue(_mapper.Map<SideArmViewModel>(x), null)))) : (false)))))
                    ).Select(i => i.Id).ToList();
                }

                //
                // Installation (Attribute Activated + Dynamic) Attributes...
                //
                if (AttrInstExist && DynamicInstExist)
                {
                    WithDateFilterSideArmInstallation = InstallationAttributeActivatedIds.Intersect(DynamicInstValueListIds).ToList();
                }
                else if (AttrInstExist)
                {
                    WithDateFilterSideArmInstallation = InstallationAttributeActivatedIds;
                }
                else if (DynamicInstExist)
                {
                    WithDateFilterSideArmInstallation = DynamicInstValueListIds;
                }
            }

            if ((DateFilter != null ? DateFilter.Count() > 0 : false) ||
                (AttributeFilters != null ? AttributeFilters.Count() > 0 : false))
            {
                if ((AttributeFilters != null ? AttributeFilters.Count > 0 : false) &&
                        (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false))
                {
                    SideArmsIds = WithoutDateFilterSideArmInstallation.Intersect(WithDateFilterSideArmInstallation).ToList();
                }
                else if (AttributeFilters != null ? AttributeFilters.Count > 0 : false)
                {
                    SideArmsIds = WithoutDateFilterSideArmInstallation;
                }
                else if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                {
                    SideArmsIds = WithDateFilterSideArmInstallation;
                }

                return _unitOfWork.CivilLoadsRepository.GetIncludeWhere(x =>
                    (x.SiteCode == BaseFilter.siteCode) &&
                    (!x.Dismantle) &&
                    (x.sideArmId != null) &&
                    (SideArmsIds.Contains(x.sideArmId.Value)),
                  x => x.sideArm, x => x.sideArm.ItemStatus, x => x.sideArm.owner, x => x.sideArm.sideArmInstallationPlace, x => x.sideArm.sideArmLibrary,
                  x => x.sideArm.sideArmType, x => x.sideArm.Ticket).ToList();
            }

            return _unitOfWork.CivilLoadsRepository.GetIncludeWhere(x =>
                (x.SiteCode == BaseFilter.siteCode) &&
                (!x.Dismantle) &&
                (x.sideArmId != null),
                x => x.sideArm, x => x.sideArm.ItemStatus, x => x.sideArm.owner, x => x.sideArm.sideArmInstallationPlace, x => x.sideArm.sideArmLibrary,
                x => x.sideArm.sideArmType, x => x.sideArm.Ticket).ToList();
        }
        public List<TLIotherInSite> GetMaxInstallationDate(List<TLIotherInSite> Copy, string Kind)
        {
            var NewList = new List<TLIotherInSite>();
            if (Kind == "Cabinet")
            {
                foreach (var item in Copy)
                {
                    var CheckIfExist = NewList.FirstOrDefault(x => x.allOtherInventoryInst.cabinetId == item.allOtherInventoryInst.cabinetId);
                    if (CheckIfExist != null)
                    {
                        if (CheckIfExist.InstallationDate < item.InstallationDate)
                        {
                            NewList.Remove(CheckIfExist);
                            NewList.Add(item);
                        }
                    }
                    else
                        NewList.Add(item);
                }
            }
            else if (Kind == "Solar")
            {
                foreach (var item in Copy)
                {
                    var CheckIfExist = NewList.FirstOrDefault(x => x.allOtherInventoryInst.solarId == item.allOtherInventoryInst.solarId);
                    if (CheckIfExist != null)
                    {
                        if (CheckIfExist.InstallationDate < item.InstallationDate)
                        {
                            NewList.Remove(CheckIfExist);
                            NewList.Add(item);
                        }
                    }
                    else
                        NewList.Add(item);
                }
            }
            else if (Kind == "Generator")
            {
                foreach (var item in Copy)
                {
                    var CheckIfExist = NewList.FirstOrDefault(x => x.allOtherInventoryInst.generatorId == item.allOtherInventoryInst.generatorId);
                    if (CheckIfExist != null)
                    {
                        if (CheckIfExist.InstallationDate < item.InstallationDate)
                        {
                            NewList.Remove(CheckIfExist);
                            NewList.Add(item);
                        }
                    }
                    else
                        NewList.Add(item);
                }
            }
            return NewList;

        }
        public List<TLIcivilSiteDate> GetMaxInstallationDates(out int Count, List<TLIcivilSiteDate> Copy, string Kind, ParameterPagination parameterPagination)
        {
            List<TLIcivilSiteDate> AfterDeleteDuplicate = new List<TLIcivilSiteDate>();
            if (Kind == "CivilWithLegs")
            {
                foreach (TLIcivilSiteDate item in Copy)
                {
                    TLIcivilSiteDate CheckIfExist = AfterDeleteDuplicate.FirstOrDefault(x => x.allCivilInst.civilWithLegsId == item.allCivilInst.civilWithLegsId);
                    if (CheckIfExist != null)
                    {
                        if (CheckIfExist.InstallationDate < item.InstallationDate)
                        {
                            AfterDeleteDuplicate.Remove(CheckIfExist);
                            AfterDeleteDuplicate.Add(item);
                        }
                    }
                    else
                        AfterDeleteDuplicate.Add(item);
                }
            }
            else if (Kind == "CivilWithoutLegs")
            {
                foreach (TLIcivilSiteDate item in Copy)
                {
                    TLIcivilSiteDate CheckIfExist = AfterDeleteDuplicate.FirstOrDefault(x => x.allCivilInst.civilWithoutLegId == item.allCivilInst.civilWithoutLegId);
                    if (CheckIfExist != null)
                    {
                        if (CheckIfExist.InstallationDate < item.InstallationDate)
                        {
                            AfterDeleteDuplicate.Remove(CheckIfExist);
                            AfterDeleteDuplicate.Add(item);
                        }
                    }
                    else
                        AfterDeleteDuplicate.Add(item);
                }
            }
            else if (Kind == "CivilNonSteel")
            {
                foreach (TLIcivilSiteDate item in Copy)
                {
                    TLIcivilSiteDate CheckIfExist = AfterDeleteDuplicate.FirstOrDefault(x => x.allCivilInst.civilNonSteelId == item.allCivilInst.civilNonSteelId);
                    if (CheckIfExist != null)
                    {
                        if (CheckIfExist.InstallationDate < item.InstallationDate)
                        {
                            AfterDeleteDuplicate.Remove(CheckIfExist);
                            AfterDeleteDuplicate.Add(item);
                        }
                    }
                    else
                        AfterDeleteDuplicate.Add(item);
                }
            }
            Count = AfterDeleteDuplicate.Count();


            if (parameterPagination == null)
            {
                return AfterDeleteDuplicate.Skip((0) * 100).Take(100).ToList();

            }

            return AfterDeleteDuplicate.Skip((parameterPagination.PageNumber - 1) * parameterPagination.PageSize).
                Take(parameterPagination.PageSize).ToList();

        }
        public List<TLIcivilLoads> GetMaxInstallationDateSidearm(List<TLIcivilLoads> Copy)
        {
            var y = new List<TLIcivilLoads>();
            foreach (var item in Copy)
            {
                var CheckIfExist = y.FirstOrDefault(x => x.sideArmId == item.sideArmId);
                if (CheckIfExist != null)
                {
                    if (CheckIfExist.InstallationDate < item.InstallationDate)
                    {
                        y.Remove(CheckIfExist);
                        y.Add(item);
                    }
                }
                else
                    y.Add(item);
            }
            return y;
        }
        public List<TLIotherInSite> GetOtherInSiteBySiteBaseFilter(SiteFilter BaseFilter, string Kind, CombineFilters CombineFilters, string LibraryType)
        {
            List<StringFilterObjectList> AttributeFilters = new List<StringFilterObjectList>();

            List<FilterObjectList> ObjectAttributeFilters = CombineFilters.filters;
            List<DateFilterViewModel> DateFilter = CombineFilters.DateFilter;

            List<AttributeActivatedViewModel> OtherInventoryInstallationAttribute = new List<AttributeActivatedViewModel>();

            if (Kind == "Cabinet")
            {
                if ((DateFilter != null ? DateFilter.Count() > 0 : false) ||
                    (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0))
                {
                    OtherInventoryInstallationAttribute = _mapper.Map<List<AttributeActivatedViewModel>>(_unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                        x.Enable && x.AttributeActivatedId != null &&
                        x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.CabinetInstallation.ToString() &&
                        x.EditableManagmentView.TLItablesNames1.TableName == TablesNames.TLIcabinet.ToString(),
                            x => x.AttributeActivated, x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1,
                            x => x.EditableManagmentView.TLItablesNames2)
                    .Select(x => x.AttributeActivated).ToList());
                }
            }
            else if (Kind == "Solar")
            {
                if ((DateFilter != null ? DateFilter.Count() > 0 : false) ||
                    (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0))
                {
                    OtherInventoryInstallationAttribute = _mapper.Map<List<AttributeActivatedViewModel>>(_unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                        x.Enable && x.AttributeActivatedId != null &&
                        x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.SolarInstallation.ToString() &&
                        x.EditableManagmentView.TLItablesNames1.TableName == TablesNames.TLIsolar.ToString(),
                            x => x.AttributeActivated, x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1,
                            x => x.EditableManagmentView.TLItablesNames2)
                    .Select(x => x.AttributeActivated).ToList());
                }
            }
            else if (Kind == "Generator")
            {
                if ((DateFilter != null ? DateFilter.Count() > 0 : false) ||
                    (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0))
                {
                    OtherInventoryInstallationAttribute = _mapper.Map<List<AttributeActivatedViewModel>>(_unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                        x.Enable && x.AttributeActivatedId != null &&
                        x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.GeneratorInstallation.ToString() &&
                        x.EditableManagmentView.TLItablesNames1.TableName == TablesNames.TLIgenerator.ToString(),
                            x => x.AttributeActivated, x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1,
                            x => x.EditableManagmentView.TLItablesNames2)
                    .Select(x => x.AttributeActivated).ToList());
                }
            }

            if (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0)
            {
                List<AttributeActivatedViewModel> NotDateOtherInventoryInstallationAttribute = OtherInventoryInstallationAttribute.Where(x =>
                    x.DataType.ToLower() != "datetime").ToList();

                foreach (FilterObjectList item in ObjectAttributeFilters)
                {
                    List<string> value = item.value.Select(x => x.ToString().ToLower()).ToList();

                    AttributeActivatedViewModel AttributeKey = NotDateOtherInventoryInstallationAttribute.FirstOrDefault(x =>
                        x.Label.ToLower() == item.key.ToLower());

                    string Key = "";
                    if (AttributeKey != null)
                        Key = AttributeKey.Key;

                    else
                        Key = item.key;

                    AttributeFilters.Add(new StringFilterObjectList
                    {
                        key = Key,
                        value = value
                    });
                }
            }

            //
            // DateTime Objects Filters..
            //
            List<DateFilterViewModel> AfterConvertDateFilters = new List<DateFilterViewModel>();
            if (DateFilter != null ? DateFilter.Count() > 0 : false)
            {
                List<AttributeActivatedViewModel> DateCivilInstallationAttribute = OtherInventoryInstallationAttribute.Where(x =>
                    x.DataType.ToLower() == "datetime").ToList();

                foreach (DateFilterViewModel item in DateFilter)
                {
                    DateTime DateFrom = Convert.ToDateTime(item.DateFrom);
                    DateTime DateTo = Convert.ToDateTime(item.DateTo);

                    if (DateFrom > DateTo)
                    {
                        DateTime Replacer = DateFrom;
                        DateFrom = DateTo;
                        DateTo = Replacer;
                    }

                    AttributeActivatedViewModel AttributeKey = DateCivilInstallationAttribute.FirstOrDefault(x =>
                        x.Label.ToLower() == item.key.ToLower());
                    string Key = "";

                    if (AttributeKey != null)
                        Key = AttributeKey.Key;
                    else
                        Key = item.key;

                    AfterConvertDateFilters.Add(new DateFilterViewModel
                    {
                        key = Key,
                        DateFrom = DateFrom,
                        DateTo = DateTo
                    });
                }
            }

            if (Kind == "Cabinet")
            {
                List<int> CabinetIds = new List<int>();
                List<int> WithoutDateFilterCabinetInstallation = new List<int>();
                List<int> WithDateFilterCabinetInstallation = new List<int>();

                if (AttributeFilters != null && AttributeFilters.Count > 0)
                {
                    //
                    // Installation Dynamic Attributes...
                    //
                    List<TLIdynamicAtt> InstDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                        AttributeFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                        !x.LibraryAtt && !x.disable &&
                        x.tablesNames.TableName == TablesNames.TLIcabinet.ToString()
                            , x => x.tablesNames, x => x.DataType).ToList();

                    List<int> DynamicInstValueListIds = new List<int>();
                    bool DynamicInstExist = false;
                    if (InstDynamicAttListIds.Count() > 0)
                    {
                        DynamicInstExist = true;
                        GetInventoriesIdsFromDynamicAttributes(out DynamicInstValueListIds, InstDynamicAttListIds, AttributeFilters);
                    }

                    //
                    // Installation Attribute Activated...
                    //
                    bool AttrInstExist = typeof(CabinetViewModel).GetProperties().ToList().Exists(x =>
                        AttributeFilters.Exists(y =>
                            y.key.ToLower() == x.Name.ToLower() && y.key.ToLower() != "id"));

                    List<int> InstallationAttributeActivated = new List<int>();
                    if (AttrInstExist)
                    {
                        List<PropertyInfo> NotStringProps = typeof(CabinetViewModel).GetProperties().Where(x =>
                            x.PropertyType.Name.ToLower() != "string" &&
                            AttributeFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower())).ToList();

                        List<PropertyInfo> StringProps = typeof(CabinetViewModel).GetProperties().Where(x =>
                            x.PropertyType.Name.ToLower() == "string" &&
                            AttributeFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower())).ToList();

                        List<StringFilterObjectList> AttrInstAttributeFilters = AttributeFilters.Where(x =>
                            NotStringProps.Exists(y => y.Name.ToLower() == x.key.ToLower()) ||
                            StringProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                        InstallationAttributeActivated = _unitOfWork.CabinetRepository.GetWhere(x =>
                             AttrInstAttributeFilters.All(z =>
                                NotStringProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (y.GetValue(_mapper.Map<CabinetViewModel>(x), null) != null ? z.value.Contains(y.GetValue(_mapper.Map<CabinetViewModel>(x), null).ToString().ToLower()) : false)) ||
                                StringProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (z.value.Any(w =>
                                     y.GetValue(_mapper.Map<CabinetViewModel>(x), null) != null ? y.GetValue(_mapper.Map<CabinetViewModel>(x), null).ToString().ToLower().StartsWith(w.ToLower()) : false))))
                         ).Select(i => i.Id).ToList();
                    }

                    //
                    // Installation (Attribute Activated + Dynamic) Attributes...
                    //
                    if (AttrInstExist && DynamicInstExist)
                    {
                        WithoutDateFilterCabinetInstallation = InstallationAttributeActivated.Intersect(DynamicInstValueListIds).ToList();
                    }
                    else if (AttrInstExist)
                    {
                        WithoutDateFilterCabinetInstallation = InstallationAttributeActivated;
                    }
                    else if (DynamicInstExist)
                    {
                        WithoutDateFilterCabinetInstallation = DynamicInstValueListIds;
                    }
                }

                if (DateFilter != null ? DateFilter.Count() > 0 : false)
                {
                    List<TLIdynamicAtt> DateTimeInstDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                        AfterConvertDateFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                        !x.LibraryAtt && !x.disable &&
                        x.tablesNames.TableName == TablesNames.TLIcabinet.ToString()
                            , x => x.tablesNames, x => x.DataType).ToList();

                    List<int> DynamicInstValueListIds = new List<int>();
                    bool DynamicInstExist = false;

                    if (DateTimeInstDynamicAttListIds.Count > 0)
                    {
                        DynamicInstExist = true;
                        List<DateFilterViewModel> DynamicInstAttributeFilters = AfterConvertDateFilters.Where(x =>
                            DateTimeInstDynamicAttListIds.Exists(y => y.Key.ToLower() == x.key.ToLower())).ToList();

                        DynamicInstValueListIds = new List<int>();

                        List<TLIdynamicAttInstValue> DynamicInstValueListObjects = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                            DateTimeInstDynamicAttListIds.Exists(y => y.Id == x.DynamicAttId) && !x.disable).ToList();

                        List<int> InventoriesIds = DynamicInstValueListObjects.Select(x => x.InventoryId).Distinct().ToList();

                        foreach (int InventoryId in InventoriesIds)
                        {
                            List<TLIdynamicAttInstValue> DynamicInstValueListInventories = DynamicInstValueListObjects.Where(x =>
                                x.InventoryId == InventoryId).ToList();

                            if (DynamicInstAttributeFilters.All(y => DynamicInstValueListInventories.Exists(x =>
                                (x.ValueDateTime != null ?
                                    (x.ValueDateTime >= y.DateFrom && x.ValueDateTime <= y.DateTo) : (false)))))
                            {
                                DynamicInstValueListIds.Add(InventoryId);
                            }
                        }
                    }

                    //
                    // Installation Attribute Activated...
                    //
                    List<PropertyInfo> InstallationProps = typeof(CabinetViewModel).GetProperties().Where(x =>
                        AfterConvertDateFilters.Exists(y =>
                            y.key.ToLower() == x.Name.ToLower())).ToList();

                    List<int> InstallationAttributeActivatedIds = new List<int>();
                    bool AttrInstExist = false;

                    if (InstallationProps != null)
                    {
                        AttrInstExist = true;

                        List<DateFilterViewModel> InstallationPropsAttributeFilters = AfterConvertDateFilters.Where(x =>
                            InstallationProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                        InstallationAttributeActivatedIds = _unitOfWork.CabinetRepository.GetWhere(x =>
                            InstallationPropsAttributeFilters.All(z =>
                                (InstallationProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && ((y.GetValue(_mapper.Map<CabinetViewModel>(x), null) != null) ?
                                    ((z.DateFrom <= Convert.ToDateTime(y.GetValue(_mapper.Map<CabinetViewModel>(x), null))) &&
                                     (z.DateTo >= Convert.ToDateTime(y.GetValue(_mapper.Map<CabinetViewModel>(x), null)))) : (false)))))
                        ).Select(i => i.Id).ToList();
                    }

                    //
                    // Installation (Attribute Activated + Dynamic) Attributes...
                    //
                    if (AttrInstExist && DynamicInstExist)
                    {
                        WithDateFilterCabinetInstallation = InstallationAttributeActivatedIds.Intersect(DynamicInstValueListIds).ToList();
                    }
                    else if (AttrInstExist)
                    {
                        WithDateFilterCabinetInstallation = InstallationAttributeActivatedIds;
                    }
                    else if (DynamicInstExist)
                    {
                        WithDateFilterCabinetInstallation = DynamicInstValueListIds;
                    }
                }
                if ((DateFilter != null ? DateFilter.Count() > 0 : false) ||
                    (AttributeFilters != null ? AttributeFilters.Count() > 0 : false))
                {
                    if ((AttributeFilters != null ? AttributeFilters.Count > 0 : false) &&
                        (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false))
                    {
                        CabinetIds = WithoutDateFilterCabinetInstallation.Intersect(WithDateFilterCabinetInstallation).ToList();
                    }
                    else if (AttributeFilters != null ? AttributeFilters.Count > 0 : false)
                    {
                        CabinetIds = WithoutDateFilterCabinetInstallation;
                    }
                    else if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                    {
                        CabinetIds = WithDateFilterCabinetInstallation;
                    }

                    if (LibraryType.ToLower() == "telecom")
                    {
                        return _unitOfWork.OtherInSiteRepository.GetIncludeWhere(x => (
                            (x.SiteCode == BaseFilter.siteCode) &&
                            (!x.Dismantle) &&
                            (x.allOtherInventoryInst.cabinetId != null) &&
                            (x.allOtherInventoryInst.Draft == false) &&
                            CabinetIds.Contains(x.allOtherInventoryInst.cabinetId.Value) &&
                            x.allOtherInventoryInst.cabinet.CabinetTelecomLibraryId != null
                        ),
                        x => x.allOtherInventoryInst, x => x.allOtherInventoryInst.cabinet,
                        x => x.allOtherInventoryInst.cabinet.CabinetTelecomLibrary, x => x.allOtherInventoryInst.cabinet.RenewableCabinetType).ToList();
                    }
                    else if (LibraryType.ToLower() == "power")
                    {
                        return _unitOfWork.OtherInSiteRepository.GetIncludeWhere(x => (
                            (x.SiteCode == BaseFilter.siteCode) &&
                            (!x.Dismantle) &&
                            (x.allOtherInventoryInst.cabinetId != null) &&
                            (x.allOtherInventoryInst.Draft == false) &&
                            CabinetIds.Contains(x.allOtherInventoryInst.cabinetId.Value) &&
                            x.allOtherInventoryInst.cabinet.CabinetPowerLibraryId != null
                        ),
                        x => x.allOtherInventoryInst, x => x.allOtherInventoryInst.cabinet, x => x.allOtherInventoryInst.cabinet.CabinetPowerLibrary,
                        x => x.allOtherInventoryInst.cabinet.RenewableCabinetType).ToList();
                    }
                }

                if (LibraryType.ToLower() == "telecom")
                {
                    return _unitOfWork.OtherInSiteRepository.GetIncludeWhere(x => (
                        (x.SiteCode == BaseFilter.siteCode) &&
                        (!x.Dismantle) &&
                        (x.allOtherInventoryInst.cabinetId != null) &&
                        (x.allOtherInventoryInst.Draft == false) &&
                        x.allOtherInventoryInst.cabinet.CabinetTelecomLibraryId != null
                    ),
                    x => x.allOtherInventoryInst, x => x.allOtherInventoryInst.cabinet,
                    x => x.allOtherInventoryInst.cabinet.CabinetTelecomLibrary, x => x.allOtherInventoryInst.cabinet.RenewableCabinetType).ToList();
                }
                else if (LibraryType.ToLower() == "power")
                {
                    return _unitOfWork.OtherInSiteRepository.GetIncludeWhere(x => (
                        (x.SiteCode == BaseFilter.siteCode) &&
                        (!x.Dismantle) &&
                        (x.allOtherInventoryInst.cabinetId != null) &&
                        (x.allOtherInventoryInst.Draft == false) &&
                        x.allOtherInventoryInst.cabinet.CabinetPowerLibraryId != null
                    ),
                    x => x.allOtherInventoryInst, x => x.allOtherInventoryInst.cabinet, x => x.allOtherInventoryInst.cabinet.CabinetPowerLibrary,
                    x => x.allOtherInventoryInst.cabinet.RenewableCabinetType).ToList();
                }
            }
            else if (Kind == "Solar")
            {
                List<int> SolarIds = new List<int>();
                List<int> WithoutDateFilterSolarInstallation = new List<int>();
                List<int> WithDateFilterSolarInstallation = new List<int>();

                if (AttributeFilters != null && AttributeFilters.Count > 0)
                {
                    //
                    // Installation Dynamic Attributes...
                    //
                    List<TLIdynamicAtt> InstDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                        AttributeFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                        !x.LibraryAtt && !x.disable &&
                        x.tablesNames.TableName == TablesNames.TLIsolar.ToString()
                            , x => x.tablesNames, x => x.DataType).ToList();

                    List<int> DynamicInstValueListIds = new List<int>();
                    bool DynamicInstExist = false;
                    if (InstDynamicAttListIds.Count() > 0)
                    {
                        DynamicInstExist = true;
                        GetInventoriesIdsFromDynamicAttributes(out DynamicInstValueListIds, InstDynamicAttListIds, AttributeFilters);
                    }

                    //
                    // Installation Attribute Activated...
                    //
                    bool AttrInstExist = typeof(SolarViewModel).GetProperties().ToList().Exists(x =>
                        AttributeFilters.Exists(y =>
                            y.key.ToLower() == x.Name.ToLower() && y.key.ToLower() != "id"));

                    List<int> InstallationAttributeActivated = new List<int>();
                    if (AttrInstExist)
                    {
                        List<PropertyInfo> NotStringProps = typeof(SolarViewModel).GetProperties().Where(x =>
                            x.PropertyType.Name.ToLower() != "string" &&
                            AttributeFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower())).ToList();

                        List<PropertyInfo> StringProps = typeof(SolarViewModel).GetProperties().Where(x =>
                            x.PropertyType.Name.ToLower() == "string" &&
                            AttributeFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower())).ToList();

                        List<StringFilterObjectList> AttrInstAttributeFilters = AttributeFilters.Where(x =>
                            NotStringProps.Exists(y => y.Name.ToLower() == x.key.ToLower()) ||
                            StringProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                        InstallationAttributeActivated = _unitOfWork.SolarRepository.GetWhere(x =>
                             AttrInstAttributeFilters.All(z =>
                                NotStringProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (y.GetValue(_mapper.Map<SolarViewModel>(x), null) != null ? z.value.Contains(y.GetValue(_mapper.Map<SolarViewModel>(x), null).ToString().ToLower()) : false)) ||
                                StringProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (z.value.Any(w =>
                                     y.GetValue(_mapper.Map<SolarViewModel>(x), null) != null ? y.GetValue(_mapper.Map<SolarViewModel>(x), null).ToString().ToLower().StartsWith(w.ToLower()) : false))))
                         ).Select(i => i.Id).ToList();
                    }

                    //
                    // Installation (Attribute Activated + Dynamic) Attributes...
                    //
                    if (AttrInstExist && DynamicInstExist)
                    {
                        WithoutDateFilterSolarInstallation = InstallationAttributeActivated.Intersect(DynamicInstValueListIds).ToList();
                    }
                    else if (AttrInstExist)
                    {
                        WithoutDateFilterSolarInstallation = InstallationAttributeActivated;
                    }
                    else if (DynamicInstExist)
                    {
                        WithoutDateFilterSolarInstallation = DynamicInstValueListIds;
                    }
                }

                if (DateFilter != null ? DateFilter.Count() > 0 : false)
                {
                    List<TLIdynamicAtt> DateTimeInstDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                        AfterConvertDateFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                        !x.LibraryAtt && !x.disable &&
                        x.tablesNames.TableName == TablesNames.TLIsolar.ToString()
                            , x => x.tablesNames, x => x.DataType).ToList();

                    List<int> DynamicInstValueListIds = new List<int>();
                    bool DynamicInstExist = false;

                    if (DateTimeInstDynamicAttListIds.Count > 0)
                    {
                        DynamicInstExist = true;
                        List<DateFilterViewModel> DynamicInstAttributeFilters = AfterConvertDateFilters.Where(x =>
                            DateTimeInstDynamicAttListIds.Exists(y => y.Key.ToLower() == x.key.ToLower())).ToList();

                        DynamicInstValueListIds = new List<int>();

                        List<TLIdynamicAttInstValue> DynamicInstValueListObjects = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                            DateTimeInstDynamicAttListIds.Exists(y => y.Id == x.DynamicAttId) && !x.disable).ToList();

                        List<int> InventoriesIds = DynamicInstValueListObjects.Select(x => x.InventoryId).Distinct().ToList();

                        foreach (int InventoryId in InventoriesIds)
                        {
                            List<TLIdynamicAttInstValue> DynamicInstValueListInventories = DynamicInstValueListObjects.Where(x =>
                                x.InventoryId == InventoryId).ToList();

                            if (DynamicInstAttributeFilters.All(y => DynamicInstValueListInventories.Exists(x =>
                                (x.ValueDateTime != null ?
                                    (x.ValueDateTime >= y.DateFrom && x.ValueDateTime <= y.DateTo) : (false)))))
                            {
                                DynamicInstValueListIds.Add(InventoryId);
                            }
                        }
                    }

                    //
                    // Installation Attribute Activated...
                    //
                    List<PropertyInfo> InstallationProps = typeof(SolarViewModel).GetProperties().Where(x =>
                        AfterConvertDateFilters.Exists(y =>
                            y.key.ToLower() == x.Name.ToLower())).ToList();

                    List<int> InstallationAttributeActivatedIds = new List<int>();
                    bool AttrInstExist = false;

                    if (InstallationProps != null)
                    {
                        AttrInstExist = true;

                        List<DateFilterViewModel> InstallationPropsAttributeFilters = AfterConvertDateFilters.Where(x =>
                            InstallationProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                        InstallationAttributeActivatedIds = _unitOfWork.SolarRepository.GetWhere(x =>
                            InstallationPropsAttributeFilters.All(z =>
                                (InstallationProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && ((y.GetValue(_mapper.Map<SolarViewModel>(x), null) != null) ?
                                    ((z.DateFrom <= Convert.ToDateTime(y.GetValue(_mapper.Map<SolarViewModel>(x), null))) &&
                                     (z.DateTo >= Convert.ToDateTime(y.GetValue(_mapper.Map<SolarViewModel>(x), null)))) : (false)))))
                        ).Select(i => i.Id).ToList();
                    }

                    //
                    // Installation (Attribute Activated + Dynamic) Attributes...
                    //
                    if (AttrInstExist && DynamicInstExist)
                    {
                        WithDateFilterSolarInstallation = InstallationAttributeActivatedIds.Intersect(DynamicInstValueListIds).ToList();
                    }
                    else if (AttrInstExist)
                    {
                        WithDateFilterSolarInstallation = InstallationAttributeActivatedIds;
                    }
                    else if (DynamicInstExist)
                    {
                        WithDateFilterSolarInstallation = DynamicInstValueListIds;
                    }
                }
                if ((DateFilter != null ? DateFilter.Count() > 0 : false) ||
                    (AttributeFilters != null ? AttributeFilters.Count() > 0 : false))
                {
                    if ((AttributeFilters != null ? AttributeFilters.Count > 0 : false) &&
                        (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false))
                    {
                        SolarIds = WithoutDateFilterSolarInstallation.Intersect(WithDateFilterSolarInstallation).ToList();
                    }
                    else if (AttributeFilters != null ? AttributeFilters.Count > 0 : false)
                    {
                        SolarIds = WithoutDateFilterSolarInstallation;
                    }
                    else if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                    {
                        SolarIds = WithDateFilterSolarInstallation;
                    }

                    return _unitOfWork.OtherInSiteRepository.GetIncludeWhere(x => (
                        (x.SiteCode == BaseFilter.siteCode) &&
                        (!x.Dismantle) &&
                        (x.allOtherInventoryInst.solarId != null) &&
                        (x.allOtherInventoryInst.Draft == false) &&
                        SolarIds.Contains(x.allOtherInventoryInst.solarId.Value)
                    ),
                    x => x.allOtherInventoryInst, x => x.allOtherInventoryInst.solar, x => x.allOtherInventoryInst.solar.Cabinet,
                    x => x.allOtherInventoryInst.solar.SolarLibrary).ToList();
                }

                return _unitOfWork.OtherInSiteRepository.GetIncludeWhere(x => (
                    (x.SiteCode == BaseFilter.siteCode) &&
                    (!x.Dismantle) &&

                    (x.allOtherInventoryInst.solarId != null) &&
                    (x.allOtherInventoryInst.Draft == false)
                ),
                x => x.allOtherInventoryInst, x => x.allOtherInventoryInst.solar, x => x.allOtherInventoryInst.solar.Cabinet,
                    x => x.allOtherInventoryInst.solar.SolarLibrary).ToList();
            }
            else if (Kind == "Generator")
            {
                List<int> GeneratorIds = new List<int>();
                List<int> WithoutDateFilterGeneratorInstallation = new List<int>();
                List<int> WithDateFilterGeneratorInstallation = new List<int>();

                if (AttributeFilters != null && AttributeFilters.Count > 0)
                {
                    //
                    // Installation Dynamic Attributes...
                    //
                    List<TLIdynamicAtt> InstDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                        AttributeFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                        !x.LibraryAtt && !x.disable &&
                        x.tablesNames.TableName == TablesNames.TLIgenerator.ToString()
                            , x => x.tablesNames, x => x.DataType).ToList();

                    List<int> DynamicInstValueListIds = new List<int>();
                    bool DynamicInstExist = false;
                    if (InstDynamicAttListIds.Count() > 0)
                    {
                        DynamicInstExist = true;
                        GetInventoriesIdsFromDynamicAttributes(out DynamicInstValueListIds, InstDynamicAttListIds, AttributeFilters);
                    }

                    //
                    // Installation Attribute Activated...
                    //
                    bool AttrInstExist = typeof(GeneratorViewModel).GetProperties().ToList().Exists(x =>
                        AttributeFilters.Exists(y =>
                            y.key.ToLower() == x.Name.ToLower() && y.key.ToLower() != "id"));

                    List<int> InstallationAttributeActivated = new List<int>();
                    if (AttrInstExist)
                    {
                        List<PropertyInfo> NotStringProps = typeof(GeneratorViewModel).GetProperties().Where(x =>
                            x.PropertyType.Name.ToLower() != "string" &&
                            AttributeFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower())).ToList();

                        List<PropertyInfo> StringProps = typeof(GeneratorViewModel).GetProperties().Where(x =>
                            x.PropertyType.Name.ToLower() == "string" &&
                            AttributeFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower())).ToList();

                        List<StringFilterObjectList> AttrInstAttributeFilters = AttributeFilters.Where(x =>
                            NotStringProps.Exists(y => y.Name.ToLower() == x.key.ToLower()) ||
                            StringProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                        InstallationAttributeActivated = _unitOfWork.GeneratorRepository.GetWhere(x =>
                             AttrInstAttributeFilters.All(z =>
                                NotStringProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (y.GetValue(_mapper.Map<GeneratorViewModel>(x), null) != null ? z.value.Contains(y.GetValue(_mapper.Map<GeneratorViewModel>(x), null).ToString().ToLower()) : false)) ||
                                StringProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (z.value.Any(w =>
                                     y.GetValue(_mapper.Map<GeneratorViewModel>(x), null) != null ? y.GetValue(_mapper.Map<GeneratorViewModel>(x), null).ToString().ToLower().StartsWith(w.ToLower()) : false))))
                         ).Select(i => i.Id).ToList();
                    }

                    //
                    // Installation (Attribute Activated + Dynamic) Attributes...
                    //
                    if (AttrInstExist && DynamicInstExist)
                    {
                        WithoutDateFilterGeneratorInstallation = InstallationAttributeActivated.Intersect(DynamicInstValueListIds).ToList();
                    }
                    else if (AttrInstExist)
                    {
                        WithoutDateFilterGeneratorInstallation = InstallationAttributeActivated;
                    }
                    else if (DynamicInstExist)
                    {
                        WithoutDateFilterGeneratorInstallation = DynamicInstValueListIds;
                    }
                }

                if (DateFilter != null ? DateFilter.Count() > 0 : false)
                {
                    List<TLIdynamicAtt> DateTimeInstDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                        AfterConvertDateFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                        !x.LibraryAtt && !x.disable &&
                        x.tablesNames.TableName == TablesNames.TLIgenerator.ToString()
                            , x => x.tablesNames, x => x.DataType).ToList();

                    List<int> DynamicInstValueListIds = new List<int>();
                    bool DynamicInstExist = false;

                    if (DateTimeInstDynamicAttListIds.Count > 0)
                    {
                        DynamicInstExist = true;
                        List<DateFilterViewModel> DynamicInstAttributeFilters = AfterConvertDateFilters.Where(x =>
                            DateTimeInstDynamicAttListIds.Exists(y => y.Key.ToLower() == x.key.ToLower())).ToList();

                        DynamicInstValueListIds = new List<int>();

                        List<TLIdynamicAttInstValue> DynamicInstValueListObjects = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                            DateTimeInstDynamicAttListIds.Exists(y => y.Id == x.DynamicAttId) && !x.disable).ToList();

                        List<int> InventoriesIds = DynamicInstValueListObjects.Select(x => x.InventoryId).Distinct().ToList();

                        foreach (int InventoryId in InventoriesIds)
                        {
                            List<TLIdynamicAttInstValue> DynamicInstValueListInventories = DynamicInstValueListObjects.Where(x =>
                                x.InventoryId == InventoryId).ToList();

                            if (DynamicInstAttributeFilters.All(y => DynamicInstValueListInventories.Exists(x =>
                                (x.ValueDateTime != null ?
                                    (x.ValueDateTime >= y.DateFrom && x.ValueDateTime <= y.DateTo) : (false)))))
                            {
                                DynamicInstValueListIds.Add(InventoryId);
                            }
                        }
                    }

                    //
                    // Installation Attribute Activated...
                    //
                    List<PropertyInfo> InstallationProps = typeof(GeneratorViewModel).GetProperties().Where(x =>
                        AfterConvertDateFilters.Exists(y =>
                            y.key.ToLower() == x.Name.ToLower())).ToList();

                    List<int> InstallationAttributeActivatedIds = new List<int>();
                    bool AttrInstExist = false;

                    if (InstallationProps != null)
                    {
                        AttrInstExist = true;

                        List<DateFilterViewModel> InstallationPropsAttributeFilters = AfterConvertDateFilters.Where(x =>
                            InstallationProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                        InstallationAttributeActivatedIds = _unitOfWork.GeneratorRepository.GetWhere(x =>
                            InstallationPropsAttributeFilters.All(z =>
                                (InstallationProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && ((y.GetValue(_mapper.Map<GeneratorViewModel>(x), null) != null) ?
                                    ((z.DateFrom <= Convert.ToDateTime(y.GetValue(_mapper.Map<GeneratorViewModel>(x), null))) &&
                                     (z.DateTo >= Convert.ToDateTime(y.GetValue(_mapper.Map<GeneratorViewModel>(x), null)))) : (false)))))
                        ).Select(i => i.Id).ToList();
                    }

                    //
                    // Installation (Attribute Activated + Dynamic) Attributes...
                    //
                    if (AttrInstExist && DynamicInstExist)
                    {
                        WithDateFilterGeneratorInstallation = InstallationAttributeActivatedIds.Intersect(DynamicInstValueListIds).ToList();
                    }
                    else if (AttrInstExist)
                    {
                        WithDateFilterGeneratorInstallation = InstallationAttributeActivatedIds;
                    }
                    else if (DynamicInstExist)
                    {
                        WithDateFilterGeneratorInstallation = DynamicInstValueListIds;
                    }
                }
                if ((DateFilter != null ? DateFilter.Count() > 0 : false) ||
                    (AttributeFilters != null ? AttributeFilters.Count() > 0 : false))
                {
                    if ((AttributeFilters != null ? AttributeFilters.Count > 0 : false) &&
                        (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false))
                    {
                        GeneratorIds = WithoutDateFilterGeneratorInstallation.Intersect(WithDateFilterGeneratorInstallation).ToList();
                    }
                    else if (AttributeFilters != null ? AttributeFilters.Count > 0 : false)
                    {
                        GeneratorIds = WithoutDateFilterGeneratorInstallation;
                    }
                    else if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                    {
                        GeneratorIds = WithDateFilterGeneratorInstallation;
                    }

                    return _unitOfWork.OtherInSiteRepository.GetIncludeWhere(x => (
                        (x.SiteCode == BaseFilter.siteCode) &&
                        (!x.Dismantle) &&

                        (x.allOtherInventoryInst.generatorId != null) &&
                        (x.allOtherInventoryInst.Draft == false) &&
                        GeneratorIds.Contains(x.allOtherInventoryInst.generatorId.Value)
                    ),
                    x => x.allOtherInventoryInst, x => x.allOtherInventoryInst.generator, x => x.allOtherInventoryInst.generator.BaseGeneratorType,
                    x => x.allOtherInventoryInst.generator.GeneratorLibrary).ToList();
                }

                return _unitOfWork.OtherInSiteRepository.GetIncludeWhere(x => (
                    (x.SiteCode == BaseFilter.siteCode) &&
                    (!x.Dismantle) &&

                    (x.allOtherInventoryInst.generatorId != null) &&
                    (x.allOtherInventoryInst.Draft == false)
                ),
                x => x.allOtherInventoryInst, x => x.allOtherInventoryInst.generator, x => x.allOtherInventoryInst.generator.BaseGeneratorType,
                    x => x.allOtherInventoryInst.generator.GeneratorLibrary).ToList();
            }
            return null;
        }
        public string GetDynamicAttValue(TLIdynamicAttInstValue DynamicAttInstValueRecord, TLIdynamicAttLibValue DynamicAttLibRecord)
        {
            if (DynamicAttInstValueRecord != null)
            {
                if (DynamicAttInstValueRecord.ValueString != null) return DynamicAttInstValueRecord.ValueString;

                else if (DynamicAttInstValueRecord.ValueDouble != null) return DynamicAttInstValueRecord.ValueDouble.ToString();

                else if (DynamicAttInstValueRecord.ValueDateTime != null) return DynamicAttInstValueRecord.ValueDateTime.ToString();

                else if (DynamicAttInstValueRecord.ValueBoolean != null) return DynamicAttInstValueRecord.ValueBoolean.ToString();
            }
            else if (DynamicAttLibRecord != null)
            {
                if (DynamicAttLibRecord.ValueString != null)
                    return DynamicAttLibRecord.ValueString;

                else if (DynamicAttLibRecord.ValueDouble != null)
                    return DynamicAttLibRecord.ValueDouble.ToString();

                else if (DynamicAttLibRecord.ValueDateTime != null)
                    return DynamicAttLibRecord.ValueDateTime.ToString();

                else if (DynamicAttLibRecord.ValueBoolean != null)
                    return DynamicAttLibRecord.ValueBoolean.ToString();
            }
            return "";
        }
        public DynamicAttDto GetDynamicAttDto(TLIdynamicAttInstValue DynamicAttInstValueRecord, TLIdynamicAttLibValue DynamicAttLibRecord)
        {
            DynamicAttDto DynamicAttDto = new DynamicAttDto
            {
                DataType = new DataTypeViewModel(),
                DynamicAttInstValue = new DynamicAttInstValueViewModel(),
                DynamicAttLibValue = new DynamicAttLibValueViewMdodel()
            };
            if (DynamicAttInstValueRecord != null)
            {
                // Key
                DynamicAttDto.Key = DynamicAttInstValueRecord.DynamicAtt.Key;

                // DataType.Id + DataType.Name
                DynamicAttDto.DataType.Id = DynamicAttInstValueRecord.DynamicAtt.DataTypeId.Value;
                DynamicAttDto.DataType.Name = DynamicAttInstValueRecord.DynamicAtt.DataType.Name;

                // DynamicAttInstValue.Id
                DynamicAttDto.DynamicAttInstValue.Id = DynamicAttInstValueRecord.Id;

                // DynamicAttInstValueRecord.ValueString
                DynamicAttDto.DynamicAttInstValue.Value = GetDynamicAttValue(DynamicAttInstValueRecord, null);

                // DynamicAttInstValue.DynamicAttId
                DynamicAttDto.DynamicAttInstValue.DynamicAttId = DynamicAttInstValueRecord.DynamicAttId;
                DynamicAttDto.DynamicAttLibValue = null;

            }
            else if (DynamicAttLibRecord != null)
            {
                // Key
                DynamicAttDto.Key = DynamicAttLibRecord.DynamicAtt.Key;

                // DataType.Id + DataType.Name
                DynamicAttDto.DataType.Id = DynamicAttLibRecord.DynamicAtt.DataTypeId.Value;
                DynamicAttDto.DataType.Name = DynamicAttLibRecord.DynamicAtt.DataType.Name;

                // DynamicAttLibValue.Id
                DynamicAttDto.DynamicAttLibValue.Id = DynamicAttLibRecord.Id;

                // DynamicAttLibValue.Value
                DynamicAttDto.DynamicAttLibValue.Value = GetDynamicAttValue(null, DynamicAttLibRecord);

                // DynamicAttLibValue.DynamicAttId
                DynamicAttDto.DynamicAttLibValue.DynamicAttId = DynamicAttLibRecord.DynamicAttId;
                DynamicAttDto.DynamicAttInstValue = null;
            }
            return DynamicAttDto;
        }
        public void GetInventoriesIdsFromDynamicAttributes(out List<int> DynamicLibValueListIds, List<TLIdynamicAtt> LibDynamicAttListIds, List<StringFilterObjectList> AttributeFilters)
        {
            try
            {
                List<StringFilterObjectList> DynamicLibAttributeFilters = AttributeFilters.Where(x =>
                    LibDynamicAttListIds.Exists(y => y.Key.ToLower() == x.key.ToLower())).ToList();

                DynamicLibValueListIds = new List<int>();

                List<TLIdynamicAttLibValue> DynamicLibValueListObjects = _unitOfWork.DynamicAttLibRepository.GetIncludeWhere(x =>
                    LibDynamicAttListIds.Exists(y => y.Id == x.DynamicAttId) && !x.disable).ToList();

                List<int> InventoriesIds = DynamicLibValueListObjects.Select(x => x.InventoryId).Distinct().ToList();

                foreach (int InventoryId in InventoriesIds)
                {
                    List<TLIdynamicAttLibValue> DynamicLibValueListInventories = DynamicLibValueListObjects.Where(x => x.InventoryId == InventoryId).ToList();

                    if (DynamicLibAttributeFilters.All(y => DynamicLibValueListInventories.Exists(x =>
                         (x.ValueBoolean != null) ?
                            (y.value.Any(z => x.ValueBoolean.ToString().ToLower().StartsWith(z.ToLower()))) :

                         (x.ValueDateTime != null ?
                            (y.value.Any(z => z.ToLower() == x.ValueDateTime.ToString().ToLower())) :

                         (x.ValueDouble != null ?
                            (y.value.Any(z => z.ToLower() == x.ValueDouble.ToString().ToLower())) :

                         (!string.IsNullOrEmpty(x.ValueString) ?
                            (y.value.Any(z => x.ValueString.ToLower().StartsWith(z.ToLower()))) : (false)))))))
                    {
                        DynamicLibValueListIds.Add(InventoryId);
                    }
                }
                return;
            }
            catch (Exception)
            {
                throw;
            }
        }
        public Response<AllCivilInstallationViewModel> GetCivilsBySiteCode(SiteFilter BaseFilter, CombineFilters CombineFilters, bool WithFilterData, ParameterPagination parameterPagination)
        {
            try
            {
                AllCivilInstallationViewModel MainOutPut = new AllCivilInstallationViewModel();
                int count = 0;

                MainOutPut.CivilWithLegs = GetCivilWithLegsWithEnableAtt(BaseFilter, WithFilterData, CombineFilters, parameterPagination).Data;
                MainOutPut.CivilWithoutLegMast = GetCivilWithoutLegWithEnableAtt(BaseFilter, WithFilterData, CombineFilters, parameterPagination, 1).Data;
                MainOutPut.CivilWithoutLegCapsule = GetCivilWithoutLegWithEnableAtt(BaseFilter, WithFilterData, CombineFilters, parameterPagination, 2).Data;
                MainOutPut.CivilWithoutLegMonopole = GetCivilWithoutLegWithEnableAtt(BaseFilter, WithFilterData, CombineFilters, parameterPagination, 3).Data;
                MainOutPut.CivilNonSteel = GetCivilNonSteelWithEnableAtt(BaseFilter, WithFilterData, CombineFilters, parameterPagination).Data;

                return new Response<AllCivilInstallationViewModel>(true, MainOutPut, null, null, (int)Helpers.Constants.ApiReturnCode.success, count);
            }
            catch (Exception err)
            {
                return new Response<AllCivilInstallationViewModel>(true, null, null, err.Message, (int)Helpers.Constants.ApiReturnCode.fail);
            }
        }
        public Response<List<ObjectInstAttForSideArm>> GetSideArmsBySiteCode(string SiteCode, int? CivilId, int? LegId, float? MinAzimuth, float? MaxAzimuth, float? MinHeightBase, float? MaxHeightBase)
        {
            try
            {
                List<ObjectInstAttForSideArm> objectInstAttForSideArms = new List<ObjectInstAttForSideArm>();
                ObjectInstAttForSideArm objectInst = new ObjectInstAttForSideArm();
                var civilload = db.TLIcivilLoads.Where(x => x.SiteCode == SiteCode && !x.Dismantle && x.sideArmId!=null).Include(x => x.allCivilInst).Include(x => x.allLoadInst).Include(x => x.sideArm).Include(x => x.civilSteelSupportCategory).AsQueryable();
                if (CivilId != null)
                {
                    civilload = civilload.Where(x => x.allCivilInstId == CivilId);
                }
                if (LegId != null)
                {
                    civilload = civilload.Where(x => x.legId == LegId || x.Leg2Id == LegId);
                }
                if (MinAzimuth != null && MaxAzimuth == null)
                {
                    civilload = civilload.Where(x=>x.sideArm.Azimuth>=MinAzimuth);
                }
                if (MaxAzimuth != null && MinAzimuth == null)
                {
                    civilload = civilload.Where(x => x.sideArm.Azimuth <= MaxAzimuth);
                }
                if (MinAzimuth != null && MaxAzimuth != null)
                {
                    civilload = civilload.Where(x => x.sideArm.Azimuth >= MinAzimuth && x.sideArm.Azimuth<=MaxAzimuth);
                }
                if (MinHeightBase != null && MaxHeightBase == null)
                {
                    civilload = civilload.Where(x => x.sideArm.HeightBase >= MinHeightBase);
                }
                if (MaxHeightBase != null && MinHeightBase == null)
                {
                    civilload = civilload.Where(x => x.sideArm.HeightBase <= MaxHeightBase);
                }
                if (MinHeightBase != null && MaxHeightBase != null)
                {
                    civilload = civilload.Where(x => x.sideArm.HeightBase <= MinHeightBase && x.sideArm.HeightBase>=MaxHeightBase);
                }
                var allciviload = _mapper.Map<List<CivilLoadsViewModel>>(civilload);
                    var query = allciviload.Select(x => new CivilLoadsViewModel()
                    {
                        Id = x.Id,
                        InstallationDate = x.InstallationDate,
                        ItemOnCivilStatus = x.ItemOnCivilStatus,
                        ItemStatus = x.ItemStatus,
                        Dismantle = x.Dismantle,
                        ReservedSpace = x.ReservedSpace,
                        sideArmId = x.sideArmId,
                        allCivilInstId = x.allCivilInstId,
                        allLoadInstId = x.allLoadInstId,
                        civilSteelSupportCategoryId = x.civilSteelSupportCategoryId,
                        SiteCode = x.SiteCode
                    }).ToList();
                    var Response = query.Select(x => x.sideArmId).Distinct().ToList();
                    foreach (var item in Response)
                    {
                        if (item != null)
                        {

                            var TableNameEntity = _unitOfWork.TablesNamesRepository.GetWhereFirst(c => c.TableName == "TLIsideArm");
                            TLIsideArm side = _unitOfWork.SideArmRepository
                            .GetIncludeWhereFirst(x => x.Id == item, x => x.owner, x => x.sideArmInstallationPlace, x => x.sideArmType, x => x.sideArmLibrary, x => x.ItemStatus, x => x.Ticket);
                            var sidearml = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == item);
                            SideArmLibraryViewModel sideArmLibrary = _mapper.Map<SideArmLibraryViewModel>(_unitOfWork.SideArmLibraryRepository
                                .GetWhereFirst(x => x.Id == sidearml.sideArmLibraryId));
                            List<BaseAttView> LibraryAttributes = _unitOfWork.AttributeActivatedRepository
                           .GetAttributeActivated(TablesNames.TLIsideArmLibrary.ToString(), sideArmLibrary, null).ToList();
                            foreach (BaseAttView LibraryAttribute in LibraryAttributes)
                            {
                                if (LibraryAttribute.DataType.ToLower() == "list")
                                {
                                    LibraryAttribute.Value = sideArmLibrary.GetType().GetProperties()
                                        .FirstOrDefault(x => x.Name.ToLower() == LibraryAttribute.Label.ToLower()).GetValue(sideArmLibrary);
                                }
                            }

                            List<BaseAttView> LibraryLogisticalAttributes = _mapper.Map<List<BaseAttView>>(_unitOfWork.LogistcalRepository
                                 .GetLogistical("SideArm", TablesNames.TLIsideArmLibrary.ToString(), sideArmLibrary.Id).ToList());

                            LibraryAttributes.AddRange(LibraryLogisticalAttributes);

                            List<BaseInstAttView> ListAttributesActivated = _unitOfWork.AttributeActivatedRepository
                           .GetInstAttributeActivated(TablesNames.TLIsideArm.ToString(), side, "TicketId", "Draft", "EquivalentSpace",
                            "HBA", "ItemStatusId", "ReservedSpace", "sideArmInstallationPlaceId", "sideArmTypeId").ToList();

                            BaseInstAttView NameAttribute = ListAttributesActivated.FirstOrDefault(x => x.Key.ToLower() == "Name".ToLower());
                            if (NameAttribute != null)
                            {
                                BaseInstAttView Swap = ListAttributesActivated[0];
                                ListAttributesActivated[ListAttributesActivated.IndexOf(NameAttribute)] = Swap;
                                ListAttributesActivated[0] = NameAttribute;
                            }

                            foreach (BaseInstAttView FKitem in ListAttributesActivated)
                            {
                                if (FKitem.Desc.ToLower() == "tliowner")
                                {
                                    if (side.owner == null)
                                        FKitem.Value = _unitOfWork.OwnerRepository.GetWhereFirst(x => x.Id == 0).OwnerName;

                                    else
                                        FKitem.Value = side.owner.OwnerName;
                                }
                                else if (FKitem.Desc.ToLower() == "tlisidearminstallationplace")
                                {
                                    if (side.sideArmInstallationPlace == null)
                                        FKitem.Value = _unitOfWork.SideArmInstallationPlaceRepository.GetWhereFirst(x => x.Id == 0).Name;

                                    else
                                        FKitem.Value = side.sideArmInstallationPlace.Name;
                                }
                                else if (FKitem.Desc.ToLower() == "tlisidearmtype")
                                {
                                    if (side.sideArmType == null)
                                        FKitem.Value = _unitOfWork.SideArmTypeRepository.GetWhereFirst(x => x.Id == 0).Name;

                                    else
                                        FKitem.Value = side.sideArmType.Name;
                                }
                                else if (FKitem.Desc.ToLower() == "tliitemstatus")
                                {
                                    if (side.ItemStatus == null)
                                        FKitem.Value = _unitOfWork.ItemStatusRepository.GetWhereFirst(x => x.Id == 0).Name;

                                    else
                                        FKitem.Value = side.ItemStatus.Name;
                                }
                                else if (FKitem.Desc.ToLower() == "tlisidearmlibrary")
                                {
                                    if (side.sideArmLibrary == null)
                                        FKitem.Value = _unitOfWork.SideArmLibraryRepository.GetWhereFirst(x => x.Id == 0).Model;

                                    else
                                        FKitem.Value = side.sideArmLibrary.Model;
                                }
                                else if (FKitem.Desc.ToLower() == "tliticket")
                                    FKitem.Value = _mapper.Map<List<ListTicketViewModel>>(_unitOfWork.TicketRepository.GetAllWithoutCount().ToList());
                            }
                            objectInstAttForSideArms.Add(new ObjectInstAttForSideArm()
                            {
                                AttributesActivated = ListAttributesActivated,
                                LibraryActivatedAttributes = LibraryAttributes,
                                DynamicAtts = _unitOfWork.DynamicAttInstValueRepository
                                .GetDynamicInstAtts(TableNameEntity.Id, (int)item, null)
                            });

                        }
                    }
                
                return new Response<List<ObjectInstAttForSideArm>>(true, objectInstAttForSideArms, null, null, (int)Helpers.Constants.ApiReturnCode.success, objectInstAttForSideArms.Count);
                
            }    
            catch (Exception err)
            {

                return new Response<List<ObjectInstAttForSideArm>>(true, null, null, err.Message, (int)Helpers.Constants.ApiReturnCode.fail);
            }
        }
        public Response<ReturnWithFilters<object>> GetLibraryforSpecificType(string TableNameLibrary, int CategoryId, CombineFilters CombineFilters, bool WithFilterData, ParameterPagination parameterPagination)
        {
            if (Helpers.Constants.CivilType.TLIcivilNonSteelLibrary.ToString() == TableNameLibrary)
            {
                try
                {
                    List<FilterObjectList> ObjectAttributeFilters = CombineFilters.filters;
                    List<DateFilterViewModel> DateFilter = CombineFilters.DateFilter;
                    int Count = 0;
                    List<object> OutPutList = new List<object>();
                    ReturnWithFilters<object> CivilTableDisplay = new ReturnWithFilters<object>();

                    List<StringFilterObjectList> AttributeFilters = new List<StringFilterObjectList>();

                    List<CivilNonSteelLibraryViewModel> CivilNonSteelLibraries = new List<CivilNonSteelLibraryViewModel>();
                    List<CivilNonSteelLibraryViewModel> WithoutDateFilterCivilNonSteelLibraries = new List<CivilNonSteelLibraryViewModel>();
                    List<CivilNonSteelLibraryViewModel> WithDateFilterCivilNonSteelLibraries = new List<CivilNonSteelLibraryViewModel>();

                    List<TLIattributeActivated> CivilNonSteelLibraryAttribute = new List<TLIattributeActivated>();
                    if ((DateFilter != null ? DateFilter.Count() > 0 : false) ||
                        (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0))
                    {
                        CivilNonSteelLibraryAttribute = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                            x.Enable && x.AttributeActivatedId != null &&
                            x.AttributeActivated.DataType.ToLower() != "datetime" &&
                            x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.CivilNonSteelLibrary.ToString() &&
                            x.EditableManagmentView.TLItablesNames1.TableName == Helpers.Constants.TablesNames.TLIcivilNonSteelLibrary.ToString(),
                                x => x.AttributeActivated, x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1)
                        .Select(x => x.AttributeActivated).ToList();
                    }

                    if (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0)
                    {
                        List<TLIattributeActivated> NotDateDateCivilNonSteelLibraryAttribute = CivilNonSteelLibraryAttribute.Where(x =>
                            x.DataType.ToLower() != "datetime").ToList();

                        foreach (FilterObjectList item in ObjectAttributeFilters)
                        {
                            List<string> value = item.value.Select(x => x.ToString().ToLower()).ToList();

                            TLIattributeActivated AttributeKey = NotDateDateCivilNonSteelLibraryAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());

                            string Key = "";

                            if (AttributeKey != null)
                                Key = AttributeKey.Key;

                            else
                                Key = item.key;

                            AttributeFilters.Add(new StringFilterObjectList
                            {
                                key = Key,
                                value = value
                            });
                        }
                    }
                    if (AttributeFilters != null && AttributeFilters.Count > 0)
                    {
                        //
                        // Library Dynamic Attributes...
                        //
                        List<TLIdynamicAtt> LibDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AttributeFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcivilNonSteelLibrary.ToString(), x => x.tablesNames, x => x.DataType).ToList();

                        List<int> DynamicLibValueListIds = new List<int>();
                        bool DynamicLibExist = false;

                        if (LibDynamicAttListIds.Count > 0)
                        {
                            DynamicLibExist = true;
                            GetInventoriesIdsFromDynamicAttributes(out DynamicLibValueListIds, LibDynamicAttListIds, AttributeFilters);
                        }

                        //
                        // Library Attribute Activated...
                        //
                        bool AttrLibExist = typeof(CivilNonSteelLibraryViewModel).GetProperties().ToList().Exists(x =>
                            AttributeFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower() && y.key.ToLower() != "id"));

                        List<int> LibraryAttributeActivatedIds = new List<int>();

                        if (AttrLibExist)
                        {
                            List<PropertyInfo> NonStringLibraryProps = typeof(CivilNonSteelLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() != "string" &&
                                AttributeFilters.Exists(y =>
                                    y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<PropertyInfo> StringLibraryProps = typeof(CivilNonSteelLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() == "string" &&
                                AttributeFilters.Exists(y =>
                                    y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<StringFilterObjectList> LibraryPropsAttributeFilters = AttributeFilters.Where(x =>
                                NonStringLibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower()) ||
                                StringLibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            LibraryAttributeActivatedIds = _unitOfWork.CivilNonSteelLibraryRepository.GetWhere(x =>
                                 LibraryPropsAttributeFilters.All(z =>
                                    NonStringLibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (y.GetValue(_mapper.Map<CivilNonSteelLibraryViewModel>(x), null) != null ? z.value.Contains(y.GetValue(_mapper.Map<CivilNonSteelLibraryViewModel>(x), null).ToString().ToLower()) : false)) ||
                                    StringLibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (z.value.Any(w =>
                                         y.GetValue(_mapper.Map<CivilNonSteelLibraryViewModel>(x), null) != null ? y.GetValue(_mapper.Map<CivilNonSteelLibraryViewModel>(x), null).ToString().ToLower().StartsWith(w.ToLower()) : false))))
                             ).Select(i => i.Id).ToList();
                        }

                        //
                        // Library (Attribute Activated + Dynamic) Attributes...
                        //
                        List<int> IntersectLibraryIds = new List<int>();
                        if (AttrLibExist && DynamicLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds.Intersect(DynamicLibValueListIds).ToList();
                        }
                        else if (AttrLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds;
                        }
                        else if (DynamicLibExist)
                        {
                            IntersectLibraryIds = DynamicLibValueListIds;
                        }

                        WithoutDateFilterCivilNonSteelLibraries = _mapper.Map<List<CivilNonSteelLibraryViewModel>>(_unitOfWork.CivilNonSteelLibraryRepository.GetIncludeWhere(x =>
                            x.Id > 0 && IntersectLibraryIds.Contains(x.Id) && !x.Deleted, x => x.civilNonSteelType).ToList());
                    }

                    //
                    // DateTime Objects Filters..
                    //
                    List<DateFilterViewModel> AfterConvertDateFilters = new List<DateFilterViewModel>();
                    if (DateFilter != null ? DateFilter.Count() > 0 : false)
                    {
                        List<TLIattributeActivated> DateCivilNonSteelLibraryAttribute = CivilNonSteelLibraryAttribute.Where(x =>
                            x.DataType.ToLower() == "datetime").ToList();

                        foreach (DateFilterViewModel item in DateFilter)
                        {
                            DateTime DateFrom = Convert.ToDateTime(item.DateFrom);
                            DateTime DateTo = Convert.ToDateTime(item.DateTo);

                            if (DateFrom > DateTo)
                            {
                                DateTime Replacer = DateFrom;
                                DateFrom = DateTo;
                                DateTo = Replacer;
                            }

                            TLIattributeActivated AttributeKey = DateCivilNonSteelLibraryAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());
                            string Key = "";

                            if (AttributeKey != null)
                                Key = AttributeKey.Key;
                            else
                                Key = item.key;

                            AfterConvertDateFilters.Add(new DateFilterViewModel
                            {
                                key = Key,
                                DateFrom = DateFrom,
                                DateTo = DateTo
                            });
                        }
                    }
                    if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                    {
                        //
                        // Library Dynamic Attributes...
                        //
                        List<TLIdynamicAtt> DateTimeLibDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AfterConvertDateFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcivilNonSteelLibrary.ToString(), x => x.tablesNames).ToList();

                        List<int> DynamicLibValueListIds = new List<int>();
                        bool DynamicLibExist = false;

                        if (DateTimeLibDynamicAttListIds.Count > 0)
                        {
                            DynamicLibExist = true;
                            List<DateFilterViewModel> DynamicLibAttributeFilters = AfterConvertDateFilters.Where(x =>
                                DateTimeLibDynamicAttListIds.Exists(y => y.Key.ToLower() == x.key.ToLower())).ToList();

                            DynamicLibValueListIds = new List<int>();

                            List<TLIdynamicAttLibValue> DynamicLibValueListObjects = _unitOfWork.DynamicAttLibRepository.GetIncludeWhere(x =>
                                DateTimeLibDynamicAttListIds.Exists(y => y.Id == x.DynamicAttId) && !x.disable).ToList();

                            List<int> InventoriesIds = DynamicLibValueListObjects.Select(x => x.InventoryId).Distinct().ToList();

                            foreach (int InventoryId in InventoriesIds)
                            {
                                List<TLIdynamicAttLibValue> DynamicLibValueListInventories = DynamicLibValueListObjects.Where(x =>
                                    x.InventoryId == InventoryId).ToList();

                                if (DynamicLibAttributeFilters.All(y => DynamicLibValueListInventories.Exists(x =>
                                     (x.ValueDateTime != null ?
                                        (x.ValueDateTime >= y.DateFrom && x.ValueDateTime <= y.DateTo) : (false)))))
                                {
                                    DynamicLibValueListIds.Add(InventoryId);
                                }
                            }
                        }

                        //
                        // Library Attribute Activated...
                        //
                        List<PropertyInfo> LibraryProps = typeof(CivilNonSteelLibraryViewModel).GetProperties().Where(x =>
                            AfterConvertDateFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower())).ToList();

                        List<int> LibraryAttributeActivatedIds = new List<int>();
                        bool AttrLibExist = false;

                        if (LibraryProps != null)
                        {
                            AttrLibExist = true;

                            List<DateFilterViewModel> LibraryPropsAttributeFilters = AfterConvertDateFilters.Where(x =>
                                LibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            LibraryAttributeActivatedIds = _unitOfWork.CivilNonSteelLibraryRepository.GetIncludeWhere(x =>
                                LibraryPropsAttributeFilters.All(z =>
                                    (LibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && ((y.GetValue(_mapper.Map<CivilNonSteelLibraryViewModel>(x), null) != null) ?
                                        ((z.DateFrom >= Convert.ToDateTime(y.GetValue(_mapper.Map<CivilNonSteelLibraryViewModel>(x), null))) &&
                                         (z.DateTo <= Convert.ToDateTime(y.GetValue(_mapper.Map<CivilNonSteelLibraryViewModel>(x), null)))) : (false)))))
                            ).Select(i => i.Id).ToList();
                        }

                        //
                        // Library (Attribute Activated + Dynamic) Attributes...
                        //
                        List<int> IntersectLibraryIds = new List<int>();
                        if (AttrLibExist && DynamicLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds.Intersect(DynamicLibValueListIds).ToList();
                        }
                        else if (AttrLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds;
                        }
                        else if (DynamicLibExist)
                        {
                            IntersectLibraryIds = DynamicLibValueListIds;
                        }

                        WithDateFilterCivilNonSteelLibraries = _mapper.Map<List<CivilNonSteelLibraryViewModel>>(_unitOfWork.CivilNonSteelLibraryRepository.GetIncludeWhere(x =>
                            x.Id > 0 && IntersectLibraryIds.Contains(x.Id) && !x.Deleted, x => x.civilNonSteelType).ToList());
                    }

                    //
                    // Intersect Between WithoutDateFilterCivilNonSteelLibraries + WithDateFilterCivilNonSteelLibraries To Get The Records That Meet The Filters (DateFilters + AttributeFilters)
                    //
                    if ((AttributeFilters != null ? AttributeFilters.Count() == 0 : true) &&
                        (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() == 0 : true))
                    {
                        CivilNonSteelLibraries = _mapper.Map<List<CivilNonSteelLibraryViewModel>>(_unitOfWork.CivilNonSteelLibraryRepository.GetIncludeWhere(x =>
                            x.Id > 0 && !x.Deleted, x => x.civilNonSteelType).ToList());
                    }
                    else if ((AttributeFilters != null ? AttributeFilters.Count > 0 : false) &&
                            (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false))
                    {
                        List<int> CivilIds = WithoutDateFilterCivilNonSteelLibraries.Select(x => x.Id).Intersect(WithDateFilterCivilNonSteelLibraries.Select(x => x.Id)).ToList();
                        CivilNonSteelLibraries = _mapper.Map<List<CivilNonSteelLibraryViewModel>>(_unitOfWork.CivilNonSteelLibraryRepository.GetWhere(x =>
                            CivilIds.Contains(x.Id)).ToList());
                    }
                    else if (AttributeFilters != null ? AttributeFilters.Count > 0 : false)
                    {
                        CivilNonSteelLibraries = WithoutDateFilterCivilNonSteelLibraries;
                    }
                    else if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                    {
                        CivilNonSteelLibraries = WithDateFilterCivilNonSteelLibraries;
                    }

                    Count = CivilNonSteelLibraries.Count();

                    CivilNonSteelLibraries = CivilNonSteelLibraries.Skip((parameterPagination.PageNumber - 1) * parameterPagination.PageSize).
                        Take(parameterPagination.PageSize).ToList();

                    List<TLIattributeViewManagment> AllAttributes = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                       (x.Enable && x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.CivilNonSteelLibrary.ToString() &&
                       (x.AttributeActivatedId != null ?
                            (x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIcivilNonSteelLibrary.ToString() && x.AttributeActivated.enable) :
                            (x.DynamicAtt.LibraryAtt && !x.DynamicAtt.disable && x.DynamicAtt.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcivilNonSteelLibrary.ToString()))) ||
                        (x.AttributeActivated != null ?
                            ((x.AttributeActivated.Key.ToLower() == "id" || x.AttributeActivated.Key.ToLower() == "active") && x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIcivilNonSteelLibrary.ToString()) : false),
                           x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1, x => x.EditableManagmentView.TLItablesNames2,
                           x => x.AttributeActivated, x => x.DynamicAtt, x => x.DynamicAtt.tablesNames, x => x.DynamicAtt.DataType).ToList();

                    List<TLIattributeViewManagment> NotDateTimeLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() != "datetime") : false).ToList();

                    List<TLIattributeViewManagment> NotDateTimeDynamicLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() != "datetime" : false).ToList();

                    List<TLIattributeViewManagment> DateTimeLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() == "datetime") : false).ToList();

                    List<TLIattributeViewManagment> DateTimeDynamicLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() == "datetime" : false).ToList();

                    foreach (CivilNonSteelLibraryViewModel CivilNonSteelLibraryViewModel in CivilNonSteelLibraries)
                    {
                        dynamic DynamicCivilNonSteelLibrary = new ExpandoObject();

                        //
                        // Library Object ViewModel... (Not DateTime DataType Attribute)
                        //
                        if (NotDateTimeLibraryAttributesViewModel != null ? NotDateTimeLibraryAttributesViewModel.Count > 0 : false)
                        {
                            List<PropertyInfo> LibraryProps = typeof(CivilNonSteelLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() != "datetime" :
                                    (x.PropertyType.Name.ToLower() != "datetime")) :
                                (x.PropertyType.Name.ToLower() != "datetime")).ToList();

                            foreach (PropertyInfo prop in LibraryProps)
                            {
                                if (prop.Name.ToLower().Contains("_name") &&
                                    NotDateTimeLibraryAttributesViewModel.Exists(x =>
                                        x.AttributeActivated.Label.ToLower() == prop.Name.ToLower()))
                                {
                                    object ForeignKeyNamePropObject = prop.GetValue(CivilNonSteelLibraryViewModel, null);
                                    ((IDictionary<String, Object>)DynamicCivilNonSteelLibrary).Add(new KeyValuePair<string, object>(prop.Name, ForeignKeyNamePropObject));
                                }
                                else if (NotDateTimeLibraryAttributesViewModel.Exists(x =>
                                     x.AttributeActivated.Key.ToLower() == prop.Name.ToLower()) &&
                                    !prop.Name.ToLower().Contains("_name") &&
                                    (prop.Name.ToLower().Substring(Math.Max(0, prop.Name.Length - 2)) != "id" || prop.Name.ToLower() == "id"))
                                {
                                    if (prop.Name.ToLower() != "id" && prop.Name.ToLower() != "active")
                                    {
                                        TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                            x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIcivilNonSteelLibrary.ToString() &&
                                            x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                        if (LabelName != null)
                                        {
                                            object PropObject = prop.GetValue(CivilNonSteelLibraryViewModel, null);
                                            ((IDictionary<String, Object>)DynamicCivilNonSteelLibrary).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                        }
                                    }
                                    else
                                    {
                                        object PropObject = prop.GetValue(CivilNonSteelLibraryViewModel, null);
                                        ((IDictionary<String, Object>)DynamicCivilNonSteelLibrary).Add(new KeyValuePair<string, object>(prop.Name, PropObject));
                                    }
                                }
                            }
                        }

                        //
                        // Library Dynamic Attributes... (Not DateTime DataType Attribute)
                        // 
                        List<TLIdynamicAtt> NotDateTimeLibraryDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                           !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcivilNonSteelLibrary.ToString() &&
                            x.LibraryAtt && x.DataType.Name.ToLower() != "datetime" &&
                            NotDateTimeDynamicLibraryAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames, x => x.DataType).ToList();

                        foreach (var LibraryDynamicAtt in NotDateTimeLibraryDynamicAttributes)
                        {
                            TLIdynamicAttLibValue DynamicAttLibValue = _unitOfWork.DynamicAttLibRepository.GetIncludeWhereFirst(x =>
                                x.DynamicAttId == LibraryDynamicAtt.Id &&
                                x.InventoryId == CivilNonSteelLibraryViewModel.Id && !x.disable &&
                                x.DynamicAtt.LibraryAtt &&
                                x.DynamicAtt.Key == LibraryDynamicAtt.Key,
                                    x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType);

                            if (DynamicAttLibValue != null)
                            {
                                dynamic DynamicAttValue = new ExpandoObject();

                                if (DynamicAttLibValue.ValueString != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueString;

                                else if (DynamicAttLibValue.ValueDouble != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDouble;

                                else if (DynamicAttLibValue.ValueDateTime != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDateTime;

                                else if (DynamicAttLibValue.ValueBoolean != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueBoolean;

                                ((IDictionary<String, Object>)DynamicCivilNonSteelLibrary).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, DynamicAttValue));
                            }
                            else
                            {
                                ((IDictionary<String, Object>)DynamicCivilNonSteelLibrary).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, null));
                            }
                        }

                        //
                        // Library Object ViewModel... (DateTime DataType Attribute)
                        //
                        dynamic DateTimeAttributes = new ExpandoObject();
                        if (DateTimeLibraryAttributesViewModel != null ? DateTimeLibraryAttributesViewModel.Count() > 0 : false)
                        {
                            List<PropertyInfo> DateTimeLibraryProps = typeof(CivilNonSteelLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name == "datetime" :
                                    (x.PropertyType.Name.ToLower() == "datetime")) :
                                (x.PropertyType.Name.ToLower() == "datetime")).ToList();

                            foreach (PropertyInfo prop in DateTimeLibraryProps)
                            {
                                TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                    x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIcivilNonSteelLibrary.ToString() &&
                                    x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                if (LabelName != null)
                                {
                                    object PropObject = prop.GetValue(CivilNonSteelLibraryViewModel, null);
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                }
                            }
                        }

                        //
                        // Library Dynamic Attributes... (DateTime DataType Attribute)
                        // 
                        List<TLIdynamicAtt> LibraryDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                           !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcivilNonSteelLibrary.ToString() &&
                            x.LibraryAtt && x.DataType.Name.ToLower() == "datetime" &&
                            DateTimeDynamicLibraryAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames).ToList();

                        foreach (TLIdynamicAtt LibraryDynamicAtt in LibraryDynamicAttributes)
                        {
                            TLIdynamicAttLibValue DynamicAttLibValue = _unitOfWork.DynamicAttLibRepository.GetIncludeWhereFirst(x =>
                                x.DynamicAttId == LibraryDynamicAtt.Id &&
                                x.InventoryId == CivilNonSteelLibraryViewModel.Id && !x.disable &&
                                x.DynamicAtt.LibraryAtt &&
                                x.DynamicAtt.Key == LibraryDynamicAtt.Key,
                                    x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType);

                            if (DynamicAttLibValue != null)
                            {
                                dynamic DynamicAttValue = new ExpandoObject();
                                if (DynamicAttLibValue.ValueDateTime != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDateTime;

                                ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, DynamicAttValue));
                            }
                            else
                            {
                                ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, null));
                            }
                        }

                        ((IDictionary<String, Object>)DynamicCivilNonSteelLibrary).Add(new KeyValuePair<string, object>("DateTimeAttributes", DateTimeAttributes));

                        OutPutList.Add(DynamicCivilNonSteelLibrary);
                    }

                    CivilTableDisplay.Model = OutPutList;

                    if (WithFilterData)
                    {
                        CivilTableDisplay.filters = _unitOfWork.CivilNonSteelLibraryRepository.GetRelatedTables();
                    }
                    else
                    {
                        CivilTableDisplay.filters = null;
                    }

                    return new Response<ReturnWithFilters<object>>(true, CivilTableDisplay, null, null, (int)Helpers.Constants.ApiReturnCode.success, Count);
                }
                catch (Exception err)
                {
                    return new Response<ReturnWithFilters<object>>(false, null, null, err.Message, (int)Helpers.Constants.ApiReturnCode.fail);
                }

            }
            else if (Helpers.Constants.CivilType.TLIcivilWithLegLibrary.ToString() == TableNameLibrary)
            {
                try
                {
                    List<FilterObjectList> ObjectAttributeFilters = CombineFilters.filters;
                    List<DateFilterViewModel> DateFilter = CombineFilters.DateFilter;
                    int Count = 0;
                    List<object> OutPutList = new List<object>();
                    ReturnWithFilters<object> CivilTableDisplay = new ReturnWithFilters<object>();

                    List<StringFilterObjectList> AttributeFilters = new List<StringFilterObjectList>();

                    List<CivilWithLegLibraryViewModel> CivilWithLegsLibraries = new List<CivilWithLegLibraryViewModel>();
                    List<CivilWithLegLibraryViewModel> WithoutDateFilterCivilWithLegsLibraries = new List<CivilWithLegLibraryViewModel>();
                    List<CivilWithLegLibraryViewModel> WithDateFilterCivilWithLegsLibraries = new List<CivilWithLegLibraryViewModel>();

                    List<TLIattributeActivated> CivilWithLegLibraryAttribute = new List<TLIattributeActivated>();
                    if ((DateFilter != null ? DateFilter.Count() > 0 : false) ||
                        (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0))
                    {
                        CivilWithLegLibraryAttribute = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                            x.Enable && x.AttributeActivatedId != null &&
                            x.AttributeActivated.DataType.ToLower() != "datetime" &&
                            x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.CivilWithLegsLibrary.ToString() &&
                            x.EditableManagmentView.TLItablesNames1.TableName == Helpers.Constants.TablesNames.TLIcivilWithLegLibrary.ToString(),
                                x => x.AttributeActivated, x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1)
                        .Select(x => x.AttributeActivated).ToList();
                    }

                    if (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0)
                    {
                        List<TLIattributeActivated> NotDateDateCivilWithLegLibraryAttribute = CivilWithLegLibraryAttribute.Where(x =>
                            x.DataType.ToLower() != "datetime").ToList();

                        foreach (FilterObjectList item in ObjectAttributeFilters)
                        {
                            List<string> value = item.value.Select(x => x.ToString().ToLower()).ToList();

                            TLIattributeActivated AttributeKey = NotDateDateCivilWithLegLibraryAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());

                            string Key = "";

                            if (AttributeKey != null)
                                Key = AttributeKey.Key;

                            else
                                Key = item.key;

                            AttributeFilters.Add(new StringFilterObjectList
                            {
                                key = Key,
                                value = value
                            });
                        }
                    }
                    if (AttributeFilters != null && AttributeFilters.Count > 0)
                    {
                        //
                        // Library Dynamic Attributes...
                        //
                        List<TLIdynamicAtt> LibDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AttributeFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcivilWithLegLibrary.ToString()
                                , x => x.tablesNames, x => x.DataType).ToList();

                        List<int> DynamicLibValueListIds = new List<int>();
                        bool DynamicLibExist = false;

                        if (LibDynamicAttListIds.Count > 0)
                        {
                            DynamicLibExist = true;
                            GetInventoriesIdsFromDynamicAttributes(out DynamicLibValueListIds, LibDynamicAttListIds, AttributeFilters);
                        }

                        //
                        // Library Attribute Activated...
                        //
                        bool AttrLibExist = typeof(CivilWithLegLibraryViewModel).GetProperties().ToList().Exists(x =>
                            AttributeFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower() && y.key.ToLower() != "id"));

                        List<int> LibraryAttributeActivatedIds = new List<int>();

                        if (AttrLibExist)
                        {
                            List<PropertyInfo> NonStringLibraryProps = typeof(CivilWithLegLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() != "string" &&
                                AttributeFilters.Exists(y =>
                                    y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<PropertyInfo> StringLibraryProps = typeof(CivilWithLegLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() == "string" &&
                                AttributeFilters.Exists(y =>
                                    y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<StringFilterObjectList> LibraryPropsAttributeFilters = AttributeFilters.Where(x =>
                                NonStringLibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower()) ||
                                StringLibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            LibraryAttributeActivatedIds = _unitOfWork.CivilWithLegLibraryRepository.GetWhere(x =>
                                 LibraryPropsAttributeFilters.All(z =>
                                    NonStringLibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (y.GetValue(_mapper.Map<CivilWithLegLibraryViewModel>(x), null) != null ? z.value.Contains(y.GetValue(_mapper.Map<CivilWithLegLibraryViewModel>(x), null).ToString().ToLower()) : false)) ||
                                    StringLibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (z.value.Any(w =>
                                         y.GetValue(_mapper.Map<CivilWithLegLibraryViewModel>(x), null) != null ? y.GetValue(_mapper.Map<CivilWithLegLibraryViewModel>(x), null).ToString().ToLower().StartsWith(w.ToLower()) : false))))
                             ).Select(i => i.Id).ToList();
                        }

                        //
                        // Library (Attribute Activated + Dynamic) Attributes...
                        //
                        List<int> IntersectLibraryIds = new List<int>();
                        if (AttrLibExist && DynamicLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds.Intersect(DynamicLibValueListIds).ToList();
                        }
                        else if (AttrLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds;
                        }
                        else if (DynamicLibExist)
                        {
                            IntersectLibraryIds = DynamicLibValueListIds;
                        }

                        WithoutDateFilterCivilWithLegsLibraries = _mapper.Map<List<CivilWithLegLibraryViewModel>>(_unitOfWork.CivilWithLegLibraryRepository.GetIncludeWhere(x =>
                            x.Id > 0 && IntersectLibraryIds.Contains(x.Id) && !x.Deleted, x => x.supportTypeDesigned, x => x.sectionsLegType,
                            x => x.structureType, x => x.civilSteelSupportCategory).ToList());
                    }

                    //
                    // DateTime Objects Filters..
                    //
                    List<DateFilterViewModel> AfterConvertDateFilters = new List<DateFilterViewModel>();
                    if (DateFilter != null ? DateFilter.Count() > 0 : false)
                    {
                        List<TLIattributeActivated> DateCivilWithLegLibraryAttribute = CivilWithLegLibraryAttribute.Where(x =>
                            x.DataType.ToLower() == "datetime").ToList();

                        foreach (DateFilterViewModel item in DateFilter)
                        {
                            DateTime DateFrom = Convert.ToDateTime(item.DateFrom);
                            DateTime DateTo = Convert.ToDateTime(item.DateTo);

                            if (DateFrom > DateTo)
                            {
                                DateTime Replacer = DateFrom;
                                DateFrom = DateTo;
                                DateTo = Replacer;
                            }

                            TLIattributeActivated AttributeKey = DateCivilWithLegLibraryAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());
                            string Key = "";

                            if (AttributeKey != null)
                                Key = AttributeKey.Key;
                            else
                                Key = item.key;

                            AfterConvertDateFilters.Add(new DateFilterViewModel
                            {
                                key = Key,
                                DateFrom = DateFrom,
                                DateTo = DateTo
                            });
                        }
                    }
                    if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                    {
                        //
                        // Library Dynamic Attributes...
                        //
                        List<TLIdynamicAtt> DateTimeLibDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AfterConvertDateFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcivilWithLegLibrary.ToString(), x => x.tablesNames, x => x.DataType).ToList();

                        List<int> DynamicLibValueListIds = new List<int>();
                        bool DynamicLibExist = false;

                        if (DateTimeLibDynamicAttListIds.Count > 0)
                        {
                            DynamicLibExist = true;
                            List<DateFilterViewModel> DynamicLibAttributeFilters = AfterConvertDateFilters.Where(x =>
                                DateTimeLibDynamicAttListIds.Exists(y => y.Key.ToLower() == x.key.ToLower())).ToList();

                            DynamicLibValueListIds = new List<int>();

                            List<TLIdynamicAttLibValue> DynamicLibValueListObjects = _unitOfWork.DynamicAttLibRepository.GetIncludeWhere(x =>
                                DateTimeLibDynamicAttListIds.Exists(y => y.Id == x.DynamicAttId) && !x.disable).ToList();

                            List<int> InventoriesIds = DynamicLibValueListObjects.Select(x => x.InventoryId).Distinct().ToList();

                            foreach (int InventoryId in InventoriesIds)
                            {
                                List<TLIdynamicAttLibValue> DynamicLibValueListInventories = DynamicLibValueListObjects.Where(x =>
                                    x.InventoryId == InventoryId).ToList();

                                if (DynamicLibAttributeFilters.All(y => DynamicLibValueListInventories.Exists(x =>
                                     (x.ValueDateTime != null ?
                                        (x.ValueDateTime >= y.DateFrom && x.ValueDateTime <= y.DateTo) : (false)))))
                                {
                                    DynamicLibValueListIds.Add(InventoryId);
                                }
                            }
                        }

                        //
                        // Library Attribute Activated...
                        //
                        List<PropertyInfo> LibraryProps = typeof(CivilWithLegLibraryViewModel).GetProperties().Where(x =>
                            AfterConvertDateFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower())).ToList();

                        List<int> LibraryAttributeActivatedIds = new List<int>();
                        bool AttrLibExist = false;

                        if (LibraryProps != null)
                        {
                            AttrLibExist = true;

                            List<DateFilterViewModel> LibraryPropsAttributeFilters = AfterConvertDateFilters.Where(x =>
                                LibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            LibraryAttributeActivatedIds = _unitOfWork.CivilWithLegLibraryRepository.GetIncludeWhere(x =>
                                LibraryPropsAttributeFilters.All(z =>
                                    (LibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && ((y.GetValue(_mapper.Map<CivilWithLegLibraryViewModel>(x), null) != null) ?
                                        ((z.DateFrom >= Convert.ToDateTime(y.GetValue(_mapper.Map<CivilWithLegLibraryViewModel>(x), null))) &&
                                         (z.DateTo <= Convert.ToDateTime(y.GetValue(_mapper.Map<CivilWithLegLibraryViewModel>(x), null)))) : (false)))))
                            ).Select(i => i.Id).ToList();
                        }

                        //
                        // Library (Attribute Activated + Dynamic) Attributes...
                        //
                        List<int> IntersectLibraryIds = new List<int>();
                        if (AttrLibExist && DynamicLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds.Intersect(DynamicLibValueListIds).ToList();
                        }
                        else if (AttrLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds;
                        }
                        else if (DynamicLibExist)
                        {
                            IntersectLibraryIds = DynamicLibValueListIds;
                        }

                        WithDateFilterCivilWithLegsLibraries = _mapper.Map<List<CivilWithLegLibraryViewModel>>(_unitOfWork.CivilWithLegLibraryRepository.GetIncludeWhere(x =>
                            x.Id > 0 && IntersectLibraryIds.Contains(x.Id) && !x.Deleted, x => x.supportTypeDesigned, x => x.sectionsLegType,
                            x => x.structureType, x => x.civilSteelSupportCategory).ToList());
                    }

                    //
                    // Intersect Between WithoutDateFilterCivilWithLegsLibraries + WithDateFilterCivilWithLegsLibraries To Get The Records That Meet The Filters (DateFilters + AttributeFilters)
                    //
                    if ((AttributeFilters != null ? AttributeFilters.Count() == 0 : true) &&
                        (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() == 0 : true))
                    {
                        CivilWithLegsLibraries = _mapper.Map<List<CivilWithLegLibraryViewModel>>(_unitOfWork.CivilWithLegLibraryRepository.GetIncludeWhere(x =>
                            x.Id > 0 && !x.Deleted, x => x.supportTypeDesigned, x => x.sectionsLegType, x => x.structureType, x => x.civilSteelSupportCategory).ToList());
                    }
                    else if ((AttributeFilters != null ? AttributeFilters.Count > 0 : false) &&
                            (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false))
                    {
                        List<int> CivilIds = WithoutDateFilterCivilWithLegsLibraries.Select(x => x.Id).Intersect(WithDateFilterCivilWithLegsLibraries.Select(x => x.Id)).ToList();
                        CivilWithLegsLibraries = _mapper.Map<List<CivilWithLegLibraryViewModel>>(_unitOfWork.CivilWithLegLibraryRepository.GetWhere(x =>
                            CivilIds.Contains(x.Id)).ToList());
                    }
                    else if (AttributeFilters != null ? AttributeFilters.Count > 0 : false)
                    {
                        CivilWithLegsLibraries = WithoutDateFilterCivilWithLegsLibraries;
                    }
                    else if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                    {
                        CivilWithLegsLibraries = WithDateFilterCivilWithLegsLibraries;
                    }

                    Count = CivilWithLegsLibraries.Count();

                    CivilWithLegsLibraries = CivilWithLegsLibraries.Skip((parameterPagination.PageNumber - 1) * parameterPagination.PageSize).
                        Take(parameterPagination.PageSize).ToList();

                    List<TLIattributeViewManagment> AllAttributes = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                       (x.Enable && x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.CivilWithLegsLibrary.ToString() &&
                       (x.AttributeActivatedId != null ?
                            (x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIcivilWithLegLibrary.ToString() && x.AttributeActivated.enable) :
                            (x.DynamicAtt.LibraryAtt && !x.DynamicAtt.disable && x.DynamicAtt.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcivilWithLegLibrary.ToString()))) ||
                        (x.AttributeActivated != null ?
                            ((x.AttributeActivated.Key.ToLower() == "id" || x.AttributeActivated.Key.ToLower() == "active") && x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIcivilWithLegLibrary.ToString()) : false),
                           x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1, x => x.EditableManagmentView.TLItablesNames2,
                           x => x.AttributeActivated, x => x.DynamicAtt, x => x.DynamicAtt.tablesNames, x => x.DynamicAtt.DataType).ToList();

                    List<TLIattributeViewManagment> NotDateTimeLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() != "datetime") : false).ToList();

                    List<TLIattributeViewManagment> NotDateTimeDynamicLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() != "datetime" : false).ToList();

                    List<TLIattributeViewManagment> DateTimeLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() == "datetime") : false).ToList();

                    List<TLIattributeViewManagment> DateTimeDynamicLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() == "datetime" : false).ToList();

                    foreach (CivilWithLegLibraryViewModel CivilWithLegsLibraryViewModel in CivilWithLegsLibraries)
                    {
                        dynamic DynamicCivilWithLegLibrary = new ExpandoObject();

                        //
                        // Library Object ViewModel... (Not DateTime DataType Attribute)
                        //
                        if (NotDateTimeLibraryAttributesViewModel != null ? NotDateTimeLibraryAttributesViewModel.Count > 0 : false)
                        {
                            List<PropertyInfo> LibraryProps = typeof(CivilWithLegLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() != "datetime" :
                                    (x.PropertyType.Name.ToLower() != "datetime")) :
                                (x.PropertyType.Name.ToLower() != "datetime")).ToList();

                            foreach (PropertyInfo prop in LibraryProps)
                            {
                                if (prop.Name.ToLower().Contains("_name") &&
                                    NotDateTimeLibraryAttributesViewModel.Exists(x =>
                                        x.AttributeActivated.Label.ToLower() == prop.Name.ToLower()))
                                {
                                    object ForeignKeyNamePropObject = prop.GetValue(CivilWithLegsLibraryViewModel, null);
                                    ((IDictionary<String, Object>)DynamicCivilWithLegLibrary).Add(new KeyValuePair<string, object>(prop.Name, ForeignKeyNamePropObject));
                                }
                                else if (NotDateTimeLibraryAttributesViewModel.Exists(x =>
                                     x.AttributeActivated.Key.ToLower() == prop.Name.ToLower()) &&
                                    !prop.Name.ToLower().Contains("_name") &&
                                    (prop.Name.ToLower().Substring(Math.Max(0, prop.Name.Length - 2)) != "id" || prop.Name.ToLower() == "id"))
                                {
                                    if (prop.Name.ToLower() != "id" && prop.Name.ToLower() != "active")
                                    {
                                        TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                            x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIcivilWithLegLibrary.ToString() &&
                                            x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                        if (LabelName != null)
                                        {
                                            object PropObject = prop.GetValue(CivilWithLegsLibraryViewModel, null);
                                            ((IDictionary<String, Object>)DynamicCivilWithLegLibrary).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                        }
                                    }
                                    else
                                    {
                                        object PropObject = prop.GetValue(CivilWithLegsLibraryViewModel, null);
                                        ((IDictionary<String, Object>)DynamicCivilWithLegLibrary).Add(new KeyValuePair<string, object>(prop.Name, PropObject));
                                    }
                                }
                            }
                        }

                        //
                        // Library Dynamic Attributes... (Not DateTime DataType Attribute)
                        // 
                        List<TLIdynamicAtt> NotDateTimeLibraryDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                           !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcivilWithLegLibrary.ToString() &&
                            x.LibraryAtt && x.DataType.Name.ToLower() != "datetime" &&
                            NotDateTimeDynamicLibraryAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames, x => x.DataType).ToList();

                        foreach (var LibraryDynamicAtt in NotDateTimeLibraryDynamicAttributes)
                        {
                            TLIdynamicAttLibValue DynamicAttLibValue = _unitOfWork.DynamicAttLibRepository.GetIncludeWhereFirst(x =>
                                x.DynamicAttId == LibraryDynamicAtt.Id &&
                                x.InventoryId == CivilWithLegsLibraryViewModel.Id && !x.disable &&
                                x.DynamicAtt.LibraryAtt &&
                                x.DynamicAtt.Key == LibraryDynamicAtt.Key,
                                    x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType);

                            if (DynamicAttLibValue != null)
                            {
                                dynamic DynamicAttValue = new ExpandoObject();

                                if (DynamicAttLibValue.ValueString != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueString;

                                else if (DynamicAttLibValue.ValueDouble != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDouble;

                                else if (DynamicAttLibValue.ValueDateTime != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDateTime;

                                else if (DynamicAttLibValue.ValueBoolean != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueBoolean;

                                ((IDictionary<String, Object>)DynamicCivilWithLegLibrary).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, DynamicAttValue));
                            }
                            else
                            {
                                ((IDictionary<String, Object>)DynamicCivilWithLegLibrary).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, null));
                            }
                        }

                        //
                        // Library Object ViewModel... (DateTime DataType Attribute)
                        //
                        dynamic DateTimeAttributes = new ExpandoObject();
                        if (DateTimeLibraryAttributesViewModel != null ? DateTimeLibraryAttributesViewModel.Count() > 0 : false)
                        {
                            List<PropertyInfo> DateTimeLibraryProps = typeof(CivilWithLegLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() == "datetime" :
                                    (x.PropertyType.Name.ToLower() == "datetime")) :
                                (x.PropertyType.Name.ToLower() == "datetime")).ToList();

                            foreach (PropertyInfo prop in DateTimeLibraryProps)
                            {
                                TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                    x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIcivilWithLegLibrary.ToString() &&
                                    x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                if (LabelName != null)
                                {
                                    object PropObject = prop.GetValue(CivilWithLegsLibraryViewModel, null);
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                }
                            }
                        }

                        //
                        // Library Dynamic Attributes... (DateTime DataType Attribute)
                        // 
                        List<TLIdynamicAtt> LibraryDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                           !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcivilWithLegLibrary.ToString() &&
                            x.LibraryAtt && x.DataType.Name.ToLower() == "datetime" &&
                            DateTimeDynamicLibraryAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames).ToList();

                        foreach (TLIdynamicAtt LibraryDynamicAtt in LibraryDynamicAttributes)
                        {
                            TLIdynamicAttLibValue DynamicAttLibValue = _unitOfWork.DynamicAttLibRepository.GetIncludeWhereFirst(x =>
                                x.DynamicAttId == LibraryDynamicAtt.Id &&
                                x.InventoryId == CivilWithLegsLibraryViewModel.Id && !x.disable &&
                                x.DynamicAtt.LibraryAtt &&
                                x.DynamicAtt.Key == LibraryDynamicAtt.Key,
                                    x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType);

                            if (DynamicAttLibValue != null)
                            {
                                dynamic DynamicAttValue = new ExpandoObject();
                                if (DynamicAttLibValue.ValueDateTime != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDateTime;

                                ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, DynamicAttValue));
                            }
                            else
                            {
                                ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, null));
                            }
                        }

                        ((IDictionary<String, Object>)DynamicCivilWithLegLibrary).Add(new KeyValuePair<string, object>("DateTimeAttributes", DateTimeAttributes));

                        OutPutList.Add(DynamicCivilWithLegLibrary);
                    }


                    CivilTableDisplay.Model = OutPutList;

                    if (WithFilterData)
                    {
                        CivilTableDisplay.filters = _unitOfWork.CivilWithLegLibraryRepository.GetRelatedTables();
                    }
                    else
                    {
                        CivilTableDisplay.filters = null;
                    }

                    return new Response<ReturnWithFilters<object>>(true, CivilTableDisplay, null, null, (int)Helpers.Constants.ApiReturnCode.success, Count);
                }
                catch (Exception err)
                {
                    return new Response<ReturnWithFilters<object>>(false, null, null, err.Message, (int)Helpers.Constants.ApiReturnCode.fail);
                }
            }
            else if (Helpers.Constants.CivilType.TLIcivilWithoutLegLibrary.ToString() == TableNameLibrary)
            {
                try
                {
                    List<FilterObjectList> ObjectAttributeFilters = CombineFilters.filters;
                    List<DateFilterViewModel> DateFilter = CombineFilters.DateFilter;
                    int Count = 0;
                    List<object> OutPutList = new List<object>();
                    ReturnWithFilters<object> CivilTableDisplay = new ReturnWithFilters<object>();

                    List<StringFilterObjectList> AttributeFilters = new List<StringFilterObjectList>();

                    List<CivilWithoutLegLibraryViewModel> CivilWithoutLegLibraries = new List<CivilWithoutLegLibraryViewModel>();

                    List<TLIattributeActivated> CivilWithoutLegLibraryAttribute = new List<TLIattributeActivated>();

                    List<CivilWithoutLegLibraryViewModel> WithoutDateFilterCivilWithoutLegLibraries = new List<CivilWithoutLegLibraryViewModel>();
                    List<CivilWithoutLegLibraryViewModel> WithDateFilterCivilWithoutLegLibraries = new List<CivilWithoutLegLibraryViewModel>();

                    string Category = _unitOfWork.CivilWithoutLegCategoryRepository.GetByID(CategoryId).Name.ToLower();
                    string CategoryViewName = "";

                    List<TLIattActivatedCategory> AttActivatedCategory = _unitOfWork.AttActivatedCategoryRepository.GetIncludeWhere(x =>
                        x.civilWithoutLegCategoryId == CategoryId, x => x.attributeActivated).ToList();

                    if (Category.ToLower() == "mast")
                        CategoryViewName = Helpers.Constants.EditableManamgmantViewNames.CivilWithoutLegsLibraryMast.ToString();

                    else if (Category.ToLower() == "capsule")
                        CategoryViewName = Helpers.Constants.EditableManamgmantViewNames.CivilWithoutLegsLibraryCapsule.ToString();

                    else if (Category.ToLower() == "monopole")
                        CategoryViewName = Helpers.Constants.EditableManamgmantViewNames.CivilWithoutLegsLibraryMonopole.ToString();

                    if ((DateFilter != null ? DateFilter.Count() > 0 : false) ||
                        (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0))
                    {
                        CivilWithoutLegLibraryAttribute = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                            x.Enable && x.AttributeActivatedId != null &&
                            x.EditableManagmentView.View == CategoryViewName &&
                            x.EditableManagmentView.TLItablesNames1.TableName == Helpers.Constants.TablesNames.TLIcivilWithoutLegLibrary.ToString(),
                                x => x.AttributeActivated, x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1)
                        .Select(x => x.AttributeActivated).ToList();

                        foreach (TLIattributeActivated AttributeActivated in CivilWithoutLegLibraryAttribute)
                        {
                            AttributeActivated.Label = AttActivatedCategory.FirstOrDefault(x =>
                                x.attributeActivatedId == AttributeActivated.Id) != null ?
                            AttributeActivated.Label = AttActivatedCategory.FirstOrDefault(x =>
                                x.attributeActivatedId == AttributeActivated.Id).Label : "NA";
                        }
                    }
                    if (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0)
                    {
                        List<TLIattributeActivated> DateCivilWithoutLegLibraryAttribute = new List<TLIattributeActivated>();
                        DateCivilWithoutLegLibraryAttribute = CivilWithoutLegLibraryAttribute.Where(x =>
                            x.DataType.ToLower() != "datetime").ToList();

                        foreach (FilterObjectList item in ObjectAttributeFilters)
                        {
                            List<string> value = item.value.Select(x => x.ToString().ToLower()).ToList();

                            TLIattributeActivated AttributeKey = DateCivilWithoutLegLibraryAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());

                            string Key = "";

                            if (AttributeKey != null)
                                Key = AttributeKey.Key;

                            else
                                Key = item.key;

                            AttributeFilters.Add(new StringFilterObjectList
                            {
                                key = Key,
                                value = value
                            });
                        }
                    }

                    if (AttributeFilters != null && AttributeFilters.Count > 0)
                    {
                        //
                        // Library Dynamic Attributes...
                        //
                        List<TLIdynamicAtt> LibDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AttributeFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            x.LibraryAtt && !x.disable && x.CivilWithoutLegCategoryId == CategoryId &&
                            x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcivilWithoutLegLibrary.ToString(), x => x.tablesNames).ToList();

                        List<int> DynamicLibValueListIds = new List<int>();
                        bool DynamicLibExist = false;

                        if (LibDynamicAttListIds.Count > 0)
                        {
                            DynamicLibExist = true;
                            GetInventoriesIdsFromDynamicAttributes(out DynamicLibValueListIds, LibDynamicAttListIds, AttributeFilters);
                        }

                        //
                        // Library Attribute Activated...
                        //
                        bool AttrLibExist = typeof(CivilWithoutLegLibraryViewModel).GetProperties().ToList().Exists(x =>
                            AttributeFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower() && y.key.ToLower() != "id"));

                        List<int> LibraryAttributeActivated = new List<int>();

                        if (AttrLibExist)
                        {
                            List<PropertyInfo> NonStringLibraryProps = typeof(CivilWithoutLegLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() != "string" &&
                                AttributeFilters.Exists(y =>
                                    y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<PropertyInfo> StringLibraryProps = typeof(CivilWithoutLegLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() == "string" &&
                                AttributeFilters.Exists(y =>
                                    y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<StringFilterObjectList> LibraryPropsAttributeFilters = AttributeFilters.Where(x =>
                                NonStringLibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower()) ||
                                StringLibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            LibraryAttributeActivated = _unitOfWork.CivilWithoutLegLibraryRepository.GetWhere(x =>
                                 LibraryPropsAttributeFilters.All(z =>
                                    NonStringLibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (y.GetValue(_mapper.Map<CivilWithoutLegLibraryViewModel>(x), null) != null ? z.value.Contains(y.GetValue(_mapper.Map<CivilWithoutLegLibraryViewModel>(x), null).ToString().ToLower()) : false)) ||
                                    StringLibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (z.value.Any(w =>
                                         y.GetValue(_mapper.Map<CivilWithoutLegLibraryViewModel>(x), null) != null ? y.GetValue(_mapper.Map<CivilWithoutLegLibraryViewModel>(x), null).ToString().ToLower().StartsWith(w.ToLower()) : false))))
                             ).Select(i => i.Id).ToList();
                        }

                        //
                        // Library (Attribute Activated + Dynamic) Attributes...
                        //
                        List<int> IntersectLibraryIds = new List<int>();
                        if (AttrLibExist && DynamicLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivated.Intersect(DynamicLibValueListIds).ToList();
                        }
                        else if (AttrLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivated;
                        }
                        else if (DynamicLibExist)
                        {
                            IntersectLibraryIds = DynamicLibValueListIds;
                        }

                        WithoutDateFilterCivilWithoutLegLibraries = _mapper.Map<List<CivilWithoutLegLibraryViewModel>>(_unitOfWork.CivilWithoutLegLibraryRepository.GetIncludeWhere(x =>
                            IntersectLibraryIds.Contains(x.Id) && !x.Deleted && x.Id > 0 &&
                            x.CivilWithoutLegCategoryId == CategoryId,
                            x => x.structureType, x => x.CivilSteelSupportCategory, x => x.InstallationCivilwithoutLegsType, x => x.CivilWithoutLegCategory).ToList());
                    }

                    //
                    // DateTime Objects Filters..
                    //
                    List<DateFilterViewModel> AfterConvertDateFilters = new List<DateFilterViewModel>();
                    if (DateFilter != null ? DateFilter.Count() > 0 : false)
                    {
                        List<TLIattributeActivated> NotDateCivilWithoutLegLibraryAttribute = new List<TLIattributeActivated>();
                        NotDateCivilWithoutLegLibraryAttribute = CivilWithoutLegLibraryAttribute.Where(x =>
                            x.DataType.ToLower() == "datetime").ToList();

                        foreach (DateFilterViewModel item in DateFilter)
                        {
                            DateTime DateFrom = Convert.ToDateTime(item.DateFrom);
                            DateTime DateTo = Convert.ToDateTime(item.DateTo);

                            if (DateFrom > DateTo)
                            {
                                DateTime Replacer = DateFrom;
                                DateFrom = DateTo;
                                DateTo = Replacer;
                            }

                            TLIattributeActivated AttributeKey = NotDateCivilWithoutLegLibraryAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());

                            string Key = "";

                            if (AttributeKey != null)
                                Key = AttributeKey.Key;

                            else
                                Key = item.key;

                            AfterConvertDateFilters.Add(new DateFilterViewModel
                            {
                                key = Key,
                                DateFrom = DateFrom,
                                DateTo = DateTo
                            });
                        }
                    }
                    if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                    {
                        //
                        // Library Dynamic Attributes...
                        //
                        List<TLIdynamicAtt> DateTimeLibDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AfterConvertDateFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcivilWithoutLegLibrary.ToString(), x => x.tablesNames).ToList();

                        List<int> DynamicLibValueListIds = new List<int>();
                        bool DynamicLibExist = false;

                        if (DateTimeLibDynamicAttListIds.Count > 0)
                        {
                            DynamicLibExist = true;
                            List<DateFilterViewModel> DynamicLibAttributeFilters = AfterConvertDateFilters.Where(x =>
                                DateTimeLibDynamicAttListIds.Exists(y => y.Key.ToLower() == x.key.ToLower())).ToList();

                            DynamicLibValueListIds = new List<int>();

                            List<TLIdynamicAttLibValue> DynamicLibValueListObjects = _unitOfWork.DynamicAttLibRepository.GetIncludeWhere(x =>
                                DateTimeLibDynamicAttListIds.Exists(y => y.Id == x.DynamicAttId) && !x.disable).ToList();

                            List<int> InventoriesIds = DynamicLibValueListObjects.Select(x => x.InventoryId).Distinct().ToList();

                            foreach (int InventoryId in InventoriesIds)
                            {
                                List<TLIdynamicAttLibValue> DynamicLibValueListInventories = DynamicLibValueListObjects.Where(x =>
                                    x.InventoryId == InventoryId).ToList();

                                if (DynamicLibAttributeFilters.All(y => DynamicLibValueListInventories.Exists(x =>
                                     (x.ValueDateTime != null ?
                                        (x.ValueDateTime >= y.DateFrom && x.ValueDateTime <= y.DateTo) : (false)))))
                                {
                                    DynamicLibValueListIds.Add(InventoryId);
                                }
                            }
                        }

                        //
                        // Library Attribute Activated...
                        //
                        List<PropertyInfo> LibraryProps = typeof(CivilWithoutLegLibraryViewModel).GetProperties().Where(x =>
                            AfterConvertDateFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower())).ToList();

                        List<int> LibraryAttributeActivatedIds = new List<int>();
                        bool AttrLibExist = false;

                        if (LibraryProps != null)
                        {
                            AttrLibExist = true;

                            List<DateFilterViewModel> LibraryPropsAttributeFilters = AfterConvertDateFilters.Where(x =>
                                LibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            LibraryAttributeActivatedIds = _unitOfWork.CivilWithoutLegLibraryRepository.GetIncludeWhere(x =>
                                LibraryPropsAttributeFilters.All(z =>
                                    (LibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && ((y.GetValue(_mapper.Map<CivilWithoutLegLibraryViewModel>(x), null) != null) ?
                                        ((z.DateFrom >= Convert.ToDateTime(y.GetValue(_mapper.Map<CivilWithoutLegLibraryViewModel>(x), null))) &&
                                         (z.DateTo <= Convert.ToDateTime(y.GetValue(_mapper.Map<CivilWithoutLegLibraryViewModel>(x), null)))) : (false)))))
                            ).Select(i => i.Id).ToList();
                        }

                        //
                        // Library (Attribute Activated + Dynamic) Attributes...
                        //
                        List<int> IntersectLibraryIds = new List<int>();
                        if (AttrLibExist && DynamicLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds.Intersect(DynamicLibValueListIds).ToList();
                        }
                        else if (AttrLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds;
                        }
                        else if (DynamicLibExist)
                        {
                            IntersectLibraryIds = DynamicLibValueListIds;
                        }

                        WithDateFilterCivilWithoutLegLibraries = _mapper.Map<List<CivilWithoutLegLibraryViewModel>>(_unitOfWork.CivilWithoutLegLibraryRepository.GetIncludeWhere(x =>
                            x.Id > 0 && IntersectLibraryIds.Contains(x.Id) && !x.Deleted &&
                            x.CivilWithoutLegCategoryId == CategoryId, x => x.CivilSteelSupportCategory, x => x.CivilWithoutLegCategory,
                            x => x.InstallationCivilwithoutLegsType, x => x.structureType).ToList());
                    }

                    //
                    // Intersect Between WithoutDateFilterCivilWithLegsLibraries + WithDateFilterCivilWithLegsLibraries To Get The Records That Meet The Filters (DateFilters + AttributeFilters)
                    //
                    if ((AttributeFilters != null ? AttributeFilters.Count() == 0 : true) &&
                        (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() == 0 : true))
                    {
                        CivilWithoutLegLibraries = _mapper.Map<List<CivilWithoutLegLibraryViewModel>>(_unitOfWork.CivilWithoutLegLibraryRepository.GetIncludeWhere(x =>
                            x.Id > 0 && !x.Deleted && x.CivilWithoutLegCategoryId == CategoryId, x => x.CivilSteelSupportCategory, x => x.CivilWithoutLegCategory,
                            x => x.structureType, x => x.InstallationCivilwithoutLegsType).ToList());
                    }
                    else if ((AttributeFilters != null ? AttributeFilters.Count > 0 : false) &&
                            (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false))
                    {
                        List<int> CivilIds = WithoutDateFilterCivilWithoutLegLibraries.Select(x => x.Id).Intersect(WithDateFilterCivilWithoutLegLibraries.Select(x => x.Id)).ToList();
                        CivilWithoutLegLibraries = _mapper.Map<List<CivilWithoutLegLibraryViewModel>>(_unitOfWork.CivilWithoutLegLibraryRepository.GetWhere(x =>
                            CivilIds.Contains(x.Id)).ToList());
                    }
                    else if (AttributeFilters != null ? AttributeFilters.Count > 0 : false)
                    {
                        CivilWithoutLegLibraries = WithoutDateFilterCivilWithoutLegLibraries;
                    }
                    else if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                    {
                        CivilWithoutLegLibraries = WithDateFilterCivilWithoutLegLibraries;
                    }

                    Count = CivilWithoutLegLibraries.Count();

                    CivilWithoutLegLibraries = CivilWithoutLegLibraries.Skip((parameterPagination.PageNumber - 1) * parameterPagination.PageSize).
                        Take(parameterPagination.PageSize).ToList();

                    List<TLIattributeViewManagment> AllAttributes = new List<TLIattributeViewManagment>();

                    List<AttActivatedCategoryViewModel> AttributeActivatedCategories = _mapper.Map<List<AttActivatedCategoryViewModel>>(_unitOfWork.AttActivatedCategoryRepository.GetIncludeWhere(x =>
                        (x.civilWithoutLegCategoryId.Value == CategoryId) &&
                        (x.enable) &&
                        (x.attributeActivated != null ?
                            ((x.attributeActivated.Tabel == Helpers.Constants.TablesNames.TLIcivilWithoutLegLibrary.ToString()) ||
                            ((x.attributeActivated.Key.ToLower() == "id" || x.attributeActivated.Key.ToLower() == "active") && x.attributeActivated.Tabel == Helpers.Constants.TablesNames.TLIcivilWithoutLegLibrary.ToString())) : false)
                        , x => x.attributeActivated).ToList());

                    List<DynamicAttViewModel> DynamicAttViewModels = _mapper.Map<List<DynamicAttViewModel>>(_unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                        x.CivilWithoutLegCategoryId != null ? (
                            x.CivilWithoutLegCategoryId.Value == CategoryId && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcivilWithoutLegLibrary.ToString() && !x.disable && x.LibraryAtt
                        ) : false && !x.disable, x => x.tablesNames).ToList());

                    AllAttributes = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                       (x.Enable && x.EditableManagmentView.View == CategoryViewName &&
                       (x.AttributeActivatedId != null ?
                            (x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIcivilWithoutLegLibrary.ToString() &&
                                AttributeActivatedCategories.Exists(y => y.attributeActivatedId == x.AttributeActivatedId)) :
                            (x.DynamicAtt.LibraryAtt && !x.DynamicAtt.disable && x.DynamicAtt.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcivilWithoutLegLibrary.ToString() &&
                                DynamicAttViewModels.Exists(y => y.Id == x.DynamicAttId)))) ||
                        (x.AttributeActivated != null ?
                            ((x.AttributeActivated.Key.ToLower() == "id" || x.AttributeActivated.Key.ToLower() == "active") && x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIcivilWithoutLegLibrary.ToString() && x.EditableManagmentView.View == CategoryViewName) : false),
                           x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1, x => x.EditableManagmentView.TLItablesNames2,
                           x => x.AttributeActivated, x => x.DynamicAtt, x => x.DynamicAtt.tablesNames, x => x.DynamicAtt.DataType).ToList();

                    List<TLIattributeViewManagment> NotDateTimeLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() != "datetime") : false).ToList();

                    List<TLIattributeViewManagment> NotDateTimeDynamicLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() != "datetime" : false).ToList();

                    List<TLIattributeViewManagment> DateTimeLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() == "datetime") : false).ToList();

                    List<TLIattributeViewManagment> DateTimeDynamicLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() == "datetime" : false).ToList();

                    foreach (CivilWithoutLegLibraryViewModel CivilWithoutLegLibraryViewModel in CivilWithoutLegLibraries)
                    {
                        dynamic DynamicCivilWithoutLegLibrary = new ExpandoObject();

                        //
                        // Library Object ViewModel...
                        //
                        if (NotDateTimeLibraryAttributesViewModel != null ? NotDateTimeLibraryAttributesViewModel.Count > 0 : false)
                        {
                            List<PropertyInfo> LibraryProps = typeof(CivilWithoutLegLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() != "datetime" :
                                    (x.PropertyType.Name.ToLower() != "datetime")) :
                                (x.PropertyType.Name.ToLower() != "datetime")).ToList();

                            foreach (PropertyInfo prop in LibraryProps)
                            {
                                if (prop.Name.ToLower().Contains("_name") &&
                                    NotDateTimeLibraryAttributesViewModel.Exists(x =>
                                        x.AttributeActivated.Label.ToLower() == prop.Name.ToLower()))
                                {
                                    object ForeignKeyNamePropObject = prop.GetValue(CivilWithoutLegLibraryViewModel, null);
                                    ((IDictionary<String, Object>)DynamicCivilWithoutLegLibrary).Add(new KeyValuePair<string, object>(prop.Name, ForeignKeyNamePropObject));
                                }
                                else if (NotDateTimeLibraryAttributesViewModel.Exists(x =>
                                     x.AttributeActivated.Key.ToLower() == prop.Name.ToLower()) &&
                                    !prop.Name.ToLower().Contains("_name") &&
                                    (prop.Name.ToLower().Substring(Math.Max(0, prop.Name.Length - 2)) != "id" || prop.Name.ToLower() == "id"))
                                {
                                    if (prop.Name.ToLower() != "id" && prop.Name.ToLower() != "active")
                                    {
                                        TLIattActivatedCategory LabelName = AttActivatedCategory.FirstOrDefault(x =>
                                            x.attributeActivated.Key.ToLower() == prop.Name.ToLower() &&
                                            AllAttributes.FirstOrDefault(y =>
                                                y.AttributeActivatedId != null ?
                                                    y.AttributeActivated.Key.ToLower() == prop.Name.ToLower() : false) != null);

                                        if (LabelName != null)
                                        {
                                            object PropObject = prop.GetValue(CivilWithoutLegLibraryViewModel, null);
                                            ((IDictionary<String, Object>)DynamicCivilWithoutLegLibrary).Add(new KeyValuePair<string, object>(LabelName.Label, PropObject));
                                        }
                                    }
                                    else
                                    {
                                        object PropObject = prop.GetValue(CivilWithoutLegLibraryViewModel, null);
                                        ((IDictionary<String, Object>)DynamicCivilWithoutLegLibrary).Add(new KeyValuePair<string, object>(prop.Name, PropObject));
                                    }
                                }
                            }
                        }

                        //
                        // Library Dynamic Attributes...
                        // 
                        List<TLIdynamicAtt> NotDateTimeLibraryDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcivilWithoutLegLibrary.ToString() &&
                            x.LibraryAtt && x.DataType.Name.ToLower() != "datetime" &&
                            x.CivilWithoutLegCategoryId == CategoryId &&
                            NotDateTimeDynamicLibraryAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames, x => x.DataType).ToList();

                        foreach (var LibraryDynamicAtt in NotDateTimeLibraryDynamicAttributes)
                        {
                            TLIdynamicAttLibValue DynamicAttLibValue = _unitOfWork.DynamicAttLibRepository.GetIncludeWhereFirst(x =>
                                x.DynamicAttId == LibraryDynamicAtt.Id &&
                                x.InventoryId == CivilWithoutLegLibraryViewModel.Id &&
                               !x.disable && x.DynamicAtt.LibraryAtt &&
                                x.DynamicAtt.CivilWithoutLegCategoryId == CategoryId &&
                                x.DynamicAtt.Key == LibraryDynamicAtt.Key,
                                    x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType, x => x.DynamicAtt.CivilWithoutLegCategory);

                            if (DynamicAttLibValue != null)
                            {
                                dynamic DynamicAttValue = new ExpandoObject();

                                if (DynamicAttLibValue.ValueString != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueString;

                                else if (DynamicAttLibValue.ValueDouble != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDouble;

                                else if (DynamicAttLibValue.ValueDateTime != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDateTime;

                                else if (DynamicAttLibValue.ValueBoolean != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueBoolean;

                                ((IDictionary<String, Object>)DynamicCivilWithoutLegLibrary).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, DynamicAttValue));
                            }
                            else
                            {
                                ((IDictionary<String, Object>)DynamicCivilWithoutLegLibrary).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, null));
                            }
                        }

                        //
                        // Library Object ViewModel... (DateTime DataType Attribute)
                        //
                        dynamic DateTimeAttributes = new ExpandoObject();
                        if (DateTimeLibraryAttributesViewModel != null ? DateTimeLibraryAttributesViewModel.Count() > 0 : false)
                        {
                            List<PropertyInfo> DateTimeLibraryProps = typeof(CivilWithoutLegLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name == "datetime" :
                                    (x.PropertyType.Name.ToLower() == "datetime")) :
                                (x.PropertyType.Name.ToLower() == "datetime")).ToList();

                            foreach (PropertyInfo prop in DateTimeLibraryProps)
                            {
                                TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                    x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIcivilWithoutLegLibrary.ToString() &&
                                    x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                if (LabelName != null)
                                {
                                    object PropObject = prop.GetValue(CivilWithoutLegLibraryViewModel, null);
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                }
                            }
                        }

                        //
                        // Library Dynamic Attributes... (DateTime DataType Attribute)
                        // 
                        List<TLIdynamicAtt> LibraryDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                           !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcivilWithoutLegLibrary.ToString() &&
                            x.CivilWithoutLegCategoryId == CategoryId &&
                            x.LibraryAtt && x.DataType.Name.ToLower() == "datetime" &&
                            DateTimeDynamicLibraryAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames, x => x.DataType).ToList();

                        foreach (TLIdynamicAtt LibraryDynamicAtt in LibraryDynamicAttributes)
                        {
                            TLIdynamicAttLibValue DynamicAttLibValue = _unitOfWork.DynamicAttLibRepository.GetIncludeWhereFirst(x =>
                                x.DynamicAttId == LibraryDynamicAtt.Id &&
                                x.InventoryId == CivilWithoutLegLibraryViewModel.Id && !x.disable &&
                                x.DynamicAtt.LibraryAtt &&
                                x.DynamicAtt.CivilWithoutLegCategoryId == CategoryId &&
                                x.DynamicAtt.Key == LibraryDynamicAtt.Key,
                                    x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType);

                            if (DynamicAttLibValue != null)
                            {
                                dynamic DynamicAttValue = new ExpandoObject();
                                if (DynamicAttLibValue.ValueDateTime != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDateTime;

                                ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, DynamicAttValue));
                            }
                            else
                            {
                                ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, null));
                            }
                        }

                        ((IDictionary<String, Object>)DynamicCivilWithoutLegLibrary).Add(new KeyValuePair<string, object>("DateTimeAttributes", DateTimeAttributes));

                        OutPutList.Add(DynamicCivilWithoutLegLibrary);
                    }
                    CivilTableDisplay.Model = OutPutList;

                    if (WithFilterData)
                    {
                        CivilTableDisplay.filters = _unitOfWork.CivilWithoutLegLibraryRepository.GetRelatedTables();
                    }
                    else
                    {
                        CivilTableDisplay.filters = null;
                    }

                    return new Response<ReturnWithFilters<object>>(true, CivilTableDisplay, null, null, (int)Helpers.Constants.ApiReturnCode.success, Count);
                }
                catch (Exception err)
                {
                    return new Response<ReturnWithFilters<object>>(false, null, null, err.Message, (int)Helpers.Constants.ApiReturnCode.fail);
                }
            }
            else if (Helpers.Constants.LoadSubType.TLIloadOtherLibrary.ToString() == TableNameLibrary)
            {
                try
                {
                    List<FilterObjectList> ObjectAttributeFilters = CombineFilters.filters;
                    List<DateFilterViewModel> DateFilter = CombineFilters.DateFilter;
                    int Count = 0;
                    List<object> OutPutList = new List<object>();
                    ReturnWithFilters<object> LoadOtherTableDisplay = new ReturnWithFilters<object>();

                    List<StringFilterObjectList> AttributeFilters = new List<StringFilterObjectList>();

                    List<LoadOtherLibraryViewModel> LoadOthersLibraries = new List<LoadOtherLibraryViewModel>();
                    List<LoadOtherLibraryViewModel> WithoutDateFilterLoadOthersLibraries = new List<LoadOtherLibraryViewModel>();
                    List<LoadOtherLibraryViewModel> WithDateFilterLoadOthersLibraries = new List<LoadOtherLibraryViewModel>();

                    List<TLIattributeActivated> OtherLoadLibraryAttribute = new List<TLIattributeActivated>();
                    if ((DateFilter != null ? DateFilter.Count() > 0 : false) ||
                        (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0))
                    {
                        OtherLoadLibraryAttribute = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                            x.Enable && x.AttributeActivatedId != null &&
                            x.AttributeActivated.DataType.ToLower() != "datetime" &&
                            x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.OtherLoadLibrary.ToString() &&
                            x.EditableManagmentView.TLItablesNames1.TableName == Helpers.Constants.TablesNames.TLIloadOtherLibrary.ToString(),
                                x => x.AttributeActivated, x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1)
                        .Select(x => x.AttributeActivated).ToList();
                    }

                    if (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0)
                    {
                        List<TLIattributeActivated> NotDateDateOtherLoadLibraryAttribute = OtherLoadLibraryAttribute.Where(x =>
                            x.DataType.ToLower() != "datetime").ToList();

                        foreach (FilterObjectList item in ObjectAttributeFilters)
                        {
                            List<string> value = item.value.Select(x => x.ToString().ToLower()).ToList();

                            TLIattributeActivated AttributeKey = NotDateDateOtherLoadLibraryAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());

                            string Key = "";

                            if (AttributeKey != null)
                                Key = AttributeKey.Key;

                            else
                                Key = item.key;

                            AttributeFilters.Add(new StringFilterObjectList
                            {
                                key = Key,
                                value = value
                            });
                        }
                    }
                    if (AttributeFilters != null && AttributeFilters.Count > 0)
                    {
                        //
                        // Library Dynamic Attributes...
                        //
                        List<TLIdynamicAtt> LibDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AttributeFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIloadOtherLibrary.ToString()
                                , x => x.tablesNames, x => x.DataType).ToList();

                        List<int> DynamicLibValueListIds = new List<int>();
                        bool DynamicLibExist = false;

                        if (LibDynamicAttListIds.Count > 0)
                        {
                            DynamicLibExist = true;
                            GetInventoriesIdsFromDynamicAttributes(out DynamicLibValueListIds, LibDynamicAttListIds, AttributeFilters);
                        }

                        //
                        // Library Attribute Activated...
                        //
                        bool AttrLibExist = typeof(LoadOtherLibraryViewModel).GetProperties().ToList().Exists(x =>
                            AttributeFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower() && y.key.ToLower() != "id"));

                        List<int> LibraryAttributeActivatedIds = new List<int>();

                        if (AttrLibExist)
                        {
                            List<PropertyInfo> NonStringLibraryProps = typeof(LoadOtherLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() != "string" &&
                                AttributeFilters.Exists(y =>
                                    y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<PropertyInfo> StringLibraryProps = typeof(LoadOtherLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() == "string" &&
                                AttributeFilters.Exists(y =>
                                    y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<StringFilterObjectList> LibraryPropsAttributeFilters = AttributeFilters.Where(x =>
                                NonStringLibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower()) ||
                                StringLibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            LibraryAttributeActivatedIds = _unitOfWork.LoadOtherLibraryRepository.GetWhere(x =>
                                 LibraryPropsAttributeFilters.All(z =>
                                    NonStringLibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (y.GetValue(_mapper.Map<LoadOtherLibraryViewModel>(x), null) != null ? z.value.Contains(y.GetValue(_mapper.Map<LoadOtherLibraryViewModel>(x), null).ToString().ToLower()) : false)) ||
                                    StringLibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (z.value.Any(w =>
                                         y.GetValue(_mapper.Map<LoadOtherLibraryViewModel>(x), null) != null ? y.GetValue(_mapper.Map<LoadOtherLibraryViewModel>(x), null).ToString().ToLower().StartsWith(w.ToLower()) : false))))
                             ).Select(i => i.Id).ToList();
                        }

                        //
                        // Library (Attribute Activated + Dynamic) Attributes...
                        //
                        List<int> IntersectLibraryIds = new List<int>();
                        if (AttrLibExist && DynamicLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds.Intersect(DynamicLibValueListIds).ToList();
                        }
                        else if (AttrLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds;
                        }
                        else if (DynamicLibExist)
                        {
                            IntersectLibraryIds = DynamicLibValueListIds;
                        }

                        WithoutDateFilterLoadOthersLibraries = _mapper.Map<List<LoadOtherLibraryViewModel>>(_unitOfWork.LoadOtherLibraryRepository.GetIncludeWhere(x =>
                            x.Id > 0 && IntersectLibraryIds.Contains(x.Id) && !x.Deleted).ToList());
                    }

                    //
                    // DateTime Objects Filters..
                    //
                    List<DateFilterViewModel> AfterConvertDateFilters = new List<DateFilterViewModel>();
                    if (DateFilter != null ? DateFilter.Count() > 0 : false)
                    {
                        List<TLIattributeActivated> DateOtherLoadLibraryAttribute = OtherLoadLibraryAttribute.Where(x =>
                            x.DataType.ToLower() == "datetime").ToList();

                        foreach (DateFilterViewModel item in DateFilter)
                        {
                            DateTime DateFrom = Convert.ToDateTime(item.DateFrom);
                            DateTime DateTo = Convert.ToDateTime(item.DateTo);

                            if (DateFrom > DateTo)
                            {
                                DateTime Replacer = DateFrom;
                                DateFrom = DateTo;
                                DateTo = Replacer;
                            }

                            TLIattributeActivated AttributeKey = DateOtherLoadLibraryAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());
                            string Key = "";

                            if (AttributeKey != null)
                                Key = AttributeKey.Key;
                            else
                                Key = item.key;

                            AfterConvertDateFilters.Add(new DateFilterViewModel
                            {
                                key = Key,
                                DateFrom = DateFrom,
                                DateTo = DateTo
                            });
                        }
                    }
                    if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                    {
                        //
                        // Library Dynamic Attributes...
                        //
                        List<TLIdynamicAtt> DateTimeLibDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AfterConvertDateFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIloadOtherLibrary.ToString(), x => x.tablesNames, x => x.DataType).ToList();

                        List<int> DynamicLibValueListIds = new List<int>();
                        bool DynamicLibExist = false;

                        if (DateTimeLibDynamicAttListIds.Count > 0)
                        {
                            DynamicLibExist = true;
                            List<DateFilterViewModel> DynamicLibAttributeFilters = AfterConvertDateFilters.Where(x =>
                                DateTimeLibDynamicAttListIds.Exists(y => y.Key.ToLower() == x.key.ToLower())).ToList();

                            DynamicLibValueListIds = new List<int>();

                            List<TLIdynamicAttLibValue> DynamicLibValueListObjects = _unitOfWork.DynamicAttLibRepository.GetIncludeWhere(x =>
                                DateTimeLibDynamicAttListIds.Exists(y => y.Id == x.DynamicAttId) && !x.disable).ToList();

                            List<int> InventoriesIds = DynamicLibValueListObjects.Select(x => x.InventoryId).Distinct().ToList();

                            foreach (int InventoryId in InventoriesIds)
                            {
                                List<TLIdynamicAttLibValue> DynamicLibValueListInventories = DynamicLibValueListObjects.Where(x =>
                                    x.InventoryId == InventoryId).ToList();

                                if (DynamicLibAttributeFilters.All(y => DynamicLibValueListInventories.Exists(x =>
                                     (x.ValueDateTime != null ?
                                        (x.ValueDateTime >= y.DateFrom && x.ValueDateTime <= y.DateTo) : (false)))))
                                {
                                    DynamicLibValueListIds.Add(InventoryId);
                                }
                            }
                        }

                        //
                        // Library Attribute Activated...
                        //
                        List<PropertyInfo> LibraryProps = typeof(LoadOtherLibraryViewModel).GetProperties().Where(x =>
                            AfterConvertDateFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower())).ToList();

                        List<int> LibraryAttributeActivatedIds = new List<int>();
                        bool AttrLibExist = false;

                        if (LibraryProps != null)
                        {
                            AttrLibExist = true;

                            List<DateFilterViewModel> LibraryPropsAttributeFilters = AfterConvertDateFilters.Where(x =>
                                LibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            LibraryAttributeActivatedIds = _unitOfWork.LoadOtherLibraryRepository.GetIncludeWhere(x =>
                                LibraryPropsAttributeFilters.All(z =>
                                    (LibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && ((y.GetValue(_mapper.Map<LoadOtherLibraryViewModel>(x), null) != null) ?
                                        ((z.DateFrom >= Convert.ToDateTime(y.GetValue(_mapper.Map<LoadOtherLibraryViewModel>(x), null))) &&
                                         (z.DateTo <= Convert.ToDateTime(y.GetValue(_mapper.Map<LoadOtherLibraryViewModel>(x), null)))) : (false)))))
                            ).Select(i => i.Id).ToList();
                        }

                        //
                        // Library (Attribute Activated + Dynamic) Attributes...
                        //
                        List<int> IntersectLibraryIds = new List<int>();
                        if (AttrLibExist && DynamicLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds.Intersect(DynamicLibValueListIds).ToList();
                        }
                        else if (AttrLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds;
                        }
                        else if (DynamicLibExist)
                        {
                            IntersectLibraryIds = DynamicLibValueListIds;
                        }

                        WithDateFilterLoadOthersLibraries = _mapper.Map<List<LoadOtherLibraryViewModel>>(_unitOfWork.LoadOtherLibraryRepository.GetIncludeWhere(x =>
                            x.Id > 0 && IntersectLibraryIds.Contains(x.Id) && !x.Deleted).ToList());
                    }

                    //
                    // Intersect Between WithoutDateFilterLoadOthersLibraries + WithDateFilterLoadOthersLibraries To Get The Records That Meet The Filters (DateFilters + AttributeFilters)
                    //
                    if ((AttributeFilters != null ? AttributeFilters.Count() == 0 : true) &&
                        (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() == 0 : true))
                    {
                        LoadOthersLibraries = _mapper.Map<List<LoadOtherLibraryViewModel>>(_unitOfWork.LoadOtherLibraryRepository.GetIncludeWhere(x =>
                            x.Id > 0 && !x.Deleted).ToList());
                    }
                    else if ((AttributeFilters != null ? AttributeFilters.Count > 0 : false) &&
                            (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false))
                    {
                        List<int> LoadOtherIds = WithoutDateFilterLoadOthersLibraries.Select(x => x.Id).Intersect(WithDateFilterLoadOthersLibraries.Select(x => x.Id)).ToList();
                        LoadOthersLibraries = _mapper.Map<List<LoadOtherLibraryViewModel>>(_unitOfWork.LoadOtherLibraryRepository.GetWhere(x =>
                            LoadOtherIds.Contains(x.Id)).ToList());
                    }
                    else if (AttributeFilters != null ? AttributeFilters.Count > 0 : false)
                    {
                        LoadOthersLibraries = WithoutDateFilterLoadOthersLibraries;
                    }
                    else if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                    {
                        LoadOthersLibraries = WithDateFilterLoadOthersLibraries;
                    }

                    Count = LoadOthersLibraries.Count();

                    LoadOthersLibraries = LoadOthersLibraries.Skip((parameterPagination.PageNumber - 1) * parameterPagination.PageSize).
                        Take(parameterPagination.PageSize).ToList();

                    List<TLIattributeViewManagment> AllAttributes = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                       (x.Enable && x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.OtherLoadLibrary.ToString() &&
                       (x.AttributeActivatedId != null ?
                            (x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIloadOtherLibrary.ToString() && x.AttributeActivated.enable) :
                            (x.DynamicAtt.LibraryAtt && !x.DynamicAtt.disable && x.DynamicAtt.tablesNames.TableName == Helpers.Constants.TablesNames.TLIloadOtherLibrary.ToString()))) ||
                        (x.AttributeActivated != null ?
                            ((x.AttributeActivated.Key.ToLower() == "id" || x.AttributeActivated.Key.ToLower() == "active") && x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIloadOtherLibrary.ToString()) : false),
                           x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1, x => x.EditableManagmentView.TLItablesNames2,
                           x => x.AttributeActivated, x => x.DynamicAtt, x => x.DynamicAtt.tablesNames, x => x.DynamicAtt.DataType).ToList();

                    List<TLIattributeViewManagment> NotDateTimeLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() != "datetime") : false).ToList();

                    List<TLIattributeViewManagment> NotDateTimeDynamicLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() != "datetime" : false).ToList();

                    List<TLIattributeViewManagment> DateTimeLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() == "datetime") : false).ToList();

                    List<TLIattributeViewManagment> DateTimeDynamicLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() == "datetime" : false).ToList();

                    foreach (LoadOtherLibraryViewModel LoadOtherLibraryViewModel in LoadOthersLibraries)
                    {
                        dynamic DynamicOtherLoadLibrary = new ExpandoObject();

                        //
                        // Library Object ViewModel... (Not DateTime DataType Attribute)
                        //
                        if (NotDateTimeLibraryAttributesViewModel != null ? NotDateTimeLibraryAttributesViewModel.Count > 0 : false)
                        {
                            List<PropertyInfo> LibraryProps = typeof(LoadOtherLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() != "datetime" :
                                    (x.PropertyType.Name.ToLower() != "datetime")) :
                                (x.PropertyType.Name.ToLower() != "datetime")).ToList();

                            foreach (PropertyInfo prop in LibraryProps)
                            {
                                if (prop.Name.ToLower().Contains("_name") &&
                                    NotDateTimeLibraryAttributesViewModel.Exists(x =>
                                        x.AttributeActivated.Label.ToLower() == prop.Name.ToLower()))
                                {
                                    object ForeignKeyNamePropObject = prop.GetValue(LoadOtherLibraryViewModel, null);
                                    ((IDictionary<String, Object>)DynamicOtherLoadLibrary).Add(new KeyValuePair<string, object>(prop.Name, ForeignKeyNamePropObject));
                                }
                                else if (NotDateTimeLibraryAttributesViewModel.Exists(x =>
                                     x.AttributeActivated.Key.ToLower() == prop.Name.ToLower()) &&
                                    !prop.Name.ToLower().Contains("_name") &&
                                    (prop.Name.ToLower().Substring(Math.Max(0, prop.Name.Length - 2)) != "id" || prop.Name.ToLower() == "id"))
                                {
                                    if (prop.Name.ToLower() != "id" && prop.Name.ToLower() != "active")
                                    {
                                        TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                            x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIloadOtherLibrary.ToString() &&
                                            x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                        if (LabelName != null)
                                        {
                                            object PropObject = prop.GetValue(LoadOtherLibraryViewModel, null);
                                            ((IDictionary<String, Object>)DynamicOtherLoadLibrary).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                        }
                                    }
                                    else
                                    {
                                        object PropObject = prop.GetValue(LoadOtherLibraryViewModel, null);
                                        ((IDictionary<String, Object>)DynamicOtherLoadLibrary).Add(new KeyValuePair<string, object>(prop.Name, PropObject));
                                    }
                                }
                            }
                        }

                        //
                        // Library Dynamic Attributes... (Not DateTime DataType Attribute)
                        // 
                        List<TLIdynamicAtt> NotDateTimeLibraryDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                           !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIloadOtherLibrary.ToString() &&
                            x.LibraryAtt && x.DataType.Name.ToLower() != "datetime" &&
                            NotDateTimeDynamicLibraryAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames, x => x.DataType).ToList();

                        foreach (var LibraryDynamicAtt in NotDateTimeLibraryDynamicAttributes)
                        {
                            TLIdynamicAttLibValue DynamicAttLibValue = _unitOfWork.DynamicAttLibRepository.GetIncludeWhereFirst(x =>
                                x.DynamicAttId == LibraryDynamicAtt.Id &&
                                x.InventoryId == LoadOtherLibraryViewModel.Id && !x.disable &&
                                x.DynamicAtt.LibraryAtt &&
                                x.DynamicAtt.Key == LibraryDynamicAtt.Key,
                                    x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType);

                            if (DynamicAttLibValue != null)
                            {
                                dynamic DynamicAttValue = new ExpandoObject();

                                if (DynamicAttLibValue.ValueString != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueString;

                                else if (DynamicAttLibValue.ValueDouble != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDouble;

                                else if (DynamicAttLibValue.ValueDateTime != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDateTime;

                                else if (DynamicAttLibValue.ValueBoolean != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueBoolean;

                                ((IDictionary<String, Object>)DynamicOtherLoadLibrary).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, DynamicAttValue));
                            }
                            else
                            {
                                ((IDictionary<String, Object>)DynamicOtherLoadLibrary).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, null));
                            }
                        }

                        //
                        // Library Object ViewModel... (DateTime DataType Attribute)
                        //
                        dynamic DateTimeAttributes = new ExpandoObject();
                        if (DateTimeLibraryAttributesViewModel != null ? DateTimeLibraryAttributesViewModel.Count() > 0 : false)
                        {
                            List<PropertyInfo> DateTimeLibraryProps = typeof(LoadOtherLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() == "datetime" :
                                    (x.PropertyType.Name.ToLower() == "datetime")) :
                                (x.PropertyType.Name.ToLower() == "datetime")).ToList();

                            foreach (PropertyInfo prop in DateTimeLibraryProps)
                            {
                                TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                    x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIloadOtherLibrary.ToString() &&
                                    x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                if (LabelName != null)
                                {
                                    object PropObject = prop.GetValue(LoadOtherLibraryViewModel, null);
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                }
                            }
                        }

                        //
                        // Library Dynamic Attributes... (DateTime DataType Attribute)
                        // 
                        List<TLIdynamicAtt> LibraryDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                           !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIloadOtherLibrary.ToString() &&
                            x.LibraryAtt && x.DataType.Name.ToLower() == "datetime" &&
                            DateTimeDynamicLibraryAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames).ToList();

                        foreach (TLIdynamicAtt LibraryDynamicAtt in LibraryDynamicAttributes)
                        {
                            TLIdynamicAttLibValue DynamicAttLibValue = _unitOfWork.DynamicAttLibRepository.GetIncludeWhereFirst(x =>
                                x.DynamicAttId == LibraryDynamicAtt.Id &&
                                x.InventoryId == LoadOtherLibraryViewModel.Id && !x.disable &&
                                x.DynamicAtt.LibraryAtt &&
                                x.DynamicAtt.Key == LibraryDynamicAtt.Key,
                                    x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType);

                            if (DynamicAttLibValue != null)
                            {
                                dynamic DynamicAttValue = new ExpandoObject();
                                if (DynamicAttLibValue.ValueDateTime != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDateTime;

                                ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, DynamicAttValue));
                            }
                            else
                            {
                                ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, null));
                            }
                        }

                        ((IDictionary<String, Object>)DynamicOtherLoadLibrary).Add(new KeyValuePair<string, object>("DateTimeAttributes", DateTimeAttributes));

                        OutPutList.Add(DynamicOtherLoadLibrary);
                    }

                    LoadOtherTableDisplay.Model = OutPutList;

                    LoadOtherTableDisplay.filters = _unitOfWork.LoadOtherLibraryRepository.GetRelatedTables();

                    return new Response<ReturnWithFilters<object>>(true, LoadOtherTableDisplay, null, null, (int)Helpers.Constants.ApiReturnCode.success, Count);
                }
                catch (Exception err)
                {
                    return new Response<ReturnWithFilters<object>>(false, null, null, err.Message, (int)Helpers.Constants.ApiReturnCode.fail);
                }
            }
            else if (Helpers.Constants.LoadSubType.TLIpowerLibrary.ToString() == TableNameLibrary)
            {
                try
                {
                    List<FilterObjectList> ObjectAttributeFilters = CombineFilters.filters;
                    List<DateFilterViewModel> DateFilter = CombineFilters.DateFilter;
                    int Count = 0;
                    List<object> OutPutList = new List<object>();
                    ReturnWithFilters<object> PowerTableDisplay = new ReturnWithFilters<object>();

                    List<StringFilterObjectList> AttributeFilters = new List<StringFilterObjectList>();

                    List<PowerLibraryViewModel> PowersLibraries = new List<PowerLibraryViewModel>();
                    List<PowerLibraryViewModel> WithoutDateFilterPowersLibraries = new List<PowerLibraryViewModel>();
                    List<PowerLibraryViewModel> WithDateFilterPowersLibraries = new List<PowerLibraryViewModel>();

                    List<TLIattributeActivated> PowerLibraryAttribute = new List<TLIattributeActivated>();
                    if ((DateFilter != null ? DateFilter.Count() > 0 : false) ||
                        (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0))
                    {
                        PowerLibraryAttribute = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                            x.Enable && x.AttributeActivatedId != null &&
                            x.AttributeActivated.DataType.ToLower() != "datetime" &&
                            x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.PowerLibrary.ToString() &&
                            x.EditableManagmentView.TLItablesNames1.TableName == Helpers.Constants.TablesNames.TLIpowerLibrary.ToString(),
                                x => x.AttributeActivated, x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1)
                        .Select(x => x.AttributeActivated).ToList();
                    }

                    if (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0)
                    {
                        List<TLIattributeActivated> NotDateDatePowerLibraryAttribute = PowerLibraryAttribute.Where(x =>
                            x.DataType.ToLower() != "datetime").ToList();

                        foreach (FilterObjectList item in ObjectAttributeFilters)
                        {
                            List<string> value = item.value.Select(x => x.ToString().ToLower()).ToList();

                            TLIattributeActivated AttributeKey = NotDateDatePowerLibraryAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());

                            string Key = "";

                            if (AttributeKey != null)
                                Key = AttributeKey.Key;

                            else
                                Key = item.key;

                            AttributeFilters.Add(new StringFilterObjectList
                            {
                                key = Key,
                                value = value
                            });
                        }
                    }
                    if (AttributeFilters != null && AttributeFilters.Count > 0)
                    {
                        //
                        // Library Dynamic Attributes...
                        //
                        List<TLIdynamicAtt> LibDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AttributeFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIpowerLibrary.ToString()
                                , x => x.tablesNames, x => x.DataType).ToList();

                        List<int> DynamicLibValueListIds = new List<int>();
                        bool DynamicLibExist = false;

                        if (LibDynamicAttListIds.Count > 0)
                        {
                            DynamicLibExist = true;
                            GetInventoriesIdsFromDynamicAttributes(out DynamicLibValueListIds, LibDynamicAttListIds, AttributeFilters);
                        }

                        //
                        // Library Attribute Activated...
                        //
                        bool AttrLibExist = typeof(PowerLibraryViewModel).GetProperties().ToList().Exists(x =>
                            AttributeFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower() && y.key.ToLower() != "id"));

                        List<int> LibraryAttributeActivatedIds = new List<int>();

                        if (AttrLibExist)
                        {
                            List<PropertyInfo> NonStringLibraryProps = typeof(PowerLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() != "string" &&
                                AttributeFilters.Exists(y =>
                                    y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<PropertyInfo> StringLibraryProps = typeof(PowerLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() == "string" &&
                                AttributeFilters.Exists(y =>
                                    y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<StringFilterObjectList> LibraryPropsAttributeFilters = AttributeFilters.Where(x =>
                                NonStringLibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower()) ||
                                StringLibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            LibraryAttributeActivatedIds = _unitOfWork.PowerLibraryRepository.GetWhere(x =>
                                 LibraryPropsAttributeFilters.All(z =>
                                    NonStringLibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (y.GetValue(_mapper.Map<PowerLibraryViewModel>(x), null) != null ? z.value.Contains(y.GetValue(_mapper.Map<PowerLibraryViewModel>(x), null).ToString().ToLower()) : false)) ||
                                    StringLibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (z.value.Any(w =>
                                         y.GetValue(_mapper.Map<PowerLibraryViewModel>(x), null) != null ? y.GetValue(_mapper.Map<PowerLibraryViewModel>(x), null).ToString().ToLower().StartsWith(w.ToLower()) : false))))
                             ).Select(i => i.Id).ToList();
                        }

                        //
                        // Library (Attribute Activated + Dynamic) Attributes...
                        //
                        List<int> IntersectLibraryIds = new List<int>();
                        if (AttrLibExist && DynamicLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds.Intersect(DynamicLibValueListIds).ToList();
                        }
                        else if (AttrLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds;
                        }
                        else if (DynamicLibExist)
                        {
                            IntersectLibraryIds = DynamicLibValueListIds;
                        }

                        WithoutDateFilterPowersLibraries = _mapper.Map<List<PowerLibraryViewModel>>(_unitOfWork.PowerLibraryRepository.GetIncludeWhere(x =>
                            x.Id > 0 && IntersectLibraryIds.Contains(x.Id) && !x.Deleted).ToList());
                    }

                    //
                    // DateTime Objects Filters..
                    //
                    List<DateFilterViewModel> AfterConvertDateFilters = new List<DateFilterViewModel>();
                    if (DateFilter != null ? DateFilter.Count() > 0 : false)
                    {
                        List<TLIattributeActivated> DatePowerLibraryAttribute = PowerLibraryAttribute.Where(x =>
                            x.DataType.ToLower() == "datetime").ToList();

                        foreach (DateFilterViewModel item in DateFilter)
                        {
                            DateTime DateFrom = Convert.ToDateTime(item.DateFrom);
                            DateTime DateTo = Convert.ToDateTime(item.DateTo);

                            if (DateFrom > DateTo)
                            {
                                DateTime Replacer = DateFrom;
                                DateFrom = DateTo;
                                DateTo = Replacer;
                            }

                            TLIattributeActivated AttributeKey = DatePowerLibraryAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());
                            string Key = "";

                            if (AttributeKey != null)
                                Key = AttributeKey.Key;
                            else
                                Key = item.key;

                            AfterConvertDateFilters.Add(new DateFilterViewModel
                            {
                                key = Key,
                                DateFrom = DateFrom,
                                DateTo = DateTo
                            });
                        }
                    }
                    if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                    {
                        //
                        // Library Dynamic Attributes...
                        //
                        List<TLIdynamicAtt> DateTimeLibDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AfterConvertDateFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIpowerLibrary.ToString(), x => x.tablesNames, x => x.DataType).ToList();

                        List<int> DynamicLibValueListIds = new List<int>();
                        bool DynamicLibExist = false;

                        if (DateTimeLibDynamicAttListIds.Count > 0)
                        {
                            DynamicLibExist = true;
                            List<DateFilterViewModel> DynamicLibAttributeFilters = AfterConvertDateFilters.Where(x =>
                                DateTimeLibDynamicAttListIds.Exists(y => y.Key.ToLower() == x.key.ToLower())).ToList();

                            DynamicLibValueListIds = new List<int>();

                            List<TLIdynamicAttLibValue> DynamicLibValueListObjects = _unitOfWork.DynamicAttLibRepository.GetIncludeWhere(x =>
                                DateTimeLibDynamicAttListIds.Exists(y => y.Id == x.DynamicAttId) && !x.disable).ToList();

                            List<int> InventoriesIds = DynamicLibValueListObjects.Select(x => x.InventoryId).Distinct().ToList();

                            foreach (int InventoryId in InventoriesIds)
                            {
                                List<TLIdynamicAttLibValue> DynamicLibValueListInventories = DynamicLibValueListObjects.Where(x =>
                                    x.InventoryId == InventoryId).ToList();

                                if (DynamicLibAttributeFilters.All(y => DynamicLibValueListInventories.Exists(x =>
                                     (x.ValueDateTime != null ?
                                        (x.ValueDateTime >= y.DateFrom && x.ValueDateTime <= y.DateTo) : (false)))))
                                {
                                    DynamicLibValueListIds.Add(InventoryId);
                                }
                            }
                        }

                        //
                        // Library Attribute Activated...
                        //
                        List<PropertyInfo> LibraryProps = typeof(PowerLibraryViewModel).GetProperties().Where(x =>
                            AfterConvertDateFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower())).ToList();

                        List<int> LibraryAttributeActivatedIds = new List<int>();
                        bool AttrLibExist = false;

                        if (LibraryProps != null)
                        {
                            AttrLibExist = true;

                            List<DateFilterViewModel> LibraryPropsAttributeFilters = AfterConvertDateFilters.Where(x =>
                                LibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            LibraryAttributeActivatedIds = _unitOfWork.PowerLibraryRepository.GetIncludeWhere(x =>
                                LibraryPropsAttributeFilters.All(z =>
                                    (LibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && ((y.GetValue(_mapper.Map<PowerLibraryViewModel>(x), null) != null) ?
                                        ((z.DateFrom >= Convert.ToDateTime(y.GetValue(_mapper.Map<PowerLibraryViewModel>(x), null))) &&
                                         (z.DateTo <= Convert.ToDateTime(y.GetValue(_mapper.Map<PowerLibraryViewModel>(x), null)))) : (false)))))
                            ).Select(i => i.Id).ToList();
                        }

                        //
                        // Library (Attribute Activated + Dynamic) Attributes...
                        //
                        List<int> IntersectLibraryIds = new List<int>();
                        if (AttrLibExist && DynamicLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds.Intersect(DynamicLibValueListIds).ToList();
                        }
                        else if (AttrLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds;
                        }
                        else if (DynamicLibExist)
                        {
                            IntersectLibraryIds = DynamicLibValueListIds;
                        }

                        WithDateFilterPowersLibraries = _mapper.Map<List<PowerLibraryViewModel>>(_unitOfWork.PowerLibraryRepository.GetIncludeWhere(x =>
                            x.Id > 0 && IntersectLibraryIds.Contains(x.Id) && !x.Deleted).ToList());
                    }

                    //
                    // Intersect Between WithoutDateFilterPowersLibraries + WithDateFilterPowersLibraries To Get The Records That Meet The Filters (DateFilters + AttributeFilters)
                    //
                    if ((AttributeFilters != null ? AttributeFilters.Count() == 0 : true) &&
                        (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() == 0 : true))
                    {
                        PowersLibraries = _mapper.Map<List<PowerLibraryViewModel>>(_unitOfWork.PowerLibraryRepository.GetIncludeWhere(x =>
                            x.Id > 0 && !x.Deleted).ToList());
                    }
                    else if ((AttributeFilters != null ? AttributeFilters.Count > 0 : false) &&
                            (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false))
                    {
                        List<int> PowerIds = WithoutDateFilterPowersLibraries.Select(x => x.Id).Intersect(WithDateFilterPowersLibraries.Select(x => x.Id)).ToList();
                        PowersLibraries = _mapper.Map<List<PowerLibraryViewModel>>(_unitOfWork.PowerLibraryRepository.GetWhere(x =>
                            PowerIds.Contains(x.Id)).ToList());
                    }
                    else if (AttributeFilters != null ? AttributeFilters.Count > 0 : false)
                    {
                        PowersLibraries = WithoutDateFilterPowersLibraries;
                    }
                    else if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                    {
                        PowersLibraries = WithDateFilterPowersLibraries;
                    }

                    Count = PowersLibraries.Count();

                    PowersLibraries = PowersLibraries.Skip((parameterPagination.PageNumber - 1) * parameterPagination.PageSize).
                        Take(parameterPagination.PageSize).ToList();

                    List<TLIattributeViewManagment> AllAttributes = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                       (x.Enable && x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.PowerLibrary.ToString() &&
                       (x.AttributeActivatedId != null ?
                            (x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIpowerLibrary.ToString() && x.AttributeActivated.enable) :
                            (x.DynamicAtt.LibraryAtt && !x.DynamicAtt.disable && x.DynamicAtt.tablesNames.TableName == Helpers.Constants.TablesNames.TLIpowerLibrary.ToString()))) ||
                        (x.AttributeActivated != null ?
                            ((x.AttributeActivated.Key.ToLower() == "id" || x.AttributeActivated.Key.ToLower() == "active") && x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIpowerLibrary.ToString()) : false),
                           x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1, x => x.EditableManagmentView.TLItablesNames2,
                           x => x.AttributeActivated, x => x.DynamicAtt, x => x.DynamicAtt.tablesNames, x => x.DynamicAtt.DataType).ToList();

                    List<TLIattributeViewManagment> NotDateTimeLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() != "datetime") : false).ToList();

                    List<TLIattributeViewManagment> NotDateTimeDynamicLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() != "datetime" : false).ToList();

                    List<TLIattributeViewManagment> DateTimeLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() == "datetime") : false).ToList();

                    List<TLIattributeViewManagment> DateTimeDynamicLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() == "datetime" : false).ToList();

                    foreach (PowerLibraryViewModel PowerLibraryViewModel in PowersLibraries)
                    {
                        dynamic DynamicPowerLibrary = new ExpandoObject();

                        //
                        // Library Object ViewModel... (Not DateTime DataType Attribute)
                        //
                        if (NotDateTimeLibraryAttributesViewModel != null ? NotDateTimeLibraryAttributesViewModel.Count > 0 : false)
                        {
                            List<PropertyInfo> LibraryProps = typeof(PowerLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() != "datetime" :
                                    (x.PropertyType.Name.ToLower() != "datetime")) :
                                (x.PropertyType.Name.ToLower() != "datetime")).ToList();

                            foreach (PropertyInfo prop in LibraryProps)
                            {
                                if (prop.Name.ToLower().Contains("_name") &&
                                    NotDateTimeLibraryAttributesViewModel.Exists(x =>
                                        x.AttributeActivated.Label.ToLower() == prop.Name.ToLower()))
                                {
                                    object ForeignKeyNamePropObject = prop.GetValue(PowerLibraryViewModel, null);
                                    ((IDictionary<String, Object>)DynamicPowerLibrary).Add(new KeyValuePair<string, object>(prop.Name, ForeignKeyNamePropObject));
                                }
                                else if (NotDateTimeLibraryAttributesViewModel.Exists(x =>
                                     x.AttributeActivated.Key.ToLower() == prop.Name.ToLower()) &&
                                    !prop.Name.ToLower().Contains("_name") &&
                                    (prop.Name.ToLower().Substring(Math.Max(0, prop.Name.Length - 2)) != "id" || prop.Name.ToLower() == "id"))
                                {
                                    if (prop.Name.ToLower() != "id" && prop.Name.ToLower() != "active")
                                    {
                                        TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                            x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIpowerLibrary.ToString() &&
                                            x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                        if (LabelName != null)
                                        {
                                            object PropObject = prop.GetValue(PowerLibraryViewModel, null);
                                            ((IDictionary<String, Object>)DynamicPowerLibrary).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                        }
                                    }
                                    else
                                    {
                                        object PropObject = prop.GetValue(PowerLibraryViewModel, null);
                                        ((IDictionary<String, Object>)DynamicPowerLibrary).Add(new KeyValuePair<string, object>(prop.Name, PropObject));
                                    }
                                }
                            }
                        }

                        //
                        // Library Dynamic Attributes... (Not DateTime DataType Attribute)
                        // 
                        List<TLIdynamicAtt> NotDateTimeLibraryDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                           !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIpowerLibrary.ToString() &&
                            x.LibraryAtt && x.DataType.Name.ToLower() != "datetime" &&
                            NotDateTimeDynamicLibraryAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames, x => x.DataType).ToList();

                        foreach (var LibraryDynamicAtt in NotDateTimeLibraryDynamicAttributes)
                        {
                            TLIdynamicAttLibValue DynamicAttLibValue = _unitOfWork.DynamicAttLibRepository.GetIncludeWhereFirst(x =>
                                x.DynamicAttId == LibraryDynamicAtt.Id &&
                                x.InventoryId == PowerLibraryViewModel.Id && !x.disable &&
                                x.DynamicAtt.LibraryAtt &&
                                x.DynamicAtt.Key == LibraryDynamicAtt.Key,
                                    x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType);

                            if (DynamicAttLibValue != null)
                            {
                                dynamic DynamicAttValue = new ExpandoObject();

                                if (DynamicAttLibValue.ValueString != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueString;

                                else if (DynamicAttLibValue.ValueDouble != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDouble;

                                else if (DynamicAttLibValue.ValueDateTime != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDateTime;

                                else if (DynamicAttLibValue.ValueBoolean != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueBoolean;

                                ((IDictionary<String, Object>)DynamicPowerLibrary).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, DynamicAttValue));
                            }
                            else
                            {
                                ((IDictionary<String, Object>)DynamicPowerLibrary).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, null));
                            }
                        }

                        //
                        // Library Object ViewModel... (DateTime DataType Attribute)
                        //
                        dynamic DateTimeAttributes = new ExpandoObject();
                        if (DateTimeLibraryAttributesViewModel != null ? DateTimeLibraryAttributesViewModel.Count() > 0 : false)
                        {
                            List<PropertyInfo> DateTimeLibraryProps = typeof(PowerLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() == "datetime" :
                                    (x.PropertyType.Name.ToLower() == "datetime")) :
                                (x.PropertyType.Name.ToLower() == "datetime")).ToList();

                            foreach (PropertyInfo prop in DateTimeLibraryProps)
                            {
                                TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                    x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIpowerLibrary.ToString() &&
                                    x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                if (LabelName != null)
                                {
                                    object PropObject = prop.GetValue(PowerLibraryViewModel, null);
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                }
                            }
                        }

                        //
                        // Library Dynamic Attributes... (DateTime DataType Attribute)
                        // 
                        List<TLIdynamicAtt> LibraryDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                           !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIpowerLibrary.ToString() &&
                            x.LibraryAtt && x.DataType.Name.ToLower() == "datetime" &&
                            DateTimeDynamicLibraryAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames).ToList();

                        foreach (TLIdynamicAtt LibraryDynamicAtt in LibraryDynamicAttributes)
                        {
                            TLIdynamicAttLibValue DynamicAttLibValue = _unitOfWork.DynamicAttLibRepository.GetIncludeWhereFirst(x =>
                                x.DynamicAttId == LibraryDynamicAtt.Id &&
                                x.InventoryId == PowerLibraryViewModel.Id && !x.disable &&
                                x.DynamicAtt.LibraryAtt &&
                                x.DynamicAtt.Key == LibraryDynamicAtt.Key,
                                    x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType);

                            if (DynamicAttLibValue != null)
                            {
                                dynamic DynamicAttValue = new ExpandoObject();
                                if (DynamicAttLibValue.ValueDateTime != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDateTime;

                                ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, DynamicAttValue));
                            }
                            else
                            {
                                ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, null));
                            }
                        }

                        ((IDictionary<String, Object>)DynamicPowerLibrary).Add(new KeyValuePair<string, object>("DateTimeAttributes", DateTimeAttributes));

                        OutPutList.Add(DynamicPowerLibrary);
                    }

                    PowerTableDisplay.Model = OutPutList;

                    PowerTableDisplay.filters = _unitOfWork.PowerLibraryRepository.GetRelatedTables();

                    return new Response<ReturnWithFilters<object>>(true, PowerTableDisplay, null, null, (int)Helpers.Constants.ApiReturnCode.success, Count);
                }
                catch (Exception err)
                {
                    return new Response<ReturnWithFilters<object>>(false, null, null, err.Message, (int)Helpers.Constants.ApiReturnCode.fail);
                }
            }
            else if (Helpers.Constants.LoadSubType.TLIradioAntennaLibrary.ToString() == TableNameLibrary)
            {
                try
                {
                    List<FilterObjectList> ObjectAttributeFilters = CombineFilters.filters;
                    List<DateFilterViewModel> DateFilter = CombineFilters.DateFilter;
                    int Count = 0;
                    List<object> OutPutList = new List<object>();
                    ReturnWithFilters<object> RadioAntennaTableDisplay = new ReturnWithFilters<object>();

                    List<StringFilterObjectList> AttributeFilters = new List<StringFilterObjectList>();

                    List<RadioAntennaLibraryViewModel> RadioAntennaLibraries = new List<RadioAntennaLibraryViewModel>();
                    List<RadioAntennaLibraryViewModel> WithoutDateFilterRadioAntennaLibraries = new List<RadioAntennaLibraryViewModel>();
                    List<RadioAntennaLibraryViewModel> WithDateFilterRadioAntennaLibraries = new List<RadioAntennaLibraryViewModel>();

                    List<TLIattributeActivated> RadioAntennaLibraryAttribute = new List<TLIattributeActivated>();
                    if ((DateFilter != null ? DateFilter.Count() > 0 : false) ||
                        (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0))
                    {
                        RadioAntennaLibraryAttribute = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                            x.Enable && x.AttributeActivatedId != null &&
                            x.AttributeActivated.DataType.ToLower() != "datetime" &&
                            x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.RadioAntennaLibrary.ToString() &&
                            x.EditableManagmentView.TLItablesNames1.TableName == Helpers.Constants.TablesNames.TLIradioAntennaLibrary.ToString(),
                                x => x.AttributeActivated, x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1)
                        .Select(x => x.AttributeActivated).ToList();
                    }

                    if (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0)
                    {
                        List<TLIattributeActivated> NotDateDateRadioAntennaLibraryAttribute = RadioAntennaLibraryAttribute.Where(x =>
                            x.DataType.ToLower() != "datetime").ToList();

                        foreach (FilterObjectList item in ObjectAttributeFilters)
                        {
                            List<string> value = item.value.Select(x => x.ToString().ToLower()).ToList();

                            TLIattributeActivated AttributeKey = NotDateDateRadioAntennaLibraryAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());

                            string Key = "";

                            if (AttributeKey != null)
                                Key = AttributeKey.Key;

                            else
                                Key = item.key;

                            AttributeFilters.Add(new StringFilterObjectList
                            {
                                key = Key,
                                value = value
                            });
                        }
                    }
                    if (AttributeFilters != null && AttributeFilters.Count > 0)
                    {
                        //
                        // Library Dynamic Attributes...
                        //
                        List<TLIdynamicAtt> LibDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AttributeFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIradioAntennaLibrary.ToString(), x => x.tablesNames, x => x.DataType).ToList();

                        List<int> DynamicLibValueListIds = new List<int>();
                        bool DynamicLibExist = false;

                        if (LibDynamicAttListIds.Count > 0)
                        {
                            DynamicLibExist = true;
                            GetInventoriesIdsFromDynamicAttributes(out DynamicLibValueListIds, LibDynamicAttListIds, AttributeFilters);
                        }

                        //
                        // Library Attribute Activated...
                        //
                        bool AttrLibExist = typeof(RadioAntennaLibraryViewModel).GetProperties().ToList().Exists(x =>
                            AttributeFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower() && y.key.ToLower() != "id"));

                        List<int> LibraryAttributeActivatedIds = new List<int>();

                        if (AttrLibExist)
                        {
                            List<PropertyInfo> NonStringLibraryProps = typeof(RadioAntennaLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() != "string" &&
                                AttributeFilters.Exists(y =>
                                    y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<PropertyInfo> StringLibraryProps = typeof(RadioAntennaLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() == "string" &&
                                AttributeFilters.Exists(y =>
                                    y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<StringFilterObjectList> LibraryPropsAttributeFilters = AttributeFilters.Where(x =>
                                NonStringLibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower()) ||
                                StringLibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            LibraryAttributeActivatedIds = _unitOfWork.RadioAntennaLibraryRepository.GetWhere(x =>
                                 LibraryPropsAttributeFilters.All(z =>
                                    NonStringLibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (y.GetValue(_mapper.Map<RadioAntennaLibraryViewModel>(x), null) != null ? z.value.Contains(y.GetValue(_mapper.Map<RadioAntennaLibraryViewModel>(x), null).ToString().ToLower()) : false)) ||
                                    StringLibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (z.value.Any(w =>
                                         y.GetValue(_mapper.Map<RadioAntennaLibraryViewModel>(x), null) != null ? y.GetValue(_mapper.Map<RadioAntennaLibraryViewModel>(x), null).ToString().ToLower().StartsWith(w.ToLower()) : false))))
                             ).Select(i => i.Id).ToList();
                        }

                        //
                        // Library (Attribute Activated + Dynamic) Attributes...
                        //
                        List<int> IntersectLibraryIds = new List<int>();
                        if (AttrLibExist && DynamicLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds.Intersect(DynamicLibValueListIds).ToList();
                        }
                        else if (AttrLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds;
                        }
                        else if (DynamicLibExist)
                        {
                            IntersectLibraryIds = DynamicLibValueListIds;
                        }

                        WithoutDateFilterRadioAntennaLibraries = _mapper.Map<List<RadioAntennaLibraryViewModel>>(_unitOfWork.RadioAntennaLibraryRepository.GetWhere(x =>
                            x.Id > 0 && IntersectLibraryIds.Contains(x.Id) && !x.Deleted).ToList());
                    }

                    //
                    // DateTime Objects Filters..
                    //
                    List<DateFilterViewModel> AfterConvertDateFilters = new List<DateFilterViewModel>();
                    if (DateFilter != null ? DateFilter.Count() > 0 : false)
                    {
                        List<TLIattributeActivated> DateRadioAntennaLibraryAttribute = RadioAntennaLibraryAttribute.Where(x =>
                            x.DataType.ToLower() == "datetime").ToList();

                        foreach (DateFilterViewModel item in DateFilter)
                        {
                            DateTime DateFrom = Convert.ToDateTime(item.DateFrom);
                            DateTime DateTo = Convert.ToDateTime(item.DateTo);

                            if (DateFrom > DateTo)
                            {
                                DateTime Replacer = DateFrom;
                                DateFrom = DateTo;
                                DateTo = Replacer;
                            }

                            TLIattributeActivated AttributeKey = DateRadioAntennaLibraryAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());
                            string Key = "";

                            if (AttributeKey != null)
                                Key = AttributeKey.Key;
                            else
                                Key = item.key;

                            AfterConvertDateFilters.Add(new DateFilterViewModel
                            {
                                key = Key,
                                DateFrom = DateFrom,
                                DateTo = DateTo
                            });
                        }
                    }
                    if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                    {
                        //
                        // Library Dynamic Attributes...
                        //
                        List<TLIdynamicAtt> DateTimeLibDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AfterConvertDateFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIradioAntennaLibrary.ToString(), x => x.tablesNames).ToList();

                        List<int> DynamicLibValueListIds = new List<int>();
                        bool DynamicLibExist = false;

                        if (DateTimeLibDynamicAttListIds.Count > 0)
                        {
                            DynamicLibExist = true;
                            List<DateFilterViewModel> DynamicLibAttributeFilters = AfterConvertDateFilters.Where(x =>
                                DateTimeLibDynamicAttListIds.Exists(y => y.Key.ToLower() == x.key.ToLower())).ToList();

                            DynamicLibValueListIds = new List<int>();

                            List<TLIdynamicAttLibValue> DynamicLibValueListObjects = _unitOfWork.DynamicAttLibRepository.GetIncludeWhere(x =>
                                DateTimeLibDynamicAttListIds.Exists(y => y.Id == x.DynamicAttId) && !x.disable).ToList();

                            List<int> InventoriesIds = DynamicLibValueListObjects.Select(x => x.InventoryId).Distinct().ToList();

                            foreach (int InventoryId in InventoriesIds)
                            {
                                List<TLIdynamicAttLibValue> DynamicLibValueListInventories = DynamicLibValueListObjects.Where(x =>
                                    x.InventoryId == InventoryId).ToList();

                                if (DynamicLibAttributeFilters.All(y => DynamicLibValueListInventories.Exists(x =>
                                     (x.ValueDateTime != null ?
                                        (x.ValueDateTime >= y.DateFrom && x.ValueDateTime <= y.DateTo) : (false)))))
                                {
                                    DynamicLibValueListIds.Add(InventoryId);
                                }
                            }
                        }

                        //
                        // Library Attribute Activated...
                        //
                        List<PropertyInfo> LibraryProps = typeof(RadioAntennaLibraryViewModel).GetProperties().Where(x =>
                            AfterConvertDateFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower())).ToList();

                        List<int> LibraryAttributeActivatedIds = new List<int>();
                        bool AttrLibExist = false;

                        if (LibraryProps != null)
                        {
                            AttrLibExist = true;

                            List<DateFilterViewModel> LibraryPropsAttributeFilters = AfterConvertDateFilters.Where(x =>
                                LibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            LibraryAttributeActivatedIds = _unitOfWork.RadioAntennaLibraryRepository.GetIncludeWhere(x =>
                                LibraryPropsAttributeFilters.All(z =>
                                    (LibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && ((y.GetValue(_mapper.Map<RadioAntennaLibraryViewModel>(x), null) != null) ?
                                        ((z.DateFrom >= Convert.ToDateTime(y.GetValue(_mapper.Map<RadioAntennaLibraryViewModel>(x), null))) &&
                                         (z.DateTo <= Convert.ToDateTime(y.GetValue(_mapper.Map<RadioAntennaLibraryViewModel>(x), null)))) : (false)))))
                            ).Select(i => i.Id).ToList();
                        }

                        //
                        // Library (Attribute Activated + Dynamic) Attributes...
                        //
                        List<int> IntersectLibraryIds = new List<int>();
                        if (AttrLibExist && DynamicLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds.Intersect(DynamicLibValueListIds).ToList();
                        }
                        else if (AttrLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds;
                        }
                        else if (DynamicLibExist)
                        {
                            IntersectLibraryIds = DynamicLibValueListIds;
                        }

                        WithDateFilterRadioAntennaLibraries = _mapper.Map<List<RadioAntennaLibraryViewModel>>(_unitOfWork.RadioAntennaLibraryRepository.GetWhere(x =>
                            x.Id > 0 && IntersectLibraryIds.Contains(x.Id) && !x.Deleted).ToList());
                    }

                    //
                    // Intersect Between WithoutDateFilterRadioAntennaLibraries + WithDateFilterRadioAntennaLibraries To Get The Records That Meet The Filters (DateFilters + AttributeFilters)
                    //
                    if ((AttributeFilters != null ? AttributeFilters.Count() == 0 : true) &&
                        (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() == 0 : true))
                    {
                        RadioAntennaLibraries = _mapper.Map<List<RadioAntennaLibraryViewModel>>(_unitOfWork.RadioAntennaLibraryRepository.GetWhere(x =>
                            x.Id > 0 && !x.Deleted).ToList());
                    }
                    else if ((AttributeFilters != null ? AttributeFilters.Count > 0 : false) &&
                            (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false))
                    {
                        List<int> RadioAntennaIds = WithoutDateFilterRadioAntennaLibraries.Select(x => x.Id).Intersect(WithDateFilterRadioAntennaLibraries.Select(x => x.Id)).ToList();
                        RadioAntennaLibraries = _mapper.Map<List<RadioAntennaLibraryViewModel>>(_unitOfWork.RadioAntennaLibraryRepository.GetWhere(x =>
                            RadioAntennaIds.Contains(x.Id)).ToList());
                    }
                    else if (AttributeFilters != null ? AttributeFilters.Count > 0 : false)
                    {
                        RadioAntennaLibraries = WithoutDateFilterRadioAntennaLibraries;
                    }
                    else if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                    {
                        RadioAntennaLibraries = WithDateFilterRadioAntennaLibraries;
                    }

                    Count = RadioAntennaLibraries.Count();

                    RadioAntennaLibraries = RadioAntennaLibraries.Skip((parameterPagination.PageNumber - 1) * parameterPagination.PageSize).
                        Take(parameterPagination.PageSize).ToList();

                    List<TLIattributeViewManagment> AllAttributes = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                       (x.Enable && x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.RadioAntennaLibrary.ToString() &&
                       (x.AttributeActivatedId != null ?
                            (x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIradioAntennaLibrary.ToString() && x.AttributeActivated.enable) :
                            (x.DynamicAtt.LibraryAtt && !x.DynamicAtt.disable && x.DynamicAtt.tablesNames.TableName == Helpers.Constants.TablesNames.TLIradioAntennaLibrary.ToString()))) ||
                        (x.AttributeActivated != null ?
                            ((x.AttributeActivated.Key.ToLower() == "id" || x.AttributeActivated.Key.ToLower() == "active") && x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIradioAntennaLibrary.ToString()) : false),
                           x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1, x => x.EditableManagmentView.TLItablesNames2,
                           x => x.AttributeActivated, x => x.DynamicAtt, x => x.DynamicAtt.tablesNames, x => x.DynamicAtt.DataType).ToList();

                    List<TLIattributeViewManagment> NotDateTimeLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() != "datetime") : false).ToList();

                    List<TLIattributeViewManagment> NotDateTimeDynamicLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() != "datetime" : false).ToList();

                    List<TLIattributeViewManagment> DateTimeLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() == "datetime") : false).ToList();

                    List<TLIattributeViewManagment> DateTimeDynamicLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() == "datetime" : false).ToList();

                    foreach (RadioAntennaLibraryViewModel RadioAntennaLibraryViewModel in RadioAntennaLibraries)
                    {
                        dynamic DynamicRadioAntennaLibrary = new ExpandoObject();

                        //
                        // Library Object ViewModel... (Not DateTime DataType Attribute)
                        //
                        if (NotDateTimeLibraryAttributesViewModel != null ? NotDateTimeLibraryAttributesViewModel.Count > 0 : false)
                        {
                            List<PropertyInfo> LibraryProps = typeof(RadioAntennaLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() != "datetime" :
                                    (x.PropertyType.Name.ToLower() != "datetime")) :
                                (x.PropertyType.Name.ToLower() != "datetime")).ToList();

                            foreach (PropertyInfo prop in LibraryProps)
                            {
                                if (prop.Name.ToLower().Contains("_name") &&
                                    NotDateTimeLibraryAttributesViewModel.Exists(x =>
                                        x.AttributeActivated.Label.ToLower() == prop.Name.ToLower()))
                                {
                                    object ForeignKeyNamePropObject = prop.GetValue(RadioAntennaLibraryViewModel, null);
                                    ((IDictionary<String, Object>)DynamicRadioAntennaLibrary).Add(new KeyValuePair<string, object>(prop.Name, ForeignKeyNamePropObject));
                                }
                                else if (NotDateTimeLibraryAttributesViewModel.Exists(x =>
                                     x.AttributeActivated.Key.ToLower() == prop.Name.ToLower()) &&
                                    !prop.Name.ToLower().Contains("_name") &&
                                    (prop.Name.ToLower().Substring(Math.Max(0, prop.Name.Length - 2)) != "id" || prop.Name.ToLower() == "id"))
                                {
                                    if (prop.Name.ToLower() != "id" && prop.Name.ToLower() != "active")
                                    {
                                        TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                            x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIradioAntennaLibrary.ToString() &&
                                            x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                        if (LabelName != null)
                                        {
                                            object PropObject = prop.GetValue(RadioAntennaLibraryViewModel, null);
                                            ((IDictionary<String, Object>)DynamicRadioAntennaLibrary).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                        }
                                    }
                                    else
                                    {
                                        object PropObject = prop.GetValue(RadioAntennaLibraryViewModel, null);
                                        ((IDictionary<String, Object>)DynamicRadioAntennaLibrary).Add(new KeyValuePair<string, object>(prop.Name, PropObject));
                                    }
                                }
                            }
                        }

                        //
                        // Library Dynamic Attributes... (Not DateTime DataType Attribute)
                        // 
                        List<TLIdynamicAtt> NotDateTimeLibraryDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                           !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIradioAntennaLibrary.ToString() &&
                            x.LibraryAtt && x.DataType.Name.ToLower() != "datetime" &&
                            NotDateTimeDynamicLibraryAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames, x => x.DataType).ToList();

                        foreach (var LibraryDynamicAtt in NotDateTimeLibraryDynamicAttributes)
                        {
                            TLIdynamicAttLibValue DynamicAttLibValue = _unitOfWork.DynamicAttLibRepository.GetIncludeWhereFirst(x =>
                                x.DynamicAttId == LibraryDynamicAtt.Id &&
                                x.InventoryId == RadioAntennaLibraryViewModel.Id && !x.disable &&
                                x.DynamicAtt.LibraryAtt &&
                                x.DynamicAtt.Key == LibraryDynamicAtt.Key,
                                    x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType);

                            if (DynamicAttLibValue != null)
                            {
                                dynamic DynamicAttValue = new ExpandoObject();

                                if (DynamicAttLibValue.ValueString != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueString;

                                else if (DynamicAttLibValue.ValueDouble != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDouble;

                                else if (DynamicAttLibValue.ValueDateTime != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDateTime;

                                else if (DynamicAttLibValue.ValueBoolean != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueBoolean;

                                ((IDictionary<String, Object>)DynamicRadioAntennaLibrary).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, DynamicAttValue));
                            }
                            else
                            {
                                ((IDictionary<String, Object>)DynamicRadioAntennaLibrary).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, null));
                            }
                        }

                        //
                        // Library Object ViewModel... (DateTime DataType Attribute)
                        //
                        dynamic DateTimeAttributes = new ExpandoObject();
                        if (DateTimeLibraryAttributesViewModel != null ? DateTimeLibraryAttributesViewModel.Count() > 0 : false)
                        {
                            List<PropertyInfo> DateTimeLibraryProps = typeof(RadioAntennaLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name == "datetime" :
                                    (x.PropertyType.Name.ToLower() == "datetime")) :
                                (x.PropertyType.Name.ToLower() == "datetime")).ToList();

                            foreach (PropertyInfo prop in DateTimeLibraryProps)
                            {
                                TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                    x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIradioAntennaLibrary.ToString() &&
                                    x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                if (LabelName != null)
                                {
                                    object PropObject = prop.GetValue(RadioAntennaLibraryViewModel, null);
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                }
                            }
                        }

                        //
                        // Library Dynamic Attributes... (DateTime DataType Attribute)
                        // 
                        List<TLIdynamicAtt> LibraryDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                           !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIradioAntennaLibrary.ToString() &&
                            x.LibraryAtt && x.DataType.Name.ToLower() == "datetime" &&
                            DateTimeDynamicLibraryAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames).ToList();

                        foreach (TLIdynamicAtt LibraryDynamicAtt in LibraryDynamicAttributes)
                        {
                            TLIdynamicAttLibValue DynamicAttLibValue = _unitOfWork.DynamicAttLibRepository.GetIncludeWhereFirst(x =>
                                x.DynamicAttId == LibraryDynamicAtt.Id &&
                                x.InventoryId == RadioAntennaLibraryViewModel.Id && !x.disable &&
                                x.DynamicAtt.LibraryAtt &&
                                x.DynamicAtt.Key == LibraryDynamicAtt.Key,
                                    x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType);

                            if (DynamicAttLibValue != null)
                            {
                                dynamic DynamicAttValue = new ExpandoObject();
                                if (DynamicAttLibValue.ValueDateTime != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDateTime;

                                ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, DynamicAttValue));
                            }
                            else
                            {
                                ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, null));
                            }
                        }

                        ((IDictionary<String, Object>)DynamicRadioAntennaLibrary).Add(new KeyValuePair<string, object>("DateTimeAttributes", DateTimeAttributes));

                        OutPutList.Add(DynamicRadioAntennaLibrary);
                    }

                    RadioAntennaTableDisplay.Model = OutPutList;

                    RadioAntennaTableDisplay.filters = _unitOfWork.RadioAntennaLibraryRepository.GetRelatedTables();

                    return new Response<ReturnWithFilters<object>>(true, RadioAntennaTableDisplay, null, null, (int)Helpers.Constants.ApiReturnCode.success, Count);
                }
                catch (Exception err)
                {
                    return new Response<ReturnWithFilters<object>>(false, null, null, err.Message, (int)Helpers.Constants.ApiReturnCode.fail);
                }
            }
            else if (Helpers.Constants.LoadSubType.TLIradioRRULibrary.ToString() == TableNameLibrary)
            {
                try
                {
                    List<FilterObjectList> ObjectAttributeFilters = CombineFilters.filters;
                    List<DateFilterViewModel> DateFilter = CombineFilters.DateFilter;
                    int Count = 0;
                    List<object> OutPutList = new List<object>();
                    ReturnWithFilters<object> RadioRRUTableDisplay = new ReturnWithFilters<object>();

                    List<StringFilterObjectList> AttributeFilters = new List<StringFilterObjectList>();

                    List<RadioRRULibraryViewModel> RadioRRULibraries = new List<RadioRRULibraryViewModel>();
                    List<RadioRRULibraryViewModel> WithoutDateFilterRadioRRULibraries = new List<RadioRRULibraryViewModel>();
                    List<RadioRRULibraryViewModel> WithDateFilterRadioRRULibraries = new List<RadioRRULibraryViewModel>();

                    List<TLIattributeActivated> RadioRRULibraryAttribute = new List<TLIattributeActivated>();
                    if ((DateFilter != null ? DateFilter.Count() > 0 : false) ||
                        (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0))
                    {
                        RadioRRULibraryAttribute = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                            x.Enable && x.AttributeActivatedId != null &&
                            x.AttributeActivated.DataType.ToLower() != "datetime" &&
                            x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.RadioRRULibrary.ToString() &&
                            x.EditableManagmentView.TLItablesNames1.TableName == Helpers.Constants.TablesNames.TLIradioRRULibrary.ToString(),
                                x => x.AttributeActivated, x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1)
                        .Select(x => x.AttributeActivated).ToList();
                    }

                    if (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0)
                    {
                        List<TLIattributeActivated> NotDateDateRadioRRULibraryAttribute = RadioRRULibraryAttribute.Where(x =>
                            x.DataType.ToLower() != "datetime").ToList();

                        foreach (FilterObjectList item in ObjectAttributeFilters)
                        {
                            List<string> value = item.value.Select(x => x.ToString().ToLower()).ToList();

                            TLIattributeActivated AttributeKey = NotDateDateRadioRRULibraryAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());

                            string Key = "";

                            if (AttributeKey != null)
                                Key = AttributeKey.Key;

                            else
                                Key = item.key;

                            AttributeFilters.Add(new StringFilterObjectList
                            {
                                key = Key,
                                value = value
                            });
                        }
                    }
                    if (AttributeFilters != null && AttributeFilters.Count > 0)
                    {
                        //
                        // Library Dynamic Attributes...
                        //
                        List<TLIdynamicAtt> LibDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AttributeFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIradioRRULibrary.ToString(), x => x.tablesNames, x => x.DataType).ToList();

                        List<int> DynamicLibValueListIds = new List<int>();
                        bool DynamicLibExist = false;

                        if (LibDynamicAttListIds.Count > 0)
                        {
                            DynamicLibExist = true;
                            GetInventoriesIdsFromDynamicAttributes(out DynamicLibValueListIds, LibDynamicAttListIds, AttributeFilters);
                        }

                        //
                        // Library Attribute Activated...
                        //
                        bool AttrLibExist = typeof(RadioRRULibraryViewModel).GetProperties().ToList().Exists(x =>
                            AttributeFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower() && y.key.ToLower() != "id"));

                        List<int> LibraryAttributeActivatedIds = new List<int>();

                        if (AttrLibExist)
                        {
                            List<PropertyInfo> NonStringLibraryProps = typeof(RadioRRULibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() != "string" &&
                                AttributeFilters.Exists(y =>
                                    y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<PropertyInfo> StringLibraryProps = typeof(RadioRRULibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() == "string" &&
                                AttributeFilters.Exists(y =>
                                    y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<StringFilterObjectList> LibraryPropsAttributeFilters = AttributeFilters.Where(x =>
                                NonStringLibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower()) ||
                                StringLibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            LibraryAttributeActivatedIds = _unitOfWork.RadioRRULibraryRepository.GetWhere(x =>
                                 LibraryPropsAttributeFilters.All(z =>
                                    NonStringLibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (y.GetValue(_mapper.Map<RadioRRULibraryViewModel>(x), null) != null ? z.value.Contains(y.GetValue(_mapper.Map<RadioRRULibraryViewModel>(x), null).ToString().ToLower()) : false)) ||
                                    StringLibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (z.value.Any(w =>
                                         y.GetValue(_mapper.Map<RadioRRULibraryViewModel>(x), null) != null ? y.GetValue(_mapper.Map<RadioRRULibraryViewModel>(x), null).ToString().ToLower().StartsWith(w.ToLower()) : false))))
                             ).Select(i => i.Id).ToList();
                        }

                        //
                        // Library (Attribute Activated + Dynamic) Attributes...
                        //
                        List<int> IntersectLibraryIds = new List<int>();
                        if (AttrLibExist && DynamicLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds.Intersect(DynamicLibValueListIds).ToList();
                        }
                        else if (AttrLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds;
                        }
                        else if (DynamicLibExist)
                        {
                            IntersectLibraryIds = DynamicLibValueListIds;
                        }

                        WithoutDateFilterRadioRRULibraries = _mapper.Map<List<RadioRRULibraryViewModel>>(_unitOfWork.RadioRRULibraryRepository.GetWhere(x =>
                            x.Id > 0 && IntersectLibraryIds.Contains(x.Id) && !x.Deleted).ToList());
                    }

                    //
                    // DateTime Objects Filters..
                    //
                    List<DateFilterViewModel> AfterConvertDateFilters = new List<DateFilterViewModel>();
                    if (DateFilter != null ? DateFilter.Count() > 0 : false)
                    {
                        List<TLIattributeActivated> DateRadioRRULibraryAttribute = RadioRRULibraryAttribute.Where(x =>
                            x.DataType.ToLower() == "datetime").ToList();

                        foreach (DateFilterViewModel item in DateFilter)
                        {
                            DateTime DateFrom = Convert.ToDateTime(item.DateFrom);
                            DateTime DateTo = Convert.ToDateTime(item.DateTo);

                            if (DateFrom > DateTo)
                            {
                                DateTime Replacer = DateFrom;
                                DateFrom = DateTo;
                                DateTo = Replacer;
                            }

                            TLIattributeActivated AttributeKey = DateRadioRRULibraryAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());
                            string Key = "";

                            if (AttributeKey != null)
                                Key = AttributeKey.Key;
                            else
                                Key = item.key;

                            AfterConvertDateFilters.Add(new DateFilterViewModel
                            {
                                key = Key,
                                DateFrom = DateFrom,
                                DateTo = DateTo
                            });
                        }
                    }
                    if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                    {
                        //
                        // Library Dynamic Attributes...
                        //
                        List<TLIdynamicAtt> DateTimeLibDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AfterConvertDateFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIradioRRULibrary.ToString(), x => x.tablesNames).ToList();

                        List<int> DynamicLibValueListIds = new List<int>();
                        bool DynamicLibExist = false;

                        if (DateTimeLibDynamicAttListIds.Count > 0)
                        {
                            DynamicLibExist = true;
                            List<DateFilterViewModel> DynamicLibAttributeFilters = AfterConvertDateFilters.Where(x =>
                                DateTimeLibDynamicAttListIds.Exists(y => y.Key.ToLower() == x.key.ToLower())).ToList();

                            DynamicLibValueListIds = new List<int>();

                            List<TLIdynamicAttLibValue> DynamicLibValueListObjects = _unitOfWork.DynamicAttLibRepository.GetIncludeWhere(x =>
                                DateTimeLibDynamicAttListIds.Exists(y => y.Id == x.DynamicAttId) && !x.disable).ToList();

                            List<int> InventoriesIds = DynamicLibValueListObjects.Select(x => x.InventoryId).Distinct().ToList();

                            foreach (int InventoryId in InventoriesIds)
                            {
                                List<TLIdynamicAttLibValue> DynamicLibValueListInventories = DynamicLibValueListObjects.Where(x =>
                                    x.InventoryId == InventoryId).ToList();

                                if (DynamicLibAttributeFilters.All(y => DynamicLibValueListInventories.Exists(x =>
                                     (x.ValueDateTime != null ?
                                        (x.ValueDateTime >= y.DateFrom && x.ValueDateTime <= y.DateTo) : (false)))))
                                {
                                    DynamicLibValueListIds.Add(InventoryId);
                                }
                            }
                        }

                        //
                        // Library Attribute Activated...
                        //
                        List<PropertyInfo> LibraryProps = typeof(RadioRRULibraryViewModel).GetProperties().Where(x =>
                            AfterConvertDateFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower())).ToList();

                        List<int> LibraryAttributeActivatedIds = new List<int>();
                        bool AttrLibExist = false;

                        if (LibraryProps != null)
                        {
                            AttrLibExist = true;

                            List<DateFilterViewModel> LibraryPropsAttributeFilters = AfterConvertDateFilters.Where(x =>
                                LibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            LibraryAttributeActivatedIds = _unitOfWork.RadioRRULibraryRepository.GetIncludeWhere(x =>
                                LibraryPropsAttributeFilters.All(z =>
                                    (LibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && ((y.GetValue(_mapper.Map<RadioRRULibraryViewModel>(x), null) != null) ?
                                        ((z.DateFrom >= Convert.ToDateTime(y.GetValue(_mapper.Map<RadioRRULibraryViewModel>(x), null))) &&
                                         (z.DateTo <= Convert.ToDateTime(y.GetValue(_mapper.Map<RadioRRULibraryViewModel>(x), null)))) : (false)))))
                            ).Select(i => i.Id).ToList();
                        }

                        //
                        // Library (Attribute Activated + Dynamic) Attributes...
                        //
                        List<int> IntersectLibraryIds = new List<int>();
                        if (AttrLibExist && DynamicLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds.Intersect(DynamicLibValueListIds).ToList();
                        }
                        else if (AttrLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds;
                        }
                        else if (DynamicLibExist)
                        {
                            IntersectLibraryIds = DynamicLibValueListIds;
                        }

                        WithDateFilterRadioRRULibraries = _mapper.Map<List<RadioRRULibraryViewModel>>(_unitOfWork.RadioRRULibraryRepository.GetWhere(x =>
                            x.Id > 0 && IntersectLibraryIds.Contains(x.Id) && !x.Deleted).ToList());
                    }

                    //
                    // Intersect Between WithoutDateFilterRadioRRULibraries + WithDateFilterRadioRRULibraries To Get The Records That Meet The Filters (DateFilters + AttributeFilters)
                    //
                    if ((AttributeFilters != null ? AttributeFilters.Count() == 0 : true) &&
                        (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() == 0 : true))
                    {
                        RadioRRULibraries = _mapper.Map<List<RadioRRULibraryViewModel>>(_unitOfWork.RadioRRULibraryRepository.GetWhere(x =>
                            x.Id > 0 && !x.Deleted).ToList());
                    }
                    else if ((AttributeFilters != null ? AttributeFilters.Count > 0 : false) &&
                            (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false))
                    {
                        List<int> RadioRRUIds = WithoutDateFilterRadioRRULibraries.Select(x => x.Id).Intersect(WithDateFilterRadioRRULibraries.Select(x => x.Id)).ToList();
                        RadioRRULibraries = _mapper.Map<List<RadioRRULibraryViewModel>>(_unitOfWork.RadioRRULibraryRepository.GetWhere(x =>
                            RadioRRUIds.Contains(x.Id)).ToList());
                    }
                    else if (AttributeFilters != null ? AttributeFilters.Count > 0 : false)
                    {
                        RadioRRULibraries = WithoutDateFilterRadioRRULibraries;
                    }
                    else if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                    {
                        RadioRRULibraries = WithDateFilterRadioRRULibraries;
                    }

                    Count = RadioRRULibraries.Count();

                    RadioRRULibraries = RadioRRULibraries.Skip((parameterPagination.PageNumber - 1) * parameterPagination.PageSize).
                        Take(parameterPagination.PageSize).ToList();

                    List<TLIattributeViewManagment> AllAttributes = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                       (x.Enable && x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.RadioRRULibrary.ToString() &&
                       (x.AttributeActivatedId != null ?
                            (x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIradioRRULibrary.ToString() && x.AttributeActivated.enable) :
                            (x.DynamicAtt.LibraryAtt && !x.DynamicAtt.disable && x.DynamicAtt.tablesNames.TableName == Helpers.Constants.TablesNames.TLIradioRRULibrary.ToString()))) ||
                        (x.AttributeActivated != null ?
                            ((x.AttributeActivated.Key.ToLower() == "id" || x.AttributeActivated.Key.ToLower() == "active") && x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIradioRRULibrary.ToString()) : false),
                           x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1, x => x.EditableManagmentView.TLItablesNames2,
                           x => x.AttributeActivated, x => x.DynamicAtt, x => x.DynamicAtt.tablesNames, x => x.DynamicAtt.DataType).ToList();

                    List<TLIattributeViewManagment> NotDateTimeLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() != "datetime") : false).ToList();

                    List<TLIattributeViewManagment> NotDateTimeDynamicLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() != "datetime" : false).ToList();

                    List<TLIattributeViewManagment> DateTimeLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() == "datetime") : false).ToList();

                    List<TLIattributeViewManagment> DateTimeDynamicLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() == "datetime" : false).ToList();

                    foreach (RadioRRULibraryViewModel RadioRRULibraryViewModel in RadioRRULibraries)
                    {
                        dynamic DynamicRadioRRULibrary = new ExpandoObject();

                        //
                        // Library Object ViewModel... (Not DateTime DataType Attribute)
                        //
                        if (NotDateTimeLibraryAttributesViewModel != null ? NotDateTimeLibraryAttributesViewModel.Count > 0 : false)
                        {
                            List<PropertyInfo> LibraryProps = typeof(RadioRRULibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() != "datetime" :
                                    (x.PropertyType.Name.ToLower() != "datetime")) :
                                (x.PropertyType.Name.ToLower() != "datetime")).ToList();

                            foreach (PropertyInfo prop in LibraryProps)
                            {
                                if (prop.Name.ToLower().Contains("_name") &&
                                    NotDateTimeLibraryAttributesViewModel.Exists(x =>
                                        x.AttributeActivated.Label.ToLower() == prop.Name.ToLower()))
                                {
                                    object ForeignKeyNamePropObject = prop.GetValue(RadioRRULibraryViewModel, null);
                                    ((IDictionary<String, Object>)DynamicRadioRRULibrary).Add(new KeyValuePair<string, object>(prop.Name, ForeignKeyNamePropObject));
                                }
                                else if (NotDateTimeLibraryAttributesViewModel.Exists(x =>
                                     x.AttributeActivated.Key.ToLower() == prop.Name.ToLower()) &&
                                    !prop.Name.ToLower().Contains("_name") &&
                                    (prop.Name.ToLower().Substring(Math.Max(0, prop.Name.Length - 2)) != "id" || prop.Name.ToLower() == "id"))
                                {
                                    if (prop.Name.ToLower() != "id" && prop.Name.ToLower() != "active")
                                    {
                                        TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                            x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIradioRRULibrary.ToString() &&
                                            x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                        if (LabelName != null)
                                        {
                                            object PropObject = prop.GetValue(RadioRRULibraryViewModel, null);
                                            ((IDictionary<String, Object>)DynamicRadioRRULibrary).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                        }
                                    }
                                    else
                                    {
                                        object PropObject = prop.GetValue(RadioRRULibraryViewModel, null);
                                        ((IDictionary<String, Object>)DynamicRadioRRULibrary).Add(new KeyValuePair<string, object>(prop.Name, PropObject));
                                    }
                                }
                            }
                        }

                        //
                        // Library Dynamic Attributes... (Not DateTime DataType Attribute)
                        // 
                        List<TLIdynamicAtt> NotDateTimeLibraryDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                           !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIradioRRULibrary.ToString() &&
                            x.LibraryAtt && x.DataType.Name.ToLower() != "datetime" &&
                            NotDateTimeDynamicLibraryAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames, x => x.DataType).ToList();

                        foreach (var LibraryDynamicAtt in NotDateTimeLibraryDynamicAttributes)
                        {
                            TLIdynamicAttLibValue DynamicAttLibValue = _unitOfWork.DynamicAttLibRepository.GetIncludeWhereFirst(x =>
                                x.DynamicAttId == LibraryDynamicAtt.Id &&
                                x.InventoryId == RadioRRULibraryViewModel.Id && !x.disable &&
                                x.DynamicAtt.LibraryAtt &&
                                x.DynamicAtt.Key == LibraryDynamicAtt.Key,
                                    x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType);

                            if (DynamicAttLibValue != null)
                            {
                                dynamic DynamicAttValue = new ExpandoObject();

                                if (DynamicAttLibValue.ValueString != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueString;

                                else if (DynamicAttLibValue.ValueDouble != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDouble;

                                else if (DynamicAttLibValue.ValueDateTime != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDateTime;

                                else if (DynamicAttLibValue.ValueBoolean != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueBoolean;

                                ((IDictionary<String, Object>)DynamicRadioRRULibrary).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, DynamicAttValue));
                            }
                            else
                            {
                                ((IDictionary<String, Object>)DynamicRadioRRULibrary).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, null));
                            }
                        }

                        //
                        // Library Object ViewModel... (DateTime DataType Attribute)
                        //
                        dynamic DateTimeAttributes = new ExpandoObject();
                        if (DateTimeLibraryAttributesViewModel != null ? DateTimeLibraryAttributesViewModel.Count() > 0 : false)
                        {
                            List<PropertyInfo> DateTimeLibraryProps = typeof(RadioRRULibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name == "datetime" :
                                    (x.PropertyType.Name.ToLower() == "datetime")) :
                                (x.PropertyType.Name.ToLower() == "datetime")).ToList();

                            foreach (PropertyInfo prop in DateTimeLibraryProps)
                            {
                                TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                    x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIradioRRULibrary.ToString() &&
                                    x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                if (LabelName != null)
                                {
                                    object PropObject = prop.GetValue(RadioRRULibraryViewModel, null);
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                }
                            }
                        }

                        //
                        // Library Dynamic Attributes... (DateTime DataType Attribute)
                        // 
                        List<TLIdynamicAtt> LibraryDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                           !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIradioRRULibrary.ToString() &&
                            x.LibraryAtt && x.DataType.Name.ToLower() == "datetime" &&
                            DateTimeDynamicLibraryAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames).ToList();

                        foreach (TLIdynamicAtt LibraryDynamicAtt in LibraryDynamicAttributes)
                        {
                            TLIdynamicAttLibValue DynamicAttLibValue = _unitOfWork.DynamicAttLibRepository.GetIncludeWhereFirst(x =>
                                x.DynamicAttId == LibraryDynamicAtt.Id &&
                                x.InventoryId == RadioRRULibraryViewModel.Id && !x.disable &&
                                x.DynamicAtt.LibraryAtt &&
                                x.DynamicAtt.Key == LibraryDynamicAtt.Key,
                                    x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType);

                            if (DynamicAttLibValue != null)
                            {
                                dynamic DynamicAttValue = new ExpandoObject();
                                if (DynamicAttLibValue.ValueDateTime != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDateTime;

                                ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, DynamicAttValue));
                            }
                            else
                            {
                                ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, null));
                            }
                        }

                        ((IDictionary<String, Object>)DynamicRadioRRULibrary).Add(new KeyValuePair<string, object>("DateTimeAttributes", DateTimeAttributes));

                        OutPutList.Add(DynamicRadioRRULibrary);
                    }

                    RadioRRUTableDisplay.Model = OutPutList;
                    RadioRRUTableDisplay.filters = _unitOfWork.RadioRRULibraryRepository.GetRelatedTables();

                    return new Response<ReturnWithFilters<object>>(true, RadioRRUTableDisplay, null, null, (int)Helpers.Constants.ApiReturnCode.success, Count);
                }
                catch (Exception err)
                {
                    return new Response<ReturnWithFilters<object>>(false, null, null, err.Message, (int)Helpers.Constants.ApiReturnCode.fail);
                }
            }
            else if (Helpers.Constants.LoadSubType.TLIradioOtherLibrary.ToString() == TableNameLibrary)
            {
                try
                {
                    List<FilterObjectList> ObjectAttributeFilters = CombineFilters.filters;
                    List<DateFilterViewModel> DateFilter = CombineFilters.DateFilter;
                    int Count = 0;
                    List<object> OutPutList = new List<object>();
                    ReturnWithFilters<object> RadioOtherTableDisplay = new ReturnWithFilters<object>();

                    List<StringFilterObjectList> AttributeFilters = new List<StringFilterObjectList>();

                    List<RadioOtherLibraryViewModel> RadioOtherLibraries = new List<RadioOtherLibraryViewModel>();
                    List<RadioOtherLibraryViewModel> WithoutDateFilterRadioOtherLibraries = new List<RadioOtherLibraryViewModel>();
                    List<RadioOtherLibraryViewModel> WithDateFilterRadioOtherLibraries = new List<RadioOtherLibraryViewModel>();

                    List<TLIattributeActivated> RadioOtherLibraryAttribute = new List<TLIattributeActivated>();
                    if ((DateFilter != null ? DateFilter.Count() > 0 : false) ||
                        (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0))
                    {
                        RadioOtherLibraryAttribute = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                            x.Enable && x.AttributeActivatedId != null &&
                            x.AttributeActivated.DataType.ToLower() != "datetime" &&
                            x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.RadioOtherLibrary.ToString() &&
                            x.EditableManagmentView.TLItablesNames1.TableName == Helpers.Constants.TablesNames.TLIradioOtherLibrary.ToString(),
                                x => x.AttributeActivated, x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1)
                        .Select(x => x.AttributeActivated).ToList();
                    }

                    if (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0)
                    {
                        List<TLIattributeActivated> NotDateDateRadioOtherLibraryAttribute = RadioOtherLibraryAttribute.Where(x =>
                            x.DataType.ToLower() != "datetime").ToList();

                        foreach (FilterObjectList item in ObjectAttributeFilters)
                        {
                            List<string> value = item.value.Select(x => x.ToString().ToLower()).ToList();

                            TLIattributeActivated AttributeKey = NotDateDateRadioOtherLibraryAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());

                            string Key = "";

                            if (AttributeKey != null)
                                Key = AttributeKey.Key;

                            else
                                Key = item.key;

                            AttributeFilters.Add(new StringFilterObjectList
                            {
                                key = Key,
                                value = value
                            });
                        }
                    }
                    if (AttributeFilters != null && AttributeFilters.Count > 0)
                    {
                        //
                        // Library Dynamic Attributes...
                        //
                        List<TLIdynamicAtt> LibDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AttributeFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIradioOtherLibrary.ToString(), x => x.tablesNames, x => x.DataType).ToList();

                        List<int> DynamicLibValueListIds = new List<int>();
                        bool DynamicLibExist = false;

                        if (LibDynamicAttListIds.Count > 0)
                        {
                            DynamicLibExist = true;
                            GetInventoriesIdsFromDynamicAttributes(out DynamicLibValueListIds, LibDynamicAttListIds, AttributeFilters);
                        }

                        //
                        // Library Attribute Activated...
                        //
                        bool AttrLibExist = typeof(RadioOtherLibraryViewModel).GetProperties().ToList().Exists(x =>
                            AttributeFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower() && y.key.ToLower() != "id"));

                        List<int> LibraryAttributeActivatedIds = new List<int>();

                        if (AttrLibExist)
                        {
                            List<PropertyInfo> NonStringLibraryProps = typeof(RadioOtherLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() != "string" &&
                                AttributeFilters.Exists(y =>
                                    y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<PropertyInfo> StringLibraryProps = typeof(RadioOtherLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() == "string" &&
                                AttributeFilters.Exists(y =>
                                    y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<StringFilterObjectList> LibraryPropsAttributeFilters = AttributeFilters.Where(x =>
                                NonStringLibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower()) ||
                                StringLibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            LibraryAttributeActivatedIds = _unitOfWork.RadioOtherLibraryRepository.GetWhere(x =>
                                 LibraryPropsAttributeFilters.All(z =>
                                    NonStringLibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (y.GetValue(_mapper.Map<RadioOtherLibraryViewModel>(x), null) != null ? z.value.Contains(y.GetValue(_mapper.Map<RadioOtherLibraryViewModel>(x), null).ToString().ToLower()) : false)) ||
                                    StringLibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (z.value.Any(w =>
                                         y.GetValue(_mapper.Map<RadioOtherLibraryViewModel>(x), null) != null ? y.GetValue(_mapper.Map<RadioOtherLibraryViewModel>(x), null).ToString().ToLower().StartsWith(w.ToLower()) : false))))
                             ).Select(i => i.Id).ToList();
                        }

                        //
                        // Library (Attribute Activated + Dynamic) Attributes...
                        //
                        List<int> IntersectLibraryIds = new List<int>();
                        if (AttrLibExist && DynamicLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds.Intersect(DynamicLibValueListIds).ToList();
                        }
                        else if (AttrLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds;
                        }
                        else if (DynamicLibExist)
                        {
                            IntersectLibraryIds = DynamicLibValueListIds;
                        }

                        WithoutDateFilterRadioOtherLibraries = _mapper.Map<List<RadioOtherLibraryViewModel>>(_unitOfWork.RadioOtherLibraryRepository.GetWhere(x =>
                            x.Id > 0 && IntersectLibraryIds.Contains(x.Id) && !x.Deleted).ToList());
                    }

                    //
                    // DateTime Objects Filters..
                    //
                    List<DateFilterViewModel> AfterConvertDateFilters = new List<DateFilterViewModel>();
                    if (DateFilter != null ? DateFilter.Count() > 0 : false)
                    {
                        List<TLIattributeActivated> DateRadioOtherLibraryAttribute = RadioOtherLibraryAttribute.Where(x =>
                            x.DataType.ToLower() == "datetime").ToList();

                        foreach (DateFilterViewModel item in DateFilter)
                        {
                            DateTime DateFrom = Convert.ToDateTime(item.DateFrom);
                            DateTime DateTo = Convert.ToDateTime(item.DateTo);

                            if (DateFrom > DateTo)
                            {
                                DateTime Replacer = DateFrom;
                                DateFrom = DateTo;
                                DateTo = Replacer;
                            }

                            TLIattributeActivated AttributeKey = DateRadioOtherLibraryAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());
                            string Key = "";

                            if (AttributeKey != null)
                                Key = AttributeKey.Key;
                            else
                                Key = item.key;

                            AfterConvertDateFilters.Add(new DateFilterViewModel
                            {
                                key = Key,
                                DateFrom = DateFrom,
                                DateTo = DateTo
                            });
                        }
                    }
                    if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                    {
                        //
                        // Library Dynamic Attributes...
                        //
                        List<TLIdynamicAtt> DateTimeLibDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AfterConvertDateFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIradioOtherLibrary.ToString(), x => x.tablesNames).ToList();

                        List<int> DynamicLibValueListIds = new List<int>();
                        bool DynamicLibExist = false;

                        if (DateTimeLibDynamicAttListIds.Count > 0)
                        {
                            DynamicLibExist = true;
                            List<DateFilterViewModel> DynamicLibAttributeFilters = AfterConvertDateFilters.Where(x =>
                                DateTimeLibDynamicAttListIds.Exists(y => y.Key.ToLower() == x.key.ToLower())).ToList();

                            DynamicLibValueListIds = new List<int>();

                            List<TLIdynamicAttLibValue> DynamicLibValueListObjects = _unitOfWork.DynamicAttLibRepository.GetIncludeWhere(x =>
                                DateTimeLibDynamicAttListIds.Exists(y => y.Id == x.DynamicAttId) && !x.disable).ToList();

                            List<int> InventoriesIds = DynamicLibValueListObjects.Select(x => x.InventoryId).Distinct().ToList();

                            foreach (int InventoryId in InventoriesIds)
                            {
                                List<TLIdynamicAttLibValue> DynamicLibValueListInventories = DynamicLibValueListObjects.Where(x =>
                                    x.InventoryId == InventoryId).ToList();

                                if (DynamicLibAttributeFilters.All(y => DynamicLibValueListInventories.Exists(x =>
                                     (x.ValueDateTime != null ?
                                        (x.ValueDateTime >= y.DateFrom && x.ValueDateTime <= y.DateTo) : (false)))))
                                {
                                    DynamicLibValueListIds.Add(InventoryId);
                                }
                            }
                        }

                        //
                        // Library Attribute Activated...
                        //
                        List<PropertyInfo> LibraryProps = typeof(RadioOtherLibraryViewModel).GetProperties().Where(x =>
                            AfterConvertDateFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower())).ToList();

                        List<int> LibraryAttributeActivatedIds = new List<int>();
                        bool AttrLibExist = false;

                        if (LibraryProps != null)
                        {
                            AttrLibExist = true;

                            List<DateFilterViewModel> LibraryPropsAttributeFilters = AfterConvertDateFilters.Where(x =>
                                LibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            LibraryAttributeActivatedIds = _unitOfWork.RadioOtherLibraryRepository.GetIncludeWhere(x =>
                                LibraryPropsAttributeFilters.All(z =>
                                    (LibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && ((y.GetValue(_mapper.Map<RadioOtherLibraryViewModel>(x), null) != null) ?
                                        ((z.DateFrom >= Convert.ToDateTime(y.GetValue(_mapper.Map<RadioOtherLibraryViewModel>(x), null))) &&
                                         (z.DateTo <= Convert.ToDateTime(y.GetValue(_mapper.Map<RadioOtherLibraryViewModel>(x), null)))) : (false)))))
                            ).Select(i => i.Id).ToList();
                        }

                        //
                        // Library (Attribute Activated + Dynamic) Attributes...
                        //
                        List<int> IntersectLibraryIds = new List<int>();
                        if (AttrLibExist && DynamicLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds.Intersect(DynamicLibValueListIds).ToList();
                        }
                        else if (AttrLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds;
                        }
                        else if (DynamicLibExist)
                        {
                            IntersectLibraryIds = DynamicLibValueListIds;
                        }

                        WithDateFilterRadioOtherLibraries = _mapper.Map<List<RadioOtherLibraryViewModel>>(_unitOfWork.RadioOtherLibraryRepository.GetWhere(x =>
                            x.Id > 0 && IntersectLibraryIds.Contains(x.Id) && !x.Deleted).ToList());
                    }

                    //
                    // Intersect Between WithoutDateFilterRadioOtherLibraries + WithDateFilterRadioOtherLibraries To Get The Records That Meet The Filters (DateFilters + AttributeFilters)
                    //
                    if ((AttributeFilters != null ? AttributeFilters.Count() == 0 : true) &&
                        (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() == 0 : true))
                    {
                        RadioOtherLibraries = _mapper.Map<List<RadioOtherLibraryViewModel>>(_unitOfWork.RadioOtherLibraryRepository.GetWhere(x =>
                            x.Id > 0 && !x.Deleted).ToList());
                    }
                    else if ((AttributeFilters != null ? AttributeFilters.Count > 0 : false) &&
                            (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false))
                    {
                        List<int> RadioOtherIds = WithoutDateFilterRadioOtherLibraries.Select(x => x.Id).Intersect(WithDateFilterRadioOtherLibraries.Select(x => x.Id)).ToList();
                        RadioOtherLibraries = _mapper.Map<List<RadioOtherLibraryViewModel>>(_unitOfWork.RadioOtherLibraryRepository.GetWhere(x =>
                            RadioOtherIds.Contains(x.Id)).ToList());
                    }
                    else if (AttributeFilters != null ? AttributeFilters.Count > 0 : false)
                    {
                        RadioOtherLibraries = WithoutDateFilterRadioOtherLibraries;
                    }
                    else if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                    {
                        RadioOtherLibraries = WithDateFilterRadioOtherLibraries;
                    }

                    Count = RadioOtherLibraries.Count();

                    RadioOtherLibraries = RadioOtherLibraries.Skip((parameterPagination.PageNumber - 1) * parameterPagination.PageSize).
                        Take(parameterPagination.PageSize).ToList();

                    List<TLIattributeViewManagment> AllAttributes = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                       (x.Enable && x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.RadioOtherLibrary.ToString() &&
                       (x.AttributeActivatedId != null ?
                            (x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIradioOtherLibrary.ToString() && x.AttributeActivated.enable) :
                            (x.DynamicAtt.LibraryAtt && !x.DynamicAtt.disable && x.DynamicAtt.tablesNames.TableName == Helpers.Constants.TablesNames.TLIradioOtherLibrary.ToString()))) ||
                        (x.AttributeActivated != null ?
                            ((x.AttributeActivated.Key.ToLower() == "id" || x.AttributeActivated.Key.ToLower() == "active") && x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIradioOtherLibrary.ToString()) : false),
                           x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1, x => x.EditableManagmentView.TLItablesNames2,
                           x => x.AttributeActivated, x => x.DynamicAtt, x => x.DynamicAtt.tablesNames, x => x.DynamicAtt.DataType).ToList();

                    List<TLIattributeViewManagment> NotDateTimeLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() != "datetime") : false).ToList();

                    List<TLIattributeViewManagment> NotDateTimeDynamicLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() != "datetime" : false).ToList();

                    List<TLIattributeViewManagment> DateTimeLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() == "datetime") : false).ToList();

                    List<TLIattributeViewManagment> DateTimeDynamicLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() == "datetime" : false).ToList();

                    foreach (RadioOtherLibraryViewModel RadioOtherLibraryViewModel in RadioOtherLibraries)
                    {
                        dynamic DynamicRadioOtherLibrary = new ExpandoObject();

                        //
                        // Library Object ViewModel... (Not DateTime DataType Attribute)
                        //
                        if (NotDateTimeLibraryAttributesViewModel != null ? NotDateTimeLibraryAttributesViewModel.Count > 0 : false)
                        {
                            List<PropertyInfo> LibraryProps = typeof(RadioOtherLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() != "datetime" :
                                    (x.PropertyType.Name.ToLower() != "datetime")) :
                                (x.PropertyType.Name.ToLower() != "datetime")).ToList();

                            foreach (PropertyInfo prop in LibraryProps)
                            {
                                if (prop.Name.ToLower().Contains("_name") &&
                                    NotDateTimeLibraryAttributesViewModel.Exists(x =>
                                        x.AttributeActivated.Label.ToLower() == prop.Name.ToLower()))
                                {
                                    object ForeignKeyNamePropObject = prop.GetValue(RadioOtherLibraryViewModel, null);
                                    ((IDictionary<String, Object>)DynamicRadioOtherLibrary).Add(new KeyValuePair<string, object>(prop.Name, ForeignKeyNamePropObject));
                                }
                                else if (NotDateTimeLibraryAttributesViewModel.Exists(x =>
                                     x.AttributeActivated.Key.ToLower() == prop.Name.ToLower()) &&
                                    !prop.Name.ToLower().Contains("_name") &&
                                    (prop.Name.ToLower().Substring(Math.Max(0, prop.Name.Length - 2)) != "id" || prop.Name.ToLower() == "id"))
                                {
                                    if (prop.Name.ToLower() != "id" && prop.Name.ToLower() != "active")
                                    {
                                        TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                            x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIradioOtherLibrary.ToString() &&
                                            x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                        if (LabelName != null)
                                        {
                                            object PropObject = prop.GetValue(RadioOtherLibraryViewModel, null);
                                            ((IDictionary<String, Object>)DynamicRadioOtherLibrary).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                        }
                                    }
                                    else
                                    {
                                        object PropObject = prop.GetValue(RadioOtherLibraryViewModel, null);
                                        ((IDictionary<String, Object>)DynamicRadioOtherLibrary).Add(new KeyValuePair<string, object>(prop.Name, PropObject));
                                    }
                                }
                            }
                        }

                        //
                        // Library Dynamic Attributes... (Not DateTime DataType Attribute)
                        // 
                        List<TLIdynamicAtt> NotDateTimeLibraryDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                           !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIradioOtherLibrary.ToString() &&
                            x.LibraryAtt && x.DataType.Name.ToLower() != "datetime" &&
                            NotDateTimeDynamicLibraryAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames, x => x.DataType).ToList();

                        foreach (var LibraryDynamicAtt in NotDateTimeLibraryDynamicAttributes)
                        {
                            TLIdynamicAttLibValue DynamicAttLibValue = _unitOfWork.DynamicAttLibRepository.GetIncludeWhereFirst(x =>
                                x.DynamicAttId == LibraryDynamicAtt.Id &&
                                x.InventoryId == RadioOtherLibraryViewModel.Id && !x.disable &&
                                x.DynamicAtt.LibraryAtt &&
                                x.DynamicAtt.Key == LibraryDynamicAtt.Key,
                                    x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType);

                            if (DynamicAttLibValue != null)
                            {
                                dynamic DynamicAttValue = new ExpandoObject();

                                if (DynamicAttLibValue.ValueString != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueString;

                                else if (DynamicAttLibValue.ValueDouble != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDouble;

                                else if (DynamicAttLibValue.ValueDateTime != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDateTime;

                                else if (DynamicAttLibValue.ValueBoolean != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueBoolean;

                                ((IDictionary<String, Object>)DynamicRadioOtherLibrary).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, DynamicAttValue));
                            }
                            else
                            {
                                ((IDictionary<String, Object>)DynamicRadioOtherLibrary).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, null));
                            }
                        }

                        //
                        // Library Object ViewModel... (DateTime DataType Attribute)
                        //
                        dynamic DateTimeAttributes = new ExpandoObject();
                        if (DateTimeLibraryAttributesViewModel != null ? DateTimeLibraryAttributesViewModel.Count() > 0 : false)
                        {
                            List<PropertyInfo> DateTimeLibraryProps = typeof(RadioOtherLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name == "datetime" :
                                    (x.PropertyType.Name.ToLower() == "datetime")) :
                                (x.PropertyType.Name.ToLower() == "datetime")).ToList();

                            foreach (PropertyInfo prop in DateTimeLibraryProps)
                            {
                                TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                    x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIradioOtherLibrary.ToString() &&
                                    x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                if (LabelName != null)
                                {
                                    object PropObject = prop.GetValue(RadioOtherLibraryViewModel, null);
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                }
                            }
                        }

                        //
                        // Library Dynamic Attributes... (DateTime DataType Attribute)
                        // 
                        List<TLIdynamicAtt> LibraryDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                           !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIradioOtherLibrary.ToString() &&
                            x.LibraryAtt && x.DataType.Name.ToLower() == "datetime" &&
                            DateTimeDynamicLibraryAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames).ToList();

                        foreach (TLIdynamicAtt LibraryDynamicAtt in LibraryDynamicAttributes)
                        {
                            TLIdynamicAttLibValue DynamicAttLibValue = _unitOfWork.DynamicAttLibRepository.GetIncludeWhereFirst(x =>
                                x.DynamicAttId == LibraryDynamicAtt.Id &&
                                x.InventoryId == RadioOtherLibraryViewModel.Id && !x.disable &&
                                x.DynamicAtt.LibraryAtt &&
                                x.DynamicAtt.Key == LibraryDynamicAtt.Key,
                                    x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType);

                            if (DynamicAttLibValue != null)
                            {
                                dynamic DynamicAttValue = new ExpandoObject();
                                if (DynamicAttLibValue.ValueDateTime != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDateTime;

                                ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, DynamicAttValue));
                            }
                            else
                            {
                                ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, null));
                            }
                        }

                        ((IDictionary<String, Object>)DynamicRadioOtherLibrary).Add(new KeyValuePair<string, object>("DateTimeAttributes", DateTimeAttributes));

                        OutPutList.Add(DynamicRadioOtherLibrary);
                    }

                    RadioOtherTableDisplay.Model = OutPutList;
                    RadioOtherTableDisplay.filters = _unitOfWork.RadioOtherLibraryRepository.GetRelatedTables();

                    return new Response<ReturnWithFilters<object>>(true, RadioOtherTableDisplay, null, null, (int)Helpers.Constants.ApiReturnCode.success, Count);
                }
                catch (Exception err)
                {
                    return new Response<ReturnWithFilters<object>>(false, null, null, err.Message, (int)Helpers.Constants.ApiReturnCode.fail);
                }
            }
            else if (Helpers.Constants.LoadSubType.TLIsideArmLibrary.ToString() == TableNameLibrary)
            {
                try
                {
                    List<FilterObjectList> ObjectAttributeFilters = CombineFilters.filters;
                    List<DateFilterViewModel> DateFilter = CombineFilters.DateFilter;
                    int Count = 0;
                    List<object> OutPutList = new List<object>();
                    ReturnWithFilters<object> SideArmTableDisplay = new ReturnWithFilters<object>();

                    List<StringFilterObjectList> AttributeFilters = new List<StringFilterObjectList>();

                    List<SideArmLibraryViewModel> SideArmLibraries = new List<SideArmLibraryViewModel>();
                    List<SideArmLibraryViewModel> WithoutDateFilterSideArmLibraries = new List<SideArmLibraryViewModel>();
                    List<SideArmLibraryViewModel> WithDateFilterSideArmLibraries = new List<SideArmLibraryViewModel>();

                    List<TLIattributeActivated> SideArmLibraryAttribute = new List<TLIattributeActivated>();
                    if ((DateFilter != null ? DateFilter.Count() > 0 : false) ||
                        (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0))
                    {
                        SideArmLibraryAttribute = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                            x.Enable && x.AttributeActivatedId != null &&
                            x.AttributeActivated.DataType.ToLower() != "datetime" &&
                            x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.SideArmLibrary.ToString() &&
                            x.EditableManagmentView.TLItablesNames1.TableName == TablesNames.TLIsideArmLibrary.ToString(),
                                x => x.AttributeActivated, x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1)
                        .Select(x => x.AttributeActivated).ToList();
                    }

                    if (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0)
                    {
                        List<TLIattributeActivated> NotDateDateSideArmLibraryAttribute = SideArmLibraryAttribute.Where(x =>
                            x.DataType.ToLower() != "datetime").ToList();

                        foreach (FilterObjectList item in ObjectAttributeFilters)
                        {
                            List<string> value = item.value.Select(x => x.ToString().ToLower()).ToList();

                            TLIattributeActivated AttributeKey = NotDateDateSideArmLibraryAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());

                            string Key = "";

                            if (AttributeKey != null)
                                Key = AttributeKey.Key;

                            else
                                Key = item.key;

                            AttributeFilters.Add(new StringFilterObjectList
                            {
                                key = Key,
                                value = value
                            });
                        }
                    }
                    if (AttributeFilters != null && AttributeFilters.Count > 0)
                    {
                        //
                        // Library Dynamic Attributes...
                        //
                        List<TLIdynamicAtt> LibDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AttributeFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == TablesNames.TLIsideArmLibrary.ToString(), x => x.tablesNames, x => x.DataType).ToList();

                        List<int> DynamicLibValueListIds = new List<int>();
                        bool DynamicLibExist = false;

                        if (LibDynamicAttListIds.Count > 0)
                        {
                            DynamicLibExist = true;
                            GetInventoriesIdsFromDynamicAttributes(out DynamicLibValueListIds, LibDynamicAttListIds, AttributeFilters);
                        }

                        //
                        // Library Attribute Activated...
                        //
                        bool AttrLibExist = typeof(SideArmLibraryViewModel).GetProperties().ToList().Exists(x =>
                            AttributeFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower() && y.key.ToLower() != "id"));

                        List<int> LibraryAttributeActivatedIds = new List<int>();

                        if (AttrLibExist)
                        {
                            List<PropertyInfo> NonStringLibraryProps = typeof(SideArmLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() != "string" &&
                                AttributeFilters.Exists(y =>
                                    y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<PropertyInfo> StringLibraryProps = typeof(SideArmLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() == "string" &&
                                AttributeFilters.Exists(y =>
                                    y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<StringFilterObjectList> LibraryPropsAttributeFilters = AttributeFilters.Where(x =>
                                NonStringLibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower()) ||
                                StringLibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            LibraryAttributeActivatedIds = _unitOfWork.SideArmLibraryRepository.GetWhere(x =>
                                 LibraryPropsAttributeFilters.All(z =>
                                    NonStringLibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (y.GetValue(_mapper.Map<SideArmLibraryViewModel>(x), null) != null ? z.value.Contains(y.GetValue(_mapper.Map<SideArmLibraryViewModel>(x), null).ToString().ToLower()) : false)) ||
                                    StringLibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (z.value.Any(w =>
                                         y.GetValue(_mapper.Map<SideArmLibraryViewModel>(x), null) != null ? y.GetValue(_mapper.Map<SideArmLibraryViewModel>(x), null).ToString().ToLower().StartsWith(w.ToLower()) : false))))
                             ).Select(i => i.Id).ToList();
                        }

                        //
                        // Library (Attribute Activated + Dynamic) Attributes...
                        //
                        List<int> IntersectLibraryIds = new List<int>();
                        if (AttrLibExist && DynamicLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds.Intersect(DynamicLibValueListIds).ToList();
                        }
                        else if (AttrLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds;
                        }
                        else if (DynamicLibExist)
                        {
                            IntersectLibraryIds = DynamicLibValueListIds;
                        }

                        WithoutDateFilterSideArmLibraries = _mapper.Map<List<SideArmLibraryViewModel>>(_unitOfWork.SideArmLibraryRepository.GetWhere(x =>
                            x.Id > 0 && IntersectLibraryIds.Contains(x.Id) && !x.Deleted).ToList());
                    }

                    //
                    // DateTime Objects Filters..
                    //
                    List<DateFilterViewModel> AfterConvertDateFilters = new List<DateFilterViewModel>();
                    if (DateFilter != null ? DateFilter.Count() > 0 : false)
                    {
                        List<TLIattributeActivated> DateSideArmLibraryAttribute = SideArmLibraryAttribute.Where(x =>
                            x.DataType.ToLower() == "datetime").ToList();

                        foreach (DateFilterViewModel item in DateFilter)
                        {
                            DateTime DateFrom = Convert.ToDateTime(item.DateFrom);
                            DateTime DateTo = Convert.ToDateTime(item.DateTo);

                            if (DateFrom > DateTo)
                            {
                                DateTime Replacer = DateFrom;
                                DateFrom = DateTo;
                                DateTo = Replacer;
                            }

                            TLIattributeActivated AttributeKey = DateSideArmLibraryAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());
                            string Key = "";

                            if (AttributeKey != null)
                                Key = AttributeKey.Key;
                            else
                                Key = item.key;

                            AfterConvertDateFilters.Add(new DateFilterViewModel
                            {
                                key = Key,
                                DateFrom = DateFrom,
                                DateTo = DateTo
                            });
                        }
                    }
                    if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                    {
                        //
                        // Library Dynamic Attributes...
                        //
                        List<TLIdynamicAtt> DateTimeLibDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AfterConvertDateFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == TablesNames.TLIsideArmLibrary.ToString(), x => x.tablesNames).ToList();

                        List<int> DynamicLibValueListIds = new List<int>();
                        bool DynamicLibExist = false;

                        if (DateTimeLibDynamicAttListIds.Count > 0)
                        {
                            DynamicLibExist = true;
                            List<DateFilterViewModel> DynamicLibAttributeFilters = AfterConvertDateFilters.Where(x =>
                                DateTimeLibDynamicAttListIds.Exists(y => y.Key.ToLower() == x.key.ToLower())).ToList();

                            DynamicLibValueListIds = new List<int>();

                            List<TLIdynamicAttLibValue> DynamicLibValueListObjects = _unitOfWork.DynamicAttLibRepository.GetIncludeWhere(x =>
                                DateTimeLibDynamicAttListIds.Exists(y => y.Id == x.DynamicAttId) && !x.disable).ToList();

                            List<int> InventoriesIds = DynamicLibValueListObjects.Select(x => x.InventoryId).Distinct().ToList();

                            foreach (int InventoryId in InventoriesIds)
                            {
                                List<TLIdynamicAttLibValue> DynamicLibValueListInventories = DynamicLibValueListObjects.Where(x =>
                                    x.InventoryId == InventoryId).ToList();

                                if (DynamicLibAttributeFilters.All(y => DynamicLibValueListInventories.Exists(x =>
                                     (x.ValueDateTime != null ?
                                        (x.ValueDateTime >= y.DateFrom && x.ValueDateTime <= y.DateTo) : (false)))))
                                {
                                    DynamicLibValueListIds.Add(InventoryId);
                                }
                            }
                        }

                        //
                        // Library Attribute Activated...
                        //
                        List<PropertyInfo> LibraryProps = typeof(SideArmLibraryViewModel).GetProperties().Where(x =>
                            AfterConvertDateFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower())).ToList();

                        List<int> LibraryAttributeActivatedIds = new List<int>();
                        bool AttrLibExist = false;

                        if (LibraryProps != null)
                        {
                            AttrLibExist = true;

                            List<DateFilterViewModel> LibraryPropsAttributeFilters = AfterConvertDateFilters.Where(x =>
                                LibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            LibraryAttributeActivatedIds = _unitOfWork.SideArmLibraryRepository.GetIncludeWhere(x =>
                                LibraryPropsAttributeFilters.All(z =>
                                    (LibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && ((y.GetValue(_mapper.Map<SideArmLibraryViewModel>(x), null) != null) ?
                                        ((z.DateFrom >= Convert.ToDateTime(y.GetValue(_mapper.Map<SideArmLibraryViewModel>(x), null))) &&
                                         (z.DateTo <= Convert.ToDateTime(y.GetValue(_mapper.Map<SideArmLibraryViewModel>(x), null)))) : (false)))))
                            ).Select(i => i.Id).ToList();
                        }

                        //
                        // Library (Attribute Activated + Dynamic) Attributes...
                        //
                        List<int> IntersectLibraryIds = new List<int>();
                        if (AttrLibExist && DynamicLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds.Intersect(DynamicLibValueListIds).ToList();
                        }
                        else if (AttrLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds;
                        }
                        else if (DynamicLibExist)
                        {
                            IntersectLibraryIds = DynamicLibValueListIds;
                        }

                        WithDateFilterSideArmLibraries = _mapper.Map<List<SideArmLibraryViewModel>>(_unitOfWork.SideArmLibraryRepository.GetWhere(x =>
                            x.Id > 0 && IntersectLibraryIds.Contains(x.Id) && !x.Deleted).ToList());
                    }

                    //
                    // Intersect Between WithoutDateFilterSideArmLibraries + WithDateFilterSideArmLibraries To Get The Records That Meet The Filters (DateFilters + AttributeFilters)
                    //
                    if ((AttributeFilters != null ? AttributeFilters.Count() == 0 : true) &&
                        (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() == 0 : true))
                    {
                        SideArmLibraries = _mapper.Map<List<SideArmLibraryViewModel>>(_unitOfWork.SideArmLibraryRepository.GetWhere(x =>
                            x.Id > 0 && !x.Deleted).ToList());
                    }
                    else if ((AttributeFilters != null ? AttributeFilters.Count > 0 : false) &&
                            (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false))
                    {
                        List<int> SideArmIds = WithoutDateFilterSideArmLibraries.Select(x => x.Id).Intersect(WithDateFilterSideArmLibraries.Select(x => x.Id)).ToList();
                        SideArmLibraries = _mapper.Map<List<SideArmLibraryViewModel>>(_unitOfWork.SideArmLibraryRepository.GetWhere(x =>
                            SideArmIds.Contains(x.Id)).ToList());
                    }
                    else if (AttributeFilters != null ? AttributeFilters.Count > 0 : false)
                    {
                        SideArmLibraries = WithoutDateFilterSideArmLibraries;
                    }
                    else if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                    {
                        SideArmLibraries = WithDateFilterSideArmLibraries;
                    }

                    Count = SideArmLibraries.Count();

                    SideArmLibraries = SideArmLibraries.Skip((parameterPagination.PageNumber - 1) * parameterPagination.PageSize).
                        Take(parameterPagination.PageSize).ToList();

                    List<TLIattributeViewManagment> AllAttributes = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                       (x.Enable && x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.SideArmLibrary.ToString() &&
                       (x.AttributeActivatedId != null ?
                            (x.AttributeActivated.Tabel == TablesNames.TLIsideArmLibrary.ToString() && x.AttributeActivated.enable) :
                            (x.DynamicAtt.LibraryAtt && !x.DynamicAtt.disable && x.DynamicAtt.tablesNames.TableName == TablesNames.TLIsideArmLibrary.ToString()))) ||
                        (x.AttributeActivated != null ?
                            ((x.AttributeActivated.Key.ToLower() == "id" || x.AttributeActivated.Key.ToLower() == "active") && x.AttributeActivated.Tabel == TablesNames.TLIsideArmLibrary.ToString()) : false),
                           x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1, x => x.EditableManagmentView.TLItablesNames2,
                           x => x.AttributeActivated, x => x.DynamicAtt, x => x.DynamicAtt.tablesNames, x => x.DynamicAtt.DataType).ToList();

                    List<TLIattributeViewManagment> NotDateTimeLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() != "datetime") : false).ToList();

                    List<TLIattributeViewManagment> NotDateTimeDynamicLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() != "datetime" : false).ToList();

                    List<TLIattributeViewManagment> DateTimeLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() == "datetime") : false).ToList();

                    List<TLIattributeViewManagment> DateTimeDynamicLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() == "datetime" : false).ToList();

                    foreach (SideArmLibraryViewModel SideArmLibraryViewModel in SideArmLibraries)
                    {
                        dynamic DynamicSideArmLibrary = new ExpandoObject();

                        //
                        // Library Object ViewModel... (Not DateTime DataType Attribute)
                        //
                        if (NotDateTimeLibraryAttributesViewModel != null ? NotDateTimeLibraryAttributesViewModel.Count > 0 : false)
                        {
                            List<PropertyInfo> LibraryProps = typeof(SideArmLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() != "datetime" :
                                    (x.PropertyType.Name.ToLower() != "datetime")) :
                                (x.PropertyType.Name.ToLower() != "datetime")).ToList();

                            foreach (PropertyInfo prop in LibraryProps)
                            {
                                if (prop.Name.ToLower().Contains("_name") &&
                                    NotDateTimeLibraryAttributesViewModel.Exists(x =>
                                        x.AttributeActivated.Label.ToLower() == prop.Name.ToLower()))
                                {
                                    object ForeignKeyNamePropObject = prop.GetValue(SideArmLibraryViewModel, null);
                                    ((IDictionary<String, Object>)DynamicSideArmLibrary).Add(new KeyValuePair<string, object>(prop.Name, ForeignKeyNamePropObject));
                                }
                                else if (NotDateTimeLibraryAttributesViewModel.Exists(x =>
                                     x.AttributeActivated.Key.ToLower() == prop.Name.ToLower()) &&
                                    !prop.Name.ToLower().Contains("_name") &&
                                    (prop.Name.ToLower().Substring(Math.Max(0, prop.Name.Length - 2)) != "id" || prop.Name.ToLower() == "id"))
                                {
                                    if (prop.Name.ToLower() != "id" && prop.Name.ToLower() != "active")
                                    {
                                        TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                            x.AttributeActivated.Tabel == TablesNames.TLIsideArmLibrary.ToString() &&
                                            x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                        if (LabelName != null)
                                        {
                                            object PropObject = prop.GetValue(SideArmLibraryViewModel, null);
                                            ((IDictionary<String, Object>)DynamicSideArmLibrary).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                        }
                                    }
                                    else
                                    {
                                        object PropObject = prop.GetValue(SideArmLibraryViewModel, null);
                                        ((IDictionary<String, Object>)DynamicSideArmLibrary).Add(new KeyValuePair<string, object>(prop.Name, PropObject));
                                    }
                                }
                            }
                        }

                        //
                        // Library Dynamic Attributes... (Not DateTime DataType Attribute)
                        // 
                        List<TLIdynamicAtt> NotDateTimeLibraryDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                           !x.disable && x.tablesNames.TableName == TablesNames.TLIsideArmLibrary.ToString() &&
                            x.LibraryAtt && x.DataType.Name.ToLower() != "datetime" &&
                            NotDateTimeDynamicLibraryAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames, x => x.DataType).ToList();

                        foreach (var LibraryDynamicAtt in NotDateTimeLibraryDynamicAttributes)
                        {
                            TLIdynamicAttLibValue DynamicAttLibValue = _unitOfWork.DynamicAttLibRepository.GetIncludeWhereFirst(x =>
                                x.DynamicAttId == LibraryDynamicAtt.Id &&
                                x.InventoryId == SideArmLibraryViewModel.Id && !x.disable &&
                                x.DynamicAtt.LibraryAtt &&
                                x.DynamicAtt.Key == LibraryDynamicAtt.Key,
                                    x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType);

                            if (DynamicAttLibValue != null)
                            {
                                dynamic DynamicAttValue = new ExpandoObject();

                                if (DynamicAttLibValue.ValueString != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueString;

                                else if (DynamicAttLibValue.ValueDouble != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDouble;

                                else if (DynamicAttLibValue.ValueDateTime != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDateTime;

                                else if (DynamicAttLibValue.ValueBoolean != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueBoolean;

                                ((IDictionary<String, Object>)DynamicSideArmLibrary).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, DynamicAttValue));
                            }
                            else
                            {
                                ((IDictionary<String, Object>)DynamicSideArmLibrary).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, null));
                            }
                        }

                        //
                        // Library Object ViewModel... (DateTime DataType Attribute)
                        //
                        dynamic DateTimeAttributes = new ExpandoObject();
                        if (DateTimeLibraryAttributesViewModel != null ? DateTimeLibraryAttributesViewModel.Count() > 0 : false)
                        {
                            List<PropertyInfo> DateTimeLibraryProps = typeof(SideArmLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name == "datetime" :
                                    (x.PropertyType.Name.ToLower() == "datetime")) :
                                (x.PropertyType.Name.ToLower() == "datetime")).ToList();

                            foreach (PropertyInfo prop in DateTimeLibraryProps)
                            {
                                TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                    x.AttributeActivated.Tabel == TablesNames.TLIsideArmLibrary.ToString() &&
                                    x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                if (LabelName != null)
                                {
                                    object PropObject = prop.GetValue(SideArmLibraryViewModel, null);
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                }
                            }
                        }

                        //
                        // Library Dynamic Attributes... (DateTime DataType Attribute)
                        // 
                        List<TLIdynamicAtt> LibraryDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                           !x.disable && x.tablesNames.TableName == TablesNames.TLIsideArmLibrary.ToString() &&
                            x.LibraryAtt && x.DataType.Name.ToLower() == "datetime" &&
                            DateTimeDynamicLibraryAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames).ToList();

                        foreach (TLIdynamicAtt LibraryDynamicAtt in LibraryDynamicAttributes)
                        {
                            TLIdynamicAttLibValue DynamicAttLibValue = _unitOfWork.DynamicAttLibRepository.GetIncludeWhereFirst(x =>
                                x.DynamicAttId == LibraryDynamicAtt.Id &&
                                x.InventoryId == SideArmLibraryViewModel.Id && !x.disable &&
                                x.DynamicAtt.LibraryAtt &&
                                x.DynamicAtt.Key == LibraryDynamicAtt.Key,
                                    x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType);

                            if (DynamicAttLibValue != null)
                            {
                                dynamic DynamicAttValue = new ExpandoObject();
                                if (DynamicAttLibValue.ValueDateTime != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDateTime;

                                ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, DynamicAttValue));
                            }
                            else
                            {
                                ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, null));
                            }
                        }

                        ((IDictionary<String, Object>)DynamicSideArmLibrary).Add(new KeyValuePair<string, object>("DateTimeAttributes", DateTimeAttributes));

                        OutPutList.Add(DynamicSideArmLibrary);
                    }

                    SideArmTableDisplay.Model = OutPutList;
                    SideArmTableDisplay.filters = _unitOfWork.SideArmLibraryRepository.GetRelatedTables();

                    return new Response<ReturnWithFilters<object>>(true, SideArmTableDisplay, null, null, (int)Helpers.Constants.ApiReturnCode.success, Count);
                }
                catch (Exception err)
                {
                    return new Response<ReturnWithFilters<object>>(false, null, null, err.Message, (int)Helpers.Constants.ApiReturnCode.fail);
                }
            }
            else if (Helpers.Constants.LoadSubType.TLImwBULibrary.ToString() == TableNameLibrary)
            {
                try
                {
                    List<FilterObjectList> ObjectAttributeFilters = CombineFilters.filters;
                    List<DateFilterViewModel> DateFilter = CombineFilters.DateFilter;
                    int Count = 0;
                    List<object> OutPutList = new List<object>();
                    ReturnWithFilters<object> MW_BUTableDisplay = new ReturnWithFilters<object>();

                    List<StringFilterObjectList> AttributeFilters = new List<StringFilterObjectList>();

                    List<MW_BULibraryViewModel> MW_BULibraries = new List<MW_BULibraryViewModel>();
                    List<MW_BULibraryViewModel> WithoutDateFilterMW_BULibraries = new List<MW_BULibraryViewModel>();
                    List<MW_BULibraryViewModel> WithDateFilterMW_BULibraries = new List<MW_BULibraryViewModel>();

                    List<TLIattributeActivated> MW_BULibraryAttribute = new List<TLIattributeActivated>();
                    if ((DateFilter != null ? DateFilter.Count() > 0 : false) ||
                        (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0))
                    {
                        MW_BULibraryAttribute = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                            x.Enable && x.AttributeActivatedId != null &&
                            x.AttributeActivated.DataType.ToLower() != "datetime" &&
                            x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.MW_BULibrary.ToString() &&
                            x.EditableManagmentView.TLItablesNames1.TableName == TablesNames.TLImwBULibrary.ToString(),
                                x => x.AttributeActivated, x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1)
                        .Select(x => x.AttributeActivated).ToList();
                    }

                    if (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0)
                    {
                        List<TLIattributeActivated> NotDateDateMW_BULibraryAttribute = MW_BULibraryAttribute.Where(x =>
                            x.DataType.ToLower() != "datetime").ToList();

                        foreach (FilterObjectList item in ObjectAttributeFilters)
                        {
                            List<string> value = item.value.Select(x => x.ToString().ToLower()).ToList();

                            TLIattributeActivated AttributeKey = NotDateDateMW_BULibraryAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());

                            string Key = "";

                            if (AttributeKey != null)
                                Key = AttributeKey.Key;

                            else
                                Key = item.key;

                            AttributeFilters.Add(new StringFilterObjectList
                            {
                                key = Key,
                                value = value
                            });
                        }
                    }
                    if (AttributeFilters != null && AttributeFilters.Count > 0)
                    {
                        //
                        // Library Dynamic Attributes...
                        //
                        List<TLIdynamicAtt> LibDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AttributeFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == TablesNames.TLImwBULibrary.ToString(), x => x.tablesNames, x => x.DataType).ToList();

                        List<int> DynamicLibValueListIds = new List<int>();
                        bool DynamicLibExist = false;

                        if (LibDynamicAttListIds.Count > 0)
                        {
                            DynamicLibExist = true;
                            GetInventoriesIdsFromDynamicAttributes(out DynamicLibValueListIds, LibDynamicAttListIds, AttributeFilters);
                        }

                        //
                        // Library Attribute Activated...
                        //
                        bool AttrLibExist = typeof(MW_BULibraryViewModel).GetProperties().ToList().Exists(x =>
                            AttributeFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower() && y.key.ToLower() != "id"));

                        List<int> LibraryAttributeActivatedIds = new List<int>();

                        if (AttrLibExist)
                        {
                            List<PropertyInfo> NonStringLibraryProps = typeof(MW_BULibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() != "string" &&
                                AttributeFilters.Exists(y =>
                                    y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<PropertyInfo> StringLibraryProps = typeof(MW_BULibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() == "string" &&
                                AttributeFilters.Exists(y =>
                                    y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<StringFilterObjectList> LibraryPropsAttributeFilters = AttributeFilters.Where(x =>
                                NonStringLibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower()) ||
                                StringLibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            LibraryAttributeActivatedIds = _unitOfWork.MW_BULibraryRepository.GetWhere(x =>
                                 LibraryPropsAttributeFilters.All(z =>
                                    NonStringLibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (y.GetValue(_mapper.Map<MW_BULibraryViewModel>(x), null) != null ? z.value.Contains(y.GetValue(_mapper.Map<MW_BULibraryViewModel>(x), null).ToString().ToLower()) : false)) ||
                                    StringLibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (z.value.Any(w =>
                                         y.GetValue(_mapper.Map<MW_BULibraryViewModel>(x), null) != null ? y.GetValue(_mapper.Map<MW_BULibraryViewModel>(x), null).ToString().ToLower().StartsWith(w.ToLower()) : false))))
                             ).Select(i => i.Id).ToList();
                        }

                        //
                        // Library (Attribute Activated + Dynamic) Attributes...
                        //
                        List<int> IntersectLibraryIds = new List<int>();
                        if (AttrLibExist && DynamicLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds.Intersect(DynamicLibValueListIds).ToList();
                        }
                        else if (AttrLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds;
                        }
                        else if (DynamicLibExist)
                        {
                            IntersectLibraryIds = DynamicLibValueListIds;
                        }

                        WithoutDateFilterMW_BULibraries = _mapper.Map<List<MW_BULibraryViewModel>>(_unitOfWork.MW_BULibraryRepository.GetIncludeWhere(x =>
                            x.Id > 0 && IntersectLibraryIds.Contains(x.Id) && !x.Deleted, x => x.diversityType).ToList());
                    }

                    //
                    // DateTime Objects Filters..
                    //
                    List<DateFilterViewModel> AfterConvertDateFilters = new List<DateFilterViewModel>();
                    if (DateFilter != null ? DateFilter.Count() > 0 : false)
                    {
                        List<TLIattributeActivated> DateMW_BULibraryAttribute = MW_BULibraryAttribute.Where(x =>
                            x.DataType.ToLower() == "datetime").ToList();

                        foreach (DateFilterViewModel item in DateFilter)
                        {
                            DateTime DateFrom = Convert.ToDateTime(item.DateFrom);
                            DateTime DateTo = Convert.ToDateTime(item.DateTo);

                            if (DateFrom > DateTo)
                            {
                                DateTime Replacer = DateFrom;
                                DateFrom = DateTo;
                                DateTo = Replacer;
                            }

                            TLIattributeActivated AttributeKey = DateMW_BULibraryAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());
                            string Key = "";

                            if (AttributeKey != null)
                                Key = AttributeKey.Key;
                            else
                                Key = item.key;

                            AfterConvertDateFilters.Add(new DateFilterViewModel
                            {
                                key = Key,
                                DateFrom = DateFrom,
                                DateTo = DateTo
                            });
                        }
                    }
                    if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                    {
                        //
                        // Library Dynamic Attributes...
                        //
                        List<TLIdynamicAtt> DateTimeLibDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AfterConvertDateFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == TablesNames.TLImwBULibrary.ToString(), x => x.tablesNames).ToList();

                        List<int> DynamicLibValueListIds = new List<int>();
                        bool DynamicLibExist = false;

                        if (DateTimeLibDynamicAttListIds.Count > 0)
                        {
                            DynamicLibExist = true;
                            List<DateFilterViewModel> DynamicLibAttributeFilters = AfterConvertDateFilters.Where(x =>
                                DateTimeLibDynamicAttListIds.Exists(y => y.Key.ToLower() == x.key.ToLower())).ToList();

                            DynamicLibValueListIds = new List<int>();

                            List<TLIdynamicAttLibValue> DynamicLibValueListObjects = _unitOfWork.DynamicAttLibRepository.GetIncludeWhere(x =>
                                DateTimeLibDynamicAttListIds.Exists(y => y.Id == x.DynamicAttId) && !x.disable).ToList();

                            List<int> InventoriesIds = DynamicLibValueListObjects.Select(x => x.InventoryId).Distinct().ToList();

                            foreach (int InventoryId in InventoriesIds)
                            {
                                List<TLIdynamicAttLibValue> DynamicLibValueListInventories = DynamicLibValueListObjects.Where(x =>
                                    x.InventoryId == InventoryId).ToList();

                                if (DynamicLibAttributeFilters.All(y => DynamicLibValueListInventories.Exists(x =>
                                     (x.ValueDateTime != null ?
                                        (x.ValueDateTime >= y.DateFrom && x.ValueDateTime <= y.DateTo) : (false)))))
                                {
                                    DynamicLibValueListIds.Add(InventoryId);
                                }
                            }
                        }

                        //
                        // Library Attribute Activated...
                        //
                        List<PropertyInfo> LibraryProps = typeof(MW_BULibraryViewModel).GetProperties().Where(x =>
                            AfterConvertDateFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower())).ToList();

                        List<int> LibraryAttributeActivatedIds = new List<int>();
                        bool AttrLibExist = false;

                        if (LibraryProps != null)
                        {
                            AttrLibExist = true;

                            List<DateFilterViewModel> LibraryPropsAttributeFilters = AfterConvertDateFilters.Where(x =>
                                LibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            LibraryAttributeActivatedIds = _unitOfWork.MW_BULibraryRepository.GetIncludeWhere(x =>
                                LibraryPropsAttributeFilters.All(z =>
                                    (LibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && ((y.GetValue(_mapper.Map<MW_BULibraryViewModel>(x), null) != null) ?
                                        ((z.DateFrom >= Convert.ToDateTime(y.GetValue(_mapper.Map<MW_BULibraryViewModel>(x), null))) &&
                                         (z.DateTo <= Convert.ToDateTime(y.GetValue(_mapper.Map<MW_BULibraryViewModel>(x), null)))) : (false)))))
                            ).Select(i => i.Id).ToList();
                        }

                        //
                        // Library (Attribute Activated + Dynamic) Attributes...
                        //
                        List<int> IntersectLibraryIds = new List<int>();
                        if (AttrLibExist && DynamicLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds.Intersect(DynamicLibValueListIds).ToList();
                        }
                        else if (AttrLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds;
                        }
                        else if (DynamicLibExist)
                        {
                            IntersectLibraryIds = DynamicLibValueListIds;
                        }

                        WithDateFilterMW_BULibraries = _mapper.Map<List<MW_BULibraryViewModel>>(_unitOfWork.MW_BULibraryRepository.GetIncludeWhere(x =>
                            x.Id > 0 && IntersectLibraryIds.Contains(x.Id) && !x.Deleted, x => x.diversityType).ToList());
                    }

                    //
                    // Intersect Between WithoutDateFilterMW_BULibraries + WithDateFilterMW_BULibraries To Get The Records That Meet The Filters (DateFilters + AttributeFilters)
                    //
                    if ((AttributeFilters != null ? AttributeFilters.Count() == 0 : true) &&
                        (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() == 0 : true))
                    {
                        MW_BULibraries = _mapper.Map<List<MW_BULibraryViewModel>>(_unitOfWork.MW_BULibraryRepository.GetIncludeWhere(x =>
                            x.Id > 0 && !x.Deleted, x => x.diversityType).ToList());
                    }
                    else if ((AttributeFilters != null ? AttributeFilters.Count > 0 : false) &&
                            (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false))
                    {
                        List<int> MicrowaveIds = WithoutDateFilterMW_BULibraries.Select(x => x.Id).Intersect(WithDateFilterMW_BULibraries.Select(x => x.Id)).ToList();
                        MW_BULibraries = _mapper.Map<List<MW_BULibraryViewModel>>(_unitOfWork.MW_BULibraryRepository.GetWhere(x =>
                            MicrowaveIds.Contains(x.Id)).ToList());
                    }
                    else if (AttributeFilters != null ? AttributeFilters.Count > 0 : false)
                    {
                        MW_BULibraries = WithoutDateFilterMW_BULibraries;
                    }
                    else if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                    {
                        MW_BULibraries = WithDateFilterMW_BULibraries;
                    }

                    Count = MW_BULibraries.Count();

                    MW_BULibraries = MW_BULibraries.Skip((parameterPagination.PageNumber - 1) * parameterPagination.PageSize).
                        Take(parameterPagination.PageSize).ToList();

                    List<TLIattributeViewManagment> AllAttributes = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                       (x.Enable && x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.MW_BULibrary.ToString() &&
                       (x.AttributeActivatedId != null ?
                            (x.AttributeActivated.Tabel == TablesNames.TLImwBULibrary.ToString() && x.AttributeActivated.enable) :
                            (x.DynamicAtt.LibraryAtt && !x.DynamicAtt.disable && x.DynamicAtt.tablesNames.TableName == TablesNames.TLImwBULibrary.ToString()))) ||
                        (x.AttributeActivated != null ?
                            ((x.AttributeActivated.Key.ToLower() == "id" || x.AttributeActivated.Key.ToLower() == "active") && x.AttributeActivated.Tabel == TablesNames.TLImwBULibrary.ToString()) : false),
                           x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1, x => x.EditableManagmentView.TLItablesNames2,
                           x => x.AttributeActivated, x => x.DynamicAtt, x => x.DynamicAtt.tablesNames, x => x.DynamicAtt.DataType).ToList();

                    List<TLIattributeViewManagment> NotDateTimeLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() != "datetime") : false).ToList();

                    List<TLIattributeViewManagment> NotDateTimeDynamicLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() != "datetime" : false).ToList();

                    List<TLIattributeViewManagment> DateTimeLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() == "datetime") : false).ToList();

                    List<TLIattributeViewManagment> DateTimeDynamicLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() == "datetime" : false).ToList();

                    foreach (MW_BULibraryViewModel MW_BULibraryViewModel in MW_BULibraries)
                    {
                        dynamic DynamicMW_BULibrary = new ExpandoObject();

                        //
                        // Library Object ViewModel... (Not DateTime DataType Attribute)
                        //
                        if (NotDateTimeLibraryAttributesViewModel != null ? NotDateTimeLibraryAttributesViewModel.Count > 0 : false)
                        {
                            List<PropertyInfo> LibraryProps = typeof(MW_BULibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() != "datetime" :
                                    (x.PropertyType.Name.ToLower() != "datetime")) :
                                (x.PropertyType.Name.ToLower() != "datetime")).ToList();

                            foreach (PropertyInfo prop in LibraryProps)
                            {
                                if (prop.Name.ToLower().Contains("_name") &&
                                    NotDateTimeLibraryAttributesViewModel.Exists(x =>
                                        x.AttributeActivated.Label.ToLower() == prop.Name.ToLower()))
                                {
                                    object ForeignKeyNamePropObject = prop.GetValue(MW_BULibraryViewModel, null);
                                    ((IDictionary<String, Object>)DynamicMW_BULibrary).Add(new KeyValuePair<string, object>(prop.Name, ForeignKeyNamePropObject));
                                }
                                else if (NotDateTimeLibraryAttributesViewModel.Exists(x =>
                                     x.AttributeActivated.Key.ToLower() == prop.Name.ToLower()) &&
                                    !prop.Name.ToLower().Contains("_name") &&
                                    (prop.Name.ToLower().Substring(Math.Max(0, prop.Name.Length - 2)) != "id" || prop.Name.ToLower() == "id"))
                                {
                                    if (prop.Name.ToLower() != "id" && prop.Name.ToLower() != "active")
                                    {
                                        TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                            x.AttributeActivated.Tabel == TablesNames.TLImwBULibrary.ToString() &&
                                            x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                        if (LabelName != null)
                                        {
                                            object PropObject = prop.GetValue(MW_BULibraryViewModel, null);
                                            ((IDictionary<String, Object>)DynamicMW_BULibrary).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                        }
                                    }
                                    else
                                    {
                                        object PropObject = prop.GetValue(MW_BULibraryViewModel, null);
                                        ((IDictionary<String, Object>)DynamicMW_BULibrary).Add(new KeyValuePair<string, object>(prop.Name, PropObject));
                                    }
                                }
                            }
                        }

                        //
                        // Library Dynamic Attributes... (Not DateTime DataType Attribute)
                        // 
                        List<TLIdynamicAtt> NotDateTimeLibraryDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                           !x.disable && x.tablesNames.TableName == TablesNames.TLImwBULibrary.ToString() &&
                            x.LibraryAtt && x.DataType.Name.ToLower() != "datetime" &&
                            NotDateTimeDynamicLibraryAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames, x => x.DataType).ToList();

                        foreach (var LibraryDynamicAtt in NotDateTimeLibraryDynamicAttributes)
                        {
                            TLIdynamicAttLibValue DynamicAttLibValue = _unitOfWork.DynamicAttLibRepository.GetIncludeWhereFirst(x =>
                                x.DynamicAttId == LibraryDynamicAtt.Id &&
                                x.InventoryId == MW_BULibraryViewModel.Id && !x.disable &&
                                x.DynamicAtt.LibraryAtt &&
                                x.DynamicAtt.Key == LibraryDynamicAtt.Key,
                                    x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType);

                            if (DynamicAttLibValue != null)
                            {
                                dynamic DynamicAttValue = new ExpandoObject();

                                if (DynamicAttLibValue.ValueString != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueString;

                                else if (DynamicAttLibValue.ValueDouble != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDouble;

                                else if (DynamicAttLibValue.ValueDateTime != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDateTime;

                                else if (DynamicAttLibValue.ValueBoolean != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueBoolean;

                                ((IDictionary<String, Object>)DynamicMW_BULibrary).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, DynamicAttValue));
                            }
                            else
                            {
                                ((IDictionary<String, Object>)DynamicMW_BULibrary).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, null));
                            }
                        }

                        //
                        // Library Object ViewModel... (DateTime DataType Attribute)
                        //
                        dynamic DateTimeAttributes = new ExpandoObject();
                        if (DateTimeLibraryAttributesViewModel != null ? DateTimeLibraryAttributesViewModel.Count() > 0 : false)
                        {
                            List<PropertyInfo> DateTimeLibraryProps = typeof(MW_BULibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name == "datetime" :
                                    (x.PropertyType.Name.ToLower() == "datetime")) :
                                (x.PropertyType.Name.ToLower() == "datetime")).ToList();

                            foreach (PropertyInfo prop in DateTimeLibraryProps)
                            {
                                TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                    x.AttributeActivated.Tabel == TablesNames.TLImwBULibrary.ToString() &&
                                    x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                if (LabelName != null)
                                {
                                    object PropObject = prop.GetValue(MW_BULibraryViewModel, null);
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                }
                            }
                        }

                        //
                        // Library Dynamic Attributes... (DateTime DataType Attribute)
                        // 
                        List<TLIdynamicAtt> LibraryDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                           !x.disable && x.tablesNames.TableName == TablesNames.TLImwBULibrary.ToString() &&
                            x.LibraryAtt && x.DataType.Name.ToLower() == "datetime" &&
                            DateTimeDynamicLibraryAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames).ToList();

                        foreach (TLIdynamicAtt LibraryDynamicAtt in LibraryDynamicAttributes)
                        {
                            TLIdynamicAttLibValue DynamicAttLibValue = _unitOfWork.DynamicAttLibRepository.GetIncludeWhereFirst(x =>
                                x.DynamicAttId == LibraryDynamicAtt.Id &&
                                x.InventoryId == MW_BULibraryViewModel.Id && !x.disable &&
                                x.DynamicAtt.LibraryAtt &&
                                x.DynamicAtt.Key == LibraryDynamicAtt.Key,
                                    x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType);

                            if (DynamicAttLibValue != null)
                            {
                                dynamic DynamicAttValue = new ExpandoObject();
                                if (DynamicAttLibValue.ValueDateTime != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDateTime;

                                ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, DynamicAttValue));
                            }
                            else
                            {
                                ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, null));
                            }
                        }

                        ((IDictionary<String, Object>)DynamicMW_BULibrary).Add(new KeyValuePair<string, object>("DateTimeAttributes", DateTimeAttributes));

                        OutPutList.Add(DynamicMW_BULibrary);
                    }

                    MW_BUTableDisplay.Model = OutPutList;

                    if (WithFilterData)
                    {
                        MW_BUTableDisplay.filters = _unitOfWork.MW_BULibraryRepository.GetRelatedTables();
                    }
                    else
                    {
                        MW_BUTableDisplay.filters = null;
                    }

                    return new Response<ReturnWithFilters<object>>(true, MW_BUTableDisplay, null, null, (int)Helpers.Constants.ApiReturnCode.success, Count);
                }
                catch (Exception err)
                {
                    return new Response<ReturnWithFilters<object>>(false, null, null, err.Message, (int)Helpers.Constants.ApiReturnCode.fail);
                }
            }
            else if (Helpers.Constants.LoadSubType.TLImwDishLibrary.ToString() == TableNameLibrary)
            {
                try
                {
                    List<FilterObjectList> ObjectAttributeFilters = CombineFilters.filters;
                    List<DateFilterViewModel> DateFilter = CombineFilters.DateFilter;
                    int Count = 0;
                    List<object> OutPutList = new List<object>();
                    ReturnWithFilters<object> MW_DishTableDisplay = new ReturnWithFilters<object>();

                    List<StringFilterObjectList> AttributeFilters = new List<StringFilterObjectList>();

                    List<MW_DishLibraryViewModel> MW_DishLibraries = new List<MW_DishLibraryViewModel>();
                    List<MW_DishLibraryViewModel> WithoutDateFilterMW_DishLibraries = new List<MW_DishLibraryViewModel>();
                    List<MW_DishLibraryViewModel> WithDateFilterMW_DishLibraries = new List<MW_DishLibraryViewModel>();

                    List<TLIattributeActivated> MW_DishLibraryAttribute = new List<TLIattributeActivated>();
                    if ((DateFilter != null ? DateFilter.Count() > 0 : false) ||
                        (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0))
                    {
                        MW_DishLibraryAttribute = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                            x.Enable && x.AttributeActivatedId != null &&
                            x.AttributeActivated.DataType.ToLower() != "datetime" &&
                            x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.MW_DishLibrary.ToString() &&
                            x.EditableManagmentView.TLItablesNames1.TableName == TablesNames.TLImwDishLibrary.ToString(),
                                x => x.AttributeActivated, x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1)
                        .Select(x => x.AttributeActivated).ToList();
                    }

                    if (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0)
                    {
                        List<TLIattributeActivated> NotDateDateMW_DishLibraryAttribute = MW_DishLibraryAttribute.Where(x =>
                            x.DataType.ToLower() != "datetime").ToList();

                        foreach (FilterObjectList item in ObjectAttributeFilters)
                        {
                            List<string> value = item.value.Select(x => x.ToString().ToLower()).ToList();

                            TLIattributeActivated AttributeKey = NotDateDateMW_DishLibraryAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());

                            string Key = "";

                            if (AttributeKey != null)
                                Key = AttributeKey.Key;

                            else
                                Key = item.key;

                            AttributeFilters.Add(new StringFilterObjectList
                            {
                                key = Key,
                                value = value
                            });
                        }
                    }
                    if (AttributeFilters != null && AttributeFilters.Count > 0)
                    {
                        //
                        // Library Dynamic Attributes...
                        //
                        List<TLIdynamicAtt> LibDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AttributeFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == TablesNames.TLImwDishLibrary.ToString(), x => x.tablesNames, x => x.DataType).ToList();

                        List<int> DynamicLibValueListIds = new List<int>();
                        bool DynamicLibExist = false;

                        if (LibDynamicAttListIds.Count > 0)
                        {
                            DynamicLibExist = true;
                            GetInventoriesIdsFromDynamicAttributes(out DynamicLibValueListIds, LibDynamicAttListIds, AttributeFilters);
                        }

                        //
                        // Library Attribute Activated...
                        //
                        bool AttrLibExist = typeof(MW_DishLibraryViewModel).GetProperties().ToList().Exists(x =>
                            AttributeFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower() && y.key.ToLower() != "id"));

                        List<int> LibraryAttributeActivatedIds = new List<int>();

                        if (AttrLibExist)
                        {
                            List<PropertyInfo> NonStringLibraryProps = typeof(MW_DishLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() != "string" &&
                                AttributeFilters.Exists(y =>
                                    y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<PropertyInfo> StringLibraryProps = typeof(MW_DishLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() == "string" &&
                                AttributeFilters.Exists(y =>
                                    y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<StringFilterObjectList> LibraryPropsAttributeFilters = AttributeFilters.Where(x =>
                                NonStringLibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower()) ||
                                StringLibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            LibraryAttributeActivatedIds = _unitOfWork.MW_DishLibraryRepository.GetWhere(x =>
                                 LibraryPropsAttributeFilters.All(z =>
                                    NonStringLibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (y.GetValue(_mapper.Map<MW_DishLibraryViewModel>(x), null) != null ? z.value.Contains(y.GetValue(_mapper.Map<MW_DishLibraryViewModel>(x), null).ToString().ToLower()) : false)) ||
                                    StringLibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (z.value.Any(w =>
                                         y.GetValue(_mapper.Map<MW_DishLibraryViewModel>(x), null) != null ? y.GetValue(_mapper.Map<MW_DishLibraryViewModel>(x), null).ToString().ToLower().StartsWith(w.ToLower()) : false))))
                             ).Select(i => i.Id).ToList();
                        }

                        //
                        // Library (Attribute Activated + Dynamic) Attributes...
                        //
                        List<int> IntersectLibraryIds = new List<int>();
                        if (AttrLibExist && DynamicLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds.Intersect(DynamicLibValueListIds).ToList();
                        }
                        else if (AttrLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds;
                        }
                        else if (DynamicLibExist)
                        {
                            IntersectLibraryIds = DynamicLibValueListIds;
                        }

                        WithoutDateFilterMW_DishLibraries = _mapper.Map<List<MW_DishLibraryViewModel>>(_unitOfWork.MW_DishLibraryRepository.GetIncludeWhere(x =>
                            x.Id > 0 && IntersectLibraryIds.Contains(x.Id) && !x.Deleted, x => x.asType, x => x.polarityType).ToList());
                    }

                    //
                    // DateTime Objects Filters..
                    //
                    List<DateFilterViewModel> AfterConvertDateFilters = new List<DateFilterViewModel>();
                    if (DateFilter != null ? DateFilter.Count() > 0 : false)
                    {
                        List<TLIattributeActivated> DateMW_DishLibraryAttribute = MW_DishLibraryAttribute.Where(x =>
                            x.DataType.ToLower() == "datetime").ToList();

                        foreach (DateFilterViewModel item in DateFilter)
                        {
                            DateTime DateFrom = Convert.ToDateTime(item.DateFrom);
                            DateTime DateTo = Convert.ToDateTime(item.DateTo);

                            if (DateFrom > DateTo)
                            {
                                DateTime Replacer = DateFrom;
                                DateFrom = DateTo;
                                DateTo = Replacer;
                            }

                            TLIattributeActivated AttributeKey = DateMW_DishLibraryAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());
                            string Key = "";

                            if (AttributeKey != null)
                                Key = AttributeKey.Key;
                            else
                                Key = item.key;

                            AfterConvertDateFilters.Add(new DateFilterViewModel
                            {
                                key = Key,
                                DateFrom = DateFrom,
                                DateTo = DateTo
                            });
                        }
                    }
                    if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                    {
                        //
                        // Library Dynamic Attributes...
                        //
                        List<TLIdynamicAtt> DateTimeLibDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AfterConvertDateFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == TablesNames.TLImwDishLibrary.ToString(), x => x.tablesNames).ToList();

                        List<int> DynamicLibValueListIds = new List<int>();
                        bool DynamicLibExist = false;

                        if (DateTimeLibDynamicAttListIds.Count > 0)
                        {
                            DynamicLibExist = true;
                            List<DateFilterViewModel> DynamicLibAttributeFilters = AfterConvertDateFilters.Where(x =>
                                DateTimeLibDynamicAttListIds.Exists(y => y.Key.ToLower() == x.key.ToLower())).ToList();

                            DynamicLibValueListIds = new List<int>();

                            List<TLIdynamicAttLibValue> DynamicLibValueListObjects = _unitOfWork.DynamicAttLibRepository.GetIncludeWhere(x =>
                                DateTimeLibDynamicAttListIds.Exists(y => y.Id == x.DynamicAttId) && !x.disable).ToList();

                            List<int> InventoriesIds = DynamicLibValueListObjects.Select(x => x.InventoryId).Distinct().ToList();

                            foreach (int InventoryId in InventoriesIds)
                            {
                                List<TLIdynamicAttLibValue> DynamicLibValueListInventories = DynamicLibValueListObjects.Where(x =>
                                    x.InventoryId == InventoryId).ToList();

                                if (DynamicLibAttributeFilters.All(y => DynamicLibValueListInventories.Exists(x =>
                                     (x.ValueDateTime != null ?
                                        (x.ValueDateTime >= y.DateFrom && x.ValueDateTime <= y.DateTo) : (false)))))
                                {
                                    DynamicLibValueListIds.Add(InventoryId);
                                }
                            }
                        }

                        //
                        // Library Attribute Activated...
                        //
                        List<PropertyInfo> LibraryProps = typeof(MW_DishLibraryViewModel).GetProperties().Where(x =>
                            AfterConvertDateFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower())).ToList();

                        List<int> LibraryAttributeActivatedIds = new List<int>();
                        bool AttrLibExist = false;

                        if (LibraryProps != null)
                        {
                            AttrLibExist = true;

                            List<DateFilterViewModel> LibraryPropsAttributeFilters = AfterConvertDateFilters.Where(x =>
                                LibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            LibraryAttributeActivatedIds = _unitOfWork.MW_DishLibraryRepository.GetIncludeWhere(x =>
                                LibraryPropsAttributeFilters.All(z =>
                                    (LibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && ((y.GetValue(_mapper.Map<MW_DishLibraryViewModel>(x), null) != null) ?
                                        ((z.DateFrom >= Convert.ToDateTime(y.GetValue(_mapper.Map<MW_DishLibraryViewModel>(x), null))) &&
                                         (z.DateTo <= Convert.ToDateTime(y.GetValue(_mapper.Map<MW_DishLibraryViewModel>(x), null)))) : (false)))))
                            ).Select(i => i.Id).ToList();
                        }

                        //
                        // Library (Attribute Activated + Dynamic) Attributes...
                        //
                        List<int> IntersectLibraryIds = new List<int>();
                        if (AttrLibExist && DynamicLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds.Intersect(DynamicLibValueListIds).ToList();
                        }
                        else if (AttrLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds;
                        }
                        else if (DynamicLibExist)
                        {
                            IntersectLibraryIds = DynamicLibValueListIds;
                        }

                        WithDateFilterMW_DishLibraries = _mapper.Map<List<MW_DishLibraryViewModel>>(_unitOfWork.MW_DishLibraryRepository.GetIncludeWhere(x =>
                            x.Id > 0 && IntersectLibraryIds.Contains(x.Id) && !x.Deleted, x => x.asType, x => x.polarityType).ToList());
                    }

                    //
                    // Intersect Between WithoutDateFilterMW_DishLibraries + WithDateFilterMW_DishLibraries To Get The Records That Meet The Filters (DateFilters + AttributeFilters)
                    //
                    if ((AttributeFilters != null ? AttributeFilters.Count() == 0 : true) &&
                        (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() == 0 : true))
                    {
                        MW_DishLibraries = _mapper.Map<List<MW_DishLibraryViewModel>>(_unitOfWork.MW_DishLibraryRepository.GetIncludeWhere(x =>
                            x.Id > 0 && !x.Deleted, x => x.asType, x => x.polarityType).ToList());
                    }
                    else if ((AttributeFilters != null ? AttributeFilters.Count > 0 : false) &&
                            (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false))
                    {
                        List<int> MicrowaveIds = WithoutDateFilterMW_DishLibraries.Select(x => x.Id).Intersect(WithDateFilterMW_DishLibraries.Select(x => x.Id)).ToList();
                        MW_DishLibraries = _mapper.Map<List<MW_DishLibraryViewModel>>(_unitOfWork.MW_DishLibraryRepository.GetWhere(x =>
                            MicrowaveIds.Contains(x.Id)).ToList());
                    }
                    else if (AttributeFilters != null ? AttributeFilters.Count > 0 : false)
                    {
                        MW_DishLibraries = WithoutDateFilterMW_DishLibraries;
                    }
                    else if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                    {
                        MW_DishLibraries = WithDateFilterMW_DishLibraries;
                    }

                    Count = MW_DishLibraries.Count();

                    MW_DishLibraries = MW_DishLibraries.Skip((parameterPagination.PageNumber - 1) * parameterPagination.PageSize).
                        Take(parameterPagination.PageSize).ToList();

                    List<TLIattributeViewManagment> AllAttributes = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                       (x.Enable && x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.MW_DishLibrary.ToString() &&
                       (x.AttributeActivatedId != null ?
                            (x.AttributeActivated.Tabel == TablesNames.TLImwDishLibrary.ToString() && x.AttributeActivated.enable) :
                            (x.DynamicAtt.LibraryAtt && !x.DynamicAtt.disable && x.DynamicAtt.tablesNames.TableName == TablesNames.TLImwDishLibrary.ToString()))) ||
                        (x.AttributeActivated != null ?
                            ((x.AttributeActivated.Key.ToLower() == "id" || x.AttributeActivated.Key.ToLower() == "active") && x.AttributeActivated.Tabel == TablesNames.TLImwDishLibrary.ToString()) : false),
                           x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1, x => x.EditableManagmentView.TLItablesNames2,
                           x => x.AttributeActivated, x => x.DynamicAtt, x => x.DynamicAtt.tablesNames, x => x.DynamicAtt.DataType).ToList();

                    List<TLIattributeViewManagment> NotDateTimeLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() != "datetime") : false).ToList();

                    List<TLIattributeViewManagment> NotDateTimeDynamicLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() != "datetime" : false).ToList();

                    List<TLIattributeViewManagment> DateTimeLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() == "datetime") : false).ToList();

                    List<TLIattributeViewManagment> DateTimeDynamicLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() == "datetime" : false).ToList();

                    foreach (MW_DishLibraryViewModel MW_DishLibraryViewModel in MW_DishLibraries)
                    {
                        dynamic DynamicMW_DishLibrary = new ExpandoObject();

                        //
                        // Library Object ViewModel... (Not DateTime DataType Attribute)
                        //
                        if (NotDateTimeLibraryAttributesViewModel != null ? NotDateTimeLibraryAttributesViewModel.Count > 0 : false)
                        {
                            List<PropertyInfo> LibraryProps = typeof(MW_DishLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() != "datetime" :
                                    (x.PropertyType.Name.ToLower() != "datetime")) :
                                (x.PropertyType.Name.ToLower() != "datetime")).ToList();

                            foreach (PropertyInfo prop in LibraryProps)
                            {
                                if (prop.Name.ToLower().Contains("_name") &&
                                    NotDateTimeLibraryAttributesViewModel.Exists(x =>
                                        x.AttributeActivated.Label.ToLower() == prop.Name.ToLower()))
                                {
                                    object ForeignKeyNamePropObject = prop.GetValue(MW_DishLibraryViewModel, null);
                                    ((IDictionary<String, Object>)DynamicMW_DishLibrary).Add(new KeyValuePair<string, object>(prop.Name, ForeignKeyNamePropObject));
                                }
                                else if (NotDateTimeLibraryAttributesViewModel.Exists(x =>
                                     x.AttributeActivated.Key.ToLower() == prop.Name.ToLower()) &&
                                    !prop.Name.ToLower().Contains("_name") &&
                                    (prop.Name.ToLower().Substring(Math.Max(0, prop.Name.Length - 2)) != "id" || prop.Name.ToLower() == "id"))
                                {
                                    if (prop.Name.ToLower() != "id" && prop.Name.ToLower() != "active")
                                    {
                                        TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                            x.AttributeActivated.Tabel == TablesNames.TLImwDishLibrary.ToString() &&
                                            x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                        if (LabelName != null)
                                        {
                                            object PropObject = prop.GetValue(MW_DishLibraryViewModel, null);
                                            ((IDictionary<String, Object>)DynamicMW_DishLibrary).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                        }
                                    }
                                    else
                                    {
                                        object PropObject = prop.GetValue(MW_DishLibraryViewModel, null);
                                        ((IDictionary<String, Object>)DynamicMW_DishLibrary).Add(new KeyValuePair<string, object>(prop.Name, PropObject));
                                    }
                                }
                            }
                        }

                        //
                        // Library Dynamic Attributes... (Not DateTime DataType Attribute)
                        // 
                        List<TLIdynamicAtt> NotDateTimeLibraryDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                           !x.disable && x.tablesNames.TableName == TablesNames.TLImwDishLibrary.ToString() &&
                            x.LibraryAtt && x.DataType.Name.ToLower() != "datetime" &&
                            NotDateTimeDynamicLibraryAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames, x => x.DataType).ToList();

                        foreach (var LibraryDynamicAtt in NotDateTimeLibraryDynamicAttributes)
                        {
                            TLIdynamicAttLibValue DynamicAttLibValue = _unitOfWork.DynamicAttLibRepository.GetIncludeWhereFirst(x =>
                                x.DynamicAttId == LibraryDynamicAtt.Id &&
                                x.InventoryId == MW_DishLibraryViewModel.Id && !x.disable &&
                                x.DynamicAtt.LibraryAtt &&
                                x.DynamicAtt.Key == LibraryDynamicAtt.Key,
                                    x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType);

                            if (DynamicAttLibValue != null)
                            {
                                dynamic DynamicAttValue = new ExpandoObject();

                                if (DynamicAttLibValue.ValueString != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueString;

                                else if (DynamicAttLibValue.ValueDouble != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDouble;

                                else if (DynamicAttLibValue.ValueDateTime != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDateTime;

                                else if (DynamicAttLibValue.ValueBoolean != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueBoolean;

                                ((IDictionary<String, Object>)DynamicMW_DishLibrary).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, DynamicAttValue));
                            }
                            else
                            {
                                ((IDictionary<String, Object>)DynamicMW_DishLibrary).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, null));
                            }
                        }

                        //
                        // Library Object ViewModel... (DateTime DataType Attribute)
                        //
                        dynamic DateTimeAttributes = new ExpandoObject();
                        if (DateTimeLibraryAttributesViewModel != null ? DateTimeLibraryAttributesViewModel.Count() > 0 : false)
                        {
                            List<PropertyInfo> DateTimeLibraryProps = typeof(MW_DishLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name == "datetime" :
                                    (x.PropertyType.Name.ToLower() == "datetime")) :
                                (x.PropertyType.Name.ToLower() == "datetime")).ToList();

                            foreach (PropertyInfo prop in DateTimeLibraryProps)
                            {
                                TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                    x.AttributeActivated.Tabel == TablesNames.TLImwDishLibrary.ToString() &&
                                    x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                if (LabelName != null)
                                {
                                    object PropObject = prop.GetValue(MW_DishLibraryViewModel, null);
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                }
                            }
                        }

                        //
                        // Library Dynamic Attributes... (DateTime DataType Attribute)
                        // 
                        List<TLIdynamicAtt> LibraryDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                           !x.disable && x.tablesNames.TableName == TablesNames.TLImwDishLibrary.ToString() &&
                            x.LibraryAtt && x.DataType.Name.ToLower() == "datetime" &&
                            DateTimeDynamicLibraryAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames).ToList();

                        foreach (TLIdynamicAtt LibraryDynamicAtt in LibraryDynamicAttributes)
                        {
                            TLIdynamicAttLibValue DynamicAttLibValue = _unitOfWork.DynamicAttLibRepository.GetIncludeWhereFirst(x =>
                                x.DynamicAttId == LibraryDynamicAtt.Id &&
                                x.InventoryId == MW_DishLibraryViewModel.Id && !x.disable &&
                                x.DynamicAtt.LibraryAtt &&
                                x.DynamicAtt.Key == LibraryDynamicAtt.Key,
                                    x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType);

                            if (DynamicAttLibValue != null)
                            {
                                dynamic DynamicAttValue = new ExpandoObject();
                                if (DynamicAttLibValue.ValueDateTime != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDateTime;

                                ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, DynamicAttValue));
                            }
                            else
                            {
                                ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, null));
                            }
                        }

                        ((IDictionary<String, Object>)DynamicMW_DishLibrary).Add(new KeyValuePair<string, object>("DateTimeAttributes", DateTimeAttributes));

                        OutPutList.Add(DynamicMW_DishLibrary);
                    }

                    MW_DishTableDisplay.Model = OutPutList;

                    if (WithFilterData)
                    {
                        MW_DishTableDisplay.filters = _unitOfWork.MW_DishLibraryRepository.GetRelatedTables();
                    }
                    else
                    {
                        MW_DishTableDisplay.filters = null;
                    }

                    return new Response<ReturnWithFilters<object>>(true, MW_DishTableDisplay, null, null, (int)Helpers.Constants.ApiReturnCode.success, Count);
                }
                catch (Exception err)
                {
                    return new Response<ReturnWithFilters<object>>(false, null, null, err.Message, (int)Helpers.Constants.ApiReturnCode.fail);
                }
            }
            else if (Helpers.Constants.LoadSubType.TLImwODULibrary.ToString() == TableNameLibrary)
            {
                try
                {
                    List<FilterObjectList> ObjectAttributeFilters = CombineFilters.filters;
                    List<DateFilterViewModel> DateFilter = CombineFilters.DateFilter;
                    int Count = 0;
                    List<object> OutPutList = new List<object>();
                    ReturnWithFilters<object> MW_ODUTableDisplay = new ReturnWithFilters<object>();

                    List<StringFilterObjectList> AttributeFilters = new List<StringFilterObjectList>();

                    List<MW_ODULibraryViewModel> MW_ODULibraries = new List<MW_ODULibraryViewModel>();
                    List<MW_ODULibraryViewModel> WithoutDateFilterMW_ODULibraries = new List<MW_ODULibraryViewModel>();
                    List<MW_ODULibraryViewModel> WithDateFilterMW_ODULibraries = new List<MW_ODULibraryViewModel>();

                    List<TLIattributeActivated> MW_ODULibraryAttribute = new List<TLIattributeActivated>();
                    if ((DateFilter != null ? DateFilter.Count() > 0 : false) ||
                        (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0))
                    {
                        MW_ODULibraryAttribute = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                            x.Enable && x.AttributeActivatedId != null &&
                            x.AttributeActivated.DataType.ToLower() != "datetime" &&
                            x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.MW_ODULibrary.ToString() &&
                            x.EditableManagmentView.TLItablesNames1.TableName == TablesNames.TLImwODULibrary.ToString(),
                                x => x.AttributeActivated, x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1)
                        .Select(x => x.AttributeActivated).ToList();
                    }

                    if (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0)
                    {
                        List<TLIattributeActivated> NotDateDateMW_ODULibraryAttribute = MW_ODULibraryAttribute.Where(x =>
                            x.DataType.ToLower() != "datetime").ToList();

                        foreach (FilterObjectList item in ObjectAttributeFilters)
                        {
                            List<string> value = item.value.Select(x => x.ToString().ToLower()).ToList();

                            TLIattributeActivated AttributeKey = NotDateDateMW_ODULibraryAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());

                            string Key = "";

                            if (AttributeKey != null)
                                Key = AttributeKey.Key;

                            else
                                Key = item.key;

                            AttributeFilters.Add(new StringFilterObjectList
                            {
                                key = Key,
                                value = value
                            });
                        }
                    }
                    if (AttributeFilters != null && AttributeFilters.Count > 0)
                    {
                        //
                        // Library Dynamic Attributes...
                        //
                        List<TLIdynamicAtt> LibDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AttributeFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == TablesNames.TLImwODULibrary.ToString(), x => x.tablesNames, x => x.DataType).ToList();

                        List<int> DynamicLibValueListIds = new List<int>();
                        bool DynamicLibExist = false;

                        if (LibDynamicAttListIds.Count > 0)
                        {
                            DynamicLibExist = true;
                            GetInventoriesIdsFromDynamicAttributes(out DynamicLibValueListIds, LibDynamicAttListIds, AttributeFilters);
                        }

                        //
                        // Library Attribute Activated...
                        //
                        bool AttrLibExist = typeof(MW_ODULibraryViewModel).GetProperties().ToList().Exists(x =>
                            AttributeFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower() && y.key.ToLower() != "id"));

                        List<int> LibraryAttributeActivatedIds = new List<int>();

                        if (AttrLibExist)
                        {
                            List<PropertyInfo> NonStringLibraryProps = typeof(MW_ODULibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() != "string" &&
                                AttributeFilters.Exists(y =>
                                    y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<PropertyInfo> StringLibraryProps = typeof(MW_ODULibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() == "string" &&
                                AttributeFilters.Exists(y =>
                                    y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<StringFilterObjectList> LibraryPropsAttributeFilters = AttributeFilters.Where(x =>
                                NonStringLibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower()) ||
                                StringLibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            LibraryAttributeActivatedIds = _unitOfWork.MW_ODULibraryRepository.GetWhere(x =>
                                 LibraryPropsAttributeFilters.All(z =>
                                    NonStringLibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (y.GetValue(_mapper.Map<MW_ODULibraryViewModel>(x), null) != null ? z.value.Contains(y.GetValue(_mapper.Map<MW_ODULibraryViewModel>(x), null).ToString().ToLower()) : false)) ||
                                    StringLibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (z.value.Any(w =>
                                         y.GetValue(_mapper.Map<MW_ODULibraryViewModel>(x), null) != null ? y.GetValue(_mapper.Map<MW_ODULibraryViewModel>(x), null).ToString().ToLower().StartsWith(w.ToLower()) : false))))
                             ).Select(i => i.Id).ToList();
                        }

                        //
                        // Library (Attribute Activated + Dynamic) Attributes...
                        //
                        List<int> IntersectLibraryIds = new List<int>();
                        if (AttrLibExist && DynamicLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds.Intersect(DynamicLibValueListIds).ToList();
                        }
                        else if (AttrLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds;
                        }
                        else if (DynamicLibExist)
                        {
                            IntersectLibraryIds = DynamicLibValueListIds;
                        }

                        WithoutDateFilterMW_ODULibraries = _mapper.Map<List<MW_ODULibraryViewModel>>(_unitOfWork.MW_ODULibraryRepository.GetIncludeWhere(x =>
                            x.Id > 0 && IntersectLibraryIds.Contains(x.Id) && !x.Deleted, x => x.parity).ToList());
                    }

                    //
                    // DateTime Objects Filters..
                    //
                    List<DateFilterViewModel> AfterConvertDateFilters = new List<DateFilterViewModel>();
                    if (DateFilter != null ? DateFilter.Count() > 0 : false)
                    {
                        List<TLIattributeActivated> DateMW_ODULibraryAttribute = MW_ODULibraryAttribute.Where(x =>
                            x.DataType.ToLower() == "datetime").ToList();

                        foreach (DateFilterViewModel item in DateFilter)
                        {
                            DateTime DateFrom = Convert.ToDateTime(item.DateFrom);
                            DateTime DateTo = Convert.ToDateTime(item.DateTo);

                            if (DateFrom > DateTo)
                            {
                                DateTime Replacer = DateFrom;
                                DateFrom = DateTo;
                                DateTo = Replacer;
                            }

                            TLIattributeActivated AttributeKey = DateMW_ODULibraryAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());
                            string Key = "";

                            if (AttributeKey != null)
                                Key = AttributeKey.Key;
                            else
                                Key = item.key;

                            AfterConvertDateFilters.Add(new DateFilterViewModel
                            {
                                key = Key,
                                DateFrom = DateFrom,
                                DateTo = DateTo
                            });
                        }
                    }
                    if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                    {
                        //
                        // Library Dynamic Attributes...
                        //
                        List<TLIdynamicAtt> DateTimeLibDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AfterConvertDateFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == TablesNames.TLImwODULibrary.ToString(), x => x.tablesNames).ToList();

                        List<int> DynamicLibValueListIds = new List<int>();
                        bool DynamicLibExist = false;

                        if (DateTimeLibDynamicAttListIds.Count > 0)
                        {
                            DynamicLibExist = true;
                            List<DateFilterViewModel> DynamicLibAttributeFilters = AfterConvertDateFilters.Where(x =>
                                DateTimeLibDynamicAttListIds.Exists(y => y.Key.ToLower() == x.key.ToLower())).ToList();

                            DynamicLibValueListIds = new List<int>();

                            List<TLIdynamicAttLibValue> DynamicLibValueListObjects = _unitOfWork.DynamicAttLibRepository.GetIncludeWhere(x =>
                                DateTimeLibDynamicAttListIds.Exists(y => y.Id == x.DynamicAttId) && !x.disable).ToList();

                            List<int> InventoriesIds = DynamicLibValueListObjects.Select(x => x.InventoryId).Distinct().ToList();

                            foreach (int InventoryId in InventoriesIds)
                            {
                                List<TLIdynamicAttLibValue> DynamicLibValueListInventories = DynamicLibValueListObjects.Where(x =>
                                    x.InventoryId == InventoryId).ToList();

                                if (DynamicLibAttributeFilters.All(y => DynamicLibValueListInventories.Exists(x =>
                                     (x.ValueDateTime != null ?
                                        (x.ValueDateTime >= y.DateFrom && x.ValueDateTime <= y.DateTo) : (false)))))
                                {
                                    DynamicLibValueListIds.Add(InventoryId);
                                }
                            }
                        }

                        //
                        // Library Attribute Activated...
                        //
                        List<PropertyInfo> LibraryProps = typeof(MW_ODULibraryViewModel).GetProperties().Where(x =>
                            AfterConvertDateFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower())).ToList();

                        List<int> LibraryAttributeActivatedIds = new List<int>();
                        bool AttrLibExist = false;

                        if (LibraryProps != null)
                        {
                            AttrLibExist = true;

                            List<DateFilterViewModel> LibraryPropsAttributeFilters = AfterConvertDateFilters.Where(x =>
                                LibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            LibraryAttributeActivatedIds = _unitOfWork.MW_ODULibraryRepository.GetIncludeWhere(x =>
                                LibraryPropsAttributeFilters.All(z =>
                                    (LibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && ((y.GetValue(_mapper.Map<MW_ODULibraryViewModel>(x), null) != null) ?
                                        ((z.DateFrom >= Convert.ToDateTime(y.GetValue(_mapper.Map<MW_ODULibraryViewModel>(x), null))) &&
                                         (z.DateTo <= Convert.ToDateTime(y.GetValue(_mapper.Map<MW_ODULibraryViewModel>(x), null)))) : (false)))))
                            ).Select(i => i.Id).ToList();
                        }

                        //
                        // Library (Attribute Activated + Dynamic) Attributes...
                        //
                        List<int> IntersectLibraryIds = new List<int>();
                        if (AttrLibExist && DynamicLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds.Intersect(DynamicLibValueListIds).ToList();
                        }
                        else if (AttrLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds;
                        }
                        else if (DynamicLibExist)
                        {
                            IntersectLibraryIds = DynamicLibValueListIds;
                        }

                        WithDateFilterMW_ODULibraries = _mapper.Map<List<MW_ODULibraryViewModel>>(_unitOfWork.MW_ODULibraryRepository.GetIncludeWhere(x =>
                            x.Id > 0 && IntersectLibraryIds.Contains(x.Id) && !x.Deleted, x => x.parity).ToList());
                    }

                    //
                    // Intersect Between WithoutDateFilterMW_ODULibraries + WithDateFilterMW_ODULibraries To Get The Records That Meet The Filters (DateFilters + AttributeFilters)
                    //
                    if ((AttributeFilters != null ? AttributeFilters.Count() == 0 : true) &&
                        (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() == 0 : true))
                    {
                        MW_ODULibraries = _mapper.Map<List<MW_ODULibraryViewModel>>(_unitOfWork.MW_ODULibraryRepository.GetIncludeWhere(x =>
                            x.Id > 0 && !x.Deleted, x => x.parity).ToList());
                    }
                    else if ((AttributeFilters != null ? AttributeFilters.Count > 0 : false) &&
                            (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false))
                    {
                        List<int> MicrowaveIds = WithoutDateFilterMW_ODULibraries.Select(x => x.Id).Intersect(WithDateFilterMW_ODULibraries.Select(x => x.Id)).ToList();
                        MW_ODULibraries = _mapper.Map<List<MW_ODULibraryViewModel>>(_unitOfWork.MW_ODULibraryRepository.GetWhere(x =>
                            MicrowaveIds.Contains(x.Id)).ToList());
                    }
                    else if (AttributeFilters != null ? AttributeFilters.Count > 0 : false)
                    {
                        MW_ODULibraries = WithoutDateFilterMW_ODULibraries;
                    }
                    else if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                    {
                        MW_ODULibraries = WithDateFilterMW_ODULibraries;
                    }

                    Count = MW_ODULibraries.Count();

                    MW_ODULibraries = MW_ODULibraries.Skip((parameterPagination.PageNumber - 1) * parameterPagination.PageSize).
                        Take(parameterPagination.PageSize).ToList();

                    List<TLIattributeViewManagment> AllAttributes = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                       (x.Enable && x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.MW_ODULibrary.ToString() &&
                       (x.AttributeActivatedId != null ?
                            (x.AttributeActivated.Tabel == TablesNames.TLImwODULibrary.ToString() && x.AttributeActivated.enable) :
                            (x.DynamicAtt.LibraryAtt && !x.DynamicAtt.disable && x.DynamicAtt.tablesNames.TableName == TablesNames.TLImwODULibrary.ToString()))) ||
                        (x.AttributeActivated != null ?
                            ((x.AttributeActivated.Key.ToLower() == "id" || x.AttributeActivated.Key.ToLower() == "active") && x.AttributeActivated.Tabel == TablesNames.TLImwODULibrary.ToString()) : false),
                           x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1, x => x.EditableManagmentView.TLItablesNames2,
                           x => x.AttributeActivated, x => x.DynamicAtt, x => x.DynamicAtt.tablesNames, x => x.DynamicAtt.DataType).ToList();

                    List<TLIattributeViewManagment> NotDateTimeLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() != "datetime") : false).ToList();

                    List<TLIattributeViewManagment> NotDateTimeDynamicLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() != "datetime" : false).ToList();

                    List<TLIattributeViewManagment> DateTimeLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() == "datetime") : false).ToList();

                    List<TLIattributeViewManagment> DateTimeDynamicLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() == "datetime" : false).ToList();

                    foreach (MW_ODULibraryViewModel MW_ODULibraryViewModel in MW_ODULibraries)
                    {
                        dynamic DynamicMW_ODULibrary = new ExpandoObject();

                        //
                        // Library Object ViewModel... (Not DateTime DataType Attribute)
                        //
                        if (NotDateTimeLibraryAttributesViewModel != null ? NotDateTimeLibraryAttributesViewModel.Count > 0 : false)
                        {
                            List<PropertyInfo> LibraryProps = typeof(MW_ODULibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() != "datetime" :
                                    (x.PropertyType.Name.ToLower() != "datetime")) :
                                (x.PropertyType.Name.ToLower() != "datetime")).ToList();

                            foreach (PropertyInfo prop in LibraryProps)
                            {
                                if (prop.Name.ToLower().Contains("_name") &&
                                    NotDateTimeLibraryAttributesViewModel.Exists(x =>
                                        x.AttributeActivated.Label.ToLower() == prop.Name.ToLower()))
                                {
                                    object ForeignKeyNamePropObject = prop.GetValue(MW_ODULibraryViewModel, null);
                                    ((IDictionary<String, Object>)DynamicMW_ODULibrary).Add(new KeyValuePair<string, object>(prop.Name, ForeignKeyNamePropObject));
                                }
                                else if (NotDateTimeLibraryAttributesViewModel.Exists(x =>
                                     x.AttributeActivated.Key.ToLower() == prop.Name.ToLower()) &&
                                    !prop.Name.ToLower().Contains("_name") &&
                                    (prop.Name.ToLower().Substring(Math.Max(0, prop.Name.Length - 2)) != "id" || prop.Name.ToLower() == "id"))
                                {
                                    if (prop.Name.ToLower() != "id" && prop.Name.ToLower() != "active")
                                    {
                                        TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                            x.AttributeActivated.Tabel == TablesNames.TLImwODULibrary.ToString() &&
                                            x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                        if (LabelName != null)
                                        {
                                            object PropObject = prop.GetValue(MW_ODULibraryViewModel, null);
                                            ((IDictionary<String, Object>)DynamicMW_ODULibrary).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                        }
                                    }
                                    else
                                    {
                                        object PropObject = prop.GetValue(MW_ODULibraryViewModel, null);
                                        ((IDictionary<String, Object>)DynamicMW_ODULibrary).Add(new KeyValuePair<string, object>(prop.Name, PropObject));
                                    }
                                }
                            }
                        }

                        //
                        // Library Dynamic Attributes... (Not DateTime DataType Attribute)
                        // 
                        List<TLIdynamicAtt> NotDateTimeLibraryDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                           !x.disable && x.tablesNames.TableName == TablesNames.TLImwODULibrary.ToString() &&
                            x.LibraryAtt && x.DataType.Name.ToLower() != "datetime" &&
                            NotDateTimeDynamicLibraryAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames, x => x.DataType).ToList();

                        foreach (var LibraryDynamicAtt in NotDateTimeLibraryDynamicAttributes)
                        {
                            TLIdynamicAttLibValue DynamicAttLibValue = _unitOfWork.DynamicAttLibRepository.GetIncludeWhereFirst(x =>
                                x.DynamicAttId == LibraryDynamicAtt.Id &&
                                x.InventoryId == MW_ODULibraryViewModel.Id && !x.disable &&
                                x.DynamicAtt.LibraryAtt &&
                                x.DynamicAtt.Key == LibraryDynamicAtt.Key,
                                    x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType);

                            if (DynamicAttLibValue != null)
                            {
                                dynamic DynamicAttValue = new ExpandoObject();

                                if (DynamicAttLibValue.ValueString != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueString;

                                else if (DynamicAttLibValue.ValueDouble != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDouble;

                                else if (DynamicAttLibValue.ValueDateTime != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDateTime;

                                else if (DynamicAttLibValue.ValueBoolean != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueBoolean;

                                ((IDictionary<String, Object>)DynamicMW_ODULibrary).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, DynamicAttValue));
                            }
                            else
                            {
                                ((IDictionary<String, Object>)DynamicMW_ODULibrary).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, null));
                            }
                        }

                        //
                        // Library Object ViewModel... (DateTime DataType Attribute)
                        //
                        dynamic DateTimeAttributes = new ExpandoObject();
                        if (DateTimeLibraryAttributesViewModel != null ? DateTimeLibraryAttributesViewModel.Count() > 0 : false)
                        {
                            List<PropertyInfo> DateTimeLibraryProps = typeof(MW_ODULibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name == "datetime" :
                                    (x.PropertyType.Name.ToLower() == "datetime")) :
                                (x.PropertyType.Name.ToLower() == "datetime")).ToList();

                            foreach (PropertyInfo prop in DateTimeLibraryProps)
                            {
                                TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                    x.AttributeActivated.Tabel == TablesNames.TLImwODULibrary.ToString() &&
                                    x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                if (LabelName != null)
                                {
                                    object PropObject = prop.GetValue(MW_ODULibraryViewModel, null);
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                }
                            }
                        }

                        //
                        // Library Dynamic Attributes... (DateTime DataType Attribute)
                        // 
                        List<TLIdynamicAtt> LibraryDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                           !x.disable && x.tablesNames.TableName == TablesNames.TLImwODULibrary.ToString() &&
                            x.LibraryAtt && x.DataType.Name.ToLower() == "datetime" &&
                            DateTimeDynamicLibraryAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames).ToList();

                        foreach (TLIdynamicAtt LibraryDynamicAtt in LibraryDynamicAttributes)
                        {
                            TLIdynamicAttLibValue DynamicAttLibValue = _unitOfWork.DynamicAttLibRepository.GetIncludeWhereFirst(x =>
                                x.DynamicAttId == LibraryDynamicAtt.Id &&
                                x.InventoryId == MW_ODULibraryViewModel.Id && !x.disable &&
                                x.DynamicAtt.LibraryAtt &&
                                x.DynamicAtt.Key == LibraryDynamicAtt.Key,
                                    x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType);

                            if (DynamicAttLibValue != null)
                            {
                                dynamic DynamicAttValue = new ExpandoObject();
                                if (DynamicAttLibValue.ValueDateTime != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDateTime;

                                ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, DynamicAttValue));
                            }
                            else
                            {
                                ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, null));
                            }
                        }

                        ((IDictionary<String, Object>)DynamicMW_ODULibrary).Add(new KeyValuePair<string, object>("DateTimeAttributes", DateTimeAttributes));

                        OutPutList.Add(DynamicMW_ODULibrary);
                    }

                    MW_ODUTableDisplay.Model = OutPutList;

                    if (WithFilterData)
                    {
                        MW_ODUTableDisplay.filters = _unitOfWork.MW_ODULibraryRepository.GetRelatedTables();
                    }
                    else
                    {
                        MW_ODUTableDisplay.filters = null;
                    }

                    return new Response<ReturnWithFilters<object>>(true, MW_ODUTableDisplay, null, null, (int)Helpers.Constants.ApiReturnCode.success, Count);
                }
                catch (Exception err)
                {
                    return new Response<ReturnWithFilters<object>>(false, null, null, err.Message, (int)Helpers.Constants.ApiReturnCode.fail);
                }
            }
            else if (Helpers.Constants.LoadSubType.TLImwRFULibrary.ToString() == TableNameLibrary)
            {
                try
                {
                    List<FilterObjectList> ObjectAttributeFilters = CombineFilters.filters;
                    List<DateFilterViewModel> DateFilter = CombineFilters.DateFilter;
                    int Count = 0;
                    List<object> OutPutList = new List<object>();
                    ReturnWithFilters<object> NW_RFUTableDisplay = new ReturnWithFilters<object>();

                    List<StringFilterObjectList> AttributeFilters = new List<StringFilterObjectList>();

                    List<MW_RFULibraryViewModel> MW_RFULibraries = new List<MW_RFULibraryViewModel>();
                    List<MW_RFULibraryViewModel> WithoutDateFilterMW_RFULibraries = new List<MW_RFULibraryViewModel>();
                    List<MW_RFULibraryViewModel> WithDateFilterMW_RFULibraries = new List<MW_RFULibraryViewModel>();

                    List<TLIattributeActivated> MW_RFULibraryAttribute = new List<TLIattributeActivated>();
                    if ((DateFilter != null ? DateFilter.Count() > 0 : false) ||
                        (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0))
                    {
                        MW_RFULibraryAttribute = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                            x.Enable && x.AttributeActivatedId != null &&
                            x.AttributeActivated.DataType.ToLower() != "datetime" &&
                            x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.MW_RFULibrary.ToString() &&
                            x.EditableManagmentView.TLItablesNames1.TableName == TablesNames.TLImwRFULibrary.ToString(),
                                x => x.AttributeActivated, x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1)
                        .Select(x => x.AttributeActivated).ToList();
                    }

                    if (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0)
                    {
                        List<TLIattributeActivated> NotDateDateMW_RFULibraryAttribute = MW_RFULibraryAttribute.Where(x =>
                            x.DataType.ToLower() != "datetime").ToList();

                        foreach (FilterObjectList item in ObjectAttributeFilters)
                        {
                            List<string> value = item.value.Select(x => x.ToString().ToLower()).ToList();

                            TLIattributeActivated AttributeKey = NotDateDateMW_RFULibraryAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());

                            string Key = "";

                            if (AttributeKey != null)
                                Key = AttributeKey.Key;

                            else
                                Key = item.key;

                            AttributeFilters.Add(new StringFilterObjectList
                            {
                                key = Key,
                                value = value
                            });
                        }
                    }
                    if (AttributeFilters != null && AttributeFilters.Count > 0)
                    {
                        //
                        // Library Dynamic Attributes...
                        //
                        List<TLIdynamicAtt> LibDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AttributeFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == TablesNames.TLImwRFULibrary.ToString(), x => x.tablesNames, x => x.DataType).ToList();

                        List<int> DynamicLibValueListIds = new List<int>();
                        bool DynamicLibExist = false;

                        if (LibDynamicAttListIds.Count > 0)
                        {
                            DynamicLibExist = true;
                            GetInventoriesIdsFromDynamicAttributes(out DynamicLibValueListIds, LibDynamicAttListIds, AttributeFilters);
                        }

                        //
                        // Library Attribute Activated...
                        //
                        bool AttrLibExist = typeof(MW_RFULibraryViewModel).GetProperties().ToList().Exists(x =>
                            AttributeFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower() && y.key.ToLower() != "id"));

                        List<int> LibraryAttributeActivatedIds = new List<int>();

                        if (AttrLibExist)
                        {
                            List<PropertyInfo> NonStringLibraryProps = typeof(MW_RFULibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() != "string" &&
                                AttributeFilters.Exists(y =>
                                    y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<PropertyInfo> StringLibraryProps = typeof(MW_RFULibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() == "string" &&
                                AttributeFilters.Exists(y =>
                                    y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<StringFilterObjectList> LibraryPropsAttributeFilters = AttributeFilters.Where(x =>
                                NonStringLibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower()) ||
                                StringLibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            LibraryAttributeActivatedIds = _unitOfWork.MW_RFULibraryRepository.GetWhere(x =>
                                 LibraryPropsAttributeFilters.All(z =>
                                    NonStringLibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (y.GetValue(_mapper.Map<MW_RFULibraryViewModel>(x), null) != null ? z.value.Contains(y.GetValue(_mapper.Map<MW_RFULibraryViewModel>(x), null).ToString().ToLower()) : false)) ||
                                    StringLibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (z.value.Any(w =>
                                         y.GetValue(_mapper.Map<MW_RFULibraryViewModel>(x), null) != null ? y.GetValue(_mapper.Map<MW_RFULibraryViewModel>(x), null).ToString().ToLower().StartsWith(w.ToLower()) : false))))
                             ).Select(i => i.Id).ToList();
                        }

                        //
                        // Library (Attribute Activated + Dynamic) Attributes...
                        //
                        List<int> IntersectLibraryIds = new List<int>();
                        if (AttrLibExist && DynamicLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds.Intersect(DynamicLibValueListIds).ToList();
                        }
                        else if (AttrLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds;
                        }
                        else if (DynamicLibExist)
                        {
                            IntersectLibraryIds = DynamicLibValueListIds;
                        }

                        WithoutDateFilterMW_RFULibraries = _mapper.Map<List<MW_RFULibraryViewModel>>(_unitOfWork.MW_RFULibraryRepository.GetIncludeWhere(x =>
                            x.Id > 0 && IntersectLibraryIds.Contains(x.Id) && !x.Deleted, x => x.boardType, x => x.diversityType).ToList());
                    }

                    //
                    // DateTime Objects Filters..
                    //
                    List<DateFilterViewModel> AfterConvertDateFilters = new List<DateFilterViewModel>();
                    if (DateFilter != null ? DateFilter.Count() > 0 : false)
                    {
                        List<TLIattributeActivated> DateMW_RFULibraryAttribute = MW_RFULibraryAttribute.Where(x =>
                            x.DataType.ToLower() == "datetime").ToList();

                        foreach (DateFilterViewModel item in DateFilter)
                        {
                            DateTime DateFrom = Convert.ToDateTime(item.DateFrom);
                            DateTime DateTo = Convert.ToDateTime(item.DateTo);

                            if (DateFrom > DateTo)
                            {
                                DateTime Replacer = DateFrom;
                                DateFrom = DateTo;
                                DateTo = Replacer;
                            }

                            TLIattributeActivated AttributeKey = DateMW_RFULibraryAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());
                            string Key = "";

                            if (AttributeKey != null)
                                Key = AttributeKey.Key;
                            else
                                Key = item.key;

                            AfterConvertDateFilters.Add(new DateFilterViewModel
                            {
                                key = Key,
                                DateFrom = DateFrom,
                                DateTo = DateTo
                            });
                        }
                    }
                    if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                    {
                        //
                        // Library Dynamic Attributes...
                        //
                        List<TLIdynamicAtt> DateTimeLibDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AfterConvertDateFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == TablesNames.TLImwRFULibrary.ToString(), x => x.tablesNames).ToList();

                        List<int> DynamicLibValueListIds = new List<int>();
                        bool DynamicLibExist = false;

                        if (DateTimeLibDynamicAttListIds.Count > 0)
                        {
                            DynamicLibExist = true;
                            List<DateFilterViewModel> DynamicLibAttributeFilters = AfterConvertDateFilters.Where(x =>
                                DateTimeLibDynamicAttListIds.Exists(y => y.Key.ToLower() == x.key.ToLower())).ToList();

                            DynamicLibValueListIds = new List<int>();

                            List<TLIdynamicAttLibValue> DynamicLibValueListObjects = _unitOfWork.DynamicAttLibRepository.GetIncludeWhere(x =>
                                DateTimeLibDynamicAttListIds.Exists(y => y.Id == x.DynamicAttId) && !x.disable).ToList();

                            List<int> InventoriesIds = DynamicLibValueListObjects.Select(x => x.InventoryId).Distinct().ToList();

                            foreach (int InventoryId in InventoriesIds)
                            {
                                List<TLIdynamicAttLibValue> DynamicLibValueListInventories = DynamicLibValueListObjects.Where(x =>
                                    x.InventoryId == InventoryId).ToList();

                                if (DynamicLibAttributeFilters.All(y => DynamicLibValueListInventories.Exists(x =>
                                     (x.ValueDateTime != null ?
                                        (x.ValueDateTime >= y.DateFrom && x.ValueDateTime <= y.DateTo) : (false)))))
                                {
                                    DynamicLibValueListIds.Add(InventoryId);
                                }
                            }
                        }

                        //
                        // Library Attribute Activated...
                        //
                        List<PropertyInfo> LibraryProps = typeof(MW_RFULibraryViewModel).GetProperties().Where(x =>
                            AfterConvertDateFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower())).ToList();

                        List<int> LibraryAttributeActivatedIds = new List<int>();
                        bool AttrLibExist = false;

                        if (LibraryProps != null)
                        {
                            AttrLibExist = true;

                            List<DateFilterViewModel> LibraryPropsAttributeFilters = AfterConvertDateFilters.Where(x =>
                                LibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            LibraryAttributeActivatedIds = _unitOfWork.MW_RFULibraryRepository.GetIncludeWhere(x =>
                                LibraryPropsAttributeFilters.All(z =>
                                    (LibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && ((y.GetValue(_mapper.Map<MW_RFULibraryViewModel>(x), null) != null) ?
                                        ((z.DateFrom >= Convert.ToDateTime(y.GetValue(_mapper.Map<MW_RFULibraryViewModel>(x), null))) &&
                                         (z.DateTo <= Convert.ToDateTime(y.GetValue(_mapper.Map<MW_RFULibraryViewModel>(x), null)))) : (false)))))
                            ).Select(i => i.Id).ToList();
                        }

                        //
                        // Library (Attribute Activated + Dynamic) Attributes...
                        //
                        List<int> IntersectLibraryIds = new List<int>();
                        if (AttrLibExist && DynamicLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds.Intersect(DynamicLibValueListIds).ToList();
                        }
                        else if (AttrLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds;
                        }
                        else if (DynamicLibExist)
                        {
                            IntersectLibraryIds = DynamicLibValueListIds;
                        }

                        WithDateFilterMW_RFULibraries = _mapper.Map<List<MW_RFULibraryViewModel>>(_unitOfWork.MW_RFULibraryRepository.GetIncludeWhere(x =>
                            x.Id > 0 && IntersectLibraryIds.Contains(x.Id) && !x.Deleted, x => x.boardType, x => x.diversityType).ToList());
                    }

                    //
                    // Intersect Between WithoutDateFilterMW_RFULibraries + WithDateFilterMW_RFULibraries To Get The Records That Meet The Filters (DateFilters + AttributeFilters)
                    //
                    if ((AttributeFilters != null ? AttributeFilters.Count() == 0 : true) &&
                        (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() == 0 : true))
                    {
                        MW_RFULibraries = _mapper.Map<List<MW_RFULibraryViewModel>>(_unitOfWork.MW_RFULibraryRepository.GetIncludeWhere(x =>
                            x.Id > 0 && !x.Deleted, x => x.boardType, x => x.diversityType).ToList());
                    }
                    else if ((AttributeFilters != null ? AttributeFilters.Count > 0 : false) &&
                            (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false))
                    {
                        List<int> MicrowaveIds = WithoutDateFilterMW_RFULibraries.Select(x => x.Id).Intersect(WithDateFilterMW_RFULibraries.Select(x => x.Id)).ToList();
                        MW_RFULibraries = _mapper.Map<List<MW_RFULibraryViewModel>>(_unitOfWork.MW_RFULibraryRepository.GetWhere(x =>
                            MicrowaveIds.Contains(x.Id)).ToList());
                    }
                    else if (AttributeFilters != null ? AttributeFilters.Count > 0 : false)
                    {
                        MW_RFULibraries = WithoutDateFilterMW_RFULibraries;
                    }
                    else if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                    {
                        MW_RFULibraries = WithDateFilterMW_RFULibraries;
                    }

                    Count = MW_RFULibraries.Count();

                    MW_RFULibraries = MW_RFULibraries.Skip((parameterPagination.PageNumber - 1) * parameterPagination.PageSize).
                        Take(parameterPagination.PageSize).ToList();

                    List<TLIattributeViewManagment> AllAttributes = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                       (x.Enable && x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.MW_RFULibrary.ToString() &&
                       (x.AttributeActivatedId != null ?
                            (x.AttributeActivated.Tabel == TablesNames.TLImwRFULibrary.ToString() && x.AttributeActivated.enable) :
                            (x.DynamicAtt.LibraryAtt && !x.DynamicAtt.disable && x.DynamicAtt.tablesNames.TableName == TablesNames.TLImwRFULibrary.ToString()))) ||
                        (x.AttributeActivated != null ?
                            ((x.AttributeActivated.Key.ToLower() == "id" || x.AttributeActivated.Key.ToLower() == "active") && x.AttributeActivated.Tabel == TablesNames.TLImwRFULibrary.ToString()) : false),
                           x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1, x => x.EditableManagmentView.TLItablesNames2,
                           x => x.AttributeActivated, x => x.DynamicAtt, x => x.DynamicAtt.tablesNames, x => x.DynamicAtt.DataType).ToList();

                    List<TLIattributeViewManagment> NotDateTimeLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() != "datetime") : false).ToList();

                    List<TLIattributeViewManagment> NotDateTimeDynamicLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() != "datetime" : false).ToList();

                    List<TLIattributeViewManagment> DateTimeLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() == "datetime") : false).ToList();

                    List<TLIattributeViewManagment> DateTimeDynamicLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() == "datetime" : false).ToList();

                    foreach (MW_RFULibraryViewModel MW_RFULibraryViewModel in MW_RFULibraries)
                    {
                        dynamic DynamicMW_RFULibrary = new ExpandoObject();

                        //
                        // Library Object ViewModel... (Not DateTime DataType Attribute)
                        //
                        if (NotDateTimeLibraryAttributesViewModel != null ? NotDateTimeLibraryAttributesViewModel.Count > 0 : false)
                        {
                            List<PropertyInfo> LibraryProps = typeof(MW_RFULibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() != "datetime" :
                                    (x.PropertyType.Name.ToLower() != "datetime")) :
                                (x.PropertyType.Name.ToLower() != "datetime")).ToList();

                            foreach (PropertyInfo prop in LibraryProps)
                            {
                                if (prop.Name.ToLower().Contains("_name") &&
                                    NotDateTimeLibraryAttributesViewModel.Exists(x =>
                                        x.AttributeActivated.Label.ToLower() == prop.Name.ToLower()))
                                {
                                    object ForeignKeyNamePropObject = prop.GetValue(MW_RFULibraryViewModel, null);
                                    ((IDictionary<String, Object>)DynamicMW_RFULibrary).Add(new KeyValuePair<string, object>(prop.Name, ForeignKeyNamePropObject));
                                }
                                else if (NotDateTimeLibraryAttributesViewModel.Exists(x =>
                                     x.AttributeActivated.Key.ToLower() == prop.Name.ToLower()) &&
                                    !prop.Name.ToLower().Contains("_name") &&
                                    (prop.Name.ToLower().Substring(Math.Max(0, prop.Name.Length - 2)) != "id" || prop.Name.ToLower() == "id"))
                                {
                                    if (prop.Name.ToLower() != "id" && prop.Name.ToLower() != "active")
                                    {
                                        TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                            x.AttributeActivated.Tabel == TablesNames.TLImwRFULibrary.ToString() &&
                                            x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                        if (LabelName != null)
                                        {
                                            object PropObject = prop.GetValue(MW_RFULibraryViewModel, null);
                                            ((IDictionary<String, Object>)DynamicMW_RFULibrary).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                        }
                                    }
                                    else
                                    {
                                        object PropObject = prop.GetValue(MW_RFULibraryViewModel, null);
                                        ((IDictionary<String, Object>)DynamicMW_RFULibrary).Add(new KeyValuePair<string, object>(prop.Name, PropObject));
                                    }
                                }
                            }
                        }

                        //
                        // Library Dynamic Attributes... (Not DateTime DataType Attribute)
                        // 
                        List<TLIdynamicAtt> NotDateTimeLibraryDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                           !x.disable && x.tablesNames.TableName == TablesNames.TLImwRFULibrary.ToString() &&
                            x.LibraryAtt && x.DataType.Name.ToLower() != "datetime" &&
                            NotDateTimeDynamicLibraryAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames, x => x.DataType).ToList();

                        foreach (var LibraryDynamicAtt in NotDateTimeLibraryDynamicAttributes)
                        {
                            TLIdynamicAttLibValue DynamicAttLibValue = _unitOfWork.DynamicAttLibRepository.GetIncludeWhereFirst(x =>
                                x.DynamicAttId == LibraryDynamicAtt.Id &&
                                x.InventoryId == MW_RFULibraryViewModel.Id && !x.disable &&
                                x.DynamicAtt.LibraryAtt &&
                                x.DynamicAtt.Key == LibraryDynamicAtt.Key,
                                    x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType);

                            if (DynamicAttLibValue != null)
                            {
                                dynamic DynamicAttValue = new ExpandoObject();

                                if (DynamicAttLibValue.ValueString != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueString;

                                else if (DynamicAttLibValue.ValueDouble != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDouble;

                                else if (DynamicAttLibValue.ValueDateTime != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDateTime;

                                else if (DynamicAttLibValue.ValueBoolean != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueBoolean;

                                ((IDictionary<String, Object>)DynamicMW_RFULibrary).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, DynamicAttValue));
                            }
                            else
                            {
                                ((IDictionary<String, Object>)DynamicMW_RFULibrary).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, null));
                            }
                        }

                        //
                        // Library Object ViewModel... (DateTime DataType Attribute)
                        //
                        dynamic DateTimeAttributes = new ExpandoObject();
                        if (DateTimeLibraryAttributesViewModel != null ? DateTimeLibraryAttributesViewModel.Count() > 0 : false)
                        {
                            List<PropertyInfo> DateTimeLibraryProps = typeof(MW_RFULibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name == "datetime" :
                                    (x.PropertyType.Name.ToLower() == "datetime")) :
                                (x.PropertyType.Name.ToLower() == "datetime")).ToList();

                            foreach (PropertyInfo prop in DateTimeLibraryProps)
                            {
                                TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                    x.AttributeActivated.Tabel == TablesNames.TLImwRFULibrary.ToString() &&
                                    x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                if (LabelName != null)
                                {
                                    object PropObject = prop.GetValue(MW_RFULibraryViewModel, null);
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                }
                            }
                        }

                        //
                        // Library Dynamic Attributes... (DateTime DataType Attribute)
                        // 
                        List<TLIdynamicAtt> LibraryDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                           !x.disable && x.tablesNames.TableName == TablesNames.TLImwRFULibrary.ToString() &&
                            x.LibraryAtt && x.DataType.Name.ToLower() == "datetime" &&
                            DateTimeDynamicLibraryAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames).ToList();

                        foreach (TLIdynamicAtt LibraryDynamicAtt in LibraryDynamicAttributes)
                        {
                            TLIdynamicAttLibValue DynamicAttLibValue = _unitOfWork.DynamicAttLibRepository.GetIncludeWhereFirst(x =>
                                x.DynamicAttId == LibraryDynamicAtt.Id &&
                                x.InventoryId == MW_RFULibraryViewModel.Id && !x.disable &&
                                x.DynamicAtt.LibraryAtt &&
                                x.DynamicAtt.Key == LibraryDynamicAtt.Key,
                                    x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType);

                            if (DynamicAttLibValue != null)
                            {
                                dynamic DynamicAttValue = new ExpandoObject();
                                if (DynamicAttLibValue.ValueDateTime != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDateTime;

                                ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, DynamicAttValue));
                            }
                            else
                            {
                                ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, null));
                            }
                        }

                        ((IDictionary<String, Object>)DynamicMW_RFULibrary).Add(new KeyValuePair<string, object>("DateTimeAttributes", DateTimeAttributes));

                        OutPutList.Add(DynamicMW_RFULibrary);
                    }

                    NW_RFUTableDisplay.Model = OutPutList;

                    if (WithFilterData)
                    {
                        NW_RFUTableDisplay.filters = _unitOfWork.MW_RFULibraryRepository.GetRelatedTables();
                    }
                    else
                    {
                        NW_RFUTableDisplay.filters = null;
                    }

                    return new Response<ReturnWithFilters<object>>(true, NW_RFUTableDisplay, null, null, (int)Helpers.Constants.ApiReturnCode.success, Count);
                }
                catch (Exception err)
                {
                    return new Response<ReturnWithFilters<object>>(false, null, null, err.Message, (int)Helpers.Constants.ApiReturnCode.fail);
                }
            }
            else if (Helpers.Constants.LoadSubType.TLImwOtherLibrary.ToString() == TableNameLibrary)
            {
                try
                {
                    List<FilterObjectList> ObjectAttributeFilters = CombineFilters.filters;
                    List<DateFilterViewModel> DateFilter = CombineFilters.DateFilter;
                    int Count = 0;
                    List<object> OutPutList = new List<object>();
                    ReturnWithFilters<object> MW_OtherTableDisplay = new ReturnWithFilters<object>();

                    List<StringFilterObjectList> AttributeFilters = new List<StringFilterObjectList>();

                    List<MW_OtherLibraryViewModel> MW_OtherLibraries = new List<MW_OtherLibraryViewModel>();
                    List<MW_OtherLibraryViewModel> WithoutDateFilterMW_OtherLibraries = new List<MW_OtherLibraryViewModel>();
                    List<MW_OtherLibraryViewModel> WithDateFilterMW_OtherLibraries = new List<MW_OtherLibraryViewModel>();

                    List<TLIattributeActivated> MW_OtherLibraryAttribute = new List<TLIattributeActivated>();
                    if ((DateFilter != null ? DateFilter.Count() > 0 : false) ||
                        (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0))
                    {
                        MW_OtherLibraryAttribute = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                            x.Enable && x.AttributeActivatedId != null &&
                            x.AttributeActivated.DataType.ToLower() != "datetime" &&
                            x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.OtherMWLibrary.ToString() &&
                            x.EditableManagmentView.TLItablesNames1.TableName == TablesNames.TLImwOtherLibrary.ToString(),
                                x => x.AttributeActivated, x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1)
                        .Select(x => x.AttributeActivated).ToList();
                    }

                    if (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0)
                    {
                        List<TLIattributeActivated> NotDateDateMW_OtherLibraryAttribute = MW_OtherLibraryAttribute.Where(x =>
                            x.DataType.ToLower() != "datetime").ToList();

                        foreach (FilterObjectList item in ObjectAttributeFilters)
                        {
                            List<string> value = item.value.Select(x => x.ToString().ToLower()).ToList();

                            TLIattributeActivated AttributeKey = NotDateDateMW_OtherLibraryAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());

                            string Key = "";

                            if (AttributeKey != null)
                                Key = AttributeKey.Key;

                            else
                                Key = item.key;

                            AttributeFilters.Add(new StringFilterObjectList
                            {
                                key = Key,
                                value = value
                            });
                        }
                    }
                    if (AttributeFilters != null && AttributeFilters.Count > 0)
                    {
                        //
                        // Library Dynamic Attributes...
                        //
                        List<TLIdynamicAtt> LibDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AttributeFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == TablesNames.TLImwOtherLibrary.ToString(), x => x.tablesNames, x => x.DataType).ToList();

                        List<int> DynamicLibValueListIds = new List<int>();
                        bool DynamicLibExist = false;

                        if (LibDynamicAttListIds.Count > 0)
                        {
                            DynamicLibExist = true;
                            GetInventoriesIdsFromDynamicAttributes(out DynamicLibValueListIds, LibDynamicAttListIds, AttributeFilters);
                        }

                        //
                        // Library Attribute Activated...
                        //
                        bool AttrLibExist = typeof(MW_OtherLibraryViewModel).GetProperties().ToList().Exists(x =>
                            AttributeFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower() && y.key.ToLower() != "id"));

                        List<int> LibraryAttributeActivatedIds = new List<int>();

                        if (AttrLibExist)
                        {
                            List<PropertyInfo> NonStringLibraryProps = typeof(MW_OtherLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() != "string" &&
                                AttributeFilters.Exists(y =>
                                    y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<PropertyInfo> StringLibraryProps = typeof(MW_OtherLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() == "string" &&
                                AttributeFilters.Exists(y =>
                                    y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<StringFilterObjectList> LibraryPropsAttributeFilters = AttributeFilters.Where(x =>
                                NonStringLibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower()) ||
                                StringLibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            LibraryAttributeActivatedIds = _unitOfWork.MW_OtherLibraryRepository.GetWhere(x =>
                                 LibraryPropsAttributeFilters.All(z =>
                                    NonStringLibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (y.GetValue(_mapper.Map<MW_OtherLibraryViewModel>(x), null) != null ? z.value.Contains(y.GetValue(_mapper.Map<MW_OtherLibraryViewModel>(x), null).ToString().ToLower()) : false)) ||
                                    StringLibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (z.value.Any(w =>
                                         y.GetValue(_mapper.Map<MW_OtherLibraryViewModel>(x), null) != null ? y.GetValue(_mapper.Map<MW_OtherLibraryViewModel>(x), null).ToString().ToLower().StartsWith(w.ToLower()) : false))))
                             ).Select(i => i.Id).ToList();
                        }

                        //
                        // Library (Attribute Activated + Dynamic) Attributes...
                        //
                        List<int> IntersectLibraryIds = new List<int>();
                        if (AttrLibExist && DynamicLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds.Intersect(DynamicLibValueListIds).ToList();
                        }
                        else if (AttrLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds;
                        }
                        else if (DynamicLibExist)
                        {
                            IntersectLibraryIds = DynamicLibValueListIds;
                        }

                        WithoutDateFilterMW_OtherLibraries = _mapper.Map<List<MW_OtherLibraryViewModel>>(_unitOfWork.MW_OtherLibraryRepository.GetWhere(x =>
                            x.Id > 0 && IntersectLibraryIds.Contains(x.Id) && !x.Deleted).ToList());
                    }

                    //
                    // DateTime Objects Filters..
                    //
                    List<DateFilterViewModel> AfterConvertDateFilters = new List<DateFilterViewModel>();
                    if (DateFilter != null ? DateFilter.Count() > 0 : false)
                    {
                        List<TLIattributeActivated> DateMW_OtherLibraryAttribute = MW_OtherLibraryAttribute.Where(x =>
                            x.DataType.ToLower() == "datetime").ToList();

                        foreach (DateFilterViewModel item in DateFilter)
                        {
                            DateTime DateFrom = Convert.ToDateTime(item.DateFrom);
                            DateTime DateTo = Convert.ToDateTime(item.DateTo);

                            if (DateFrom > DateTo)
                            {
                                DateTime Replacer = DateFrom;
                                DateFrom = DateTo;
                                DateTo = Replacer;
                            }

                            TLIattributeActivated AttributeKey = DateMW_OtherLibraryAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());
                            string Key = "";

                            if (AttributeKey != null)
                                Key = AttributeKey.Key;
                            else
                                Key = item.key;

                            AfterConvertDateFilters.Add(new DateFilterViewModel
                            {
                                key = Key,
                                DateFrom = DateFrom,
                                DateTo = DateTo
                            });
                        }
                    }
                    if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                    {
                        //
                        // Library Dynamic Attributes...
                        //
                        List<TLIdynamicAtt> DateTimeLibDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AfterConvertDateFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == TablesNames.TLImwOtherLibrary.ToString(), x => x.tablesNames).ToList();

                        List<int> DynamicLibValueListIds = new List<int>();
                        bool DynamicLibExist = false;

                        if (DateTimeLibDynamicAttListIds.Count > 0)
                        {
                            DynamicLibExist = true;
                            List<DateFilterViewModel> DynamicLibAttributeFilters = AfterConvertDateFilters.Where(x =>
                                DateTimeLibDynamicAttListIds.Exists(y => y.Key.ToLower() == x.key.ToLower())).ToList();

                            DynamicLibValueListIds = new List<int>();

                            List<TLIdynamicAttLibValue> DynamicLibValueListObjects = _unitOfWork.DynamicAttLibRepository.GetIncludeWhere(x =>
                                DateTimeLibDynamicAttListIds.Exists(y => y.Id == x.DynamicAttId) && !x.disable).ToList();

                            List<int> InventoriesIds = DynamicLibValueListObjects.Select(x => x.InventoryId).Distinct().ToList();

                            foreach (int InventoryId in InventoriesIds)
                            {
                                List<TLIdynamicAttLibValue> DynamicLibValueListInventories = DynamicLibValueListObjects.Where(x =>
                                    x.InventoryId == InventoryId).ToList();

                                if (DynamicLibAttributeFilters.All(y => DynamicLibValueListInventories.Exists(x =>
                                     (x.ValueDateTime != null ?
                                        (x.ValueDateTime >= y.DateFrom && x.ValueDateTime <= y.DateTo) : (false)))))
                                {
                                    DynamicLibValueListIds.Add(InventoryId);
                                }
                            }
                        }

                        //
                        // Library Attribute Activated...
                        //
                        List<PropertyInfo> LibraryProps = typeof(MW_OtherLibraryViewModel).GetProperties().Where(x =>
                            AfterConvertDateFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower())).ToList();

                        List<int> LibraryAttributeActivatedIds = new List<int>();
                        bool AttrLibExist = false;

                        if (LibraryProps != null)
                        {
                            AttrLibExist = true;

                            List<DateFilterViewModel> LibraryPropsAttributeFilters = AfterConvertDateFilters.Where(x =>
                                LibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            LibraryAttributeActivatedIds = _unitOfWork.MW_OtherLibraryRepository.GetIncludeWhere(x =>
                                LibraryPropsAttributeFilters.All(z =>
                                    (LibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && ((y.GetValue(_mapper.Map<MW_OtherLibraryViewModel>(x), null) != null) ?
                                        ((z.DateFrom >= Convert.ToDateTime(y.GetValue(_mapper.Map<MW_OtherLibraryViewModel>(x), null))) &&
                                         (z.DateTo <= Convert.ToDateTime(y.GetValue(_mapper.Map<MW_OtherLibraryViewModel>(x), null)))) : (false)))))
                            ).Select(i => i.Id).ToList();
                        }

                        //
                        // Library (Attribute Activated + Dynamic) Attributes...
                        //
                        List<int> IntersectLibraryIds = new List<int>();
                        if (AttrLibExist && DynamicLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds.Intersect(DynamicLibValueListIds).ToList();
                        }
                        else if (AttrLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds;
                        }
                        else if (DynamicLibExist)
                        {
                            IntersectLibraryIds = DynamicLibValueListIds;
                        }

                        WithDateFilterMW_OtherLibraries = _mapper.Map<List<MW_OtherLibraryViewModel>>(_unitOfWork.MW_OtherLibraryRepository.GetWhere(x =>
                            x.Id > 0 && IntersectLibraryIds.Contains(x.Id) && !x.Deleted).ToList());
                    }

                    //
                    // Intersect Between WithoutDateFilterMW_OtherLibraries + WithDateFilterMW_OtherLibraries To Get The Records That Meet The Filters (DateFilters + AttributeFilters)
                    //
                    if ((AttributeFilters != null ? AttributeFilters.Count() == 0 : true) &&
                        (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() == 0 : true))
                    {
                        MW_OtherLibraries = _mapper.Map<List<MW_OtherLibraryViewModel>>(_unitOfWork.MW_OtherLibraryRepository.GetWhere(x =>
                            x.Id > 0 && !x.Deleted).ToList());
                    }
                    else if ((AttributeFilters != null ? AttributeFilters.Count > 0 : false) &&
                            (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false))
                    {
                        List<int> MicrowaveIds = WithoutDateFilterMW_OtherLibraries.Select(x => x.Id).Intersect(WithDateFilterMW_OtherLibraries.Select(x => x.Id)).ToList();
                        MW_OtherLibraries = _mapper.Map<List<MW_OtherLibraryViewModel>>(_unitOfWork.MW_OtherLibraryRepository.GetWhere(x =>
                            MicrowaveIds.Contains(x.Id)).ToList());
                    }
                    else if (AttributeFilters != null ? AttributeFilters.Count > 0 : false)
                    {
                        MW_OtherLibraries = WithoutDateFilterMW_OtherLibraries;
                    }
                    else if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                    {
                        MW_OtherLibraries = WithDateFilterMW_OtherLibraries;
                    }

                    Count = MW_OtherLibraries.Count();

                    MW_OtherLibraries = MW_OtherLibraries.Skip((parameterPagination.PageNumber - 1) * parameterPagination.PageSize).
                        Take(parameterPagination.PageSize).ToList();

                    List<TLIattributeViewManagment> AllAttributes = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                       (x.Enable && x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.OtherMWLibrary.ToString() &&
                       (x.AttributeActivatedId != null ?
                            (x.AttributeActivated.Tabel == TablesNames.TLImwOtherLibrary.ToString() && x.AttributeActivated.enable) :
                            (x.DynamicAtt.LibraryAtt && !x.DynamicAtt.disable && x.DynamicAtt.tablesNames.TableName == TablesNames.TLImwOtherLibrary.ToString()))) ||
                        (x.AttributeActivated != null ?
                            ((x.AttributeActivated.Key.ToLower() == "id" || x.AttributeActivated.Key.ToLower() == "active") && x.AttributeActivated.Tabel == TablesNames.TLImwOtherLibrary.ToString()) : false),
                           x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1, x => x.EditableManagmentView.TLItablesNames2,
                           x => x.AttributeActivated, x => x.DynamicAtt, x => x.DynamicAtt.tablesNames, x => x.DynamicAtt.DataType).ToList();

                    List<TLIattributeViewManagment> NotDateTimeLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() != "datetime") : false).ToList();

                    List<TLIattributeViewManagment> NotDateTimeDynamicLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() != "datetime" : false).ToList();

                    List<TLIattributeViewManagment> DateTimeLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() == "datetime") : false).ToList();

                    List<TLIattributeViewManagment> DateTimeDynamicLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() == "datetime" : false).ToList();

                    foreach (MW_OtherLibraryViewModel MW_OtherLibraryViewModel in MW_OtherLibraries)
                    {
                        dynamic DynamicMW_OtherLibrary = new ExpandoObject();

                        //
                        // Library Object ViewModel... (Not DateTime DataType Attribute)
                        //
                        if (NotDateTimeLibraryAttributesViewModel != null ? NotDateTimeLibraryAttributesViewModel.Count > 0 : false)
                        {
                            List<PropertyInfo> LibraryProps = typeof(MW_OtherLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() != "datetime" :
                                    (x.PropertyType.Name.ToLower() != "datetime")) :
                                (x.PropertyType.Name.ToLower() != "datetime")).ToList();

                            foreach (PropertyInfo prop in LibraryProps)
                            {
                                if (prop.Name.ToLower().Contains("_name") &&
                                    NotDateTimeLibraryAttributesViewModel.Exists(x =>
                                        x.AttributeActivated.Label.ToLower() == prop.Name.ToLower()))
                                {
                                    object ForeignKeyNamePropObject = prop.GetValue(MW_OtherLibraryViewModel, null);
                                    ((IDictionary<String, Object>)DynamicMW_OtherLibrary).Add(new KeyValuePair<string, object>(prop.Name, ForeignKeyNamePropObject));
                                }
                                else if (NotDateTimeLibraryAttributesViewModel.Exists(x =>
                                     x.AttributeActivated.Key.ToLower() == prop.Name.ToLower()) &&
                                    !prop.Name.ToLower().Contains("_name") &&
                                    (prop.Name.ToLower().Substring(Math.Max(0, prop.Name.Length - 2)) != "id" || prop.Name.ToLower() == "id"))
                                {
                                    if (prop.Name.ToLower() != "id" && prop.Name.ToLower() != "active")
                                    {
                                        TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                            x.AttributeActivated.Tabel == TablesNames.TLImwOtherLibrary.ToString() &&
                                            x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                        if (LabelName != null)
                                        {
                                            object PropObject = prop.GetValue(MW_OtherLibraryViewModel, null);
                                            ((IDictionary<String, Object>)DynamicMW_OtherLibrary).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                        }
                                    }
                                    else
                                    {
                                        object PropObject = prop.GetValue(MW_OtherLibraryViewModel, null);
                                        ((IDictionary<String, Object>)DynamicMW_OtherLibrary).Add(new KeyValuePair<string, object>(prop.Name, PropObject));
                                    }
                                }
                            }
                        }

                        //
                        // Library Dynamic Attributes... (Not DateTime DataType Attribute)
                        // 
                        List<TLIdynamicAtt> NotDateTimeLibraryDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                           !x.disable && x.tablesNames.TableName == TablesNames.TLImwOtherLibrary.ToString() &&
                            x.LibraryAtt && x.DataType.Name.ToLower() != "datetime" &&
                            NotDateTimeDynamicLibraryAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames, x => x.DataType).ToList();

                        foreach (var LibraryDynamicAtt in NotDateTimeLibraryDynamicAttributes)
                        {
                            TLIdynamicAttLibValue DynamicAttLibValue = _unitOfWork.DynamicAttLibRepository.GetIncludeWhereFirst(x =>
                                x.DynamicAttId == LibraryDynamicAtt.Id &&
                                x.InventoryId == MW_OtherLibraryViewModel.Id && !x.disable &&
                                x.DynamicAtt.LibraryAtt &&
                                x.DynamicAtt.Key == LibraryDynamicAtt.Key,
                                    x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType);

                            if (DynamicAttLibValue != null)
                            {
                                dynamic DynamicAttValue = new ExpandoObject();

                                if (DynamicAttLibValue.ValueString != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueString;

                                else if (DynamicAttLibValue.ValueDouble != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDouble;

                                else if (DynamicAttLibValue.ValueDateTime != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDateTime;

                                else if (DynamicAttLibValue.ValueBoolean != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueBoolean;

                                ((IDictionary<String, Object>)DynamicMW_OtherLibrary).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, DynamicAttValue));
                            }
                            else
                            {
                                ((IDictionary<String, Object>)DynamicMW_OtherLibrary).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, null));
                            }
                        }

                        //
                        // Library Object ViewModel... (DateTime DataType Attribute)
                        //
                        dynamic DateTimeAttributes = new ExpandoObject();
                        if (DateTimeLibraryAttributesViewModel != null ? DateTimeLibraryAttributesViewModel.Count() > 0 : false)
                        {
                            List<PropertyInfo> DateTimeLibraryProps = typeof(MW_OtherLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name == "datetime" :
                                    (x.PropertyType.Name.ToLower() == "datetime")) :
                                (x.PropertyType.Name.ToLower() == "datetime")).ToList();

                            foreach (PropertyInfo prop in DateTimeLibraryProps)
                            {
                                TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                    x.AttributeActivated.Tabel == TablesNames.TLImwOtherLibrary.ToString() &&
                                    x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                if (LabelName != null)
                                {
                                    object PropObject = prop.GetValue(MW_OtherLibraryViewModel, null);
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                }
                            }
                        }

                        //
                        // Library Dynamic Attributes... (DateTime DataType Attribute)
                        // 
                        List<TLIdynamicAtt> LibraryDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                           !x.disable && x.tablesNames.TableName == TablesNames.TLImwOtherLibrary.ToString() &&
                            x.LibraryAtt && x.DataType.Name.ToLower() == "datetime" &&
                            DateTimeDynamicLibraryAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames).ToList();

                        foreach (TLIdynamicAtt LibraryDynamicAtt in LibraryDynamicAttributes)
                        {
                            TLIdynamicAttLibValue DynamicAttLibValue = _unitOfWork.DynamicAttLibRepository.GetIncludeWhereFirst(x =>
                                x.DynamicAttId == LibraryDynamicAtt.Id &&
                                x.InventoryId == MW_OtherLibraryViewModel.Id && !x.disable &&
                                x.DynamicAtt.LibraryAtt &&
                                x.DynamicAtt.Key == LibraryDynamicAtt.Key,
                                    x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType);

                            if (DynamicAttLibValue != null)
                            {
                                dynamic DynamicAttValue = new ExpandoObject();
                                if (DynamicAttLibValue.ValueDateTime != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDateTime;

                                ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, DynamicAttValue));
                            }
                            else
                            {
                                ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, null));
                            }
                        }

                        ((IDictionary<String, Object>)DynamicMW_OtherLibrary).Add(new KeyValuePair<string, object>("DateTimeAttributes", DateTimeAttributes));

                        OutPutList.Add(DynamicMW_OtherLibrary);
                    }

                    MW_OtherTableDisplay.Model = OutPutList;

                    MW_OtherTableDisplay.filters = _unitOfWork.MW_OtherLibraryRepository.GetRelatedTables();

                    return new Response<ReturnWithFilters<object>>(true, MW_OtherTableDisplay, null, null, (int)Helpers.Constants.ApiReturnCode.success, Count);
                }
                catch (Exception err)
                {
                    return new Response<ReturnWithFilters<object>>(false, null, null, err.Message, (int)Helpers.Constants.ApiReturnCode.fail);
                }
            }
            else if (Helpers.Constants.OtherInventoryType.TLIcabinetPowerLibrary.ToString() == TableNameLibrary)
            {
                try
                {
                    List<FilterObjectList> ObjectAttributeFilters = CombineFilters.filters;
                    List<DateFilterViewModel> DateFilter = CombineFilters.DateFilter;
                    int Count = 0;
                    List<object> OutPutList = new List<object>();
                    ReturnWithFilters<object> CabinetPowerTableDisplay = new ReturnWithFilters<object>();

                    List<StringFilterObjectList> AttributeFilters = new List<StringFilterObjectList>();

                    List<CabinetPowerLibraryViewModel> CabinetPowerLibraries = new List<CabinetPowerLibraryViewModel>();
                    List<CabinetPowerLibraryViewModel> WithoutDateFilterCabinetPowerLibraries = new List<CabinetPowerLibraryViewModel>();
                    List<CabinetPowerLibraryViewModel> WithDateFilterCabinetPowerLibraries = new List<CabinetPowerLibraryViewModel>();

                    List<TLIattributeActivated> CabinetPowerLibraryAttribute = new List<TLIattributeActivated>();
                    if ((DateFilter != null ? DateFilter.Count() > 0 : false) ||
                        (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0))
                    {
                        CabinetPowerLibraryAttribute = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                            x.Enable && x.AttributeActivatedId != null &&
                            x.AttributeActivated.DataType.ToLower() != "datetime" &&
                            x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.CabinetPowerLibrary.ToString() &&
                            x.EditableManagmentView.TLItablesNames1.TableName == Helpers.Constants.TablesNames.TLIcabinetPowerLibrary.ToString(),
                                x => x.AttributeActivated, x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1)
                        .Select(x => x.AttributeActivated).ToList();
                    }

                    if (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0)
                    {
                        List<TLIattributeActivated> NotDateDateCabinetPowerLibraryAttribute = CabinetPowerLibraryAttribute.Where(x =>
                            x.DataType.ToLower() != "datetime").ToList();

                        foreach (FilterObjectList item in ObjectAttributeFilters)
                        {
                            List<string> value = item.value.Select(x => x.ToString().ToLower()).ToList();

                            TLIattributeActivated AttributeKey = NotDateDateCabinetPowerLibraryAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());

                            string Key = "";

                            if (AttributeKey != null)
                                Key = AttributeKey.Key;

                            else
                                Key = item.key;

                            AttributeFilters.Add(new StringFilterObjectList
                            {
                                key = Key,
                                value = value
                            });
                        }
                    }
                    if (AttributeFilters != null && AttributeFilters.Count > 0)
                    {
                        //
                        // Library Dynamic Attributes...
                        //
                        List<TLIdynamicAtt> LibDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AttributeFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcabinetPowerLibrary.ToString(), x => x.tablesNames, x => x.DataType).ToList();

                        List<int> DynamicLibValueListIds = new List<int>();
                        bool DynamicLibExist = false;

                        if (LibDynamicAttListIds.Count > 0)
                        {
                            DynamicLibExist = true;
                            GetInventoriesIdsFromDynamicAttributes(out DynamicLibValueListIds, LibDynamicAttListIds, AttributeFilters);
                        }

                        //
                        // Library Attribute Activated...
                        //
                        bool AttrLibExist = typeof(CabinetPowerLibraryViewModel).GetProperties().ToList().Exists(x =>
                            AttributeFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower() && y.key.ToLower() != "id"));

                        List<int> LibraryAttributeActivatedIds = new List<int>();

                        if (AttrLibExist)
                        {
                            List<PropertyInfo> NonStringLibraryProps = typeof(CabinetPowerLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() != "string" &&
                                AttributeFilters.Exists(y =>
                                    y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<PropertyInfo> StringLibraryProps = typeof(CabinetPowerLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() == "string" &&
                                AttributeFilters.Exists(y =>
                                    y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<StringFilterObjectList> LibraryPropsAttributeFilters = AttributeFilters.Where(x =>
                                NonStringLibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower()) ||
                                StringLibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            LibraryAttributeActivatedIds = _unitOfWork.CabinetPowerLibraryRepository.GetWhere(x =>
                                 LibraryPropsAttributeFilters.All(z =>
                                    NonStringLibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (y.GetValue(_mapper.Map<CabinetPowerLibraryViewModel>(x), null) != null ? z.value.Contains(y.GetValue(_mapper.Map<CabinetPowerLibraryViewModel>(x), null).ToString().ToLower()) : false)) ||
                                    StringLibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (z.value.Any(w =>
                                         y.GetValue(_mapper.Map<CabinetPowerLibraryViewModel>(x), null) != null ? y.GetValue(_mapper.Map<CabinetPowerLibraryViewModel>(x), null).ToString().ToLower().StartsWith(w.ToLower()) : false))))
                             ).Select(i => i.Id).ToList();
                        }

                        //
                        // Library (Attribute Activated + Dynamic) Attributes...
                        //
                        List<int> IntersectLibraryIds = new List<int>();
                        if (AttrLibExist && DynamicLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds.Intersect(DynamicLibValueListIds).ToList();
                        }
                        else if (AttrLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds;
                        }
                        else if (DynamicLibExist)
                        {
                            IntersectLibraryIds = DynamicLibValueListIds;
                        }

                        WithoutDateFilterCabinetPowerLibraries = _mapper.Map<List<CabinetPowerLibraryViewModel>>(_unitOfWork.CabinetPowerLibraryRepository.GetIncludeWhere(x =>
                            x.Id > 0 && IntersectLibraryIds.Contains(x.Id) && !x.Deleted, x => x.CabinetPowerType).ToList());
                    }

                    //
                    // DateTime Objects Filters..
                    //
                    List<DateFilterViewModel> AfterConvertDateFilters = new List<DateFilterViewModel>();
                    if (DateFilter != null ? DateFilter.Count() > 0 : false)
                    {
                        List<TLIattributeActivated> DateCabinetPowerLibraryAttribute = CabinetPowerLibraryAttribute.Where(x =>
                            x.DataType.ToLower() == "datetime").ToList();

                        foreach (DateFilterViewModel item in DateFilter)
                        {
                            DateTime DateFrom = Convert.ToDateTime(item.DateFrom);
                            DateTime DateTo = Convert.ToDateTime(item.DateTo);

                            if (DateFrom > DateTo)
                            {
                                DateTime Replacer = DateFrom;
                                DateFrom = DateTo;
                                DateTo = Replacer;
                            }

                            TLIattributeActivated AttributeKey = DateCabinetPowerLibraryAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());
                            string Key = "";

                            if (AttributeKey != null)
                                Key = AttributeKey.Key;
                            else
                                Key = item.key;

                            AfterConvertDateFilters.Add(new DateFilterViewModel
                            {
                                key = Key,
                                DateFrom = DateFrom,
                                DateTo = DateTo
                            });
                        }
                    }
                    if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                    {
                        //
                        // Library Dynamic Attributes...
                        //
                        List<TLIdynamicAtt> DateTimeLibDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AfterConvertDateFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcabinetPowerLibrary.ToString(), x => x.tablesNames).ToList();

                        List<int> DynamicLibValueListIds = new List<int>();
                        bool DynamicLibExist = false;

                        if (DateTimeLibDynamicAttListIds.Count > 0)
                        {
                            DynamicLibExist = true;
                            List<DateFilterViewModel> DynamicLibAttributeFilters = AfterConvertDateFilters.Where(x =>
                                DateTimeLibDynamicAttListIds.Exists(y => y.Key.ToLower() == x.key.ToLower())).ToList();

                            DynamicLibValueListIds = new List<int>();

                            List<TLIdynamicAttLibValue> DynamicLibValueListObjects = _unitOfWork.DynamicAttLibRepository.GetIncludeWhere(x =>
                                DateTimeLibDynamicAttListIds.Exists(y => y.Id == x.DynamicAttId) && !x.disable).ToList();

                            List<int> InventoriesIds = DynamicLibValueListObjects.Select(x => x.InventoryId).Distinct().ToList();

                            foreach (int InventoryId in InventoriesIds)
                            {
                                List<TLIdynamicAttLibValue> DynamicLibValueListInventories = DynamicLibValueListObjects.Where(x =>
                                    x.InventoryId == InventoryId).ToList();

                                if (DynamicLibAttributeFilters.All(y => DynamicLibValueListInventories.Exists(x =>
                                     (x.ValueDateTime != null ?
                                        (x.ValueDateTime >= y.DateFrom && x.ValueDateTime <= y.DateTo) : (false)))))
                                {
                                    DynamicLibValueListIds.Add(InventoryId);
                                }
                            }
                        }

                        //
                        // Library Attribute Activated...
                        //
                        List<PropertyInfo> LibraryProps = typeof(CabinetPowerLibraryViewModel).GetProperties().Where(x =>
                            AfterConvertDateFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower())).ToList();

                        List<int> LibraryAttributeActivatedIds = new List<int>();
                        bool AttrLibExist = false;

                        if (LibraryProps != null)
                        {
                            AttrLibExist = true;

                            List<DateFilterViewModel> LibraryPropsAttributeFilters = AfterConvertDateFilters.Where(x =>
                                LibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            LibraryAttributeActivatedIds = _unitOfWork.CabinetPowerLibraryRepository.GetIncludeWhere(x =>
                                LibraryPropsAttributeFilters.All(z =>
                                    (LibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && ((y.GetValue(_mapper.Map<CabinetPowerLibraryViewModel>(x), null) != null) ?
                                        ((z.DateFrom >= Convert.ToDateTime(y.GetValue(_mapper.Map<CabinetPowerLibraryViewModel>(x), null))) &&
                                         (z.DateTo <= Convert.ToDateTime(y.GetValue(_mapper.Map<CabinetPowerLibraryViewModel>(x), null)))) : (false)))))
                            ).Select(i => i.Id).ToList();
                        }

                        //
                        // Library (Attribute Activated + Dynamic) Attributes...
                        //
                        List<int> IntersectLibraryIds = new List<int>();
                        if (AttrLibExist && DynamicLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds.Intersect(DynamicLibValueListIds).ToList();
                        }
                        else if (AttrLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds;
                        }
                        else if (DynamicLibExist)
                        {
                            IntersectLibraryIds = DynamicLibValueListIds;
                        }

                        WithDateFilterCabinetPowerLibraries = _mapper.Map<List<CabinetPowerLibraryViewModel>>(_unitOfWork.CabinetPowerLibraryRepository.GetIncludeWhere(x =>
                            x.Id > 0 && IntersectLibraryIds.Contains(x.Id) && !x.Deleted, x => x.CabinetPowerType).ToList());
                    }

                    //
                    // Intersect Between WithoutDateFilterCabinetPowerLibraries + WithDateFilterCabinetPowerLibraries To Get The Records That Meet The Filters (DateFilters + AttributeFilters)
                    //
                    if ((AttributeFilters != null ? AttributeFilters.Count() == 0 : true) &&
                        (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() == 0 : true))
                    {
                        CabinetPowerLibraries = _mapper.Map<List<CabinetPowerLibraryViewModel>>(_unitOfWork.CabinetPowerLibraryRepository.GetIncludeWhere(x =>
                            x.Id > 0 && !x.Deleted, x => x.CabinetPowerType).ToList());
                    }
                    else if ((AttributeFilters != null ? AttributeFilters.Count > 0 : false) &&
                            (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false))
                    {
                        List<int> CabinetPowerIds = WithoutDateFilterCabinetPowerLibraries.Select(x => x.Id).Intersect(WithDateFilterCabinetPowerLibraries.Select(x => x.Id)).ToList();
                        CabinetPowerLibraries = _mapper.Map<List<CabinetPowerLibraryViewModel>>(_unitOfWork.CabinetPowerLibraryRepository.GetWhere(x =>
                            CabinetPowerIds.Contains(x.Id)).ToList());
                    }
                    else if (AttributeFilters != null ? AttributeFilters.Count > 0 : false)
                    {
                        CabinetPowerLibraries = WithoutDateFilterCabinetPowerLibraries;
                    }
                    else if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                    {
                        CabinetPowerLibraries = WithDateFilterCabinetPowerLibraries;
                    }

                    Count = CabinetPowerLibraries.Count();

                    CabinetPowerLibraries = CabinetPowerLibraries.Skip((parameterPagination.PageNumber - 1) * parameterPagination.PageSize).
                        Take(parameterPagination.PageSize).ToList();

                    List<TLIattributeViewManagment> AllAttributes = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                       (x.Enable && x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.CabinetPowerLibrary.ToString() &&
                       (x.AttributeActivatedId != null ?
                            (x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIcabinetPowerLibrary.ToString() && x.AttributeActivated.enable) :
                            (x.DynamicAtt.LibraryAtt && !x.DynamicAtt.disable && x.DynamicAtt.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcabinetPowerLibrary.ToString()))) ||
                        (x.AttributeActivated != null ?
                            ((x.AttributeActivated.Key.ToLower() == "id" || x.AttributeActivated.Key.ToLower() == "active") && x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIcabinetPowerLibrary.ToString()) : false),
                           x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1, x => x.EditableManagmentView.TLItablesNames2,
                           x => x.AttributeActivated, x => x.DynamicAtt, x => x.DynamicAtt.tablesNames, x => x.DynamicAtt.DataType).ToList();

                    List<TLIattributeViewManagment> NotDateTimeLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() != "datetime") : false).ToList();

                    List<TLIattributeViewManagment> NotDateTimeDynamicLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() != "datetime" : false).ToList();

                    List<TLIattributeViewManagment> DateTimeLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() == "datetime") : false).ToList();

                    List<TLIattributeViewManagment> DateTimeDynamicLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() == "datetime" : false).ToList();

                    foreach (CabinetPowerLibraryViewModel CabinetPowerLibraryViewModel in CabinetPowerLibraries)
                    {
                        dynamic DynamicCabinetPowerLibrary = new ExpandoObject();

                        //
                        // Library Object ViewModel... (Not DateTime DataType Attribute)
                        //
                        if (NotDateTimeLibraryAttributesViewModel != null ? NotDateTimeLibraryAttributesViewModel.Count > 0 : false)
                        {
                            List<PropertyInfo> LibraryProps = typeof(CabinetPowerLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() != "datetime" :
                                    (x.PropertyType.Name.ToLower() != "datetime")) :
                                (x.PropertyType.Name.ToLower() != "datetime")).ToList();

                            foreach (PropertyInfo prop in LibraryProps)
                            {
                                if (prop.Name.ToLower().Contains("_name") &&
                                    NotDateTimeLibraryAttributesViewModel.Exists(x =>
                                        x.AttributeActivated.Label.ToLower() == prop.Name.ToLower()))
                                {
                                    object ForeignKeyNamePropObject = prop.GetValue(CabinetPowerLibraryViewModel, null);
                                    ((IDictionary<String, Object>)DynamicCabinetPowerLibrary).Add(new KeyValuePair<string, object>(prop.Name, ForeignKeyNamePropObject));
                                }
                                else if (NotDateTimeLibraryAttributesViewModel.Exists(x =>
                                     x.AttributeActivated.Key.ToLower() == prop.Name.ToLower()) &&
                                    !prop.Name.ToLower().Contains("_name") &&
                                    (prop.Name.ToLower().Substring(Math.Max(0, prop.Name.Length - 2)) != "id" || prop.Name.ToLower() == "id"))
                                {
                                    if (prop.Name.ToLower() != "id" && prop.Name.ToLower() != "active")
                                    {
                                        TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                            x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIcabinetPowerLibrary.ToString() &&
                                            x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                        if (LabelName != null)
                                        {
                                            object PropObject = prop.GetValue(CabinetPowerLibraryViewModel, null);
                                            ((IDictionary<String, Object>)DynamicCabinetPowerLibrary).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                        }
                                    }
                                    else
                                    {
                                        object PropObject = prop.GetValue(CabinetPowerLibraryViewModel, null);
                                        ((IDictionary<String, Object>)DynamicCabinetPowerLibrary).Add(new KeyValuePair<string, object>(prop.Name, PropObject));
                                    }
                                }
                            }
                        }

                        //
                        // Library Dynamic Attributes... (Not DateTime DataType Attribute)
                        // 
                        List<TLIdynamicAtt> NotDateTimeLibraryDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                           !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcabinetPowerLibrary.ToString() &&
                            x.LibraryAtt && x.DataType.Name.ToLower() != "datetime" &&
                            NotDateTimeDynamicLibraryAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames, x => x.DataType).ToList();

                        foreach (var LibraryDynamicAtt in NotDateTimeLibraryDynamicAttributes)
                        {
                            TLIdynamicAttLibValue DynamicAttLibValue = _unitOfWork.DynamicAttLibRepository.GetIncludeWhereFirst(x =>
                                x.DynamicAttId == LibraryDynamicAtt.Id &&
                                x.InventoryId == CabinetPowerLibraryViewModel.Id && !x.disable &&
                                x.DynamicAtt.LibraryAtt &&
                                x.DynamicAtt.Key == LibraryDynamicAtt.Key,
                                    x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType);

                            if (DynamicAttLibValue != null)
                            {
                                dynamic DynamicAttValue = new ExpandoObject();

                                if (DynamicAttLibValue.ValueString != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueString;

                                else if (DynamicAttLibValue.ValueDouble != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDouble;

                                else if (DynamicAttLibValue.ValueDateTime != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDateTime;

                                else if (DynamicAttLibValue.ValueBoolean != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueBoolean;

                                ((IDictionary<String, Object>)DynamicCabinetPowerLibrary).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, DynamicAttValue));
                            }
                            else
                            {
                                ((IDictionary<String, Object>)DynamicCabinetPowerLibrary).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, null));
                            }
                        }

                        //
                        // Library Object ViewModel... (DateTime DataType Attribute)
                        //
                        dynamic DateTimeAttributes = new ExpandoObject();
                        if (DateTimeLibraryAttributesViewModel != null ? DateTimeLibraryAttributesViewModel.Count() > 0 : false)
                        {
                            List<PropertyInfo> DateTimeLibraryProps = typeof(CabinetPowerLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name == "datetime" :
                                    (x.PropertyType.Name.ToLower() == "datetime")) :
                                (x.PropertyType.Name.ToLower() == "datetime")).ToList();

                            foreach (PropertyInfo prop in DateTimeLibraryProps)
                            {
                                TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                    x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIcabinetPowerLibrary.ToString() &&
                                    x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                if (LabelName != null)
                                {
                                    object PropObject = prop.GetValue(CabinetPowerLibraryViewModel, null);
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                }
                            }
                        }

                        //
                        // Library Dynamic Attributes... (DateTime DataType Attribute)
                        // 
                        List<TLIdynamicAtt> LibraryDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                           !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcabinetPowerLibrary.ToString() &&
                            x.LibraryAtt && x.DataType.Name.ToLower() == "datetime" &&
                            DateTimeDynamicLibraryAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames).ToList();

                        foreach (TLIdynamicAtt LibraryDynamicAtt in LibraryDynamicAttributes)
                        {
                            TLIdynamicAttLibValue DynamicAttLibValue = _unitOfWork.DynamicAttLibRepository.GetIncludeWhereFirst(x =>
                                x.DynamicAttId == LibraryDynamicAtt.Id &&
                                x.InventoryId == CabinetPowerLibraryViewModel.Id && !x.disable &&
                                x.DynamicAtt.LibraryAtt &&
                                x.DynamicAtt.Key == LibraryDynamicAtt.Key,
                                    x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType);

                            if (DynamicAttLibValue != null)
                            {
                                dynamic DynamicAttValue = new ExpandoObject();
                                if (DynamicAttLibValue.ValueDateTime != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDateTime;

                                ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, DynamicAttValue));
                            }
                            else
                            {
                                ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, null));
                            }
                        }

                        ((IDictionary<String, Object>)DynamicCabinetPowerLibrary).Add(new KeyValuePair<string, object>("DateTimeAttributes", DateTimeAttributes));

                        OutPutList.Add(DynamicCabinetPowerLibrary);
                    }

                    CabinetPowerTableDisplay.Model = OutPutList;

                    if (WithFilterData)
                        CabinetPowerTableDisplay.filters = _unitOfWork.CabinetPowerLibraryRepository.GetRelatedTables();
                    else
                        CabinetPowerTableDisplay.filters = null;

                    return new Response<ReturnWithFilters<object>>(true, CabinetPowerTableDisplay, null, null, (int)ApiReturnCode.success, Count);
                }
                catch (Exception err)
                {
                    return new Response<ReturnWithFilters<object>>(false, null, null, err.Message, (int)ApiReturnCode.fail);
                }
            }
            else if (Helpers.Constants.OtherInventoryType.TLIcabinetTelecomLibrary.ToString() == TableNameLibrary)
            {
                try
                {
                    List<FilterObjectList> ObjectAttributeFilters = CombineFilters.filters;
                    List<DateFilterViewModel> DateFilter = CombineFilters.DateFilter;
                    int Count = 0;
                    List<object> OutPutList = new List<object>();
                    ReturnWithFilters<object> CabinetTelecomTableDisplay = new ReturnWithFilters<object>();

                    List<StringFilterObjectList> AttributeFilters = new List<StringFilterObjectList>();

                    List<CabinetTelecomLibraryViewModel> CabinetTelecomLibraries = new List<CabinetTelecomLibraryViewModel>();
                    List<CabinetTelecomLibraryViewModel> WithoutDateFilterCabinetTelecomLibraries = new List<CabinetTelecomLibraryViewModel>();
                    List<CabinetTelecomLibraryViewModel> WithDateFilterCabinetTelecomLibraries = new List<CabinetTelecomLibraryViewModel>();

                    List<TLIattributeActivated> CabinetTelecomLibraryAttribute = new List<TLIattributeActivated>();
                    if ((DateFilter != null ? DateFilter.Count() > 0 : false) ||
                        (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0))
                    {
                        CabinetTelecomLibraryAttribute = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                            x.Enable && x.AttributeActivatedId != null &&
                            x.AttributeActivated.DataType.ToLower() != "datetime" &&
                            x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.CabinetTelecomLibrary.ToString() &&
                            x.EditableManagmentView.TLItablesNames1.TableName == Helpers.Constants.TablesNames.TLIcabinetTelecomLibrary.ToString(),
                                x => x.AttributeActivated, x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1)
                        .Select(x => x.AttributeActivated).ToList();
                    }

                    if (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0)
                    {
                        List<TLIattributeActivated> NotDateDateCabinetTelecomLibraryAttribute = CabinetTelecomLibraryAttribute.Where(x =>
                            x.DataType.ToLower() != "datetime").ToList();

                        foreach (FilterObjectList item in ObjectAttributeFilters)
                        {
                            List<string> value = item.value.Select(x => x.ToString().ToLower()).ToList();

                            TLIattributeActivated AttributeKey = NotDateDateCabinetTelecomLibraryAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());

                            string Key = "";

                            if (AttributeKey != null)
                                Key = AttributeKey.Key;

                            else
                                Key = item.key;

                            AttributeFilters.Add(new StringFilterObjectList
                            {
                                key = Key,
                                value = value
                            });
                        }
                    }
                    if (AttributeFilters != null && AttributeFilters.Count > 0)
                    {
                        //
                        // Library Dynamic Attributes...
                        //
                        List<TLIdynamicAtt> LibDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AttributeFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcabinetTelecomLibrary.ToString(), x => x.tablesNames, x => x.DataType).ToList();

                        List<int> DynamicLibValueListIds = new List<int>();
                        bool DynamicLibExist = false;

                        if (LibDynamicAttListIds.Count > 0)
                        {
                            DynamicLibExist = true;
                            GetInventoriesIdsFromDynamicAttributes(out DynamicLibValueListIds, LibDynamicAttListIds, AttributeFilters);
                        }

                        //
                        // Library Attribute Activated...
                        //
                        bool AttrLibExist = typeof(CabinetTelecomLibraryViewModel).GetProperties().ToList().Exists(x =>
                            AttributeFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower() && y.key.ToLower() != "id"));

                        List<int> LibraryAttributeActivatedIds = new List<int>();

                        if (AttrLibExist)
                        {
                            List<PropertyInfo> NonStringLibraryProps = typeof(CabinetTelecomLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() != "string" &&
                                AttributeFilters.Exists(y =>
                                    y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<PropertyInfo> StringLibraryProps = typeof(CabinetTelecomLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() == "string" &&
                                AttributeFilters.Exists(y =>
                                    y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<StringFilterObjectList> LibraryPropsAttributeFilters = AttributeFilters.Where(x =>
                                NonStringLibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower()) ||
                                StringLibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            LibraryAttributeActivatedIds = _unitOfWork.CabinetTelecomLibraryRepository.GetWhere(x =>
                                 LibraryPropsAttributeFilters.All(z =>
                                    NonStringLibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (y.GetValue(_mapper.Map<CabinetTelecomLibraryViewModel>(x), null) != null ? z.value.Contains(y.GetValue(_mapper.Map<CabinetTelecomLibraryViewModel>(x), null).ToString().ToLower()) : false)) ||
                                    StringLibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (z.value.Any(w =>
                                         y.GetValue(_mapper.Map<CabinetTelecomLibraryViewModel>(x), null) != null ? y.GetValue(_mapper.Map<CabinetTelecomLibraryViewModel>(x), null).ToString().ToLower().StartsWith(w.ToLower()) : false))))
                             ).Select(i => i.Id).ToList();
                        }

                        //
                        // Library (Attribute Activated + Dynamic) Attributes...
                        //
                        List<int> IntersectLibraryIds = new List<int>();
                        if (AttrLibExist && DynamicLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds.Intersect(DynamicLibValueListIds).ToList();
                        }
                        else if (AttrLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds;
                        }
                        else if (DynamicLibExist)
                        {
                            IntersectLibraryIds = DynamicLibValueListIds;
                        }

                        WithoutDateFilterCabinetTelecomLibraries = _mapper.Map<List<CabinetTelecomLibraryViewModel>>(_unitOfWork.CabinetTelecomLibraryRepository.GetIncludeWhere(x =>
                            x.Id > 0 && IntersectLibraryIds.Contains(x.Id) && !x.Deleted, x => x.TelecomType).ToList());
                    }

                    //
                    // DateTime Objects Filters..
                    //
                    List<DateFilterViewModel> AfterConvertDateFilters = new List<DateFilterViewModel>();
                    if (DateFilter != null ? DateFilter.Count() > 0 : false)
                    {
                        List<TLIattributeActivated> DateCabinetTelecomLibraryAttribute = CabinetTelecomLibraryAttribute.Where(x =>
                            x.DataType.ToLower() == "datetime").ToList();

                        foreach (DateFilterViewModel item in DateFilter)
                        {
                            DateTime DateFrom = Convert.ToDateTime(item.DateFrom);
                            DateTime DateTo = Convert.ToDateTime(item.DateTo);

                            if (DateFrom > DateTo)
                            {
                                DateTime Replacer = DateFrom;
                                DateFrom = DateTo;
                                DateTo = Replacer;
                            }

                            TLIattributeActivated AttributeKey = DateCabinetTelecomLibraryAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());
                            string Key = "";

                            if (AttributeKey != null)
                                Key = AttributeKey.Key;
                            else
                                Key = item.key;

                            AfterConvertDateFilters.Add(new DateFilterViewModel
                            {
                                key = Key,
                                DateFrom = DateFrom,
                                DateTo = DateTo
                            });
                        }
                    }
                    if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                    {
                        //
                        // Library Dynamic Attributes...
                        //
                        List<TLIdynamicAtt> DateTimeLibDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AfterConvertDateFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcabinetTelecomLibrary.ToString(), x => x.tablesNames).ToList();

                        List<int> DynamicLibValueListIds = new List<int>();
                        bool DynamicLibExist = false;

                        if (DateTimeLibDynamicAttListIds.Count > 0)
                        {
                            DynamicLibExist = true;
                            List<DateFilterViewModel> DynamicLibAttributeFilters = AfterConvertDateFilters.Where(x =>
                                DateTimeLibDynamicAttListIds.Exists(y => y.Key.ToLower() == x.key.ToLower())).ToList();

                            DynamicLibValueListIds = new List<int>();

                            List<TLIdynamicAttLibValue> DynamicLibValueListObjects = _unitOfWork.DynamicAttLibRepository.GetIncludeWhere(x =>
                                DateTimeLibDynamicAttListIds.Exists(y => y.Id == x.DynamicAttId) && !x.disable).ToList();

                            List<int> InventoriesIds = DynamicLibValueListObjects.Select(x => x.InventoryId).Distinct().ToList();

                            foreach (int InventoryId in InventoriesIds)
                            {
                                List<TLIdynamicAttLibValue> DynamicLibValueListInventories = DynamicLibValueListObjects.Where(x =>
                                    x.InventoryId == InventoryId).ToList();

                                if (DynamicLibAttributeFilters.All(y => DynamicLibValueListInventories.Exists(x =>
                                     (x.ValueDateTime != null ?
                                        (x.ValueDateTime >= y.DateFrom && x.ValueDateTime <= y.DateTo) : (false)))))
                                {
                                    DynamicLibValueListIds.Add(InventoryId);
                                }
                            }
                        }

                        //
                        // Library Attribute Activated...
                        //
                        List<PropertyInfo> LibraryProps = typeof(CabinetTelecomLibraryViewModel).GetProperties().Where(x =>
                            AfterConvertDateFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower())).ToList();

                        List<int> LibraryAttributeActivatedIds = new List<int>();
                        bool AttrLibExist = false;

                        if (LibraryProps != null)
                        {
                            AttrLibExist = true;

                            List<DateFilterViewModel> LibraryPropsAttributeFilters = AfterConvertDateFilters.Where(x =>
                                LibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            LibraryAttributeActivatedIds = _unitOfWork.CabinetTelecomLibraryRepository.GetIncludeWhere(x =>
                                LibraryPropsAttributeFilters.All(z =>
                                    (LibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && ((y.GetValue(_mapper.Map<CabinetTelecomLibraryViewModel>(x), null) != null) ?
                                        ((z.DateFrom >= Convert.ToDateTime(y.GetValue(_mapper.Map<CabinetTelecomLibraryViewModel>(x), null))) &&
                                         (z.DateTo <= Convert.ToDateTime(y.GetValue(_mapper.Map<CabinetTelecomLibraryViewModel>(x), null)))) : (false)))))
                            ).Select(i => i.Id).ToList();
                        }

                        //
                        // Library (Attribute Activated + Dynamic) Attributes...
                        //
                        List<int> IntersectLibraryIds = new List<int>();
                        if (AttrLibExist && DynamicLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds.Intersect(DynamicLibValueListIds).ToList();
                        }
                        else if (AttrLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds;
                        }
                        else if (DynamicLibExist)
                        {
                            IntersectLibraryIds = DynamicLibValueListIds;
                        }

                        WithDateFilterCabinetTelecomLibraries = _mapper.Map<List<CabinetTelecomLibraryViewModel>>(_unitOfWork.CabinetTelecomLibraryRepository.GetIncludeWhere(x =>
                            x.Id > 0 && IntersectLibraryIds.Contains(x.Id) && !x.Deleted, x => x.TelecomType).ToList());
                    }

                    //
                    // Intersect Between WithoutDateFilterCabinetTelecomLibraries + WithDateFilterCabinetTelecomLibraries To Get The Records That Meet The Filters (DateFilters + AttributeFilters)
                    //
                    if ((AttributeFilters != null ? AttributeFilters.Count() == 0 : true) &&
                        (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() == 0 : true))
                    {
                        CabinetTelecomLibraries = _mapper.Map<List<CabinetTelecomLibraryViewModel>>(_unitOfWork.CabinetTelecomLibraryRepository.GetIncludeWhere(x =>
                            x.Id > 0 && !x.Deleted, x => x.TelecomType).ToList());
                    }
                    else if ((AttributeFilters != null ? AttributeFilters.Count > 0 : false) &&
                            (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false))
                    {
                        List<int> CabinetTelecomIds = WithoutDateFilterCabinetTelecomLibraries.Select(x => x.Id).Intersect(WithDateFilterCabinetTelecomLibraries.Select(x => x.Id)).ToList();
                        CabinetTelecomLibraries = _mapper.Map<List<CabinetTelecomLibraryViewModel>>(_unitOfWork.CabinetTelecomLibraryRepository.GetWhere(x =>
                            CabinetTelecomIds.Contains(x.Id)).ToList());
                    }
                    else if (AttributeFilters != null ? AttributeFilters.Count > 0 : false)
                    {
                        CabinetTelecomLibraries = WithoutDateFilterCabinetTelecomLibraries;
                    }
                    else if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                    {
                        CabinetTelecomLibraries = WithDateFilterCabinetTelecomLibraries;
                    }

                    Count = CabinetTelecomLibraries.Count();

                    CabinetTelecomLibraries = CabinetTelecomLibraries.Skip((parameterPagination.PageNumber - 1) * parameterPagination.PageSize).
                        Take(parameterPagination.PageSize).ToList();

                    List<TLIattributeViewManagment> AllAttributes = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                       (x.Enable && x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.CabinetTelecomLibrary.ToString() &&
                       (x.AttributeActivatedId != null ?
                            (x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIcabinetTelecomLibrary.ToString() && x.AttributeActivated.enable) :
                            (x.DynamicAtt.LibraryAtt && !x.DynamicAtt.disable && x.DynamicAtt.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcabinetTelecomLibrary.ToString()))) ||
                        (x.AttributeActivated != null ?
                            ((x.AttributeActivated.Key.ToLower() == "id" || x.AttributeActivated.Key.ToLower() == "active") && x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIcabinetTelecomLibrary.ToString()) : false),
                           x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1, x => x.EditableManagmentView.TLItablesNames2,
                           x => x.AttributeActivated, x => x.DynamicAtt, x => x.DynamicAtt.tablesNames, x => x.DynamicAtt.DataType).ToList();

                    List<TLIattributeViewManagment> NotDateTimeLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() != "datetime") : false).ToList();

                    List<TLIattributeViewManagment> NotDateTimeDynamicLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() != "datetime" : false).ToList();

                    List<TLIattributeViewManagment> DateTimeLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() == "datetime") : false).ToList();

                    List<TLIattributeViewManagment> DateTimeDynamicLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() == "datetime" : false).ToList();

                    foreach (CabinetTelecomLibraryViewModel CabinetTelecomLibraryViewModel in CabinetTelecomLibraries)
                    {
                        dynamic DynamicCabinetTelecomLibrary = new ExpandoObject();

                        //
                        // Library Object ViewModel... (Not DateTime DataType Attribute)
                        //
                        if (NotDateTimeLibraryAttributesViewModel != null ? NotDateTimeLibraryAttributesViewModel.Count > 0 : false)
                        {
                            List<PropertyInfo> LibraryProps = typeof(CabinetTelecomLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() != "datetime" :
                                    (x.PropertyType.Name.ToLower() != "datetime")) :
                                (x.PropertyType.Name.ToLower() != "datetime")).ToList();

                            foreach (PropertyInfo prop in LibraryProps)
                            {
                                if (prop.Name.ToLower().Contains("_name") &&
                                    NotDateTimeLibraryAttributesViewModel.Exists(x =>
                                        x.AttributeActivated.Label.ToLower() == prop.Name.ToLower()))
                                {
                                    object ForeignKeyNamePropObject = prop.GetValue(CabinetTelecomLibraryViewModel, null);
                                    ((IDictionary<String, Object>)DynamicCabinetTelecomLibrary).Add(new KeyValuePair<string, object>(prop.Name, ForeignKeyNamePropObject));
                                }
                                else if (NotDateTimeLibraryAttributesViewModel.Exists(x =>
                                     x.AttributeActivated.Key.ToLower() == prop.Name.ToLower()) &&
                                    !prop.Name.ToLower().Contains("_name") &&
                                    (prop.Name.ToLower().Substring(Math.Max(0, prop.Name.Length - 2)) != "id" || prop.Name.ToLower() == "id"))
                                {
                                    if (prop.Name.ToLower() != "id" && prop.Name.ToLower() != "active")
                                    {
                                        TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                            x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIcabinetTelecomLibrary.ToString() &&
                                            x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                        if (LabelName != null)
                                        {
                                            object PropObject = prop.GetValue(CabinetTelecomLibraryViewModel, null);
                                            ((IDictionary<String, Object>)DynamicCabinetTelecomLibrary).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                        }
                                    }
                                    else
                                    {
                                        object PropObject = prop.GetValue(CabinetTelecomLibraryViewModel, null);
                                        ((IDictionary<String, Object>)DynamicCabinetTelecomLibrary).Add(new KeyValuePair<string, object>(prop.Name, PropObject));
                                    }
                                }
                            }
                        }

                        //
                        // Library Dynamic Attributes... (Not DateTime DataType Attribute)
                        // 
                        List<TLIdynamicAtt> NotDateTimeLibraryDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                           !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcabinetTelecomLibrary.ToString() &&
                            x.LibraryAtt && x.DataType.Name.ToLower() != "datetime" &&
                            NotDateTimeDynamicLibraryAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames, x => x.DataType).ToList();

                        foreach (var LibraryDynamicAtt in NotDateTimeLibraryDynamicAttributes)
                        {
                            TLIdynamicAttLibValue DynamicAttLibValue = _unitOfWork.DynamicAttLibRepository.GetIncludeWhereFirst(x =>
                                x.DynamicAttId == LibraryDynamicAtt.Id &&
                                x.InventoryId == CabinetTelecomLibraryViewModel.Id && !x.disable &&
                                x.DynamicAtt.LibraryAtt &&
                                x.DynamicAtt.Key == LibraryDynamicAtt.Key,
                                    x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType);

                            if (DynamicAttLibValue != null)
                            {
                                dynamic DynamicAttValue = new ExpandoObject();

                                if (DynamicAttLibValue.ValueString != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueString;

                                else if (DynamicAttLibValue.ValueDouble != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDouble;

                                else if (DynamicAttLibValue.ValueDateTime != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDateTime;

                                else if (DynamicAttLibValue.ValueBoolean != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueBoolean;

                                ((IDictionary<String, Object>)DynamicCabinetTelecomLibrary).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, DynamicAttValue));
                            }
                            else
                            {
                                ((IDictionary<String, Object>)DynamicCabinetTelecomLibrary).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, null));
                            }
                        }

                        //
                        // Library Object ViewModel... (DateTime DataType Attribute)
                        //
                        dynamic DateTimeAttributes = new ExpandoObject();
                        if (DateTimeLibraryAttributesViewModel != null ? DateTimeLibraryAttributesViewModel.Count() > 0 : false)
                        {
                            List<PropertyInfo> DateTimeLibraryProps = typeof(CabinetTelecomLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name == "datetime" :
                                    (x.PropertyType.Name.ToLower() == "datetime")) :
                                (x.PropertyType.Name.ToLower() == "datetime")).ToList();

                            foreach (PropertyInfo prop in DateTimeLibraryProps)
                            {
                                TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                    x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIcabinetTelecomLibrary.ToString() &&
                                    x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                if (LabelName != null)
                                {
                                    object PropObject = prop.GetValue(CabinetTelecomLibraryViewModel, null);
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                }
                            }
                        }

                        //
                        // Library Dynamic Attributes... (DateTime DataType Attribute)
                        // 
                        List<TLIdynamicAtt> LibraryDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                           !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcabinetTelecomLibrary.ToString() &&
                            x.LibraryAtt && x.DataType.Name.ToLower() == "datetime" &&
                            DateTimeDynamicLibraryAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames).ToList();

                        foreach (TLIdynamicAtt LibraryDynamicAtt in LibraryDynamicAttributes)
                        {
                            TLIdynamicAttLibValue DynamicAttLibValue = _unitOfWork.DynamicAttLibRepository.GetIncludeWhereFirst(x =>
                                x.DynamicAttId == LibraryDynamicAtt.Id &&
                                x.InventoryId == CabinetTelecomLibraryViewModel.Id && !x.disable &&
                                x.DynamicAtt.LibraryAtt &&
                                x.DynamicAtt.Key == LibraryDynamicAtt.Key,
                                    x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType);

                            if (DynamicAttLibValue != null)
                            {
                                dynamic DynamicAttValue = new ExpandoObject();
                                if (DynamicAttLibValue.ValueDateTime != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDateTime;

                                ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, DynamicAttValue));
                            }
                            else
                            {
                                ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, null));
                            }
                        }

                        ((IDictionary<String, Object>)DynamicCabinetTelecomLibrary).Add(new KeyValuePair<string, object>("DateTimeAttributes", DateTimeAttributes));

                        OutPutList.Add(DynamicCabinetTelecomLibrary);
                    }

                    CabinetTelecomTableDisplay.Model = OutPutList;

                    if (WithFilterData)
                        CabinetTelecomTableDisplay.filters = _unitOfWork.CabinetTelecomLibraryRepository.GetRelatedTables();
                    else
                        CabinetTelecomTableDisplay.filters = null;

                    return new Response<ReturnWithFilters<object>>(true, CabinetTelecomTableDisplay, null, null, (int)ApiReturnCode.success, Count);
                }
                catch (Exception err)
                {
                    return new Response<ReturnWithFilters<object>>(false, null, null, err.Message, (int)ApiReturnCode.fail);
                }
            }
            else if (Helpers.Constants.OtherInventoryType.TLIsolarLibrary.ToString() == TableNameLibrary)
            {
                try
                {
                    List<FilterObjectList> ObjectAttributeFilters = CombineFilters.filters;
                    List<DateFilterViewModel> DateFilter = CombineFilters.DateFilter;
                    int Count = 0;
                    List<object> OutPutList = new List<object>();
                    ReturnWithFilters<object> SolarTableDisplay = new ReturnWithFilters<object>();

                    List<StringFilterObjectList> AttributeFilters = new List<StringFilterObjectList>();

                    List<SolarLibraryViewModel> SolarLibraries = new List<SolarLibraryViewModel>();
                    List<SolarLibraryViewModel> WithoutDateFilterSolarLibraries = new List<SolarLibraryViewModel>();
                    List<SolarLibraryViewModel> WithDateFilterSolarLibraries = new List<SolarLibraryViewModel>();

                    List<TLIattributeActivated> SolarLibraryAttribute = new List<TLIattributeActivated>();
                    if ((DateFilter != null ? DateFilter.Count() > 0 : false) ||
                        (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0))
                    {
                        SolarLibraryAttribute = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                            x.Enable && x.AttributeActivatedId != null &&
                            x.AttributeActivated.DataType.ToLower() != "datetime" &&
                            x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.SolarLibrary.ToString() &&
                            x.EditableManagmentView.TLItablesNames1.TableName == Helpers.Constants.TablesNames.TLIsolarLibrary.ToString(),
                                x => x.AttributeActivated, x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1)
                        .Select(x => x.AttributeActivated).ToList();
                    }

                    if (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0)
                    {
                        List<TLIattributeActivated> NotDateDateSolarLibraryAttribute = SolarLibraryAttribute.Where(x =>
                            x.DataType.ToLower() != "datetime").ToList();

                        foreach (FilterObjectList item in ObjectAttributeFilters)
                        {
                            List<string> value = item.value.Select(x => x.ToString().ToLower()).ToList();

                            TLIattributeActivated AttributeKey = NotDateDateSolarLibraryAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());

                            string Key = "";

                            if (AttributeKey != null)
                                Key = AttributeKey.Key;

                            else
                                Key = item.key;

                            AttributeFilters.Add(new StringFilterObjectList
                            {
                                key = Key,
                                value = value
                            });
                        }
                    }
                    if (AttributeFilters != null && AttributeFilters.Count > 0)
                    {
                        //
                        // Library Dynamic Attributes...
                        //
                        List<TLIdynamicAtt> LibDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AttributeFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIsolarLibrary.ToString(), x => x.tablesNames, x => x.DataType).ToList();

                        List<int> DynamicLibValueListIds = new List<int>();
                        bool DynamicLibExist = false;

                        if (LibDynamicAttListIds.Count > 0)
                        {
                            DynamicLibExist = true;
                            GetInventoriesIdsFromDynamicAttributes(out DynamicLibValueListIds, LibDynamicAttListIds, AttributeFilters);
                        }

                        //
                        // Library Attribute Activated...
                        //
                        bool AttrLibExist = typeof(SolarLibraryViewModel).GetProperties().ToList().Exists(x =>
                            AttributeFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower() && y.key.ToLower() != "id"));

                        List<int> LibraryAttributeActivatedIds = new List<int>();

                        if (AttrLibExist)
                        {
                            List<PropertyInfo> NonStringLibraryProps = typeof(SolarLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() != "string" &&
                                AttributeFilters.Exists(y =>
                                    y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<PropertyInfo> StringLibraryProps = typeof(SolarLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() == "string" &&
                                AttributeFilters.Exists(y =>
                                    y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<StringFilterObjectList> LibraryPropsAttributeFilters = AttributeFilters.Where(x =>
                                NonStringLibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower()) ||
                                StringLibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            LibraryAttributeActivatedIds = _unitOfWork.SolarLibraryRepository.GetWhere(x =>
                                 LibraryPropsAttributeFilters.All(z =>
                                    NonStringLibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (y.GetValue(_mapper.Map<SolarLibraryViewModel>(x), null) != null ? z.value.Contains(y.GetValue(_mapper.Map<SolarLibraryViewModel>(x), null).ToString().ToLower()) : false)) ||
                                    StringLibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (z.value.Any(w =>
                                         y.GetValue(_mapper.Map<SolarLibraryViewModel>(x), null) != null ? y.GetValue(_mapper.Map<SolarLibraryViewModel>(x), null).ToString().ToLower().StartsWith(w.ToLower()) : false))))
                             ).Select(i => i.Id).ToList();
                        }

                        //
                        // Library (Attribute Activated + Dynamic) Attributes...
                        //
                        List<int> IntersectLibraryIds = new List<int>();
                        if (AttrLibExist && DynamicLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds.Intersect(DynamicLibValueListIds).ToList();
                        }
                        else if (AttrLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds;
                        }
                        else if (DynamicLibExist)
                        {
                            IntersectLibraryIds = DynamicLibValueListIds;
                        }

                        WithoutDateFilterSolarLibraries = _mapper.Map<List<SolarLibraryViewModel>>(_unitOfWork.SolarLibraryRepository.GetIncludeWhere(x =>
                            x.Id > 0 && IntersectLibraryIds.Contains(x.Id) && !x.Deleted, x => x.Capacity).ToList());
                    }

                    //
                    // DateTime Objects Filters..
                    //
                    List<DateFilterViewModel> AfterConvertDateFilters = new List<DateFilterViewModel>();
                    if (DateFilter != null ? DateFilter.Count() > 0 : false)
                    {
                        List<TLIattributeActivated> DateSolarLibraryAttribute = SolarLibraryAttribute.Where(x =>
                            x.DataType.ToLower() == "datetime").ToList();

                        foreach (DateFilterViewModel item in DateFilter)
                        {
                            DateTime DateFrom = Convert.ToDateTime(item.DateFrom);
                            DateTime DateTo = Convert.ToDateTime(item.DateTo);

                            if (DateFrom > DateTo)
                            {
                                DateTime Replacer = DateFrom;
                                DateFrom = DateTo;
                                DateTo = Replacer;
                            }

                            TLIattributeActivated AttributeKey = DateSolarLibraryAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());
                            string Key = "";

                            if (AttributeKey != null)
                                Key = AttributeKey.Key;
                            else
                                Key = item.key;

                            AfterConvertDateFilters.Add(new DateFilterViewModel
                            {
                                key = Key,
                                DateFrom = DateFrom,
                                DateTo = DateTo
                            });
                        }
                    }
                    if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                    {
                        //
                        // Library Dynamic Attributes...
                        //
                        List<TLIdynamicAtt> DateTimeLibDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AfterConvertDateFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIsolarLibrary.ToString(), x => x.tablesNames).ToList();

                        List<int> DynamicLibValueListIds = new List<int>();
                        bool DynamicLibExist = false;

                        if (DateTimeLibDynamicAttListIds.Count > 0)
                        {
                            DynamicLibExist = true;
                            List<DateFilterViewModel> DynamicLibAttributeFilters = AfterConvertDateFilters.Where(x =>
                                DateTimeLibDynamicAttListIds.Exists(y => y.Key.ToLower() == x.key.ToLower())).ToList();

                            DynamicLibValueListIds = new List<int>();

                            List<TLIdynamicAttLibValue> DynamicLibValueListObjects = _unitOfWork.DynamicAttLibRepository.GetIncludeWhere(x =>
                                DateTimeLibDynamicAttListIds.Exists(y => y.Id == x.DynamicAttId) && !x.disable).ToList();

                            List<int> InventoriesIds = DynamicLibValueListObjects.Select(x => x.InventoryId).Distinct().ToList();

                            foreach (int InventoryId in InventoriesIds)
                            {
                                List<TLIdynamicAttLibValue> DynamicLibValueListInventories = DynamicLibValueListObjects.Where(x =>
                                    x.InventoryId == InventoryId).ToList();

                                if (DynamicLibAttributeFilters.All(y => DynamicLibValueListInventories.Exists(x =>
                                     (x.ValueDateTime != null ?
                                        (x.ValueDateTime >= y.DateFrom && x.ValueDateTime <= y.DateTo) : (false)))))
                                {
                                    DynamicLibValueListIds.Add(InventoryId);
                                }
                            }
                        }

                        //
                        // Library Attribute Activated...
                        //
                        List<PropertyInfo> LibraryProps = typeof(SolarLibraryViewModel).GetProperties().Where(x =>
                            AfterConvertDateFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower())).ToList();

                        List<int> LibraryAttributeActivatedIds = new List<int>();
                        bool AttrLibExist = false;

                        if (LibraryProps != null)
                        {
                            AttrLibExist = true;

                            List<DateFilterViewModel> LibraryPropsAttributeFilters = AfterConvertDateFilters.Where(x =>
                                LibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            LibraryAttributeActivatedIds = _unitOfWork.SolarLibraryRepository.GetIncludeWhere(x =>
                                LibraryPropsAttributeFilters.All(z =>
                                    (LibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && ((y.GetValue(_mapper.Map<SolarLibraryViewModel>(x), null) != null) ?
                                        ((z.DateFrom >= Convert.ToDateTime(y.GetValue(_mapper.Map<SolarLibraryViewModel>(x), null))) &&
                                         (z.DateTo <= Convert.ToDateTime(y.GetValue(_mapper.Map<SolarLibraryViewModel>(x), null)))) : (false)))))
                            ).Select(i => i.Id).ToList();
                        }

                        //
                        // Library (Attribute Activated + Dynamic) Attributes...
                        //
                        List<int> IntersectLibraryIds = new List<int>();
                        if (AttrLibExist && DynamicLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds.Intersect(DynamicLibValueListIds).ToList();
                        }
                        else if (AttrLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds;
                        }
                        else if (DynamicLibExist)
                        {
                            IntersectLibraryIds = DynamicLibValueListIds;
                        }

                        WithDateFilterSolarLibraries = _mapper.Map<List<SolarLibraryViewModel>>(_unitOfWork.SolarLibraryRepository.GetIncludeWhere(x =>
                            x.Id > 0 && IntersectLibraryIds.Contains(x.Id) && !x.Deleted, x => x.Capacity).ToList());
                    }

                    //
                    // Intersect Between WithoutDateFilterSolarLibraries + WithDateFilterSolarLibraries To Get The Records That Meet The Filters (DateFilters + AttributeFilters)
                    //
                    if ((AttributeFilters != null ? AttributeFilters.Count() == 0 : true) &&
                        (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() == 0 : true))
                    {
                        SolarLibraries = _mapper.Map<List<SolarLibraryViewModel>>(_unitOfWork.SolarLibraryRepository.GetIncludeWhere(x =>
                            x.Id > 0 && !x.Deleted, x => x.Capacity).ToList());
                    }
                    else if ((AttributeFilters != null ? AttributeFilters.Count > 0 : false) &&
                            (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false))
                    {
                        List<int> SolarIds = WithoutDateFilterSolarLibraries.Select(x => x.Id).Intersect(WithDateFilterSolarLibraries.Select(x => x.Id)).ToList();
                        SolarLibraries = _mapper.Map<List<SolarLibraryViewModel>>(_unitOfWork.SolarLibraryRepository.GetWhere(x =>
                            SolarIds.Contains(x.Id)).ToList());
                    }
                    else if (AttributeFilters != null ? AttributeFilters.Count > 0 : false)
                    {
                        SolarLibraries = WithoutDateFilterSolarLibraries;
                    }
                    else if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                    {
                        SolarLibraries = WithDateFilterSolarLibraries;
                    }

                    Count = SolarLibraries.Count();

                    SolarLibraries = SolarLibraries.Skip((parameterPagination.PageNumber - 1) * parameterPagination.PageSize).
                        Take(parameterPagination.PageSize).ToList();

                    List<TLIattributeViewManagment> AllAttributes = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                       (x.Enable && x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.SolarLibrary.ToString() &&
                       (x.AttributeActivatedId != null ?
                            (x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIsolarLibrary.ToString() && x.AttributeActivated.enable) :
                            (x.DynamicAtt.LibraryAtt && !x.DynamicAtt.disable && x.DynamicAtt.tablesNames.TableName == Helpers.Constants.TablesNames.TLIsolarLibrary.ToString()))) ||
                        (x.AttributeActivated != null ?
                            ((x.AttributeActivated.Key.ToLower() == "id" || x.AttributeActivated.Key.ToLower() == "active") && x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIsolarLibrary.ToString()) : false),
                           x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1, x => x.EditableManagmentView.TLItablesNames2,
                           x => x.AttributeActivated, x => x.DynamicAtt, x => x.DynamicAtt.tablesNames, x => x.DynamicAtt.DataType).ToList();

                    List<TLIattributeViewManagment> NotDateTimeLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() != "datetime") : false).ToList();

                    List<TLIattributeViewManagment> NotDateTimeDynamicLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() != "datetime" : false).ToList();

                    List<TLIattributeViewManagment> DateTimeLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() == "datetime") : false).ToList();

                    List<TLIattributeViewManagment> DateTimeDynamicLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() == "datetime" : false).ToList();

                    foreach (SolarLibraryViewModel SolarLibraryViewModel in SolarLibraries)
                    {
                        dynamic DynamicSolarLibrary = new ExpandoObject();

                        //
                        // Library Object ViewModel... (Not DateTime DataType Attribute)
                        //
                        if (NotDateTimeLibraryAttributesViewModel != null ? NotDateTimeLibraryAttributesViewModel.Count > 0 : false)
                        {
                            List<PropertyInfo> LibraryProps = typeof(SolarLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() != "datetime" :
                                    (x.PropertyType.Name.ToLower() != "datetime")) :
                                (x.PropertyType.Name.ToLower() != "datetime")).ToList();

                            foreach (PropertyInfo prop in LibraryProps)
                            {
                                if (prop.Name.ToLower().Contains("_name") &&
                                    NotDateTimeLibraryAttributesViewModel.Exists(x =>
                                        x.AttributeActivated.Label.ToLower() == prop.Name.ToLower()))
                                {
                                    object ForeignKeyNamePropObject = prop.GetValue(SolarLibraryViewModel, null);
                                    ((IDictionary<String, Object>)DynamicSolarLibrary).Add(new KeyValuePair<string, object>(prop.Name, ForeignKeyNamePropObject));
                                }
                                else if (NotDateTimeLibraryAttributesViewModel.Exists(x =>
                                     x.AttributeActivated.Key.ToLower() == prop.Name.ToLower()) &&
                                    !prop.Name.ToLower().Contains("_name") &&
                                    (prop.Name.ToLower().Substring(Math.Max(0, prop.Name.Length - 2)) != "id" || prop.Name.ToLower() == "id"))
                                {
                                    if (prop.Name.ToLower() != "id" && prop.Name.ToLower() != "active")
                                    {
                                        TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                            x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIsolarLibrary.ToString() &&
                                            x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                        if (LabelName != null)
                                        {
                                            object PropObject = prop.GetValue(SolarLibraryViewModel, null);
                                            ((IDictionary<String, Object>)DynamicSolarLibrary).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                        }
                                    }
                                    else
                                    {
                                        object PropObject = prop.GetValue(SolarLibraryViewModel, null);
                                        ((IDictionary<String, Object>)DynamicSolarLibrary).Add(new KeyValuePair<string, object>(prop.Name, PropObject));
                                    }
                                }
                            }
                        }

                        //
                        // Library Dynamic Attributes... (Not DateTime DataType Attribute)
                        // 
                        List<TLIdynamicAtt> NotDateTimeLibraryDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                           !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIsolarLibrary.ToString() &&
                            x.LibraryAtt && x.DataType.Name.ToLower() != "datetime" &&
                            NotDateTimeDynamicLibraryAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames, x => x.DataType).ToList();

                        foreach (var LibraryDynamicAtt in NotDateTimeLibraryDynamicAttributes)
                        {
                            TLIdynamicAttLibValue DynamicAttLibValue = _unitOfWork.DynamicAttLibRepository.GetIncludeWhereFirst(x =>
                                x.DynamicAttId == LibraryDynamicAtt.Id &&
                                x.InventoryId == SolarLibraryViewModel.Id && !x.disable &&
                                x.DynamicAtt.LibraryAtt &&
                                x.DynamicAtt.Key == LibraryDynamicAtt.Key,
                                    x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType);

                            if (DynamicAttLibValue != null)
                            {
                                dynamic DynamicAttValue = new ExpandoObject();

                                if (DynamicAttLibValue.ValueString != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueString;

                                else if (DynamicAttLibValue.ValueDouble != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDouble;

                                else if (DynamicAttLibValue.ValueDateTime != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDateTime;

                                else if (DynamicAttLibValue.ValueBoolean != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueBoolean;

                                ((IDictionary<String, Object>)DynamicSolarLibrary).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, DynamicAttValue));
                            }
                            else
                            {
                                ((IDictionary<String, Object>)DynamicSolarLibrary).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, null));
                            }
                        }

                        //
                        // Library Object ViewModel... (DateTime DataType Attribute)
                        //
                        dynamic DateTimeAttributes = new ExpandoObject();
                        if (DateTimeLibraryAttributesViewModel != null ? DateTimeLibraryAttributesViewModel.Count() > 0 : false)
                        {
                            List<PropertyInfo> DateTimeLibraryProps = typeof(SolarLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name == "datetime" :
                                    (x.PropertyType.Name.ToLower() == "datetime")) :
                                (x.PropertyType.Name.ToLower() == "datetime")).ToList();

                            foreach (PropertyInfo prop in DateTimeLibraryProps)
                            {
                                TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                    x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIsolarLibrary.ToString() &&
                                    x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                if (LabelName != null)
                                {
                                    object PropObject = prop.GetValue(SolarLibraryViewModel, null);
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                }
                            }
                        }

                        //
                        // Library Dynamic Attributes... (DateTime DataType Attribute)
                        // 
                        List<TLIdynamicAtt> LibraryDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                           !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIsolarLibrary.ToString() &&
                            x.LibraryAtt && x.DataType.Name.ToLower() == "datetime" &&
                            DateTimeDynamicLibraryAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames).ToList();

                        foreach (TLIdynamicAtt LibraryDynamicAtt in LibraryDynamicAttributes)
                        {
                            TLIdynamicAttLibValue DynamicAttLibValue = _unitOfWork.DynamicAttLibRepository.GetIncludeWhereFirst(x =>
                                x.DynamicAttId == LibraryDynamicAtt.Id &&
                                x.InventoryId == SolarLibraryViewModel.Id && !x.disable &&
                                x.DynamicAtt.LibraryAtt &&
                                x.DynamicAtt.Key == LibraryDynamicAtt.Key,
                                    x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType);

                            if (DynamicAttLibValue != null)
                            {
                                dynamic DynamicAttValue = new ExpandoObject();
                                if (DynamicAttLibValue.ValueDateTime != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDateTime;

                                ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, DynamicAttValue));
                            }
                            else
                            {
                                ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, null));
                            }
                        }

                        ((IDictionary<String, Object>)DynamicSolarLibrary).Add(new KeyValuePair<string, object>("DateTimeAttributes", DateTimeAttributes));

                        OutPutList.Add(DynamicSolarLibrary);
                    }

                    SolarTableDisplay.Model = OutPutList;

                    if (WithFilterData)
                        SolarTableDisplay.filters = _unitOfWork.SolarLibraryRepository.GetRelatedTables();
                    else
                        SolarTableDisplay.filters = null;

                    return new Response<ReturnWithFilters<object>>(true, SolarTableDisplay, null, null, (int)ApiReturnCode.success, Count);
                }
                catch (Exception err)
                {
                    return new Response<ReturnWithFilters<object>>(false, null, null, err.Message, (int)ApiReturnCode.fail);
                }
            }
            else if (Helpers.Constants.OtherInventoryType.TLIgeneratorLibrary.ToString() == TableNameLibrary)
            {
                try
                {
                    List<FilterObjectList> ObjectAttributeFilters = CombineFilters.filters;
                    List<DateFilterViewModel> DateFilter = CombineFilters.DateFilter;
                    int Count = 0;
                    List<object> OutPutList = new List<object>();
                    ReturnWithFilters<object> GeneratorTableDisplay = new ReturnWithFilters<object>();

                    List<StringFilterObjectList> AttributeFilters = new List<StringFilterObjectList>();

                    List<GeneratorLibraryViewModel> GeneratorLibraries = new List<GeneratorLibraryViewModel>();
                    List<GeneratorLibraryViewModel> WithoutDateFilterGeneratorLibraries = new List<GeneratorLibraryViewModel>();
                    List<GeneratorLibraryViewModel> WithDateFilterGeneratorLibraries = new List<GeneratorLibraryViewModel>();

                    List<TLIattributeActivated> GeneratorLibraryAttribute = new List<TLIattributeActivated>();
                    if ((DateFilter != null ? DateFilter.Count() > 0 : false) ||
                        (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0))
                    {
                        GeneratorLibraryAttribute = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                            x.Enable && x.AttributeActivatedId != null &&
                            x.AttributeActivated.DataType.ToLower() != "datetime" &&
                            x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.GeneratorLibrary.ToString() &&
                            x.EditableManagmentView.TLItablesNames1.TableName == Helpers.Constants.TablesNames.TLIgeneratorLibrary.ToString(),
                                x => x.AttributeActivated, x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1)
                        .Select(x => x.AttributeActivated).ToList();
                    }

                    if (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0)
                    {
                        List<TLIattributeActivated> NotDateDateGeneratorLibraryAttribute = GeneratorLibraryAttribute.Where(x =>
                            x.DataType.ToLower() != "datetime").ToList();

                        foreach (FilterObjectList item in ObjectAttributeFilters)
                        {
                            List<string> value = item.value.Select(x => x.ToString().ToLower()).ToList();

                            TLIattributeActivated AttributeKey = NotDateDateGeneratorLibraryAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());

                            string Key = "";

                            if (AttributeKey != null)
                                Key = AttributeKey.Key;

                            else
                                Key = item.key;

                            AttributeFilters.Add(new StringFilterObjectList
                            {
                                key = Key,
                                value = value
                            });
                        }
                    }
                    if (AttributeFilters != null && AttributeFilters.Count > 0)
                    {
                        //
                        // Library Dynamic Attributes...
                        //
                        List<TLIdynamicAtt> LibDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AttributeFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIgeneratorLibrary.ToString(), x => x.tablesNames, x => x.DataType).ToList();

                        List<int> DynamicLibValueListIds = new List<int>();
                        bool DynamicLibExist = false;

                        if (LibDynamicAttListIds.Count > 0)
                        {
                            DynamicLibExist = true;
                            GetInventoriesIdsFromDynamicAttributes(out DynamicLibValueListIds, LibDynamicAttListIds, AttributeFilters);
                        }

                        //
                        // Library Attribute Activated...
                        //
                        bool AttrLibExist = typeof(GeneratorLibraryViewModel).GetProperties().ToList().Exists(x =>
                            AttributeFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower() && y.key.ToLower() != "id"));

                        List<int> LibraryAttributeActivatedIds = new List<int>();

                        if (AttrLibExist)
                        {
                            List<PropertyInfo> NonStringLibraryProps = typeof(GeneratorLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() != "string" &&
                                AttributeFilters.Exists(y =>
                                    y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<PropertyInfo> StringLibraryProps = typeof(GeneratorLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() == "string" &&
                                AttributeFilters.Exists(y =>
                                    y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<StringFilterObjectList> LibraryPropsAttributeFilters = AttributeFilters.Where(x =>
                                NonStringLibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower()) ||
                                StringLibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            LibraryAttributeActivatedIds = _unitOfWork.GeneratorLibraryRepository.GetWhere(x =>
                                 LibraryPropsAttributeFilters.All(z =>
                                    NonStringLibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (y.GetValue(_mapper.Map<GeneratorLibraryViewModel>(x), null) != null ? z.value.Contains(y.GetValue(_mapper.Map<GeneratorLibraryViewModel>(x), null).ToString().ToLower()) : false)) ||
                                    StringLibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (z.value.Any(w =>
                                         y.GetValue(_mapper.Map<GeneratorLibraryViewModel>(x), null) != null ? y.GetValue(_mapper.Map<GeneratorLibraryViewModel>(x), null).ToString().ToLower().StartsWith(w.ToLower()) : false))))
                             ).Select(i => i.Id).ToList();
                        }

                        //
                        // Library (Attribute Activated + Dynamic) Attributes...
                        //
                        List<int> IntersectLibraryIds = new List<int>();
                        if (AttrLibExist && DynamicLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds.Intersect(DynamicLibValueListIds).ToList();
                        }
                        else if (AttrLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds;
                        }
                        else if (DynamicLibExist)
                        {
                            IntersectLibraryIds = DynamicLibValueListIds;
                        }

                        WithoutDateFilterGeneratorLibraries = _mapper.Map<List<GeneratorLibraryViewModel>>(_unitOfWork.GeneratorLibraryRepository.GetIncludeWhere(x =>
                            x.Id > 0 && IntersectLibraryIds.Contains(x.Id) && !x.Deleted, x => x.Capacity).ToList());
                    }

                    //
                    // DateTime Objects Filters..
                    //
                    List<DateFilterViewModel> AfterConvertDateFilters = new List<DateFilterViewModel>();
                    if (DateFilter != null ? DateFilter.Count() > 0 : false)
                    {
                        List<TLIattributeActivated> DateGeneratorLibraryAttribute = GeneratorLibraryAttribute.Where(x =>
                            x.DataType.ToLower() == "datetime").ToList();

                        foreach (DateFilterViewModel item in DateFilter)
                        {
                            DateTime DateFrom = Convert.ToDateTime(item.DateFrom);
                            DateTime DateTo = Convert.ToDateTime(item.DateTo);

                            if (DateFrom > DateTo)
                            {
                                DateTime Replacer = DateFrom;
                                DateFrom = DateTo;
                                DateTo = Replacer;
                            }

                            TLIattributeActivated AttributeKey = DateGeneratorLibraryAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());
                            string Key = "";

                            if (AttributeKey != null)
                                Key = AttributeKey.Key;
                            else
                                Key = item.key;

                            AfterConvertDateFilters.Add(new DateFilterViewModel
                            {
                                key = Key,
                                DateFrom = DateFrom,
                                DateTo = DateTo
                            });
                        }
                    }
                    if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                    {
                        //
                        // Library Dynamic Attributes...
                        //
                        List<TLIdynamicAtt> DateTimeLibDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AfterConvertDateFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIgeneratorLibrary.ToString(), x => x.tablesNames).ToList();

                        List<int> DynamicLibValueListIds = new List<int>();
                        bool DynamicLibExist = false;

                        if (DateTimeLibDynamicAttListIds.Count > 0)
                        {
                            DynamicLibExist = true;
                            List<DateFilterViewModel> DynamicLibAttributeFilters = AfterConvertDateFilters.Where(x =>
                                DateTimeLibDynamicAttListIds.Exists(y => y.Key.ToLower() == x.key.ToLower())).ToList();

                            DynamicLibValueListIds = new List<int>();

                            List<TLIdynamicAttLibValue> DynamicLibValueListObjects = _unitOfWork.DynamicAttLibRepository.GetIncludeWhere(x =>
                                DateTimeLibDynamicAttListIds.Exists(y => y.Id == x.DynamicAttId) && !x.disable).ToList();

                            List<int> InventoriesIds = DynamicLibValueListObjects.Select(x => x.InventoryId).Distinct().ToList();

                            foreach (int InventoryId in InventoriesIds)
                            {
                                List<TLIdynamicAttLibValue> DynamicLibValueListInventories = DynamicLibValueListObjects.Where(x =>
                                    x.InventoryId == InventoryId).ToList();

                                if (DynamicLibAttributeFilters.All(y => DynamicLibValueListInventories.Exists(x =>
                                     (x.ValueDateTime != null ?
                                        (x.ValueDateTime >= y.DateFrom && x.ValueDateTime <= y.DateTo) : (false)))))
                                {
                                    DynamicLibValueListIds.Add(InventoryId);
                                }
                            }
                        }

                        //
                        // Library Attribute Activated...
                        //
                        List<PropertyInfo> LibraryProps = typeof(GeneratorLibraryViewModel).GetProperties().Where(x =>
                            AfterConvertDateFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower())).ToList();

                        List<int> LibraryAttributeActivatedIds = new List<int>();
                        bool AttrLibExist = false;

                        if (LibraryProps != null)
                        {
                            AttrLibExist = true;

                            List<DateFilterViewModel> LibraryPropsAttributeFilters = AfterConvertDateFilters.Where(x =>
                                LibraryProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            LibraryAttributeActivatedIds = _unitOfWork.GeneratorLibraryRepository.GetIncludeWhere(x =>
                                LibraryPropsAttributeFilters.All(z =>
                                    (LibraryProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && ((y.GetValue(_mapper.Map<GeneratorLibraryViewModel>(x), null) != null) ?
                                        ((z.DateFrom >= Convert.ToDateTime(y.GetValue(_mapper.Map<GeneratorLibraryViewModel>(x), null))) &&
                                         (z.DateTo <= Convert.ToDateTime(y.GetValue(_mapper.Map<GeneratorLibraryViewModel>(x), null)))) : (false)))))
                            ).Select(i => i.Id).ToList();
                        }

                        //
                        // Library (Attribute Activated + Dynamic) Attributes...
                        //
                        List<int> IntersectLibraryIds = new List<int>();
                        if (AttrLibExist && DynamicLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds.Intersect(DynamicLibValueListIds).ToList();
                        }
                        else if (AttrLibExist)
                        {
                            IntersectLibraryIds = LibraryAttributeActivatedIds;
                        }
                        else if (DynamicLibExist)
                        {
                            IntersectLibraryIds = DynamicLibValueListIds;
                        }

                        WithDateFilterGeneratorLibraries = _mapper.Map<List<GeneratorLibraryViewModel>>(_unitOfWork.GeneratorLibraryRepository.GetIncludeWhere(x =>
                            x.Id > 0 && IntersectLibraryIds.Contains(x.Id) && !x.Deleted, x => x.Capacity).ToList());
                    }

                    //
                    // Intersect Between WithoutDateFilterGeneratorLibraries + WithDateFilterGeneratorLibraries To Get The Records That Meet The Filters (DateFilters + AttributeFilters)
                    //
                    if ((AttributeFilters != null ? AttributeFilters.Count() == 0 : true) &&
                        (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() == 0 : true))
                    {
                        GeneratorLibraries = _mapper.Map<List<GeneratorLibraryViewModel>>(_unitOfWork.GeneratorLibraryRepository.GetIncludeWhere(x =>
                            x.Id > 0 && !x.Deleted, x => x.Capacity).ToList());
                    }
                    else if ((AttributeFilters != null ? AttributeFilters.Count > 0 : false) &&
                            (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false))
                    {
                        List<int> GeneratorIds = WithoutDateFilterGeneratorLibraries.Select(x => x.Id).Intersect(WithDateFilterGeneratorLibraries.Select(x => x.Id)).ToList();
                        GeneratorLibraries = _mapper.Map<List<GeneratorLibraryViewModel>>(_unitOfWork.GeneratorLibraryRepository.GetWhere(x =>
                            GeneratorIds.Contains(x.Id)).ToList());
                    }
                    else if (AttributeFilters != null ? AttributeFilters.Count > 0 : false)
                    {
                        GeneratorLibraries = WithoutDateFilterGeneratorLibraries;
                    }
                    else if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                    {
                        GeneratorLibraries = WithDateFilterGeneratorLibraries;
                    }

                    Count = GeneratorLibraries.Count();

                    GeneratorLibraries = GeneratorLibraries.Skip((parameterPagination.PageNumber - 1) * parameterPagination.PageSize).
                        Take(parameterPagination.PageSize).ToList();

                    List<TLIattributeViewManagment> AllAttributes = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                       (x.Enable && x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.GeneratorLibrary.ToString() &&
                       (x.AttributeActivatedId != null ?
                            (x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIgeneratorLibrary.ToString() && x.AttributeActivated.enable) :
                            (x.DynamicAtt.LibraryAtt && !x.DynamicAtt.disable && x.DynamicAtt.tablesNames.TableName == Helpers.Constants.TablesNames.TLIgeneratorLibrary.ToString()))) ||
                        (x.AttributeActivated != null ?
                            ((x.AttributeActivated.Key.ToLower() == "id" || x.AttributeActivated.Key.ToLower() == "active") && x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIgeneratorLibrary.ToString()) : false),
                           x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1, x => x.EditableManagmentView.TLItablesNames2,
                           x => x.AttributeActivated, x => x.DynamicAtt, x => x.DynamicAtt.tablesNames, x => x.DynamicAtt.DataType).ToList();

                    List<TLIattributeViewManagment> NotDateTimeLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() != "datetime") : false).ToList();

                    List<TLIattributeViewManagment> NotDateTimeDynamicLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() != "datetime" : false).ToList();

                    List<TLIattributeViewManagment> DateTimeLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() == "datetime") : false).ToList();

                    List<TLIattributeViewManagment> DateTimeDynamicLibraryAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() == "datetime" : false).ToList();

                    foreach (GeneratorLibraryViewModel GeneratorLibraryViewModel in GeneratorLibraries)
                    {
                        dynamic DynamicGeneratorLibrary = new ExpandoObject();

                        //
                        // Library Object ViewModel... (Not DateTime DataType Attribute)
                        //
                        if (NotDateTimeLibraryAttributesViewModel != null ? NotDateTimeLibraryAttributesViewModel.Count > 0 : false)
                        {
                            List<PropertyInfo> LibraryProps = typeof(GeneratorLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() != "datetime" :
                                    (x.PropertyType.Name.ToLower() != "datetime")) :
                                (x.PropertyType.Name.ToLower() != "datetime")).ToList();

                            foreach (PropertyInfo prop in LibraryProps)
                            {
                                if (prop.Name.ToLower().Contains("_name") &&
                                    NotDateTimeLibraryAttributesViewModel.Exists(x =>
                                        x.AttributeActivated.Label.ToLower() == prop.Name.ToLower()))
                                {
                                    object ForeignKeyNamePropObject = prop.GetValue(GeneratorLibraryViewModel, null);
                                    ((IDictionary<String, Object>)DynamicGeneratorLibrary).Add(new KeyValuePair<string, object>(prop.Name, ForeignKeyNamePropObject));
                                }
                                else if (NotDateTimeLibraryAttributesViewModel.Exists(x =>
                                     x.AttributeActivated.Key.ToLower() == prop.Name.ToLower()) &&
                                    !prop.Name.ToLower().Contains("_name") &&
                                    (prop.Name.ToLower().Substring(Math.Max(0, prop.Name.Length - 2)) != "id" || prop.Name.ToLower() == "id"))
                                {
                                    if (prop.Name.ToLower() != "id" && prop.Name.ToLower() != "active")
                                    {
                                        TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                            x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIgeneratorLibrary.ToString() &&
                                            x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                        if (LabelName != null)
                                        {
                                            object PropObject = prop.GetValue(GeneratorLibraryViewModel, null);
                                            ((IDictionary<String, Object>)DynamicGeneratorLibrary).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                        }
                                    }
                                    else
                                    {
                                        object PropObject = prop.GetValue(GeneratorLibraryViewModel, null);
                                        ((IDictionary<String, Object>)DynamicGeneratorLibrary).Add(new KeyValuePair<string, object>(prop.Name, PropObject));
                                    }
                                }
                            }
                        }

                        //
                        // Library Dynamic Attributes... (Not DateTime DataType Attribute)
                        // 
                        List<TLIdynamicAtt> NotDateTimeLibraryDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                           !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIgeneratorLibrary.ToString() &&
                            x.LibraryAtt && x.DataType.Name.ToLower() != "datetime" &&
                            NotDateTimeDynamicLibraryAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames, x => x.DataType).ToList();

                        foreach (var LibraryDynamicAtt in NotDateTimeLibraryDynamicAttributes)
                        {
                            TLIdynamicAttLibValue DynamicAttLibValue = _unitOfWork.DynamicAttLibRepository.GetIncludeWhereFirst(x =>
                                x.DynamicAttId == LibraryDynamicAtt.Id &&
                                x.InventoryId == GeneratorLibraryViewModel.Id && !x.disable &&
                                x.DynamicAtt.LibraryAtt &&
                                x.DynamicAtt.Key == LibraryDynamicAtt.Key,
                                    x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType);

                            if (DynamicAttLibValue != null)
                            {
                                dynamic DynamicAttValue = new ExpandoObject();

                                if (DynamicAttLibValue.ValueString != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueString;

                                else if (DynamicAttLibValue.ValueDouble != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDouble;

                                else if (DynamicAttLibValue.ValueDateTime != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDateTime;

                                else if (DynamicAttLibValue.ValueBoolean != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueBoolean;

                                ((IDictionary<String, Object>)DynamicGeneratorLibrary).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, DynamicAttValue));
                            }
                            else
                            {
                                ((IDictionary<String, Object>)DynamicGeneratorLibrary).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, null));
                            }
                        }

                        //
                        // Library Object ViewModel... (DateTime DataType Attribute)
                        //
                        dynamic DateTimeAttributes = new ExpandoObject();
                        if (DateTimeLibraryAttributesViewModel != null ? DateTimeLibraryAttributesViewModel.Count() > 0 : false)
                        {
                            List<PropertyInfo> DateTimeLibraryProps = typeof(GeneratorLibraryViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name == "datetime" :
                                    (x.PropertyType.Name.ToLower() == "datetime")) :
                                (x.PropertyType.Name.ToLower() == "datetime")).ToList();

                            foreach (PropertyInfo prop in DateTimeLibraryProps)
                            {
                                TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                    x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIgeneratorLibrary.ToString() &&
                                    x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                if (LabelName != null)
                                {
                                    object PropObject = prop.GetValue(GeneratorLibraryViewModel, null);
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                }
                            }
                        }

                        //
                        // Library Dynamic Attributes... (DateTime DataType Attribute)
                        // 
                        List<TLIdynamicAtt> LibraryDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                           !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIgeneratorLibrary.ToString() &&
                            x.LibraryAtt && x.DataType.Name.ToLower() == "datetime" &&
                            DateTimeDynamicLibraryAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames).ToList();

                        foreach (TLIdynamicAtt LibraryDynamicAtt in LibraryDynamicAttributes)
                        {
                            TLIdynamicAttLibValue DynamicAttLibValue = _unitOfWork.DynamicAttLibRepository.GetIncludeWhereFirst(x =>
                                x.DynamicAttId == LibraryDynamicAtt.Id &&
                                x.InventoryId == GeneratorLibraryViewModel.Id && !x.disable &&
                                x.DynamicAtt.LibraryAtt &&
                                x.DynamicAtt.Key == LibraryDynamicAtt.Key,
                                    x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType);

                            if (DynamicAttLibValue != null)
                            {
                                dynamic DynamicAttValue = new ExpandoObject();
                                if (DynamicAttLibValue.ValueDateTime != null)
                                    DynamicAttValue = DynamicAttLibValue.ValueDateTime;

                                ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, DynamicAttValue));
                            }
                            else
                            {
                                ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LibraryDynamicAtt.Key, null));
                            }
                        }

                        ((IDictionary<String, Object>)DynamicGeneratorLibrary).Add(new KeyValuePair<string, object>("DateTimeAttributes", DateTimeAttributes));

                        OutPutList.Add(DynamicGeneratorLibrary);
                    }

                    GeneratorTableDisplay.Model = OutPutList;

                    if (WithFilterData)
                        GeneratorTableDisplay.filters = _unitOfWork.GeneratorLibraryRepository.GetRelatedTables();
                    else
                        GeneratorTableDisplay.filters = null;

                    return new Response<ReturnWithFilters<object>>(true, GeneratorTableDisplay, null, null, (int)ApiReturnCode.success, Count);
                }
                catch (Exception err)
                {
                    return new Response<ReturnWithFilters<object>>(false, null, null, err.Message, (int)ApiReturnCode.fail);
                }
            }
            return new Response<ReturnWithFilters<object>>(true, null, null, null, (int)ApiReturnCode.success);
        }
        public Response<IEnumerable<SiteViewModel>> GetAllSitesDetails(ParameterPagination parameterPagination, List<FilterObjectList> filters = null)
        {
            try
            {

                if (filters != null ? filters.Count() > 0 : false)
                {
                    List<PropertyInfo> SiteAttributes = typeof(SiteViewModel).GetProperties().Where(x => filters.Exists(y => y.key.ToLower() == x.Name.ToLower())).ToList();
                    List<string> SiteCodes = _unitOfWork.SiteRepository.GetAllWithoutCount().Select(x => x.SiteCode).ToList();
                    foreach (PropertyInfo attribute in SiteAttributes)
                    {
                        var xxxxx = attribute.PropertyType.Name;
                        var test = _unitOfWork.SiteRepository.GetWhere(x => filters.Exists(filter => attribute.Name.ToLower() == filter.key.ToLower() ?
                                    (attribute.PropertyType.Name.ToLower() != "string" ?
                                        attribute.GetValue(_mapper.Map<SiteViewModel>(x), null).ToString().ToLower() == filter.value.FirstOrDefault().ToString().ToLower() :
                                        attribute.GetValue(_mapper.Map<SiteViewModel>(x), null).ToString().ToLower().StartsWith(filter.value.FirstOrDefault().ToString().ToLower())) : false)).ToList().Select(x => x.SiteCode).ToList();
                        SiteCodes = SiteCodes.Intersect(test).ToList();
                    }

                    List<SiteViewModel> Sites = _mapper.Map<List<SiteViewModel>>(_unitOfWork.SiteRepository
                        .GetIncludeWhere(x => SiteCodes.Contains(x.SiteCode.ToLower()), x => x.Area, x => x.Region, x => x.siteStatus).ToList());
                    int count = Sites.Count();

                    Sites = Sites.Skip((parameterPagination.PageNumber - 1) * parameterPagination.PageSize).
                        Take(parameterPagination.PageSize).ToList();

                    return new Response<IEnumerable<SiteViewModel>>(true, Sites, null, null, (int)Helpers.Constants.ApiReturnCode.success, count);
                }
                else
                {
                    List<SiteViewModel> Sites = _mapper.Map<List<SiteViewModel>>(_unitOfWork.SiteRepository
                        .GetIncludeWhere(x => true, x => x.Area, x => x.Region, x => x.siteStatus).ToList());
                    int count = Sites.Count();

                    Sites = Sites.Skip((parameterPagination.PageNumber - 1) * parameterPagination.PageSize).
                        Take(parameterPagination.PageSize).ToList();

                    return new Response<IEnumerable<SiteViewModel>>(true, Sites, null, null, (int)Helpers.Constants.ApiReturnCode.success, count);
                }
            }
            catch (Exception err)
            {
                return new Response<IEnumerable<SiteViewModel>>(true, null, null, err.Message, (int)Helpers.Constants.ApiReturnCode.fail);
            }

        }
        public Response<LoadsDto> GetAllLoadonSitebyPartandType(String SiteCode,string PartName,string TypeName)
        {
            try
            {
                ReturnWithFilters<MWDishLoadDto> MW_DishesLibInstList = new ReturnWithFilters<MWDishLoadDto>();
                MWDishLoadDto MW_DishesLibInst = new MWDishLoadDto();

                ReturnWithFilters<MWBULoadDto> MW_BUsLibInstList = new ReturnWithFilters<MWBULoadDto>();
                MWBULoadDto MW_BUsLibInst = new MWBULoadDto();

                ReturnWithFilters<MWODULoadDto> MW_ODUsLibInstList = new ReturnWithFilters<MWODULoadDto>();
                MWODULoadDto MW_ODUsLibInst = new MWODULoadDto();

                ReturnWithFilters<MWRFULoadDto> MW_RFUsLibInstList = new ReturnWithFilters<MWRFULoadDto>();
                MWRFULoadDto MW_RFUsLibInst = new MWRFULoadDto();

                ReturnWithFilters<RadioAntennaLoadDto> RadioAntennasLibInstList = new ReturnWithFilters<RadioAntennaLoadDto>();
                RadioAntennaLoadDto RadioAntennasLibInst = new RadioAntennaLoadDto();

                ReturnWithFilters<RadioRRULoadDto> RadioRRUSLibInstList = new ReturnWithFilters<RadioRRULoadDto>();
                RadioRRULoadDto RadioRRUSLibInst = new RadioRRULoadDto();

                ReturnWithFilters<PowerLoadDto> PowersLibInstList = new ReturnWithFilters<PowerLoadDto>();
                PowerLoadDto PowersLibInst = new PowerLoadDto();

                ReturnWithFilters<MWOtherLoadDto> MW_OtherLibInstList = new ReturnWithFilters<MWOtherLoadDto>();
                MWOtherLoadDto MW_OthersLibInst = new MWOtherLoadDto();

                ReturnWithFilters<RadioOtherLoadDto> RadioOtherLibInstList = new ReturnWithFilters<RadioOtherLoadDto>();
                RadioOtherLoadDto RadioOthersLibInst = new RadioOtherLoadDto();

                ReturnWithFilters<SideArmLoadDto> SideArmLibInstList = new ReturnWithFilters<SideArmLoadDto>();
                SideArmLoadDto SideArmsLibInst = new SideArmLoadDto();

                ReturnWithFilters<LoadOtherDto> LoadOtherLibInstList = new ReturnWithFilters<LoadOtherDto>();
                LoadOtherDto LoadOthersLibInst = new LoadOtherDto();
                LoadsDto loadsDtos = new LoadsDto();

                TablesNamesViewModel TabelName = new TablesNamesViewModel();
                List<MWRFULoadDto> MW_RFUListToAddToModel = new List<MWRFULoadDto>();
                List<MWODULoadDto> MW_ODUListToAddToModel = new List<MWODULoadDto>();
                List<MWDishLoadDto> MW_DishListToAddToModel = new List<MWDishLoadDto>();
                List<MWBULoadDto> MW_BUListToAddToModel = new List<MWBULoadDto>();
                List<MWOtherLoadDto> MW_OtherListToAddToModel = new List<MWOtherLoadDto>();
                List<RadioAntennaLoadDto> RadioAntennaListToAddToModel = new List<RadioAntennaLoadDto>();
                List<RadioRRULoadDto> RadioRRUListToAddToModel = new List<RadioRRULoadDto>();
                List<RadioOtherLoadDto> RadioOtherUListToAddToModel = new List<RadioOtherLoadDto>();
                List<PowerLoadDto> PowerListToAddToModel = new List<PowerLoadDto>();
                List<SideArmLoadDto> SidearmListToAddToModel = new List<SideArmLoadDto>();
                List<LoadOtherDto> LoadOtherListToAddToModel = new List<LoadOtherDto>();
                var CivilLoads = _unitOfWork.CivilLoadsRepository.GetWhere(x => x.SiteCode == SiteCode&& !x.Dismantle).ToList();

                foreach (var CivilLoad in CivilLoads)
                {
                    if (CivilLoad.allLoadInstId != null)
                    {
                        TLIallLoadInst allLoadsInst = _unitOfWork.AllLoadInstRepository.GetIncludeWhere(x => x.Id == CivilLoad.allLoadInstId.Value, x => x.mwBU, x => x.mwDish,
                            x => x.mwODU, x => x.mwRFU, x => x.mwOther, x => x.radioAntenna, x => x.radioRRU, x => x.radioOther, x => x.power, x => x.loadOther).FirstOrDefault();
                        if (allLoadsInst.mwRFUId != null ||allLoadsInst.mwBUId != null || allLoadsInst.mwDishId != null || allLoadsInst.mwODUId != null || allLoadsInst.mwOtherId != null)
                        {
                            if (PartName == "MW" && TypeName == null)
                            {
                                if (allLoadsInst.mwRFUId != null)
                                {
                                    List<DynamicAttDto> DynamicAttListCopy = new List<DynamicAttDto>();

                                    // Installation Object + Dynamic Attributes For This Installation Object..
                                    var MW_RFU = _unitOfWork.MW_RFURepository.GetIncludeWhere(x => x.Id == allLoadsInst.mwRFUId, x => x.MwPort, x => x.MwRFULibrary, x => x.Owner).FirstOrDefault();
                                    var MW_RFUMap = _mapper.Map<MW_RFUViewModel>(MW_RFU);
                                    var DynamicAttInstValueRecords = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x => (x.DynamicAtt.disable == false &&
                                        x.DynamicAtt.tablesNames.TableName == "TLImwRFU" &&
                                        x.InventoryId == MW_RFU.Id &&
                                        !x.DynamicAtt.LibraryAtt), x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                                    foreach (var DynamicAttInstValueRecord in DynamicAttInstValueRecords)
                                    {
                                        var DynamicAttDtoObject = GetDynamicAttDto(DynamicAttInstValueRecord, null);
                                        DynamicAttListCopy.Add(DynamicAttDtoObject);
                                    }

                                    // Library Object + Dynamic Attributes For This Library Object..
                                    var MW_RFULibrary = _unitOfWork.MW_RFULibraryRepository.GetIncludeWhere(x => x.Id == MW_RFU.MwRFULibraryId, x => x.boardType, x => x.diversityType).FirstOrDefault();
                                    var MW_RFULibraryMap = _mapper.Map<MW_RFULibraryViewModel>(MW_RFULibrary);
                                    List<TLIdynamicAttLibValue> DynamicAttLibRecords = _unitOfWork.DynamicAttLibRepository.GetIncludeWhere(x => (
                                        x.DynamicAtt.disable == false && x.DynamicAtt.tablesNames.TableName == "TLImwRFULibrary" &&
                                        x.InventoryId == MW_RFU.MwRFULibraryId && x.DynamicAtt.LibraryAtt),
                                        x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();
                                    foreach (var DynamicAttLibRecord in DynamicAttLibRecords)
                                    {
                                        var DynamicAttDtoObject = GetDynamicAttDto(null, DynamicAttLibRecord);
                                        DynamicAttListCopy.Add(DynamicAttDtoObject);
                                    }
                                    MW_RFUListToAddToModel.Add(new MWRFULoadDto()
                                    {
                                        MW_RFU = MW_RFUMap,
                                        MW_RFULibrary = MW_RFULibraryMap,
                                        DynamicAttList = DynamicAttListCopy
                                    });
                                    loadsDtos.MW_RFUs = MW_RFUListToAddToModel;

                                }
                                else if (allLoadsInst.mwODUId != null)
                                {
                                    List<DynamicAttDto> DynamicAttListCopy = new List<DynamicAttDto>();

                                    // Installation Object + Dynamic Attributes For This Installation Object..
                                    var MW_ODU = _unitOfWork.MW_ODURepository.GetIncludeWhere(x => x.Id == allLoadsInst.mwODUId, x => x.Owner, x => x.MwODULibrary, x => x.Mw_Dish, x => x.OduInstallationType).FirstOrDefault();
                                    var MW_ODUMap = _mapper.Map<MW_ODUViewModel>(MW_ODU);
                                    var DynamicAttInstValueRecords = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x => (x.DynamicAtt.disable == false &&
                                        x.DynamicAtt.tablesNames.TableName == "TLImwODU" &&
                                        x.InventoryId == MW_ODU.Id &&
                                        !x.DynamicAtt.LibraryAtt), x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();
                                    foreach (var DynamicAttInstValueRecord in DynamicAttInstValueRecords)
                                    {
                                        var DynamicAttDtoObject = GetDynamicAttDto(DynamicAttInstValueRecord, null);
                                        DynamicAttListCopy.Add(DynamicAttDtoObject);
                                    }

                                    // Library Object + Dynamic Attributes For This Library Object..
                                    var MW_ODULibrary = _unitOfWork.MW_ODULibraryRepository.GetIncludeWhere(x => x.Id == MW_ODU.MwODULibraryId, x => x.parity).FirstOrDefault();
                                    var MW_ODULibraryMap = _mapper.Map<MW_ODULibraryViewModel>(MW_ODULibrary);
                                    var DynamicAttLibRecords = _unitOfWork.DynamicAttLibRepository.GetIncludeWhere(x => (
                                        x.DynamicAtt.disable == false && x.DynamicAtt.tablesNames.TableName == "TLImwODULibrary" &&
                                        x.InventoryId == MW_ODU.MwODULibraryId && x.DynamicAtt.LibraryAtt),
                                        x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();
                                    foreach (var DynamicAttLibRecord in DynamicAttLibRecords)
                                    {
                                        var DynamicAttDtoObject = GetDynamicAttDto(null, DynamicAttLibRecord);
                                        DynamicAttListCopy.Add(DynamicAttDtoObject);
                                    }
                                    MW_ODUListToAddToModel.Add(new MWODULoadDto()
                                    {
                                        MW_ODU = MW_ODUMap,
                                        MW_ODULibrary = MW_ODULibraryMap,
                                        DynamicAttList = DynamicAttListCopy
                                    });
                                    loadsDtos.MW_ODUs = MW_ODUListToAddToModel;
                                }
                                else if (allLoadsInst.mwDishId != null)
                                {
                                    List<DynamicAttDto> DynamicAttListCopy = new List<DynamicAttDto>();

                                    // Installation Object + Dynamic Attributes For This Installation Object..
                                    var MW_Dish = _unitOfWork.MW_DishRepository.GetIncludeWhere(x => x.Id == allLoadsInst.mwDishId, x => x.InstallationPlace, x => x.ItemConnectTo, x => x.MwDishLibrary, x => x.owner, x => x.PolarityOnLocation, x => x.RepeaterType).FirstOrDefault();
                                    var MW_DishMap = _mapper.Map<MW_DishViewModel>(MW_Dish);
                                    var DynamicAttInstValueRecords = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x => (x.DynamicAtt.disable == false &&
                                        x.DynamicAtt.tablesNames.TableName == "TLImwDish" &&
                                        x.InventoryId == MW_Dish.Id &&
                                        !x.DynamicAtt.LibraryAtt), x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                                    foreach (var DynamicAttInstValueRecord in DynamicAttInstValueRecords)
                                    {
                                        var DynamicAttDtoObject = GetDynamicAttDto(DynamicAttInstValueRecord, null);
                                        DynamicAttListCopy.Add(DynamicAttDtoObject);
                                    }

                                    // Library Object + Dynamic Attributes For This Library Object..
                                    var MW_DishLibrary = _unitOfWork.MW_DishLibraryRepository.GetIncludeWhere(x => x.Id == MW_Dish.MwDishLibraryId, x => x.asType, x => x.polarityType).FirstOrDefault();
                                    var MW_DishLibraryMap = _mapper.Map<MW_DishLibraryViewModel>(MW_DishLibrary);
                                    var DynamicAttLibRecords = _unitOfWork.DynamicAttLibRepository.GetIncludeWhere(x => (
                                        x.DynamicAtt.disable == false && x.DynamicAtt.tablesNames.TableName == "TLImwDishLibrary" &&
                                        x.InventoryId == MW_Dish.MwDishLibraryId && x.DynamicAtt.LibraryAtt),
                                        x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();
                                    foreach (var DynamicAttLibRecord in DynamicAttLibRecords)
                                    {
                                        var DynamicAttDtoObject = GetDynamicAttDto(null, DynamicAttLibRecord);
                                        DynamicAttListCopy.Add(DynamicAttDtoObject);
                                    }
                                    MW_DishListToAddToModel.Add(new MWDishLoadDto()
                                    {
                                        MW_Dish = MW_DishMap,
                                        MW_DishLibrary = MW_DishLibraryMap,
                                        DynamicAttList = DynamicAttListCopy
                                    });
                                    loadsDtos.MW_Dishes = MW_DishListToAddToModel;
                                }
                                else if (allLoadsInst.mwBUId != null)
                                {
                                    List<DynamicAttDto> DynamicAttListCopy = new List<DynamicAttDto>();

                                    // Installation Object + Dynamic Attributes For This Installation Object..
                                    var MW_BU = _unitOfWork.MW_BURepository.GetIncludeWhere(x => x.Id == allLoadsInst.mwBUId, x => x.baseBU, x => x.InstallationPlace, x => x.MwBULibrary, x => x.MainDish, x => x.MwPort, x => x.Owner).FirstOrDefault();
                                    var MW_BUMap = _mapper.Map<MW_BUViewModel>(MW_BU);
                                    var DynamicAttInstValueRecords = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x => (x.DynamicAtt.disable == false &&
                                        x.DynamicAtt.tablesNames.TableName == "TLImwBU" &&
                                        x.InventoryId == MW_BU.Id &&
                                        !x.DynamicAtt.LibraryAtt), x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                                    foreach (var DynamicAttInstValueRecord in DynamicAttInstValueRecords)
                                    {
                                        var DynamicAttDtoObject = GetDynamicAttDto(DynamicAttInstValueRecord, null);
                                        DynamicAttListCopy.Add(DynamicAttDtoObject);
                                    }

                                    // Library Object + Dynamic Attributes For This Library Object..
                                    var MW_BULibrary = _unitOfWork.MW_BULibraryRepository.GetIncludeWhere(x => x.Id == MW_BU.MwBULibraryId, x => x.diversityType).FirstOrDefault();
                                    var MW_BULibraryMap = _mapper.Map<MW_BULibraryViewModel>(MW_BULibrary);
                                    var DynamicAttLibRecords = _unitOfWork.DynamicAttLibRepository.GetIncludeWhere(x => (
                                        x.DynamicAtt.disable == false && x.DynamicAtt.tablesNames.TableName == "TLImwBULibrary" &&
                                        x.InventoryId == MW_BU.MwBULibraryId && x.DynamicAtt.LibraryAtt),
                                        x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();
                                    foreach (var DynamicAttLibRecord in DynamicAttLibRecords)
                                    {
                                        var DynamicAttDtoObject = GetDynamicAttDto(null, DynamicAttLibRecord);
                                        DynamicAttListCopy.Add(DynamicAttDtoObject);
                                    }
                                    MW_BUListToAddToModel.Add(new MWBULoadDto()
                                    {
                                        MW_BU = MW_BUMap,
                                        MW_BULibrary = MW_BULibraryMap,
                                        DynamicAttList = DynamicAttListCopy
                                    });

                                    loadsDtos.MW_BUs = MW_BUListToAddToModel;

                                }
                                else if (allLoadsInst.mwOtherId != null)
                                {
                                    List<DynamicAttDto> DynamicAttListCopy = new List<DynamicAttDto>();

                                    // Installation Object + Dynamic Attributes For This Installation Object..
                                    var MWOther = _unitOfWork.Mw_OtherRepository.GetIncludeWhere(x => x.Id == allLoadsInst.mwOtherId, x => x.InstallationPlace, x => x.mwOtherLibrary).FirstOrDefault();
                                    var MWOtherMap = _mapper.Map<Mw_OtherViewModel>(MWOther);
                                    var DynamicAttInstValueRecords = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x => (x.DynamicAtt.disable == false &&
                                        x.DynamicAtt.tablesNames.TableName == "TLImwOther" &&
                                        x.InventoryId == MWOther.Id &&
                                        !x.DynamicAtt.LibraryAtt), x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                                    foreach (var DynamicAttInstValueRecord in DynamicAttInstValueRecords)
                                    {
                                        var DynamicAttDtoObject = GetDynamicAttDto(DynamicAttInstValueRecord, null);
                                        DynamicAttListCopy.Add(DynamicAttDtoObject);
                                    }

                                    // Library Object + Dynamic Attributes For This Library Object..
                                    var MWOtherLibrary = _unitOfWork.MW_OtherLibraryRepository.GetIncludeWhere(x => x.Id == MWOther.mwOtherLibraryId).FirstOrDefault();
                                    var MWOtherLibraryMap = _mapper.Map<MW_OtherLibraryViewModel>(MWOtherLibrary);
                                    List<TLIdynamicAttLibValue> DynamicAttLibRecords = _unitOfWork.DynamicAttLibRepository.GetIncludeWhere(x => (
                                        x.DynamicAtt.disable == false && x.DynamicAtt.tablesNames.TableName == "TLImwOtherLibrary" &&
                                        x.InventoryId == MWOther.mwOtherLibraryId && x.DynamicAtt.LibraryAtt),
                                        x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();
                                    foreach (var DynamicAttLibRecord in DynamicAttLibRecords)
                                    {
                                        var DynamicAttDtoObject = GetDynamicAttDto(null, DynamicAttLibRecord);
                                        DynamicAttListCopy.Add(DynamicAttDtoObject);
                                    }
                                    MW_OtherListToAddToModel.Add(new MWOtherLoadDto()
                                    {
                                        MWOther = MWOtherMap,
                                        MWOtherLibrary = MWOtherLibraryMap,
                                        DynamicAttList = DynamicAttListCopy
                                    });
                                    loadsDtos.MW_Others = MW_OtherListToAddToModel;
                                }
                            }
                            else if (PartName == "MW" && TypeName == "TLImwRFU")
                            {
                                if (allLoadsInst.mwRFUId != null)
                                {
                                    List<DynamicAttDto> DynamicAttListCopy = new List<DynamicAttDto>();

                                    // Installation Object + Dynamic Attributes For This Installation Object..
                                    var MW_RFU = _unitOfWork.MW_RFURepository.GetIncludeWhere(x => x.Id == allLoadsInst.mwRFUId, x => x.MwPort, x => x.MwRFULibrary, x => x.Owner).FirstOrDefault();
                                    var MW_RFUMap = _mapper.Map<MW_RFUViewModel>(MW_RFU);
                                    var DynamicAttInstValueRecords = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x => (x.DynamicAtt.disable == false &&
                                        x.DynamicAtt.tablesNames.TableName == "TLImwRFU" &&
                                        x.InventoryId == MW_RFU.Id &&
                                        !x.DynamicAtt.LibraryAtt), x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                                    foreach (var DynamicAttInstValueRecord in DynamicAttInstValueRecords)
                                    {
                                        var DynamicAttDtoObject = GetDynamicAttDto(DynamicAttInstValueRecord, null);
                                        DynamicAttListCopy.Add(DynamicAttDtoObject);
                                    }

                                    // Library Object + Dynamic Attributes For This Library Object..
                                    var MW_RFULibrary = _unitOfWork.MW_RFULibraryRepository.GetIncludeWhere(x => x.Id == MW_RFU.MwRFULibraryId, x => x.boardType, x => x.diversityType).FirstOrDefault();
                                    var MW_RFULibraryMap = _mapper.Map<MW_RFULibraryViewModel>(MW_RFULibrary);
                                    List<TLIdynamicAttLibValue> DynamicAttLibRecords = _unitOfWork.DynamicAttLibRepository.GetIncludeWhere(x => (
                                        x.DynamicAtt.disable == false && x.DynamicAtt.tablesNames.TableName == "TLImwRFULibrary" &&
                                        x.InventoryId == MW_RFU.MwRFULibraryId && x.DynamicAtt.LibraryAtt),
                                        x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();
                                    foreach (var DynamicAttLibRecord in DynamicAttLibRecords)
                                    {
                                        var DynamicAttDtoObject = GetDynamicAttDto(null, DynamicAttLibRecord);
                                        DynamicAttListCopy.Add(DynamicAttDtoObject);
                                    }
                                    MW_RFUListToAddToModel.Add(new MWRFULoadDto()
                                    {
                                        MW_RFU = MW_RFUMap,
                                        MW_RFULibrary = MW_RFULibraryMap,
                                        DynamicAttList = DynamicAttListCopy
                                    });
                                    loadsDtos.MW_RFUs = MW_RFUListToAddToModel;

                                }

                            }
                            else if (PartName == "MW" && TypeName == "TLImwODU")
                            {
                                if (allLoadsInst.mwODUId != null)
                                {
                                    List<DynamicAttDto> DynamicAttListCopy = new List<DynamicAttDto>();

                                    // Installation Object + Dynamic Attributes For This Installation Object..
                                    var MW_ODU = _unitOfWork.MW_ODURepository.GetIncludeWhere(x => x.Id == allLoadsInst.mwODUId, x => x.Owner, x => x.MwODULibrary, x => x.Mw_Dish, x => x.OduInstallationType).FirstOrDefault();
                                    var MW_ODUMap = _mapper.Map<MW_ODUViewModel>(MW_ODU);
                                    var DynamicAttInstValueRecords = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x => (x.DynamicAtt.disable == false &&
                                        x.DynamicAtt.tablesNames.TableName == "TLImwODU" &&
                                        x.InventoryId == MW_ODU.Id &&
                                        !x.DynamicAtt.LibraryAtt), x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();
                                    foreach (var DynamicAttInstValueRecord in DynamicAttInstValueRecords)
                                    {
                                        var DynamicAttDtoObject = GetDynamicAttDto(DynamicAttInstValueRecord, null);
                                        DynamicAttListCopy.Add(DynamicAttDtoObject);
                                    }

                                    // Library Object + Dynamic Attributes For This Library Object..
                                    var MW_ODULibrary = _unitOfWork.MW_ODULibraryRepository.GetIncludeWhere(x => x.Id == MW_ODU.MwODULibraryId, x => x.parity).FirstOrDefault();
                                    var MW_ODULibraryMap = _mapper.Map<MW_ODULibraryViewModel>(MW_ODULibrary);
                                    var DynamicAttLibRecords = _unitOfWork.DynamicAttLibRepository.GetIncludeWhere(x => (
                                        x.DynamicAtt.disable == false && x.DynamicAtt.tablesNames.TableName == "TLImwODULibrary" &&
                                        x.InventoryId == MW_ODU.MwODULibraryId && x.DynamicAtt.LibraryAtt),
                                        x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();
                                    foreach (var DynamicAttLibRecord in DynamicAttLibRecords)
                                    {
                                        var DynamicAttDtoObject = GetDynamicAttDto(null, DynamicAttLibRecord);
                                        DynamicAttListCopy.Add(DynamicAttDtoObject);
                                    }
                                    MW_ODUListToAddToModel.Add(new MWODULoadDto()
                                    {
                                        MW_ODU = MW_ODUMap,
                                        MW_ODULibrary = MW_ODULibraryMap,
                                        DynamicAttList = DynamicAttListCopy
                                    });
                                    loadsDtos.MW_ODUs = MW_ODUListToAddToModel;
                                }
                            }
                            else if (PartName == "MW" && TypeName == "TLImwDish")
                            {
                                if (allLoadsInst.mwDishId != null)
                                {
                                    List<DynamicAttDto> DynamicAttListCopy = new List<DynamicAttDto>();

                                    // Installation Object + Dynamic Attributes For This Installation Object..
                                    var MW_Dish = _unitOfWork.MW_DishRepository.GetIncludeWhere(x => x.Id == allLoadsInst.mwDishId, x => x.InstallationPlace, x => x.ItemConnectTo, x => x.MwDishLibrary, x => x.owner, x => x.PolarityOnLocation, x => x.RepeaterType).FirstOrDefault();
                                    var MW_DishMap = _mapper.Map<MW_DishViewModel>(MW_Dish);
                                    var DynamicAttInstValueRecords = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x => (x.DynamicAtt.disable == false &&
                                        x.DynamicAtt.tablesNames.TableName == "TLImwDish" &&
                                        x.InventoryId == MW_Dish.Id &&
                                        !x.DynamicAtt.LibraryAtt), x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                                    foreach (var DynamicAttInstValueRecord in DynamicAttInstValueRecords)
                                    {
                                        var DynamicAttDtoObject = GetDynamicAttDto(DynamicAttInstValueRecord, null);
                                        DynamicAttListCopy.Add(DynamicAttDtoObject);
                                    }

                                    // Library Object + Dynamic Attributes For This Library Object..
                                    var MW_DishLibrary = _unitOfWork.MW_DishLibraryRepository.GetIncludeWhere(x => x.Id == MW_Dish.MwDishLibraryId, x => x.asType, x => x.polarityType).FirstOrDefault();
                                    var MW_DishLibraryMap = _mapper.Map<MW_DishLibraryViewModel>(MW_DishLibrary);
                                    var DynamicAttLibRecords = _unitOfWork.DynamicAttLibRepository.GetIncludeWhere(x => (
                                        x.DynamicAtt.disable == false && x.DynamicAtt.tablesNames.TableName == "TLImwDishLibrary" &&
                                        x.InventoryId == MW_Dish.MwDishLibraryId && x.DynamicAtt.LibraryAtt),
                                        x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();
                                    foreach (var DynamicAttLibRecord in DynamicAttLibRecords)
                                    {
                                        var DynamicAttDtoObject = GetDynamicAttDto(null, DynamicAttLibRecord);
                                        DynamicAttListCopy.Add(DynamicAttDtoObject);
                                    }
                                    MW_DishListToAddToModel.Add(new MWDishLoadDto()
                                    {
                                        MW_Dish = MW_DishMap,
                                        MW_DishLibrary = MW_DishLibraryMap,
                                        DynamicAttList = DynamicAttListCopy
                                    });
                                    loadsDtos.MW_Dishes = MW_DishListToAddToModel;
                                }
                            }
                            else if (PartName == "MW" && TypeName == "TLImwBU")
                            {
                                if (allLoadsInst.mwBUId != null)
                                {
                                    List<DynamicAttDto> DynamicAttListCopy = new List<DynamicAttDto>();

                                    // Installation Object + Dynamic Attributes For This Installation Object..
                                    var MW_BU = _unitOfWork.MW_BURepository.GetIncludeWhere(x => x.Id == allLoadsInst.mwBUId, x => x.baseBU, x => x.InstallationPlace, x => x.MwBULibrary, x => x.MainDish, x => x.MwPort, x => x.Owner).FirstOrDefault();
                                    var MW_BUMap = _mapper.Map<MW_BUViewModel>(MW_BU);
                                    var DynamicAttInstValueRecords = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x => (x.DynamicAtt.disable == false &&
                                        x.DynamicAtt.tablesNames.TableName == "TLImwBU" &&
                                        x.InventoryId == MW_BU.Id &&
                                        !x.DynamicAtt.LibraryAtt), x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                                    foreach (var DynamicAttInstValueRecord in DynamicAttInstValueRecords)
                                    {
                                        var DynamicAttDtoObject = GetDynamicAttDto(DynamicAttInstValueRecord, null);
                                        DynamicAttListCopy.Add(DynamicAttDtoObject);
                                    }

                                    // Library Object + Dynamic Attributes For This Library Object..
                                    var MW_BULibrary = _unitOfWork.MW_BULibraryRepository.GetIncludeWhere(x => x.Id == MW_BU.MwBULibraryId, x => x.diversityType).FirstOrDefault();
                                    var MW_BULibraryMap = _mapper.Map<MW_BULibraryViewModel>(MW_BULibrary);
                                    var DynamicAttLibRecords = _unitOfWork.DynamicAttLibRepository.GetIncludeWhere(x => (
                                        x.DynamicAtt.disable == false && x.DynamicAtt.tablesNames.TableName == "TLImwBULibrary" &&
                                        x.InventoryId == MW_BU.MwBULibraryId && x.DynamicAtt.LibraryAtt),
                                        x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();
                                    foreach (var DynamicAttLibRecord in DynamicAttLibRecords)
                                    {
                                        var DynamicAttDtoObject = GetDynamicAttDto(null, DynamicAttLibRecord);
                                        DynamicAttListCopy.Add(DynamicAttDtoObject);
                                    }
                                    MW_BUListToAddToModel.Add(new MWBULoadDto()
                                    {
                                        MW_BU = MW_BUMap,
                                        MW_BULibrary = MW_BULibraryMap,
                                        DynamicAttList = DynamicAttListCopy
                                    });

                                    loadsDtos.MW_BUs = MW_BUListToAddToModel;

                                }
                            }
                            else if (PartName == "MW" && TypeName == "TLImwOther")
                            {
                                if (allLoadsInst.mwOtherId != null)
                                {
                                    List<DynamicAttDto> DynamicAttListCopy = new List<DynamicAttDto>();

                                    // Installation Object + Dynamic Attributes For This Installation Object..
                                    var MWOther = _unitOfWork.Mw_OtherRepository.GetIncludeWhere(x => x.Id == allLoadsInst.mwOtherId, x => x.InstallationPlace, x => x.mwOtherLibrary).FirstOrDefault();
                                    var MWOtherMap = _mapper.Map<Mw_OtherViewModel>(MWOther);
                                    var DynamicAttInstValueRecords = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x => (x.DynamicAtt.disable == false &&
                                        x.DynamicAtt.tablesNames.TableName == "TLImwOther" &&
                                        x.InventoryId == MWOther.Id &&
                                        !x.DynamicAtt.LibraryAtt), x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                                    foreach (var DynamicAttInstValueRecord in DynamicAttInstValueRecords)
                                    {
                                        var DynamicAttDtoObject = GetDynamicAttDto(DynamicAttInstValueRecord, null);
                                        DynamicAttListCopy.Add(DynamicAttDtoObject);
                                    }

                                    // Library Object + Dynamic Attributes For This Library Object..
                                    var MWOtherLibrary = _unitOfWork.MW_OtherLibraryRepository.GetIncludeWhere(x => x.Id == MWOther.mwOtherLibraryId).FirstOrDefault();
                                    var MWOtherLibraryMap = _mapper.Map<MW_OtherLibraryViewModel>(MWOtherLibrary);
                                    List<TLIdynamicAttLibValue> DynamicAttLibRecords = _unitOfWork.DynamicAttLibRepository.GetIncludeWhere(x => (
                                        x.DynamicAtt.disable == false && x.DynamicAtt.tablesNames.TableName == "TLImwOtherLibrary" &&
                                        x.InventoryId == MWOther.mwOtherLibraryId && x.DynamicAtt.LibraryAtt),
                                        x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();
                                    foreach (var DynamicAttLibRecord in DynamicAttLibRecords)
                                    {
                                        var DynamicAttDtoObject = GetDynamicAttDto(null, DynamicAttLibRecord);
                                        DynamicAttListCopy.Add(DynamicAttDtoObject);
                                    }
                                    MW_OtherListToAddToModel.Add(new MWOtherLoadDto()
                                    {
                                        MWOther = MWOtherMap,
                                        MWOtherLibrary = MWOtherLibraryMap,
                                        DynamicAttList = DynamicAttListCopy
                                    });
                                    loadsDtos.MW_Others = MW_OtherListToAddToModel;
                                }
                            }
                            else if (PartName == null && TypeName == "TLImwRFU")
                            {
                                if (allLoadsInst.mwRFUId != null)
                                {
                                    List<DynamicAttDto> DynamicAttListCopy = new List<DynamicAttDto>();

                                    // Installation Object + Dynamic Attributes For This Installation Object..
                                    var MW_RFU = _unitOfWork.MW_RFURepository.GetIncludeWhere(x => x.Id == allLoadsInst.mwRFUId, x => x.MwPort, x => x.MwRFULibrary, x => x.Owner).FirstOrDefault();
                                    var MW_RFUMap = _mapper.Map<MW_RFUViewModel>(MW_RFU);
                                    var DynamicAttInstValueRecords = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x => (x.DynamicAtt.disable == false &&
                                        x.DynamicAtt.tablesNames.TableName == "TLImwRFU" &&
                                        x.InventoryId == MW_RFU.Id &&
                                        !x.DynamicAtt.LibraryAtt), x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                                    foreach (var DynamicAttInstValueRecord in DynamicAttInstValueRecords)
                                    {
                                        var DynamicAttDtoObject = GetDynamicAttDto(DynamicAttInstValueRecord, null);
                                        DynamicAttListCopy.Add(DynamicAttDtoObject);
                                    }

                                    // Library Object + Dynamic Attributes For This Library Object..
                                    var MW_RFULibrary = _unitOfWork.MW_RFULibraryRepository.GetIncludeWhere(x => x.Id == MW_RFU.MwRFULibraryId, x => x.boardType, x => x.diversityType).FirstOrDefault();
                                    var MW_RFULibraryMap = _mapper.Map<MW_RFULibraryViewModel>(MW_RFULibrary);
                                    List<TLIdynamicAttLibValue> DynamicAttLibRecords = _unitOfWork.DynamicAttLibRepository.GetIncludeWhere(x => (
                                        x.DynamicAtt.disable == false && x.DynamicAtt.tablesNames.TableName == "TLImwRFULibrary" &&
                                        x.InventoryId == MW_RFU.MwRFULibraryId && x.DynamicAtt.LibraryAtt),
                                        x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();
                                    foreach (var DynamicAttLibRecord in DynamicAttLibRecords)
                                    {
                                        var DynamicAttDtoObject = GetDynamicAttDto(null, DynamicAttLibRecord);
                                        DynamicAttListCopy.Add(DynamicAttDtoObject);
                                    }
                                    MW_RFUListToAddToModel.Add(new MWRFULoadDto()
                                    {
                                        MW_RFU = MW_RFUMap,
                                        MW_RFULibrary = MW_RFULibraryMap,
                                        DynamicAttList = DynamicAttListCopy
                                    });
                                    loadsDtos.MW_RFUs = MW_RFUListToAddToModel;

                                }

                            }
                            else if (PartName == null && TypeName == "TLImwODU")
                            {
                                if (allLoadsInst.mwODUId != null)
                                {
                                    List<DynamicAttDto> DynamicAttListCopy = new List<DynamicAttDto>();

                                    // Installation Object + Dynamic Attributes For This Installation Object..
                                    var MW_ODU = _unitOfWork.MW_ODURepository.GetIncludeWhere(x => x.Id == allLoadsInst.mwODUId, x => x.Owner, x => x.MwODULibrary, x => x.Mw_Dish, x => x.OduInstallationType).FirstOrDefault();
                                    var MW_ODUMap = _mapper.Map<MW_ODUViewModel>(MW_ODU);
                                    var DynamicAttInstValueRecords = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x => (x.DynamicAtt.disable == false &&
                                        x.DynamicAtt.tablesNames.TableName == "TLImwODU" &&
                                        x.InventoryId == MW_ODU.Id &&
                                        !x.DynamicAtt.LibraryAtt), x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();
                                    foreach (var DynamicAttInstValueRecord in DynamicAttInstValueRecords)
                                    {
                                        var DynamicAttDtoObject = GetDynamicAttDto(DynamicAttInstValueRecord, null);
                                        DynamicAttListCopy.Add(DynamicAttDtoObject);
                                    }

                                    // Library Object + Dynamic Attributes For This Library Object..
                                    var MW_ODULibrary = _unitOfWork.MW_ODULibraryRepository.GetIncludeWhere(x => x.Id == MW_ODU.MwODULibraryId, x => x.parity).FirstOrDefault();
                                    var MW_ODULibraryMap = _mapper.Map<MW_ODULibraryViewModel>(MW_ODULibrary);
                                    var DynamicAttLibRecords = _unitOfWork.DynamicAttLibRepository.GetIncludeWhere(x => (
                                        x.DynamicAtt.disable == false && x.DynamicAtt.tablesNames.TableName == "TLImwODULibrary" &&
                                        x.InventoryId == MW_ODU.MwODULibraryId && x.DynamicAtt.LibraryAtt),
                                        x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();
                                    foreach (var DynamicAttLibRecord in DynamicAttLibRecords)
                                    {
                                        var DynamicAttDtoObject = GetDynamicAttDto(null, DynamicAttLibRecord);
                                        DynamicAttListCopy.Add(DynamicAttDtoObject);
                                    }
                                    MW_ODUListToAddToModel.Add(new MWODULoadDto()
                                    {
                                        MW_ODU = MW_ODUMap,
                                        MW_ODULibrary = MW_ODULibraryMap,
                                        DynamicAttList = DynamicAttListCopy
                                    });
                                    loadsDtos.MW_ODUs = MW_ODUListToAddToModel;
                                }
                            }
                            else if (PartName == null && TypeName == "TLImwDish")
                            {
                                if (allLoadsInst.mwDishId != null)
                                {
                                    List<DynamicAttDto> DynamicAttListCopy = new List<DynamicAttDto>();

                                    // Installation Object + Dynamic Attributes For This Installation Object..
                                    var MW_Dish = _unitOfWork.MW_DishRepository.GetIncludeWhere(x => x.Id == allLoadsInst.mwDishId, x => x.InstallationPlace, x => x.ItemConnectTo, x => x.MwDishLibrary, x => x.owner, x => x.PolarityOnLocation, x => x.RepeaterType).FirstOrDefault();
                                    var MW_DishMap = _mapper.Map<MW_DishViewModel>(MW_Dish);
                                    var DynamicAttInstValueRecords = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x => (x.DynamicAtt.disable == false &&
                                        x.DynamicAtt.tablesNames.TableName == "TLImwDish" &&
                                        x.InventoryId == MW_Dish.Id &&
                                        !x.DynamicAtt.LibraryAtt), x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                                    foreach (var DynamicAttInstValueRecord in DynamicAttInstValueRecords)
                                    {
                                        var DynamicAttDtoObject = GetDynamicAttDto(DynamicAttInstValueRecord, null);
                                        DynamicAttListCopy.Add(DynamicAttDtoObject);
                                    }

                                    // Library Object + Dynamic Attributes For This Library Object..
                                    var MW_DishLibrary = _unitOfWork.MW_DishLibraryRepository.GetIncludeWhere(x => x.Id == MW_Dish.MwDishLibraryId, x => x.asType, x => x.polarityType).FirstOrDefault();
                                    var MW_DishLibraryMap = _mapper.Map<MW_DishLibraryViewModel>(MW_DishLibrary);
                                    var DynamicAttLibRecords = _unitOfWork.DynamicAttLibRepository.GetIncludeWhere(x => (
                                        x.DynamicAtt.disable == false && x.DynamicAtt.tablesNames.TableName == "TLImwDishLibrary" &&
                                        x.InventoryId == MW_Dish.MwDishLibraryId && x.DynamicAtt.LibraryAtt),
                                        x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();
                                    foreach (var DynamicAttLibRecord in DynamicAttLibRecords)
                                    {
                                        var DynamicAttDtoObject = GetDynamicAttDto(null, DynamicAttLibRecord);
                                        DynamicAttListCopy.Add(DynamicAttDtoObject);
                                    }
                                    MW_DishListToAddToModel.Add(new MWDishLoadDto()
                                    {
                                        MW_Dish = MW_DishMap,
                                        MW_DishLibrary = MW_DishLibraryMap,
                                        DynamicAttList = DynamicAttListCopy
                                    });
                                    loadsDtos.MW_Dishes = MW_DishListToAddToModel;
                                }
                            }
                            else if (PartName == null && TypeName == "TLImwBU")
                            {
                                if (allLoadsInst.mwBUId != null)
                                {
                                    List<DynamicAttDto> DynamicAttListCopy = new List<DynamicAttDto>();

                                    // Installation Object + Dynamic Attributes For This Installation Object..
                                    var MW_BU = _unitOfWork.MW_BURepository.GetIncludeWhere(x => x.Id == allLoadsInst.mwBUId, x => x.baseBU, x => x.InstallationPlace, x => x.MwBULibrary, x => x.MainDish, x => x.MwPort, x => x.Owner).FirstOrDefault();
                                    var MW_BUMap = _mapper.Map<MW_BUViewModel>(MW_BU);
                                    var DynamicAttInstValueRecords = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x => (x.DynamicAtt.disable == false &&
                                        x.DynamicAtt.tablesNames.TableName == "TLImwBU" &&
                                        x.InventoryId == MW_BU.Id &&
                                        !x.DynamicAtt.LibraryAtt), x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                                    foreach (var DynamicAttInstValueRecord in DynamicAttInstValueRecords)
                                    {
                                        var DynamicAttDtoObject = GetDynamicAttDto(DynamicAttInstValueRecord, null);
                                        DynamicAttListCopy.Add(DynamicAttDtoObject);
                                    }

                                    // Library Object + Dynamic Attributes For This Library Object..
                                    var MW_BULibrary = _unitOfWork.MW_BULibraryRepository.GetIncludeWhere(x => x.Id == MW_BU.MwBULibraryId, x => x.diversityType).FirstOrDefault();
                                    var MW_BULibraryMap = _mapper.Map<MW_BULibraryViewModel>(MW_BULibrary);
                                    var DynamicAttLibRecords = _unitOfWork.DynamicAttLibRepository.GetIncludeWhere(x => (
                                        x.DynamicAtt.disable == false && x.DynamicAtt.tablesNames.TableName == "TLImwBULibrary" &&
                                        x.InventoryId == MW_BU.MwBULibraryId && x.DynamicAtt.LibraryAtt),
                                        x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();
                                    foreach (var DynamicAttLibRecord in DynamicAttLibRecords)
                                    {
                                        var DynamicAttDtoObject = GetDynamicAttDto(null, DynamicAttLibRecord);
                                        DynamicAttListCopy.Add(DynamicAttDtoObject);
                                    }
                                    MW_BUListToAddToModel.Add(new MWBULoadDto()
                                    {
                                        MW_BU = MW_BUMap,
                                        MW_BULibrary = MW_BULibraryMap,
                                        DynamicAttList = DynamicAttListCopy
                                    });

                                    loadsDtos.MW_BUs = MW_BUListToAddToModel;

                                }
                            }
                            else if (PartName == null && TypeName == "TLImwOther")
                            {
                                if (allLoadsInst.mwOtherId != null)
                                {
                                    List<DynamicAttDto> DynamicAttListCopy = new List<DynamicAttDto>();

                                    // Installation Object + Dynamic Attributes For This Installation Object..
                                    var MWOther = _unitOfWork.Mw_OtherRepository.GetIncludeWhere(x => x.Id == allLoadsInst.mwOtherId, x => x.InstallationPlace, x => x.mwOtherLibrary).FirstOrDefault();
                                    var MWOtherMap = _mapper.Map<Mw_OtherViewModel>(MWOther);
                                    var DynamicAttInstValueRecords = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x => (x.DynamicAtt.disable == false &&
                                        x.DynamicAtt.tablesNames.TableName == "TLImwOther" &&
                                        x.InventoryId == MWOther.Id &&
                                        !x.DynamicAtt.LibraryAtt), x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                                    foreach (var DynamicAttInstValueRecord in DynamicAttInstValueRecords)
                                    {
                                        var DynamicAttDtoObject = GetDynamicAttDto(DynamicAttInstValueRecord, null);
                                        DynamicAttListCopy.Add(DynamicAttDtoObject);
                                    }

                                    // Library Object + Dynamic Attributes For This Library Object..
                                    var MWOtherLibrary = _unitOfWork.MW_OtherLibraryRepository.GetIncludeWhere(x => x.Id == MWOther.mwOtherLibraryId).FirstOrDefault();
                                    var MWOtherLibraryMap = _mapper.Map<MW_OtherLibraryViewModel>(MWOtherLibrary);
                                    List<TLIdynamicAttLibValue> DynamicAttLibRecords = _unitOfWork.DynamicAttLibRepository.GetIncludeWhere(x => (
                                        x.DynamicAtt.disable == false && x.DynamicAtt.tablesNames.TableName == "TLImwOtherLibrary" &&
                                        x.InventoryId == MWOther.mwOtherLibraryId && x.DynamicAtt.LibraryAtt),
                                        x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();
                                    foreach (var DynamicAttLibRecord in DynamicAttLibRecords)
                                    {
                                        var DynamicAttDtoObject = GetDynamicAttDto(null, DynamicAttLibRecord);
                                        DynamicAttListCopy.Add(DynamicAttDtoObject);
                                    }
                                    MW_OtherListToAddToModel.Add(new MWOtherLoadDto()
                                    {
                                        MWOther = MWOtherMap,
                                        MWOtherLibrary = MWOtherLibraryMap,
                                        DynamicAttList = DynamicAttListCopy
                                    });
                                    loadsDtos.MW_Others = MW_OtherListToAddToModel;
                                }
                            }

                        }
                        else if (allLoadsInst.radioAntennaId != null || allLoadsInst.radioRRUId != null || allLoadsInst.radioOtherId != null)
                        {
                            if (PartName == "Radio" && TypeName == null)
                            {
                                if (allLoadsInst.radioAntennaId != null)
                                {
                                    List<DynamicAttDto> DynamicAttListCopy = new List<DynamicAttDto>();

                                    // Installation Object + Dynamic Attributes For This Installation Object..
                                    var RadioAntenna = _unitOfWork.RadioAntennaRepository.GetIncludeWhere(x => x.Id == allLoadsInst.radioAntennaId, x => x.installationPlace, x => x.owner, x => x.radioAntennaLibrary).FirstOrDefault();
                                    var RadioAntennaMap = _mapper.Map<RadioAntennaViewModel>(RadioAntenna);
                                    var DynamicAttInstValueRecords = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x => (x.DynamicAtt.disable == false &&
                                        x.DynamicAtt.tablesNames.TableName == "TLIradioAntenna" &&
                                        x.InventoryId == RadioAntenna.Id &&
                                        !x.DynamicAtt.LibraryAtt), x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                                    foreach (var DynamicAttInstValueRecord in DynamicAttInstValueRecords)
                                    {
                                        var DynamicAttDtoObject = GetDynamicAttDto(DynamicAttInstValueRecord, null);
                                        DynamicAttListCopy.Add(DynamicAttDtoObject);
                                    }

                                    // Library Object + Dynamic Attributes For This Library Object..
                                    var RadioAntennaLibrary = _unitOfWork.RadioAntennaLibraryRepository.GetIncludeWhere(x => x.Id == RadioAntenna.radioAntennaLibraryId).FirstOrDefault();
                                    var RadioAntennaLibraryMap = _mapper.Map<RadioAntennaLibraryViewModel>(RadioAntennaLibrary);
                                    var DynamicAttLibRecords = _unitOfWork.DynamicAttLibRepository.GetIncludeWhere(x => (
                                        x.DynamicAtt.disable == false && x.DynamicAtt.tablesNames.TableName == "TLIradioAntennaLibrary" &&
                                        x.InventoryId == RadioAntenna.radioAntennaLibraryId && x.DynamicAtt.LibraryAtt),
                                        x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();
                                    foreach (var DynamicAttLibRecord in DynamicAttLibRecords)
                                    {
                                        var DynamicAttDtoObject = GetDynamicAttDto(null, DynamicAttLibRecord);
                                        DynamicAttListCopy.Add(DynamicAttDtoObject);
                                    }
                                    RadioAntennaListToAddToModel.Add(new RadioAntennaLoadDto()
                                    {
                                        RadioAntenna = RadioAntennaMap,
                                        RadioAntennaLibrary = RadioAntennaLibraryMap,
                                        DynamicAttList = DynamicAttListCopy
                                    });
                                    loadsDtos.RadioAntennas = RadioAntennaListToAddToModel;
                                }
                                else if (allLoadsInst.radioRRUId != null)
                                {
                                    List<DynamicAttDto> DynamicAttListCopy = new List<DynamicAttDto>();

                                    // Installation Object + Dynamic Attributes For This Installation Object..
                                    var RadioRRU = _unitOfWork.RadioRRURepository.GetIncludeWhere(x => x.Id == allLoadsInst.radioRRUId, x => x.installationPlace, x => x.owner, x => x.radioAntenna, x => x.radioRRULibrary).FirstOrDefault();
                                    var RadioRRUMap = _mapper.Map<RadioRRUViewModel>(RadioRRU);
                                    var DynamicAttInstValueRecords = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x => (x.DynamicAtt.disable == false &&
                                        x.DynamicAtt.tablesNames.TableName == "TLIradioRRU" &&
                                        x.InventoryId == RadioRRU.Id &&
                                        !x.DynamicAtt.LibraryAtt), x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                                    foreach (var DynamicAttInstValueRecord in DynamicAttInstValueRecords)
                                    {
                                        var DynamicAttDtoObject = GetDynamicAttDto(DynamicAttInstValueRecord, null);
                                        DynamicAttListCopy.Add(DynamicAttDtoObject);
                                    }

                                    // Library Object + Dynamic Attributes For This Library Object..
                                    var RadioRRULibrary = _unitOfWork.RadioRRULibraryRepository.GetIncludeWhere(x => x.Id == RadioRRU.radioRRULibraryId).FirstOrDefault();
                                    var RadioRRULibraryMap = _mapper.Map<RadioRRULibraryViewModel>(RadioRRULibrary);
                                    var DynamicAttLibRecords = _unitOfWork.DynamicAttLibRepository.GetIncludeWhere(x => (
                                        x.DynamicAtt.disable == false && x.DynamicAtt.tablesNames.TableName == "TLIradioRRULibrary" &&
                                        x.InventoryId == RadioRRU.radioRRULibraryId && x.DynamicAtt.LibraryAtt),
                                        x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();
                                    foreach (var DynamicAttLibRecord in DynamicAttLibRecords)
                                    {
                                        var DynamicAttDtoObject = GetDynamicAttDto(null, DynamicAttLibRecord);
                                        DynamicAttListCopy.Add(DynamicAttDtoObject);
                                    }
                                    RadioRRUListToAddToModel.Add(new RadioRRULoadDto()
                                    {
                                        RadioRRU = RadioRRUMap,
                                        RadioRRULibrary = RadioRRULibraryMap,
                                        DynamicAttList = DynamicAttListCopy
                                    });
                                    loadsDtos.RadioRRUS = RadioRRUListToAddToModel;
                                }
                                else if (allLoadsInst.radioOtherId != null)
                                {
                                    List<DynamicAttDto> DynamicAttListCopy = new List<DynamicAttDto>();

                                    // Installation Object + Dynamic Attributes For This Installation Object..
                                    var RadioOther = _unitOfWork.RadioOtherRepository.GetIncludeWhere(x => x.Id == allLoadsInst.radioOtherId.Value, x => x.owner, x => x.installationPlace, x => x.radioOtherLibrary).FirstOrDefault();
                                    var RadioOtherMap = _mapper.Map<RadioOtherViewModel>(RadioOther);
                                    var DynamicAttInstValueRecords = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x => (x.DynamicAtt.disable == false &&
                                        x.DynamicAtt.tablesNames.TableName == "TLIradioOther" &&
                                        x.InventoryId == RadioOther.Id &&
                                        !x.DynamicAtt.LibraryAtt), x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                                    foreach (var DynamicAttInstValueRecord in DynamicAttInstValueRecords)
                                    {
                                        var DynamicAttDtoObject = GetDynamicAttDto(DynamicAttInstValueRecord, null);
                                        DynamicAttListCopy.Add(DynamicAttDtoObject);
                                    }

                                    // Library Object + Dynamic Attributes For This Library Object..
                                    var RadioOtherLibrary = _unitOfWork.RadioOtherLibraryRepository.GetIncludeWhereFirst(x => x.Id == RadioOther.radioOtherLibraryId);
                                    var RadioOtherLibraryMap = _mapper.Map<RadioOtherLibraryViewModel>(RadioOtherLibrary);
                                    var DynamicAttLibRecords = _unitOfWork.DynamicAttLibRepository.GetIncludeWhere(x => (
                                        x.DynamicAtt.disable == false && x.DynamicAtt.tablesNames.TableName == "TLIradioOtherLibrary" &&
                                        x.InventoryId == RadioOther.radioOtherLibraryId && x.DynamicAtt.LibraryAtt),
                                        x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();
                                    foreach (var DynamicAttLibRecord in DynamicAttLibRecords)
                                    {
                                        var DynamicAttDtoObject = GetDynamicAttDto(null, DynamicAttLibRecord);
                                        DynamicAttListCopy.Add(DynamicAttDtoObject);
                                    }
                                    RadioOtherUListToAddToModel.Add(new RadioOtherLoadDto()
                                    {
                                        RadioOther = RadioOtherMap,
                                        RadioOtherLibrary = RadioOtherLibraryMap,
                                        DynamicAttList = DynamicAttListCopy
                                    });
                                    loadsDtos.RadioOtherS = RadioOtherUListToAddToModel;
                                }
                            }
                            else if (PartName == "Radio" && TypeName == "TLIradioOther")
                            {
                                if (allLoadsInst.radioOtherId != null)
                                {
                                    List<DynamicAttDto> DynamicAttListCopy = new List<DynamicAttDto>();

                                    // Installation Object + Dynamic Attributes For This Installation Object..
                                    var RadioOther = _unitOfWork.RadioOtherRepository.GetIncludeWhere(x => x.Id == allLoadsInst.radioOtherId.Value, x => x.owner, x => x.installationPlace, x => x.radioOtherLibrary).FirstOrDefault();
                                    var RadioOtherMap = _mapper.Map<RadioOtherViewModel>(RadioOther);
                                    var DynamicAttInstValueRecords = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x => (x.DynamicAtt.disable == false &&
                                        x.DynamicAtt.tablesNames.TableName == "TLIradioOther" &&
                                        x.InventoryId == RadioOther.Id &&
                                        !x.DynamicAtt.LibraryAtt), x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                                    foreach (var DynamicAttInstValueRecord in DynamicAttInstValueRecords)
                                    {
                                        var DynamicAttDtoObject = GetDynamicAttDto(DynamicAttInstValueRecord, null);
                                        DynamicAttListCopy.Add(DynamicAttDtoObject);
                                    }

                                    // Library Object + Dynamic Attributes For This Library Object..
                                    var RadioOtherLibrary = _unitOfWork.RadioOtherLibraryRepository.GetIncludeWhereFirst(x => x.Id == RadioOther.radioOtherLibraryId);
                                    var RadioOtherLibraryMap = _mapper.Map<RadioOtherLibraryViewModel>(RadioOtherLibrary);
                                    var DynamicAttLibRecords = _unitOfWork.DynamicAttLibRepository.GetIncludeWhere(x => (
                                        x.DynamicAtt.disable == false && x.DynamicAtt.tablesNames.TableName == "TLIradioOtherLibrary" &&
                                        x.InventoryId == RadioOther.radioOtherLibraryId && x.DynamicAtt.LibraryAtt),
                                        x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();
                                    foreach (var DynamicAttLibRecord in DynamicAttLibRecords)
                                    {
                                        var DynamicAttDtoObject = GetDynamicAttDto(null, DynamicAttLibRecord);
                                        DynamicAttListCopy.Add(DynamicAttDtoObject);
                                    }
                                    RadioOtherUListToAddToModel.Add(new RadioOtherLoadDto()
                                    {
                                        RadioOther = RadioOtherMap,
                                        RadioOtherLibrary = RadioOtherLibraryMap,
                                        DynamicAttList = DynamicAttListCopy
                                    });
                                    loadsDtos.RadioOtherS = RadioOtherUListToAddToModel;
                                }
                            }
                            else if (PartName == "Radio" && TypeName == "TLIradioRRU")
                            {
                                if (allLoadsInst.radioRRUId != null)
                                {
                                    List<DynamicAttDto> DynamicAttListCopy = new List<DynamicAttDto>();

                                    // Installation Object + Dynamic Attributes For This Installation Object..
                                    var RadioRRU = _unitOfWork.RadioRRURepository.GetIncludeWhere(x => x.Id == allLoadsInst.radioRRUId, x => x.installationPlace, x => x.owner, x => x.radioAntenna, x => x.radioRRULibrary).FirstOrDefault();
                                    var RadioRRUMap = _mapper.Map<RadioRRUViewModel>(RadioRRU);
                                    var DynamicAttInstValueRecords = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x => (x.DynamicAtt.disable == false &&
                                        x.DynamicAtt.tablesNames.TableName == "TLIradioRRU" &&
                                        x.InventoryId == RadioRRU.Id &&
                                        !x.DynamicAtt.LibraryAtt), x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                                    foreach (var DynamicAttInstValueRecord in DynamicAttInstValueRecords)
                                    {
                                        var DynamicAttDtoObject = GetDynamicAttDto(DynamicAttInstValueRecord, null);
                                        DynamicAttListCopy.Add(DynamicAttDtoObject);
                                    }

                                    // Library Object + Dynamic Attributes For This Library Object..
                                    var RadioRRULibrary = _unitOfWork.RadioRRULibraryRepository.GetIncludeWhere(x => x.Id == RadioRRU.radioRRULibraryId).FirstOrDefault();
                                    var RadioRRULibraryMap = _mapper.Map<RadioRRULibraryViewModel>(RadioRRULibrary);
                                    var DynamicAttLibRecords = _unitOfWork.DynamicAttLibRepository.GetIncludeWhere(x => (
                                        x.DynamicAtt.disable == false && x.DynamicAtt.tablesNames.TableName == "TLIradioRRULibrary" &&
                                        x.InventoryId == RadioRRU.radioRRULibraryId && x.DynamicAtt.LibraryAtt),
                                        x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();
                                    foreach (var DynamicAttLibRecord in DynamicAttLibRecords)
                                    {
                                        var DynamicAttDtoObject = GetDynamicAttDto(null, DynamicAttLibRecord);
                                        DynamicAttListCopy.Add(DynamicAttDtoObject);
                                    }
                                    RadioRRUListToAddToModel.Add(new RadioRRULoadDto()
                                    {
                                        RadioRRU = RadioRRUMap,
                                        RadioRRULibrary = RadioRRULibraryMap,
                                        DynamicAttList = DynamicAttListCopy
                                    });
                                    loadsDtos.RadioRRUS = RadioRRUListToAddToModel;
                                }
                            }
                            else if (PartName == "Radio" && TypeName == "TLIradioAntenna")
                            {
                                if (allLoadsInst.radioAntennaId != null)
                                {
                                    List<DynamicAttDto> DynamicAttListCopy = new List<DynamicAttDto>();

                                    // Installation Object + Dynamic Attributes For This Installation Object..
                                    var RadioAntenna = _unitOfWork.RadioAntennaRepository.GetIncludeWhere(x => x.Id == allLoadsInst.radioAntennaId, x => x.installationPlace, x => x.owner, x => x.radioAntennaLibrary).FirstOrDefault();
                                    var RadioAntennaMap = _mapper.Map<RadioAntennaViewModel>(RadioAntenna);
                                    var DynamicAttInstValueRecords = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x => (x.DynamicAtt.disable == false &&
                                        x.DynamicAtt.tablesNames.TableName == "TLIradioAntenna" &&
                                        x.InventoryId == RadioAntenna.Id &&
                                        !x.DynamicAtt.LibraryAtt), x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                                    foreach (var DynamicAttInstValueRecord in DynamicAttInstValueRecords)
                                    {
                                        var DynamicAttDtoObject = GetDynamicAttDto(DynamicAttInstValueRecord, null);
                                        DynamicAttListCopy.Add(DynamicAttDtoObject);
                                    }

                                    // Library Object + Dynamic Attributes For This Library Object..
                                    var RadioAntennaLibrary = _unitOfWork.RadioAntennaLibraryRepository.GetIncludeWhere(x => x.Id == RadioAntenna.radioAntennaLibraryId).FirstOrDefault();
                                    var RadioAntennaLibraryMap = _mapper.Map<RadioAntennaLibraryViewModel>(RadioAntennaLibrary);
                                    var DynamicAttLibRecords = _unitOfWork.DynamicAttLibRepository.GetIncludeWhere(x => (
                                        x.DynamicAtt.disable == false && x.DynamicAtt.tablesNames.TableName == "TLIradioAntennaLibrary" &&
                                        x.InventoryId == RadioAntenna.radioAntennaLibraryId && x.DynamicAtt.LibraryAtt),
                                        x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();
                                    foreach (var DynamicAttLibRecord in DynamicAttLibRecords)
                                    {
                                        var DynamicAttDtoObject = GetDynamicAttDto(null, DynamicAttLibRecord);
                                        DynamicAttListCopy.Add(DynamicAttDtoObject);
                                    }
                                    RadioAntennaListToAddToModel.Add(new RadioAntennaLoadDto()
                                    {
                                        RadioAntenna = RadioAntennaMap,
                                        RadioAntennaLibrary = RadioAntennaLibraryMap,
                                        DynamicAttList = DynamicAttListCopy
                                    });
                                    loadsDtos.RadioAntennas = RadioAntennaListToAddToModel;
                                }
                            }
                            else if (PartName == null && TypeName == "TLIradioOther")
                            {
                                if (allLoadsInst.radioOtherId != null)
                                {
                                    List<DynamicAttDto> DynamicAttListCopy = new List<DynamicAttDto>();

                                    // Installation Object + Dynamic Attributes For This Installation Object..
                                    var RadioOther = _unitOfWork.RadioOtherRepository.GetIncludeWhere(x => x.Id == allLoadsInst.radioOtherId.Value, x => x.owner, x => x.installationPlace, x => x.radioOtherLibrary).FirstOrDefault();
                                    var RadioOtherMap = _mapper.Map<RadioOtherViewModel>(RadioOther);
                                    var DynamicAttInstValueRecords = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x => (x.DynamicAtt.disable == false &&
                                        x.DynamicAtt.tablesNames.TableName == "TLIradioOther" &&
                                        x.InventoryId == RadioOther.Id &&
                                        !x.DynamicAtt.LibraryAtt), x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                                    foreach (var DynamicAttInstValueRecord in DynamicAttInstValueRecords)
                                    {
                                        var DynamicAttDtoObject = GetDynamicAttDto(DynamicAttInstValueRecord, null);
                                        DynamicAttListCopy.Add(DynamicAttDtoObject);
                                    }

                                    // Library Object + Dynamic Attributes For This Library Object..
                                    var RadioOtherLibrary = _unitOfWork.RadioOtherLibraryRepository.GetIncludeWhereFirst(x => x.Id == RadioOther.radioOtherLibraryId);
                                    var RadioOtherLibraryMap = _mapper.Map<RadioOtherLibraryViewModel>(RadioOtherLibrary);
                                    var DynamicAttLibRecords = _unitOfWork.DynamicAttLibRepository.GetIncludeWhere(x => (
                                        x.DynamicAtt.disable == false && x.DynamicAtt.tablesNames.TableName == "TLIradioOtherLibrary" &&
                                        x.InventoryId == RadioOther.radioOtherLibraryId && x.DynamicAtt.LibraryAtt),
                                        x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();
                                    foreach (var DynamicAttLibRecord in DynamicAttLibRecords)
                                    {
                                        var DynamicAttDtoObject = GetDynamicAttDto(null, DynamicAttLibRecord);
                                        DynamicAttListCopy.Add(DynamicAttDtoObject);
                                    }
                                    RadioOtherUListToAddToModel.Add(new RadioOtherLoadDto()
                                    {
                                        RadioOther = RadioOtherMap,
                                        RadioOtherLibrary = RadioOtherLibraryMap,
                                        DynamicAttList = DynamicAttListCopy
                                    });
                                    loadsDtos.RadioOtherS = RadioOtherUListToAddToModel;
                                }
                            }
                            else if (PartName == null && TypeName == "TLIradioRRU")
                            {
                                if (allLoadsInst.radioRRUId != null)
                                {
                                    List<DynamicAttDto> DynamicAttListCopy = new List<DynamicAttDto>();

                                    // Installation Object + Dynamic Attributes For This Installation Object..
                                    var RadioRRU = _unitOfWork.RadioRRURepository.GetIncludeWhere(x => x.Id == allLoadsInst.radioRRUId, x => x.installationPlace, x => x.owner, x => x.radioAntenna, x => x.radioRRULibrary).FirstOrDefault();
                                    var RadioRRUMap = _mapper.Map<RadioRRUViewModel>(RadioRRU);
                                    var DynamicAttInstValueRecords = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x => (x.DynamicAtt.disable == false &&
                                        x.DynamicAtt.tablesNames.TableName == "TLIradioRRU" &&
                                        x.InventoryId == RadioRRU.Id &&
                                        !x.DynamicAtt.LibraryAtt), x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                                    foreach (var DynamicAttInstValueRecord in DynamicAttInstValueRecords)
                                    {
                                        var DynamicAttDtoObject = GetDynamicAttDto(DynamicAttInstValueRecord, null);
                                        DynamicAttListCopy.Add(DynamicAttDtoObject);
                                    }

                                    // Library Object + Dynamic Attributes For This Library Object..
                                    var RadioRRULibrary = _unitOfWork.RadioRRULibraryRepository.GetIncludeWhere(x => x.Id == RadioRRU.radioRRULibraryId).FirstOrDefault();
                                    var RadioRRULibraryMap = _mapper.Map<RadioRRULibraryViewModel>(RadioRRULibrary);
                                    var DynamicAttLibRecords = _unitOfWork.DynamicAttLibRepository.GetIncludeWhere(x => (
                                        x.DynamicAtt.disable == false && x.DynamicAtt.tablesNames.TableName == "TLIradioRRULibrary" &&
                                        x.InventoryId == RadioRRU.radioRRULibraryId && x.DynamicAtt.LibraryAtt),
                                        x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();
                                    foreach (var DynamicAttLibRecord in DynamicAttLibRecords)
                                    {
                                        var DynamicAttDtoObject = GetDynamicAttDto(null, DynamicAttLibRecord);
                                        DynamicAttListCopy.Add(DynamicAttDtoObject);
                                    }
                                    RadioRRUListToAddToModel.Add(new RadioRRULoadDto()
                                    {
                                        RadioRRU = RadioRRUMap,
                                        RadioRRULibrary = RadioRRULibraryMap,
                                        DynamicAttList = DynamicAttListCopy
                                    });
                                    loadsDtos.RadioRRUS = RadioRRUListToAddToModel;
                                }
                            }
                            else if (PartName == null && TypeName == "TLIradioAntenna")
                            {
                                if (allLoadsInst.radioAntennaId != null)
                                {
                                    List<DynamicAttDto> DynamicAttListCopy = new List<DynamicAttDto>();

                                    // Installation Object + Dynamic Attributes For This Installation Object..
                                    var RadioAntenna = _unitOfWork.RadioAntennaRepository.GetIncludeWhere(x => x.Id == allLoadsInst.radioAntennaId, x => x.installationPlace, x => x.owner, x => x.radioAntennaLibrary).FirstOrDefault();
                                    var RadioAntennaMap = _mapper.Map<RadioAntennaViewModel>(RadioAntenna);
                                    var DynamicAttInstValueRecords = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x => (x.DynamicAtt.disable == false &&
                                        x.DynamicAtt.tablesNames.TableName == "TLIradioAntenna" &&
                                        x.InventoryId == RadioAntenna.Id &&
                                        !x.DynamicAtt.LibraryAtt), x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                                    foreach (var DynamicAttInstValueRecord in DynamicAttInstValueRecords)
                                    {
                                        var DynamicAttDtoObject = GetDynamicAttDto(DynamicAttInstValueRecord, null);
                                        DynamicAttListCopy.Add(DynamicAttDtoObject);
                                    }

                                    // Library Object + Dynamic Attributes For This Library Object..
                                    var RadioAntennaLibrary = _unitOfWork.RadioAntennaLibraryRepository.GetIncludeWhere(x => x.Id == RadioAntenna.radioAntennaLibraryId).FirstOrDefault();
                                    var RadioAntennaLibraryMap = _mapper.Map<RadioAntennaLibraryViewModel>(RadioAntennaLibrary);
                                    var DynamicAttLibRecords = _unitOfWork.DynamicAttLibRepository.GetIncludeWhere(x => (
                                        x.DynamicAtt.disable == false && x.DynamicAtt.tablesNames.TableName == "TLIradioAntennaLibrary" &&
                                        x.InventoryId == RadioAntenna.radioAntennaLibraryId && x.DynamicAtt.LibraryAtt),
                                        x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();
                                    foreach (var DynamicAttLibRecord in DynamicAttLibRecords)
                                    {
                                        var DynamicAttDtoObject = GetDynamicAttDto(null, DynamicAttLibRecord);
                                        DynamicAttListCopy.Add(DynamicAttDtoObject);
                                    }
                                    RadioAntennaListToAddToModel.Add(new RadioAntennaLoadDto()
                                    {
                                        RadioAntenna = RadioAntennaMap,
                                        RadioAntennaLibrary = RadioAntennaLibraryMap,
                                        DynamicAttList = DynamicAttListCopy
                                    });
                                    loadsDtos.RadioAntennas = RadioAntennaListToAddToModel;
                                }
                            }

                        }
                        else if (allLoadsInst.powerId != null)
                        {
                            if (PartName == "TLIpower")
                            {
                                List<DynamicAttDto> DynamicAttListCopy = new List<DynamicAttDto>();

                                // Installation Object + Dynamic Attributes For This Installation Object..
                                var Power = _unitOfWork.PowerRepository.GetIncludeWhere(x => x.Id == allLoadsInst.powerId, x => x.installationPlace, x => x.owner, x => x.powerLibrary, x => x.powerType).FirstOrDefault();
                                var PowereMap = _mapper.Map<PowerViewModel>(Power);
                                var DynamicAttInstValueRecords = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x => (x.DynamicAtt.disable == false &&
                                    x.DynamicAtt.tablesNames.TableName == "TLIpower" &&
                                    x.InventoryId == Power.Id &&
                                    !x.DynamicAtt.LibraryAtt), x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                                foreach (var DynamicAttInstValueRecord in DynamicAttInstValueRecords)
                                {
                                    var DynamicAttDtoObject = GetDynamicAttDto(DynamicAttInstValueRecord, null);
                                    DynamicAttListCopy.Add(DynamicAttDtoObject);
                                }

                                // Library Object + Dynamic Attributes For This Library Object..
                                var PowerLibrary = _unitOfWork.PowerLibraryRepository.GetIncludeWhereFirst(x => x.Id == Power.powerLibraryId);
                                var PowerLibraryMap = _mapper.Map<PowerLibraryViewModel>(PowerLibrary);
                                var DynamicAttLibRecords = _unitOfWork.DynamicAttLibRepository.GetIncludeWhere(x => (
                                    x.DynamicAtt.disable == false && x.DynamicAtt.tablesNames.TableName == "TLIpowerLibrary" &&
                                    x.InventoryId == Power.powerLibraryId && x.DynamicAtt.LibraryAtt),
                                    x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();
                                foreach (var DynamicAttLibRecord in DynamicAttLibRecords)
                                {
                                    var DynamicAttDtoObject = GetDynamicAttDto(null, DynamicAttLibRecord);
                                    DynamicAttListCopy.Add(DynamicAttDtoObject);
                                }

                                PowerListToAddToModel.Add(new PowerLoadDto()
                                {
                                    Power = PowereMap,
                                    PowerLibrary = PowerLibraryMap,
                                    DynamicAttList = DynamicAttListCopy
                                });
                                loadsDtos.Powers = PowerListToAddToModel;

                            }
                        }
                        else if (allLoadsInst.loadOtherId != null)
                        {
                            if (PartName == "TLIloadOther")
                            {
                                List<DynamicAttDto> DynamicAttListCopy = new List<DynamicAttDto>();

                                // Installation Object + Dynamic Attributes For This Installation Object..
                                var LoadOther = _unitOfWork.LoadOtherRepository.GetIncludeWhereFirst(x => x.Id == allLoadsInst.loadOtherId, x => x.InstallationPlace, x => x.loadOtherLibrary);
                                var LoadOtherMap = _mapper.Map<LoadOtherViewModel>(LoadOther);
                                var DynamicAttInstValueRecords = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x => (x.DynamicAtt.disable == false &&
                                    x.DynamicAtt.tablesNames.TableName == "TLIloadOther" &&
                                    x.InventoryId == LoadOther.Id &&
                                    !x.DynamicAtt.LibraryAtt), x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                                foreach (var DynamicAttInstValueRecord in DynamicAttInstValueRecords)
                                {
                                    var DynamicAttDtoObject = GetDynamicAttDto(DynamicAttInstValueRecord, null);
                                    DynamicAttListCopy.Add(DynamicAttDtoObject);
                                }

                                // Library Object + Dynamic Attributes For This Library Object..
                                var LoadOtherLibrary = _unitOfWork.LoadOtherLibraryRepository.GetIncludeWhereFirst(x => x.Id == LoadOther.loadOtherLibraryId);
                                var LoadOtherLibraryMap = _mapper.Map<LoadOtherLibraryViewModel>(LoadOtherLibrary);
                                var DynamicAttLibRecords = _unitOfWork.DynamicAttLibRepository.GetIncludeWhere(x => (
                                    x.DynamicAtt.disable == false && x.DynamicAtt.tablesNames.TableName == "TLIloadOtherLibrary" &&
                                    x.InventoryId == LoadOther.loadOtherLibraryId && x.DynamicAtt.LibraryAtt),
                                    x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();
                                foreach (var DynamicAttLibRecord in DynamicAttLibRecords)
                                {
                                    var DynamicAttDtoObject = GetDynamicAttDto(null, DynamicAttLibRecord);
                                    DynamicAttListCopy.Add(DynamicAttDtoObject);
                                }

                                LoadOtherListToAddToModel.Add(new LoadOtherDto()
                                {
                                    LoadOther = LoadOtherMap,
                                    LoadOtherLibrary = LoadOtherLibraryMap,
                                    DynamicAttList = DynamicAttListCopy
                                });
                                loadsDtos.LoadOthers = LoadOtherListToAddToModel;
                            }
                        }
                    }
                   else if (CivilLoad.sideArmId != null)
                   {
                        if (PartName == "TLIsideArm")
                        {

                            List<DynamicAttDto> DynamicAttListCopy = new List<DynamicAttDto>();

                            // Installation Object + Dynamic Attributes For This Installation Object..
                            var SideArm = _unitOfWork.SideArmRepository.GetIncludeWhereFirst(x => x.Id == CivilLoad.sideArmId, x => x.ItemStatus, x => x.owner, x => x.sideArmInstallationPlace, x => x.sideArmLibrary, x => x.sideArmType);
                            var SideArmMap = _mapper.Map<SideArmViewModel>(SideArm);
                            var DynamicAttInstValueRecords = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x => (x.DynamicAtt.disable == false &&
                                x.DynamicAtt.tablesNames.TableName == "TLIsideArm" &&
                                x.InventoryId == SideArm.Id &&
                                !x.DynamicAtt.LibraryAtt), x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                            foreach (var DynamicAttInstValueRecord in DynamicAttInstValueRecords)
                            {
                                var DynamicAttDtoObject = GetDynamicAttDto(DynamicAttInstValueRecord, null);
                                DynamicAttListCopy.Add(DynamicAttDtoObject);
                            }

                            // Library Object + Dynamic Attributes For This Library Object..
                            var SideArmLibrary = _unitOfWork.SideArmLibraryRepository.GetIncludeWhereFirst(x => x.Id == SideArm.sideArmLibraryId);
                            var SideArmLibraryMap = _mapper.Map<SideArmLibraryViewModel>(SideArmLibrary);
                            var DynamicAttLibRecords = _unitOfWork.DynamicAttLibRepository.GetIncludeWhere(x => (
                                x.DynamicAtt.disable == false && x.DynamicAtt.tablesNames.TableName == "TLIsideArmLibrary" &&
                                x.InventoryId == SideArm.sideArmLibraryId && x.DynamicAtt.LibraryAtt),
                                x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();
                            foreach (var DynamicAttLibRecord in DynamicAttLibRecords)
                            {
                                var DynamicAttDtoObject = GetDynamicAttDto(null, DynamicAttLibRecord);
                                DynamicAttListCopy.Add(DynamicAttDtoObject);
                            }

                            SidearmListToAddToModel.Add(new SideArmLoadDto()
                            {
                                SideArm = SideArmMap,
                                SideArmLibrary = SideArmLibraryMap,
                                DynamicAttList = DynamicAttListCopy
                            });
                            loadsDtos.SideArms = SidearmListToAddToModel;

                        }
                   }
                }
                return new Response<LoadsDto>(true, loadsDtos, null, null, (int)Helpers.Constants.ApiReturnCode.success);
            }
            catch (Exception err)
            {
                return new Response<LoadsDto>(false,null,null, err.Message, (int)Helpers.Constants.ApiReturnCode.fail);
            }
        }
        public Response<ReturnWithFilters<object>> GetAlOtherInventoryonSitebyType(string OtherInventoryTypeName, SiteFilter BaseFilter, bool WithFilterData, CombineFilters CombineFilters, ParameterPagination parameterPagination, string LibraryType)
        {
            if (Helpers.Constants.OtherInventoryType.TLIcabinet.ToString() == OtherInventoryTypeName)
            {
                try
                {
                    int Count = 0;
                    List<object> OutPutList = new List<object>();
                    ReturnWithFilters<object> CabinetTableDisplay = new ReturnWithFilters<object>();

                    //
                    // Get All OtherInSite To This BaseFilter + CombineFilters
                    //
                    List<TLIotherInSite> AllOtherInSiteRecords = GetOtherInSiteBySiteBaseFilter(BaseFilter, "Cabinet", CombineFilters, LibraryType);
                    List<TLIotherInSite> OtherInSiteRecords = GetMaxInstallationDate(AllOtherInSiteRecords, "Cabinet");

                    List<CabinetViewModel> Cabinets = _mapper.Map<List<CabinetViewModel>>(OtherInSiteRecords
                        .Select(x => x.allOtherInventoryInst.cabinet)).ToList();

                    Count = Cabinets.Count();

                    Cabinets = Cabinets.Skip((parameterPagination.PageNumber - 1) * parameterPagination.PageSize).
                        Take(parameterPagination.PageSize).ToList();

                    List<TLIattributeViewManagment> DynamicAttributes = _mapper.Map<List<TLIattributeViewManagment>>(_unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                        x.Enable && x.EditableManagmentView.View.ToLower() == EditableManamgmantViewNames.CabinetInstallation.ToString().ToLower() &&
                        x.DynamicAttId != null ? (x.DynamicAtt.tablesNames.TableName.ToLower() == TablesNames.TLIcabinet.ToString().ToLower() &&
                            !x.DynamicAtt.disable && !x.DynamicAtt.LibraryAtt) : false, x => x.EditableManagmentView, x => x.DynamicAtt,
                                x => x.DynamicAtt.tablesNames, x => x.DynamicAtt.DataType));

                    List<TLIattributeViewManagment> AllAttributes = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                        (x.Enable && x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.CabinetInstallation.ToString() &&
                        (LibraryType.ToLower() == "power" ?
                            !x.AttributeActivated.Key.ToLower().Contains("telecomlibrary") : !x.AttributeActivated.Key.ToLower().Contains("powerlibrary")) &&
                        (x.AttributeActivatedId != null ?
                            (x.AttributeActivated.Tabel == TablesNames.TLIcabinet.ToString() && x.AttributeActivated.enable) :
                            (!x.DynamicAtt.LibraryAtt && !x.DynamicAtt.disable && x.DynamicAtt.tablesNames.TableName == TablesNames.TLIcabinet.ToString()))) ||
                        (x.AttributeActivated != null ?
                            ((x.AttributeActivated.Key.ToLower() == "id" || x.AttributeActivated.Key.ToLower() == "active") && x.AttributeActivated.Tabel == TablesNames.TLIcabinet.ToString()) : false),
                           x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1, x => x.EditableManagmentView.TLItablesNames2,
                           x => x.AttributeActivated, x => x.DynamicAtt, x => x.DynamicAtt.tablesNames, x => x.DynamicAtt.DataType).ToList();

                    List<TLIattributeViewManagment> NotDateTimeInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() != "datetime") : false).ToList();

                    List<TLIattributeViewManagment> NotDateTimeDynamicInstallationAttributesViewModel = DynamicAttributes.Where(x =>
                        x.DynamicAtt.DataType.Name.ToLower() != "datetime").ToList();

                    List<TLIattributeViewManagment> DateTimeInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() == "datetime") : false).ToList();

                    List<TLIattributeViewManagment> DateTimeDynamicInstallationAttributesViewModel = DynamicAttributes.Where(x =>
                        x.DynamicAtt.DataType.Name.ToLower() == "datetime").ToList();

                    foreach (CabinetViewModel CabinetInstallationObject in Cabinets)
                    {
                        dynamic DynamicCabinetInstallation = new ExpandoObject();

                        //
                        // Installation Object ViewModel...
                        //
                        if (NotDateTimeInstallationAttributesViewModel != null ? NotDateTimeInstallationAttributesViewModel.Count > 0 : false)
                        {
                            List<PropertyInfo> InstallationProps = typeof(CabinetViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() != "datetime" :
                                    (x.PropertyType.Name.ToLower() != "datetime")) :
                                (x.PropertyType.Name.ToLower() != "datetime")).ToList();

                            foreach (PropertyInfo prop in InstallationProps)
                            {
                                if (prop.Name.ToLower().Contains("_name") &&
                                    NotDateTimeInstallationAttributesViewModel.Exists(x =>
                                        x.AttributeActivated.Label.ToLower() == prop.Name.ToLower()))
                                {
                                    object ForeignKeyNamePropObject = prop.GetValue(CabinetInstallationObject, null);
                                    ((IDictionary<String, Object>)DynamicCabinetInstallation).Add(new KeyValuePair<string, object>(prop.Name, ForeignKeyNamePropObject));
                                }
                                else if (NotDateTimeInstallationAttributesViewModel.Exists(x =>
                                     x.AttributeActivated.Key.ToLower() == prop.Name.ToLower()) &&
                                    !prop.Name.ToLower().Contains("_name") &&
                                    (prop.Name.ToLower().Substring(Math.Max(0, prop.Name.Length - 2)) != "id" || prop.Name.ToLower() == "id"))
                                {
                                    if (prop.Name.ToLower() != "id" && prop.Name.ToLower() != "active")
                                    {
                                        TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                            x.AttributeActivated.Tabel == TablesNames.TLIcabinet.ToString() &&
                                            x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                        if (LabelName != null)
                                        {
                                            object PropObject = prop.GetValue(CabinetInstallationObject, null);
                                            ((IDictionary<String, Object>)DynamicCabinetInstallation).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                        }
                                    }
                                    else
                                    {
                                        object PropObject = prop.GetValue(CabinetInstallationObject, null);
                                        ((IDictionary<String, Object>)DynamicCabinetInstallation).Add(new KeyValuePair<string, object>(prop.Name, PropObject));
                                    }
                                }
                            }
                        }

                        //
                        // Installation Dynamic Attributes... (Not DateTime DataType Attribute)
                        //
                        if (NotDateTimeDynamicInstallationAttributesViewModel != null ? NotDateTimeDynamicInstallationAttributesViewModel.Count > 0 : false)
                        {
                            List<TLIdynamicAtt> NotDateTimeInstallationDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                                !x.disable && x.tablesNames.TableName == TablesNames.TLIcabinet.ToString() &&
                                !x.LibraryAtt && x.DataType.Name.ToLower() != "datetime" &&
                                NotDateTimeDynamicInstallationAttributesViewModel.Exists(y => y.DynamicAttId == x.Id)
                                    , x => x.tablesNames, x => x.DataType).ToList();

                            List<TLIdynamicAttInstValue> NotDateTimeDynamicAttInstValues = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                                !x.DynamicAtt.LibraryAtt && !x.disable &&
                                x.InventoryId == CabinetInstallationObject.Id &&
                                NotDateTimeInstallationDynamicAttributes.Exists(y => y.Key.ToLower() == x.DynamicAtt.Key.ToLower()) &&
                                x.tablesNames.TableName == TablesNames.TLIcabinet.ToString()
                                    , x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                            foreach (TLIdynamicAtt InstallationDynamicAtt in NotDateTimeInstallationDynamicAttributes)
                            {
                                TLIdynamicAttInstValue DynamicAttInstValue = NotDateTimeDynamicAttInstValues.FirstOrDefault(x =>
                                    x.DynamicAtt.Key.ToLower() == InstallationDynamicAtt.Key.ToLower());

                                if (DynamicAttInstValue != null)
                                {
                                    dynamic DynamicAttValue = new ExpandoObject();
                                    if (DynamicAttInstValue.ValueString != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueString;

                                    else if (DynamicAttInstValue.ValueDouble != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueDouble;

                                    else if (DynamicAttInstValue.ValueDateTime != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueDateTime;

                                    else if (DynamicAttInstValue.ValueBoolean != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueBoolean;

                                    ((IDictionary<String, Object>)DynamicCabinetInstallation).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, DynamicAttValue));
                                }
                                else
                                {
                                    ((IDictionary<String, Object>)DynamicCabinetInstallation).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, null));
                                }
                            }
                        }

                        //
                        // Installation Object ViewModel... (DateTime DataType Attribute)
                        //
                        dynamic DateTimeAttributes = new ExpandoObject();
                        if (DateTimeInstallationAttributesViewModel != null ? DateTimeInstallationAttributesViewModel.Count() > 0 : false)
                        {
                            List<PropertyInfo> DateTimeInstallationProps = typeof(CabinetViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() == "datetime" :
                                    (x.PropertyType.Name.ToLower() == "datetime")) :
                                (x.PropertyType.Name.ToLower() == "datetime")).ToList();

                            foreach (PropertyInfo prop in DateTimeInstallationProps)
                            {
                                TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                    x.AttributeActivated.Tabel == TablesNames.TLIcabinet.ToString() &&
                                    x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                if (LabelName != null)
                                {
                                    object PropObject = prop.GetValue(CabinetInstallationObject, null);
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                }
                            }
                        }

                        //
                        // Installation Dynamic Attributes... (DateTime DataType Attribute)
                        // 
                        if (DateTimeDynamicInstallationAttributesViewModel != null ? DateTimeDynamicInstallationAttributesViewModel.Count() > 0 : false)
                        {
                            List<TLIdynamicAtt> DateTimeInstallationDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                               !x.disable && x.tablesNames.TableName == TablesNames.TLIcabinet.ToString() &&
                               !x.LibraryAtt && x.DataType.Name.ToLower() == "datetime" &&
                                DateTimeDynamicInstallationAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames).ToList();

                            List<TLIdynamicAttInstValue> DateTimeDynamicAttInstValues = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                                x.InventoryId == CabinetInstallationObject.Id && !x.disable &&
                               !x.DynamicAtt.LibraryAtt &&
                                DateTimeInstallationDynamicAttributes.Exists(y => y.Key.ToLower() == x.DynamicAtt.Key.ToLower()) &&
                                x.tablesNames.TableName == TablesNames.TLIcabinet.ToString()
                                   , x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                            foreach (TLIdynamicAtt InstallationDynamicAtt in DateTimeInstallationDynamicAttributes)
                            {
                                TLIdynamicAttInstValue DynamicAttInstallationValue = DateTimeDynamicAttInstValues.FirstOrDefault(x =>
                                    x.DynamicAtt.Key.ToLower() == InstallationDynamicAtt.Key.ToLower());

                                if (DynamicAttInstallationValue != null)
                                {
                                    dynamic DynamicAttValue = new ExpandoObject();
                                    if (DynamicAttInstallationValue.ValueDateTime != null)
                                        DynamicAttValue = DynamicAttInstallationValue.ValueDateTime;

                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, DynamicAttValue));
                                }
                                else
                                {
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, null));
                                }
                            }
                        }

                        ((IDictionary<String, Object>)DynamicCabinetInstallation).Add(new KeyValuePair<string, object>("DateTimeAttributes", DateTimeAttributes));

                        OutPutList.Add(DynamicCabinetInstallation);
                    }
                    CabinetTableDisplay.Model = OutPutList;

                    if (WithFilterData)
                    {
                        CabinetTableDisplay.filters = _unitOfWork.CabinetRepository.GetRelatedTables();
                    }
                    else
                    {
                        CabinetTableDisplay.filters = null;
                    }

                    return new Response<ReturnWithFilters<object>>(true, CabinetTableDisplay, null, null, (int)ApiReturnCode.success, Count);
                }
                catch (Exception err)
                {
                    return new Response<ReturnWithFilters<object>>(false, null, null, err.Message, (int)ApiReturnCode.fail);
                }
            }
            if (Helpers.Constants.OtherInventoryType.TLIsolar.ToString() == OtherInventoryTypeName)
            {
                try
                {
                    int Count = 0;
                    List<object> OutPutList = new List<object>();
                    ReturnWithFilters<object> SolarTableDisplay = new ReturnWithFilters<object>();

                    //
                    // Get All OtherInSite To This BaseFilter + CombineFilters
                    //
                    List<TLIotherInSite> AllOtherInSiteRecords = GetOtherInSiteBySiteBaseFilter(BaseFilter, "Solar", CombineFilters, null);
                    List<TLIotherInSite> OtherInSiteRecords = GetMaxInstallationDate(AllOtherInSiteRecords, "Solar");

                    List<SolarViewModel> Solars = _mapper.Map<List<SolarViewModel>>(OtherInSiteRecords
                        .Select(x => x.allOtherInventoryInst.solar));

                    Count = Solars.Count();

                    Solars = Solars.Skip((parameterPagination.PageNumber - 1) * parameterPagination.PageSize).
                        Take(parameterPagination.PageSize).ToList();

                    List<TLIattributeViewManagment> AllAttributes = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                       (x.Enable && x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.SolarInstallation.ToString() &&
                       (x.AttributeActivatedId != null ?
                            (x.AttributeActivated.Tabel == TablesNames.TLIsolar.ToString() && x.AttributeActivated.enable) :
                            (!x.DynamicAtt.LibraryAtt && !x.DynamicAtt.disable && x.DynamicAtt.tablesNames.TableName == TablesNames.TLIsolar.ToString()))) ||
                        (x.AttributeActivated != null ?
                            ((x.AttributeActivated.Key.ToLower() == "id" || x.AttributeActivated.Key.ToLower() == "active") && x.AttributeActivated.Tabel == TablesNames.TLIsolar.ToString()) : false),
                           x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1, x => x.EditableManagmentView.TLItablesNames2,
                           x => x.AttributeActivated, x => x.DynamicAtt, x => x.DynamicAtt.tablesNames, x => x.DynamicAtt.DataType).ToList();

                    List<TLIattributeViewManagment> NotDateTimeInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() != "datetime") : false).ToList();

                    List<TLIattributeViewManagment> NotDateTimeDynamicInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() != "datetime" : false).ToList();

                    List<TLIattributeViewManagment> DateTimeInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() == "datetime") : false).ToList();

                    List<TLIattributeViewManagment> DateTimeDynamicInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() == "datetime" : false).ToList();

                    foreach (SolarViewModel SolarInstallationObject in Solars)
                    {
                        dynamic DynamicSolarInstallation = new ExpandoObject();

                        //
                        // Installation Object ViewModel...
                        //
                        if (NotDateTimeInstallationAttributesViewModel != null ? NotDateTimeInstallationAttributesViewModel.Count > 0 : false)
                        {
                            List<PropertyInfo> InstallationProps = typeof(SolarViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() != "datetime" :
                                    (x.PropertyType.Name.ToLower() != "datetime")) :
                                (x.PropertyType.Name.ToLower() != "datetime")).ToList();

                            foreach (PropertyInfo prop in InstallationProps)
                            {
                                if (prop.Name.ToLower().Contains("_name") &&
                                    NotDateTimeInstallationAttributesViewModel.Exists(x =>
                                        x.AttributeActivated.Label.ToLower() == prop.Name.ToLower()))
                                {
                                    object ForeignKeyNamePropObject = prop.GetValue(SolarInstallationObject, null);
                                    ((IDictionary<String, Object>)DynamicSolarInstallation).Add(new KeyValuePair<string, object>(prop.Name, ForeignKeyNamePropObject));
                                }
                                else if (NotDateTimeInstallationAttributesViewModel.Exists(x =>
                                     x.AttributeActivated.Key.ToLower() == prop.Name.ToLower()) &&
                                    !prop.Name.ToLower().Contains("_name") &&
                                    (prop.Name.ToLower().Substring(Math.Max(0, prop.Name.Length - 2)) != "id" || prop.Name.ToLower() == "id"))
                                {
                                    if (prop.Name.ToLower() != "id" && prop.Name.ToLower() != "active")
                                    {
                                        TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                            x.AttributeActivated.Tabel == TablesNames.TLIsolar.ToString() &&
                                            x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                        if (LabelName != null)
                                        {
                                            object PropObject = prop.GetValue(SolarInstallationObject, null);
                                            ((IDictionary<String, Object>)DynamicSolarInstallation).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                        }
                                    }
                                    else
                                    {
                                        object PropObject = prop.GetValue(SolarInstallationObject, null);
                                        ((IDictionary<String, Object>)DynamicSolarInstallation).Add(new KeyValuePair<string, object>(prop.Name, PropObject));
                                    }
                                }
                            }
                        }

                        //
                        // Installation Dynamic Attributes... (Not DateTime DataType Attribute)
                        //
                        if (NotDateTimeDynamicInstallationAttributesViewModel != null ? NotDateTimeDynamicInstallationAttributesViewModel.Count > 0 : false)
                        {
                            List<TLIdynamicAtt> NotDateTimeInstallationDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                                !x.disable && x.tablesNames.TableName == TablesNames.TLIsolar.ToString() &&
                                !x.LibraryAtt && x.DataType.Name.ToLower() != "datetime" &&
                                NotDateTimeDynamicInstallationAttributesViewModel.Exists(y => y.DynamicAttId == x.Id)
                                    , x => x.tablesNames, x => x.DataType).ToList();

                            List<TLIdynamicAttInstValue> NotDateTimeDynamicAttInstValues = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                                !x.DynamicAtt.LibraryAtt && !x.disable &&
                                x.InventoryId == SolarInstallationObject.Id &&
                                NotDateTimeInstallationDynamicAttributes.Exists(y => y.Key.ToLower() == x.DynamicAtt.Key.ToLower()) &&
                                x.tablesNames.TableName == TablesNames.TLIsolar.ToString()
                                    , x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                            foreach (TLIdynamicAtt InstallationDynamicAtt in NotDateTimeInstallationDynamicAttributes)
                            {
                                TLIdynamicAttInstValue DynamicAttInstValue = NotDateTimeDynamicAttInstValues.FirstOrDefault(x =>
                                    x.DynamicAtt.Key.ToLower() == InstallationDynamicAtt.Key.ToLower());

                                if (DynamicAttInstValue != null)
                                {
                                    dynamic DynamicAttValue = new ExpandoObject();
                                    if (DynamicAttInstValue.ValueString != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueString;

                                    else if (DynamicAttInstValue.ValueDouble != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueDouble;

                                    else if (DynamicAttInstValue.ValueDateTime != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueDateTime;

                                    else if (DynamicAttInstValue.ValueBoolean != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueBoolean;

                                    ((IDictionary<String, Object>)DynamicSolarInstallation).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, DynamicAttValue));
                                }
                                else
                                {
                                    ((IDictionary<String, Object>)DynamicSolarInstallation).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, null));
                                }
                            }
                        }

                        //
                        // Installation Object ViewModel... (DateTime DataType Attribute)
                        //
                        dynamic DateTimeAttributes = new ExpandoObject();
                        if (DateTimeInstallationAttributesViewModel != null ? DateTimeInstallationAttributesViewModel.Count() > 0 : false)
                        {
                            List<PropertyInfo> DateTimeInstallationProps = typeof(SolarViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() == "datetime" :
                                    (x.PropertyType.Name.ToLower() == "datetime")) :
                                (x.PropertyType.Name.ToLower() == "datetime")).ToList();

                            foreach (PropertyInfo prop in DateTimeInstallationProps)
                            {
                                TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                    x.AttributeActivated.Tabel == TablesNames.TLIsolar.ToString() &&
                                    x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                if (LabelName != null)
                                {
                                    object PropObject = prop.GetValue(SolarInstallationObject, null);
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                }
                            }
                        }

                        //
                        // Installation Dynamic Attributes... (DateTime DataType Attribute)
                        // 
                        if (DateTimeDynamicInstallationAttributesViewModel != null ? DateTimeDynamicInstallationAttributesViewModel.Count() > 0 : false)
                        {
                            List<TLIdynamicAtt> DateTimeInstallationDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                               !x.disable && x.tablesNames.TableName == TablesNames.TLIsolar.ToString() &&
                               !x.LibraryAtt && x.DataType.Name.ToLower() == "datetime" &&
                                DateTimeDynamicInstallationAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames).ToList();

                            List<TLIdynamicAttInstValue> DateTimeDynamicAttInstValues = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                                x.InventoryId == SolarInstallationObject.Id && !x.disable &&
                               !x.DynamicAtt.LibraryAtt &&
                                DateTimeInstallationDynamicAttributes.Exists(y => y.Key.ToLower() == x.DynamicAtt.Key.ToLower()) &&
                                x.tablesNames.TableName == TablesNames.TLIsolar.ToString()
                                   , x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                            foreach (TLIdynamicAtt InstallationDynamicAtt in DateTimeInstallationDynamicAttributes)
                            {
                                TLIdynamicAttInstValue DynamicAttInstallationValue = DateTimeDynamicAttInstValues.FirstOrDefault(x =>
                                    x.DynamicAtt.Key.ToLower() == InstallationDynamicAtt.Key.ToLower());

                                if (DynamicAttInstallationValue != null)
                                {
                                    dynamic DynamicAttValue = new ExpandoObject();
                                    if (DynamicAttInstallationValue.ValueDateTime != null)
                                        DynamicAttValue = DynamicAttInstallationValue.ValueDateTime;

                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, DynamicAttValue));
                                }
                                else
                                {
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, null));
                                }
                            }
                        }

                        ((IDictionary<String, Object>)DynamicSolarInstallation).Add(new KeyValuePair<string, object>("DateTimeAttributes", DateTimeAttributes));

                        OutPutList.Add(DynamicSolarInstallation);
                    }
                    SolarTableDisplay.Model = OutPutList;

                    if (WithFilterData)
                    {
                        SolarTableDisplay.filters = _unitOfWork.SolarRepository.GetRelatedTables(BaseFilter.siteCode);
                    }
                    else
                    {
                        SolarTableDisplay.filters = null;
                    }

                    return new Response<ReturnWithFilters<object>>(true, SolarTableDisplay, null, null, (int)ApiReturnCode.success, Count);
                }
                catch (Exception err)
                {
                    return new Response<ReturnWithFilters<object>>(false, null, null, err.Message, (int)ApiReturnCode.fail);
                }
            }
            if (Helpers.Constants.OtherInventoryType.TLIgenerator.ToString() == OtherInventoryTypeName)
            {
                try
                {
                    int Count = 0;
                    List<object> OutPutList = new List<object>();
                    ReturnWithFilters<object> GeneratorTableDisplay = new ReturnWithFilters<object>();

                    //
                    // Get All OtherInSite To This BaseFilter + CombineFilters
                    //
                    List<TLIotherInSite> AllOtherInSiteRecords = GetOtherInSiteBySiteBaseFilter(BaseFilter, "Generator", CombineFilters, null);
                    List<TLIotherInSite> OtherInSiteRecords = GetMaxInstallationDate(AllOtherInSiteRecords, "Generator");

                    List<GeneratorViewModel> Generators = _mapper.Map<List<GeneratorViewModel>>(OtherInSiteRecords
                        .Select(x => x.allOtherInventoryInst.generator));

                    Count = Generators.Count();

                    Generators = Generators.Skip((parameterPagination.PageNumber - 1) * parameterPagination.PageSize).
                        Take(parameterPagination.PageSize).ToList();

                    List<TLIattributeViewManagment> AllAttributes = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                       (x.Enable && x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.GeneratorInstallation.ToString() &&
                       (x.AttributeActivatedId != null ?
                            (x.AttributeActivated.Tabel == TablesNames.TLIgenerator.ToString() && x.AttributeActivated.enable) :
                            (!x.DynamicAtt.LibraryAtt && !x.DynamicAtt.disable && x.DynamicAtt.tablesNames.TableName == TablesNames.TLIgenerator.ToString()))) ||
                        (x.AttributeActivated != null ?
                            ((x.AttributeActivated.Key.ToLower() == "id" || x.AttributeActivated.Key.ToLower() == "active") && x.AttributeActivated.Tabel == TablesNames.TLIgenerator.ToString()) : false),
                           x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1, x => x.EditableManagmentView.TLItablesNames2,
                           x => x.AttributeActivated, x => x.DynamicAtt, x => x.DynamicAtt.tablesNames, x => x.DynamicAtt.DataType).ToList();

                    List<TLIattributeViewManagment> NotDateTimeInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() != "datetime") : false).ToList();

                    List<TLIattributeViewManagment> NotDateTimeDynamicInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() != "datetime" : false).ToList();

                    List<TLIattributeViewManagment> DateTimeInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() == "datetime") : false).ToList();

                    List<TLIattributeViewManagment> DateTimeDynamicInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() == "datetime" : false).ToList();

                    foreach (GeneratorViewModel GeneratorInstallationObject in Generators)
                    {
                        dynamic DynamicGeneratorInstallation = new ExpandoObject();

                        //
                        // Installation Object ViewModel...
                        //
                        if (NotDateTimeInstallationAttributesViewModel != null ? NotDateTimeInstallationAttributesViewModel.Count > 0 : false)
                        {
                            List<PropertyInfo> InstallationProps = typeof(GeneratorViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() != "datetime" :
                                    (x.PropertyType.Name.ToLower() != "datetime")) :
                                (x.PropertyType.Name.ToLower() != "datetime")).ToList();

                            foreach (PropertyInfo prop in InstallationProps)
                            {
                                if (prop.Name.ToLower().Contains("_name") &&
                                    NotDateTimeInstallationAttributesViewModel.Exists(x =>
                                        x.AttributeActivated.Label.ToLower() == prop.Name.ToLower()))
                                {
                                    object ForeignKeyNamePropObject = prop.GetValue(GeneratorInstallationObject, null);
                                    ((IDictionary<String, Object>)DynamicGeneratorInstallation).Add(new KeyValuePair<string, object>(prop.Name, ForeignKeyNamePropObject));
                                }
                                else if (NotDateTimeInstallationAttributesViewModel.Exists(x =>
                                     x.AttributeActivated.Key.ToLower() == prop.Name.ToLower()) &&
                                    !prop.Name.ToLower().Contains("_name") &&
                                    (prop.Name.ToLower().Substring(Math.Max(0, prop.Name.Length - 2)) != "id" || prop.Name.ToLower() == "id"))
                                {
                                    if (prop.Name.ToLower() != "id" && prop.Name.ToLower() != "active")
                                    {
                                        TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                            x.AttributeActivated.Tabel == TablesNames.TLIgenerator.ToString() &&
                                            x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                        if (LabelName != null)
                                        {
                                            object PropObject = prop.GetValue(GeneratorInstallationObject, null);
                                            ((IDictionary<String, Object>)DynamicGeneratorInstallation).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                        }
                                    }
                                    else
                                    {
                                        object PropObject = prop.GetValue(GeneratorInstallationObject, null);
                                        ((IDictionary<String, Object>)DynamicGeneratorInstallation).Add(new KeyValuePair<string, object>(prop.Name, PropObject));
                                    }
                                }
                            }
                        }

                        //
                        // Installation Dynamic Attributes... (Not DateTime DataType Attribute)
                        //
                        if (NotDateTimeDynamicInstallationAttributesViewModel != null ? NotDateTimeDynamicInstallationAttributesViewModel.Count > 0 : false)
                        {
                            List<TLIdynamicAtt> NotDateTimeInstallationDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                                !x.disable && x.tablesNames.TableName == TablesNames.TLIgenerator.ToString() &&
                                !x.LibraryAtt && x.DataType.Name.ToLower() != "datetime" &&
                                NotDateTimeDynamicInstallationAttributesViewModel.Exists(y => y.DynamicAttId == x.Id)
                                    , x => x.tablesNames, x => x.DataType).ToList();

                            List<TLIdynamicAttInstValue> NotDateTimeDynamicAttInstValues = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                                !x.DynamicAtt.LibraryAtt && !x.disable &&
                                x.InventoryId == GeneratorInstallationObject.Id &&
                                NotDateTimeInstallationDynamicAttributes.Exists(y => y.Key.ToLower() == x.DynamicAtt.Key.ToLower()) &&
                                x.tablesNames.TableName == TablesNames.TLIgenerator.ToString()
                                    , x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                            foreach (TLIdynamicAtt InstallationDynamicAtt in NotDateTimeInstallationDynamicAttributes)
                            {
                                TLIdynamicAttInstValue DynamicAttInstValue = NotDateTimeDynamicAttInstValues.FirstOrDefault(x =>
                                    x.DynamicAtt.Key.ToLower() == InstallationDynamicAtt.Key.ToLower());

                                if (DynamicAttInstValue != null)
                                {
                                    dynamic DynamicAttValue = new ExpandoObject();
                                    if (DynamicAttInstValue.ValueString != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueString;

                                    else if (DynamicAttInstValue.ValueDouble != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueDouble;

                                    else if (DynamicAttInstValue.ValueDateTime != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueDateTime;

                                    else if (DynamicAttInstValue.ValueBoolean != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueBoolean;

                                    ((IDictionary<String, Object>)DynamicGeneratorInstallation).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, DynamicAttValue));
                                }
                                else
                                {
                                    ((IDictionary<String, Object>)DynamicGeneratorInstallation).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, null));
                                }
                            }
                        }

                        //
                        // Installation Object ViewModel... (DateTime DataType Attribute)
                        //
                        dynamic DateTimeAttributes = new ExpandoObject();
                        if (DateTimeInstallationAttributesViewModel != null ? DateTimeInstallationAttributesViewModel.Count() > 0 : false)
                        {
                            List<PropertyInfo> DateTimeInstallationProps = typeof(GeneratorViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() == "datetime" :
                                    (x.PropertyType.Name.ToLower() == "datetime")) :
                                (x.PropertyType.Name.ToLower() == "datetime")).ToList();

                            foreach (PropertyInfo prop in DateTimeInstallationProps)
                            {
                                TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                    x.AttributeActivated.Tabel == TablesNames.TLIgenerator.ToString() &&
                                    x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                if (LabelName != null)
                                {
                                    object PropObject = prop.GetValue(GeneratorInstallationObject, null);
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                }
                            }
                        }

                        //
                        // Installation Dynamic Attributes... (DateTime DataType Attribute)
                        // 
                        if (DateTimeDynamicInstallationAttributesViewModel != null ? DateTimeDynamicInstallationAttributesViewModel.Count() > 0 : false)
                        {
                            List<TLIdynamicAtt> DateTimeInstallationDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                               !x.disable && x.tablesNames.TableName == TablesNames.TLIgenerator.ToString() &&
                               !x.LibraryAtt && x.DataType.Name.ToLower() == "datetime" &&
                                DateTimeDynamicInstallationAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames).ToList();

                            List<TLIdynamicAttInstValue> DateTimeDynamicAttInstValues = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                                x.InventoryId == GeneratorInstallationObject.Id && !x.disable &&
                               !x.DynamicAtt.LibraryAtt &&
                                DateTimeInstallationDynamicAttributes.Exists(y => y.Key.ToLower() == x.DynamicAtt.Key.ToLower()) &&
                                x.tablesNames.TableName == TablesNames.TLIgenerator.ToString()
                                   , x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                            foreach (TLIdynamicAtt InstallationDynamicAtt in DateTimeInstallationDynamicAttributes)
                            {
                                TLIdynamicAttInstValue DynamicAttInstallationValue = DateTimeDynamicAttInstValues.FirstOrDefault(x =>
                                    x.DynamicAtt.Key.ToLower() == InstallationDynamicAtt.Key.ToLower());

                                if (DynamicAttInstallationValue != null)
                                {
                                    dynamic DynamicAttValue = new ExpandoObject();
                                    if (DynamicAttInstallationValue.ValueDateTime != null)
                                        DynamicAttValue = DynamicAttInstallationValue.ValueDateTime;

                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, DynamicAttValue));
                                }
                                else
                                {
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, null));
                                }
                            }
                        }

                        ((IDictionary<String, Object>)DynamicGeneratorInstallation).Add(new KeyValuePair<string, object>("DateTimeAttributes", DateTimeAttributes));

                        OutPutList.Add(DynamicGeneratorInstallation);
                    }
                    GeneratorTableDisplay.Model = OutPutList;

                    if (WithFilterData)
                    {
                        GeneratorTableDisplay.filters = _unitOfWork.GeneratorRepository.GetRelatedTables();
                    }
                    else
                    {
                        GeneratorTableDisplay.filters = null;
                    }

                    return new Response<ReturnWithFilters<object>>(true, GeneratorTableDisplay, null, null, (int)ApiReturnCode.success, Count);
                }
                catch (Exception err)
                {
                    return new Response<ReturnWithFilters<object>>(false, null, null, err.Message, (int)ApiReturnCode.fail);
                }
            }
            return new Response<ReturnWithFilters<object>>(false, null, null, null, (int)ApiReturnCode.success);
        }
        public List<LoadOnSideArms> GetLoadForSideArm(int sidearmid, int civilid)
        {
            var sideArm = db.TLIsideArm.FirstOrDefault(x => x.Id == sidearmid);
            var loadsid = db.TLIcivilLoads.Where(x => x.sideArmId == sidearmid && x.allCivilInstId == civilid && x.Dismantle == false).ToList();
            List<LoadOnSideArms> FinalResult = new List<LoadOnSideArms>();
            List<LoadOnCivils> listOfload = new List<LoadOnCivils>();
            LoadOnSideArms loadOnSideArm = new LoadOnSideArms();

            loadOnSideArm.SideArmId = sidearmid;
            loadOnSideArm.SideArmName = sideArm.Name;
            foreach (var lid in loadsid)
            {
                var resultLoad = db.TLIallLoadInst.FirstOrDefault(x => x.Id == lid.allLoadInstId);

                LoadOnCivils loadOnCivil = new LoadOnCivils();
                if (resultLoad != null)
                {
                    string loadName = null;
                    int loadId = 0;

                    var keyName = GetKeyName(resultLoad);
                    if (keyName == "mwBUId")
                    {
                        loadName = db.TLImwBU.Where(x => x.Id == resultLoad.mwBUId).Select(x => x.Name).FirstOrDefault();
                        loadId = db.TLImwBU.Where(x => x.Id == resultLoad.mwBUId).Select(x => x.Id).FirstOrDefault();
                    }
                    else if (keyName == "mwDishId")
                    {
                        loadName = db.TLImwDish.Where(x => x.Id == resultLoad.mwDishId).Select(x => x.DishName).FirstOrDefault();
                        loadId = db.TLImwDish.Where(x => x.Id == resultLoad.mwDishId).Select(x => x.Id).FirstOrDefault();
                    }
                    else if (keyName == "mwODUId")
                    {
                        loadName = db.TLImwODU.Where(x => x.Id == resultLoad.mwODUId).Select(x => x.Name).FirstOrDefault();
                        loadId = db.TLImwODU.Where(x => x.Id == resultLoad.mwODUId).Select(x => x.Id).FirstOrDefault();
                    }
                    else if (keyName == "mwRFUId")
                    {
                        loadName = db.TLImwRFU.Where(x => x.Id == resultLoad.mwRFUId).Select(x => x.Name).FirstOrDefault();
                        loadId = db.TLImwRFU.Where(x => x.Id == resultLoad.mwRFUId).Select(x => x.Id).FirstOrDefault();
                    }
                    else if (keyName == "mwOtherId")
                    {
                        loadName = db.TLImwOther.Where(x => x.Id == resultLoad.mwOtherId).Select(x => x.Name).FirstOrDefault();
                        loadId = db.TLImwOther.Where(x => x.Id == resultLoad.mwOtherId).Select(x => x.Id).FirstOrDefault();
                    }
                    else if (keyName == "radioAntennaId")
                    {
                        loadName = db.TLIradioAntenna.Where(x => x.Id == resultLoad.radioAntennaId).Select(x => x.Name).FirstOrDefault();
                        loadId = db.TLIradioAntenna.Where(x => x.Id == resultLoad.radioAntennaId).Select(x => x.Id).FirstOrDefault();
                    }
                    else if (keyName == "radioRRUId")
                    {
                        loadName = db.TLIRadioRRU.Where(x => x.Id == resultLoad.radioRRUId).Select(x => x.Name).FirstOrDefault();
                        loadId = db.TLIRadioRRU.Where(x => x.Id == resultLoad.radioRRUId).Select(x => x.Id).FirstOrDefault();
                    }
                    else if (keyName == "radioOtherId")
                    {
                        loadName = db.TLIradioOther.Where(x => x.Id == resultLoad.radioOtherId).Select(x => x.Name).FirstOrDefault();
                        loadId = db.TLIradioOther.Where(x => x.Id == resultLoad.radioOtherId).Select(x => x.Id).FirstOrDefault();
                    }
                    else if (keyName == "powerId")
                    {
                        loadName = db.TLIpower.Where(x => x.Id == resultLoad.powerId).Select(x => x.Name).FirstOrDefault();
                        loadId = db.TLIpower.Where(x => x.Id == resultLoad.powerId).Select(x => x.Id).FirstOrDefault();
                    }
                    else if (keyName == "loadOtherId")
                    {
                        loadName = db.TLIloadOther.Where(x => x.Id == resultLoad.loadOtherId).Select(x => x.Name).FirstOrDefault();
                        loadId = db.TLIloadOther.Where(x => x.Id == resultLoad.loadOtherId).Select(x => x.Id).FirstOrDefault();
                    }

                    loadOnCivil.LoadId = loadId;
                    loadOnCivil.LoadName = loadName;
                    listOfload.Add(loadOnCivil);
                    loadOnSideArm.LoadRelatedSide = listOfload;

                }

            }
            FinalResult.Add(loadOnSideArm);

            return FinalResult;


        }
        public string GetKeyName(TLIallLoadInst m)
        {
            string keyName = null;
            if (m.mwBUId != null)
            {
                keyName = "mwBUId";
            }
            else if (m.mwDishId != null)
            {
                keyName = "mwDishId";
            }
            else if (m.mwODUId != null)
            {
                keyName = "mwODUId";
            }
            else if (m.mwRFUId != null)
            {
                keyName = "mwRFUId";
            }
            else if (m.mwOtherId != null)
            {
                keyName = "mwOtherId";
            }
            else if (m.radioAntennaId != null)
            {
                keyName = "radioAntennaId";
            }
            else if (m.radioRRUId != null)
            {
                keyName = "radioRRUId";
            }
            else if (m.radioOtherId != null)
            {
                keyName = "radioOtherId";
            }
            else if (m.powerId != null)
            {
                keyName = "powerId";
            }
            else if (m.loadOtherId != null)
            {
                keyName = "loadOtherId";
            }
            return keyName;

        }
        public List<LoadOnCivils> GetLoadWithoutSideArm(int civilid)
        {
            var loadsid = db.TLIcivilLoads.Where(x => x.sideArmId == null && x.allCivilInstId == civilid && x.Dismantle == false).Select(y => y.allLoadInstId).ToList();
            List<LoadOnCivils> listOfload = new List<LoadOnCivils>();

            foreach (var lid in loadsid)
            {
                string keyName = null;
                LoadOnCivils loadOnCivil = new LoadOnCivils();
                var result = db.TLIallLoadInst.FirstOrDefault(x => x.Id == lid);

                if (result != null)
                {
                    string loadName = null;
                    int loadId = 0;
                    keyName = GetKeyName(result);
                    if (keyName == "mwBUId")
                    {
                        loadId = db.TLImwBU.FirstOrDefault(x => x.Id == result.mwBUId).Id;
                        loadName = db.TLImwBU.FirstOrDefault(x => x.Id == result.mwBUId).Name;
                    }
                    else if (keyName == "mwDishId")
                    {
                        loadId = db.TLImwDish.FirstOrDefault(x => x.Id == result.mwDishId).Id;
                        loadName = db.TLImwDish.FirstOrDefault(x => x.Id == result.mwDishId).DishName;
                    }
                    else if (keyName == "mwODUId")
                    {
                        loadId = db.TLImwODU.FirstOrDefault(x => x.Id == result.mwODUId).Id;
                        loadName = db.TLImwODU.FirstOrDefault(x => x.Id == result.mwODUId).Name;
                    }
                    else if (keyName == "mwRFUId")
                    {
                        loadId = db.TLImwRFU.FirstOrDefault(x => x.Id == result.mwRFUId).Id;
                        loadName = db.TLImwRFU.FirstOrDefault(x => x.Id == result.mwRFUId).Name;
                    }
                    else if (keyName == "mwOtherId")
                    {
                        loadId = db.TLImwOther.FirstOrDefault(x => x.Id == result.mwOtherId).Id;
                        loadName = db.TLImwOther.FirstOrDefault(x => x.Id == result.mwOtherId).Name;
                    }
                    else if (keyName == "radioAntennaId")
                    {
                        loadId = db.TLIradioAntenna.FirstOrDefault(x => x.Id == result.radioAntennaId).Id;
                        loadName = db.TLIradioAntenna.FirstOrDefault(x => x.Id == result.radioAntennaId).Name;
                    }
                    else if (keyName == "radioRRUId")
                    {
                        loadId= db.TLIRadioRRU.FirstOrDefault(x => x.Id == result.radioRRUId).Id;
                        loadName = db.TLIRadioRRU.FirstOrDefault(x => x.Id == result.radioRRUId).Name;
                    }
                    else if (keyName == "radioOtherId")
                    {
                        loadId = db.TLIradioOther.FirstOrDefault(x => x.Id == result.radioOtherId).Id;
                        loadName = db.TLIradioOther.FirstOrDefault(x => x.Id == result.radioOtherId).Name;
                    }
                    else if (keyName == "powerId")
                    {
                        loadId = db.TLIpower.FirstOrDefault(x => x.Id == result.powerId).Id;
                        loadName = db.TLIpower.FirstOrDefault(x => x.Id == result.powerId).Name;
                    }
                    else if (keyName == "loadOtherId")
                    {
                        loadId = db.TLIloadOther.FirstOrDefault(x => x.Id == result.loadOtherId).Id;
                        loadName = db.TLIloadOther.FirstOrDefault(x => x.Id == result.loadOtherId).Name;
                    }

                    loadOnCivil.LoadId = (int)loadId;
                    loadOnCivil.LoadName = loadName;
                    listOfload.Add(loadOnCivil);
                }


            }

            return listOfload;


        }
        public List<OtherInventories> GetOtherInventories(string SiteCode)
        {
            var loadsid = db.TLIotherInSite.Where(x => x.SiteCode == SiteCode && x.Dismantle == false).Select(y => y.allOtherInventoryInstId).ToList();
            List<OtherInventories> listOfload = new List<OtherInventories>();

            foreach (var lid in loadsid)
            {
                string OtherInventoriesName = null;
                OtherInventories loadOnCivil = new OtherInventories();
                var result = db.TLIallOtherInventoryInst.Where(x => x.Id == lid).FirstOrDefault();

                if (result != null)
                {
                    if (result.cabinetId != null)
                    {
                        OtherInventoriesName = db.TLIcabinet.Where(x => x.Id == result.cabinetId).Select(x => x.Name).FirstOrDefault();
                    }
                    else if (result.generatorId != null)
                    {
                        OtherInventoriesName = db.TLIgenerator.Where(x => x.Id == result.generatorId).Select(x => x.Name).FirstOrDefault();
                    }
                    else if (result.solarId != null)
                    {
                        OtherInventoriesName = db.TLIsolar.Where(x => x.Id == result.solarId).Select(x => x.Name).FirstOrDefault();
                    }
                    loadOnCivil.OtherInventoriesId = (int)lid;
                    loadOnCivil.OtherInventoriesName = OtherInventoriesName;
                    listOfload.Add(loadOnCivil);
                }


            }

            return listOfload;


        }
        public List<FileRelated> GetFileRelated(string SiteCode)
        {
            var file = db.TLIattachedFiles.Where(x => x.SiteCode == SiteCode).ToList();
            List<FileRelated> listOfload = new List<FileRelated>();
            FileRelated loadOnCivil = new FileRelated();
            foreach (var item in file)
            {
                loadOnCivil.FileId = (int)item.Id;
                loadOnCivil.FileName = item.Name;
                listOfload.Add(loadOnCivil);
            }
            return listOfload;
        }
        public Response<List<ListOfCivilLoads>> GetAllItemsonSite(string SiteCode)
        {
            try
            {

                int count = 0;
                var query = db.TLIcivilLoads.Where(x => x.sideArmId != null && x.Dismantle == false && x.SiteCode == SiteCode).Include(x => x.site).Include(x => x.allLoadInst).Include(y => y.sideArm).Include(z => z.allCivilInst).ToList();
                var query2 = db.TLIcivilLoads.Where(x => x.sideArmId == null && x.Dismantle == false && x.SiteCode == SiteCode).Include(x => x.site).Include(x => x.allLoadInst).Include(z => z.allCivilInst).ToList();
                List<ListOfCivilLoads> result = new List<ListOfCivilLoads>();
                List<int> ExcludeList = new List<int>();
                List<int> ExcludeList2 = new List<int>();
                List<CivilLoad> civilLoads = new List<CivilLoad>();
                CivilLoad item = new CivilLoad();
                ListOfCivilLoads listOfCivilLoads = new ListOfCivilLoads();
                foreach (var q in query)
                {
                    if (!ExcludeList.Contains(q.allCivilInstId))
                    {

                        ExcludeList.Add(q.allCivilInstId);

                        if (q.allCivilInst.civilWithLegsId != null)
                        {
                            var Civil = db.TLIcivilWithLegs.FirstOrDefault(x => x.Id == q.allCivilInst.civilWithLegsId);

                            var LoadOnSides = GetLoadForSideArm((int)q.sideArmId, q.allCivilInstId);

                            var LoadOnCivils = GetLoadWithoutSideArm(q.allCivilInstId);

                            item = new CivilLoad()
                            {
                                CivilId = Civil.Id,
                                CivilName = Civil.Name,
                                CivilLoadWithSideArm = LoadOnSides,
                                LoadDirOnCivil = LoadOnCivils
                            };
                            civilLoads.Add(item);

                        }
                        else if (q.allCivilInst.civilWithoutLegId != null)
                        {
                            var Civil = db.TLIcivilWithoutLeg.FirstOrDefault(x => x.Id == q.allCivilInst.civilWithoutLegId);
                            var LoadOnSides = GetLoadForSideArm((int)q.sideArmId, q.allCivilInstId);

                            var LoadOnCivils = GetLoadWithoutSideArm(q.allCivilInstId);

                            item = new CivilLoad()
                            {
                                CivilId = Civil.Id,
                                CivilName = Civil.Name,
                                CivilLoadWithSideArm = LoadOnSides,
                                LoadDirOnCivil = LoadOnCivils
                            };
                            civilLoads.Add(item);
                        }
                        else
                        {
                            var Civil = db.TLIcivilNonSteel.FirstOrDefault(x => x.Id == q.allCivilInst.civilNonSteelId);
                            var LoadOnSides = GetLoadForSideArm((int)q.sideArmId, q.allCivilInstId);

                            var LoadOnCivils = GetLoadWithoutSideArm(q.allCivilInstId);

                            item = new CivilLoad()
                            {
                                CivilId = Civil.Id,
                                CivilName = Civil.Name,
                                CivilLoadWithSideArm = LoadOnSides,
                                LoadDirOnCivil = LoadOnCivils
                            };
                            civilLoads.Add(item);
                        }
                     
                    }
                }


                //Civil onlay have load without any side arm
                foreach (var q in query2)
                {
                    if (!ExcludeList2.Contains(q.allCivilInstId) && !ExcludeList.Contains(q.allCivilInstId))
                    {
                        ExcludeList2.Add(q.allCivilInstId);
                        if (q.allCivilInst.civilWithLegsId != null)
                        {
                            var Civil = db.TLIcivilWithLegs.FirstOrDefault(x => x.Id == q.allCivilInst.civilWithLegsId);
                            var LoadOnCivils = GetLoadWithoutSideArm(q.allCivilInstId);
                            item.LoadDirOnCivil = LoadOnCivils;

                            item = new CivilLoad()
                            {
                                CivilId = Civil.Id,
                                CivilName = Civil.Name,
                                LoadDirOnCivil = LoadOnCivils
                            };
                            civilLoads.Add(item);
                        }
                        else if (q.allCivilInst.civilWithoutLegId != null)
                        {
                            var Civil = db.TLIcivilWithoutLeg.FirstOrDefault(x => x.Id == q.allCivilInst.civilWithoutLegId);
                            var LoadOnCivils = GetLoadWithoutSideArm(q.allCivilInstId);
                            item.LoadDirOnCivil = LoadOnCivils;

                            item = new CivilLoad()
                            {
                                CivilId = Civil.Id,
                                CivilName = Civil.Name,
                                LoadDirOnCivil = LoadOnCivils
                            };
                            civilLoads.Add(item);

                        }
                        else
                        {
                            var Civil = db.TLIcivilNonSteel.FirstOrDefault(x => x.Id == q.allCivilInst.civilNonSteelId);
                            var LoadOnCivils = GetLoadWithoutSideArm(q.allCivilInstId);
                            item.LoadDirOnCivil = LoadOnCivils;

                            item = new CivilLoad()
                            {
                                CivilId = Civil.Id,
                                CivilName = Civil.Name,
                                LoadDirOnCivil = LoadOnCivils
                            };
                            civilLoads.Add(item);

                        }

                    
                    }
                }
                count = result.Count();
                var OtherInventories = GetOtherInventories(SiteCode);
                listOfCivilLoads.OtherInventories = OtherInventories;


                var FileRelated = GetFileRelated(SiteCode);
                listOfCivilLoads.FileRelated = FileRelated;

                result.Add(new ListOfCivilLoads()
                {
                    CivilLoad = civilLoads,
                    OtherInventories = OtherInventories,
                    FileRelated = FileRelated
                });


                return new Response<List<ListOfCivilLoads>>(true, result, null, null, (int)Helpers.Constants.ApiReturnCode.success, result.Count);
            }
            catch (Exception ex)
            {
                return new Response<List<ListOfCivilLoads>>(false, null, null, ex.Message, (int)Helpers.Constants.ApiReturnCode.fail);

            }
        }
        public Response<ReturnWithFilters<object>> GetConfigurationTables(SiteFilter BaseFilters, string TableNameInstallation, int CategoryId, bool WithFilterData, CombineFilters CombineFilters, ParameterPagination parameterPagination, string LibraryType)
        {
            if (Helpers.Constants.CivilType.TLIcivilWithLegs.ToString() == TableNameInstallation)
            {
                try
                {
                    int Count = 0;
                    List<object> OutPutList = new List<object>();
                    ReturnWithFilters<object> CivilTableDisplay = new ReturnWithFilters<object>();

                    //
                    // Get All CivilSiteDateRecords To This BaseFilter
                    //
                    List<TLIcivilSiteDate> AllCivilSiteDateRecords = GetCivilSiteDateBySiteBaseFilter(BaseFilters, "CivilWithLegs", CombineFilters, null);

                    List<TLIcivilSiteDate> CivilSiteDateRecords = GetMaxInstallationDates(out Count, AllCivilSiteDateRecords, "CivilWithLegs", parameterPagination);

                    List<CivilWithLegsViewModel> Civils = _mapper.Map<List<CivilWithLegsViewModel>>(CivilSiteDateRecords.Select(x =>
                        x.allCivilInst.civilWithLegs).ToList());

                    List<TLIattributeViewManagment> AllAttributes = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                       (x.Enable && x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.CivilWithLegInstallation.ToString() &&
                       (x.AttributeActivatedId != null ?
                            (x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString() && x.AttributeActivated.enable) :
                            (!x.DynamicAtt.LibraryAtt && !x.DynamicAtt.disable && x.DynamicAtt.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString()))) ||
                        (x.AttributeActivated != null ?
                            ((x.AttributeActivated.Key.ToLower() == "id" || x.AttributeActivated.Key.ToLower() == "active") && x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString()) : false),
                           x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1, x => x.EditableManagmentView.TLItablesNames2,
                           x => x.AttributeActivated, x => x.DynamicAtt, x => x.DynamicAtt.tablesNames, x => x.DynamicAtt.DataType).ToList();

                    List<TLIattributeViewManagment> NotDateTimeInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() != "datetime") : false).ToList();

                    List<TLIattributeViewManagment> NotDateTimeDynamicInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() != "datetime" : false).ToList();

                    List<TLIattributeViewManagment> DateTimeInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() == "datetime") : false).ToList();

                    List<TLIattributeViewManagment> DateTimeDynamicInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() == "datetime" : false).ToList();

                    foreach (CivilWithLegsViewModel CivilWithLegInstallationObject in Civils)
                    {
                        dynamic DynamicCivilWithLegInstallation = new ExpandoObject();

                        //
                        // Installation Object ViewModel...
                        //
                        if (NotDateTimeInstallationAttributesViewModel != null ? NotDateTimeInstallationAttributesViewModel.Count > 0 : false)
                        {
                            List<PropertyInfo> InstallationProps = typeof(CivilWithLegsViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() != "datetime" :
                                    (x.PropertyType.Name.ToLower() != "datetime")) :
                                (x.PropertyType.Name.ToLower() != "datetime")).ToList();

                            foreach (PropertyInfo prop in InstallationProps)
                            {
                                if (prop.Name.ToLower().Contains("_name") &&
                                    NotDateTimeInstallationAttributesViewModel.Exists(x =>
                                        x.AttributeActivated.Label.ToLower() == prop.Name.ToLower()))
                                {
                                    object ForeignKeyNamePropObject = prop.GetValue(CivilWithLegInstallationObject, null);
                                    ((IDictionary<String, Object>)DynamicCivilWithLegInstallation).Add(new KeyValuePair<string, object>(prop.Name, ForeignKeyNamePropObject));
                                }
                                else if (NotDateTimeInstallationAttributesViewModel.Exists(x =>
                                     x.AttributeActivated.Key.ToLower() == prop.Name.ToLower()) &&
                                    !prop.Name.ToLower().Contains("_name") &&
                                    (prop.Name.ToLower().Substring(Math.Max(0, prop.Name.Length - 2)) != "id" || prop.Name.ToLower() == "id"))
                                {
                                    if (prop.Name.ToLower() != "id" && prop.Name.ToLower() != "active")
                                    {
                                        TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                            x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString() &&
                                            x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                        if (LabelName != null)
                                        {
                                            object PropObject = prop.GetValue(CivilWithLegInstallationObject, null);
                                            ((IDictionary<String, Object>)DynamicCivilWithLegInstallation).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                        }
                                    }
                                    else
                                    {
                                        object PropObject = prop.GetValue(CivilWithLegInstallationObject, null);
                                        ((IDictionary<String, Object>)DynamicCivilWithLegInstallation).Add(new KeyValuePair<string, object>(prop.Name, PropObject));
                                    }
                                }
                            }
                        }

                        //
                        // Installation Dynamic Attributes... (Not DateTime DataType Attribute)
                        //
                        if (NotDateTimeDynamicInstallationAttributesViewModel != null ? NotDateTimeDynamicInstallationAttributesViewModel.Count > 0 : false)
                        {
                            List<TLIdynamicAtt> NotDateTimeInstallationDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                                !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString() &&
                                !x.LibraryAtt && x.DataType.Name.ToLower() != "datetime" &&
                                NotDateTimeDynamicInstallationAttributesViewModel.Exists(y => y.DynamicAttId == x.Id)
                                    , x => x.tablesNames, x => x.DataType).ToList();

                            List<TLIdynamicAttInstValue> NotDateTimeDynamicAttInstValues = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                                !x.DynamicAtt.LibraryAtt && !x.disable &&
                                x.InventoryId == CivilWithLegInstallationObject.Id &&
                                NotDateTimeInstallationDynamicAttributes.Exists(y => y.Key.ToLower() == x.DynamicAtt.Key.ToLower()) &&
                                x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString()
                                    , x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                            foreach (TLIdynamicAtt InstallationDynamicAtt in NotDateTimeInstallationDynamicAttributes)
                            {
                                TLIdynamicAttInstValue DynamicAttInstValue = NotDateTimeDynamicAttInstValues.FirstOrDefault(x =>
                                    x.DynamicAtt.Key.ToLower() == InstallationDynamicAtt.Key.ToLower());

                                if (DynamicAttInstValue != null)
                                {
                                    dynamic DynamicAttValue = new ExpandoObject();
                                    if (DynamicAttInstValue.ValueString != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueString;

                                    else if (DynamicAttInstValue.ValueDouble != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueDouble;

                                    else if (DynamicAttInstValue.ValueDateTime != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueDateTime;

                                    else if (DynamicAttInstValue.ValueBoolean != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueBoolean;

                                    ((IDictionary<String, Object>)DynamicCivilWithLegInstallation).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, DynamicAttValue));
                                }
                                else
                                {
                                    ((IDictionary<String, Object>)DynamicCivilWithLegInstallation).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, null));
                                }
                            }
                        }

                        //
                        // Installation Object ViewModel... (DateTime DataType Attribute)
                        //
                        dynamic DateTimeAttributes = new ExpandoObject();
                        if (DateTimeInstallationAttributesViewModel != null ? DateTimeInstallationAttributesViewModel.Count() > 0 : false)
                        {
                            List<PropertyInfo> DateTimeInstallationProps = typeof(CivilWithLegsViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() == "datetime" :
                                    (x.PropertyType.Name.ToLower() == "datetime")) :
                                (x.PropertyType.Name.ToLower() == "datetime")).ToList();

                            foreach (PropertyInfo prop in DateTimeInstallationProps)
                            {
                                TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                    x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString() &&
                                    x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                if (LabelName != null)
                                {
                                    object PropObject = prop.GetValue(CivilWithLegInstallationObject, null);
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                }
                            }
                        }

                        //
                        // Installation Dynamic Attributes... (DateTime DataType Attribute)
                        // 
                        if (DateTimeDynamicInstallationAttributesViewModel != null ? DateTimeDynamicInstallationAttributesViewModel.Count() > 0 : false)
                        {
                            List<TLIdynamicAtt> DateTimeInstallationDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                               !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString() &&
                               !x.LibraryAtt && x.DataType.Name.ToLower() == "datetime" &&
                                DateTimeDynamicInstallationAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames).ToList();

                            List<TLIdynamicAttInstValue> DateTimeDynamicAttInstValues = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                                x.InventoryId == CivilWithLegInstallationObject.Id && !x.disable &&
                               !x.DynamicAtt.LibraryAtt &&
                                DateTimeInstallationDynamicAttributes.Exists(y => y.Key.ToLower() == x.DynamicAtt.Key.ToLower()) &&
                                x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString()
                                   , x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                            foreach (TLIdynamicAtt InstallationDynamicAtt in DateTimeInstallationDynamicAttributes)
                            {
                                TLIdynamicAttInstValue DynamicAttInstallationValue = DateTimeDynamicAttInstValues.FirstOrDefault(x =>
                                    x.DynamicAtt.Key.ToLower() == InstallationDynamicAtt.Key.ToLower());

                                if (DynamicAttInstallationValue != null)
                                {
                                    dynamic DynamicAttValue = new ExpandoObject();
                                    if (DynamicAttInstallationValue.ValueDateTime != null)
                                        DynamicAttValue = DynamicAttInstallationValue.ValueDateTime;

                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, DynamicAttValue));
                                }
                                else
                                {
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, null));
                                }
                            }
                        }

                        ((IDictionary<String, Object>)DynamicCivilWithLegInstallation).Add(new KeyValuePair<string, object>("DateTimeAttributes", DateTimeAttributes));

                        OutPutList.Add(DynamicCivilWithLegInstallation);
                    }

                    CivilTableDisplay.Model = OutPutList;

                    if (WithFilterData)
                    {
                        CivilTableDisplay.filters = _unitOfWork.CivilWithLegsRepository.GetRelatedTables();
                    }
                    else
                    {
                        CivilTableDisplay.filters = null;
                    }

                    return new Response<ReturnWithFilters<object>>(true, CivilTableDisplay, null, null, (int)Helpers.Constants.ApiReturnCode.success, Count);
                }
                catch (Exception err)
                {
                    return new Response<ReturnWithFilters<object>>(true, null, null, err.Message, (int)Helpers.Constants.ApiReturnCode.fail);
                }
            }
            else if (Helpers.Constants.CivilType.TLIcivilWithoutLeg.ToString() == TableNameInstallation)
            {
                try
                {
                    int Count = 0;
                    List<object> OutPutList = new List<object>();
                    ReturnWithFilters<object> CivilTableDisplay = new ReturnWithFilters<object>();

                    List<FilterObjectList> AttributeFilters = CombineFilters.filters;
                    List<DateFilterViewModel> DateFilter = CombineFilters.DateFilter;

                    //
                    // Get All CivilSiteDateRecords To This BaseFilter
                    //
                    List<TLIcivilSiteDate> AllCivilSiteDateRecords = GetCivilSiteDateBySiteBaseFilter(BaseFilters, "CivilWithoutLegs", CombineFilters, CategoryId);

                    List<TLIcivilSiteDate> CivilSiteDateRecords = GetMaxInstallationDates(out Count, AllCivilSiteDateRecords, "CivilWithoutLegs", parameterPagination);

                    List<CivilWithoutLegViewModel> Civils = _mapper.Map<List<CivilWithoutLegViewModel>>(CivilSiteDateRecords.Select(x =>
                        x.allCivilInst.civilWithoutLeg).ToList());

                    List<AttActivatedCategoryViewModel> AttributeActivatedCategories = _mapper.Map<List<AttActivatedCategoryViewModel>>(_unitOfWork.AttActivatedCategoryRepository.GetIncludeWhere(x =>
                        (x.civilWithoutLegCategoryId.Value == CategoryId) &&
                        (x.enable) &&
                        (x.attributeActivated != null ?
                            ((x.attributeActivated.enable && x.attributeActivated.Tabel == Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString()) ||
                            ((x.attributeActivated.Key.ToLower() == "id" || x.attributeActivated.Key.ToLower() == "active") && x.attributeActivated.Tabel == Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString())) : false)
                        , x => x.attributeActivated).ToList());

                    string CategoryName = _unitOfWork.CivilWithoutLegCategoryRepository.GetByID(CategoryId).Name;
                    string EditableMangmentCategoryViewName = "";
                    if (CategoryName == "Mast")
                        EditableMangmentCategoryViewName = Helpers.Constants.EditableManamgmantViewNames.CivilWithoutLegInstallationMast.ToString();
                    else if (CategoryName == "Capsule")
                        EditableMangmentCategoryViewName = Helpers.Constants.EditableManamgmantViewNames.CivilWithoutLegInstallationCapsule.ToString();
                    else if (CategoryName == "Monopole")
                        EditableMangmentCategoryViewName = Helpers.Constants.EditableManamgmantViewNames.CivilWithoutLegInstallationMonopole.ToString();

                    List<TLIattributeViewManagment> AllAttributes = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                       (x.Enable && x.EditableManagmentView.View == EditableMangmentCategoryViewName &&
                       (x.AttributeActivatedId != null ?
                            (x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString() && x.AttributeActivated.enable &&
                                AttributeActivatedCategories.Exists(y => y.attributeActivatedId == x.AttributeActivatedId)) :
                            (!x.DynamicAtt.LibraryAtt && !x.DynamicAtt.disable && x.DynamicAtt.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString()))) ||
                        (x.AttributeActivated != null ?
                            ((x.AttributeActivated.Key.ToLower() == "id" || x.AttributeActivated.Key.ToLower() == "active") && x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString()) : false),
                           x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1, x => x.EditableManagmentView.TLItablesNames2,
                           x => x.AttributeActivated, x => x.DynamicAtt, x => x.DynamicAtt.tablesNames, x => x.DynamicAtt.DataType).ToList();

                    List<TLIattributeViewManagment> NotDateTimeInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() != "datetime") : false).ToList();

                    List<TLIattributeViewManagment> NotDateTimeDynamicInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() != "datetime" : false).ToList();

                    List<TLIattributeViewManagment> DateTimeInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() == "datetime") : false).ToList();

                    List<TLIattributeViewManagment> DateTimeDynamicInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() == "datetime" : false).ToList();

                    foreach (CivilWithoutLegViewModel CivilWithoutLegInstallationObject in Civils)
                    {
                        dynamic DynamicCivilWithoutLegInstallation = new ExpandoObject();

                        //
                        // Installation Object ViewModel...
                        //
                        if (NotDateTimeInstallationAttributesViewModel != null ? NotDateTimeInstallationAttributesViewModel.Count > 0 : false)
                        {
                            List<PropertyInfo> InstallationProps = typeof(CivilWithoutLegViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() != "datetime" :
                                    (x.PropertyType.Name.ToLower() != "datetime")) :
                                (x.PropertyType.Name.ToLower() != "datetime")).ToList();

                            foreach (PropertyInfo prop in InstallationProps)
                            {
                                if (prop.Name.ToLower().Contains("_name") &&
                                    NotDateTimeInstallationAttributesViewModel.Exists(x =>
                                        x.AttributeActivated.Label.ToLower() == prop.Name.ToLower()))
                                {
                                    object ForeignKeyNamePropObject = prop.GetValue(CivilWithoutLegInstallationObject, null);
                                    ((IDictionary<String, Object>)DynamicCivilWithoutLegInstallation).Add(new KeyValuePair<string, object>(prop.Name, ForeignKeyNamePropObject));
                                }
                                else if (NotDateTimeInstallationAttributesViewModel.Exists(x =>
                                     x.AttributeActivated.Key.ToLower() == prop.Name.ToLower()) &&
                                    !prop.Name.ToLower().Contains("_name") &&
                                    (prop.Name.ToLower().Substring(Math.Max(0, prop.Name.Length - 2)) != "id" || prop.Name.ToLower() == "id"))
                                {
                                    if (prop.Name.ToLower() != "id" && prop.Name.ToLower() != "active")
                                    {
                                        TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                            x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString() &&
                                            x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                        if (LabelName != null)
                                        {
                                            object PropObject = prop.GetValue(CivilWithoutLegInstallationObject, null);
                                            ((IDictionary<String, Object>)DynamicCivilWithoutLegInstallation).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                        }
                                    }
                                    else
                                    {
                                        object PropObject = prop.GetValue(CivilWithoutLegInstallationObject, null);
                                        ((IDictionary<String, Object>)DynamicCivilWithoutLegInstallation).Add(new KeyValuePair<string, object>(prop.Name, PropObject));
                                    }
                                }
                            }
                        }

                        //
                        // Installation Dynamic Attributes... (Not DateTime DataType Attribute)
                        //
                        if (NotDateTimeDynamicInstallationAttributesViewModel != null ? NotDateTimeDynamicInstallationAttributesViewModel.Count > 0 : false)
                        {
                            List<TLIdynamicAtt> NotDateTimeInstallationDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                                !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString() &&
                                !x.LibraryAtt && x.DataType.Name.ToLower() != "datetime" &&
                                NotDateTimeDynamicInstallationAttributesViewModel.Exists(y => y.DynamicAttId == x.Id)
                                    , x => x.tablesNames, x => x.DataType).ToList();

                            List<TLIdynamicAttInstValue> NotDateTimeDynamicAttInstValues = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                                !x.DynamicAtt.LibraryAtt && !x.disable &&
                                x.InventoryId == CivilWithoutLegInstallationObject.Id &&
                                NotDateTimeInstallationDynamicAttributes.Exists(y => y.Key.ToLower() == x.DynamicAtt.Key.ToLower()) &&
                                x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString()
                                    , x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                            foreach (TLIdynamicAtt InstallationDynamicAtt in NotDateTimeInstallationDynamicAttributes)
                            {
                                TLIdynamicAttInstValue DynamicAttInstValue = NotDateTimeDynamicAttInstValues.FirstOrDefault(x =>
                                    x.DynamicAtt.Key.ToLower() == InstallationDynamicAtt.Key.ToLower());

                                if (DynamicAttInstValue != null)
                                {
                                    dynamic DynamicAttValue = new ExpandoObject();
                                    if (DynamicAttInstValue.ValueString != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueString;

                                    else if (DynamicAttInstValue.ValueDouble != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueDouble;

                                    else if (DynamicAttInstValue.ValueDateTime != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueDateTime;

                                    else if (DynamicAttInstValue.ValueBoolean != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueBoolean;

                                    ((IDictionary<String, Object>)DynamicCivilWithoutLegInstallation).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, DynamicAttValue));
                                }
                                else
                                {
                                    ((IDictionary<String, Object>)DynamicCivilWithoutLegInstallation).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, null));
                                }
                            }
                        }

                        //
                        // Installation Object ViewModel... (DateTime DataType Attribute)
                        //
                        dynamic DateTimeAttributes = new ExpandoObject();
                        if (DateTimeInstallationAttributesViewModel != null ? DateTimeInstallationAttributesViewModel.Count() > 0 : false)
                        {
                            List<PropertyInfo> DateTimeInstallationProps = typeof(CivilWithoutLegViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name == "datetime" :
                                    (x.PropertyType.Name.ToLower() == "datetime")) :
                                (x.PropertyType.Name.ToLower() == "datetime")).ToList();

                            foreach (PropertyInfo prop in DateTimeInstallationProps)
                            {
                                TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                    x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString() &&
                                    x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                if (LabelName != null)
                                {
                                    object PropObject = prop.GetValue(CivilWithoutLegInstallationObject, null);
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                }
                            }
                        }

                        //
                        // Installation Dynamic Attributes... (DateTime DataType Attribute)
                        //
                        if (DateTimeDynamicInstallationAttributesViewModel != null ? DateTimeDynamicInstallationAttributesViewModel.Count() > 0 : false)
                        {
                            List<TLIdynamicAtt> DateTimeInstallationDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                               !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString() &&
                               !x.LibraryAtt && x.DataType.Name.ToLower() == "datetime" &&
                                DateTimeDynamicInstallationAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames).ToList();

                            List<TLIdynamicAttInstValue> DateTimeDynamicAttInstValues = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                                x.InventoryId == CivilWithoutLegInstallationObject.Id && !x.disable &&
                               !x.DynamicAtt.LibraryAtt &&
                                DateTimeInstallationDynamicAttributes.Exists(y => y.Key.ToLower() == x.DynamicAtt.Key.ToLower()) &&
                                x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString()
                                   , x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                            foreach (TLIdynamicAtt InstallationDynamicAtt in DateTimeInstallationDynamicAttributes)
                            {
                                TLIdynamicAttInstValue DynamicAttInstallationValue = DateTimeDynamicAttInstValues.FirstOrDefault(x =>
                                    x.DynamicAtt.Key.ToLower() == InstallationDynamicAtt.Key.ToLower());

                                if (DynamicAttInstallationValue != null)
                                {
                                    dynamic DynamicAttValue = new ExpandoObject();
                                    if (DynamicAttInstallationValue.ValueDateTime != null)
                                        DynamicAttValue = DynamicAttInstallationValue.ValueDateTime;

                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, DynamicAttValue));
                                }
                                else
                                {
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, null));
                                }
                            }
                        }

                        ((IDictionary<String, Object>)DynamicCivilWithoutLegInstallation).Add(new KeyValuePair<string, object>("DateTimeAttributes", DateTimeAttributes));

                        OutPutList.Add(DynamicCivilWithoutLegInstallation);
                    }

                    CivilTableDisplay.Model = OutPutList;

                    if (WithFilterData == true)
                    {
                        CivilTableDisplay.filters = _unitOfWork.CivilWithoutLegRepository.GetRelatedTables();
                    }
                    else
                    {
                        CivilTableDisplay.filters = null;
                    }

                    return new Response<ReturnWithFilters<object>>(true, CivilTableDisplay, null, null, (int)Helpers.Constants.ApiReturnCode.success, Count);
                }
                catch (Exception err)
                {
                    return new Response<ReturnWithFilters<object>>(true, null, null, err.Message, (int)Helpers.Constants.ApiReturnCode.fail);
                }
            }
            else if (Helpers.Constants.CivilType.TLIcivilNonSteel.ToString() == TableNameInstallation)
            {
                try
                {
                    int Count = 0;
                    List<object> OutPutList = new List<object>();
                    ReturnWithFilters<object> CivilTableDisplay = new ReturnWithFilters<object>();

                    List<FilterObjectList> AttributeFilters = CombineFilters.filters;
                    List<DateFilterViewModel> DateFilter = CombineFilters.DateFilter;

                    //
                    // Get All CivilSiteDateRecords To This BaseFilter
                    //
                    List<TLIcivilSiteDate> AllCivilSiteDateRecords = GetCivilSiteDateBySiteBaseFilter(BaseFilters, "CivilNonSteel", CombineFilters, null);

                    List<TLIcivilSiteDate> CivilSiteDateRecords = GetMaxInstallationDates(out Count, AllCivilSiteDateRecords, "CivilNonSteel", parameterPagination);

                    List<CivilNonSteelViewModel> Civils = _mapper.Map<List<CivilNonSteelViewModel>>(CivilSiteDateRecords.Select(x =>
                        x.allCivilInst.civilNonSteel).ToList());

                    List<TLIattributeViewManagment> AllAttributes = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                       (x.Enable && x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.CivilNonSteelInstallation.ToString() &&
                       (x.AttributeActivatedId != null ?
                            (x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIcivilNonSteel.ToString() && x.AttributeActivated.enable) :
                            (!x.DynamicAtt.LibraryAtt && !x.DynamicAtt.disable && x.DynamicAtt.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcivilNonSteel.ToString()))) ||
                        (x.AttributeActivated != null ?
                            ((x.AttributeActivated.Key.ToLower() == "id" || x.AttributeActivated.Key.ToLower() == "active") && x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIcivilNonSteel.ToString()) : false),
                           x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1, x => x.EditableManagmentView.TLItablesNames2,
                           x => x.AttributeActivated, x => x.DynamicAtt, x => x.DynamicAtt.tablesNames, x => x.DynamicAtt.DataType).ToList();

                    List<TLIattributeViewManagment> NotDateTimeInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() != "datetime") : false).ToList();

                    List<TLIattributeViewManagment> NotDateTimeDynamicInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() != "datetime" : false).ToList();

                    List<TLIattributeViewManagment> DateTimeInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() == "datetime") : false).ToList();

                    List<TLIattributeViewManagment> DateTimeDynamicInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() == "datetime" : false).ToList();

                    foreach (CivilNonSteelViewModel CivilNonSteelInstallationObject in Civils)
                    {
                        dynamic DynamicCivilNonSteelInstallation = new ExpandoObject();

                        //
                        // Installation Object ViewModel...
                        //
                        if (NotDateTimeInstallationAttributesViewModel != null ? NotDateTimeInstallationAttributesViewModel.Count > 0 : false)
                        {
                            List<PropertyInfo> InstallationProps = typeof(CivilNonSteelViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() != "datetime" :
                                    (x.PropertyType.Name.ToLower() != "datetime")) :
                                (x.PropertyType.Name.ToLower() != "datetime")).ToList();

                            foreach (PropertyInfo prop in InstallationProps)
                            {
                                if (prop.Name.ToLower().Contains("_name") &&
                                    NotDateTimeInstallationAttributesViewModel.Exists(x =>
                                        x.AttributeActivated.Label.ToLower() == prop.Name.ToLower()))
                                {
                                    object ForeignKeyNamePropObject = prop.GetValue(CivilNonSteelInstallationObject, null);
                                    ((IDictionary<String, Object>)DynamicCivilNonSteelInstallation).Add(new KeyValuePair<string, object>(prop.Name, ForeignKeyNamePropObject));
                                }
                                else if (NotDateTimeInstallationAttributesViewModel.Exists(x =>
                                     x.AttributeActivated.Key.ToLower() == prop.Name.ToLower()) &&
                                    !prop.Name.ToLower().Contains("_name") &&
                                    (prop.Name.ToLower().Substring(Math.Max(0, prop.Name.Length - 2)) != "id" || prop.Name.ToLower() == "id"))
                                {
                                    if (prop.Name.ToLower() != "id" && prop.Name.ToLower() != "active")
                                    {
                                        TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                            x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIcivilNonSteel.ToString() &&
                                            x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                        if (LabelName != null)
                                        {
                                            object PropObject = prop.GetValue(CivilNonSteelInstallationObject, null);
                                            ((IDictionary<String, Object>)DynamicCivilNonSteelInstallation).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                        }
                                    }
                                    else
                                    {
                                        object PropObject = prop.GetValue(CivilNonSteelInstallationObject, null);
                                        ((IDictionary<String, Object>)DynamicCivilNonSteelInstallation).Add(new KeyValuePair<string, object>(prop.Name, PropObject));
                                    }
                                }
                            }
                        }

                        //
                        // Installation Dynamic Attributes... (Not DateTime DataType Attribute)
                        //
                        if (NotDateTimeDynamicInstallationAttributesViewModel != null ? NotDateTimeDynamicInstallationAttributesViewModel.Count > 0 : false)
                        {
                            List<TLIdynamicAtt> NotDateTimeInstallationDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                                !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcivilNonSteel.ToString() &&
                                !x.LibraryAtt && x.DataType.Name.ToLower() != "datetime" &&
                                NotDateTimeDynamicInstallationAttributesViewModel.Exists(y => y.DynamicAttId == x.Id)
                                    , x => x.tablesNames, x => x.DataType).ToList();

                            List<TLIdynamicAttInstValue> NotDateTimeDynamicAttInstValues = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                                !x.DynamicAtt.LibraryAtt && !x.disable &&
                                x.InventoryId == CivilNonSteelInstallationObject.Id &&
                                NotDateTimeInstallationDynamicAttributes.Exists(y => y.Key.ToLower() == x.DynamicAtt.Key.ToLower()) &&
                                x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcivilNonSteel.ToString()
                                    , x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                            foreach (TLIdynamicAtt InstallationDynamicAtt in NotDateTimeInstallationDynamicAttributes)
                            {
                                TLIdynamicAttInstValue DynamicAttInstValue = NotDateTimeDynamicAttInstValues.FirstOrDefault(x =>
                                    x.DynamicAtt.Key.ToLower() == InstallationDynamicAtt.Key.ToLower());

                                if (DynamicAttInstValue != null)
                                {
                                    dynamic DynamicAttValue = new ExpandoObject();
                                    if (DynamicAttInstValue.ValueString != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueString;

                                    else if (DynamicAttInstValue.ValueDouble != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueDouble;

                                    else if (DynamicAttInstValue.ValueDateTime != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueDateTime;

                                    else if (DynamicAttInstValue.ValueBoolean != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueBoolean;

                                    ((IDictionary<String, Object>)DynamicCivilNonSteelInstallation).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, DynamicAttValue));
                                }
                                else
                                {
                                    ((IDictionary<String, Object>)DynamicCivilNonSteelInstallation).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, null));
                                }
                            }
                        }

                        //
                        // Installation Object ViewModel... (DateTime DataType Attribute)
                        //
                        dynamic DateTimeAttributes = new ExpandoObject();
                        if (DateTimeInstallationAttributesViewModel != null ? DateTimeInstallationAttributesViewModel.Count() > 0 : false)
                        {
                            List<PropertyInfo> DateTimeInstallationProps = typeof(CivilNonSteelViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name == "datetime" :
                                    (x.PropertyType.Name.ToLower() == "datetime")) :
                                (x.PropertyType.Name.ToLower() == "datetime")).ToList();

                            foreach (PropertyInfo prop in DateTimeInstallationProps)
                            {
                                TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                    x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIcivilNonSteel.ToString() &&
                                    x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                if (LabelName != null)
                                {
                                    object PropObject = prop.GetValue(CivilNonSteelInstallationObject, null);
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                }
                            }
                        }

                        //
                        // Library Dynamic Attributes... (DateTime DataType Attribute)
                        // 
                        if (DateTimeDynamicInstallationAttributesViewModel != null ? DateTimeDynamicInstallationAttributesViewModel.Count() > 0 : false)
                        {
                            List<TLIdynamicAtt> DateTimeInstallationDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                               !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcivilNonSteel.ToString() &&
                               !x.LibraryAtt && x.DataType.Name.ToLower() == "datetime" &&
                                DateTimeDynamicInstallationAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames).ToList();

                            List<TLIdynamicAttInstValue> DateTimeDynamicAttInstValues = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                                x.InventoryId == CivilNonSteelInstallationObject.Id && !x.disable &&
                               !x.DynamicAtt.LibraryAtt &&
                                DateTimeInstallationDynamicAttributes.Exists(y => y.Key.ToLower() == x.DynamicAtt.Key.ToLower()) &&
                                x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcivilNonSteel.ToString()
                                   , x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                            foreach (TLIdynamicAtt InstallationDynamicAtt in DateTimeInstallationDynamicAttributes)
                            {
                                TLIdynamicAttInstValue DynamicAttInstallationValue = DateTimeDynamicAttInstValues.FirstOrDefault(x =>
                                    x.DynamicAtt.Key.ToLower() == InstallationDynamicAtt.Key.ToLower());

                                if (DynamicAttInstallationValue != null)
                                {
                                    dynamic DynamicAttValue = new ExpandoObject();
                                    if (DynamicAttInstallationValue.ValueDateTime != null)
                                        DynamicAttValue = DynamicAttInstallationValue.ValueDateTime;

                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, DynamicAttValue));
                                }
                                else
                                {
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, null));
                                }
                            }
                        }

                        ((IDictionary<String, Object>)DynamicCivilNonSteelInstallation).Add(new KeyValuePair<string, object>("DateTimeAttributes", DateTimeAttributes));

                        OutPutList.Add(DynamicCivilNonSteelInstallation);
                    }

                    CivilTableDisplay.Model = OutPutList;

                    if (WithFilterData == true)
                    {
                        CivilTableDisplay.filters = _unitOfWork.CivilNonSteelRepository.GetRelatedTables();
                    }
                    else
                    {
                        CivilTableDisplay.filters = null;
                    }

                    return new Response<ReturnWithFilters<object>>(true, CivilTableDisplay, null, null, (int)Helpers.Constants.ApiReturnCode.success, Count);
                }
                catch (Exception err)
                {
                    return new Response<ReturnWithFilters<object>>(true, null, null, err.Message, (int)Helpers.Constants.ApiReturnCode.fail);
                }
            }
            else if (Helpers.Constants.LoadSubType.TLIsideArm.ToString() == TableNameInstallation)
            {
                try
                {
                    int Count = 0;
                    List<object> OutPutList = new List<object>();
                    ReturnWithFilters<object> SideArmTableDisplay = new ReturnWithFilters<object>();

                    List<TLIcivilLoads> AllCivilLoadsRecords = GetCivilLoadsWithConditions(BaseFilters, CombineFilters);
                    List<TLIcivilLoads> CivilLoadsRecords = GetMaxInstallationDateSidearm(AllCivilLoadsRecords);

                    List<SideArmViewModel> SideArms = _mapper.Map<List<SideArmViewModel>>(CivilLoadsRecords.Select(x =>
                        x.sideArm).ToList());

                    Count = SideArms.Count();

                    SideArms = SideArms.Skip((parameterPagination.PageNumber - 1) * parameterPagination.PageSize).
                        Take(parameterPagination.PageSize).ToList();

                    List<TLIattributeViewManagment> AllAttributes = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                       (x.Enable && x.EditableManagmentView.View == EditableManamgmantViewNames.SideArmInstallation.ToString() &&
                       (x.AttributeActivatedId != null ?
                            (x.AttributeActivated.Tabel == TablesNames.TLIsideArm.ToString() && x.AttributeActivated.enable &&
                             x.AttributeActivated.Key.ToLower() != "Draft".ToLower() && x.AttributeActivated.Key.ToLower() != "TicketId".ToLower() &&
                             x.AttributeActivated.Key.ToLower() != "ItemStatusId".ToLower() && x.AttributeActivated.Key.ToLower() != "ReservedSpace".ToLower()) :
                            (!x.DynamicAtt.LibraryAtt && !x.DynamicAtt.disable && x.DynamicAtt.tablesNames.TableName == TablesNames.TLIsideArm.ToString()))) ||
                        (x.AttributeActivated != null ?
                            ((x.AttributeActivated.Key.ToLower() == "id" || x.AttributeActivated.Key.ToLower() == "active") && x.AttributeActivated.Tabel == TablesNames.TLIsideArm.ToString()) : false),
                           x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1, x => x.EditableManagmentView.TLItablesNames2,
                           x => x.AttributeActivated, x => x.DynamicAtt, x => x.DynamicAtt.tablesNames, x => x.DynamicAtt.DataType).ToList();

                    List<TLIattributeViewManagment> NotDateTimeInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() != "datetime") : false).ToList();

                    List<TLIattributeViewManagment> NotDateTimeDynamicInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() != "datetime" : false).ToList();

                    List<TLIattributeViewManagment> DateTimeInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() == "datetime") : false).ToList();

                    List<TLIattributeViewManagment> DateTimeDynamicInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() == "datetime" : false).ToList();

                    foreach (SideArmViewModel SideArmInstallationObject in SideArms)
                    {
                        dynamic DynamiSideArmInstallation = new ExpandoObject();

                        //
                        // Installation Object ViewModel...
                        //
                        if (NotDateTimeInstallationAttributesViewModel != null ? NotDateTimeInstallationAttributesViewModel.Count > 0 : false)
                        {
                            List<PropertyInfo> InstallationProps = typeof(SideArmViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() != "datetime" :
                                    (x.PropertyType.Name.ToLower() != "datetime")) :
                                (x.PropertyType.Name.ToLower() != "datetime")).ToList();

                            foreach (PropertyInfo prop in InstallationProps)
                            {
                                if (prop.Name.ToLower().Contains("_name") &&
                                    NotDateTimeInstallationAttributesViewModel.Exists(x =>
                                        x.AttributeActivated.Label.ToLower() == prop.Name.ToLower()))
                                {
                                    object ForeignKeyNamePropObject = prop.GetValue(SideArmInstallationObject, null);
                                    ((IDictionary<String, Object>)DynamiSideArmInstallation).Add(new KeyValuePair<string, object>(prop.Name, ForeignKeyNamePropObject));
                                }
                                else if (NotDateTimeInstallationAttributesViewModel.Exists(x =>
                                     x.AttributeActivated.Key.ToLower() == prop.Name.ToLower()) &&
                                    !prop.Name.ToLower().Contains("_name") &&
                                    (prop.Name.ToLower().Substring(Math.Max(0, prop.Name.Length - 2)) != "id" || prop.Name.ToLower() == "id"))
                                {
                                    if (prop.Name.ToLower() != "id" && prop.Name.ToLower() != "active")
                                    {
                                        TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                            x.AttributeActivated.Tabel == TablesNames.TLIsideArm.ToString() &&
                                            x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                        if (LabelName != null)
                                        {
                                            object PropObject = prop.GetValue(SideArmInstallationObject, null);
                                            ((IDictionary<String, Object>)DynamiSideArmInstallation).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                        }
                                    }
                                    else
                                    {
                                        object PropObject = prop.GetValue(SideArmInstallationObject, null);
                                        ((IDictionary<String, Object>)DynamiSideArmInstallation).Add(new KeyValuePair<string, object>(prop.Name, PropObject));
                                    }
                                }
                            }
                        }

                        //
                        // Installation Dynamic Attributes... (Not DateTime DataType Attribute)
                        //
                        if (NotDateTimeDynamicInstallationAttributesViewModel != null ? NotDateTimeDynamicInstallationAttributesViewModel.Count > 0 : false)
                        {
                            List<TLIdynamicAtt> NotDateTimeInstallationDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                                !x.disable && x.tablesNames.TableName == TablesNames.TLIsideArm.ToString() &&
                                !x.LibraryAtt && x.DataType.Name.ToLower() != "datetime" &&
                                NotDateTimeDynamicInstallationAttributesViewModel.Exists(y => y.DynamicAttId == x.Id)
                                    , x => x.tablesNames, x => x.DataType).ToList();

                            List<TLIdynamicAttInstValue> NotDateTimeDynamicAttInstValues = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                                !x.DynamicAtt.LibraryAtt && !x.disable &&
                                x.InventoryId == SideArmInstallationObject.Id &&
                                NotDateTimeInstallationDynamicAttributes.Exists(y => y.Key.ToLower() == x.DynamicAtt.Key.ToLower()) &&
                                x.tablesNames.TableName == TablesNames.TLIsideArm.ToString()
                                    , x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                            foreach (TLIdynamicAtt InstallationDynamicAtt in NotDateTimeInstallationDynamicAttributes)
                            {
                                TLIdynamicAttInstValue DynamicAttInstValue = NotDateTimeDynamicAttInstValues.FirstOrDefault(x =>
                                    x.DynamicAtt.Key.ToLower() == InstallationDynamicAtt.Key.ToLower());

                                if (DynamicAttInstValue != null)
                                {
                                    dynamic DynamicAttValue = new ExpandoObject();
                                    if (DynamicAttInstValue.ValueString != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueString;

                                    else if (DynamicAttInstValue.ValueDouble != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueDouble;

                                    else if (DynamicAttInstValue.ValueDateTime != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueDateTime;

                                    else if (DynamicAttInstValue.ValueBoolean != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueBoolean;

                                    ((IDictionary<String, Object>)DynamiSideArmInstallation).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, DynamicAttValue));
                                }
                                else
                                {
                                    ((IDictionary<String, Object>)DynamiSideArmInstallation).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, null));
                                }
                            }
                        }

                        //
                        // Installation Object ViewModel... (DateTime DataType Attribute)
                        //
                        dynamic DateTimeAttributes = new ExpandoObject();
                        if (DateTimeInstallationAttributesViewModel != null ? DateTimeInstallationAttributesViewModel.Count() > 0 : false)
                        {
                            List<PropertyInfo> DateTimeInstallationProps = typeof(SideArmViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() == "datetime" :
                                    (x.PropertyType.Name.ToLower() == "datetime")) :
                                (x.PropertyType.Name.ToLower() == "datetime")).ToList();

                            foreach (PropertyInfo prop in DateTimeInstallationProps)
                            {
                                TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                    x.AttributeActivated.Tabel == TablesNames.TLIsideArm.ToString() &&
                                    x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                if (LabelName != null)
                                {
                                    object PropObject = prop.GetValue(SideArmInstallationObject, null);
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                }
                            }
                        }

                        //
                        // Installation Dynamic Attributes... (DateTime DataType Attribute)
                        // 
                        if (DateTimeDynamicInstallationAttributesViewModel != null ? DateTimeDynamicInstallationAttributesViewModel.Count > 0 : false)
                        {
                            List<TLIdynamicAtt> DateTimeInstallationDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                               !x.disable && x.tablesNames.TableName == TablesNames.TLIsideArm.ToString() &&
                               !x.LibraryAtt && x.DataType.Name.ToLower() == "datetime" &&
                                DateTimeDynamicInstallationAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames).ToList();

                            List<TLIdynamicAttInstValue> DateTimeDynamicAttInstValues = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                                x.InventoryId == SideArmInstallationObject.Id && !x.disable &&
                               !x.DynamicAtt.LibraryAtt &&
                                DateTimeInstallationDynamicAttributes.Exists(y => y.Key.ToLower() == x.DynamicAtt.Key.ToLower()) &&
                                x.tablesNames.TableName == TablesNames.TLIsideArm.ToString()
                                   , x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                            foreach (TLIdynamicAtt InstallationDynamicAtt in DateTimeInstallationDynamicAttributes)
                            {
                                TLIdynamicAttInstValue DynamicAttInstallationValue = DateTimeDynamicAttInstValues.FirstOrDefault(x =>
                                    x.DynamicAtt.Key.ToLower() == InstallationDynamicAtt.Key.ToLower());

                                if (DynamicAttInstallationValue != null)
                                {
                                    dynamic DynamicAttValue = new ExpandoObject();
                                    if (DynamicAttInstallationValue.ValueDateTime != null)
                                        DynamicAttValue = DynamicAttInstallationValue.ValueDateTime;

                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, DynamicAttValue));
                                }
                                else
                                {
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, null));
                                }
                            }
                        }
                        ((IDictionary<String, Object>)DynamiSideArmInstallation).Add(new KeyValuePair<string, object>("DateTimeAttributes", DateTimeAttributes));

                        OutPutList.Add(DynamiSideArmInstallation);
                    }
                    SideArmTableDisplay.Model = OutPutList;


                    if (WithFilterData == true)
                    {
                        SideArmTableDisplay.filters = _unitOfWork.SideArmRepository.GetRelatedTables();
                    }
                    else
                    {
                        SideArmTableDisplay.filters = null;
                    }

                    return new Response<ReturnWithFilters<object>>(true, SideArmTableDisplay, null, null, (int)ApiReturnCode.success, Count);
                }
                catch (Exception err)
                {
                    return new Response<ReturnWithFilters<object>>(true, null, null, err.Message, (int)ApiReturnCode.fail);
                }
            }
            else if (Helpers.Constants.LoadSubType.TLIloadOther.ToString() == TableNameInstallation)
            {
                try
                {
                    int Count = 0;
                    List<FilterObjectList> ObjectAttributeFilters = CombineFilters.filters;
                    List<DateFilterViewModel> DateFilter = CombineFilters.DateFilter;

                    List<object> OutPutList = new List<object>();
                    ReturnWithFilters<object> LoadOtheresTableDisplay = new ReturnWithFilters<object>();

                    List<TLIcivilLoads> AllCivilLoadsRecords = new List<TLIcivilLoads>();
                    List<TLIcivilLoads> CivilLoadsRecords = new List<TLIcivilLoads>();

                    List<StringFilterObjectList> AttributeFilters = new List<StringFilterObjectList>();
                    List<AttributeActivatedViewModel> OtherLoadInstallationAttribute = new List<AttributeActivatedViewModel>();

                    if ((DateFilter != null ? DateFilter.Count() > 0 : false) ||
                        (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0))
                    {
                        OtherLoadInstallationAttribute = _mapper.Map<List<AttributeActivatedViewModel>>(_unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                            x.Enable && x.AttributeActivatedId != null &&
                            x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.OtherLoadInstallation.ToString() &&
                            x.EditableManagmentView.TLItablesNames1.TableName == TablesNames.TLIloadOther.ToString(),
                                x => x.AttributeActivated, x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1,
                                x => x.EditableManagmentView.TLItablesNames2)
                        .Select(x => x.AttributeActivated).ToList());
                    }

                    if (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0)
                    {
                        List<AttributeActivatedViewModel> NotDateDateOtherLoadInstallationAttribute = OtherLoadInstallationAttribute.Where(x =>
                            x.DataType.ToLower() != "datetime").ToList();

                        foreach (FilterObjectList item in ObjectAttributeFilters)
                        {
                            List<string> value = item.value.Select(x => x.ToString().ToLower()).ToList();

                            AttributeActivatedViewModel AttributeKey = NotDateDateOtherLoadInstallationAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());

                            string Key = "";
                            if (AttributeKey != null)
                                Key = AttributeKey.Key;

                            else
                                Key = item.key;

                            AttributeFilters.Add(new StringFilterObjectList
                            {
                                key = Key,
                                value = value
                            });
                        }
                    }

                    //
                    // DateTime Objects Filters..
                    //
                    List<DateFilterViewModel> AfterConvertDateFilters = new List<DateFilterViewModel>();
                    if (DateFilter != null ? DateFilter.Count() > 0 : false)
                    {
                        List<AttributeActivatedViewModel> DateOtherLoadInstallationAttribute = OtherLoadInstallationAttribute.Where(x =>
                            x.DataType.ToLower() == "datetime").ToList();

                        foreach (DateFilterViewModel item in DateFilter)
                        {
                            DateTime DateFrom = Convert.ToDateTime(item.DateFrom);
                            DateTime DateTo = Convert.ToDateTime(item.DateTo);

                            if (DateFrom > DateTo)
                            {
                                DateTime Replacer = DateFrom;
                                DateFrom = DateTo;
                                DateTo = Replacer;
                            }

                            AttributeActivatedViewModel AttributeKey = DateOtherLoadInstallationAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());
                            string Key = "";

                            if (AttributeKey != null)
                                Key = AttributeKey.Key;
                            else
                                Key = item.key;

                            AfterConvertDateFilters.Add(new DateFilterViewModel
                            {
                                key = Key,
                                DateFrom = DateFrom,
                                DateTo = DateTo
                            });
                        }
                    }

                    List<int> LoadOtherIds = new List<int>();
                    List<int> WithoutDateFilterOtherLoadInstallation = new List<int>();
                    List<int> WithDateFilterOtherLoadInstallation = new List<int>();

                    if (AttributeFilters != null && AttributeFilters.Count > 0)
                    {
                        //
                        // Installation Dynamic Attributes...
                        //
                        List<TLIdynamicAtt> InstDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AttributeFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            !x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == TablesNames.TLIloadOther.ToString()
                                , x => x.tablesNames, x => x.DataType).ToList();

                        List<int> DynamicInstValueListIds = new List<int>();
                        bool DynamicInstExist = false;
                        if (InstDynamicAttListIds.Count() > 0)
                        {
                            DynamicInstExist = true;
                            GetInventoriesIdsFromDynamicAttributes(out DynamicInstValueListIds, InstDynamicAttListIds, AttributeFilters);
                        }

                        //
                        // Installation Attribute Activated...
                        //
                        bool AttrInstExist = typeof(LoadOtherViewModel).GetProperties().ToList().Exists(x =>
                            AttributeFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower() && y.key.ToLower() != "id"));

                        List<int> InstallationAttributeActivated = new List<int>();
                        if (AttrInstExist)
                        {
                            List<PropertyInfo> NotStringProps = typeof(LoadOtherViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() != "string" &&
                                    AttributeFilters.Exists(y =>
                                        y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<PropertyInfo> StringProps = typeof(LoadOtherViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() == "string" &&
                                    AttributeFilters.Exists(y =>
                                        y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<StringFilterObjectList> AttrInstAttributeFilters = AttributeFilters.Where(x =>
                                NotStringProps.Exists(y => y.Name.ToLower() == x.key.ToLower()) ||
                                StringProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            InstallationAttributeActivated = _unitOfWork.LoadOtherRepository.GetWhere(x =>
                                AttrInstAttributeFilters.All(z =>
                                NotStringProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (y.GetValue(_mapper.Map<LoadOtherViewModel>(x), null) != null ? z.value.Contains(y.GetValue(_mapper.Map<LoadOtherViewModel>(x), null).ToString().ToLower()) : false)) ||
                                StringProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (z.value.Any(w =>
                                        y.GetValue(_mapper.Map<LoadOtherViewModel>(x), null) != null ? y.GetValue(_mapper.Map<LoadOtherViewModel>(x), null).ToString().ToLower().StartsWith(w.ToLower()) : false))))
                            ).Select(i => i.Id).ToList();
                        }

                        //
                        // Installation (Attribute Activated + Dynamic) Attributes...
                        //
                        List<int> IntersectInstallationIds = new List<int>();
                        if (AttrInstExist && DynamicInstExist)
                        {
                            WithoutDateFilterOtherLoadInstallation = InstallationAttributeActivated.Intersect(DynamicInstValueListIds).ToList();
                        }
                        else if (AttrInstExist)
                        {
                            WithoutDateFilterOtherLoadInstallation = InstallationAttributeActivated;
                        }
                        else if (DynamicInstExist)
                        {
                            WithoutDateFilterOtherLoadInstallation = DynamicInstValueListIds;
                        }
                    }

                    if (DateFilter != null ? DateFilter.Count() > 0 : false)
                    {
                        List<TLIdynamicAtt> DateTimeInstDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AfterConvertDateFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            !x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == TablesNames.TLIloadOther.ToString()
                                , x => x.tablesNames, x => x.DataType).ToList();

                        List<int> DynamicInstValueListIds = new List<int>();
                        bool DynamicInstExist = false;

                        if (DateTimeInstDynamicAttListIds.Count > 0)
                        {
                            DynamicInstExist = true;
                            List<DateFilterViewModel> DynamicInstAttributeFilters = AfterConvertDateFilters.Where(x =>
                                DateTimeInstDynamicAttListIds.Exists(y => y.Key.ToLower() == x.key.ToLower())).ToList();

                            DynamicInstValueListIds = new List<int>();

                            List<TLIdynamicAttInstValue> DynamicInstValueListObjects = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                                DateTimeInstDynamicAttListIds.Exists(y => y.Id == x.DynamicAttId) && !x.disable).ToList();

                            List<int> InventoriesIds = DynamicInstValueListObjects.Select(x => x.InventoryId).Distinct().ToList();

                            foreach (int InventoryId in InventoriesIds)
                            {
                                List<TLIdynamicAttInstValue> DynamicInstValueListInventories = DynamicInstValueListObjects.Where(x =>
                                    x.InventoryId == InventoryId).ToList();

                                if (DynamicInstAttributeFilters.All(y => DynamicInstValueListInventories.Exists(x =>
                                    (x.ValueDateTime != null ?
                                        (x.ValueDateTime >= y.DateFrom && x.ValueDateTime <= y.DateTo) : (false)))))
                                {
                                    DynamicInstValueListIds.Add(InventoryId);
                                }
                            }
                        }

                        //
                        // Installation Attribute Activated...
                        //
                        List<PropertyInfo> InstallationProps = typeof(LoadOtherViewModel).GetProperties().Where(x =>
                            AfterConvertDateFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower())).ToList();

                        List<int> InstallationAttributeActivatedIds = new List<int>();
                        bool AttrInstExist = false;

                        if (InstallationProps != null)
                        {
                            AttrInstExist = true;

                            List<DateFilterViewModel> InstallationPropsAttributeFilters = AfterConvertDateFilters.Where(x =>
                                InstallationProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            InstallationAttributeActivatedIds = _unitOfWork.LoadOtherRepository.GetWhere(x =>
                                InstallationPropsAttributeFilters.All(z =>
                                    (InstallationProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && ((y.GetValue(_mapper.Map<LoadOtherViewModel>(x), null) != null) ?
                                        ((z.DateFrom <= Convert.ToDateTime(y.GetValue(_mapper.Map<LoadOtherViewModel>(x), null))) &&
                                         (z.DateTo >= Convert.ToDateTime(y.GetValue(_mapper.Map<LoadOtherViewModel>(x), null)))) : (false)))))
                            ).Select(i => i.Id).ToList();
                        }

                        //
                        // Installation (Attribute Activated + Dynamic) Attributes...
                        //
                        if (AttrInstExist && DynamicInstExist)
                        {
                            WithDateFilterOtherLoadInstallation = InstallationAttributeActivatedIds.Intersect(DynamicInstValueListIds).ToList();
                        }
                        else if (AttrInstExist)
                        {
                            WithDateFilterOtherLoadInstallation = InstallationAttributeActivatedIds;
                        }
                        else if (DynamicInstExist)
                        {
                            WithDateFilterOtherLoadInstallation = DynamicInstValueListIds;
                        }
                    }

                    if ((DateFilter != null ? DateFilter.Count() > 0 : false) ||
                        (AttributeFilters != null ? AttributeFilters.Count() > 0 : false))
                    {
                        if ((AttributeFilters != null ? AttributeFilters.Count > 0 : false) &&
                                (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false))
                        {
                            LoadOtherIds = WithoutDateFilterOtherLoadInstallation.Intersect(WithDateFilterOtherLoadInstallation).ToList();
                        }
                        else if (AttributeFilters != null ? AttributeFilters.Count > 0 : false)
                        {
                            LoadOtherIds = WithoutDateFilterOtherLoadInstallation;
                        }
                        else if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                        {
                            LoadOtherIds = WithDateFilterOtherLoadInstallation;
                        }

                        AllCivilLoadsRecords = _unitOfWork.CivilLoadsRepository.GetIncludeWhere(x =>
                            (x.allLoadInstId != null ? x.allLoadInst.loadOtherId != null : false) &&
                            (!x.Dismantle) &&
                            (x.SiteCode == BaseFilters.siteCode) &&
                           

                            LoadOtherIds.Contains(x.allLoadInst.loadOtherId.Value),
                        x => x.allCivilInst, x => x.allLoadInst, x => x.allLoadInst.loadOther, x => x.allLoadInst.loadOther.loadOtherLibrary).AsQueryable().ToList();
                        //Skip((parameterPagination.PageNumber - 1) * parameterPagination.PageSize).
                        //Take(parameterPagination.PageSize).AsQueryable().ToList();
                    }

                    else
                    {
                        AllCivilLoadsRecords = _unitOfWork.CivilLoadsRepository.GetIncludeWhere(x =>
                           (x.allLoadInstId != null ? x.allLoadInst.loadOtherId != null : false) &&
                           (!x.Dismantle) &&
                           (x.SiteCode == BaseFilters.siteCode) ,

                       x => x.allCivilInst, x => x.allLoadInst, x => x.allLoadInst.loadOther, x => x.allLoadInst.loadOther.loadOtherLibrary).AsQueryable().ToList();
                        //Skip((parameterPagination.PageNumber - 1) * parameterPagination.PageSize).
                        //Take(parameterPagination.PageSize).AsQueryable().ToList();
                    }

                    // Delete Duplicated Objects Based On Installation Date...
                    List<TLIcivilLoads> NewList = new List<TLIcivilLoads>();
                    foreach (var item in AllCivilLoadsRecords)
                    {
                        TLIcivilLoads CheckIfExist = NewList.FirstOrDefault(x => x.allLoadInst.loadOtherId.Value == item.allLoadInst.loadOtherId.Value);
                        if (CheckIfExist != null)
                        {
                            if (CheckIfExist.InstallationDate < item.InstallationDate)
                            {
                                NewList.Remove(CheckIfExist);
                                NewList.Add(item);
                            }
                        }
                        else
                        {
                            NewList.Add(item);
                        }
                    }
                    CivilLoadsRecords = NewList;

                    Count = CivilLoadsRecords.Count();

                    CivilLoadsRecords = CivilLoadsRecords.Skip((parameterPagination.PageNumber - 1) * parameterPagination.PageSize).
                        Take(parameterPagination.PageSize).ToList();

                    List<LoadOtherViewModel> Others = _mapper.Map<List<LoadOtherViewModel>>(CivilLoadsRecords.Select(x => x.allLoadInst.loadOther).ToList());

                    List<TLIattributeViewManagment> AllAttributes = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                       (x.Enable && x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.OtherLoadInstallation.ToString() &&
                       (x.AttributeActivatedId != null ?
                            (x.AttributeActivated.Tabel == TablesNames.TLIloadOther.ToString() && x.AttributeActivated.enable) :
                            (!x.DynamicAtt.LibraryAtt && !x.DynamicAtt.disable && x.DynamicAtt.tablesNames.TableName == TablesNames.TLIloadOther.ToString()))) ||
                        (x.AttributeActivated != null ?
                            ((x.AttributeActivated.Key.ToLower() == "id" || x.AttributeActivated.Key.ToLower() == "active") && x.AttributeActivated.Tabel == TablesNames.TLIloadOther.ToString()) : false),
                           x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1, x => x.EditableManagmentView.TLItablesNames2,
                           x => x.AttributeActivated, x => x.DynamicAtt, x => x.DynamicAtt.tablesNames, x => x.DynamicAtt.DataType).ToList();

                    List<TLIattributeViewManagment> NotDateTimeInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() != "datetime") : false).ToList();

                    List<TLIattributeViewManagment> NotDateTimeDynamicInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() != "datetime" : false).ToList();

                    List<TLIattributeViewManagment> DateTimeInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() == "datetime") : false).ToList();

                    List<TLIattributeViewManagment> DateTimeDynamicInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() == "datetime" : false).ToList();


                    foreach (LoadOtherViewModel OthersInstallationObject in Others)
                    {
                        dynamic DynamiOtherLoadInstallation = new ExpandoObject();

                        //
                        // Installation Object ViewModel...
                        //
                        if (NotDateTimeInstallationAttributesViewModel != null ? NotDateTimeInstallationAttributesViewModel.Count > 0 : false)
                        {
                            List<PropertyInfo> InstallationProps = typeof(LoadOtherViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() != "datetime" :
                                    (x.PropertyType.Name.ToLower() != "datetime")) :
                                (x.PropertyType.Name.ToLower() != "datetime")).ToList();

                            foreach (PropertyInfo prop in InstallationProps)
                            {
                                if (prop.Name.ToLower().Contains("_name") &&
                                    NotDateTimeInstallationAttributesViewModel.Exists(x =>
                                        x.AttributeActivated.Label.ToLower() == prop.Name.ToLower()))
                                {
                                    object ForeignKeyNamePropObject = prop.GetValue(OthersInstallationObject, null);
                                    ((IDictionary<String, Object>)DynamiOtherLoadInstallation).Add(new KeyValuePair<string, object>(prop.Name, ForeignKeyNamePropObject));
                                }
                                else if (NotDateTimeInstallationAttributesViewModel.Exists(x =>
                                     x.AttributeActivated.Key.ToLower() == prop.Name.ToLower()) &&
                                    !prop.Name.ToLower().Contains("_name") &&
                                    (prop.Name.ToLower().Substring(Math.Max(0, prop.Name.Length - 2)) != "id" || prop.Name.ToLower() == "id"))
                                {
                                    if (prop.Name.ToLower() != "id" && prop.Name.ToLower() != "active")
                                    {
                                        TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                            x.AttributeActivated.Tabel == TablesNames.TLIloadOther.ToString() &&
                                            x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                        if (LabelName != null)
                                        {
                                            object PropObject = prop.GetValue(OthersInstallationObject, null);
                                            ((IDictionary<String, Object>)DynamiOtherLoadInstallation).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                        }
                                    }
                                    else
                                    {
                                        object PropObject = prop.GetValue(OthersInstallationObject, null);
                                        ((IDictionary<String, Object>)DynamiOtherLoadInstallation).Add(new KeyValuePair<string, object>(prop.Name, PropObject));
                                    }
                                }
                            }
                        }

                        //
                        // Installation Dynamic Attributes... (Not DateTime DataType Attribute)
                        //
                        if (NotDateTimeDynamicInstallationAttributesViewModel != null ? NotDateTimeDynamicInstallationAttributesViewModel.Count > 0 : false)
                        {
                            List<TLIdynamicAtt> NotDateTimeInstallationDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                                !x.disable && x.tablesNames.TableName == TablesNames.TLIloadOther.ToString() &&
                                !x.LibraryAtt && x.DataType.Name.ToLower() != "datetime" &&
                                NotDateTimeDynamicInstallationAttributesViewModel.Exists(y => y.DynamicAttId == x.Id)
                                    , x => x.tablesNames, x => x.DataType).ToList();

                            List<TLIdynamicAttInstValue> NotDateTimeDynamicAttInstValues = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                                !x.DynamicAtt.LibraryAtt && !x.disable &&
                                x.InventoryId == OthersInstallationObject.Id &&
                                NotDateTimeInstallationDynamicAttributes.Exists(y => y.Key.ToLower() == x.DynamicAtt.Key.ToLower()) &&
                                x.tablesNames.TableName == TablesNames.TLIloadOther.ToString()
                                    , x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                            foreach (TLIdynamicAtt InstallationDynamicAtt in NotDateTimeInstallationDynamicAttributes)
                            {
                                TLIdynamicAttInstValue DynamicAttInstValue = NotDateTimeDynamicAttInstValues.FirstOrDefault(x =>
                                    x.DynamicAtt.Key.ToLower() == InstallationDynamicAtt.Key.ToLower());

                                if (DynamicAttInstValue != null)
                                {
                                    dynamic DynamicAttValue = new ExpandoObject();
                                    if (DynamicAttInstValue.ValueString != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueString;

                                    else if (DynamicAttInstValue.ValueDouble != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueDouble;

                                    else if (DynamicAttInstValue.ValueDateTime != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueDateTime;

                                    else if (DynamicAttInstValue.ValueBoolean != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueBoolean;

                                    ((IDictionary<String, Object>)DynamiOtherLoadInstallation).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, DynamicAttValue));
                                }
                                else
                                {
                                    ((IDictionary<String, Object>)DynamiOtherLoadInstallation).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, null));
                                }
                            }
                        }

                        //
                        // Installation Object ViewModel... (DateTime DataType Attribute)
                        //
                        dynamic DateTimeAttributes = new ExpandoObject();
                        if (DateTimeInstallationAttributesViewModel != null ? DateTimeInstallationAttributesViewModel.Count() > 0 : false)
                        {
                            List<PropertyInfo> DateTimeInstallationProps = typeof(LoadOtherViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() == "datetime" :
                                    (x.PropertyType.Name.ToLower() == "datetime")) :
                                (x.PropertyType.Name.ToLower() == "datetime")).ToList();

                            foreach (PropertyInfo prop in DateTimeInstallationProps)
                            {
                                TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                    x.AttributeActivated.Tabel == TablesNames.TLIloadOther.ToString() &&
                                    x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                if (LabelName != null)
                                {
                                    object PropObject = prop.GetValue(OthersInstallationObject, null);
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                }
                            }
                        }

                        //
                        // Installation Dynamic Attributes... (DateTime DataType Attribute)
                        // 
                        if (DateTimeDynamicInstallationAttributesViewModel != null ? DateTimeDynamicInstallationAttributesViewModel.Count > 0 : false)
                        {
                            List<TLIdynamicAtt> DateTimeInstallationDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                               !x.disable && x.tablesNames.TableName == TablesNames.TLIloadOther.ToString() &&
                               !x.LibraryAtt && x.DataType.Name.ToLower() == "datetime" &&
                                DateTimeDynamicInstallationAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames).ToList();

                            List<TLIdynamicAttInstValue> DateTimeDynamicAttInstValues = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                                x.InventoryId == OthersInstallationObject.Id && !x.disable &&
                               !x.DynamicAtt.LibraryAtt &&
                                DateTimeInstallationDynamicAttributes.Exists(y => y.Key.ToLower() == x.DynamicAtt.Key.ToLower()) &&
                                x.tablesNames.TableName == TablesNames.TLIloadOther.ToString()
                                   , x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                            foreach (TLIdynamicAtt InstallationDynamicAtt in DateTimeInstallationDynamicAttributes)
                            {
                                TLIdynamicAttInstValue DynamicAttInstallationValue = DateTimeDynamicAttInstValues.FirstOrDefault(x =>
                                    x.DynamicAtt.Key.ToLower() == InstallationDynamicAtt.Key.ToLower());

                                if (DynamicAttInstallationValue != null)
                                {
                                    dynamic DynamicAttValue = new ExpandoObject();
                                    if (DynamicAttInstallationValue.ValueDateTime != null)
                                        DynamicAttValue = DynamicAttInstallationValue.ValueDateTime;

                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, DynamicAttValue));
                                }
                                else
                                {
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, null));
                                }
                            }
                        }

                        ((IDictionary<String, Object>)DynamiOtherLoadInstallation).Add(new KeyValuePair<string, object>("DateTimeAttributes", DateTimeAttributes));

                        OutPutList.Add(DynamiOtherLoadInstallation);
                    }
                    LoadOtheresTableDisplay.Model = OutPutList;

                    if (WithFilterData == true)
                    {
                        LoadOtheresTableDisplay.filters = _unitOfWork.LoadOtherRepository.GetRelatedTables();
                    }
                    else
                    {
                        LoadOtheresTableDisplay.filters = null;
                    }

                    return new Response<ReturnWithFilters<object>>(true, LoadOtheresTableDisplay, null, null, (int)ApiReturnCode.success, Count);
                }
                catch (Exception err)
                {
                    return new Response<ReturnWithFilters<object>>(false, null, null, err.Message, (int)ApiReturnCode.fail);
                }
            }
            else if (Helpers.Constants.LoadSubType.TLIpower.ToString() == TableNameInstallation)
            {
                try
                {
                    int Count = 0;
                    List<FilterObjectList> ObjectAttributeFilters = CombineFilters.filters;
                    List<DateFilterViewModel> DateFilter = CombineFilters.DateFilter;

                    List<object> OutPutList = new List<object>();
                    ReturnWithFilters<object> PoweresTableDisplay = new ReturnWithFilters<object>();

                    List<TLIcivilLoads> CivilLoadsRecords = new List<TLIcivilLoads>();

                    List<StringFilterObjectList> AttributeFilters = new List<StringFilterObjectList>();
                    List<AttributeActivatedViewModel> PowerInstallationAttribute = new List<AttributeActivatedViewModel>();

                    if ((DateFilter != null ? DateFilter.Count() > 0 : false) ||
                        (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0))
                    {
                        PowerInstallationAttribute = _mapper.Map<List<AttributeActivatedViewModel>>(_unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                            x.Enable && x.AttributeActivatedId != null &&
                            x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.PowerInstallation.ToString() &&
                            x.EditableManagmentView.TLItablesNames1.TableName == Helpers.Constants.TablesNames.TLIpower.ToString(),
                                x => x.AttributeActivated, x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1,
                                x => x.EditableManagmentView.TLItablesNames2)
                        .Select(x => x.AttributeActivated).ToList());
                    }

                    if (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0)
                    {
                        List<AttributeActivatedViewModel> NotDateDatePowerInstallationAttribute = PowerInstallationAttribute.Where(x =>
                            x.DataType.ToLower() != "datetime").ToList();

                        foreach (FilterObjectList item in ObjectAttributeFilters)
                        {
                            List<string> value = item.value.Select(x => x.ToString().ToLower()).ToList();

                            AttributeActivatedViewModel AttributeKey = NotDateDatePowerInstallationAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());

                            string Key = "";
                            if (AttributeKey != null)
                                Key = AttributeKey.Key;

                            else
                                Key = item.key;

                            AttributeFilters.Add(new StringFilterObjectList
                            {
                                key = Key,
                                value = value
                            });
                        }
                    }

                    //
                    // DateTime Objects Filters..
                    //
                    List<DateFilterViewModel> AfterConvertDateFilters = new List<DateFilterViewModel>();
                    if (DateFilter != null ? DateFilter.Count() > 0 : false)
                    {
                        List<AttributeActivatedViewModel> DatePowerInstallationAttribute = PowerInstallationAttribute.Where(x =>
                            x.DataType.ToLower() == "datetime").ToList();

                        foreach (DateFilterViewModel item in DateFilter)
                        {
                            DateTime DateFrom = Convert.ToDateTime(item.DateFrom);
                            DateTime DateTo = Convert.ToDateTime(item.DateTo);

                            if (DateFrom > DateTo)
                            {
                                DateTime Replacer = DateFrom;
                                DateFrom = DateTo;
                                DateTo = Replacer;
                            }

                            AttributeActivatedViewModel AttributeKey = DatePowerInstallationAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());
                            string Key = "";

                            if (AttributeKey != null)
                                Key = AttributeKey.Key;
                            else
                                Key = item.key;

                            AfterConvertDateFilters.Add(new DateFilterViewModel
                            {
                                key = Key,
                                DateFrom = DateFrom,
                                DateTo = DateTo
                            });
                        }
                    }

                    List<int> powerIds = new List<int>();
                    List<int> WithoutDateFilterPowerInstallation = new List<int>();
                    List<int> WithDateFilterPowerInstallation = new List<int>();

                    if (AttributeFilters != null && AttributeFilters.Count > 0)
                    {
                        //
                        // Installation Dynamic Attributes...
                        //
                        List<TLIdynamicAtt> InstDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AttributeFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            !x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIpower.ToString()
                                , x => x.tablesNames, x => x.DataType).ToList();

                        List<int> DynamicInstValueListIds = new List<int>();
                        bool DynamicInstExist = false;
                        if (InstDynamicAttListIds.Count() > 0)
                        {
                            DynamicInstExist = true;
                            GetInventoriesIdsFromDynamicAttributes(out DynamicInstValueListIds, InstDynamicAttListIds, AttributeFilters);
                        }

                        //
                        // Installation Attribute Activated...
                        //
                        bool AttrInstExist = typeof(PowerViewModel).GetProperties().ToList().Exists(x =>
                            AttributeFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower() && y.key.ToLower() != "id"));

                        List<int> InstallationAttributeActivated = new List<int>();
                        if (AttrInstExist)
                        {
                            List<PropertyInfo> NotStringProps = typeof(PowerViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() != "string" &&
                                    AttributeFilters.Exists(y =>
                                        y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<PropertyInfo> StringProps = typeof(PowerViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() == "string" &&
                                    AttributeFilters.Exists(y =>
                                        y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<StringFilterObjectList> AttrInstAttributeFilters = AttributeFilters.Where(x =>
                                NotStringProps.Exists(y => y.Name.ToLower() == x.key.ToLower()) ||
                                StringProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            InstallationAttributeActivated = _unitOfWork.PowerRepository.GetWhere(x =>
                                AttrInstAttributeFilters.All(z =>
                                NotStringProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (y.GetValue(_mapper.Map<PowerViewModel>(x), null) != null ? z.value.Contains(y.GetValue(_mapper.Map<PowerViewModel>(x), null).ToString().ToLower()) : false)) ||
                                StringProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (z.value.Any(w =>
                                        y.GetValue(_mapper.Map<PowerViewModel>(x), null) != null ? y.GetValue(_mapper.Map<PowerViewModel>(x), null).ToString().ToLower().StartsWith(w.ToLower()) : false))))
                            ).Select(i => i.Id).ToList();
                        }

                        //
                        // Installation (Attribute Activated + Dynamic) Attributes...
                        //
                        List<int> IntersectInstallationIds = new List<int>();
                        if (AttrInstExist && DynamicInstExist)
                        {
                            WithoutDateFilterPowerInstallation = InstallationAttributeActivated.Intersect(DynamicInstValueListIds).ToList();
                        }
                        else if (AttrInstExist)
                        {
                            WithoutDateFilterPowerInstallation = InstallationAttributeActivated;
                        }
                        else if (DynamicInstExist)
                        {
                            WithoutDateFilterPowerInstallation = DynamicInstValueListIds;
                        }
                    }

                    if (DateFilter != null ? DateFilter.Count() > 0 : false)
                    {
                        List<TLIdynamicAtt> DateTimeInstDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AfterConvertDateFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            !x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIpower.ToString()
                                , x => x.tablesNames, x => x.DataType).ToList();

                        List<int> DynamicInstValueListIds = new List<int>();
                        bool DynamicInstExist = false;

                        if (DateTimeInstDynamicAttListIds.Count > 0)
                        {
                            DynamicInstExist = true;
                            List<DateFilterViewModel> DynamicInstAttributeFilters = AfterConvertDateFilters.Where(x =>
                                DateTimeInstDynamicAttListIds.Exists(y => y.Key.ToLower() == x.key.ToLower())).ToList();

                            DynamicInstValueListIds = new List<int>();

                            List<TLIdynamicAttInstValue> DynamicInstValueListObjects = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                                DateTimeInstDynamicAttListIds.Exists(y => y.Id == x.DynamicAttId) && !x.disable).ToList();

                            List<int> InventoriesIds = DynamicInstValueListObjects.Select(x => x.InventoryId).Distinct().ToList();

                            foreach (int InventoryId in InventoriesIds)
                            {
                                List<TLIdynamicAttInstValue> DynamicInstValueListInventories = DynamicInstValueListObjects.Where(x =>
                                    x.InventoryId == InventoryId).ToList();

                                if (DynamicInstAttributeFilters.All(y => DynamicInstValueListInventories.Exists(x =>
                                    (x.ValueDateTime != null ?
                                        (x.ValueDateTime >= y.DateFrom && x.ValueDateTime <= y.DateTo) : (false)))))
                                {
                                    DynamicInstValueListIds.Add(InventoryId);
                                }
                            }
                        }

                        //
                        // Installation Attribute Activated...
                        //
                        List<PropertyInfo> InstallationProps = typeof(PowerViewModel).GetProperties().Where(x =>
                            AfterConvertDateFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower())).ToList();

                        List<int> InstallationAttributeActivatedIds = new List<int>();
                        bool AttrInstExist = false;

                        if (InstallationProps != null)
                        {
                            AttrInstExist = true;

                            List<DateFilterViewModel> InstallationPropsAttributeFilters = AfterConvertDateFilters.Where(x =>
                                InstallationProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            InstallationAttributeActivatedIds = _unitOfWork.PowerRepository.GetWhere(x =>
                                InstallationPropsAttributeFilters.All(z =>
                                    (InstallationProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && ((y.GetValue(_mapper.Map<PowerViewModel>(x), null) != null) ?
                                        ((z.DateFrom <= Convert.ToDateTime(y.GetValue(_mapper.Map<PowerViewModel>(x), null))) &&
                                         (z.DateTo >= Convert.ToDateTime(y.GetValue(_mapper.Map<PowerViewModel>(x), null)))) : (false)))))
                            ).Select(i => i.Id).ToList();
                        }

                        //
                        // Installation (Attribute Activated + Dynamic) Attributes...
                        //
                        if (AttrInstExist && DynamicInstExist)
                        {
                            WithDateFilterPowerInstallation = InstallationAttributeActivatedIds.Intersect(DynamicInstValueListIds).ToList();
                        }
                        else if (AttrInstExist)
                        {
                            WithDateFilterPowerInstallation = InstallationAttributeActivatedIds;
                        }
                        else if (DynamicInstExist)
                        {
                            WithDateFilterPowerInstallation = DynamicInstValueListIds;
                        }
                    }

                    if ((DateFilter != null ? DateFilter.Count() > 0 : false) ||
                        (AttributeFilters != null ? AttributeFilters.Count() > 0 : false))
                    {
                        if ((AttributeFilters != null ? AttributeFilters.Count > 0 : false) &&
                                (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false))
                        {
                            powerIds = WithoutDateFilterPowerInstallation.Intersect(WithDateFilterPowerInstallation).ToList();
                        }
                        else if (AttributeFilters != null ? AttributeFilters.Count > 0 : false)
                        {
                            powerIds = WithoutDateFilterPowerInstallation;
                        }
                        else if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                        {
                            powerIds = WithDateFilterPowerInstallation;
                        }

                        CivilLoadsRecords = _unitOfWork.CivilLoadsRepository.GetIncludeWhere(x =>
                            (x.allLoadInstId != null ? x.allLoadInst.powerId != null : false) &&
                            (!x.Dismantle) &&
                            (x.SiteCode == BaseFilters.siteCode) &&
                            powerIds.Contains(x.allLoadInst.powerId.Value),
                        x => x.allCivilInst, x => x.allLoadInst, x => x.allLoadInst.power, x => x.allLoadInst.power.installationPlace,
                        x => x.allLoadInst.power.owner, x => x.allLoadInst.power.powerLibrary, x => x.allLoadInst.power.powerType).ToList();
                    }
                    else
                    {
                        CivilLoadsRecords = _unitOfWork.CivilLoadsRepository.GetIncludeWhere(x =>
                           (x.allLoadInstId != null ? x.allLoadInst.powerId != null : false) &&
                           (!x.Dismantle) &&
                           (x.SiteCode == BaseFilters.siteCode), 

                        x => x.allCivilInst, x => x.allLoadInst, x => x.allLoadInst.power, x => x.allLoadInst.power.installationPlace,
                        x => x.allLoadInst.power.owner, x => x.allLoadInst.power.powerLibrary, x => x.allLoadInst.power.powerType).ToList();
                    }

                    // Delete Duplicated Objects Based On Installation Date...
                    List<TLIcivilLoads> NewList = new List<TLIcivilLoads>();
                    foreach (var item in CivilLoadsRecords)
                    {
                        TLIcivilLoads CheckIfExist = NewList.FirstOrDefault(x => x.allLoadInst.powerId.Value == item.allLoadInst.powerId.Value);
                        if (CheckIfExist != null)
                        {
                            if (CheckIfExist.InstallationDate < item.InstallationDate)
                            {
                                NewList.Remove(CheckIfExist);
                                NewList.Add(item);
                            }
                        }
                        else
                        {
                            NewList.Add(item);
                        }
                    }
                    CivilLoadsRecords = NewList;

                    Count = CivilLoadsRecords.Count();

                    CivilLoadsRecords = CivilLoadsRecords.Skip((parameterPagination.PageNumber - 1) * parameterPagination.PageSize).
                        Take(parameterPagination.PageSize).ToList();

                    List<PowerViewModel> Others = _mapper.Map<List<PowerViewModel>>(CivilLoadsRecords.Select(x => x.allLoadInst.power).ToList());

                    List<TLIattributeViewManagment> AllAttributes = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                       (x.Enable && x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.PowerInstallation.ToString() &&
                       (x.AttributeActivatedId != null ?
                            (x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIpower.ToString() && x.AttributeActivated.enable) :
                            (!x.DynamicAtt.LibraryAtt && !x.DynamicAtt.disable && x.DynamicAtt.tablesNames.TableName == Helpers.Constants.TablesNames.TLIpower.ToString()))) ||
                        (x.AttributeActivated != null ?
                            ((x.AttributeActivated.Key.ToLower() == "id" || x.AttributeActivated.Key.ToLower() == "active") && x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIpower.ToString()) : false),
                           x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1, x => x.EditableManagmentView.TLItablesNames2,
                           x => x.AttributeActivated, x => x.DynamicAtt, x => x.DynamicAtt.tablesNames, x => x.DynamicAtt.DataType).ToList();

                    List<TLIattributeViewManagment> NotDateTimeInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() != "datetime") : false).ToList();

                    List<TLIattributeViewManagment> NotDateTimeDynamicInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() != "datetime" : false).ToList();

                    List<TLIattributeViewManagment> DateTimeInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() == "datetime") : false).ToList();

                    List<TLIattributeViewManagment> DateTimeDynamicInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() == "datetime" : false).ToList();


                    foreach (PowerViewModel OthersInstallationObject in Others)
                    {
                        dynamic DynamiPowerInstallation = new ExpandoObject();

                        //
                        // Installation Object ViewModel...
                        //
                        if (NotDateTimeInstallationAttributesViewModel != null ? NotDateTimeInstallationAttributesViewModel.Count > 0 : false)
                        {
                            List<PropertyInfo> InstallationProps = typeof(PowerViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() != "datetime" :
                                    (x.PropertyType.Name.ToLower() != "datetime")) :
                                (x.PropertyType.Name.ToLower() != "datetime")).ToList();

                            foreach (PropertyInfo prop in InstallationProps)
                            {
                                if (prop.Name.ToLower().Contains("_name") &&
                                    NotDateTimeInstallationAttributesViewModel.Exists(x =>
                                        x.AttributeActivated.Label.ToLower() == prop.Name.ToLower()))
                                {
                                    object ForeignKeyNamePropObject = prop.GetValue(OthersInstallationObject, null);
                                    ((IDictionary<String, Object>)DynamiPowerInstallation).Add(new KeyValuePair<string, object>(prop.Name, ForeignKeyNamePropObject));
                                }
                                else if (NotDateTimeInstallationAttributesViewModel.Exists(x =>
                                     x.AttributeActivated.Key.ToLower() == prop.Name.ToLower()) &&
                                    !prop.Name.ToLower().Contains("_name") &&
                                    (prop.Name.ToLower().Substring(Math.Max(0, prop.Name.Length - 2)) != "id" || prop.Name.ToLower() == "id"))
                                {
                                    if (prop.Name.ToLower() != "id" && prop.Name.ToLower() != "active")
                                    {
                                        TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                            x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIpower.ToString() &&
                                            x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                        if (LabelName != null)
                                        {
                                            object PropObject = prop.GetValue(OthersInstallationObject, null);
                                            ((IDictionary<String, Object>)DynamiPowerInstallation).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                        }
                                    }
                                    else
                                    {
                                        object PropObject = prop.GetValue(OthersInstallationObject, null);
                                        ((IDictionary<String, Object>)DynamiPowerInstallation).Add(new KeyValuePair<string, object>(prop.Name, PropObject));
                                    }
                                }
                            }
                        }

                        //
                        // Installation Dynamic Attributes... (Not DateTime DataType Attribute)
                        //
                        if (NotDateTimeDynamicInstallationAttributesViewModel != null ? NotDateTimeDynamicInstallationAttributesViewModel.Count > 0 : false)
                        {
                            List<TLIdynamicAtt> NotDateTimeInstallationDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                                !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIpower.ToString() &&
                                !x.LibraryAtt && x.DataType.Name.ToLower() != "datetime" &&
                                NotDateTimeDynamicInstallationAttributesViewModel.Exists(y => y.DynamicAttId == x.Id)
                                    , x => x.tablesNames, x => x.DataType).ToList();

                            List<TLIdynamicAttInstValue> NotDateTimeDynamicAttInstValues = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                                !x.DynamicAtt.LibraryAtt && !x.disable &&
                                x.InventoryId == OthersInstallationObject.Id &&
                                NotDateTimeInstallationDynamicAttributes.Exists(y => y.Key.ToLower() == x.DynamicAtt.Key.ToLower()) &&
                                x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIpower.ToString()
                                    , x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                            foreach (TLIdynamicAtt InstallationDynamicAtt in NotDateTimeInstallationDynamicAttributes)
                            {
                                TLIdynamicAttInstValue DynamicAttInstValue = NotDateTimeDynamicAttInstValues.FirstOrDefault(x =>
                                    x.DynamicAtt.Key.ToLower() == InstallationDynamicAtt.Key.ToLower());

                                if (DynamicAttInstValue != null)
                                {
                                    dynamic DynamicAttValue = new ExpandoObject();
                                    if (DynamicAttInstValue.ValueString != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueString;

                                    else if (DynamicAttInstValue.ValueDouble != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueDouble;

                                    else if (DynamicAttInstValue.ValueDateTime != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueDateTime;

                                    else if (DynamicAttInstValue.ValueBoolean != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueBoolean;

                                    ((IDictionary<String, Object>)DynamiPowerInstallation).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, DynamicAttValue));
                                }
                                else
                                {
                                    ((IDictionary<String, Object>)DynamiPowerInstallation).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, null));
                                }
                            }
                        }

                        //
                        // Installation Object ViewModel... (DateTime DataType Attribute)
                        //
                        dynamic DateTimeAttributes = new ExpandoObject();
                        if (DateTimeInstallationAttributesViewModel != null ? DateTimeInstallationAttributesViewModel.Count() > 0 : false)
                        {
                            List<PropertyInfo> DateTimeInstallationProps = typeof(PowerViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() == "datetime" :
                                    (x.PropertyType.Name.ToLower() == "datetime")) :
                                (x.PropertyType.Name.ToLower() == "datetime")).ToList();

                            foreach (PropertyInfo prop in DateTimeInstallationProps)
                            {
                                TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                    x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIpower.ToString() &&
                                    x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                if (LabelName != null)
                                {
                                    object PropObject = prop.GetValue(OthersInstallationObject, null);
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                }
                            }
                        }

                        //
                        // Installation Dynamic Attributes... (DateTime DataType Attribute)
                        // 
                        if (DateTimeDynamicInstallationAttributesViewModel != null ? DateTimeDynamicInstallationAttributesViewModel.Count > 0 : false)
                        {
                            List<TLIdynamicAtt> DateTimeInstallationDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                               !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIpower.ToString() &&
                               !x.LibraryAtt && x.DataType.Name.ToLower() == "datetime" &&
                                DateTimeDynamicInstallationAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames).ToList();

                            List<TLIdynamicAttInstValue> DateTimeDynamicAttInstValues = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                                x.InventoryId == OthersInstallationObject.Id && !x.disable &&
                               !x.DynamicAtt.LibraryAtt &&
                                DateTimeInstallationDynamicAttributes.Exists(y => y.Key.ToLower() == x.DynamicAtt.Key.ToLower()) &&
                                x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIpower.ToString()
                                   , x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                            foreach (TLIdynamicAtt InstallationDynamicAtt in DateTimeInstallationDynamicAttributes)
                            {
                                TLIdynamicAttInstValue DynamicAttInstallationValue = DateTimeDynamicAttInstValues.FirstOrDefault(x =>
                                    x.DynamicAtt.Key.ToLower() == InstallationDynamicAtt.Key.ToLower());

                                if (DynamicAttInstallationValue != null)
                                {
                                    dynamic DynamicAttValue = new ExpandoObject();
                                    if (DynamicAttInstallationValue.ValueDateTime != null)
                                        DynamicAttValue = DynamicAttInstallationValue.ValueDateTime;

                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, DynamicAttValue));
                                }
                                else
                                {
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, null));
                                }
                            }
                        }

                        ((IDictionary<String, Object>)DynamiPowerInstallation).Add(new KeyValuePair<string, object>("DateTimeAttributes", DateTimeAttributes));

                        OutPutList.Add(DynamiPowerInstallation);
                    }
                    PoweresTableDisplay.Model = OutPutList;

                    if (WithFilterData == true)
                    {
                        PoweresTableDisplay.filters = _unitOfWork.PowerRepository.GetRelatedTables();
                    }
                    else
                    {
                        PoweresTableDisplay.filters = null;
                    }

                    return new Response<ReturnWithFilters<object>>(true, PoweresTableDisplay, null, null, (int)Helpers.Constants.ApiReturnCode.success, Count);
                }
                catch (Exception err)
                {
                    return new Response<ReturnWithFilters<object>>(false, null, null, err.Message, (int)Helpers.Constants.ApiReturnCode.fail);
                }
            }
            else if (Helpers.Constants.LoadSubType.TLImwBU.ToString() == TableNameInstallation)
            {
                try
                {
                    int Count = 0;

                    List<FilterObjectList> ObjectAttributeFilters = CombineFilters.filters;
                    List<DateFilterViewModel> DateFilter = CombineFilters.DateFilter;

                    List<object> OutPutList = new List<object>();
                    ReturnWithFilters<object> MW_BUesTableDisplay = new ReturnWithFilters<object>();

                    List<TLIcivilLoads> CivilLoadsRecords = new List<TLIcivilLoads>();

                    List<StringFilterObjectList> AttributeFilters = new List<StringFilterObjectList>();
                    List<AttributeActivatedViewModel> MW_BUInstallationAttribute = new List<AttributeActivatedViewModel>();

                    if ((DateFilter != null ? DateFilter.Count() > 0 : false) ||
                        (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0))
                    {
                        MW_BUInstallationAttribute = _mapper.Map<List<AttributeActivatedViewModel>>(_unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                            x.Enable && x.AttributeActivatedId != null &&
                            x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.MW_BUInstallation.ToString() &&
                            x.EditableManagmentView.TLItablesNames1.TableName == Helpers.Constants.TablesNames.TLImwBU.ToString(),
                                x => x.AttributeActivated, x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1,
                                x => x.EditableManagmentView.TLItablesNames2)
                        .Select(x => x.AttributeActivated).ToList());
                    }

                    if (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0)
                    {
                        List<AttributeActivatedViewModel> NotDateDateMW_BUInstallationAttribute = MW_BUInstallationAttribute.Where(x =>
                            x.DataType.ToLower() != "datetime").ToList();

                        foreach (FilterObjectList item in ObjectAttributeFilters)
                        {
                            List<string> value = item.value.Select(x => x.ToString().ToLower()).ToList();

                            AttributeActivatedViewModel AttributeKey = NotDateDateMW_BUInstallationAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());

                            string Key = "";
                            if (AttributeKey != null)
                                Key = AttributeKey.Key;

                            else
                                Key = item.key;

                            AttributeFilters.Add(new StringFilterObjectList
                            {
                                key = Key,
                                value = value
                            });
                        }
                    }

                    //
                    // DateTime Objects Filters..
                    //
                    List<DateFilterViewModel> AfterConvertDateFilters = new List<DateFilterViewModel>();
                    if (DateFilter != null ? DateFilter.Count() > 0 : false)
                    {
                        List<AttributeActivatedViewModel> DateMW_BUInstallationAttribute = MW_BUInstallationAttribute.Where(x =>
                            x.DataType.ToLower() == "datetime").ToList();

                        foreach (DateFilterViewModel item in DateFilter)
                        {
                            DateTime DateFrom = Convert.ToDateTime(item.DateFrom);
                            DateTime DateTo = Convert.ToDateTime(item.DateTo);

                            if (DateFrom > DateTo)
                            {
                                DateTime Replacer = DateFrom;
                                DateFrom = DateTo;
                                DateTo = Replacer;
                            }

                            AttributeActivatedViewModel AttributeKey = DateMW_BUInstallationAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());
                            string Key = "";

                            if (AttributeKey != null)
                                Key = AttributeKey.Key;
                            else
                                Key = item.key;

                            AfterConvertDateFilters.Add(new DateFilterViewModel
                            {
                                key = Key,
                                DateFrom = DateFrom,
                                DateTo = DateTo
                            });
                        }
                    }

                    List<int> MW_BUIds = new List<int>();
                    List<int> WithoutDateFilterMW_BUInstallation = new List<int>();
                    List<int> WithDateFilterMW_BUInstallation = new List<int>();

                    if (AttributeFilters != null && AttributeFilters.Count > 0)
                    {
                        //
                        // Installation Dynamic Attributes...
                        //
                        List<TLIdynamicAtt> InstDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AttributeFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            !x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == Helpers.Constants.TablesNames.TLImwBU.ToString()
                                , x => x.tablesNames, x => x.DataType).ToList();

                        List<int> DynamicInstValueListIds = new List<int>();
                        bool DynamicInstExist = false;
                        if (InstDynamicAttListIds.Count() > 0)
                        {
                            DynamicInstExist = true;
                            GetInventoriesIdsFromDynamicAttributes(out DynamicInstValueListIds, InstDynamicAttListIds, AttributeFilters);
                        }

                        //
                        // Installation Attribute Activated...
                        //
                        bool AttrInstExist = typeof(MW_BUViewModel).GetProperties().ToList().Exists(x =>
                            AttributeFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower() && y.key.ToLower() != "id"));

                        List<int> InstallationAttributeActivated = new List<int>();
                        if (AttrInstExist)
                        {
                            List<PropertyInfo> NotStringProps = typeof(MW_BUViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() != "string" &&
                                    AttributeFilters.Exists(y =>
                                        y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<PropertyInfo> StringProps = typeof(MW_BUViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() == "string" &&
                                    AttributeFilters.Exists(y =>
                                        y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<StringFilterObjectList> AttrInstAttributeFilters = AttributeFilters.Where(x =>
                                NotStringProps.Exists(y => y.Name.ToLower() == x.key.ToLower()) ||
                                StringProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            InstallationAttributeActivated = _unitOfWork.MW_BURepository.GetWhere(x =>
                                AttrInstAttributeFilters.All(z =>
                                NotStringProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (y.GetValue(_mapper.Map<MW_BUViewModel>(x), null) != null ? z.value.Contains(y.GetValue(_mapper.Map<MW_BUViewModel>(x), null).ToString().ToLower()) : false)) ||
                                StringProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (z.value.Any(w =>
                                        y.GetValue(_mapper.Map<MW_BUViewModel>(x), null) != null ? y.GetValue(_mapper.Map<MW_BUViewModel>(x), null).ToString().ToLower().StartsWith(w.ToLower()) : false))))
                            ).Select(i => i.Id).ToList();
                        }

                        //
                        // Installation (Attribute Activated + Dynamic) Attributes...
                        //
                        List<int> IntersectInstallationIds = new List<int>();
                        if (AttrInstExist && DynamicInstExist)
                        {
                            WithoutDateFilterMW_BUInstallation = InstallationAttributeActivated.Intersect(DynamicInstValueListIds).ToList();
                        }
                        else if (AttrInstExist)
                        {
                            WithoutDateFilterMW_BUInstallation = InstallationAttributeActivated;
                        }
                        else if (DynamicInstExist)
                        {
                            WithoutDateFilterMW_BUInstallation = DynamicInstValueListIds;
                        }
                    }

                    if (DateFilter != null ? DateFilter.Count() > 0 : false)
                    {
                        List<TLIdynamicAtt> DateTimeInstDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AfterConvertDateFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            !x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == Helpers.Constants.TablesNames.TLImwBU.ToString()
                                , x => x.tablesNames, x => x.DataType).ToList();

                        List<int> DynamicInstValueListIds = new List<int>();
                        bool DynamicInstExist = false;

                        if (DateTimeInstDynamicAttListIds.Count > 0)
                        {
                            DynamicInstExist = true;
                            List<DateFilterViewModel> DynamicInstAttributeFilters = AfterConvertDateFilters.Where(x =>
                                DateTimeInstDynamicAttListIds.Exists(y => y.Key.ToLower() == x.key.ToLower())).ToList();

                            DynamicInstValueListIds = new List<int>();

                            List<TLIdynamicAttInstValue> DynamicInstValueListObjects = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                                DateTimeInstDynamicAttListIds.Exists(y => y.Id == x.DynamicAttId) && !x.disable).ToList();

                            List<int> InventoriesIds = DynamicInstValueListObjects.Select(x => x.InventoryId).Distinct().ToList();

                            foreach (int InventoryId in InventoriesIds)
                            {
                                List<TLIdynamicAttInstValue> DynamicInstValueListInventories = DynamicInstValueListObjects.Where(x =>
                                    x.InventoryId == InventoryId).ToList();

                                if (DynamicInstAttributeFilters.All(y => DynamicInstValueListInventories.Exists(x =>
                                    (x.ValueDateTime != null ?
                                        (x.ValueDateTime >= y.DateFrom && x.ValueDateTime <= y.DateTo) : (false)))))
                                {
                                    DynamicInstValueListIds.Add(InventoryId);
                                }
                            }
                        }

                        //
                        // Installation Attribute Activated...
                        //
                        List<PropertyInfo> InstallationProps = typeof(MW_BUViewModel).GetProperties().Where(x =>
                            AfterConvertDateFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower())).ToList();

                        List<int> InstallationAttributeActivatedIds = new List<int>();
                        bool AttrInstExist = false;

                        if (InstallationProps != null)
                        {
                            AttrInstExist = true;

                            List<DateFilterViewModel> InstallationPropsAttributeFilters = AfterConvertDateFilters.Where(x =>
                                InstallationProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            InstallationAttributeActivatedIds = _unitOfWork.MW_BURepository.GetWhere(x =>
                                InstallationPropsAttributeFilters.All(z =>
                                    (InstallationProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && ((y.GetValue(_mapper.Map<MW_BUViewModel>(x), null) != null) ?
                                        ((z.DateFrom <= Convert.ToDateTime(y.GetValue(_mapper.Map<MW_BUViewModel>(x), null))) &&
                                         (z.DateTo >= Convert.ToDateTime(y.GetValue(_mapper.Map<MW_BUViewModel>(x), null)))) : (false)))))
                            ).Select(i => i.Id).ToList();
                        }

                        //
                        // Installation (Attribute Activated + Dynamic) Attributes...
                        //
                        if (AttrInstExist && DynamicInstExist)
                        {
                            WithDateFilterMW_BUInstallation = InstallationAttributeActivatedIds.Intersect(DynamicInstValueListIds).ToList();
                        }
                        else if (AttrInstExist)
                        {
                            WithDateFilterMW_BUInstallation = InstallationAttributeActivatedIds;
                        }
                        else if (DynamicInstExist)
                        {
                            WithDateFilterMW_BUInstallation = DynamicInstValueListIds;
                        }
                    }

                    if ((DateFilter != null ? DateFilter.Count() > 0 : false) ||
                        (AttributeFilters != null ? AttributeFilters.Count() > 0 : false))
                    {
                        if ((AttributeFilters != null ? AttributeFilters.Count > 0 : false) &&
                                (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false))
                        {
                            MW_BUIds = WithoutDateFilterMW_BUInstallation.Intersect(WithDateFilterMW_BUInstallation).ToList();
                        }
                        else if (AttributeFilters != null ? AttributeFilters.Count > 0 : false)
                        {
                            MW_BUIds = WithoutDateFilterMW_BUInstallation;
                        }
                        else if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                        {
                            MW_BUIds = WithDateFilterMW_BUInstallation;
                        }

                        CivilLoadsRecords = _unitOfWork.CivilLoadsRepository.GetIncludeWhere(x =>
                        (x.allLoadInstId != null ? x.allLoadInst.mwBUId != null : false) &&
                        (!x.Dismantle) &&
                            (x.SiteCode == BaseFilters.siteCode) &&
                            

                            MW_BUIds.Contains(x.allLoadInst.mwBUId.Value),
                        x => x.allCivilInst, x => x.allLoadInst, x => x.allLoadInst.mwBU, x => x.allLoadInst.mwBU.InstallationPlace, x => x.allLoadInst.mwBU.MwBULibrary,
                        x => x.allLoadInst.mwBU.MainDish, x => x.allLoadInst.mwBU.Owner, x => x.allLoadInst.mwBU.baseBU).ToList();
                    }
                    else
                    {
                        CivilLoadsRecords = _unitOfWork.CivilLoadsRepository.GetIncludeWhere(x =>
                           (x.allLoadInstId != null ? x.allLoadInst.mwBUId != null : false) &&
                           (!x.Dismantle) &&
                           (x.SiteCode == BaseFilters.siteCode),
   
                       x => x.allCivilInst, x => x.allLoadInst, x => x.allLoadInst.mwBU, x => x.allLoadInst.mwBU.InstallationPlace, x => x.allLoadInst.mwBU.MwBULibrary,
                       x => x.allLoadInst.mwBU.MainDish, x => x.allLoadInst.mwBU.Owner, x => x.allLoadInst.mwBU.baseBU).ToList();
                    }

                    // Delete Duplicated Objects Based On Installation Date...
                    List<TLIcivilLoads> NewList = new List<TLIcivilLoads>();
                    foreach (var item in CivilLoadsRecords)
                    {
                        TLIcivilLoads CheckIfExist = NewList.FirstOrDefault(x => x.allLoadInst.mwBUId.Value == item.allLoadInst.mwBUId.Value);
                        if (CheckIfExist != null)
                        {
                            if (CheckIfExist.InstallationDate < item.InstallationDate)
                            {
                                NewList.Remove(CheckIfExist);
                                NewList.Add(item);
                            }
                        }
                        else
                        {
                            NewList.Add(item);
                        }
                    }
                    CivilLoadsRecords = NewList;

                    Count = CivilLoadsRecords.Count();

                    CivilLoadsRecords = CivilLoadsRecords.Skip((parameterPagination.PageNumber - 1) * parameterPagination.PageSize).
                         Take(parameterPagination.PageSize).ToList();

                    List<MW_BUViewModel> BUs = _mapper.Map<List<MW_BUViewModel>>(CivilLoadsRecords.Select(x => x.allLoadInst.mwBU).ToList());

                    foreach (var s in BUs)
                    {
                        var bu = db.TLImwDish.FirstOrDefault(x => x.Id == s.SdDishId);
                        s.SdDish_Name = bu != null ? bu.DishName : "NA";

                    }




                    List<TLIattributeViewManagment> AllAttributes = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                       (x.Enable && x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.MW_BUInstallation.ToString() &&
                       (x.AttributeActivatedId != null ?
                            (x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLImwBU.ToString() && x.AttributeActivated.enable) :
                            (!x.DynamicAtt.LibraryAtt && !x.DynamicAtt.disable && x.DynamicAtt.tablesNames.TableName == Helpers.Constants.TablesNames.TLImwBU.ToString()))) ||
                        (x.AttributeActivated != null ?
                            ((x.AttributeActivated.Key.ToLower() == "id" || x.AttributeActivated.Key.ToLower() == "active") && x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLImwBU.ToString()) : false),
                           x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1, x => x.EditableManagmentView.TLItablesNames2,
                           x => x.AttributeActivated, x => x.DynamicAtt, x => x.DynamicAtt.tablesNames, x => x.DynamicAtt.DataType).ToList();

                    List<TLIattributeViewManagment> NotDateTimeInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() != "datetime") : false).ToList();

                    List<TLIattributeViewManagment> NotDateTimeDynamicInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() != "datetime" : false).ToList();

                    List<TLIattributeViewManagment> DateTimeInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() == "datetime") : false).ToList();

                    List<TLIattributeViewManagment> DateTimeDynamicInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() == "datetime" : false).ToList();


                    foreach (MW_BUViewModel BUsInstallationObject in BUs)
                    {
                        dynamic DynamiMW_BUInstallation = new ExpandoObject();

                        //
                        // Installation Object ViewModel...
                        //
                        if (NotDateTimeInstallationAttributesViewModel != null ? NotDateTimeInstallationAttributesViewModel.Count > 0 : false)
                        {
                            List<PropertyInfo> InstallationProps = typeof(MW_BUViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() != "datetime" :
                                    (x.PropertyType.Name.ToLower() != "datetime")) :
                                (x.PropertyType.Name.ToLower() != "datetime")).ToList();

                            foreach (PropertyInfo prop in InstallationProps)
                            {
                                if (prop.Name.ToLower().Contains("_name") &&
                                    NotDateTimeInstallationAttributesViewModel.Exists(x =>
                                        x.AttributeActivated.Label.ToLower() == prop.Name.ToLower()))
                                {
                                    object ForeignKeyNamePropObject = prop.GetValue(BUsInstallationObject, null);
                                    ((IDictionary<String, Object>)DynamiMW_BUInstallation).Add(new KeyValuePair<string, object>(prop.Name, ForeignKeyNamePropObject));
                                }
                                else if (NotDateTimeInstallationAttributesViewModel.Exists(x =>
                                     x.AttributeActivated.Key.ToLower() == prop.Name.ToLower()) &&
                                    !prop.Name.ToLower().Contains("_name") &&
                                    (prop.Name.ToLower().Substring(Math.Max(0, prop.Name.Length - 2)) != "id" || prop.Name.ToLower() == "id"))
                                {
                                    if (prop.Name.ToLower() != "id" && prop.Name.ToLower() != "active")
                                    {
                                        TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                            x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLImwBU.ToString() &&
                                            x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                        if (LabelName != null)
                                        {
                                            object PropObject = prop.GetValue(BUsInstallationObject, null);
                                            ((IDictionary<String, Object>)DynamiMW_BUInstallation).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                        }
                                    }
                                    else
                                    {
                                        object PropObject = prop.GetValue(BUsInstallationObject, null);
                                        ((IDictionary<String, Object>)DynamiMW_BUInstallation).Add(new KeyValuePair<string, object>(prop.Name, PropObject));
                                    }
                                }
                            }
                        }

                        //
                        // Installation Dynamic Attributes... (Not DateTime DataType Attribute)
                        //
                        if (NotDateTimeDynamicInstallationAttributesViewModel != null ? NotDateTimeDynamicInstallationAttributesViewModel.Count > 0 : false)
                        {
                            List<TLIdynamicAtt> NotDateTimeInstallationDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                                !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLImwBU.ToString() &&
                                !x.LibraryAtt && x.DataType.Name.ToLower() != "datetime" &&
                                NotDateTimeDynamicInstallationAttributesViewModel.Exists(y => y.DynamicAttId == x.Id)
                                    , x => x.tablesNames, x => x.DataType).ToList();

                            List<TLIdynamicAttInstValue> NotDateTimeDynamicAttInstValues = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                                !x.DynamicAtt.LibraryAtt && !x.disable &&
                                x.InventoryId == BUsInstallationObject.Id &&
                                NotDateTimeInstallationDynamicAttributes.Exists(y => y.Key.ToLower() == x.DynamicAtt.Key.ToLower()) &&
                                x.tablesNames.TableName == Helpers.Constants.TablesNames.TLImwBU.ToString()
                                    , x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                            foreach (TLIdynamicAtt InstallationDynamicAtt in NotDateTimeInstallationDynamicAttributes)
                            {
                                TLIdynamicAttInstValue DynamicAttInstValue = NotDateTimeDynamicAttInstValues.FirstOrDefault(x =>
                                    x.DynamicAtt.Key.ToLower() == InstallationDynamicAtt.Key.ToLower());

                                if (DynamicAttInstValue != null)
                                {
                                    dynamic DynamicAttValue = new ExpandoObject();
                                    if (DynamicAttInstValue.ValueString != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueString;

                                    else if (DynamicAttInstValue.ValueDouble != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueDouble;

                                    else if (DynamicAttInstValue.ValueDateTime != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueDateTime;

                                    else if (DynamicAttInstValue.ValueBoolean != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueBoolean;

                                    ((IDictionary<String, Object>)DynamiMW_BUInstallation).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, DynamicAttValue));
                                }
                                else
                                {
                                    ((IDictionary<String, Object>)DynamiMW_BUInstallation).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, null));
                                }
                            }
                        }

                        //
                        // Installation Object ViewModel... (DateTime DataType Attribute)
                        //
                        dynamic DateTimeAttributes = new ExpandoObject();
                        if (DateTimeInstallationAttributesViewModel != null ? DateTimeInstallationAttributesViewModel.Count() > 0 : false)
                        {
                            List<PropertyInfo> DateTimeInstallationProps = typeof(MW_BUViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() == "datetime" :
                                    (x.PropertyType.Name.ToLower() == "datetime")) :
                                (x.PropertyType.Name.ToLower() == "datetime")).ToList();

                            foreach (PropertyInfo prop in DateTimeInstallationProps)
                            {
                                TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                    x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLImwBU.ToString() &&
                                    x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                if (LabelName != null)
                                {
                                    object PropObject = prop.GetValue(BUsInstallationObject, null);
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                }
                            }
                        }

                        //
                        // Installation Dynamic Attributes... (DateTime DataType Attribute)
                        // 
                        if (DateTimeDynamicInstallationAttributesViewModel != null ? DateTimeDynamicInstallationAttributesViewModel.Count > 0 : false)
                        {
                            List<TLIdynamicAtt> DateTimeInstallationDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                               !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLImwBU.ToString() &&
                               !x.LibraryAtt && x.DataType.Name.ToLower() == "datetime" &&
                                DateTimeDynamicInstallationAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames).ToList();

                            List<TLIdynamicAttInstValue> DateTimeDynamicAttInstValues = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                                x.InventoryId == BUsInstallationObject.Id && !x.disable &&
                               !x.DynamicAtt.LibraryAtt &&
                                DateTimeInstallationDynamicAttributes.Exists(y => y.Key.ToLower() == x.DynamicAtt.Key.ToLower()) &&
                                x.tablesNames.TableName == Helpers.Constants.TablesNames.TLImwBU.ToString()
                                   , x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                            foreach (TLIdynamicAtt InstallationDynamicAtt in DateTimeInstallationDynamicAttributes)
                            {
                                TLIdynamicAttInstValue DynamicAttInstallationValue = DateTimeDynamicAttInstValues.FirstOrDefault(x =>
                                    x.DynamicAtt.Key.ToLower() == InstallationDynamicAtt.Key.ToLower());

                                if (DynamicAttInstallationValue != null)
                                {
                                    dynamic DynamicAttValue = new ExpandoObject();
                                    if (DynamicAttInstallationValue.ValueDateTime != null)
                                        DynamicAttValue = DynamicAttInstallationValue.ValueDateTime;

                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, DynamicAttValue));
                                }
                                else
                                {
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, null));
                                }
                            }
                        }

                        ((IDictionary<String, Object>)DynamiMW_BUInstallation).Add(new KeyValuePair<string, object>("DateTimeAttributes", DateTimeAttributes));

                        OutPutList.Add(DynamiMW_BUInstallation);
                    }
                    MW_BUesTableDisplay.Model = OutPutList;

                    if (WithFilterData == true)
                    {
                        MW_BUesTableDisplay.filters = _unitOfWork.MW_BURepository.GetRelatedTables(BaseFilters.siteCode);
                    }
                    else
                    {
                        MW_BUesTableDisplay.filters = null;
                    }

                    return new Response<ReturnWithFilters<object>>(true, MW_BUesTableDisplay, null, null, (int)Helpers.Constants.ApiReturnCode.success, Count);
                }
                catch (Exception err)
                {
                    return new Response<ReturnWithFilters<object>>(false, null, null, err.Message, (int)Helpers.Constants.ApiReturnCode.fail);
                }
            }
            else if (Helpers.Constants.LoadSubType.TLImwRFU.ToString() == TableNameInstallation)
            {
                try
                {
                    int Count = 0;

                    List<FilterObjectList> ObjectAttributeFilters = CombineFilters.filters;
                    List<DateFilterViewModel> DateFilter = CombineFilters.DateFilter;

                    List<object> OutPutList = new List<object>();
                    ReturnWithFilters<object> MW_RFUesTableDisplay = new ReturnWithFilters<object>();

                    List<TLIcivilLoads> CivilLoadsRecords = new List<TLIcivilLoads>();

                    List<StringFilterObjectList> AttributeFilters = new List<StringFilterObjectList>();
                    List<AttributeActivatedViewModel> MW_RFUInstallationAttribute = new List<AttributeActivatedViewModel>();

                    if ((DateFilter != null ? DateFilter.Count() > 0 : false) ||
                        (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0))
                    {
                        MW_RFUInstallationAttribute = _mapper.Map<List<AttributeActivatedViewModel>>(_unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                            x.Enable && x.AttributeActivatedId != null &&
                            x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.MW_RFUInstallation.ToString() &&
                            x.EditableManagmentView.TLItablesNames1.TableName == Helpers.Constants.TablesNames.TLImwRFU.ToString(),
                                x => x.AttributeActivated, x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1,
                                x => x.EditableManagmentView.TLItablesNames2)
                        .Select(x => x.AttributeActivated).ToList());
                    }

                    if (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0)
                    {
                        List<AttributeActivatedViewModel> NotDateDateMW_RFUInstallationAttribute = MW_RFUInstallationAttribute.Where(x =>
                            x.DataType.ToLower() != "datetime").ToList();

                        foreach (FilterObjectList item in ObjectAttributeFilters)
                        {
                            List<string> value = item.value.Select(x => x.ToString().ToLower()).ToList();

                            AttributeActivatedViewModel AttributeKey = NotDateDateMW_RFUInstallationAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());

                            string Key = "";
                            if (AttributeKey != null)
                                Key = AttributeKey.Key;

                            else
                                Key = item.key;

                            AttributeFilters.Add(new StringFilterObjectList
                            {
                                key = Key,
                                value = value
                            });
                        }
                    }

                    //
                    // DateTime Objects Filters..
                    //
                    List<DateFilterViewModel> AfterConvertDateFilters = new List<DateFilterViewModel>();
                    if (DateFilter != null ? DateFilter.Count() > 0 : false)
                    {
                        List<AttributeActivatedViewModel> DateMW_RFUInstallationAttribute = MW_RFUInstallationAttribute.Where(x =>
                            x.DataType.ToLower() == "datetime").ToList();

                        foreach (DateFilterViewModel item in DateFilter)
                        {
                            DateTime DateFrom = Convert.ToDateTime(item.DateFrom);
                            DateTime DateTo = Convert.ToDateTime(item.DateTo);

                            if (DateFrom > DateTo)
                            {
                                DateTime Replacer = DateFrom;
                                DateFrom = DateTo;
                                DateTo = Replacer;
                            }

                            AttributeActivatedViewModel AttributeKey = DateMW_RFUInstallationAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());
                            string Key = "";

                            if (AttributeKey != null)
                                Key = AttributeKey.Key;
                            else
                                Key = item.key;

                            AfterConvertDateFilters.Add(new DateFilterViewModel
                            {
                                key = Key,
                                DateFrom = DateFrom,
                                DateTo = DateTo
                            });
                        }
                    }

                    List<int> MW_RFUIds = new List<int>();
                    List<int> WithoutDateFilterMW_RFUInstallation = new List<int>();
                    List<int> WithDateFilterMW_RFUInstallation = new List<int>();

                    if (AttributeFilters != null && AttributeFilters.Count > 0)
                    {
                        //
                        // Installation Dynamic Attributes...
                        //
                        List<TLIdynamicAtt> InstDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AttributeFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            !x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == Helpers.Constants.TablesNames.TLImwRFU.ToString()
                                , x => x.tablesNames, x => x.DataType).ToList();

                        List<int> DynamicInstValueListIds = new List<int>();
                        bool DynamicInstExist = false;
                        if (InstDynamicAttListIds.Count() > 0)
                        {
                            DynamicInstExist = true;
                            GetInventoriesIdsFromDynamicAttributes(out DynamicInstValueListIds, InstDynamicAttListIds, AttributeFilters);
                        }

                        //
                        // Installation Attribute Activated...
                        //
                        bool AttrInstExist = typeof(MW_RFUViewModel).GetProperties().ToList().Exists(x =>
                            AttributeFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower() && y.key.ToLower() != "id"));

                        List<int> InstallationAttributeActivated = new List<int>();
                        if (AttrInstExist)
                        {
                            List<PropertyInfo> NotStringProps = typeof(MW_RFUViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() != "string" &&
                                    AttributeFilters.Exists(y =>
                                        y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<PropertyInfo> StringProps = typeof(MW_RFUViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() == "string" &&
                                    AttributeFilters.Exists(y =>
                                        y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<StringFilterObjectList> AttrInstAttributeFilters = AttributeFilters.Where(x =>
                                NotStringProps.Exists(y => y.Name.ToLower() == x.key.ToLower()) ||
                                StringProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            InstallationAttributeActivated = _unitOfWork.MW_RFURepository.GetWhere(x =>
                                AttrInstAttributeFilters.All(z =>
                                NotStringProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (y.GetValue(_mapper.Map<MW_RFUViewModel>(x), null) != null ? z.value.Contains(y.GetValue(_mapper.Map<MW_RFUViewModel>(x), null).ToString().ToLower()) : false)) ||
                                StringProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (z.value.Any(w =>
                                        y.GetValue(_mapper.Map<MW_RFUViewModel>(x), null) != null ? y.GetValue(_mapper.Map<MW_RFUViewModel>(x), null).ToString().ToLower().StartsWith(w.ToLower()) : false))))
                            ).Select(i => i.Id).ToList();
                        }

                        //
                        // Installation (Attribute Activated + Dynamic) Attributes...
                        //
                        List<int> IntersectInstallationIds = new List<int>();
                        if (AttrInstExist && DynamicInstExist)
                        {
                            WithoutDateFilterMW_RFUInstallation = InstallationAttributeActivated.Intersect(DynamicInstValueListIds).ToList();
                        }
                        else if (AttrInstExist)
                        {
                            WithoutDateFilterMW_RFUInstallation = InstallationAttributeActivated;
                        }
                        else if (DynamicInstExist)
                        {
                            WithoutDateFilterMW_RFUInstallation = DynamicInstValueListIds;
                        }
                    }

                    if (DateFilter != null ? DateFilter.Count() > 0 : false)
                    {
                        List<TLIdynamicAtt> DateTimeInstDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AfterConvertDateFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            !x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == Helpers.Constants.TablesNames.TLImwRFU.ToString()
                                , x => x.tablesNames, x => x.DataType).ToList();

                        List<int> DynamicInstValueListIds = new List<int>();
                        bool DynamicInstExist = false;

                        if (DateTimeInstDynamicAttListIds.Count > 0)
                        {
                            DynamicInstExist = true;
                            List<DateFilterViewModel> DynamicInstAttributeFilters = AfterConvertDateFilters.Where(x =>
                                DateTimeInstDynamicAttListIds.Exists(y => y.Key.ToLower() == x.key.ToLower())).ToList();

                            DynamicInstValueListIds = new List<int>();

                            List<TLIdynamicAttInstValue> DynamicInstValueListObjects = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                                DateTimeInstDynamicAttListIds.Exists(y => y.Id == x.DynamicAttId) && !x.disable).ToList();

                            List<int> InventoriesIds = DynamicInstValueListObjects.Select(x => x.InventoryId).Distinct().ToList();

                            foreach (int InventoryId in InventoriesIds)
                            {
                                List<TLIdynamicAttInstValue> DynamicInstValueListInventories = DynamicInstValueListObjects.Where(x =>
                                    x.InventoryId == InventoryId).ToList();

                                if (DynamicInstAttributeFilters.All(y => DynamicInstValueListInventories.Exists(x =>
                                    (x.ValueDateTime != null ?
                                        (x.ValueDateTime >= y.DateFrom && x.ValueDateTime <= y.DateTo) : (false)))))
                                {
                                    DynamicInstValueListIds.Add(InventoryId);
                                }
                            }
                        }

                        //
                        // Installation Attribute Activated...
                        //
                        List<PropertyInfo> InstallationProps = typeof(MW_RFUViewModel).GetProperties().Where(x =>
                            AfterConvertDateFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower())).ToList();

                        List<int> InstallationAttributeActivatedIds = new List<int>();
                        bool AttrInstExist = false;

                        if (InstallationProps != null)
                        {
                            AttrInstExist = true;

                            List<DateFilterViewModel> InstallationPropsAttributeFilters = AfterConvertDateFilters.Where(x =>
                                InstallationProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            InstallationAttributeActivatedIds = _unitOfWork.MW_RFURepository.GetWhere(x =>
                                InstallationPropsAttributeFilters.All(z =>
                                    (InstallationProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && ((y.GetValue(_mapper.Map<MW_RFUViewModel>(x), null) != null) ?
                                        ((z.DateFrom <= Convert.ToDateTime(y.GetValue(_mapper.Map<MW_RFUViewModel>(x), null))) &&
                                         (z.DateTo >= Convert.ToDateTime(y.GetValue(_mapper.Map<MW_RFUViewModel>(x), null)))) : (false)))))
                            ).Select(i => i.Id).ToList();
                        }

                        //
                        // Installation (Attribute Activated + Dynamic) Attributes...
                        //
                        if (AttrInstExist && DynamicInstExist)
                        {
                            WithDateFilterMW_RFUInstallation = InstallationAttributeActivatedIds.Intersect(DynamicInstValueListIds).ToList();
                        }
                        else if (AttrInstExist)
                        {
                            WithDateFilterMW_RFUInstallation = InstallationAttributeActivatedIds;
                        }
                        else if (DynamicInstExist)
                        {
                            WithDateFilterMW_RFUInstallation = DynamicInstValueListIds;
                        }
                    }

                    if ((DateFilter != null ? DateFilter.Count() > 0 : false) ||
                        (AttributeFilters != null ? AttributeFilters.Count() > 0 : false))
                    {
                        if ((AttributeFilters != null ? AttributeFilters.Count > 0 : false) &&
                                (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false))
                        {
                            MW_RFUIds = WithoutDateFilterMW_RFUInstallation.Intersect(WithDateFilterMW_RFUInstallation).ToList();
                        }
                        else if (AttributeFilters != null ? AttributeFilters.Count > 0 : false)
                        {
                            MW_RFUIds = WithoutDateFilterMW_RFUInstallation;
                        }
                        else if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                        {
                            MW_RFUIds = WithDateFilterMW_RFUInstallation;
                        }

                        CivilLoadsRecords = _unitOfWork.CivilLoadsRepository.GetIncludeWhere(x =>
                            (x.allLoadInstId != null ? x.allLoadInst.mwRFUId != null : false) &&
                            (!x.Dismantle) &&
                            (x.SiteCode == BaseFilters.siteCode) &&
                          
                            MW_RFUIds.Contains(x.allLoadInst.mwRFUId.Value),
                        x => x.allCivilInst, x => x.allLoadInst, x => x.allLoadInst.mwRFU, x => x.allLoadInst.mwRFU.MwPort, x => x.allLoadInst.mwRFU.MwRFULibrary,
                        x => x.allLoadInst.mwRFU.Owner).ToList();
                    }
                    else
                    {
                        CivilLoadsRecords = _unitOfWork.CivilLoadsRepository.GetIncludeWhere(x =>
                            (x.allLoadInstId != null ? x.allLoadInst.mwRFUId != null : false) &&
                            (!x.Dismantle) &&
                            (x.SiteCode == BaseFilters.siteCode),

                        x => x.allCivilInst, x => x.allLoadInst, x => x.allLoadInst.mwRFU, x => x.allLoadInst.mwRFU.MwPort, x => x.allLoadInst.mwRFU.MwRFULibrary,
                        x => x.allLoadInst.mwRFU.Owner).ToList();
                    }
                    // Delete Duplicated Objects Based On Installation Date...
                    List<TLIcivilLoads> NewList = new List<TLIcivilLoads>();
                    foreach (var item in CivilLoadsRecords)
                    {
                        TLIcivilLoads CheckIfExist = NewList.FirstOrDefault(x => x.allLoadInst.mwRFUId.Value == item.allLoadInst.mwRFUId.Value);
                        if (CheckIfExist != null)
                        {
                            if (CheckIfExist.InstallationDate < item.InstallationDate)
                            {
                                NewList.Remove(CheckIfExist);
                                NewList.Add(item);
                            }
                        }
                        else
                        {
                            NewList.Add(item);
                        }
                    }
                    CivilLoadsRecords = NewList;

                    Count = CivilLoadsRecords.Count();

                    CivilLoadsRecords = CivilLoadsRecords.Skip((parameterPagination.PageNumber - 1) * parameterPagination.PageSize).
                        Take(parameterPagination.PageSize).ToList();

                    List<MW_RFUViewModel> RFUs = _mapper.Map<List<MW_RFUViewModel>>(CivilLoadsRecords.Select(x => x.allLoadInst.mwRFU).ToList());

                    List<TLIattributeViewManagment> AllAttributes = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                       (x.Enable && x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.MW_RFUInstallation.ToString() &&
                       (x.AttributeActivatedId != null ?
                            (x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLImwRFU.ToString() && x.AttributeActivated.enable) :
                            (!x.DynamicAtt.LibraryAtt && !x.DynamicAtt.disable && x.DynamicAtt.tablesNames.TableName == Helpers.Constants.TablesNames.TLImwRFU.ToString()))) ||
                        (x.AttributeActivated != null ?
                            ((x.AttributeActivated.Key.ToLower() == "id" || x.AttributeActivated.Key.ToLower() == "active") && x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLImwRFU.ToString()) : false),
                           x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1, x => x.EditableManagmentView.TLItablesNames2,
                           x => x.AttributeActivated, x => x.DynamicAtt, x => x.DynamicAtt.tablesNames, x => x.DynamicAtt.DataType).ToList();

                    List<TLIattributeViewManagment> NotDateTimeInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() != "datetime") : false).ToList();

                    List<TLIattributeViewManagment> NotDateTimeDynamicInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() != "datetime" : false).ToList();

                    List<TLIattributeViewManagment> DateTimeInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() == "datetime") : false).ToList();

                    List<TLIattributeViewManagment> DateTimeDynamicInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() == "datetime" : false).ToList();


                    foreach (MW_RFUViewModel RFUsInstallationObject in RFUs)
                    {
                        dynamic DynamiMW_RFUInstallation = new ExpandoObject();

                        //
                        // Installation Object ViewModel...
                        //
                        if (NotDateTimeInstallationAttributesViewModel != null ? NotDateTimeInstallationAttributesViewModel.Count > 0 : false)
                        {
                            List<PropertyInfo> InstallationProps = typeof(MW_RFUViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() != "datetime" :
                                    (x.PropertyType.Name.ToLower() != "datetime")) :
                                (x.PropertyType.Name.ToLower() != "datetime")).ToList();

                            foreach (PropertyInfo prop in InstallationProps)
                            {
                                if (prop.Name.ToLower().Contains("_name") &&
                                    NotDateTimeInstallationAttributesViewModel.Exists(x =>
                                        x.AttributeActivated.Label.ToLower() == prop.Name.ToLower()))
                                {
                                    object ForeignKeyNamePropObject = prop.GetValue(RFUsInstallationObject, null);
                                    ((IDictionary<String, Object>)DynamiMW_RFUInstallation).Add(new KeyValuePair<string, object>(prop.Name, ForeignKeyNamePropObject));
                                }
                                else if (NotDateTimeInstallationAttributesViewModel.Exists(x =>
                                     x.AttributeActivated.Key.ToLower() == prop.Name.ToLower()) &&
                                    !prop.Name.ToLower().Contains("_name") &&
                                    (prop.Name.ToLower().Substring(Math.Max(0, prop.Name.Length - 2)) != "id" || prop.Name.ToLower() == "id"))
                                {
                                    if (prop.Name.ToLower() != "id" && prop.Name.ToLower() != "active")
                                    {
                                        TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                            x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLImwRFU.ToString() &&
                                            x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                        if (LabelName != null)
                                        {
                                            object PropObject = prop.GetValue(RFUsInstallationObject, null);
                                            ((IDictionary<String, Object>)DynamiMW_RFUInstallation).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                        }
                                    }
                                    else
                                    {
                                        object PropObject = prop.GetValue(RFUsInstallationObject, null);
                                        ((IDictionary<String, Object>)DynamiMW_RFUInstallation).Add(new KeyValuePair<string, object>(prop.Name, PropObject));
                                    }
                                }
                            }
                        }

                        //
                        // Installation Dynamic Attributes... (Not DateTime DataType Attribute)
                        //
                        if (NotDateTimeDynamicInstallationAttributesViewModel != null ? NotDateTimeDynamicInstallationAttributesViewModel.Count > 0 : false)
                        {
                            List<TLIdynamicAtt> NotDateTimeInstallationDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                                !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLImwRFU.ToString() &&
                                !x.LibraryAtt && x.DataType.Name.ToLower() != "datetime" &&
                                NotDateTimeDynamicInstallationAttributesViewModel.Exists(y => y.DynamicAttId == x.Id)
                                    , x => x.tablesNames, x => x.DataType).ToList();

                            List<TLIdynamicAttInstValue> NotDateTimeDynamicAttInstValues = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                                !x.DynamicAtt.LibraryAtt && !x.disable &&
                                x.InventoryId == RFUsInstallationObject.Id &&
                                NotDateTimeInstallationDynamicAttributes.Exists(y => y.Key.ToLower() == x.DynamicAtt.Key.ToLower()) &&
                                x.tablesNames.TableName == Helpers.Constants.TablesNames.TLImwRFU.ToString()
                                    , x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                            foreach (TLIdynamicAtt InstallationDynamicAtt in NotDateTimeInstallationDynamicAttributes)
                            {
                                TLIdynamicAttInstValue DynamicAttInstValue = NotDateTimeDynamicAttInstValues.FirstOrDefault(x =>
                                    x.DynamicAtt.Key.ToLower() == InstallationDynamicAtt.Key.ToLower());

                                if (DynamicAttInstValue != null)
                                {
                                    dynamic DynamicAttValue = new ExpandoObject();
                                    if (DynamicAttInstValue.ValueString != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueString;

                                    else if (DynamicAttInstValue.ValueDouble != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueDouble;

                                    else if (DynamicAttInstValue.ValueDateTime != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueDateTime;

                                    else if (DynamicAttInstValue.ValueBoolean != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueBoolean;

                                    ((IDictionary<String, Object>)DynamiMW_RFUInstallation).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, DynamicAttValue));
                                }
                                else
                                {
                                    ((IDictionary<String, Object>)DynamiMW_RFUInstallation).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, null));
                                }
                            }
                        }

                        //
                        // Installation Object ViewModel... (DateTime DataType Attribute)
                        //
                        dynamic DateTimeAttributes = new ExpandoObject();
                        if (DateTimeInstallationAttributesViewModel != null ? DateTimeInstallationAttributesViewModel.Count() > 0 : false)
                        {
                            List<PropertyInfo> DateTimeInstallationProps = typeof(MW_RFUViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() == "datetime" :
                                    (x.PropertyType.Name.ToLower() == "datetime")) :
                                (x.PropertyType.Name.ToLower() == "datetime")).ToList();

                            foreach (PropertyInfo prop in DateTimeInstallationProps)
                            {
                                TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                    x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLImwRFU.ToString() &&
                                    x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                if (LabelName != null)
                                {
                                    object PropObject = prop.GetValue(RFUsInstallationObject, null);
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                }
                            }
                        }

                        //
                        // Installation Dynamic Attributes... (DateTime DataType Attribute)
                        // 
                        if (DateTimeDynamicInstallationAttributesViewModel != null ? DateTimeDynamicInstallationAttributesViewModel.Count > 0 : false)
                        {
                            List<TLIdynamicAtt> DateTimeInstallationDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                               !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLImwRFU.ToString() &&
                               !x.LibraryAtt && x.DataType.Name.ToLower() == "datetime" &&
                                DateTimeDynamicInstallationAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames).ToList();

                            List<TLIdynamicAttInstValue> DateTimeDynamicAttInstValues = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                                x.InventoryId == RFUsInstallationObject.Id && !x.disable &&
                               !x.DynamicAtt.LibraryAtt &&
                                DateTimeInstallationDynamicAttributes.Exists(y => y.Key.ToLower() == x.DynamicAtt.Key.ToLower()) &&
                                x.tablesNames.TableName == Helpers.Constants.TablesNames.TLImwRFU.ToString()
                                   , x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                            foreach (TLIdynamicAtt InstallationDynamicAtt in DateTimeInstallationDynamicAttributes)
                            {
                                TLIdynamicAttInstValue DynamicAttInstallationValue = DateTimeDynamicAttInstValues.FirstOrDefault(x =>
                                    x.DynamicAtt.Key.ToLower() == InstallationDynamicAtt.Key.ToLower());

                                if (DynamicAttInstallationValue != null)
                                {
                                    dynamic DynamicAttValue = new ExpandoObject();
                                    if (DynamicAttInstallationValue.ValueDateTime != null)
                                        DynamicAttValue = DynamicAttInstallationValue.ValueDateTime;

                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, DynamicAttValue));
                                }
                                else
                                {
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, null));
                                }
                            }
                        }

                        ((IDictionary<String, Object>)DynamiMW_RFUInstallation).Add(new KeyValuePair<string, object>("DateTimeAttributes", DateTimeAttributes));

                        OutPutList.Add(DynamiMW_RFUInstallation);
                    }
                    MW_RFUesTableDisplay.Model = OutPutList;

                    if (WithFilterData == true)
                    {
                        MW_RFUesTableDisplay.filters = _unitOfWork.MW_RFURepository.GetRelatedTables();
                    }
                    else
                    {
                        MW_RFUesTableDisplay.filters = null;
                    }

                    return new Response<ReturnWithFilters<object>>(true, MW_RFUesTableDisplay, null, null, (int)Helpers.Constants.ApiReturnCode.success, Count);
                }
                catch (Exception err)
                {
                    return new Response<ReturnWithFilters<object>>(false, null, null, err.Message, (int)Helpers.Constants.ApiReturnCode.fail);
                }
            }
            else if (Helpers.Constants.LoadSubType.TLImwODU.ToString() == TableNameInstallation)
            {
                try
                {
                    int Count = 0;
                    List<FilterObjectList> ObjectAttributeFilters = CombineFilters.filters;
                    List<DateFilterViewModel> DateFilter = CombineFilters.DateFilter;

                    List<object> OutPutList = new List<object>();
                    ReturnWithFilters<object> MW_ODUsTableDisplay = new ReturnWithFilters<object>();

                    List<TLIcivilLoads> CivilLoadsRecords = new List<TLIcivilLoads>();

                    List<StringFilterObjectList> AttributeFilters = new List<StringFilterObjectList>();
                    List<AttributeActivatedViewModel> MW_ODUInstallationAttribute = new List<AttributeActivatedViewModel>();

                    if ((DateFilter != null ? DateFilter.Count() > 0 : false) ||
                        (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0))
                    {
                        MW_ODUInstallationAttribute = _mapper.Map<List<AttributeActivatedViewModel>>(_unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                            x.Enable && x.AttributeActivatedId != null &&
                            x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.MW_ODUInstallation.ToString() &&
                            x.EditableManagmentView.TLItablesNames1.TableName == Helpers.Constants.TablesNames.TLImwODU.ToString(),
                                x => x.AttributeActivated, x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1,
                                x => x.EditableManagmentView.TLItablesNames2)
                        .Select(x => x.AttributeActivated).ToList());
                    }

                    if (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0)
                    {
                        List<AttributeActivatedViewModel> NotDateDateMW_ODUInstallationAttribute = MW_ODUInstallationAttribute.Where(x =>
                            x.DataType.ToLower() != "datetime").ToList();

                        foreach (FilterObjectList item in ObjectAttributeFilters)
                        {
                            List<string> value = item.value.Select(x => x.ToString().ToLower()).ToList();

                            AttributeActivatedViewModel AttributeKey = NotDateDateMW_ODUInstallationAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());

                            string Key = "";
                            if (AttributeKey != null)
                                Key = AttributeKey.Key;

                            else
                                Key = item.key;

                            AttributeFilters.Add(new StringFilterObjectList
                            {
                                key = Key,
                                value = value
                            });
                        }
                    }

                    //
                    // DateTime Objects Filters..
                    //
                    List<DateFilterViewModel> AfterConvertDateFilters = new List<DateFilterViewModel>();
                    if (DateFilter != null ? DateFilter.Count() > 0 : false)
                    {
                        List<AttributeActivatedViewModel> DateMW_ODUInstallationAttribute = MW_ODUInstallationAttribute.Where(x =>
                            x.DataType.ToLower() == "datetime").ToList();

                        foreach (DateFilterViewModel item in DateFilter)
                        {
                            DateTime DateFrom = Convert.ToDateTime(item.DateFrom);
                            DateTime DateTo = Convert.ToDateTime(item.DateTo);

                            if (DateFrom > DateTo)
                            {
                                DateTime Replacer = DateFrom;
                                DateFrom = DateTo;
                                DateTo = Replacer;
                            }

                            AttributeActivatedViewModel AttributeKey = DateMW_ODUInstallationAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());
                            string Key = "";

                            if (AttributeKey != null)
                                Key = AttributeKey.Key;
                            else
                                Key = item.key;

                            AfterConvertDateFilters.Add(new DateFilterViewModel
                            {
                                key = Key,
                                DateFrom = DateFrom,
                                DateTo = DateTo
                            });
                        }
                    }

                    List<int> MW_ODUIds = new List<int>();
                    List<int> WithoutDateFilterMW_ODUInstallation = new List<int>();
                    List<int> WithDateFilterMW_ODUInstallation = new List<int>();

                    if (AttributeFilters != null && AttributeFilters.Count > 0)
                    {
                        //
                        // Installation Dynamic Attributes...
                        //
                        List<TLIdynamicAtt> InstDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AttributeFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            !x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == Helpers.Constants.TablesNames.TLImwODU.ToString()
                                , x => x.tablesNames, x => x.DataType).ToList();

                        List<int> DynamicInstValueListIds = new List<int>();
                        bool DynamicInstExist = false;
                        if (InstDynamicAttListIds.Count() > 0)
                        {
                            DynamicInstExist = true;
                            GetInventoriesIdsFromDynamicAttributes(out DynamicInstValueListIds, InstDynamicAttListIds, AttributeFilters);
                        }

                        //
                        // Installation Attribute Activated...
                        //
                        bool AttrInstExist = typeof(MW_ODUViewModel).GetProperties().ToList().Exists(x =>
                            AttributeFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower() && y.key.ToLower() != "id"));

                        List<int> InstallationAttributeActivated = new List<int>();
                        if (AttrInstExist)
                        {
                            List<PropertyInfo> NotStringProps = typeof(MW_ODUViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() != "string" &&
                                    AttributeFilters.Exists(y =>
                                        y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<PropertyInfo> StringProps = typeof(MW_ODUViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() == "string" &&
                                    AttributeFilters.Exists(y =>
                                        y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<StringFilterObjectList> AttrInstAttributeFilters = AttributeFilters.Where(x =>
                                NotStringProps.Exists(y => y.Name.ToLower() == x.key.ToLower()) ||
                                StringProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            InstallationAttributeActivated = _unitOfWork.MW_ODURepository.GetWhere(x =>
                                AttrInstAttributeFilters.All(z =>
                                NotStringProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (y.GetValue(_mapper.Map<MW_ODUViewModel>(x), null) != null ? z.value.Contains(y.GetValue(_mapper.Map<MW_ODUViewModel>(x), null).ToString().ToLower()) : false)) ||
                                StringProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (z.value.Any(w =>
                                        y.GetValue(_mapper.Map<MW_ODUViewModel>(x), null) != null ? y.GetValue(_mapper.Map<MW_ODUViewModel>(x), null).ToString().ToLower().StartsWith(w.ToLower()) : false))))
                            ).Select(i => i.Id).ToList();
                        }

                        //
                        // Installation (Attribute Activated + Dynamic) Attributes...
                        //
                        List<int> IntersectInstallationIds = new List<int>();
                        if (AttrInstExist && DynamicInstExist)
                        {
                            WithoutDateFilterMW_ODUInstallation = InstallationAttributeActivated.Intersect(DynamicInstValueListIds).ToList();
                        }
                        else if (AttrInstExist)
                        {
                            WithoutDateFilterMW_ODUInstallation = InstallationAttributeActivated;
                        }
                        else if (DynamicInstExist)
                        {
                            WithoutDateFilterMW_ODUInstallation = DynamicInstValueListIds;
                        }
                    }

                    if (DateFilter != null ? DateFilter.Count() > 0 : false)
                    {
                        List<TLIdynamicAtt> DateTimeInstDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AfterConvertDateFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            !x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == Helpers.Constants.TablesNames.TLImwODU.ToString()
                                , x => x.tablesNames, x => x.DataType).ToList();

                        List<int> DynamicInstValueListIds = new List<int>();
                        bool DynamicInstExist = false;

                        if (DateTimeInstDynamicAttListIds.Count > 0)
                        {
                            DynamicInstExist = true;
                            List<DateFilterViewModel> DynamicInstAttributeFilters = AfterConvertDateFilters.Where(x =>
                                DateTimeInstDynamicAttListIds.Exists(y => y.Key.ToLower() == x.key.ToLower())).ToList();

                            DynamicInstValueListIds = new List<int>();

                            List<TLIdynamicAttInstValue> DynamicInstValueListObjects = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                                DateTimeInstDynamicAttListIds.Exists(y => y.Id == x.DynamicAttId) && !x.disable).ToList();

                            List<int> InventoriesIds = DynamicInstValueListObjects.Select(x => x.InventoryId).Distinct().ToList();

                            foreach (int InventoryId in InventoriesIds)
                            {
                                List<TLIdynamicAttInstValue> DynamicInstValueListInventories = DynamicInstValueListObjects.Where(x =>
                                    x.InventoryId == InventoryId).ToList();

                                if (DynamicInstAttributeFilters.All(y => DynamicInstValueListInventories.Exists(x =>
                                    (x.ValueDateTime != null ?
                                        (x.ValueDateTime >= y.DateFrom && x.ValueDateTime <= y.DateTo) : (false)))))
                                {
                                    DynamicInstValueListIds.Add(InventoryId);
                                }
                            }
                        }

                        //
                        // Installation Attribute Activated...
                        //
                        List<PropertyInfo> InstallationProps = typeof(MW_ODUViewModel).GetProperties().Where(x =>
                            AfterConvertDateFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower())).ToList();

                        List<int> InstallationAttributeActivatedIds = new List<int>();
                        bool AttrInstExist = false;

                        if (InstallationProps != null)
                        {
                            AttrInstExist = true;

                            List<DateFilterViewModel> InstallationPropsAttributeFilters = AfterConvertDateFilters.Where(x =>
                                InstallationProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            InstallationAttributeActivatedIds = _unitOfWork.MW_ODURepository.GetWhere(x =>
                                InstallationPropsAttributeFilters.All(z =>
                                    (InstallationProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && ((y.GetValue(_mapper.Map<MW_ODUViewModel>(x), null) != null) ?
                                        ((z.DateFrom <= Convert.ToDateTime(y.GetValue(_mapper.Map<MW_ODUViewModel>(x), null))) &&
                                         (z.DateTo >= Convert.ToDateTime(y.GetValue(_mapper.Map<MW_ODUViewModel>(x), null)))) : (false)))))
                            ).Select(i => i.Id).ToList();
                        }

                        //
                        // Installation (Attribute Activated + Dynamic) Attributes...
                        //
                        if (AttrInstExist && DynamicInstExist)
                        {
                            WithDateFilterMW_ODUInstallation = InstallationAttributeActivatedIds.Intersect(DynamicInstValueListIds).ToList();
                        }
                        else if (AttrInstExist)
                        {
                            WithDateFilterMW_ODUInstallation = InstallationAttributeActivatedIds;
                        }
                        else if (DynamicInstExist)
                        {
                            WithDateFilterMW_ODUInstallation = DynamicInstValueListIds;
                        }
                    }

                    if ((DateFilter != null ? DateFilter.Count() > 0 : false) ||
                        (AttributeFilters != null ? AttributeFilters.Count() > 0 : false))
                    {
                        if ((AttributeFilters != null ? AttributeFilters.Count > 0 : false) &&
                                (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false))
                        {
                            MW_ODUIds = WithoutDateFilterMW_ODUInstallation.Intersect(WithDateFilterMW_ODUInstallation).ToList();
                        }
                        else if (AttributeFilters != null ? AttributeFilters.Count > 0 : false)
                        {
                            MW_ODUIds = WithoutDateFilterMW_ODUInstallation;
                        }
                        else if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                        {
                            MW_ODUIds = WithDateFilterMW_ODUInstallation;
                        }

                        CivilLoadsRecords = _unitOfWork.CivilLoadsRepository.GetIncludeWhere(x =>
                            (x.allLoadInstId != null ? x.allLoadInst.mwODUId != null : false) &&
                            (!x.Dismantle) &&
                            (x.SiteCode == BaseFilters.siteCode) &&
                            MW_ODUIds.Contains(x.allLoadInst.mwODUId.Value),
                        x => x.allCivilInst, x => x.allLoadInst, x => x.allLoadInst.mwODU, x => x.allLoadInst.mwODU.Mw_Dish, x => x.allLoadInst.mwODU.MwODULibrary,
                        x => x.allLoadInst.mwODU.Owner, x => x.allLoadInst.mwODU.OduInstallationType).ToList();
                    }
                    else
                    {
                        CivilLoadsRecords = _unitOfWork.CivilLoadsRepository.GetIncludeWhere(x =>
                            (x.allLoadInstId != null ? x.allLoadInst.mwODUId != null : false) &&
                            (!x.Dismantle) &&
                            (x.SiteCode == BaseFilters.siteCode),
                        x => x.allCivilInst, x => x.allLoadInst, x => x.allLoadInst.mwODU, x => x.allLoadInst.mwODU.Mw_Dish, x => x.allLoadInst.mwODU.MwODULibrary,
                        x => x.allLoadInst.mwODU.Owner, x => x.allLoadInst.mwODU.OduInstallationType).ToList();
                    }

                    // Delete Duplicated Objects Based On Installation Date...
                    List<TLIcivilLoads> NewList = new List<TLIcivilLoads>();
                    foreach (var item in CivilLoadsRecords)
                    {
                        TLIcivilLoads CheckIfExist = NewList.FirstOrDefault(x => x.allLoadInst.mwODUId.Value == item.allLoadInst.mwODUId.Value);
                        if (CheckIfExist != null)
                        {
                            if (CheckIfExist.InstallationDate < item.InstallationDate)
                            {
                                NewList.Remove(CheckIfExist);
                                NewList.Add(item);
                            }
                        }
                        else
                        {
                            NewList.Add(item);
                        }
                    }
                    CivilLoadsRecords = NewList;

                    Count = CivilLoadsRecords.Count();

                    CivilLoadsRecords = CivilLoadsRecords.Skip((parameterPagination.PageNumber - 1) * parameterPagination.PageSize).
                        Take(parameterPagination.PageSize).ToList();

                    List<MW_ODUViewModel> ODUs = _mapper.Map<List<MW_ODUViewModel>>(CivilLoadsRecords.Select(x => x.allLoadInst.mwODU).ToList());

                    List<TLIattributeViewManagment> AllAttributes = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                       (x.Enable && x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.MW_ODUInstallation.ToString() &&
                       (x.AttributeActivatedId != null ?
                            (x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLImwODU.ToString() && x.AttributeActivated.enable) :
                            (!x.DynamicAtt.LibraryAtt && !x.DynamicAtt.disable && x.DynamicAtt.tablesNames.TableName == Helpers.Constants.TablesNames.TLImwODU.ToString()))) ||
                        (x.AttributeActivated != null ?
                            ((x.AttributeActivated.Key.ToLower() == "id" || x.AttributeActivated.Key.ToLower() == "active") && x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLImwODU.ToString()) : false),
                           x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1, x => x.EditableManagmentView.TLItablesNames2,
                           x => x.AttributeActivated, x => x.DynamicAtt, x => x.DynamicAtt.tablesNames, x => x.DynamicAtt.DataType).ToList();

                    List<TLIattributeViewManagment> NotDateTimeInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() != "datetime") : false).ToList();

                    List<TLIattributeViewManagment> NotDateTimeDynamicInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() != "datetime" : false).ToList();

                    List<TLIattributeViewManagment> DateTimeInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() == "datetime") : false).ToList();

                    List<TLIattributeViewManagment> DateTimeDynamicInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() == "datetime" : false).ToList();


                    foreach (MW_ODUViewModel ODUsInstallationObject in ODUs)
                    {
                        dynamic DynamiMW_ODUInstallation = new ExpandoObject();

                        //
                        // Installation Object ViewModel...
                        //
                        if (NotDateTimeInstallationAttributesViewModel != null ? NotDateTimeInstallationAttributesViewModel.Count > 0 : false)
                        {
                            List<PropertyInfo> InstallationProps = typeof(MW_ODUViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() != "datetime" :
                                    (x.PropertyType.Name.ToLower() != "datetime")) :
                                (x.PropertyType.Name.ToLower() != "datetime")).ToList();

                            foreach (PropertyInfo prop in InstallationProps)
                            {
                                if (prop.Name.ToLower().Contains("_name") &&
                                    NotDateTimeInstallationAttributesViewModel.Exists(x =>
                                        x.AttributeActivated.Label.ToLower() == prop.Name.ToLower()))
                                {
                                    object ForeignKeyNamePropObject = prop.GetValue(ODUsInstallationObject, null);
                                    ((IDictionary<String, Object>)DynamiMW_ODUInstallation).Add(new KeyValuePair<string, object>(prop.Name, ForeignKeyNamePropObject));
                                }
                                else if (NotDateTimeInstallationAttributesViewModel.Exists(x =>
                                     x.AttributeActivated.Key.ToLower() == prop.Name.ToLower()) &&
                                    !prop.Name.ToLower().Contains("_name") &&
                                    (prop.Name.ToLower().Substring(Math.Max(0, prop.Name.Length - 2)) != "id" || prop.Name.ToLower() == "id"))
                                {
                                    if (prop.Name.ToLower() != "id" && prop.Name.ToLower() != "active")
                                    {
                                        TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                            x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLImwODU.ToString() &&
                                            x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                        if (LabelName != null)
                                        {
                                            object PropObject = prop.GetValue(ODUsInstallationObject, null);
                                            ((IDictionary<String, Object>)DynamiMW_ODUInstallation).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                        }
                                    }
                                    else
                                    {
                                        object PropObject = prop.GetValue(ODUsInstallationObject, null);
                                        ((IDictionary<String, Object>)DynamiMW_ODUInstallation).Add(new KeyValuePair<string, object>(prop.Name, PropObject));
                                    }
                                }
                            }
                        }

                        //
                        // Installation Dynamic Attributes... (Not DateTime DataType Attribute)
                        //
                        if (NotDateTimeDynamicInstallationAttributesViewModel != null ? NotDateTimeDynamicInstallationAttributesViewModel.Count > 0 : false)
                        {
                            List<TLIdynamicAtt> NotDateTimeInstallationDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                                !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLImwODU.ToString() &&
                                !x.LibraryAtt && x.DataType.Name.ToLower() != "datetime" &&
                                NotDateTimeDynamicInstallationAttributesViewModel.Exists(y => y.DynamicAttId == x.Id)
                                    , x => x.tablesNames, x => x.DataType).ToList();

                            List<TLIdynamicAttInstValue> NotDateTimeDynamicAttInstValues = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                                !x.DynamicAtt.LibraryAtt && !x.disable &&
                                x.InventoryId == ODUsInstallationObject.Id &&
                                NotDateTimeInstallationDynamicAttributes.Exists(y => y.Key.ToLower() == x.DynamicAtt.Key.ToLower()) &&
                                x.tablesNames.TableName == Helpers.Constants.TablesNames.TLImwODU.ToString()
                                    , x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                            foreach (TLIdynamicAtt InstallationDynamicAtt in NotDateTimeInstallationDynamicAttributes)
                            {
                                TLIdynamicAttInstValue DynamicAttInstValue = NotDateTimeDynamicAttInstValues.FirstOrDefault(x =>
                                    x.DynamicAtt.Key.ToLower() == InstallationDynamicAtt.Key.ToLower());

                                if (DynamicAttInstValue != null)
                                {
                                    dynamic DynamicAttValue = new ExpandoObject();
                                    if (DynamicAttInstValue.ValueString != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueString;

                                    else if (DynamicAttInstValue.ValueDouble != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueDouble;

                                    else if (DynamicAttInstValue.ValueDateTime != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueDateTime;

                                    else if (DynamicAttInstValue.ValueBoolean != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueBoolean;

                                    ((IDictionary<String, Object>)DynamiMW_ODUInstallation).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, DynamicAttValue));
                                }
                                else
                                {
                                    ((IDictionary<String, Object>)DynamiMW_ODUInstallation).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, null));
                                }
                            }
                        }

                        //
                        // Installation Object ViewModel... (DateTime DataType Attribute)
                        //
                        dynamic DateTimeAttributes = new ExpandoObject();
                        if (DateTimeInstallationAttributesViewModel != null ? DateTimeInstallationAttributesViewModel.Count() > 0 : false)
                        {
                            List<PropertyInfo> DateTimeInstallationProps = typeof(MW_ODUViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() == "datetime" :
                                    (x.PropertyType.Name.ToLower() == "datetime")) :
                                (x.PropertyType.Name.ToLower() == "datetime")).ToList();

                            foreach (PropertyInfo prop in DateTimeInstallationProps)
                            {
                                TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                    x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLImwODU.ToString() &&
                                    x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                if (LabelName != null)
                                {
                                    object PropObject = prop.GetValue(ODUsInstallationObject, null);
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                }
                            }
                        }

                        //
                        // Installation Dynamic Attributes... (DateTime DataType Attribute)
                        // 
                        if (DateTimeDynamicInstallationAttributesViewModel != null ? DateTimeDynamicInstallationAttributesViewModel.Count > 0 : false)
                        {
                            List<TLIdynamicAtt> DateTimeInstallationDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                               !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLImwODU.ToString() &&
                               !x.LibraryAtt && x.DataType.Name.ToLower() == "datetime" &&
                                DateTimeDynamicInstallationAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames).ToList();

                            List<TLIdynamicAttInstValue> DateTimeDynamicAttInstValues = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                                x.InventoryId == ODUsInstallationObject.Id && !x.disable &&
                               !x.DynamicAtt.LibraryAtt &&
                                DateTimeInstallationDynamicAttributes.Exists(y => y.Key.ToLower() == x.DynamicAtt.Key.ToLower()) &&
                                x.tablesNames.TableName == Helpers.Constants.TablesNames.TLImwODU.ToString()
                                   , x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                            foreach (TLIdynamicAtt InstallationDynamicAtt in DateTimeInstallationDynamicAttributes)
                            {
                                TLIdynamicAttInstValue DynamicAttInstallationValue = DateTimeDynamicAttInstValues.FirstOrDefault(x =>
                                    x.DynamicAtt.Key.ToLower() == InstallationDynamicAtt.Key.ToLower());

                                if (DynamicAttInstallationValue != null)
                                {
                                    dynamic DynamicAttValue = new ExpandoObject();
                                    if (DynamicAttInstallationValue.ValueDateTime != null)
                                        DynamicAttValue = DynamicAttInstallationValue.ValueDateTime;

                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, DynamicAttValue));
                                }
                                else
                                {
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, null));
                                }
                            }
                        }

                        ((IDictionary<String, Object>)DynamiMW_ODUInstallation).Add(new KeyValuePair<string, object>("DateTimeAttributes", DateTimeAttributes));

                        OutPutList.Add(DynamiMW_ODUInstallation);
                    }
                    MW_ODUsTableDisplay.Model = OutPutList;

                    if (WithFilterData == true)
                    {
                        MW_ODUsTableDisplay.filters = _unitOfWork.MW_ODURepository.GetRelatedTables(BaseFilters.siteCode);
                    }
                    else
                    {
                        MW_ODUsTableDisplay.filters = null;
                    }

                    return new Response<ReturnWithFilters<object>>(true, MW_ODUsTableDisplay, null, null, (int)Helpers.Constants.ApiReturnCode.success, Count);
                }
                catch (Exception err)
                {
                    return new Response<ReturnWithFilters<object>>(false, null, null, err.Message, (int)Helpers.Constants.ApiReturnCode.fail);
                }
            }
            else if (Helpers.Constants.LoadSubType.TLImwDish.ToString() == TableNameInstallation)
            {
                try
                {
                    int Count = 0;
                    List<FilterObjectList> ObjectAttributeFilters = CombineFilters.filters;
                    List<DateFilterViewModel> DateFilter = CombineFilters.DateFilter;

                    List<object> OutPutList = new List<object>();
                    ReturnWithFilters<object> MW_DishesTableDisplay = new ReturnWithFilters<object>();

                    List<TLIcivilLoads> CivilLoadsRecords = new List<TLIcivilLoads>();

                    List<StringFilterObjectList> AttributeFilters = new List<StringFilterObjectList>();
                    List<AttributeActivatedViewModel> MW_DishInstallationAttribute = new List<AttributeActivatedViewModel>();

                    if ((DateFilter != null ? DateFilter.Count() > 0 : false) ||
                        (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0))
                    {
                        MW_DishInstallationAttribute = _mapper.Map<List<AttributeActivatedViewModel>>(_unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                            x.Enable && x.AttributeActivatedId != null &&
                            x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.MW_DishInstallation.ToString() &&
                            x.EditableManagmentView.TLItablesNames1.TableName == Helpers.Constants.TablesNames.TLImwDish.ToString(),
                                x => x.AttributeActivated, x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1,
                                x => x.EditableManagmentView.TLItablesNames2)
                        .Select(x => x.AttributeActivated).ToList());
                    }

                    if (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0)
                    {
                        List<AttributeActivatedViewModel> NotDateDateMW_DishInstallationAttribute = MW_DishInstallationAttribute.Where(x =>
                            x.DataType.ToLower() != "datetime").ToList();

                        foreach (FilterObjectList item in ObjectAttributeFilters)
                        {
                            List<string> value = item.value.Select(x => x.ToString().ToLower()).ToList();

                            AttributeActivatedViewModel AttributeKey = NotDateDateMW_DishInstallationAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());

                            string Key = "";
                            if (AttributeKey != null)
                                Key = AttributeKey.Key;

                            else
                                Key = item.key;

                            AttributeFilters.Add(new StringFilterObjectList
                            {
                                key = Key,
                                value = value
                            });
                        }
                    }

                    //
                    // DateTime Objects Filters..
                    //
                    List<DateFilterViewModel> AfterConvertDateFilters = new List<DateFilterViewModel>();
                    if (DateFilter != null ? DateFilter.Count() > 0 : false)
                    {
                        List<AttributeActivatedViewModel> DateMW_DishInstallationAttribute = MW_DishInstallationAttribute.Where(x =>
                            x.DataType.ToLower() == "datetime").ToList();

                        foreach (DateFilterViewModel item in DateFilter)
                        {
                            DateTime DateFrom = Convert.ToDateTime(item.DateFrom);
                            DateTime DateTo = Convert.ToDateTime(item.DateTo);

                            if (DateFrom > DateTo)
                            {
                                DateTime Replacer = DateFrom;
                                DateFrom = DateTo;
                                DateTo = Replacer;
                            }

                            AttributeActivatedViewModel AttributeKey = DateMW_DishInstallationAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());
                            string Key = "";

                            if (AttributeKey != null)
                                Key = AttributeKey.Key;
                            else
                                Key = item.key;

                            AfterConvertDateFilters.Add(new DateFilterViewModel
                            {
                                key = Key,
                                DateFrom = DateFrom,
                                DateTo = DateTo
                            });
                        }
                    }

                    List<int> MW_DishIds = new List<int>();
                    List<int> WithoutDateFilterMW_DishInstallation = new List<int>();
                    List<int> WithDateFilterMW_DishInstallation = new List<int>();

                    if (AttributeFilters != null && AttributeFilters.Count > 0)
                    {
                        //
                        // Installation Dynamic Attributes...
                        //
                        List<TLIdynamicAtt> InstDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AttributeFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            !x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == Helpers.Constants.TablesNames.TLImwDish.ToString()
                                , x => x.tablesNames, x => x.DataType).ToList();

                        List<int> DynamicInstValueListIds = new List<int>();
                        bool DynamicInstExist = false;
                        if (InstDynamicAttListIds.Count() > 0)
                        {
                            DynamicInstExist = true;
                            GetInventoriesIdsFromDynamicAttributes(out DynamicInstValueListIds, InstDynamicAttListIds, AttributeFilters);
                        }

                        //
                        // Installation Attribute Activated...
                        //
                        bool AttrInstExist = typeof(MW_DishViewModel).GetProperties().ToList().Exists(x =>
                            AttributeFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower() && y.key.ToLower() != "id"));

                        List<int> InstallationAttributeActivated = new List<int>();
                        if (AttrInstExist)
                        {
                            List<PropertyInfo> NotStringProps = typeof(MW_DishViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() != "string" &&
                                    AttributeFilters.Exists(y =>
                                        y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<PropertyInfo> StringProps = typeof(MW_DishViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() == "string" &&
                                    AttributeFilters.Exists(y =>
                                        y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<StringFilterObjectList> AttrInstAttributeFilters = AttributeFilters.Where(x =>
                                NotStringProps.Exists(y => y.Name.ToLower() == x.key.ToLower()) ||
                                StringProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            InstallationAttributeActivated = _unitOfWork.MW_DishRepository.GetWhere(x =>
                                AttrInstAttributeFilters.All(z =>
                                NotStringProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (y.GetValue(_mapper.Map<MW_DishViewModel>(x), null) != null ? z.value.Contains(y.GetValue(_mapper.Map<MW_DishViewModel>(x), null).ToString().ToLower()) : false)) ||
                                StringProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (z.value.Any(w =>
                                        y.GetValue(_mapper.Map<MW_DishViewModel>(x), null) != null ? y.GetValue(_mapper.Map<MW_DishViewModel>(x), null).ToString().ToLower().StartsWith(w.ToLower()) : false))))
                            ).Select(i => i.Id).ToList();
                        }

                        //
                        // Installation (Attribute Activated + Dynamic) Attributes...
                        //
                        List<int> IntersectInstallationIds = new List<int>();
                        if (AttrInstExist && DynamicInstExist)
                        {
                            WithoutDateFilterMW_DishInstallation = InstallationAttributeActivated.Intersect(DynamicInstValueListIds).ToList();
                        }
                        else if (AttrInstExist)
                        {
                            WithoutDateFilterMW_DishInstallation = InstallationAttributeActivated;
                        }
                        else if (DynamicInstExist)
                        {
                            WithoutDateFilterMW_DishInstallation = DynamicInstValueListIds;
                        }
                    }

                    if (DateFilter != null ? DateFilter.Count() > 0 : false)
                    {
                        List<TLIdynamicAtt> DateTimeInstDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AfterConvertDateFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            !x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == Helpers.Constants.TablesNames.TLImwDish.ToString()
                                , x => x.tablesNames, x => x.DataType).ToList();

                        List<int> DynamicInstValueListIds = new List<int>();
                        bool DynamicInstExist = false;

                        if (DateTimeInstDynamicAttListIds.Count > 0)
                        {
                            DynamicInstExist = true;
                            List<DateFilterViewModel> DynamicInstAttributeFilters = AfterConvertDateFilters.Where(x =>
                                DateTimeInstDynamicAttListIds.Exists(y => y.Key.ToLower() == x.key.ToLower())).ToList();

                            DynamicInstValueListIds = new List<int>();

                            List<TLIdynamicAttInstValue> DynamicInstValueListObjects = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                                DateTimeInstDynamicAttListIds.Exists(y => y.Id == x.DynamicAttId) && !x.disable).ToList();

                            List<int> InventoriesIds = DynamicInstValueListObjects.Select(x => x.InventoryId).Distinct().ToList();

                            foreach (int InventoryId in InventoriesIds)
                            {
                                List<TLIdynamicAttInstValue> DynamicInstValueListInventories = DynamicInstValueListObjects.Where(x =>
                                    x.InventoryId == InventoryId).ToList();

                                if (DynamicInstAttributeFilters.All(y => DynamicInstValueListInventories.Exists(x =>
                                    (x.ValueDateTime != null ?
                                        (x.ValueDateTime >= y.DateFrom && x.ValueDateTime <= y.DateTo) : (false)))))
                                {
                                    DynamicInstValueListIds.Add(InventoryId);
                                }
                            }
                        }

                        //
                        // Installation Attribute Activated...
                        //
                        List<PropertyInfo> InstallationProps = typeof(MW_DishViewModel).GetProperties().Where(x =>
                            AfterConvertDateFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower())).ToList();

                        List<int> InstallationAttributeActivatedIds = new List<int>();
                        bool AttrInstExist = false;

                        if (InstallationProps != null)
                        {
                            AttrInstExist = true;

                            List<DateFilterViewModel> InstallationPropsAttributeFilters = AfterConvertDateFilters.Where(x =>
                                InstallationProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            InstallationAttributeActivatedIds = _unitOfWork.MW_DishRepository.GetWhere(x =>
                                InstallationPropsAttributeFilters.All(z =>
                                    (InstallationProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && ((y.GetValue(_mapper.Map<MW_DishViewModel>(x), null) != null) ?
                                        ((z.DateFrom <= Convert.ToDateTime(y.GetValue(_mapper.Map<MW_DishViewModel>(x), null))) &&
                                         (z.DateTo >= Convert.ToDateTime(y.GetValue(_mapper.Map<MW_DishViewModel>(x), null)))) : (false)))))
                            ).Select(i => i.Id).ToList();
                        }

                        //
                        // Installation (Attribute Activated + Dynamic) Attributes...
                        //
                        if (AttrInstExist && DynamicInstExist)
                        {
                            WithDateFilterMW_DishInstallation = InstallationAttributeActivatedIds.Intersect(DynamicInstValueListIds).ToList();
                        }
                        else if (AttrInstExist)
                        {
                            WithDateFilterMW_DishInstallation = InstallationAttributeActivatedIds;
                        }
                        else if (DynamicInstExist)
                        {
                            WithDateFilterMW_DishInstallation = DynamicInstValueListIds;
                        }
                    }

                    if ((DateFilter != null ? DateFilter.Count() > 0 : false) ||
                        (AttributeFilters != null ? AttributeFilters.Count() > 0 : false))
                    {
                        if ((AttributeFilters != null ? AttributeFilters.Count > 0 : false) &&
                                (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false))
                        {
                            MW_DishIds = WithoutDateFilterMW_DishInstallation.Intersect(WithDateFilterMW_DishInstallation).ToList();
                        }
                        else if (AttributeFilters != null ? AttributeFilters.Count > 0 : false)
                        {
                            MW_DishIds = WithoutDateFilterMW_DishInstallation;
                        }
                        else if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                        {
                            MW_DishIds = WithDateFilterMW_DishInstallation;
                        }

                        CivilLoadsRecords = _unitOfWork.CivilLoadsRepository.GetIncludeWhere(x =>
                            (x.allLoadInstId != null ? x.allLoadInst.mwDishId != null : false) &&
                            (!x.Dismantle) &&
                                (x.SiteCode == BaseFilters.siteCode) &&
                               
                                MW_DishIds.Contains(x.allLoadInst.mwDishId.Value),
                            x => x.allCivilInst, x => x.allLoadInst, x => x.allLoadInst.mwDish, x => x.allLoadInst.mwDish.InstallationPlace, x => x.allLoadInst.mwDish.MwDishLibrary,
                            x => x.allLoadInst.mwDish.owner, x => x.allLoadInst.mwDish.PolarityOnLocation, x => x.allLoadInst.mwDish.RepeaterType).ToList();
                    }
                    else
                    {
                        CivilLoadsRecords = _unitOfWork.CivilLoadsRepository.GetIncludeWhere(x =>
                            (x.allLoadInstId != null ? x.allLoadInst.mwDishId != null : false) &&
                            (!x.Dismantle) &&
                            (x.SiteCode == BaseFilters.siteCode)  &&
                            x.allLoadInst.mwDishId != null,

                        x => x.allCivilInst, x => x.allLoadInst, x => x.allLoadInst.mwDish, x => x.allLoadInst.mwDish.InstallationPlace, x => x.allLoadInst.mwDish.MwDishLibrary,
                        x => x.allLoadInst.mwDish.owner, x => x.allLoadInst.mwDish.PolarityOnLocation, x => x.allLoadInst.mwDish.RepeaterType).ToList();
                    }
                    // Delete Duplicated Objects Based On Installation Date...
                    List<TLIcivilLoads> NewList = new List<TLIcivilLoads>();
                    foreach (var item in CivilLoadsRecords)
                    {
                        TLIcivilLoads CheckIfExist = NewList.FirstOrDefault(x => x.allLoadInst.mwDishId.Value == item.allLoadInst.mwDishId.Value);
                        if (CheckIfExist != null)
                        {
                            if (CheckIfExist.InstallationDate < item.InstallationDate)
                            {
                                NewList.Remove(CheckIfExist);
                                NewList.Add(item);
                            }
                        }
                        else
                        {
                            NewList.Add(item);
                        }
                    }
                    CivilLoadsRecords = NewList;

                    Count = CivilLoadsRecords.Count();

                    CivilLoadsRecords = CivilLoadsRecords.Skip((parameterPagination.PageNumber - 1) * parameterPagination.PageSize).
                        Take(parameterPagination.PageSize).ToList();

                    List<MW_DishViewModel> Dishs = _mapper.Map<List<MW_DishViewModel>>(CivilLoadsRecords.Select(x => x.allLoadInst.mwDish).ToList());

                    List<TLIattributeViewManagment> AllAttributes = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                       (x.Enable && x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.MW_DishInstallation.ToString() &&
                       (x.AttributeActivatedId != null ?
                            (x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLImwDish.ToString() && x.AttributeActivated.enable) :
                            (!x.DynamicAtt.LibraryAtt && !x.DynamicAtt.disable && x.DynamicAtt.tablesNames.TableName == Helpers.Constants.TablesNames.TLImwDish.ToString()))) ||
                        (x.AttributeActivated != null ?
                            ((x.AttributeActivated.Key.ToLower() == "id" || x.AttributeActivated.Key.ToLower() == "active") && x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLImwDish.ToString()) : false),
                           x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1, x => x.EditableManagmentView.TLItablesNames2,
                           x => x.AttributeActivated, x => x.DynamicAtt, x => x.DynamicAtt.tablesNames, x => x.DynamicAtt.DataType).ToList();

                    List<TLIattributeViewManagment> NotDateTimeInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() != "datetime") : false).ToList();

                    List<TLIattributeViewManagment> NotDateTimeDynamicInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() != "datetime" : false).ToList();

                    List<TLIattributeViewManagment> DateTimeInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() == "datetime") : false).ToList();

                    List<TLIattributeViewManagment> DateTimeDynamicInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() == "datetime" : false).ToList();

                    foreach (MW_DishViewModel DishsInstallationObject in Dishs)
                    {
                        dynamic DynamiMW_DishInstallation = new ExpandoObject();

                        //
                        // Installation Object ViewModel...
                        //
                        if (NotDateTimeInstallationAttributesViewModel != null ? NotDateTimeInstallationAttributesViewModel.Count > 0 : false)
                        {
                            List<PropertyInfo> InstallationProps = typeof(MW_DishViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() != "datetime" :
                                    (x.PropertyType.Name.ToLower() != "datetime")) :
                                (x.PropertyType.Name.ToLower() != "datetime")).ToList();

                            foreach (PropertyInfo prop in InstallationProps)
                            {
                                if (prop.Name.ToLower().Contains("_name") &&
                                    NotDateTimeInstallationAttributesViewModel.Exists(x =>
                                        x.AttributeActivated.Label.ToLower() == prop.Name.ToLower()))
                                {
                                    object ForeignKeyNamePropObject = prop.GetValue(DishsInstallationObject, null);
                                    ((IDictionary<String, Object>)DynamiMW_DishInstallation).Add(new KeyValuePair<string, object>(prop.Name, ForeignKeyNamePropObject));
                                }
                                else if (NotDateTimeInstallationAttributesViewModel.Exists(x =>
                                     x.AttributeActivated.Key.ToLower() == prop.Name.ToLower()) &&
                                    !prop.Name.ToLower().Contains("_name") &&
                                    (prop.Name.ToLower().Substring(Math.Max(0, prop.Name.Length - 2)) != "id" || prop.Name.ToLower() == "id"))
                                {
                                    if (prop.Name.ToLower() != "id" && prop.Name.ToLower() != "active")
                                    {
                                        TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                            x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLImwDish.ToString() &&
                                            x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                        if (LabelName != null)
                                        {
                                            object PropObject = prop.GetValue(DishsInstallationObject, null);
                                            ((IDictionary<String, Object>)DynamiMW_DishInstallation).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                        }
                                    }
                                    else
                                    {
                                        object PropObject = prop.GetValue(DishsInstallationObject, null);
                                        ((IDictionary<String, Object>)DynamiMW_DishInstallation).Add(new KeyValuePair<string, object>(prop.Name, PropObject));
                                    }
                                }
                            }
                        }

                        //
                        // Installation Dynamic Attributes... (Not DateTime DataType Attribute)
                        //
                        if (NotDateTimeDynamicInstallationAttributesViewModel != null ? NotDateTimeDynamicInstallationAttributesViewModel.Count > 0 : false)
                        {
                            List<TLIdynamicAtt> NotDateTimeInstallationDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                                !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLImwDish.ToString() &&
                                !x.LibraryAtt && x.DataType.Name.ToLower() != "datetime" &&
                                NotDateTimeDynamicInstallationAttributesViewModel.Exists(y => y.DynamicAttId == x.Id)
                                    , x => x.tablesNames, x => x.DataType).ToList();

                            List<TLIdynamicAttInstValue> NotDateTimeDynamicAttInstValues = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                                !x.DynamicAtt.LibraryAtt && !x.disable &&
                                x.InventoryId == DishsInstallationObject.Id &&
                                NotDateTimeInstallationDynamicAttributes.Exists(y => y.Key.ToLower() == x.DynamicAtt.Key.ToLower()) &&
                                x.tablesNames.TableName == Helpers.Constants.TablesNames.TLImwDish.ToString()
                                    , x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                            foreach (TLIdynamicAtt InstallationDynamicAtt in NotDateTimeInstallationDynamicAttributes)
                            {
                                TLIdynamicAttInstValue DynamicAttInstValue = NotDateTimeDynamicAttInstValues.FirstOrDefault(x =>
                                    x.DynamicAtt.Key.ToLower() == InstallationDynamicAtt.Key.ToLower());

                                if (DynamicAttInstValue != null)
                                {
                                    dynamic DynamicAttValue = new ExpandoObject();
                                    if (DynamicAttInstValue.ValueString != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueString;

                                    else if (DynamicAttInstValue.ValueDouble != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueDouble;

                                    else if (DynamicAttInstValue.ValueDateTime != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueDateTime;

                                    else if (DynamicAttInstValue.ValueBoolean != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueBoolean;

                                    ((IDictionary<String, Object>)DynamiMW_DishInstallation).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, DynamicAttValue));
                                }
                                else
                                {
                                    ((IDictionary<String, Object>)DynamiMW_DishInstallation).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, null));
                                }
                            }
                        }

                        //
                        // Installation Object ViewModel... (DateTime DataType Attribute)
                        //
                        dynamic DateTimeAttributes = new ExpandoObject();
                        if (DateTimeInstallationAttributesViewModel != null ? DateTimeInstallationAttributesViewModel.Count() > 0 : false)
                        {
                            List<PropertyInfo> DateTimeInstallationProps = typeof(MW_DishViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() == "datetime" :
                                    (x.PropertyType.Name.ToLower() == "datetime")) :
                                (x.PropertyType.Name.ToLower() == "datetime")).ToList();

                            foreach (PropertyInfo prop in DateTimeInstallationProps)
                            {
                                TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                    x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLImwDish.ToString() &&
                                    x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                if (LabelName != null)
                                {
                                    object PropObject = prop.GetValue(DishsInstallationObject, null);
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                }
                            }
                        }

                        //
                        // Installation Dynamic Attributes... (DateTime DataType Attribute)
                        // 
                        if (DateTimeDynamicInstallationAttributesViewModel != null ? DateTimeDynamicInstallationAttributesViewModel.Count > 0 : false)
                        {
                            List<TLIdynamicAtt> DateTimeInstallationDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                               !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLImwDish.ToString() &&
                               !x.LibraryAtt && x.DataType.Name.ToLower() == "datetime" &&
                                DateTimeDynamicInstallationAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames).ToList();

                            List<TLIdynamicAttInstValue> DateTimeDynamicAttInstValues = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                                x.InventoryId == DishsInstallationObject.Id && !x.disable &&
                               !x.DynamicAtt.LibraryAtt &&
                                DateTimeInstallationDynamicAttributes.Exists(y => y.Key.ToLower() == x.DynamicAtt.Key.ToLower()) &&
                                x.tablesNames.TableName == Helpers.Constants.TablesNames.TLImwDish.ToString()
                                   , x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                            foreach (TLIdynamicAtt InstallationDynamicAtt in DateTimeInstallationDynamicAttributes)
                            {
                                TLIdynamicAttInstValue DynamicAttInstallationValue = DateTimeDynamicAttInstValues.FirstOrDefault(x =>
                                    x.DynamicAtt.Key.ToLower() == InstallationDynamicAtt.Key.ToLower());

                                if (DynamicAttInstallationValue != null)
                                {
                                    dynamic DynamicAttValue = new ExpandoObject();
                                    if (DynamicAttInstallationValue.ValueDateTime != null)
                                        DynamicAttValue = DynamicAttInstallationValue.ValueDateTime;

                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, DynamicAttValue));
                                }
                                else
                                {
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, null));
                                }
                            }
                        }

                        ((IDictionary<String, Object>)DynamiMW_DishInstallation).Add(new KeyValuePair<string, object>("DateTimeAttributes", DateTimeAttributes));

                        OutPutList.Add(DynamiMW_DishInstallation);
                    }
                    MW_DishesTableDisplay.Model = OutPutList;

                    if (WithFilterData == true)
                    {
                        MW_DishesTableDisplay.filters = _unitOfWork.MW_DishRepository.GetRelatedTables();
                    }
                    else
                    {
                        MW_DishesTableDisplay.filters = null;
                    }

                    return new Response<ReturnWithFilters<object>>(true, MW_DishesTableDisplay, null, null, (int)Helpers.Constants.ApiReturnCode.success, Count);
                }
                catch (Exception err)
                {
                    return new Response<ReturnWithFilters<object>>(false, null, null, err.Message, (int)Helpers.Constants.ApiReturnCode.fail);
                }
            }
            else if (Helpers.Constants.LoadSubType.TLImwOther.ToString() == TableNameInstallation)
            {
                try
                {
                    int Count = 0;

                    List<FilterObjectList> ObjectAttributeFilters = CombineFilters.filters;
                    List<DateFilterViewModel> DateFilter = CombineFilters.DateFilter;

                    List<object> OutPutList = new List<object>();
                    ReturnWithFilters<object> MW_OtheresTableDisplay = new ReturnWithFilters<object>();

                    List<TLIcivilLoads> CivilLoadsRecords = new List<TLIcivilLoads>();

                    List<StringFilterObjectList> AttributeFilters = new List<StringFilterObjectList>();
                    List<AttributeActivatedViewModel> MW_OtherInstallationAttribute = new List<AttributeActivatedViewModel>();

                    if ((DateFilter != null ? DateFilter.Count() > 0 : false) ||
                        (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0))
                    {
                        MW_OtherInstallationAttribute = _mapper.Map<List<AttributeActivatedViewModel>>(_unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                            x.Enable && x.AttributeActivatedId != null &&
                            x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.OtherMWInstallation.ToString() &&
                            x.EditableManagmentView.TLItablesNames1.TableName == Helpers.Constants.TablesNames.TLImwOther.ToString(),
                                x => x.AttributeActivated, x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1,
                                x => x.EditableManagmentView.TLItablesNames2)
                        .Select(x => x.AttributeActivated).ToList());
                    }

                    if (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0)
                    {
                        List<AttributeActivatedViewModel> NotDateDateMW_OtherInstallationAttribute = MW_OtherInstallationAttribute.Where(x =>
                            x.DataType.ToLower() != "datetime").ToList();

                        foreach (FilterObjectList item in ObjectAttributeFilters)
                        {
                            List<string> value = item.value.Select(x => x.ToString().ToLower()).ToList();

                            AttributeActivatedViewModel AttributeKey = NotDateDateMW_OtherInstallationAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());

                            string Key = "";
                            if (AttributeKey != null)
                                Key = AttributeKey.Key;

                            else
                                Key = item.key;

                            AttributeFilters.Add(new StringFilterObjectList
                            {
                                key = Key,
                                value = value
                            });
                        }
                    }

                    //
                    // DateTime Objects Filters..
                    //
                    List<DateFilterViewModel> AfterConvertDateFilters = new List<DateFilterViewModel>();
                    if (DateFilter != null ? DateFilter.Count() > 0 : false)
                    {
                        List<AttributeActivatedViewModel> DateMW_OtherInstallationAttribute = MW_OtherInstallationAttribute.Where(x =>
                            x.DataType.ToLower() == "datetime").ToList();

                        foreach (DateFilterViewModel item in DateFilter)
                        {
                            DateTime DateFrom = Convert.ToDateTime(item.DateFrom);
                            DateTime DateTo = Convert.ToDateTime(item.DateTo);

                            if (DateFrom > DateTo)
                            {
                                DateTime Replacer = DateFrom;
                                DateFrom = DateTo;
                                DateTo = Replacer;
                            }

                            AttributeActivatedViewModel AttributeKey = DateMW_OtherInstallationAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());
                            string Key = "";

                            if (AttributeKey != null)
                                Key = AttributeKey.Key;
                            else
                                Key = item.key;

                            AfterConvertDateFilters.Add(new DateFilterViewModel
                            {
                                key = Key,
                                DateFrom = DateFrom,
                                DateTo = DateTo
                            });
                        }
                    }

                    List<int> MW_OtherIds = new List<int>();
                    List<int> WithoutDateFilterMW_OtherInstallation = new List<int>();
                    List<int> WithDateFilterMW_OtherInstallation = new List<int>();

                    if (AttributeFilters != null && AttributeFilters.Count > 0)
                    {
                        //
                        // Installation Dynamic Attributes...
                        //
                        List<TLIdynamicAtt> InstDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AttributeFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            !x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == Helpers.Constants.TablesNames.TLImwOther.ToString()
                                , x => x.tablesNames, x => x.DataType).ToList();

                        List<int> DynamicInstValueListIds = new List<int>();
                        bool DynamicInstExist = false;
                        if (InstDynamicAttListIds.Count() > 0)
                        {
                            DynamicInstExist = true;
                            GetInventoriesIdsFromDynamicAttributes(out DynamicInstValueListIds, InstDynamicAttListIds, AttributeFilters);
                        }

                        //
                        // Installation Attribute Activated...
                        //
                        bool AttrInstExist = typeof(Mw_OtherViewModel).GetProperties().ToList().Exists(x =>
                            AttributeFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower() && y.key.ToLower() != "id"));

                        List<int> InstallationAttributeActivated = new List<int>();
                        if (AttrInstExist)
                        {
                            List<PropertyInfo> NotStringProps = typeof(Mw_OtherViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() != "string" &&
                                    AttributeFilters.Exists(y =>
                                        y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<PropertyInfo> StringProps = typeof(Mw_OtherViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() == "string" &&
                                    AttributeFilters.Exists(y =>
                                        y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<StringFilterObjectList> AttrInstAttributeFilters = AttributeFilters.Where(x =>
                                NotStringProps.Exists(y => y.Name.ToLower() == x.key.ToLower()) ||
                                StringProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            InstallationAttributeActivated = _unitOfWork.Mw_OtherRepository.GetWhere(x =>
                                AttrInstAttributeFilters.All(z =>
                                NotStringProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (y.GetValue(_mapper.Map<Mw_OtherViewModel>(x), null) != null ? z.value.Contains(y.GetValue(_mapper.Map<Mw_OtherViewModel>(x), null).ToString().ToLower()) : false)) ||
                                StringProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (z.value.Any(w =>
                                        y.GetValue(_mapper.Map<Mw_OtherViewModel>(x), null) != null ? y.GetValue(_mapper.Map<Mw_OtherViewModel>(x), null).ToString().ToLower().StartsWith(w.ToLower()) : false))))
                            ).Select(i => i.Id).ToList();
                        }

                        //
                        // Installation (Attribute Activated + Dynamic) Attributes...
                        //
                        List<int> IntersectInstallationIds = new List<int>();
                        if (AttrInstExist && DynamicInstExist)
                        {
                            WithoutDateFilterMW_OtherInstallation = InstallationAttributeActivated.Intersect(DynamicInstValueListIds).ToList();
                        }
                        else if (AttrInstExist)
                        {
                            WithoutDateFilterMW_OtherInstallation = InstallationAttributeActivated;
                        }
                        else if (DynamicInstExist)
                        {
                            WithoutDateFilterMW_OtherInstallation = DynamicInstValueListIds;
                        }
                    }

                    if (DateFilter != null ? DateFilter.Count() > 0 : false)
                    {
                        List<TLIdynamicAtt> DateTimeInstDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AfterConvertDateFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            !x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == Helpers.Constants.TablesNames.TLImwOther.ToString()
                                , x => x.tablesNames, x => x.DataType).ToList();

                        List<int> DynamicInstValueListIds = new List<int>();
                        bool DynamicInstExist = false;

                        if (DateTimeInstDynamicAttListIds.Count > 0)
                        {
                            DynamicInstExist = true;
                            List<DateFilterViewModel> DynamicInstAttributeFilters = AfterConvertDateFilters.Where(x =>
                                DateTimeInstDynamicAttListIds.Exists(y => y.Key.ToLower() == x.key.ToLower())).ToList();

                            DynamicInstValueListIds = new List<int>();

                            List<TLIdynamicAttInstValue> DynamicInstValueListObjects = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                                DateTimeInstDynamicAttListIds.Exists(y => y.Id == x.DynamicAttId) && !x.disable).ToList();

                            List<int> InventoriesIds = DynamicInstValueListObjects.Select(x => x.InventoryId).Distinct().ToList();

                            foreach (int InventoryId in InventoriesIds)
                            {
                                List<TLIdynamicAttInstValue> DynamicInstValueListInventories = DynamicInstValueListObjects.Where(x =>
                                    x.InventoryId == InventoryId).ToList();

                                if (DynamicInstAttributeFilters.All(y => DynamicInstValueListInventories.Exists(x =>
                                    (x.ValueDateTime != null ?
                                        (x.ValueDateTime >= y.DateFrom && x.ValueDateTime <= y.DateTo) : (false)))))
                                {
                                    DynamicInstValueListIds.Add(InventoryId);
                                }
                            }
                        }

                        //
                        // Installation Attribute Activated...
                        //
                        List<PropertyInfo> InstallationProps = typeof(Mw_OtherViewModel).GetProperties().Where(x =>
                            AfterConvertDateFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower())).ToList();

                        List<int> InstallationAttributeActivatedIds = new List<int>();
                        bool AttrInstExist = false;

                        if (InstallationProps != null)
                        {
                            AttrInstExist = true;

                            List<DateFilterViewModel> InstallationPropsAttributeFilters = AfterConvertDateFilters.Where(x =>
                                InstallationProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            InstallationAttributeActivatedIds = _unitOfWork.Mw_OtherRepository.GetWhere(x =>
                                InstallationPropsAttributeFilters.All(z =>
                                    (InstallationProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && ((y.GetValue(_mapper.Map<Mw_OtherViewModel>(x), null) != null) ?
                                        ((z.DateFrom <= Convert.ToDateTime(y.GetValue(_mapper.Map<Mw_OtherViewModel>(x), null))) &&
                                         (z.DateTo >= Convert.ToDateTime(y.GetValue(_mapper.Map<Mw_OtherViewModel>(x), null)))) : (false)))))
                            ).Select(i => i.Id).ToList();
                        }

                        //
                        // Installation (Attribute Activated + Dynamic) Attributes...
                        //
                        if (AttrInstExist && DynamicInstExist)
                        {
                            WithDateFilterMW_OtherInstallation = InstallationAttributeActivatedIds.Intersect(DynamicInstValueListIds).ToList();
                        }
                        else if (AttrInstExist)
                        {
                            WithDateFilterMW_OtherInstallation = InstallationAttributeActivatedIds;
                        }
                        else if (DynamicInstExist)
                        {
                            WithDateFilterMW_OtherInstallation = DynamicInstValueListIds;
                        }
                    }

                    if ((DateFilter != null ? DateFilter.Count() > 0 : false) ||
                        (AttributeFilters != null ? AttributeFilters.Count() > 0 : false))
                    {
                        if ((AttributeFilters != null ? AttributeFilters.Count > 0 : false) &&
                                (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false))
                        {
                            MW_OtherIds = WithoutDateFilterMW_OtherInstallation.Intersect(WithDateFilterMW_OtherInstallation).ToList();
                        }
                        else if (AttributeFilters != null ? AttributeFilters.Count > 0 : false)
                        {
                            MW_OtherIds = WithoutDateFilterMW_OtherInstallation;
                        }
                        else if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                        {
                            MW_OtherIds = WithDateFilterMW_OtherInstallation;
                        }

                        CivilLoadsRecords = _unitOfWork.CivilLoadsRepository.GetIncludeWhere(x =>
                            (x.allLoadInstId != null ? x.allLoadInst.mwOtherId != null : false) &&
                            (!x.Dismantle) &&
                            (x.SiteCode == BaseFilters.siteCode) &&
                            MW_OtherIds.Contains(x.allLoadInst.mwOtherId.Value),
                        x => x.allCivilInst, x => x.allLoadInst, x => x.allLoadInst.mwOther, x => x.allLoadInst.mwOther.mwOtherLibrary).ToList();
                    }
                    else
                    {
                        CivilLoadsRecords = _unitOfWork.CivilLoadsRepository.GetIncludeWhere(x =>
                           (x.allLoadInstId != null ? x.allLoadInst.mwOtherId != null : false) &&
                           (!x.Dismantle) &&
                           (x.SiteCode == BaseFilters.siteCode),
                        x => x.allCivilInst, x => x.allLoadInst, x => x.allLoadInst.mwOther, x => x.allLoadInst.mwOther.mwOtherLibrary).ToList();
                    }

                    // Delete Duplicated Objects Based On Installation Date...
                    List<TLIcivilLoads> NewList = new List<TLIcivilLoads>();
                    foreach (var item in CivilLoadsRecords)
                    {
                        TLIcivilLoads CheckIfExist = NewList.FirstOrDefault(x => x.allLoadInst.mwOtherId.Value == item.allLoadInst.mwOtherId.Value);
                        if (CheckIfExist != null)
                        {
                            if (CheckIfExist.InstallationDate < item.InstallationDate)
                            {
                                NewList.Remove(CheckIfExist);
                                NewList.Add(item);
                            }
                        }
                        else
                        {
                            NewList.Add(item);
                        }
                    }
                    CivilLoadsRecords = NewList;


                    Count = CivilLoadsRecords.Count();

                    CivilLoadsRecords = CivilLoadsRecords.Skip((parameterPagination.PageNumber - 1) * parameterPagination.PageSize).
                        Take(parameterPagination.PageSize).ToList();

                    List<Mw_OtherViewModel> Others = _mapper.Map<List<Mw_OtherViewModel>>(CivilLoadsRecords.Select(x => x.allLoadInst.mwOther).ToList());

                    List<TLIattributeViewManagment> AllAttributes = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                       (x.Enable && x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.OtherMWInstallation.ToString() &&
                       (x.AttributeActivatedId != null ?
                            (x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLImwOther.ToString() && x.AttributeActivated.enable) :
                            (!x.DynamicAtt.LibraryAtt && !x.DynamicAtt.disable && x.DynamicAtt.tablesNames.TableName == Helpers.Constants.TablesNames.TLImwOther.ToString()))) ||
                        (x.AttributeActivated != null ?
                            ((x.AttributeActivated.Key.ToLower() == "id" || x.AttributeActivated.Key.ToLower() == "active") && x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLImwOther.ToString()) : false),
                           x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1, x => x.EditableManagmentView.TLItablesNames2,
                           x => x.AttributeActivated, x => x.DynamicAtt, x => x.DynamicAtt.tablesNames, x => x.DynamicAtt.DataType).ToList();

                    List<TLIattributeViewManagment> NotDateTimeInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() != "datetime") : false).ToList();

                    List<TLIattributeViewManagment> NotDateTimeDynamicInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() != "datetime" : false).ToList();

                    List<TLIattributeViewManagment> DateTimeInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() == "datetime") : false).ToList();

                    List<TLIattributeViewManagment> DateTimeDynamicInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() == "datetime" : false).ToList();


                    foreach (Mw_OtherViewModel OthersInstallationObject in Others)
                    {
                        dynamic DynamiMW_OtherInstallation = new ExpandoObject();

                        //
                        // Installation Object ViewModel...
                        //
                        if (NotDateTimeInstallationAttributesViewModel != null ? NotDateTimeInstallationAttributesViewModel.Count > 0 : false)
                        {
                            List<PropertyInfo> InstallationProps = typeof(Mw_OtherViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() != "datetime" :
                                    (x.PropertyType.Name.ToLower() != "datetime")) :
                                (x.PropertyType.Name.ToLower() != "datetime")).ToList();

                            foreach (PropertyInfo prop in InstallationProps)
                            {
                                if (prop.Name.ToLower().Contains("_name") &&
                                    NotDateTimeInstallationAttributesViewModel.Exists(x =>
                                        x.AttributeActivated.Label.ToLower() == prop.Name.ToLower()))
                                {
                                    object ForeignKeyNamePropObject = prop.GetValue(OthersInstallationObject, null);
                                    ((IDictionary<String, Object>)DynamiMW_OtherInstallation).Add(new KeyValuePair<string, object>(prop.Name, ForeignKeyNamePropObject));
                                }
                                else if (NotDateTimeInstallationAttributesViewModel.Exists(x =>
                                     x.AttributeActivated.Key.ToLower() == prop.Name.ToLower()) &&
                                    !prop.Name.ToLower().Contains("_name") &&
                                    (prop.Name.ToLower().Substring(Math.Max(0, prop.Name.Length - 2)) != "id" || prop.Name.ToLower() == "id"))
                                {
                                    if (prop.Name.ToLower() != "id" && prop.Name.ToLower() != "active")
                                    {
                                        TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                            x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLImwOther.ToString() &&
                                            x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                        if (LabelName != null)
                                        {
                                            object PropObject = prop.GetValue(OthersInstallationObject, null);
                                            ((IDictionary<String, Object>)DynamiMW_OtherInstallation).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                        }
                                    }
                                    else
                                    {
                                        object PropObject = prop.GetValue(OthersInstallationObject, null);
                                        ((IDictionary<String, Object>)DynamiMW_OtherInstallation).Add(new KeyValuePair<string, object>(prop.Name, PropObject));
                                    }
                                }
                            }
                        }

                        //
                        // Installation Dynamic Attributes... (Not DateTime DataType Attribute)
                        //
                        if (NotDateTimeDynamicInstallationAttributesViewModel != null ? NotDateTimeDynamicInstallationAttributesViewModel.Count > 0 : false)
                        {
                            List<TLIdynamicAtt> NotDateTimeInstallationDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                                !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLImwOther.ToString() &&
                                !x.LibraryAtt && x.DataType.Name.ToLower() != "datetime" &&
                                NotDateTimeDynamicInstallationAttributesViewModel.Exists(y => y.DynamicAttId == x.Id)
                                    , x => x.tablesNames, x => x.DataType).ToList();

                            List<TLIdynamicAttInstValue> NotDateTimeDynamicAttInstValues = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                                !x.DynamicAtt.LibraryAtt && !x.disable &&
                                x.InventoryId == OthersInstallationObject.Id &&
                                NotDateTimeInstallationDynamicAttributes.Exists(y => y.Key.ToLower() == x.DynamicAtt.Key.ToLower()) &&
                                x.tablesNames.TableName == Helpers.Constants.TablesNames.TLImwOther.ToString()
                                    , x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                            foreach (TLIdynamicAtt InstallationDynamicAtt in NotDateTimeInstallationDynamicAttributes)
                            {
                                TLIdynamicAttInstValue DynamicAttInstValue = NotDateTimeDynamicAttInstValues.FirstOrDefault(x =>
                                    x.DynamicAtt.Key.ToLower() == InstallationDynamicAtt.Key.ToLower());

                                if (DynamicAttInstValue != null)
                                {
                                    dynamic DynamicAttValue = new ExpandoObject();
                                    if (DynamicAttInstValue.ValueString != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueString;

                                    else if (DynamicAttInstValue.ValueDouble != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueDouble;

                                    else if (DynamicAttInstValue.ValueDateTime != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueDateTime;

                                    else if (DynamicAttInstValue.ValueBoolean != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueBoolean;

                                    ((IDictionary<String, Object>)DynamiMW_OtherInstallation).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, DynamicAttValue));
                                }
                                else
                                {
                                    ((IDictionary<String, Object>)DynamiMW_OtherInstallation).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, null));
                                }
                            }
                        }

                        //
                        // Installation Object ViewModel... (DateTime DataType Attribute)
                        //
                        dynamic DateTimeAttributes = new ExpandoObject();
                        if (DateTimeInstallationAttributesViewModel != null ? DateTimeInstallationAttributesViewModel.Count() > 0 : false)
                        {
                            List<PropertyInfo> DateTimeInstallationProps = typeof(Mw_OtherViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() == "datetime" :
                                    (x.PropertyType.Name.ToLower() == "datetime")) :
                                (x.PropertyType.Name.ToLower() == "datetime")).ToList();

                            foreach (PropertyInfo prop in DateTimeInstallationProps)
                            {
                                TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                    x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLImwOther.ToString() &&
                                    x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                if (LabelName != null)
                                {
                                    object PropObject = prop.GetValue(OthersInstallationObject, null);
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                }
                            }
                        }

                        //
                        // Installation Dynamic Attributes... (DateTime DataType Attribute)
                        // 
                        if (DateTimeDynamicInstallationAttributesViewModel != null ? DateTimeDynamicInstallationAttributesViewModel.Count > 0 : false)
                        {
                            List<TLIdynamicAtt> DateTimeInstallationDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                               !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLImwOther.ToString() &&
                               !x.LibraryAtt && x.DataType.Name.ToLower() == "datetime" &&
                                DateTimeDynamicInstallationAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames).ToList();

                            List<TLIdynamicAttInstValue> DateTimeDynamicAttInstValues = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                                x.InventoryId == OthersInstallationObject.Id && !x.disable &&
                               !x.DynamicAtt.LibraryAtt &&
                                DateTimeInstallationDynamicAttributes.Exists(y => y.Key.ToLower() == x.DynamicAtt.Key.ToLower()) &&
                                x.tablesNames.TableName == Helpers.Constants.TablesNames.TLImwOther.ToString()
                                   , x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                            foreach (TLIdynamicAtt InstallationDynamicAtt in DateTimeInstallationDynamicAttributes)
                            {
                                TLIdynamicAttInstValue DynamicAttInstallationValue = DateTimeDynamicAttInstValues.FirstOrDefault(x =>
                                    x.DynamicAtt.Key.ToLower() == InstallationDynamicAtt.Key.ToLower());

                                if (DynamicAttInstallationValue != null)
                                {
                                    dynamic DynamicAttValue = new ExpandoObject();
                                    if (DynamicAttInstallationValue.ValueDateTime != null)
                                        DynamicAttValue = DynamicAttInstallationValue.ValueDateTime;

                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, DynamicAttValue));
                                }
                                else
                                {
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, null));
                                }
                            }
                        }

                        ((IDictionary<String, Object>)DynamiMW_OtherInstallation).Add(new KeyValuePair<string, object>("DateTimeAttributes", DateTimeAttributes));

                        OutPutList.Add(DynamiMW_OtherInstallation);
                    }
                    MW_OtheresTableDisplay.Model = OutPutList;

                    if (WithFilterData == true)
                    {
                        MW_OtheresTableDisplay.filters = _unitOfWork.Mw_OtherRepository.GetRelatedTables();
                    }
                    else
                    {
                        MW_OtheresTableDisplay.filters = null;
                    }

                    return new Response<ReturnWithFilters<object>>(true, MW_OtheresTableDisplay, null, null, (int)Helpers.Constants.ApiReturnCode.success, Count);
                }
                catch (Exception err)
                {
                    return new Response<ReturnWithFilters<object>>(false, null, null, err.Message, (int)Helpers.Constants.ApiReturnCode.fail);
                }
            }
            else if (Helpers.Constants.LoadSubType.TLIradioAntenna.ToString() == TableNameInstallation)
            {
                try
                {
                    int Count = 0;
                    List<FilterObjectList> ObjectAttributeFilters = CombineFilters.filters;
                    List<DateFilterViewModel> DateFilter = CombineFilters.DateFilter;

                    List<object> OutPutList = new List<object>();
                    ReturnWithFilters<object> RadioAntennaesTableDisplay = new ReturnWithFilters<object>();

                    List<TLIcivilLoads> CivilLoadsRecords = new List<TLIcivilLoads>();

                    List<StringFilterObjectList> AttributeFilters = new List<StringFilterObjectList>();
                    List<AttributeActivatedViewModel> RadioAntennaInstallationAttribute = new List<AttributeActivatedViewModel>();

                    if ((DateFilter != null ? DateFilter.Count() > 0 : false) ||
                        (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0))
                    {
                        RadioAntennaInstallationAttribute = _mapper.Map<List<AttributeActivatedViewModel>>(_unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                            x.Enable && x.AttributeActivatedId != null &&
                            x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.RadioAntennaInstallation.ToString() &&
                            x.EditableManagmentView.TLItablesNames1.TableName == Helpers.Constants.TablesNames.TLIradioAntenna.ToString(),
                                x => x.AttributeActivated, x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1,
                                x => x.EditableManagmentView.TLItablesNames2)
                        .Select(x => x.AttributeActivated).ToList());
                    }

                    if (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0)
                    {
                        List<AttributeActivatedViewModel> NotDateDateRadioAntennaInstallationAttribute = RadioAntennaInstallationAttribute.Where(x =>
                            x.DataType.ToLower() != "datetime").ToList();

                        foreach (FilterObjectList item in ObjectAttributeFilters)
                        {
                            List<string> value = item.value.Select(x => x.ToString().ToLower()).ToList();

                            AttributeActivatedViewModel AttributeKey = NotDateDateRadioAntennaInstallationAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());

                            string Key = "";
                            if (AttributeKey != null)
                                Key = AttributeKey.Key;

                            else
                                Key = item.key;

                            AttributeFilters.Add(new StringFilterObjectList
                            {
                                key = Key,
                                value = value
                            });
                        }
                    }

                    //
                    // DateTime Objects Filters..
                    //
                    List<DateFilterViewModel> AfterConvertDateFilters = new List<DateFilterViewModel>();
                    if (DateFilter != null ? DateFilter.Count() > 0 : false)
                    {
                        List<AttributeActivatedViewModel> DateRadioAntennaInstallationAttribute = RadioAntennaInstallationAttribute.Where(x =>
                            x.DataType.ToLower() == "datetime").ToList();

                        foreach (DateFilterViewModel item in DateFilter)
                        {
                            DateTime DateFrom = Convert.ToDateTime(item.DateFrom);
                            DateTime DateTo = Convert.ToDateTime(item.DateTo);

                            if (DateFrom > DateTo)
                            {
                                DateTime Replacer = DateFrom;
                                DateFrom = DateTo;
                                DateTo = Replacer;
                            }

                            AttributeActivatedViewModel AttributeKey = DateRadioAntennaInstallationAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());
                            string Key = "";

                            if (AttributeKey != null)
                                Key = AttributeKey.Key;
                            else
                                Key = item.key;

                            AfterConvertDateFilters.Add(new DateFilterViewModel
                            {
                                key = Key,
                                DateFrom = DateFrom,
                                DateTo = DateTo
                            });
                        }
                    }

                    List<int> RadioAntennaIds = new List<int>();
                    List<int> WithoutDateFilterRadioAntennaInstallation = new List<int>();
                    List<int> WithDateFilterRadioAntennaInstallation = new List<int>();

                    if (AttributeFilters != null && AttributeFilters.Count > 0)
                    {
                        //
                        // Installation Dynamic Attributes...
                        //
                        List<TLIdynamicAtt> InstDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AttributeFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            !x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIradioAntenna.ToString()
                                , x => x.tablesNames, x => x.DataType).ToList();

                        List<int> DynamicInstValueListIds = new List<int>();
                        bool DynamicInstExist = false;
                        if (InstDynamicAttListIds.Count() > 0)
                        {
                            DynamicInstExist = true;
                            GetInventoriesIdsFromDynamicAttributes(out DynamicInstValueListIds, InstDynamicAttListIds, AttributeFilters);
                        }

                        //
                        // Installation Attribute Activated...
                        //
                        bool AttrInstExist = typeof(RadioAntennaViewModel).GetProperties().ToList().Exists(x =>
                            AttributeFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower() && y.key.ToLower() != "id"));

                        List<int> InstallationAttributeActivated = new List<int>();
                        if (AttrInstExist)
                        {
                            List<PropertyInfo> NotStringProps = typeof(RadioAntennaViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() != "string" &&
                                    AttributeFilters.Exists(y =>
                                        y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<PropertyInfo> StringProps = typeof(RadioAntennaViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() == "string" &&
                                    AttributeFilters.Exists(y =>
                                        y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<StringFilterObjectList> AttrInstAttributeFilters = AttributeFilters.Where(x =>
                                NotStringProps.Exists(y => y.Name.ToLower() == x.key.ToLower()) ||
                                StringProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            InstallationAttributeActivated = _unitOfWork.RadioAntennaRepository.GetWhere(x =>
                                AttrInstAttributeFilters.All(z =>
                                NotStringProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (y.GetValue(_mapper.Map<RadioAntennaViewModel>(x), null) != null ? z.value.Contains(y.GetValue(_mapper.Map<RadioAntennaViewModel>(x), null).ToString().ToLower()) : false)) ||
                                StringProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (z.value.Any(w =>
                                        y.GetValue(_mapper.Map<RadioAntennaViewModel>(x), null) != null ? y.GetValue(_mapper.Map<RadioAntennaViewModel>(x), null).ToString().ToLower().StartsWith(w.ToLower()) : false))))
                            ).Select(i => i.Id).ToList();
                        }

                        //
                        // Installation (Attribute Activated + Dynamic) Attributes...
                        //
                        List<int> IntersectInstallationIds = new List<int>();
                        if (AttrInstExist && DynamicInstExist)
                        {
                            WithoutDateFilterRadioAntennaInstallation = InstallationAttributeActivated.Intersect(DynamicInstValueListIds).ToList();
                        }
                        else if (AttrInstExist)
                        {
                            WithoutDateFilterRadioAntennaInstallation = InstallationAttributeActivated;
                        }
                        else if (DynamicInstExist)
                        {
                            WithoutDateFilterRadioAntennaInstallation = DynamicInstValueListIds;
                        }
                    }

                    if (DateFilter != null ? DateFilter.Count() > 0 : false)
                    {
                        List<TLIdynamicAtt> DateTimeInstDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AfterConvertDateFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            !x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIradioAntenna.ToString()
                                , x => x.tablesNames, x => x.DataType).ToList();

                        List<int> DynamicInstValueListIds = new List<int>();
                        bool DynamicInstExist = false;

                        if (DateTimeInstDynamicAttListIds.Count > 0)
                        {
                            DynamicInstExist = true;
                            List<DateFilterViewModel> DynamicInstAttributeFilters = AfterConvertDateFilters.Where(x =>
                                DateTimeInstDynamicAttListIds.Exists(y => y.Key.ToLower() == x.key.ToLower())).ToList();

                            DynamicInstValueListIds = new List<int>();

                            List<TLIdynamicAttInstValue> DynamicInstValueListObjects = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                                DateTimeInstDynamicAttListIds.Exists(y => y.Id == x.DynamicAttId) && !x.disable).ToList();

                            List<int> InventoriesIds = DynamicInstValueListObjects.Select(x => x.InventoryId).Distinct().ToList();

                            foreach (int InventoryId in InventoriesIds)
                            {
                                List<TLIdynamicAttInstValue> DynamicInstValueListInventories = DynamicInstValueListObjects.Where(x =>
                                    x.InventoryId == InventoryId).ToList();

                                if (DynamicInstAttributeFilters.All(y => DynamicInstValueListInventories.Exists(x =>
                                    (x.ValueDateTime != null ?
                                        (x.ValueDateTime >= y.DateFrom && x.ValueDateTime <= y.DateTo) : (false)))))
                                {
                                    DynamicInstValueListIds.Add(InventoryId);
                                }
                            }
                        }

                        //
                        // Installation Attribute Activated...
                        //
                        List<PropertyInfo> InstallationProps = typeof(RadioAntennaViewModel).GetProperties().Where(x =>
                            AfterConvertDateFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower())).ToList();

                        List<int> InstallationAttributeActivatedIds = new List<int>();
                        bool AttrInstExist = false;

                        if (InstallationProps != null)
                        {
                            AttrInstExist = true;

                            List<DateFilterViewModel> InstallationPropsAttributeFilters = AfterConvertDateFilters.Where(x =>
                                InstallationProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            InstallationAttributeActivatedIds = _unitOfWork.RadioAntennaRepository.GetWhere(x =>
                                InstallationPropsAttributeFilters.All(z =>
                                    (InstallationProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && ((y.GetValue(_mapper.Map<RadioAntennaViewModel>(x), null) != null) ?
                                        ((z.DateFrom <= Convert.ToDateTime(y.GetValue(_mapper.Map<RadioAntennaViewModel>(x), null))) &&
                                         (z.DateTo >= Convert.ToDateTime(y.GetValue(_mapper.Map<RadioAntennaViewModel>(x), null)))) : (false)))))
                            ).Select(i => i.Id).ToList();
                        }

                        //
                        // Installation (Attribute Activated + Dynamic) Attributes...
                        //
                        if (AttrInstExist && DynamicInstExist)
                        {
                            WithDateFilterRadioAntennaInstallation = InstallationAttributeActivatedIds.Intersect(DynamicInstValueListIds).ToList();
                        }
                        else if (AttrInstExist)
                        {
                            WithDateFilterRadioAntennaInstallation = InstallationAttributeActivatedIds;
                        }
                        else if (DynamicInstExist)
                        {
                            WithDateFilterRadioAntennaInstallation = DynamicInstValueListIds;
                        }
                    }

                    if ((DateFilter != null ? DateFilter.Count() > 0 : false) ||
                        (AttributeFilters != null ? AttributeFilters.Count() > 0 : false))
                    {
                        if ((AttributeFilters != null ? AttributeFilters.Count > 0 : false) &&
                                (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false))
                        {
                            RadioAntennaIds = WithoutDateFilterRadioAntennaInstallation.Intersect(WithDateFilterRadioAntennaInstallation).ToList();
                        }
                        else if (AttributeFilters != null ? AttributeFilters.Count > 0 : false)
                        {
                            RadioAntennaIds = WithoutDateFilterRadioAntennaInstallation;
                        }
                        else if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                        {
                            RadioAntennaIds = WithDateFilterRadioAntennaInstallation;
                        }

                        CivilLoadsRecords = _unitOfWork.CivilLoadsRepository.GetIncludeWhere(x =>
                            (x.allLoadInstId != null ? x.allLoadInst.radioAntennaId != null : false) &&
                            (!x.Dismantle) &&
                            (x.SiteCode == BaseFilters.siteCode) &&
                           

                            RadioAntennaIds.Contains(x.allLoadInst.radioAntennaId.Value),
                        x => x.allCivilInst, x => x.allLoadInst, x => x.allLoadInst.radioAntenna, x => x.allLoadInst.radioAntenna.installationPlace,
                        x => x.allLoadInst.radioAntenna.owner, x => x.allLoadInst.radioAntenna.radioAntennaLibrary).ToList();
                    }
                    else
                    {
                        CivilLoadsRecords = _unitOfWork.CivilLoadsRepository.GetIncludeWhere(x =>
                           (x.allLoadInstId != null ? x.allLoadInst.radioAntennaId != null : false) &&
                           (!x.Dismantle) &&
                           (x.SiteCode == BaseFilters.siteCode), 
                           

                        x => x.allCivilInst, x => x.allLoadInst, x => x.allLoadInst.radioAntenna, x => x.allLoadInst.radioAntenna.installationPlace,
                        x => x.allLoadInst.radioAntenna.owner, x => x.allLoadInst.radioAntenna.radioAntennaLibrary).ToList();
                    }

                    // Delete Duplicated Objects Based On Installation Date...
                    List<TLIcivilLoads> NewList = new List<TLIcivilLoads>();
                    foreach (var item in CivilLoadsRecords)
                    {
                        TLIcivilLoads CheckIfExist = NewList.FirstOrDefault(x => x.allLoadInst.radioAntennaId.Value == item.allLoadInst.radioAntennaId.Value);
                        if (CheckIfExist != null)
                        {
                            if (CheckIfExist.InstallationDate < item.InstallationDate)
                            {
                                NewList.Remove(CheckIfExist);
                                NewList.Add(item);
                            }
                        }
                        else
                        {
                            NewList.Add(item);
                        }
                    }
                    CivilLoadsRecords = NewList;

                    Count = CivilLoadsRecords.Count();

                    CivilLoadsRecords = CivilLoadsRecords.Skip((parameterPagination.PageNumber - 1) * parameterPagination.PageSize).
                        Take(parameterPagination.PageSize).ToList();

                    List<RadioAntennaViewModel> Others = _mapper.Map<List<RadioAntennaViewModel>>(CivilLoadsRecords.Select(x => x.allLoadInst.radioAntenna).ToList());

                    List<TLIattributeViewManagment> AllAttributes = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                       (x.Enable && x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.RadioAntennaInstallation.ToString() &&
                       (x.AttributeActivatedId != null ?
                            (x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIradioAntenna.ToString() && x.AttributeActivated.enable) :
                            (!x.DynamicAtt.LibraryAtt && !x.DynamicAtt.disable && x.DynamicAtt.tablesNames.TableName == Helpers.Constants.TablesNames.TLIradioAntenna.ToString()))) ||
                        (x.AttributeActivated != null ?
                            ((x.AttributeActivated.Key.ToLower() == "id" || x.AttributeActivated.Key.ToLower() == "active") && x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIradioAntenna.ToString()) : false),
                           x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1, x => x.EditableManagmentView.TLItablesNames2,
                           x => x.AttributeActivated, x => x.DynamicAtt, x => x.DynamicAtt.tablesNames, x => x.DynamicAtt.DataType).ToList();

                    List<TLIattributeViewManagment> NotDateTimeInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() != "datetime") : false).ToList();

                    List<TLIattributeViewManagment> NotDateTimeDynamicInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() != "datetime" : false).ToList();

                    List<TLIattributeViewManagment> DateTimeInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() == "datetime") : false).ToList();

                    List<TLIattributeViewManagment> DateTimeDynamicInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() == "datetime" : false).ToList();


                    foreach (RadioAntennaViewModel OthersInstallationObject in Others)
                    {
                        dynamic DynamiRadioAntennaInstallation = new ExpandoObject();

                        //
                        // Installation Object ViewModel...
                        //
                        if (NotDateTimeInstallationAttributesViewModel != null ? NotDateTimeInstallationAttributesViewModel.Count > 0 : false)
                        {
                            List<PropertyInfo> InstallationProps = typeof(RadioAntennaViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() != "datetime" :
                                    (x.PropertyType.Name.ToLower() != "datetime")) :
                                (x.PropertyType.Name.ToLower() != "datetime")).ToList();

                            foreach (PropertyInfo prop in InstallationProps)
                            {
                                if (prop.Name.ToLower().Contains("_name") &&
                                    NotDateTimeInstallationAttributesViewModel.Exists(x =>
                                        x.AttributeActivated.Label.ToLower() == prop.Name.ToLower()))
                                {
                                    object ForeignKeyNamePropObject = prop.GetValue(OthersInstallationObject, null);
                                    ((IDictionary<String, Object>)DynamiRadioAntennaInstallation).Add(new KeyValuePair<string, object>(prop.Name, ForeignKeyNamePropObject));
                                }
                                else if (NotDateTimeInstallationAttributesViewModel.Exists(x =>
                                     x.AttributeActivated.Key.ToLower() == prop.Name.ToLower()) &&
                                    !prop.Name.ToLower().Contains("_name") &&
                                    (prop.Name.ToLower().Substring(Math.Max(0, prop.Name.Length - 2)) != "id" || prop.Name.ToLower() == "id"))
                                {
                                    if (prop.Name.ToLower() != "id" && prop.Name.ToLower() != "active")
                                    {
                                        TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                            x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIradioAntenna.ToString() &&
                                            x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                        if (LabelName != null)
                                        {
                                            object PropObject = prop.GetValue(OthersInstallationObject, null);
                                            ((IDictionary<String, Object>)DynamiRadioAntennaInstallation).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                        }
                                    }
                                    else
                                    {
                                        object PropObject = prop.GetValue(OthersInstallationObject, null);
                                        ((IDictionary<String, Object>)DynamiRadioAntennaInstallation).Add(new KeyValuePair<string, object>(prop.Name, PropObject));
                                    }
                                }
                            }
                        }

                        //
                        // Installation Dynamic Attributes... (Not DateTime DataType Attribute)
                        //
                        if (NotDateTimeDynamicInstallationAttributesViewModel != null ? NotDateTimeDynamicInstallationAttributesViewModel.Count > 0 : false)
                        {
                            List<TLIdynamicAtt> NotDateTimeInstallationDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                                !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIradioAntenna.ToString() &&
                                !x.LibraryAtt && x.DataType.Name.ToLower() != "datetime" &&
                                NotDateTimeDynamicInstallationAttributesViewModel.Exists(y => y.DynamicAttId == x.Id)
                                    , x => x.tablesNames, x => x.DataType).ToList();

                            List<TLIdynamicAttInstValue> NotDateTimeDynamicAttInstValues = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                                !x.DynamicAtt.LibraryAtt && !x.disable &&
                                x.InventoryId == OthersInstallationObject.Id &&
                                NotDateTimeInstallationDynamicAttributes.Exists(y => y.Key.ToLower() == x.DynamicAtt.Key.ToLower()) &&
                                x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIradioAntenna.ToString()
                                    , x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                            foreach (TLIdynamicAtt InstallationDynamicAtt in NotDateTimeInstallationDynamicAttributes)
                            {
                                TLIdynamicAttInstValue DynamicAttInstValue = NotDateTimeDynamicAttInstValues.FirstOrDefault(x =>
                                    x.DynamicAtt.Key.ToLower() == InstallationDynamicAtt.Key.ToLower());

                                if (DynamicAttInstValue != null)
                                {
                                    dynamic DynamicAttValue = new ExpandoObject();
                                    if (DynamicAttInstValue.ValueString != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueString;

                                    else if (DynamicAttInstValue.ValueDouble != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueDouble;

                                    else if (DynamicAttInstValue.ValueDateTime != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueDateTime;

                                    else if (DynamicAttInstValue.ValueBoolean != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueBoolean;

                                    ((IDictionary<String, Object>)DynamiRadioAntennaInstallation).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, DynamicAttValue));
                                }
                                else
                                {
                                    ((IDictionary<String, Object>)DynamiRadioAntennaInstallation).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, null));
                                }
                            }
                        }

                        //
                        // Installation Object ViewModel... (DateTime DataType Attribute)
                        //
                        dynamic DateTimeAttributes = new ExpandoObject();
                        if (DateTimeInstallationAttributesViewModel != null ? DateTimeInstallationAttributesViewModel.Count() > 0 : false)
                        {
                            List<PropertyInfo> DateTimeInstallationProps = typeof(RadioAntennaViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() == "datetime" :
                                    (x.PropertyType.Name.ToLower() == "datetime")) :
                                (x.PropertyType.Name.ToLower() == "datetime")).ToList();

                            foreach (PropertyInfo prop in DateTimeInstallationProps)
                            {
                                TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                    x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIradioAntenna.ToString() &&
                                    x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                if (LabelName != null)
                                {
                                    object PropObject = prop.GetValue(OthersInstallationObject, null);
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                }
                            }
                        }

                        //
                        // Installation Dynamic Attributes... (DateTime DataType Attribute)
                        // 
                        if (DateTimeDynamicInstallationAttributesViewModel != null ? DateTimeDynamicInstallationAttributesViewModel.Count > 0 : false)
                        {
                            List<TLIdynamicAtt> DateTimeInstallationDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                               !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIradioAntenna.ToString() &&
                               !x.LibraryAtt && x.DataType.Name.ToLower() == "datetime" &&
                                DateTimeDynamicInstallationAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames).ToList();

                            List<TLIdynamicAttInstValue> DateTimeDynamicAttInstValues = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                                x.InventoryId == OthersInstallationObject.Id && !x.disable &&
                               !x.DynamicAtt.LibraryAtt &&
                                DateTimeInstallationDynamicAttributes.Exists(y => y.Key.ToLower() == x.DynamicAtt.Key.ToLower()) &&
                                x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIradioAntenna.ToString()
                                   , x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                            foreach (TLIdynamicAtt InstallationDynamicAtt in DateTimeInstallationDynamicAttributes)
                            {
                                TLIdynamicAttInstValue DynamicAttInstallationValue = DateTimeDynamicAttInstValues.FirstOrDefault(x =>
                                    x.DynamicAtt.Key.ToLower() == InstallationDynamicAtt.Key.ToLower());

                                if (DynamicAttInstallationValue != null)
                                {
                                    dynamic DynamicAttValue = new ExpandoObject();
                                    if (DynamicAttInstallationValue.ValueDateTime != null)
                                        DynamicAttValue = DynamicAttInstallationValue.ValueDateTime;

                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, DynamicAttValue));
                                }
                                else
                                {
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, null));
                                }
                            }
                        }

                        ((IDictionary<String, Object>)DynamiRadioAntennaInstallation).Add(new KeyValuePair<string, object>("DateTimeAttributes", DateTimeAttributes));

                        OutPutList.Add(DynamiRadioAntennaInstallation);
                    }
                    RadioAntennaesTableDisplay.Model = OutPutList;

                    if (WithFilterData == true)
                    {
                        RadioAntennaesTableDisplay.filters = _unitOfWork.RadioAntennaRepository.GetRelatedTables();
                    }
                    else
                    {
                        RadioAntennaesTableDisplay.filters = null;
                    }

                    return new Response<ReturnWithFilters<object>>(true, RadioAntennaesTableDisplay, null, null, (int)Helpers.Constants.ApiReturnCode.success, Count);
                }
                catch (Exception err)
                {
                    return new Response<ReturnWithFilters<object>>(false, null, null, err.Message, (int)Helpers.Constants.ApiReturnCode.fail);
                }
            }
            else if (Helpers.Constants.LoadSubType.TLIradioRRU.ToString() == TableNameInstallation)
            {
                try
                {
                    int Count = 0;
                    List<FilterObjectList> ObjectAttributeFilters = CombineFilters.filters;
                    List<DateFilterViewModel> DateFilter = CombineFilters.DateFilter;

                    List<object> OutPutList = new List<object>();
                    ReturnWithFilters<object> RadioRRUesTableDisplay = new ReturnWithFilters<object>();

                    List<TLIcivilLoads> CivilLoadsRecords = new List<TLIcivilLoads>();

                    List<StringFilterObjectList> AttributeFilters = new List<StringFilterObjectList>();
                    List<AttributeActivatedViewModel> RadioRRUInstallationAttribute = new List<AttributeActivatedViewModel>();

                    if ((DateFilter != null ? DateFilter.Count() > 0 : false) ||
                        (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0))
                    {
                        RadioRRUInstallationAttribute = _mapper.Map<List<AttributeActivatedViewModel>>(_unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                            x.Enable && x.AttributeActivatedId != null &&
                            x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.RadioRRUInstallation.ToString() &&
                            x.EditableManagmentView.TLItablesNames1.TableName == Helpers.Constants.TablesNames.TLIradioRRU.ToString(),
                                x => x.AttributeActivated, x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1,
                                x => x.EditableManagmentView.TLItablesNames2)
                        .Select(x => x.AttributeActivated).ToList());
                    }

                    if (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0)
                    {
                        List<AttributeActivatedViewModel> NotDateDateRadioRRUInstallationAttribute = RadioRRUInstallationAttribute.Where(x =>
                            x.DataType.ToLower() != "datetime").ToList();

                        foreach (FilterObjectList item in ObjectAttributeFilters)
                        {
                            List<string> value = item.value.Select(x => x.ToString().ToLower()).ToList();

                            AttributeActivatedViewModel AttributeKey = NotDateDateRadioRRUInstallationAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());

                            string Key = "";
                            if (AttributeKey != null)
                                Key = AttributeKey.Key;

                            else
                                Key = item.key;

                            AttributeFilters.Add(new StringFilterObjectList
                            {
                                key = Key,
                                value = value
                            });
                        }
                    }

                    //
                    // DateTime Objects Filters..
                    //
                    List<DateFilterViewModel> AfterConvertDateFilters = new List<DateFilterViewModel>();
                    if (DateFilter != null ? DateFilter.Count() > 0 : false)
                    {
                        List<AttributeActivatedViewModel> DateRadioRRUInstallationAttribute = RadioRRUInstallationAttribute.Where(x =>
                            x.DataType.ToLower() == "datetime").ToList();

                        foreach (DateFilterViewModel item in DateFilter)
                        {
                            DateTime DateFrom = Convert.ToDateTime(item.DateFrom);
                            DateTime DateTo = Convert.ToDateTime(item.DateTo);

                            if (DateFrom > DateTo)
                            {
                                DateTime Replacer = DateFrom;
                                DateFrom = DateTo;
                                DateTo = Replacer;
                            }

                            AttributeActivatedViewModel AttributeKey = DateRadioRRUInstallationAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());
                            string Key = "";

                            if (AttributeKey != null)
                                Key = AttributeKey.Key;
                            else
                                Key = item.key;

                            AfterConvertDateFilters.Add(new DateFilterViewModel
                            {
                                key = Key,
                                DateFrom = DateFrom,
                                DateTo = DateTo
                            });
                        }
                    }

                    List<int> RadioRRUIds = new List<int>();
                    List<int> WithoutDateFilterRadioRRUInstallation = new List<int>();
                    List<int> WithDateFilterRadioRRUInstallation = new List<int>();

                    if (AttributeFilters != null && AttributeFilters.Count > 0)
                    {
                        //
                        // Installation Dynamic Attributes...
                        //
                        List<TLIdynamicAtt> InstDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AttributeFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            !x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIradioRRU.ToString()
                                , x => x.tablesNames, x => x.DataType).ToList();

                        List<int> DynamicInstValueListIds = new List<int>();
                        bool DynamicInstExist = false;
                        if (InstDynamicAttListIds.Count() > 0)
                        {
                            DynamicInstExist = true;
                            GetInventoriesIdsFromDynamicAttributes(out DynamicInstValueListIds, InstDynamicAttListIds, AttributeFilters);
                        }

                        //
                        // Installation Attribute Activated...
                        //
                        bool AttrInstExist = typeof(RadioRRUViewModel).GetProperties().ToList().Exists(x =>
                            AttributeFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower() && y.key.ToLower() != "id"));

                        List<int> InstallationAttributeActivated = new List<int>();
                        if (AttrInstExist)
                        {
                            List<PropertyInfo> NotStringProps = typeof(RadioRRUViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() != "string" &&
                                    AttributeFilters.Exists(y =>
                                        y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<PropertyInfo> StringProps = typeof(RadioRRUViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() == "string" &&
                                    AttributeFilters.Exists(y =>
                                        y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<StringFilterObjectList> AttrInstAttributeFilters = AttributeFilters.Where(x =>
                                NotStringProps.Exists(y => y.Name.ToLower() == x.key.ToLower()) ||
                                StringProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            InstallationAttributeActivated = _unitOfWork.RadioRRURepository.GetWhere(x =>
                                AttrInstAttributeFilters.All(z =>
                                NotStringProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (y.GetValue(_mapper.Map<RadioRRUViewModel>(x), null) != null ? z.value.Contains(y.GetValue(_mapper.Map<RadioRRUViewModel>(x), null).ToString().ToLower()) : false)) ||
                                StringProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (z.value.Any(w =>
                                        y.GetValue(_mapper.Map<RadioRRUViewModel>(x), null) != null ? y.GetValue(_mapper.Map<RadioRRUViewModel>(x), null).ToString().ToLower().StartsWith(w.ToLower()) : false))))
                            ).Select(i => i.Id).ToList();
                        }

                        //
                        // Installation (Attribute Activated + Dynamic) Attributes...
                        //
                        List<int> IntersectInstallationIds = new List<int>();
                        if (AttrInstExist && DynamicInstExist)
                        {
                            WithoutDateFilterRadioRRUInstallation = InstallationAttributeActivated.Intersect(DynamicInstValueListIds).ToList();
                        }
                        else if (AttrInstExist)
                        {
                            WithoutDateFilterRadioRRUInstallation = InstallationAttributeActivated;
                        }
                        else if (DynamicInstExist)
                        {
                            WithoutDateFilterRadioRRUInstallation = DynamicInstValueListIds;
                        }
                    }

                    if (DateFilter != null ? DateFilter.Count() > 0 : false)
                    {
                        List<TLIdynamicAtt> DateTimeInstDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AfterConvertDateFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            !x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIradioRRU.ToString()
                                , x => x.tablesNames, x => x.DataType).ToList();

                        List<int> DynamicInstValueListIds = new List<int>();
                        bool DynamicInstExist = false;

                        if (DateTimeInstDynamicAttListIds.Count > 0)
                        {
                            DynamicInstExist = true;
                            List<DateFilterViewModel> DynamicInstAttributeFilters = AfterConvertDateFilters.Where(x =>
                                DateTimeInstDynamicAttListIds.Exists(y => y.Key.ToLower() == x.key.ToLower())).ToList();

                            DynamicInstValueListIds = new List<int>();

                            List<TLIdynamicAttInstValue> DynamicInstValueListObjects = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                                DateTimeInstDynamicAttListIds.Exists(y => y.Id == x.DynamicAttId) && !x.disable).ToList();

                            List<int> InventoriesIds = DynamicInstValueListObjects.Select(x => x.InventoryId).Distinct().ToList();

                            foreach (int InventoryId in InventoriesIds)
                            {
                                List<TLIdynamicAttInstValue> DynamicInstValueListInventories = DynamicInstValueListObjects.Where(x =>
                                    x.InventoryId == InventoryId).ToList();

                                if (DynamicInstAttributeFilters.All(y => DynamicInstValueListInventories.Exists(x =>
                                    (x.ValueDateTime != null ?
                                        (x.ValueDateTime >= y.DateFrom && x.ValueDateTime <= y.DateTo) : (false)))))
                                {
                                    DynamicInstValueListIds.Add(InventoryId);
                                }
                            }
                        }

                        //
                        // Installation Attribute Activated...
                        //
                        List<PropertyInfo> InstallationProps = typeof(RadioRRUViewModel).GetProperties().Where(x =>
                            AfterConvertDateFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower())).ToList();

                        List<int> InstallationAttributeActivatedIds = new List<int>();
                        bool AttrInstExist = false;

                        if (InstallationProps != null)
                        {
                            AttrInstExist = true;

                            List<DateFilterViewModel> InstallationPropsAttributeFilters = AfterConvertDateFilters.Where(x =>
                                InstallationProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            InstallationAttributeActivatedIds = _unitOfWork.RadioRRURepository.GetWhere(x =>
                                InstallationPropsAttributeFilters.All(z =>
                                    (InstallationProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && ((y.GetValue(_mapper.Map<RadioRRUViewModel>(x), null) != null) ?
                                        ((z.DateFrom <= Convert.ToDateTime(y.GetValue(_mapper.Map<RadioRRUViewModel>(x), null))) &&
                                         (z.DateTo >= Convert.ToDateTime(y.GetValue(_mapper.Map<RadioRRUViewModel>(x), null)))) : (false)))))
                            ).Select(i => i.Id).ToList();
                        }

                        //
                        // Installation (Attribute Activated + Dynamic) Attributes...
                        //
                        if (AttrInstExist && DynamicInstExist)
                        {
                            WithDateFilterRadioRRUInstallation = InstallationAttributeActivatedIds.Intersect(DynamicInstValueListIds).ToList();
                        }
                        else if (AttrInstExist)
                        {
                            WithDateFilterRadioRRUInstallation = InstallationAttributeActivatedIds;
                        }
                        else if (DynamicInstExist)
                        {
                            WithDateFilterRadioRRUInstallation = DynamicInstValueListIds;
                        }
                    }

                    if ((DateFilter != null ? DateFilter.Count() > 0 : false) ||
                        (AttributeFilters != null ? AttributeFilters.Count() > 0 : false))
                    {
                        if ((AttributeFilters != null ? AttributeFilters.Count > 0 : false) &&
                                (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false))
                        {
                            RadioRRUIds = WithoutDateFilterRadioRRUInstallation.Intersect(WithDateFilterRadioRRUInstallation).ToList();
                        }
                        else if (AttributeFilters != null ? AttributeFilters.Count > 0 : false)
                        {
                            RadioRRUIds = WithoutDateFilterRadioRRUInstallation;
                        }
                        else if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                        {
                            RadioRRUIds = WithDateFilterRadioRRUInstallation;
                        }

                        CivilLoadsRecords = _unitOfWork.CivilLoadsRepository.GetIncludeWhere(x =>
                            (x.allLoadInstId != null ? x.allLoadInst.radioRRUId != null : false) &&
                            (!x.Dismantle) &&
                            (x.SiteCode == BaseFilters.siteCode) && 
                            RadioRRUIds.Contains(x.allLoadInst.radioRRUId.Value),
                        x => x.allCivilInst, x => x.allLoadInst, x => x.allLoadInst.radioRRU, x => x.allLoadInst.radioRRU.installationPlace,
                        x => x.allLoadInst.radioRRU.owner, x => x.allLoadInst.radioRRU.radioRRULibrary, x => x.allLoadInst.radioRRU.radioAntenna).ToList();
                    }
                    else
                    {
                        CivilLoadsRecords = _unitOfWork.CivilLoadsRepository.GetIncludeWhere(x =>
                           (x.allLoadInstId != null ? x.allLoadInst.radioRRUId != null : false) &&
                           (!x.Dismantle) &&
                           (x.SiteCode == BaseFilters.siteCode) ,

                        x => x.allCivilInst, x => x.allLoadInst, x => x.allLoadInst.radioRRU, x => x.allLoadInst.radioRRU.installationPlace,
                        x => x.allLoadInst.radioRRU.owner, x => x.allLoadInst.radioRRU.radioRRULibrary, x => x.allLoadInst.radioRRU.radioAntenna).ToList();
                    }

                    // Delete Duplicated Objects Based On Installation Date...
                    List<TLIcivilLoads> NewList = new List<TLIcivilLoads>();
                    foreach (var item in CivilLoadsRecords)
                    {
                        TLIcivilLoads CheckIfExist = NewList.FirstOrDefault(x => x.allLoadInst.radioRRUId.Value == item.allLoadInst.radioRRUId.Value);
                        if (CheckIfExist != null)
                        {
                            if (CheckIfExist.InstallationDate < item.InstallationDate)
                            {
                                NewList.Remove(CheckIfExist);
                                NewList.Add(item);
                            }
                        }
                        else
                        {
                            NewList.Add(item);
                        }
                    }
                    CivilLoadsRecords = NewList;


                    Count = CivilLoadsRecords.Count();

                    CivilLoadsRecords = CivilLoadsRecords.Skip((parameterPagination.PageNumber - 1) * parameterPagination.PageSize).
                        Take(parameterPagination.PageSize).ToList();

                    List<RadioRRUViewModel> Others = _mapper.Map<List<RadioRRUViewModel>>(CivilLoadsRecords.Select(x => x.allLoadInst.radioRRU).ToList());

                    List<TLIattributeViewManagment> AllAttributes = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                       (x.Enable && x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.RadioRRUInstallation.ToString() &&
                       (x.AttributeActivatedId != null ?
                            (x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIradioRRU.ToString() && x.AttributeActivated.enable) :
                            (!x.DynamicAtt.LibraryAtt && !x.DynamicAtt.disable && x.DynamicAtt.tablesNames.TableName == Helpers.Constants.TablesNames.TLIradioRRU.ToString()))) ||
                        (x.AttributeActivated != null ?
                            ((x.AttributeActivated.Key.ToLower() == "id" || x.AttributeActivated.Key.ToLower() == "active") && x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIradioRRU.ToString()) : false),
                           x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1, x => x.EditableManagmentView.TLItablesNames2,
                           x => x.AttributeActivated, x => x.DynamicAtt, x => x.DynamicAtt.tablesNames, x => x.DynamicAtt.DataType).ToList();

                    List<TLIattributeViewManagment> NotDateTimeInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() != "datetime") : false).ToList();

                    List<TLIattributeViewManagment> NotDateTimeDynamicInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() != "datetime" : false).ToList();

                    List<TLIattributeViewManagment> DateTimeInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() == "datetime") : false).ToList();

                    List<TLIattributeViewManagment> DateTimeDynamicInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() == "datetime" : false).ToList();


                    foreach (RadioRRUViewModel OthersInstallationObject in Others)
                    {
                        dynamic DynamiRadioRRUInstallation = new ExpandoObject();

                        //
                        // Installation Object ViewModel...
                        //
                        if (NotDateTimeInstallationAttributesViewModel != null ? NotDateTimeInstallationAttributesViewModel.Count > 0 : false)
                        {
                            List<PropertyInfo> InstallationProps = typeof(RadioRRUViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() != "datetime" :
                                    (x.PropertyType.Name.ToLower() != "datetime")) :
                                (x.PropertyType.Name.ToLower() != "datetime")).ToList();

                            foreach (PropertyInfo prop in InstallationProps)
                            {
                                if (prop.Name.ToLower().Contains("_name") &&
                                    NotDateTimeInstallationAttributesViewModel.Exists(x =>
                                        x.AttributeActivated.Label.ToLower() == prop.Name.ToLower()))
                                {
                                    object ForeignKeyNamePropObject = prop.GetValue(OthersInstallationObject, null);
                                    ((IDictionary<String, Object>)DynamiRadioRRUInstallation).Add(new KeyValuePair<string, object>(prop.Name, ForeignKeyNamePropObject));
                                }
                                else if (NotDateTimeInstallationAttributesViewModel.Exists(x =>
                                     x.AttributeActivated.Key.ToLower() == prop.Name.ToLower()) &&
                                    !prop.Name.ToLower().Contains("_name") &&
                                    (prop.Name.ToLower().Substring(Math.Max(0, prop.Name.Length - 2)) != "id" || prop.Name.ToLower() == "id"))
                                {
                                    if (prop.Name.ToLower() != "id" && prop.Name.ToLower() != "active")
                                    {
                                        TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                            x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIradioRRU.ToString() &&
                                            x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                        if (LabelName != null)
                                        {
                                            object PropObject = prop.GetValue(OthersInstallationObject, null);
                                            ((IDictionary<String, Object>)DynamiRadioRRUInstallation).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                        }
                                    }
                                    else
                                    {
                                        object PropObject = prop.GetValue(OthersInstallationObject, null);
                                        ((IDictionary<String, Object>)DynamiRadioRRUInstallation).Add(new KeyValuePair<string, object>(prop.Name, PropObject));
                                    }
                                }
                            }
                        }

                        //
                        // Installation Dynamic Attributes... (Not DateTime DataType Attribute)
                        //
                        if (NotDateTimeDynamicInstallationAttributesViewModel != null ? NotDateTimeDynamicInstallationAttributesViewModel.Count > 0 : false)
                        {
                            List<TLIdynamicAtt> NotDateTimeInstallationDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                                !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIradioRRU.ToString() &&
                                !x.LibraryAtt && x.DataType.Name.ToLower() != "datetime" &&
                                NotDateTimeDynamicInstallationAttributesViewModel.Exists(y => y.DynamicAttId == x.Id)
                                    , x => x.tablesNames, x => x.DataType).ToList();

                            List<TLIdynamicAttInstValue> NotDateTimeDynamicAttInstValues = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                                !x.DynamicAtt.LibraryAtt && !x.disable &&
                                x.InventoryId == OthersInstallationObject.Id &&
                                NotDateTimeInstallationDynamicAttributes.Exists(y => y.Key.ToLower() == x.DynamicAtt.Key.ToLower()) &&
                                x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIradioRRU.ToString()
                                    , x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                            foreach (TLIdynamicAtt InstallationDynamicAtt in NotDateTimeInstallationDynamicAttributes)
                            {
                                TLIdynamicAttInstValue DynamicAttInstValue = NotDateTimeDynamicAttInstValues.FirstOrDefault(x =>
                                    x.DynamicAtt.Key.ToLower() == InstallationDynamicAtt.Key.ToLower());

                                if (DynamicAttInstValue != null)
                                {
                                    dynamic DynamicAttValue = new ExpandoObject();
                                    if (DynamicAttInstValue.ValueString != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueString;

                                    else if (DynamicAttInstValue.ValueDouble != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueDouble;

                                    else if (DynamicAttInstValue.ValueDateTime != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueDateTime;

                                    else if (DynamicAttInstValue.ValueBoolean != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueBoolean;

                                    ((IDictionary<String, Object>)DynamiRadioRRUInstallation).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, DynamicAttValue));
                                }
                                else
                                {
                                    ((IDictionary<String, Object>)DynamiRadioRRUInstallation).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, null));
                                }
                            }
                        }

                        //
                        // Installation Object ViewModel... (DateTime DataType Attribute)
                        //
                        dynamic DateTimeAttributes = new ExpandoObject();
                        if (DateTimeInstallationAttributesViewModel != null ? DateTimeInstallationAttributesViewModel.Count() > 0 : false)
                        {
                            List<PropertyInfo> DateTimeInstallationProps = typeof(RadioRRUViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() == "datetime" :
                                    (x.PropertyType.Name.ToLower() == "datetime")) :
                                (x.PropertyType.Name.ToLower() == "datetime")).ToList();

                            foreach (PropertyInfo prop in DateTimeInstallationProps)
                            {
                                TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                    x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIradioRRU.ToString() &&
                                    x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                if (LabelName != null)
                                {
                                    object PropObject = prop.GetValue(OthersInstallationObject, null);
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                }
                            }
                        }

                        //
                        // Installation Dynamic Attributes... (DateTime DataType Attribute)
                        // 
                        if (DateTimeDynamicInstallationAttributesViewModel != null ? DateTimeDynamicInstallationAttributesViewModel.Count > 0 : false)
                        {
                            List<TLIdynamicAtt> DateTimeInstallationDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                               !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIradioRRU.ToString() &&
                               !x.LibraryAtt && x.DataType.Name.ToLower() == "datetime" &&
                                DateTimeDynamicInstallationAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames).ToList();

                            List<TLIdynamicAttInstValue> DateTimeDynamicAttInstValues = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                                x.InventoryId == OthersInstallationObject.Id && !x.disable &&
                               !x.DynamicAtt.LibraryAtt &&
                                DateTimeInstallationDynamicAttributes.Exists(y => y.Key.ToLower() == x.DynamicAtt.Key.ToLower()) &&
                                x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIradioRRU.ToString()
                                   , x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                            foreach (TLIdynamicAtt InstallationDynamicAtt in DateTimeInstallationDynamicAttributes)
                            {
                                TLIdynamicAttInstValue DynamicAttInstallationValue = DateTimeDynamicAttInstValues.FirstOrDefault(x =>
                                    x.DynamicAtt.Key.ToLower() == InstallationDynamicAtt.Key.ToLower());

                                if (DynamicAttInstallationValue != null)
                                {
                                    dynamic DynamicAttValue = new ExpandoObject();
                                    if (DynamicAttInstallationValue.ValueDateTime != null)
                                        DynamicAttValue = DynamicAttInstallationValue.ValueDateTime;

                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, DynamicAttValue));
                                }
                                else
                                {
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, null));
                                }
                            }
                        }

                        ((IDictionary<String, Object>)DynamiRadioRRUInstallation).Add(new KeyValuePair<string, object>("DateTimeAttributes", DateTimeAttributes));

                        OutPutList.Add(DynamiRadioRRUInstallation);
                    }
                    RadioRRUesTableDisplay.Model = OutPutList;

                    if (WithFilterData == true)
                    {
                        RadioRRUesTableDisplay.filters = _unitOfWork.RadioRRURepository.GetRelatedTables(BaseFilters.siteCode);
                    }
                    else
                    {
                        RadioRRUesTableDisplay.filters = null;
                    }

                    return new Response<ReturnWithFilters<object>>(true, RadioRRUesTableDisplay, null, null, (int)Helpers.Constants.ApiReturnCode.success, Count);
                }
                catch (Exception err)
                {
                    return new Response<ReturnWithFilters<object>>(false, null, null, err.Message, (int)Helpers.Constants.ApiReturnCode.fail);
                }
            }
            else if (Helpers.Constants.LoadSubType.TLIradioOther.ToString() == TableNameInstallation)
            {
                try
                {
                    int Count = 0;
                    List<FilterObjectList> ObjectAttributeFilters = CombineFilters.filters;
                    List<DateFilterViewModel> DateFilter = CombineFilters.DateFilter;

                    List<object> OutPutList = new List<object>();
                    ReturnWithFilters<object> RadioOtheresTableDisplay = new ReturnWithFilters<object>();

                    List<TLIcivilLoads> CivilLoadsRecords = new List<TLIcivilLoads>();

                    List<StringFilterObjectList> AttributeFilters = new List<StringFilterObjectList>();
                    List<AttributeActivatedViewModel> RadioOtherInstallationAttribute = new List<AttributeActivatedViewModel>();

                    if ((DateFilter != null ? DateFilter.Count() > 0 : false) ||
                        (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0))
                    {
                        RadioOtherInstallationAttribute = _mapper.Map<List<AttributeActivatedViewModel>>(_unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                            x.Enable && x.AttributeActivatedId != null &&
                            x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.RadioOtherInstallation.ToString() &&
                            x.EditableManagmentView.TLItablesNames1.TableName == Helpers.Constants.TablesNames.TLIradioOther.ToString(),
                                x => x.AttributeActivated, x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1,
                                x => x.EditableManagmentView.TLItablesNames2)
                        .Select(x => x.AttributeActivated).ToList());
                    }

                    if (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0)
                    {
                        List<AttributeActivatedViewModel> NotDateDateRadioOtherInstallationAttribute = RadioOtherInstallationAttribute.Where(x =>
                            x.DataType.ToLower() != "datetime").ToList();

                        foreach (FilterObjectList item in ObjectAttributeFilters)
                        {
                            List<string> value = item.value.Select(x => x.ToString().ToLower()).ToList();

                            AttributeActivatedViewModel AttributeKey = NotDateDateRadioOtherInstallationAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());

                            string Key = "";
                            if (AttributeKey != null)
                                Key = AttributeKey.Key;

                            else
                                Key = item.key;

                            AttributeFilters.Add(new StringFilterObjectList
                            {
                                key = Key,
                                value = value
                            });
                        }
                    }

                    //
                    // DateTime Objects Filters..
                    //
                    List<DateFilterViewModel> AfterConvertDateFilters = new List<DateFilterViewModel>();
                    if (DateFilter != null ? DateFilter.Count() > 0 : false)
                    {
                        List<AttributeActivatedViewModel> DateRadioOtherInstallationAttribute = RadioOtherInstallationAttribute.Where(x =>
                            x.DataType.ToLower() == "datetime").ToList();

                        foreach (DateFilterViewModel item in DateFilter)
                        {
                            DateTime DateFrom = Convert.ToDateTime(item.DateFrom);
                            DateTime DateTo = Convert.ToDateTime(item.DateTo);

                            if (DateFrom > DateTo)
                            {
                                DateTime Replacer = DateFrom;
                                DateFrom = DateTo;
                                DateTo = Replacer;
                            }

                            AttributeActivatedViewModel AttributeKey = DateRadioOtherInstallationAttribute.FirstOrDefault(x =>
                                x.Label.ToLower() == item.key.ToLower());
                            string Key = "";

                            if (AttributeKey != null)
                                Key = AttributeKey.Key;
                            else
                                Key = item.key;

                            AfterConvertDateFilters.Add(new DateFilterViewModel
                            {
                                key = Key,
                                DateFrom = DateFrom,
                                DateTo = DateTo
                            });
                        }
                    }

                    List<int> RadioOtherIds = new List<int>();
                    List<int> WithoutDateFilterRadioOtherInstallation = new List<int>();
                    List<int> WithDateFilterRadioOtherInstallation = new List<int>();

                    if (AttributeFilters != null && AttributeFilters.Count > 0)
                    {
                        //
                        // Installation Dynamic Attributes...
                        //
                        List<TLIdynamicAtt> InstDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AttributeFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            !x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIradioOther.ToString()
                                , x => x.tablesNames, x => x.DataType).ToList();

                        List<int> DynamicInstValueListIds = new List<int>();
                        bool DynamicInstExist = false;
                        if (InstDynamicAttListIds.Count() > 0)
                        {
                            DynamicInstExist = true;
                            GetInventoriesIdsFromDynamicAttributes(out DynamicInstValueListIds, InstDynamicAttListIds, AttributeFilters);
                        }

                        //
                        // Installation Attribute Activated...
                        //
                        bool AttrInstExist = typeof(RadioOtherViewModel).GetProperties().ToList().Exists(x =>
                            AttributeFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower() && y.key.ToLower() != "id"));

                        List<int> InstallationAttributeActivated = new List<int>();
                        if (AttrInstExist)
                        {
                            List<PropertyInfo> NotStringProps = typeof(RadioOtherViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() != "string" &&
                                    AttributeFilters.Exists(y =>
                                        y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<PropertyInfo> StringProps = typeof(RadioOtherViewModel).GetProperties().Where(x =>
                                x.PropertyType.Name.ToLower() == "string" &&
                                    AttributeFilters.Exists(y =>
                                        y.key.ToLower() == x.Name.ToLower())).ToList();

                            List<StringFilterObjectList> AttrInstAttributeFilters = AttributeFilters.Where(x =>
                                NotStringProps.Exists(y => y.Name.ToLower() == x.key.ToLower()) ||
                                StringProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            InstallationAttributeActivated = _unitOfWork.RadioOtherRepository.GetWhere(x =>
                                AttrInstAttributeFilters.All(z =>
                                NotStringProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (y.GetValue(_mapper.Map<RadioOtherViewModel>(x), null) != null ? z.value.Contains(y.GetValue(_mapper.Map<RadioOtherViewModel>(x), null).ToString().ToLower()) : false)) ||
                                StringProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (z.value.Any(w =>
                                        y.GetValue(_mapper.Map<RadioOtherViewModel>(x), null) != null ? y.GetValue(_mapper.Map<RadioOtherViewModel>(x), null).ToString().ToLower().StartsWith(w.ToLower()) : false))))
                            ).Select(i => i.Id).ToList();
                        }

                        //
                        // Installation (Attribute Activated + Dynamic) Attributes...
                        //
                        List<int> IntersectInstallationIds = new List<int>();
                        if (AttrInstExist && DynamicInstExist)
                        {
                            WithoutDateFilterRadioOtherInstallation = InstallationAttributeActivated.Intersect(DynamicInstValueListIds).ToList();
                        }
                        else if (AttrInstExist)
                        {
                            WithoutDateFilterRadioOtherInstallation = InstallationAttributeActivated;
                        }
                        else if (DynamicInstExist)
                        {
                            WithoutDateFilterRadioOtherInstallation = DynamicInstValueListIds;
                        }
                    }

                    if (DateFilter != null ? DateFilter.Count() > 0 : false)
                    {
                        List<TLIdynamicAtt> DateTimeInstDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            AfterConvertDateFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                            !x.LibraryAtt && !x.disable &&
                            x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIradioOther.ToString()
                                , x => x.tablesNames, x => x.DataType).ToList();

                        List<int> DynamicInstValueListIds = new List<int>();
                        bool DynamicInstExist = false;

                        if (DateTimeInstDynamicAttListIds.Count > 0)
                        {
                            DynamicInstExist = true;
                            List<DateFilterViewModel> DynamicInstAttributeFilters = AfterConvertDateFilters.Where(x =>
                                DateTimeInstDynamicAttListIds.Exists(y => y.Key.ToLower() == x.key.ToLower())).ToList();

                            DynamicInstValueListIds = new List<int>();

                            List<TLIdynamicAttInstValue> DynamicInstValueListObjects = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                                DateTimeInstDynamicAttListIds.Exists(y => y.Id == x.DynamicAttId) && !x.disable).ToList();

                            List<int> InventoriesIds = DynamicInstValueListObjects.Select(x => x.InventoryId).Distinct().ToList();

                            foreach (int InventoryId in InventoriesIds)
                            {
                                List<TLIdynamicAttInstValue> DynamicInstValueListInventories = DynamicInstValueListObjects.Where(x =>
                                    x.InventoryId == InventoryId).ToList();

                                if (DynamicInstAttributeFilters.All(y => DynamicInstValueListInventories.Exists(x =>
                                    (x.ValueDateTime != null ?
                                        (x.ValueDateTime >= y.DateFrom && x.ValueDateTime <= y.DateTo) : (false)))))
                                {
                                    DynamicInstValueListIds.Add(InventoryId);
                                }
                            }
                        }

                        //
                        // Installation Attribute Activated...
                        //
                        List<PropertyInfo> InstallationProps = typeof(RadioOtherViewModel).GetProperties().Where(x =>
                            AfterConvertDateFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower())).ToList();

                        List<int> InstallationAttributeActivatedIds = new List<int>();
                        bool AttrInstExist = false;

                        if (InstallationProps != null)
                        {
                            AttrInstExist = true;

                            List<DateFilterViewModel> InstallationPropsAttributeFilters = AfterConvertDateFilters.Where(x =>
                                InstallationProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                            InstallationAttributeActivatedIds = _unitOfWork.RadioOtherRepository.GetWhere(x =>
                                InstallationPropsAttributeFilters.All(z =>
                                    (InstallationProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && ((y.GetValue(_mapper.Map<RadioOtherViewModel>(x), null) != null) ?
                                        ((z.DateFrom <= Convert.ToDateTime(y.GetValue(_mapper.Map<RadioOtherViewModel>(x), null))) &&
                                         (z.DateTo >= Convert.ToDateTime(y.GetValue(_mapper.Map<RadioOtherViewModel>(x), null)))) : (false)))))
                            ).Select(i => i.Id).ToList();
                        }

                        //
                        // Installation (Attribute Activated + Dynamic) Attributes...
                        //
                        if (AttrInstExist && DynamicInstExist)
                        {
                            WithDateFilterRadioOtherInstallation = InstallationAttributeActivatedIds.Intersect(DynamicInstValueListIds).ToList();
                        }
                        else if (AttrInstExist)
                        {
                            WithDateFilterRadioOtherInstallation = InstallationAttributeActivatedIds;
                        }
                        else if (DynamicInstExist)
                        {
                            WithDateFilterRadioOtherInstallation = DynamicInstValueListIds;
                        }
                    }

                    if ((DateFilter != null ? DateFilter.Count() > 0 : false) ||
                        (AttributeFilters != null ? AttributeFilters.Count() > 0 : false))
                    {
                        if ((AttributeFilters != null ? AttributeFilters.Count > 0 : false) &&
                                (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false))
                        {
                            RadioOtherIds = WithoutDateFilterRadioOtherInstallation.Intersect(WithDateFilterRadioOtherInstallation).ToList();
                        }
                        else if (AttributeFilters != null ? AttributeFilters.Count > 0 : false)
                        {
                            RadioOtherIds = WithoutDateFilterRadioOtherInstallation;
                        }
                        else if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                        {
                            RadioOtherIds = WithDateFilterRadioOtherInstallation;
                        }

                        CivilLoadsRecords = _unitOfWork.CivilLoadsRepository.GetIncludeWhere(x =>
                            (x.allLoadInstId != null ? x.allLoadInst.radioOtherId != null : false) &&
                            (!x.Dismantle) &&
                            (x.SiteCode == BaseFilters.siteCode) &&
                                                       RadioOtherIds.Contains(x.allLoadInst.radioOtherId.Value),
                        x => x.allCivilInst, x => x.allLoadInst, x => x.allLoadInst.radioOther, x => x.allLoadInst.radioOther.installationPlace,
                        x => x.allLoadInst.radioOther.owner, x => x.allLoadInst.radioOther.radioOtherLibrary).ToList();
                    }
                    else
                    {
                        CivilLoadsRecords = _unitOfWork.CivilLoadsRepository.GetIncludeWhere(x =>
                           (x.allLoadInstId != null ? x.allLoadInst.radioOtherId != null : false) &&
                           (!x.Dismantle) &&
                           (x.SiteCode == BaseFilters.siteCode) ,
                        
                       x => x.allCivilInst, x => x.allLoadInst, x => x.allLoadInst.radioOther, x => x.allLoadInst.radioOther.installationPlace,
                       x => x.allLoadInst.radioOther.owner, x => x.allLoadInst.radioOther.radioOtherLibrary).ToList();
                    }

                    // Delete Duplicated Objects Based On Installation Date...
                    List<TLIcivilLoads> NewList = new List<TLIcivilLoads>();
                    foreach (var item in CivilLoadsRecords)
                    {
                        TLIcivilLoads CheckIfExist = NewList.FirstOrDefault(x => x.allLoadInst.radioOtherId.Value == item.allLoadInst.radioOtherId.Value);
                        if (CheckIfExist != null)
                        {
                            if (CheckIfExist.InstallationDate < item.InstallationDate)
                            {
                                NewList.Remove(CheckIfExist);
                                NewList.Add(item);
                            }
                        }
                        else
                        {
                            NewList.Add(item);
                        }
                    }
                    CivilLoadsRecords = NewList;


                    Count = CivilLoadsRecords.Count();

                    CivilLoadsRecords = CivilLoadsRecords.Skip((parameterPagination.PageNumber - 1) * parameterPagination.PageSize).
                        Take(parameterPagination.PageSize).ToList();

                    List<RadioOtherViewModel> Others = _mapper.Map<List<RadioOtherViewModel>>(CivilLoadsRecords.Select(x => x.allLoadInst.radioOther).ToList());

                    List<TLIattributeViewManagment> AllAttributes = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                       (x.Enable && x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.RadioOtherInstallation.ToString() &&
                       (x.AttributeActivatedId != null ?
                            (x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIradioOther.ToString() && x.AttributeActivated.enable) :
                            (!x.DynamicAtt.LibraryAtt && !x.DynamicAtt.disable && x.DynamicAtt.tablesNames.TableName == Helpers.Constants.TablesNames.TLIradioOther.ToString()))) ||
                        (x.AttributeActivated != null ?
                            ((x.AttributeActivated.Key.ToLower() == "id" || x.AttributeActivated.Key.ToLower() == "active") && x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIradioOther.ToString()) : false),
                           x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1, x => x.EditableManagmentView.TLItablesNames2,
                           x => x.AttributeActivated, x => x.DynamicAtt, x => x.DynamicAtt.tablesNames, x => x.DynamicAtt.DataType).ToList();

                    List<TLIattributeViewManagment> NotDateTimeInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() != "datetime") : false).ToList();

                    List<TLIattributeViewManagment> NotDateTimeDynamicInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() != "datetime" : false).ToList();

                    List<TLIattributeViewManagment> DateTimeInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() == "datetime") : false).ToList();

                    List<TLIattributeViewManagment> DateTimeDynamicInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() == "datetime" : false).ToList();


                    foreach (RadioOtherViewModel OthersInstallationObject in Others)
                    {
                        dynamic DynamiRadioOtherInstallation = new ExpandoObject();

                        //
                        // Installation Object ViewModel...
                        //
                        if (NotDateTimeInstallationAttributesViewModel != null ? NotDateTimeInstallationAttributesViewModel.Count > 0 : false)
                        {
                            List<PropertyInfo> InstallationProps = typeof(RadioOtherViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() != "datetime" :
                                    (x.PropertyType.Name.ToLower() != "datetime")) :
                                (x.PropertyType.Name.ToLower() != "datetime")).ToList();

                            foreach (PropertyInfo prop in InstallationProps)
                            {
                                if (prop.Name.ToLower().Contains("_name") &&
                                    NotDateTimeInstallationAttributesViewModel.Exists(x =>
                                        x.AttributeActivated.Label.ToLower() == prop.Name.ToLower()))
                                {
                                    object ForeignKeyNamePropObject = prop.GetValue(OthersInstallationObject, null);
                                    ((IDictionary<String, Object>)DynamiRadioOtherInstallation).Add(new KeyValuePair<string, object>(prop.Name, ForeignKeyNamePropObject));
                                }
                                else if (NotDateTimeInstallationAttributesViewModel.Exists(x =>
                                     x.AttributeActivated.Key.ToLower() == prop.Name.ToLower()) &&
                                    !prop.Name.ToLower().Contains("_name") &&
                                    (prop.Name.ToLower().Substring(Math.Max(0, prop.Name.Length - 2)) != "id" || prop.Name.ToLower() == "id"))
                                {
                                    if (prop.Name.ToLower() != "id" && prop.Name.ToLower() != "active")
                                    {
                                        TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                            x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIradioOther.ToString() &&
                                            x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                        if (LabelName != null)
                                        {
                                            object PropObject = prop.GetValue(OthersInstallationObject, null);
                                            ((IDictionary<String, Object>)DynamiRadioOtherInstallation).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                        }
                                    }
                                    else
                                    {
                                        object PropObject = prop.GetValue(OthersInstallationObject, null);
                                        ((IDictionary<String, Object>)DynamiRadioOtherInstallation).Add(new KeyValuePair<string, object>(prop.Name, PropObject));
                                    }
                                }
                            }
                        }

                        //
                        // Installation Dynamic Attributes... (Not DateTime DataType Attribute)
                        //
                        if (NotDateTimeDynamicInstallationAttributesViewModel != null ? NotDateTimeDynamicInstallationAttributesViewModel.Count > 0 : false)
                        {
                            List<TLIdynamicAtt> NotDateTimeInstallationDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                                !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIradioOther.ToString() &&
                                !x.LibraryAtt && x.DataType.Name.ToLower() != "datetime" &&
                                NotDateTimeDynamicInstallationAttributesViewModel.Exists(y => y.DynamicAttId == x.Id)
                                    , x => x.tablesNames, x => x.DataType).ToList();

                            List<TLIdynamicAttInstValue> NotDateTimeDynamicAttInstValues = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                                !x.DynamicAtt.LibraryAtt && !x.disable &&
                                x.InventoryId == OthersInstallationObject.Id &&
                                NotDateTimeInstallationDynamicAttributes.Exists(y => y.Key.ToLower() == x.DynamicAtt.Key.ToLower()) &&
                                x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIradioOther.ToString()
                                    , x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                            foreach (TLIdynamicAtt InstallationDynamicAtt in NotDateTimeInstallationDynamicAttributes)
                            {
                                TLIdynamicAttInstValue DynamicAttInstValue = NotDateTimeDynamicAttInstValues.FirstOrDefault(x =>
                                    x.DynamicAtt.Key.ToLower() == InstallationDynamicAtt.Key.ToLower());

                                if (DynamicAttInstValue != null)
                                {
                                    dynamic DynamicAttValue = new ExpandoObject();
                                    if (DynamicAttInstValue.ValueString != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueString;

                                    else if (DynamicAttInstValue.ValueDouble != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueDouble;

                                    else if (DynamicAttInstValue.ValueDateTime != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueDateTime;

                                    else if (DynamicAttInstValue.ValueBoolean != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueBoolean;

                                    ((IDictionary<String, Object>)DynamiRadioOtherInstallation).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, DynamicAttValue));
                                }
                                else
                                {
                                    ((IDictionary<String, Object>)DynamiRadioOtherInstallation).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, null));
                                }
                            }
                        }

                        //
                        // Installation Object ViewModel... (DateTime DataType Attribute)
                        //
                        dynamic DateTimeAttributes = new ExpandoObject();
                        if (DateTimeInstallationAttributesViewModel != null ? DateTimeInstallationAttributesViewModel.Count() > 0 : false)
                        {
                            List<PropertyInfo> DateTimeInstallationProps = typeof(RadioOtherViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() == "datetime" :
                                    (x.PropertyType.Name.ToLower() == "datetime")) :
                                (x.PropertyType.Name.ToLower() == "datetime")).ToList();

                            foreach (PropertyInfo prop in DateTimeInstallationProps)
                            {
                                TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                    x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIradioOther.ToString() &&
                                    x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                if (LabelName != null)
                                {
                                    object PropObject = prop.GetValue(OthersInstallationObject, null);
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                }
                            }
                        }

                        //
                        // Installation Dynamic Attributes... (DateTime DataType Attribute)
                        // 
                        if (DateTimeDynamicInstallationAttributesViewModel != null ? DateTimeDynamicInstallationAttributesViewModel.Count > 0 : false)
                        {
                            List<TLIdynamicAtt> DateTimeInstallationDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                               !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIradioOther.ToString() &&
                               !x.LibraryAtt && x.DataType.Name.ToLower() == "datetime" &&
                                DateTimeDynamicInstallationAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames).ToList();

                            List<TLIdynamicAttInstValue> DateTimeDynamicAttInstValues = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                                x.InventoryId == OthersInstallationObject.Id && !x.disable &&
                               !x.DynamicAtt.LibraryAtt &&
                                DateTimeInstallationDynamicAttributes.Exists(y => y.Key.ToLower() == x.DynamicAtt.Key.ToLower()) &&
                                x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIradioOther.ToString()
                                   , x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                            foreach (TLIdynamicAtt InstallationDynamicAtt in DateTimeInstallationDynamicAttributes)
                            {
                                TLIdynamicAttInstValue DynamicAttInstallationValue = DateTimeDynamicAttInstValues.FirstOrDefault(x =>
                                    x.DynamicAtt.Key.ToLower() == InstallationDynamicAtt.Key.ToLower());

                                if (DynamicAttInstallationValue != null)
                                {
                                    dynamic DynamicAttValue = new ExpandoObject();
                                    if (DynamicAttInstallationValue.ValueDateTime != null)
                                        DynamicAttValue = DynamicAttInstallationValue.ValueDateTime;

                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, DynamicAttValue));
                                }
                                else
                                {
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, null));
                                }
                            }
                        }

                        ((IDictionary<String, Object>)DynamiRadioOtherInstallation).Add(new KeyValuePair<string, object>("DateTimeAttributes", DateTimeAttributes));

                        OutPutList.Add(DynamiRadioOtherInstallation);
                    }
                    RadioOtheresTableDisplay.Model = OutPutList;

                    if (WithFilterData == true)
                    {
                        RadioOtheresTableDisplay.filters = _unitOfWork.RadioOtherRepository.GetRelatedTables();
                    }
                    else
                    {
                        RadioOtheresTableDisplay.filters = null;
                    }

                    return new Response<ReturnWithFilters<object>>(true, RadioOtheresTableDisplay, null, null, (int)Helpers.Constants.ApiReturnCode.success, Count);
                }
                catch (Exception err)
                {
                    return new Response<ReturnWithFilters<object>>(false, null, null, err.Message, (int)Helpers.Constants.ApiReturnCode.fail);
                }
            }
            else if (Helpers.Constants.OtherInventoryType.TLIcabinet.ToString() == TableNameInstallation)
            {
                try
                {
                    int Count = 0;
                    List<object> OutPutList = new List<object>();
                    ReturnWithFilters<object> CabinetTableDisplay = new ReturnWithFilters<object>();

                    //
                    // Get All OtherInSite To This BaseFilter + CombineFilters
                    //
                    List<TLIotherInSite> AllOtherInSiteRecords = GetOtherInSiteBySiteBaseFilter(BaseFilters, "Cabinet", CombineFilters, LibraryType);
                    List<TLIotherInSite> OtherInSiteRecords = GetMaxInstallationDate(AllOtherInSiteRecords, "Cabinet");

                    List<CabinetViewModel> Cabinets = _mapper.Map<List<CabinetViewModel>>(OtherInSiteRecords
                        .Select(x => x.allOtherInventoryInst.cabinet)).ToList();

                    Count = Cabinets.Count();

                    Cabinets = Cabinets.Skip((parameterPagination.PageNumber - 1) * parameterPagination.PageSize).
                        Take(parameterPagination.PageSize).ToList();

                    List<TLIattributeViewManagment> DynamicAttributes = _mapper.Map<List<TLIattributeViewManagment>>(_unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                        x.Enable && x.EditableManagmentView.View.ToLower() == EditableManamgmantViewNames.CabinetInstallation.ToString().ToLower() &&
                        x.DynamicAttId != null ? (x.DynamicAtt.tablesNames.TableName.ToLower() == TablesNames.TLIcabinet.ToString().ToLower() &&
                            !x.DynamicAtt.disable && !x.DynamicAtt.LibraryAtt) : false, x => x.EditableManagmentView, x => x.DynamicAtt,
                                x => x.DynamicAtt.tablesNames, x => x.DynamicAtt.DataType));

                    List<TLIattributeViewManagment> AllAttributes = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                        (x.Enable && x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.CabinetInstallation.ToString() &&
                        (LibraryType.ToLower() == "power" ?
                            !x.AttributeActivated.Key.ToLower().Contains("telecomlibrary") : !x.AttributeActivated.Key.ToLower().Contains("powerlibrary")) &&
                        (x.AttributeActivatedId != null ?
                            (x.AttributeActivated.Tabel == TablesNames.TLIcabinet.ToString() && x.AttributeActivated.enable) :
                            (!x.DynamicAtt.LibraryAtt && !x.DynamicAtt.disable && x.DynamicAtt.tablesNames.TableName == TablesNames.TLIcabinet.ToString()))) ||
                        (x.AttributeActivated != null ?
                            ((x.AttributeActivated.Key.ToLower() == "id" || x.AttributeActivated.Key.ToLower() == "active") && x.AttributeActivated.Tabel == TablesNames.TLIcabinet.ToString()) : false),
                           x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1, x => x.EditableManagmentView.TLItablesNames2,
                           x => x.AttributeActivated, x => x.DynamicAtt, x => x.DynamicAtt.tablesNames, x => x.DynamicAtt.DataType).ToList();

                    List<TLIattributeViewManagment> NotDateTimeInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() != "datetime") : false).ToList();

                    List<TLIattributeViewManagment> NotDateTimeDynamicInstallationAttributesViewModel = DynamicAttributes.Where(x =>
                        x.DynamicAtt.DataType.Name.ToLower() != "datetime").ToList();

                    List<TLIattributeViewManagment> DateTimeInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() == "datetime") : false).ToList();

                    List<TLIattributeViewManagment> DateTimeDynamicInstallationAttributesViewModel = DynamicAttributes.Where(x =>
                        x.DynamicAtt.DataType.Name.ToLower() == "datetime").ToList();

                    foreach (CabinetViewModel CabinetInstallationObject in Cabinets)
                    {
                        dynamic DynamicCabinetInstallation = new ExpandoObject();

                        //
                        // Installation Object ViewModel...
                        //
                        if (NotDateTimeInstallationAttributesViewModel != null ? NotDateTimeInstallationAttributesViewModel.Count > 0 : false)
                        {
                            List<PropertyInfo> InstallationProps = typeof(CabinetViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() != "datetime" :
                                    (x.PropertyType.Name.ToLower() != "datetime")) :
                                (x.PropertyType.Name.ToLower() != "datetime")).ToList();

                            foreach (PropertyInfo prop in InstallationProps)
                            {
                                if (prop.Name.ToLower().Contains("_name") &&
                                    NotDateTimeInstallationAttributesViewModel.Exists(x =>
                                        x.AttributeActivated.Label.ToLower() == prop.Name.ToLower()))
                                {
                                    object ForeignKeyNamePropObject = prop.GetValue(CabinetInstallationObject, null);
                                    ((IDictionary<String, Object>)DynamicCabinetInstallation).Add(new KeyValuePair<string, object>(prop.Name, ForeignKeyNamePropObject));
                                }
                                else if (NotDateTimeInstallationAttributesViewModel.Exists(x =>
                                     x.AttributeActivated.Key.ToLower() == prop.Name.ToLower()) &&
                                    !prop.Name.ToLower().Contains("_name") &&
                                    (prop.Name.ToLower().Substring(Math.Max(0, prop.Name.Length - 2)) != "id" || prop.Name.ToLower() == "id"))
                                {
                                    if (prop.Name.ToLower() != "id" && prop.Name.ToLower() != "active")
                                    {
                                        TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                            x.AttributeActivated.Tabel == TablesNames.TLIcabinet.ToString() &&
                                            x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                        if (LabelName != null)
                                        {
                                            object PropObject = prop.GetValue(CabinetInstallationObject, null);
                                            ((IDictionary<String, Object>)DynamicCabinetInstallation).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                        }
                                    }
                                    else
                                    {
                                        object PropObject = prop.GetValue(CabinetInstallationObject, null);
                                        ((IDictionary<String, Object>)DynamicCabinetInstallation).Add(new KeyValuePair<string, object>(prop.Name, PropObject));
                                    }
                                }
                            }
                        }

                        //
                        // Installation Dynamic Attributes... (Not DateTime DataType Attribute)
                        //
                        if (NotDateTimeDynamicInstallationAttributesViewModel != null ? NotDateTimeDynamicInstallationAttributesViewModel.Count > 0 : false)
                        {
                            List<TLIdynamicAtt> NotDateTimeInstallationDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                                !x.disable && x.tablesNames.TableName == TablesNames.TLIcabinet.ToString() &&
                                !x.LibraryAtt && x.DataType.Name.ToLower() != "datetime" &&
                                NotDateTimeDynamicInstallationAttributesViewModel.Exists(y => y.DynamicAttId == x.Id)
                                    , x => x.tablesNames, x => x.DataType).ToList();

                            List<TLIdynamicAttInstValue> NotDateTimeDynamicAttInstValues = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                                !x.DynamicAtt.LibraryAtt && !x.disable &&
                                x.InventoryId == CabinetInstallationObject.Id &&
                                NotDateTimeInstallationDynamicAttributes.Exists(y => y.Key.ToLower() == x.DynamicAtt.Key.ToLower()) &&
                                x.tablesNames.TableName == TablesNames.TLIcabinet.ToString()
                                    , x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                            foreach (TLIdynamicAtt InstallationDynamicAtt in NotDateTimeInstallationDynamicAttributes)
                            {
                                TLIdynamicAttInstValue DynamicAttInstValue = NotDateTimeDynamicAttInstValues.FirstOrDefault(x =>
                                    x.DynamicAtt.Key.ToLower() == InstallationDynamicAtt.Key.ToLower());

                                if (DynamicAttInstValue != null)
                                {
                                    dynamic DynamicAttValue = new ExpandoObject();
                                    if (DynamicAttInstValue.ValueString != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueString;

                                    else if (DynamicAttInstValue.ValueDouble != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueDouble;

                                    else if (DynamicAttInstValue.ValueDateTime != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueDateTime;

                                    else if (DynamicAttInstValue.ValueBoolean != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueBoolean;

                                    ((IDictionary<String, Object>)DynamicCabinetInstallation).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, DynamicAttValue));
                                }
                                else
                                {
                                    ((IDictionary<String, Object>)DynamicCabinetInstallation).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, null));
                                }
                            }
                        }

                        //
                        // Installation Object ViewModel... (DateTime DataType Attribute)
                        //
                        dynamic DateTimeAttributes = new ExpandoObject();
                        if (DateTimeInstallationAttributesViewModel != null ? DateTimeInstallationAttributesViewModel.Count() > 0 : false)
                        {
                            List<PropertyInfo> DateTimeInstallationProps = typeof(CabinetViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() == "datetime" :
                                    (x.PropertyType.Name.ToLower() == "datetime")) :
                                (x.PropertyType.Name.ToLower() == "datetime")).ToList();

                            foreach (PropertyInfo prop in DateTimeInstallationProps)
                            {
                                TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                    x.AttributeActivated.Tabel == TablesNames.TLIcabinet.ToString() &&
                                    x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                if (LabelName != null)
                                {
                                    object PropObject = prop.GetValue(CabinetInstallationObject, null);
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                }
                            }
                        }

                        //
                        // Installation Dynamic Attributes... (DateTime DataType Attribute)
                        // 
                        if (DateTimeDynamicInstallationAttributesViewModel != null ? DateTimeDynamicInstallationAttributesViewModel.Count() > 0 : false)
                        {
                            List<TLIdynamicAtt> DateTimeInstallationDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                               !x.disable && x.tablesNames.TableName == TablesNames.TLIcabinet.ToString() &&
                               !x.LibraryAtt && x.DataType.Name.ToLower() == "datetime" &&
                                DateTimeDynamicInstallationAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames).ToList();

                            List<TLIdynamicAttInstValue> DateTimeDynamicAttInstValues = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                                x.InventoryId == CabinetInstallationObject.Id && !x.disable &&
                               !x.DynamicAtt.LibraryAtt &&
                                DateTimeInstallationDynamicAttributes.Exists(y => y.Key.ToLower() == x.DynamicAtt.Key.ToLower()) &&
                                x.tablesNames.TableName == TablesNames.TLIcabinet.ToString()
                                   , x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                            foreach (TLIdynamicAtt InstallationDynamicAtt in DateTimeInstallationDynamicAttributes)
                            {
                                TLIdynamicAttInstValue DynamicAttInstallationValue = DateTimeDynamicAttInstValues.FirstOrDefault(x =>
                                    x.DynamicAtt.Key.ToLower() == InstallationDynamicAtt.Key.ToLower());

                                if (DynamicAttInstallationValue != null)
                                {
                                    dynamic DynamicAttValue = new ExpandoObject();
                                    if (DynamicAttInstallationValue.ValueDateTime != null)
                                        DynamicAttValue = DynamicAttInstallationValue.ValueDateTime;

                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, DynamicAttValue));
                                }
                                else
                                {
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, null));
                                }
                            }
                        }

                        ((IDictionary<String, Object>)DynamicCabinetInstallation).Add(new KeyValuePair<string, object>("DateTimeAttributes", DateTimeAttributes));

                        OutPutList.Add(DynamicCabinetInstallation);
                    }
                    CabinetTableDisplay.Model = OutPutList;

                    if (WithFilterData)
                    {
                        CabinetTableDisplay.filters = _unitOfWork.CabinetRepository.GetRelatedTables();
                    }
                    else
                    {
                        CabinetTableDisplay.filters = null;
                    }

                    return new Response<ReturnWithFilters<object>>(true, CabinetTableDisplay, null, null, (int)ApiReturnCode.success, Count);
                }
                catch (Exception err)
                {
                    return new Response<ReturnWithFilters<object>>(false, null, null, err.Message, (int)ApiReturnCode.fail);
                }
            }
            else if (Helpers.Constants.OtherInventoryType.TLIsolar.ToString() == TableNameInstallation)
            {
                try
                {
                    int Count = 0;
                    List<object> OutPutList = new List<object>();
                    ReturnWithFilters<object> SolarTableDisplay = new ReturnWithFilters<object>();

                    //
                    // Get All OtherInSite To This BaseFilter + CombineFilters
                    //
                    List<TLIotherInSite> AllOtherInSiteRecords = GetOtherInSiteBySiteBaseFilter(BaseFilters, "Solar", CombineFilters, null);
                    List<TLIotherInSite> OtherInSiteRecords = GetMaxInstallationDate(AllOtherInSiteRecords, "Solar");

                    List<SolarViewModel> Solars = _mapper.Map<List<SolarViewModel>>(OtherInSiteRecords
                        .Select(x => x.allOtherInventoryInst.solar));

                    Count = Solars.Count();

                    Solars = Solars.Skip((parameterPagination.PageNumber - 1) * parameterPagination.PageSize).
                        Take(parameterPagination.PageSize).ToList();

                    List<TLIattributeViewManagment> AllAttributes = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                       (x.Enable && x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.SolarInstallation.ToString() &&
                       (x.AttributeActivatedId != null ?
                            (x.AttributeActivated.Tabel == TablesNames.TLIsolar.ToString() && x.AttributeActivated.enable) :
                            (!x.DynamicAtt.LibraryAtt && !x.DynamicAtt.disable && x.DynamicAtt.tablesNames.TableName == TablesNames.TLIsolar.ToString()))) ||
                        (x.AttributeActivated != null ?
                            ((x.AttributeActivated.Key.ToLower() == "id" || x.AttributeActivated.Key.ToLower() == "active") && x.AttributeActivated.Tabel == TablesNames.TLIsolar.ToString()) : false),
                           x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1, x => x.EditableManagmentView.TLItablesNames2,
                           x => x.AttributeActivated, x => x.DynamicAtt, x => x.DynamicAtt.tablesNames, x => x.DynamicAtt.DataType).ToList();

                    List<TLIattributeViewManagment> NotDateTimeInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() != "datetime") : false).ToList();

                    List<TLIattributeViewManagment> NotDateTimeDynamicInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() != "datetime" : false).ToList();

                    List<TLIattributeViewManagment> DateTimeInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() == "datetime") : false).ToList();

                    List<TLIattributeViewManagment> DateTimeDynamicInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() == "datetime" : false).ToList();

                    foreach (SolarViewModel SolarInstallationObject in Solars)
                    {
                        dynamic DynamicSolarInstallation = new ExpandoObject();

                        //
                        // Installation Object ViewModel...
                        //
                        if (NotDateTimeInstallationAttributesViewModel != null ? NotDateTimeInstallationAttributesViewModel.Count > 0 : false)
                        {
                            List<PropertyInfo> InstallationProps = typeof(SolarViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() != "datetime" :
                                    (x.PropertyType.Name.ToLower() != "datetime")) :
                                (x.PropertyType.Name.ToLower() != "datetime")).ToList();

                            foreach (PropertyInfo prop in InstallationProps)
                            {
                                if (prop.Name.ToLower().Contains("_name") &&
                                    NotDateTimeInstallationAttributesViewModel.Exists(x =>
                                        x.AttributeActivated.Label.ToLower() == prop.Name.ToLower()))
                                {
                                    object ForeignKeyNamePropObject = prop.GetValue(SolarInstallationObject, null);
                                    ((IDictionary<String, Object>)DynamicSolarInstallation).Add(new KeyValuePair<string, object>(prop.Name, ForeignKeyNamePropObject));
                                }
                                else if (NotDateTimeInstallationAttributesViewModel.Exists(x =>
                                     x.AttributeActivated.Key.ToLower() == prop.Name.ToLower()) &&
                                    !prop.Name.ToLower().Contains("_name") &&
                                    (prop.Name.ToLower().Substring(Math.Max(0, prop.Name.Length - 2)) != "id" || prop.Name.ToLower() == "id"))
                                {
                                    if (prop.Name.ToLower() != "id" && prop.Name.ToLower() != "active")
                                    {
                                        TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                            x.AttributeActivated.Tabel == TablesNames.TLIsolar.ToString() &&
                                            x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                        if (LabelName != null)
                                        {
                                            object PropObject = prop.GetValue(SolarInstallationObject, null);
                                            ((IDictionary<String, Object>)DynamicSolarInstallation).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                        }
                                    }
                                    else
                                    {
                                        object PropObject = prop.GetValue(SolarInstallationObject, null);
                                        ((IDictionary<String, Object>)DynamicSolarInstallation).Add(new KeyValuePair<string, object>(prop.Name, PropObject));
                                    }
                                }
                            }
                        }

                        //
                        // Installation Dynamic Attributes... (Not DateTime DataType Attribute)
                        //
                        if (NotDateTimeDynamicInstallationAttributesViewModel != null ? NotDateTimeDynamicInstallationAttributesViewModel.Count > 0 : false)
                        {
                            List<TLIdynamicAtt> NotDateTimeInstallationDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                                !x.disable && x.tablesNames.TableName == TablesNames.TLIsolar.ToString() &&
                                !x.LibraryAtt && x.DataType.Name.ToLower() != "datetime" &&
                                NotDateTimeDynamicInstallationAttributesViewModel.Exists(y => y.DynamicAttId == x.Id)
                                    , x => x.tablesNames, x => x.DataType).ToList();

                            List<TLIdynamicAttInstValue> NotDateTimeDynamicAttInstValues = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                                !x.DynamicAtt.LibraryAtt && !x.disable &&
                                x.InventoryId == SolarInstallationObject.Id &&
                                NotDateTimeInstallationDynamicAttributes.Exists(y => y.Key.ToLower() == x.DynamicAtt.Key.ToLower()) &&
                                x.tablesNames.TableName == TablesNames.TLIsolar.ToString()
                                    , x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                            foreach (TLIdynamicAtt InstallationDynamicAtt in NotDateTimeInstallationDynamicAttributes)
                            {
                                TLIdynamicAttInstValue DynamicAttInstValue = NotDateTimeDynamicAttInstValues.FirstOrDefault(x =>
                                    x.DynamicAtt.Key.ToLower() == InstallationDynamicAtt.Key.ToLower());

                                if (DynamicAttInstValue != null)
                                {
                                    dynamic DynamicAttValue = new ExpandoObject();
                                    if (DynamicAttInstValue.ValueString != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueString;

                                    else if (DynamicAttInstValue.ValueDouble != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueDouble;

                                    else if (DynamicAttInstValue.ValueDateTime != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueDateTime;

                                    else if (DynamicAttInstValue.ValueBoolean != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueBoolean;

                                    ((IDictionary<String, Object>)DynamicSolarInstallation).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, DynamicAttValue));
                                }
                                else
                                {
                                    ((IDictionary<String, Object>)DynamicSolarInstallation).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, null));
                                }
                            }
                        }

                        //
                        // Installation Object ViewModel... (DateTime DataType Attribute)
                        //
                        dynamic DateTimeAttributes = new ExpandoObject();
                        if (DateTimeInstallationAttributesViewModel != null ? DateTimeInstallationAttributesViewModel.Count() > 0 : false)
                        {
                            List<PropertyInfo> DateTimeInstallationProps = typeof(SolarViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() == "datetime" :
                                    (x.PropertyType.Name.ToLower() == "datetime")) :
                                (x.PropertyType.Name.ToLower() == "datetime")).ToList();

                            foreach (PropertyInfo prop in DateTimeInstallationProps)
                            {
                                TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                    x.AttributeActivated.Tabel == TablesNames.TLIsolar.ToString() &&
                                    x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                if (LabelName != null)
                                {
                                    object PropObject = prop.GetValue(SolarInstallationObject, null);
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                }
                            }
                        }

                        //
                        // Installation Dynamic Attributes... (DateTime DataType Attribute)
                        // 
                        if (DateTimeDynamicInstallationAttributesViewModel != null ? DateTimeDynamicInstallationAttributesViewModel.Count() > 0 : false)
                        {
                            List<TLIdynamicAtt> DateTimeInstallationDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                               !x.disable && x.tablesNames.TableName == TablesNames.TLIsolar.ToString() &&
                               !x.LibraryAtt && x.DataType.Name.ToLower() == "datetime" &&
                                DateTimeDynamicInstallationAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames).ToList();

                            List<TLIdynamicAttInstValue> DateTimeDynamicAttInstValues = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                                x.InventoryId == SolarInstallationObject.Id && !x.disable &&
                               !x.DynamicAtt.LibraryAtt &&
                                DateTimeInstallationDynamicAttributes.Exists(y => y.Key.ToLower() == x.DynamicAtt.Key.ToLower()) &&
                                x.tablesNames.TableName == TablesNames.TLIsolar.ToString()
                                   , x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                            foreach (TLIdynamicAtt InstallationDynamicAtt in DateTimeInstallationDynamicAttributes)
                            {
                                TLIdynamicAttInstValue DynamicAttInstallationValue = DateTimeDynamicAttInstValues.FirstOrDefault(x =>
                                    x.DynamicAtt.Key.ToLower() == InstallationDynamicAtt.Key.ToLower());

                                if (DynamicAttInstallationValue != null)
                                {
                                    dynamic DynamicAttValue = new ExpandoObject();
                                    if (DynamicAttInstallationValue.ValueDateTime != null)
                                        DynamicAttValue = DynamicAttInstallationValue.ValueDateTime;

                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, DynamicAttValue));
                                }
                                else
                                {
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, null));
                                }
                            }
                        }

                        ((IDictionary<String, Object>)DynamicSolarInstallation).Add(new KeyValuePair<string, object>("DateTimeAttributes", DateTimeAttributes));

                        OutPutList.Add(DynamicSolarInstallation);
                    }
                    SolarTableDisplay.Model = OutPutList;

                    if (WithFilterData)
                    {
                        SolarTableDisplay.filters = _unitOfWork.SolarRepository.GetRelatedTables(BaseFilters.siteCode);
                    }
                    else
                    {
                        SolarTableDisplay.filters = null;
                    }

                    return new Response<ReturnWithFilters<object>>(true, SolarTableDisplay, null, null, (int)ApiReturnCode.success, Count);
                }
                catch (Exception err)
                {
                    return new Response<ReturnWithFilters<object>>(false, null, null, err.Message, (int)ApiReturnCode.fail);
                }
            }
            else if (Helpers.Constants.OtherInventoryType.TLIgenerator.ToString() == TableNameInstallation)
            {
                try
                {
                    int Count = 0;
                    List<object> OutPutList = new List<object>();
                    ReturnWithFilters<object> GeneratorTableDisplay = new ReturnWithFilters<object>();

                    //
                    // Get All OtherInSite To This BaseFilter + CombineFilters
                    //
                    List<TLIotherInSite> AllOtherInSiteRecords = GetOtherInSiteBySiteBaseFilter(BaseFilters, "Generator", CombineFilters, null);
                    List<TLIotherInSite> OtherInSiteRecords = GetMaxInstallationDate(AllOtherInSiteRecords, "Generator");

                    List<GeneratorViewModel> Generators = _mapper.Map<List<GeneratorViewModel>>(OtherInSiteRecords
                        .Select(x => x.allOtherInventoryInst.generator));

                    Count = Generators.Count();

                    Generators = Generators.Skip((parameterPagination.PageNumber - 1) * parameterPagination.PageSize).
                        Take(parameterPagination.PageSize).ToList();

                    List<TLIattributeViewManagment> AllAttributes = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                       (x.Enable && x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.GeneratorInstallation.ToString() &&
                       (x.AttributeActivatedId != null ?
                            (x.AttributeActivated.Tabel == TablesNames.TLIgenerator.ToString() && x.AttributeActivated.enable) :
                            (!x.DynamicAtt.LibraryAtt && !x.DynamicAtt.disable && x.DynamicAtt.tablesNames.TableName == TablesNames.TLIgenerator.ToString()))) ||
                        (x.AttributeActivated != null ?
                            ((x.AttributeActivated.Key.ToLower() == "id" || x.AttributeActivated.Key.ToLower() == "active") && x.AttributeActivated.Tabel == TablesNames.TLIgenerator.ToString()) : false),
                           x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1, x => x.EditableManagmentView.TLItablesNames2,
                           x => x.AttributeActivated, x => x.DynamicAtt, x => x.DynamicAtt.tablesNames, x => x.DynamicAtt.DataType).ToList();

                    List<TLIattributeViewManagment> NotDateTimeInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() != "datetime") : false).ToList();

                    List<TLIattributeViewManagment> NotDateTimeDynamicInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() != "datetime" : false).ToList();

                    List<TLIattributeViewManagment> DateTimeInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() == "datetime") : false).ToList();

                    List<TLIattributeViewManagment> DateTimeDynamicInstallationAttributesViewModel = AllAttributes.Where(x =>
                        x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() == "datetime" : false).ToList();

                    foreach (GeneratorViewModel GeneratorInstallationObject in Generators)
                    {
                        dynamic DynamicGeneratorInstallation = new ExpandoObject();

                        //
                        // Installation Object ViewModel...
                        //
                        if (NotDateTimeInstallationAttributesViewModel != null ? NotDateTimeInstallationAttributesViewModel.Count > 0 : false)
                        {
                            List<PropertyInfo> InstallationProps = typeof(GeneratorViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() != "datetime" :
                                    (x.PropertyType.Name.ToLower() != "datetime")) :
                                (x.PropertyType.Name.ToLower() != "datetime")).ToList();

                            foreach (PropertyInfo prop in InstallationProps)
                            {
                                if (prop.Name.ToLower().Contains("_name") &&
                                    NotDateTimeInstallationAttributesViewModel.Exists(x =>
                                        x.AttributeActivated.Label.ToLower() == prop.Name.ToLower()))
                                {
                                    object ForeignKeyNamePropObject = prop.GetValue(GeneratorInstallationObject, null);
                                    ((IDictionary<String, Object>)DynamicGeneratorInstallation).Add(new KeyValuePair<string, object>(prop.Name, ForeignKeyNamePropObject));
                                }
                                else if (NotDateTimeInstallationAttributesViewModel.Exists(x =>
                                     x.AttributeActivated.Key.ToLower() == prop.Name.ToLower()) &&
                                    !prop.Name.ToLower().Contains("_name") &&
                                    (prop.Name.ToLower().Substring(Math.Max(0, prop.Name.Length - 2)) != "id" || prop.Name.ToLower() == "id"))
                                {
                                    if (prop.Name.ToLower() != "id" && prop.Name.ToLower() != "active")
                                    {
                                        TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                            x.AttributeActivated.Tabel == TablesNames.TLIgenerator.ToString() &&
                                            x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                        if (LabelName != null)
                                        {
                                            object PropObject = prop.GetValue(GeneratorInstallationObject, null);
                                            ((IDictionary<String, Object>)DynamicGeneratorInstallation).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                        }
                                    }
                                    else
                                    {
                                        object PropObject = prop.GetValue(GeneratorInstallationObject, null);
                                        ((IDictionary<String, Object>)DynamicGeneratorInstallation).Add(new KeyValuePair<string, object>(prop.Name, PropObject));
                                    }
                                }
                            }
                        }

                        //
                        // Installation Dynamic Attributes... (Not DateTime DataType Attribute)
                        //
                        if (NotDateTimeDynamicInstallationAttributesViewModel != null ? NotDateTimeDynamicInstallationAttributesViewModel.Count > 0 : false)
                        {
                            List<TLIdynamicAtt> NotDateTimeInstallationDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                                !x.disable && x.tablesNames.TableName == TablesNames.TLIgenerator.ToString() &&
                                !x.LibraryAtt && x.DataType.Name.ToLower() != "datetime" &&
                                NotDateTimeDynamicInstallationAttributesViewModel.Exists(y => y.DynamicAttId == x.Id)
                                    , x => x.tablesNames, x => x.DataType).ToList();

                            List<TLIdynamicAttInstValue> NotDateTimeDynamicAttInstValues = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                                !x.DynamicAtt.LibraryAtt && !x.disable &&
                                x.InventoryId == GeneratorInstallationObject.Id &&
                                NotDateTimeInstallationDynamicAttributes.Exists(y => y.Key.ToLower() == x.DynamicAtt.Key.ToLower()) &&
                                x.tablesNames.TableName == TablesNames.TLIgenerator.ToString()
                                    , x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                            foreach (TLIdynamicAtt InstallationDynamicAtt in NotDateTimeInstallationDynamicAttributes)
                            {
                                TLIdynamicAttInstValue DynamicAttInstValue = NotDateTimeDynamicAttInstValues.FirstOrDefault(x =>
                                    x.DynamicAtt.Key.ToLower() == InstallationDynamicAtt.Key.ToLower());

                                if (DynamicAttInstValue != null)
                                {
                                    dynamic DynamicAttValue = new ExpandoObject();
                                    if (DynamicAttInstValue.ValueString != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueString;

                                    else if (DynamicAttInstValue.ValueDouble != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueDouble;

                                    else if (DynamicAttInstValue.ValueDateTime != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueDateTime;

                                    else if (DynamicAttInstValue.ValueBoolean != null)
                                        DynamicAttValue = DynamicAttInstValue.ValueBoolean;

                                    ((IDictionary<String, Object>)DynamicGeneratorInstallation).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, DynamicAttValue));
                                }
                                else
                                {
                                    ((IDictionary<String, Object>)DynamicGeneratorInstallation).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, null));
                                }
                            }
                        }

                        //
                        // Installation Object ViewModel... (DateTime DataType Attribute)
                        //
                        dynamic DateTimeAttributes = new ExpandoObject();
                        if (DateTimeInstallationAttributesViewModel != null ? DateTimeInstallationAttributesViewModel.Count() > 0 : false)
                        {
                            List<PropertyInfo> DateTimeInstallationProps = typeof(GeneratorViewModel).GetProperties().Where(x =>
                                x.PropertyType.GenericTypeArguments != null ?
                                    (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() == "datetime" :
                                    (x.PropertyType.Name.ToLower() == "datetime")) :
                                (x.PropertyType.Name.ToLower() == "datetime")).ToList();

                            foreach (PropertyInfo prop in DateTimeInstallationProps)
                            {
                                TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                    x.AttributeActivated.Tabel == TablesNames.TLIgenerator.ToString() &&
                                    x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                if (LabelName != null)
                                {
                                    object PropObject = prop.GetValue(GeneratorInstallationObject, null);
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                }
                            }
                        }

                        //
                        // Installation Dynamic Attributes... (DateTime DataType Attribute)
                        // 
                        if (DateTimeDynamicInstallationAttributesViewModel != null ? DateTimeDynamicInstallationAttributesViewModel.Count() > 0 : false)
                        {
                            List<TLIdynamicAtt> DateTimeInstallationDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                               !x.disable && x.tablesNames.TableName == TablesNames.TLIgenerator.ToString() &&
                               !x.LibraryAtt && x.DataType.Name.ToLower() == "datetime" &&
                                DateTimeDynamicInstallationAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames).ToList();

                            List<TLIdynamicAttInstValue> DateTimeDynamicAttInstValues = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                                x.InventoryId == GeneratorInstallationObject.Id && !x.disable &&
                               !x.DynamicAtt.LibraryAtt &&
                                DateTimeInstallationDynamicAttributes.Exists(y => y.Key.ToLower() == x.DynamicAtt.Key.ToLower()) &&
                                x.tablesNames.TableName == TablesNames.TLIgenerator.ToString()
                                   , x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                            foreach (TLIdynamicAtt InstallationDynamicAtt in DateTimeInstallationDynamicAttributes)
                            {
                                TLIdynamicAttInstValue DynamicAttInstallationValue = DateTimeDynamicAttInstValues.FirstOrDefault(x =>
                                    x.DynamicAtt.Key.ToLower() == InstallationDynamicAtt.Key.ToLower());

                                if (DynamicAttInstallationValue != null)
                                {
                                    dynamic DynamicAttValue = new ExpandoObject();
                                    if (DynamicAttInstallationValue.ValueDateTime != null)
                                        DynamicAttValue = DynamicAttInstallationValue.ValueDateTime;

                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, DynamicAttValue));
                                }
                                else
                                {
                                    ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, null));
                                }
                            }
                        }

                        ((IDictionary<String, Object>)DynamicGeneratorInstallation).Add(new KeyValuePair<string, object>("DateTimeAttributes", DateTimeAttributes));

                        OutPutList.Add(DynamicGeneratorInstallation);
                    }
                    GeneratorTableDisplay.Model = OutPutList;

                    if (WithFilterData)
                    {
                        GeneratorTableDisplay.filters = _unitOfWork.GeneratorRepository.GetRelatedTables();
                    }
                    else
                    {
                        GeneratorTableDisplay.filters = null;
                    }

                    return new Response<ReturnWithFilters<object>>(true, GeneratorTableDisplay, null, null, (int)ApiReturnCode.success, Count);
                }
                catch (Exception err)
                {
                    return new Response<ReturnWithFilters<object>>(false, null, null, err.Message, (int)ApiReturnCode.fail);
                }
            }
            return new Response<ReturnWithFilters<object>>(false, null, null, null, (int)ApiReturnCode.success);
        }
        public Response<ReturnWithFilters<object>> GetCivilWithLegsWithEnableAtt(SiteFilter BaseFilter, bool WithFilterData, CombineFilters CombineFilters, ParameterPagination parameterPagination)
        {
            try
            {
                int Count = 0;
                List<object> OutPutList = new List<object>();
                ReturnWithFilters<object> CivilTableDisplay = new ReturnWithFilters<object>();

                //
                // Get All CivilSiteDateRecords To This BaseFilter
                //
                List<TLIcivilSiteDate> AllCivilSiteDateRecords = GetCivilSiteDateBySiteBaseFilter(BaseFilter, "CivilWithLegs", CombineFilters, null);

                List<TLIcivilSiteDate> CivilSiteDateRecords = GetMaxInstallationDates(out Count, AllCivilSiteDateRecords, "CivilWithLegs", parameterPagination);

                List<CivilWithLegsViewModel> Civils = _mapper.Map<List<CivilWithLegsViewModel>>(CivilSiteDateRecords.Select(x =>
                    x.allCivilInst.civilWithLegs).ToList());

                List<TLIattributeViewManagment> AllAttributes = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                   (x.Enable && x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.CivilWithLegInstallation.ToString() &&
                   (x.AttributeActivatedId != null ?
                        (x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString() && x.AttributeActivated.enable) :
                        (!x.DynamicAtt.LibraryAtt && !x.DynamicAtt.disable && x.DynamicAtt.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString()))) ||
                    (x.AttributeActivated != null ?
                        ((x.AttributeActivated.Key.ToLower() == "id" || x.AttributeActivated.Key.ToLower() == "active") && x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString()) : false),
                       x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1, x => x.EditableManagmentView.TLItablesNames2,
                       x => x.AttributeActivated, x => x.DynamicAtt, x => x.DynamicAtt.tablesNames, x => x.DynamicAtt.DataType).ToList();

                List<TLIattributeViewManagment> NotDateTimeInstallationAttributesViewModel = AllAttributes.Where(x =>
                    x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() != "datetime") : false).ToList();

                List<TLIattributeViewManagment> NotDateTimeDynamicInstallationAttributesViewModel = AllAttributes.Where(x =>
                    x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() != "datetime" : false).ToList();

                List<TLIattributeViewManagment> DateTimeInstallationAttributesViewModel = AllAttributes.Where(x =>
                    x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() == "datetime") : false).ToList();

                List<TLIattributeViewManagment> DateTimeDynamicInstallationAttributesViewModel = AllAttributes.Where(x =>
                    x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() == "datetime" : false).ToList();

                foreach (CivilWithLegsViewModel CivilWithLegInstallationObject in Civils)
                {
                    dynamic DynamicCivilWithLegInstallation = new ExpandoObject();

                    //
                    // Installation Object ViewModel...
                    //
                    if (NotDateTimeInstallationAttributesViewModel != null ? NotDateTimeInstallationAttributesViewModel.Count > 0 : false)
                    {
                        List<PropertyInfo> InstallationProps = typeof(CivilWithLegsViewModel).GetProperties().Where(x =>
                            x.PropertyType.GenericTypeArguments != null ?
                                (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() != "datetime" :
                                (x.PropertyType.Name.ToLower() != "datetime")) :
                            (x.PropertyType.Name.ToLower() != "datetime")).ToList();

                        foreach (PropertyInfo prop in InstallationProps)
                        {
                            if (prop.Name.ToLower().Contains("_name") &&
                                NotDateTimeInstallationAttributesViewModel.Exists(x =>
                                    x.AttributeActivated.Label.ToLower() == prop.Name.ToLower()))
                            {
                                object ForeignKeyNamePropObject = prop.GetValue(CivilWithLegInstallationObject, null);
                                ((IDictionary<String, Object>)DynamicCivilWithLegInstallation).Add(new KeyValuePair<string, object>(prop.Name, ForeignKeyNamePropObject));
                            }
                            else if (NotDateTimeInstallationAttributesViewModel.Exists(x =>
                                 x.AttributeActivated.Key.ToLower() == prop.Name.ToLower()) &&
                                !prop.Name.ToLower().Contains("_name") &&
                                (prop.Name.ToLower().Substring(Math.Max(0, prop.Name.Length - 2)) != "id" || prop.Name.ToLower() == "id"))
                            {
                                if (prop.Name.ToLower() != "id" && prop.Name.ToLower() != "active")
                                {
                                    TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                        x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString() &&
                                        x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                    if (LabelName != null)
                                    {
                                        object PropObject = prop.GetValue(CivilWithLegInstallationObject, null);
                                        ((IDictionary<String, Object>)DynamicCivilWithLegInstallation).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                    }
                                }
                                else
                                {
                                    object PropObject = prop.GetValue(CivilWithLegInstallationObject, null);
                                    ((IDictionary<String, Object>)DynamicCivilWithLegInstallation).Add(new KeyValuePair<string, object>(prop.Name, PropObject));
                                }
                            }
                        }
                    }

                    //
                    // Installation Dynamic Attributes... (Not DateTime DataType Attribute)
                    //
                    if (NotDateTimeDynamicInstallationAttributesViewModel != null ? NotDateTimeDynamicInstallationAttributesViewModel.Count > 0 : false)
                    {
                        List<TLIdynamicAtt> NotDateTimeInstallationDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString() &&
                            !x.LibraryAtt && x.DataType.Name.ToLower() != "datetime" &&
                            NotDateTimeDynamicInstallationAttributesViewModel.Exists(y => y.DynamicAttId == x.Id)
                                , x => x.tablesNames, x => x.DataType).ToList();

                        List<TLIdynamicAttInstValue> NotDateTimeDynamicAttInstValues = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                            !x.DynamicAtt.LibraryAtt && !x.disable &&
                            x.InventoryId == CivilWithLegInstallationObject.Id &&
                            NotDateTimeInstallationDynamicAttributes.Exists(y => y.Key.ToLower() == x.DynamicAtt.Key.ToLower()) &&
                            x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString()
                                , x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                        foreach (TLIdynamicAtt InstallationDynamicAtt in NotDateTimeInstallationDynamicAttributes)
                        {
                            TLIdynamicAttInstValue DynamicAttInstValue = NotDateTimeDynamicAttInstValues.FirstOrDefault(x =>
                                x.DynamicAtt.Key.ToLower() == InstallationDynamicAtt.Key.ToLower());

                            if (DynamicAttInstValue != null)
                            {
                                dynamic DynamicAttValue = new ExpandoObject();
                                if (DynamicAttInstValue.ValueString != null)
                                    DynamicAttValue = DynamicAttInstValue.ValueString;

                                else if (DynamicAttInstValue.ValueDouble != null)
                                    DynamicAttValue = DynamicAttInstValue.ValueDouble;

                                else if (DynamicAttInstValue.ValueDateTime != null)
                                    DynamicAttValue = DynamicAttInstValue.ValueDateTime;

                                else if (DynamicAttInstValue.ValueBoolean != null)
                                    DynamicAttValue = DynamicAttInstValue.ValueBoolean;

                                ((IDictionary<String, Object>)DynamicCivilWithLegInstallation).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, DynamicAttValue));
                            }
                            else
                            {
                                ((IDictionary<String, Object>)DynamicCivilWithLegInstallation).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, null));
                            }
                        }
                    }

                    //
                    // Installation Object ViewModel... (DateTime DataType Attribute)
                    //
                    dynamic DateTimeAttributes = new ExpandoObject();
                    if (DateTimeInstallationAttributesViewModel != null ? DateTimeInstallationAttributesViewModel.Count() > 0 : false)
                    {
                        List<PropertyInfo> DateTimeInstallationProps = typeof(CivilWithLegsViewModel).GetProperties().Where(x =>
                            x.PropertyType.GenericTypeArguments != null ?
                                (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() == "datetime" :
                                (x.PropertyType.Name.ToLower() == "datetime")) :
                            (x.PropertyType.Name.ToLower() == "datetime")).ToList();

                        foreach (PropertyInfo prop in DateTimeInstallationProps)
                        {
                            TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString() &&
                                x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                            if (LabelName != null)
                            {
                                object PropObject = prop.GetValue(CivilWithLegInstallationObject, null);
                                ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                            }
                        }
                    }

                    //
                    // Installation Dynamic Attributes... (DateTime DataType Attribute)
                    // 
                    if (DateTimeDynamicInstallationAttributesViewModel != null ? DateTimeDynamicInstallationAttributesViewModel.Count() > 0 : false)
                    {
                        List<TLIdynamicAtt> DateTimeInstallationDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                           !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString() &&
                           !x.LibraryAtt && x.DataType.Name.ToLower() == "datetime" &&
                            DateTimeDynamicInstallationAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames).ToList();

                        List<TLIdynamicAttInstValue> DateTimeDynamicAttInstValues = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                            x.InventoryId == CivilWithLegInstallationObject.Id && !x.disable &&
                           !x.DynamicAtt.LibraryAtt &&
                            DateTimeInstallationDynamicAttributes.Exists(y => y.Key.ToLower() == x.DynamicAtt.Key.ToLower()) &&
                            x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString()
                               , x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                        foreach (TLIdynamicAtt InstallationDynamicAtt in DateTimeInstallationDynamicAttributes)
                        {
                            TLIdynamicAttInstValue DynamicAttInstallationValue = DateTimeDynamicAttInstValues.FirstOrDefault(x =>
                                x.DynamicAtt.Key.ToLower() == InstallationDynamicAtt.Key.ToLower());

                            if (DynamicAttInstallationValue != null)
                            {
                                dynamic DynamicAttValue = new ExpandoObject();
                                if (DynamicAttInstallationValue.ValueDateTime != null)
                                    DynamicAttValue = DynamicAttInstallationValue.ValueDateTime;

                                ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, DynamicAttValue));
                            }
                            else
                            {
                                ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, null));
                            }
                        }
                    }

                    ((IDictionary<String, Object>)DynamicCivilWithLegInstallation).Add(new KeyValuePair<string, object>("DateTimeAttributes", DateTimeAttributes));

                    OutPutList.Add(DynamicCivilWithLegInstallation);
                }

                CivilTableDisplay.Model = OutPutList;

                if (WithFilterData)
                {
                    CivilTableDisplay.filters = _unitOfWork.CivilWithLegsRepository.GetRelatedTables();
                }
                else
                {
                    CivilTableDisplay.filters = null;
                }

                return new Response<ReturnWithFilters<object>>(true, CivilTableDisplay, null, null, (int)Helpers.Constants.ApiReturnCode.success, Count);
            }
            catch (Exception err)
            {
                return new Response<ReturnWithFilters<object>>(true, null, null, err.Message, (int)Helpers.Constants.ApiReturnCode.fail);
            }
        }
        public List<TLIcivilSiteDate> GetCivilSiteDateBySiteBaseFilter(SiteFilter BaseFilter, string Kind, CombineFilters CombineFilters, int? CategoryId)
        {
            List<StringFilterObjectList> AttributeFilters = new List<StringFilterObjectList>();

            List<AttributeActivatedViewModel> CivilInstallationAttribute = new List<AttributeActivatedViewModel>();

            List<FilterObjectList> ObjectAttributeFilters = CombineFilters.filters;
            List<DateFilterViewModel> DateFilter = CombineFilters.DateFilter;

            if (Kind == "CivilWithLegs")
            {
                if ((DateFilter != null ? DateFilter.Count() > 0 : false) ||
                    (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0))
                {
                    CivilInstallationAttribute = _mapper.Map<List<AttributeActivatedViewModel>>(_unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                        x.Enable && x.AttributeActivatedId != null &&
                        x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.CivilWithLegInstallation.ToString() &&
                        x.EditableManagmentView.TLItablesNames1.TableName == Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString(),
                            x => x.AttributeActivated, x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1,
                            x => x.EditableManagmentView.TLItablesNames2)
                    .Select(x => x.AttributeActivated).ToList());
                }
            }
            else if (Kind == "CivilWithoutLegs")
            {
                if ((DateFilter != null ? DateFilter.Count() > 0 : false) ||
                    (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0))
                {
                    List<AttActivatedCategoryViewModel> CivilWithoutLegCatgeoryData = _mapper.Map<List<AttActivatedCategoryViewModel>>(_unitOfWork.AttActivatedCategoryRepository
                        .GetWhere(x => x.civilWithoutLegCategoryId == CategoryId && x.enable && !x.IsLibrary).ToList());

                    string CategoryName = _unitOfWork.CivilWithoutLegCategoryRepository.GetByID(CategoryId.Value).Name;
                    string EditableMangmentCategoryViewName = "";
                    if (CategoryName == "Mast")
                        EditableMangmentCategoryViewName = Helpers.Constants.EditableManamgmantViewNames.CivilWithoutLegInstallationMast.ToString();
                    else if (CategoryName == "Capsule")
                        EditableMangmentCategoryViewName = Helpers.Constants.EditableManamgmantViewNames.CivilWithoutLegInstallationCapsule.ToString();
                    else if (CategoryName == "Monopole")
                        EditableMangmentCategoryViewName = Helpers.Constants.EditableManamgmantViewNames.CivilWithoutLegInstallationMonopole.ToString();

                    CivilInstallationAttribute = _mapper.Map<List<AttributeActivatedViewModel>>(_unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                        x.Enable && x.AttributeActivatedId != null &&
                        x.EditableManagmentView.View == EditableMangmentCategoryViewName,
                            x => x.AttributeActivated, x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1,
                            x => x.EditableManagmentView.TLItablesNames2).Select(x => x.AttributeActivated).ToList());

                    foreach (AttributeActivatedViewModel CivilWithoutLegAttribute in CivilInstallationAttribute)
                    {
                        AttActivatedCategoryViewModel AttActivatedCategory = CivilWithoutLegCatgeoryData
                            .FirstOrDefault(x => x.attributeActivatedId == CivilWithoutLegAttribute.Id);

                        CivilWithoutLegAttribute.Required = AttActivatedCategory.Required;
                        CivilWithoutLegAttribute.Label = AttActivatedCategory.Label;
                        CivilWithoutLegAttribute.Description = AttActivatedCategory.Description;
                        CivilWithoutLegAttribute.enable = AttActivatedCategory.enable;
                    }
                }
            }
            else if (Kind == "CivilNonSteel")
            {
                if ((DateFilter != null ? DateFilter.Count() > 0 : false) ||
                    (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0))
                {
                    CivilInstallationAttribute = _mapper.Map<List<AttributeActivatedViewModel>>(_unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                        x.Enable && x.AttributeActivatedId != null &&
                        x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.CivilNonSteelInstallation.ToString(),
                            x => x.AttributeActivated, x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1,
                            x => x.EditableManagmentView.TLItablesNames2).Select(x => x.AttributeActivated).ToList());
                }
            }

            if (ObjectAttributeFilters != null && ObjectAttributeFilters.Count > 0)
            {
                List<AttributeActivatedViewModel> NotDateCivilInstallationAttribute = CivilInstallationAttribute.Where(x =>
                    x.DataType.ToLower() != "datetime").ToList();

                foreach (FilterObjectList item in ObjectAttributeFilters)
                {
                    List<string> value = item.value.Select(x => x.ToString().ToLower()).ToList();

                    AttributeActivatedViewModel AttributeKey = NotDateCivilInstallationAttribute.FirstOrDefault(x =>
                        x.Label.ToLower() == item.key.ToLower());

                    string Key = "";
                    if (AttributeKey != null)
                        Key = AttributeKey.Key;

                    else
                        Key = item.key;

                    AttributeFilters.Add(new StringFilterObjectList
                    {
                        key = Key,
                        value = value
                    });
                }
            }

            //
            // DateTime Objects Filters..
            //
            List<DateFilterViewModel> AfterConvertDateFilters = new List<DateFilterViewModel>();
            if (DateFilter != null ? DateFilter.Count() > 0 : false)
            {
                List<AttributeActivatedViewModel> DateCivilInstallationAttribute = CivilInstallationAttribute.Where(x =>
                    x.DataType.ToLower() == "datetime").ToList();

                foreach (DateFilterViewModel item in DateFilter)
                {
                    DateTime DateFrom = Convert.ToDateTime(item.DateFrom);
                    DateTime DateTo = Convert.ToDateTime(item.DateTo);

                    if (DateFrom > DateTo)
                    {
                        DateTime Replacer = DateFrom;
                        DateFrom = DateTo;
                        DateTo = Replacer;
                    }

                    AttributeActivatedViewModel AttributeKey = DateCivilInstallationAttribute.FirstOrDefault(x =>
                        x.Label.ToLower() == item.key.ToLower());
                    string Key = "";

                    if (AttributeKey != null)
                        Key = AttributeKey.Key;
                    else
                        Key = item.key;

                    AfterConvertDateFilters.Add(new DateFilterViewModel
                    {
                        key = Key,
                        DateFrom = DateFrom,
                        DateTo = DateTo
                    });
                }
            }

            if (Kind == "CivilWithLegs")
            {
                List<int> CivilWithLegsIds = new List<int>();
                List<int> WithoutDateFilterCivilWithLegsInstallation = new List<int>();
                List<int> WithDateFilterCivilWithLegsInstallation = new List<int>();

                if (AttributeFilters != null ? AttributeFilters.Count() > 0 : false)
                {
                    //
                    // Installation Dynamic Attributes...
                    //
                    List<TLIdynamicAtt> InstDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                        AttributeFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                        !x.LibraryAtt && !x.disable &&
                        x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString()
                            , x => x.tablesNames, x => x.DataType).ToList();

                    List<int> DynamicInstValueListIds = new List<int>();
                    bool DynamicInstExist = false;
                    if (InstDynamicAttListIds.Count() > 0)
                    {
                        DynamicInstExist = true;
                        GetInventoriesIdsFromDynamicAttributes(out DynamicInstValueListIds, InstDynamicAttListIds, AttributeFilters);
                    }

                    //
                    // Installation Attribute Activated...
                    //
                    bool AttrInstExist = typeof(CivilWithLegsViewModel).GetProperties().ToList().Exists(x =>
                        AttributeFilters.Exists(y =>
                            y.key.ToLower() == x.Name.ToLower() && y.key.ToLower() != "id"));

                    List<int> InstallationAttributeActivated = new List<int>();

                    if (AttrInstExist)
                    {
                        List<PropertyInfo> NotStringProps = typeof(CivilWithLegsViewModel).GetProperties().Where(x =>
                            x.PropertyType.Name.ToLower() != "string" &&
                            AttributeFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower())).ToList();

                        List<PropertyInfo> StringProps = typeof(CivilWithLegsViewModel).GetProperties().Where(x =>
                            x.PropertyType.Name.ToLower() == "string" &&
                            AttributeFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower())).ToList();

                        List<StringFilterObjectList> AttrInstAttributeFilters = AttributeFilters.Where(x =>
                            NotStringProps.Exists(y => y.Name.ToLower() == x.key.ToLower()) ||
                            StringProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                        InstallationAttributeActivated = _unitOfWork.CivilWithLegsRepository.GetWhere(x =>
                             AttrInstAttributeFilters.All(z =>
                                NotStringProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (y.GetValue(_mapper.Map<CivilWithLegsViewModel>(x), null) != null ? z.value.Contains(y.GetValue(_mapper.Map<CivilWithLegsViewModel>(x), null).ToString().ToLower()) : false)) ||
                                StringProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (z.value.Any(w =>
                                     y.GetValue(_mapper.Map<CivilWithLegsViewModel>(x), null) != null ? y.GetValue(_mapper.Map<CivilWithLegsViewModel>(x), null).ToString().ToLower().StartsWith(w.ToLower()) : false))))
                         ).Select(i => i.Id).ToList();
                    }

                    //
                    // Installation (Attribute Activated + Dynamic) Attributes...
                    //
                    if (AttrInstExist && DynamicInstExist)
                    {
                        WithoutDateFilterCivilWithLegsInstallation = InstallationAttributeActivated.Intersect(DynamicInstValueListIds).ToList();
                    }
                    else if (AttrInstExist)
                    {
                        WithoutDateFilterCivilWithLegsInstallation = InstallationAttributeActivated;
                    }
                    else if (DynamicInstExist)
                    {
                        WithoutDateFilterCivilWithLegsInstallation = DynamicInstValueListIds;
                    }
                }

                if (DateFilter != null ? DateFilter.Count() > 0 : false)
                {
                    List<TLIdynamicAtt> DateTimeInstDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                        AfterConvertDateFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                        !x.LibraryAtt && !x.disable &&
                        x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcivilWithLegs.ToString()
                            , x => x.tablesNames, x => x.DataType).ToList();

                    List<int> DynamicInstValueListIds = new List<int>();
                    bool DynamicInstExist = false;

                    if (DateTimeInstDynamicAttListIds.Count > 0)
                    {
                        DynamicInstExist = true;
                        List<DateFilterViewModel> DynamicInstAttributeFilters = AfterConvertDateFilters.Where(x =>
                            DateTimeInstDynamicAttListIds.Exists(y => y.Key.ToLower() == x.key.ToLower())).ToList();

                        DynamicInstValueListIds = new List<int>();

                        List<TLIdynamicAttInstValue> DynamicInstValueListObjects = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                            DateTimeInstDynamicAttListIds.Exists(y => y.Id == x.DynamicAttId) && !x.disable).ToList();

                        List<int> InventoriesIds = DynamicInstValueListObjects.Select(x => x.InventoryId).Distinct().ToList();

                        foreach (int InventoryId in InventoriesIds)
                        {
                            List<TLIdynamicAttInstValue> DynamicInstValueListInventories = DynamicInstValueListObjects.Where(x =>
                                x.InventoryId == InventoryId).ToList();

                            if (DynamicInstAttributeFilters.All(y => DynamicInstValueListInventories.Exists(x =>
                                (x.ValueDateTime != null ?
                                    (x.ValueDateTime >= y.DateFrom && x.ValueDateTime <= y.DateTo) : (false)))))
                            {
                                DynamicInstValueListIds.Add(InventoryId);
                            }
                        }
                    }

                    //
                    // Installation Attribute Activated...
                    //
                    List<PropertyInfo> InstallationProps = typeof(CivilWithLegsViewModel).GetProperties().Where(x =>
                        AfterConvertDateFilters.Exists(y =>
                            y.key.ToLower() == x.Name.ToLower())).ToList();

                    List<int> InstallationAttributeActivatedIds = new List<int>();
                    bool AttrInstExist = false;

                    if (InstallationProps != null)
                    {
                        AttrInstExist = true;

                        List<DateFilterViewModel> InstallationPropsAttributeFilters = AfterConvertDateFilters.Where(x =>
                            InstallationProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                        InstallationAttributeActivatedIds = _unitOfWork.CivilWithLegsRepository.GetWhere(x =>
                            InstallationPropsAttributeFilters.All(z =>
                                (InstallationProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && ((y.GetValue(_mapper.Map<CivilWithLegsViewModel>(x), null) != null) ?
                                    ((z.DateFrom <= Convert.ToDateTime(y.GetValue(_mapper.Map<CivilWithLegsViewModel>(x), null))) &&
                                     (z.DateTo >= Convert.ToDateTime(y.GetValue(_mapper.Map<CivilWithLegsViewModel>(x), null)))) : (false)))))
                        ).Select(i => i.Id).ToList();
                    }

                    //
                    // Installation (Attribute Activated + Dynamic) Attributes...
                    //
                    if (AttrInstExist && DynamicInstExist)
                    {
                        WithDateFilterCivilWithLegsInstallation = InstallationAttributeActivatedIds.Intersect(DynamicInstValueListIds).ToList();
                    }
                    else if (AttrInstExist)
                    {
                        WithDateFilterCivilWithLegsInstallation = InstallationAttributeActivatedIds;
                    }
                    else if (DynamicInstExist)
                    {
                        WithDateFilterCivilWithLegsInstallation = DynamicInstValueListIds;
                    }
                }

                if ((DateFilter != null ? DateFilter.Count() > 0 : false) ||
                    (AttributeFilters != null ? AttributeFilters.Count() > 0 : false))
                {
                    if ((AttributeFilters != null ? AttributeFilters.Count > 0 : false) &&
                        (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false))
                    {
                        CivilWithLegsIds = WithoutDateFilterCivilWithLegsInstallation.Intersect(WithDateFilterCivilWithLegsInstallation).ToList();
                    }
                    else if (AttributeFilters != null ? AttributeFilters.Count > 0 : false)
                    {
                        CivilWithLegsIds = WithoutDateFilterCivilWithLegsInstallation;
                    }
                    else if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                    {
                        CivilWithLegsIds = WithDateFilterCivilWithLegsInstallation;
                    }

                    return _unitOfWork.CivilSiteDateRepository.GetIncludeWhere(x => (
                        (x.SiteCode == BaseFilter.siteCode) &&
                        (!x.Dismantle) &&         
                        (x.allCivilInst.civilWithLegsId != null) &&
                        (x.allCivilInst.Draft == false) &&

                        CivilWithLegsIds.Contains(x.allCivilInst.civilWithLegsId.Value)
                    ), x => x.allCivilInst, x => x.allCivilInst.civilWithLegs, x => x.allCivilInst.civilWithLegs.BaseCivilWithLegType, x => x.allCivilInst.civilWithLegs.baseType,
                       x => x.allCivilInst.civilWithLegs.CivilWithLegsLib, x => x.allCivilInst.civilWithLegs.enforcmentCategory, x => x.allCivilInst.civilWithLegs.GuyLineType,
                       x => x.allCivilInst.civilWithLegs.locationType, x => x.allCivilInst.civilWithLegs.Owner, x => x.allCivilInst.civilWithLegs.SupportTypeImplemented).ToList();
                }

                return _unitOfWork.CivilSiteDateRepository.GetIncludeWhere(x => (
                    (x.SiteCode == BaseFilter.siteCode) &&
                    (!x.Dismantle) &&             
                    (x.allCivilInst.civilWithLegsId != null) &&
                    (x.allCivilInst.Draft == false)

                ), x => x.allCivilInst, x => x.allCivilInst.civilWithLegs, x => x.allCivilInst.civilWithLegs.BaseCivilWithLegType, x => x.allCivilInst.civilWithLegs.baseType,
                    x => x.allCivilInst.civilWithLegs.CivilWithLegsLib, x => x.allCivilInst.civilWithLegs.enforcmentCategory, x => x.allCivilInst.civilWithLegs.GuyLineType,
                    x => x.allCivilInst.civilWithLegs.locationType, x => x.allCivilInst.civilWithLegs.Owner, x => x.allCivilInst.civilWithLegs.SupportTypeImplemented).ToList();
            }
            else if (Kind == "CivilWithoutLegs")
            {
                List<int> CivilWithoutLegIds = new List<int>();
                List<int> WithoutDateFilterCivilWithoutLegInstallation = new List<int>();
                List<int> WithDateFilterCivilWithoutLegInstallation = new List<int>();

                if (AttributeFilters != null && AttributeFilters.Count > 0)
                {
                    //
                    // Installation Dynamic Attributes...
                    //
                    List<TLIdynamicAtt> InstDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                        AttributeFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                        !x.LibraryAtt && !x.disable &&
                        x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString()
                        , x => x.tablesNames, x => x.DataType).ToList();

                    List<int> DynamicInstValueListIds = new List<int>();
                    bool DynamicInstExist = false;
                    if (InstDynamicAttListIds.Count() > 0)
                    {
                        DynamicInstExist = true;
                        GetInventoriesIdsFromDynamicAttributes(out DynamicInstValueListIds, InstDynamicAttListIds, AttributeFilters);
                    }

                    //
                    // Installation Attribute Activated...
                    //
                    bool AttrInstExist = typeof(CivilWithoutLegViewModel).GetProperties().ToList().Exists(x =>
                        AttributeFilters.Exists(y =>
                            y.key.ToLower() == x.Name.ToLower() && y.key.ToLower() != "id"));

                    List<int> InstallationAttributeActivated = new List<int>();
                    if (AttrInstExist)
                    {
                        List<PropertyInfo> NotStringProps = typeof(CivilWithoutLegViewModel).GetProperties().Where(x =>
                            x.PropertyType.Name.ToLower() != "string" &&
                            AttributeFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower())).ToList();

                        List<PropertyInfo> StringProps = typeof(CivilWithoutLegViewModel).GetProperties().Where(x =>
                            x.PropertyType.Name.ToLower() == "string" &&
                            AttributeFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower())).ToList();

                        List<StringFilterObjectList> AttrInstAttributeFilters = AttributeFilters.Where(x =>
                            NotStringProps.Exists(y => y.Name.ToLower() == x.key.ToLower()) ||
                            StringProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                        InstallationAttributeActivated = _unitOfWork.CivilWithoutLegRepository.GetWhere(x =>
                             AttrInstAttributeFilters.All(z =>
                                NotStringProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (y.GetValue(_mapper.Map<CivilWithoutLegViewModel>(x), null) != null ? z.value.Contains(y.GetValue(_mapper.Map<CivilWithoutLegViewModel>(x), null).ToString().ToLower()) : false)) ||
                                StringProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (z.value.Any(w =>
                                     y.GetValue(_mapper.Map<CivilWithoutLegViewModel>(x), null) != null ? y.GetValue(_mapper.Map<CivilWithoutLegViewModel>(x), null).ToString().ToLower().StartsWith(w.ToLower()) : false))))
                         ).Select(i => i.Id).ToList();
                    }

                    //
                    // Installation (Attribute Activated + Dynamic) Attributes...
                    //
                    if (AttrInstExist && DynamicInstExist)
                    {
                        WithoutDateFilterCivilWithoutLegInstallation = InstallationAttributeActivated.Intersect(DynamicInstValueListIds).ToList();
                    }
                    else if (AttrInstExist)
                    {
                        WithoutDateFilterCivilWithoutLegInstallation = InstallationAttributeActivated;
                    }
                    else if (DynamicInstExist)
                    {
                        WithoutDateFilterCivilWithoutLegInstallation = DynamicInstValueListIds;
                    }
                }

                if (DateFilter != null ? DateFilter.Count() > 0 : false)
                {
                    List<TLIdynamicAtt> DateTimeInstDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                        AfterConvertDateFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                        !x.LibraryAtt && !x.disable &&
                        x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString()
                            , x => x.tablesNames, x => x.DataType).ToList();

                    List<int> DynamicInstValueListIds = new List<int>();
                    bool DynamicInstExist = false;

                    if (DateTimeInstDynamicAttListIds.Count > 0)
                    {
                        DynamicInstExist = true;
                        List<DateFilterViewModel> DynamicInstAttributeFilters = AfterConvertDateFilters.Where(x =>
                            DateTimeInstDynamicAttListIds.Exists(y => y.Key.ToLower() == x.key.ToLower())).ToList();

                        DynamicInstValueListIds = new List<int>();

                        List<TLIdynamicAttInstValue> DynamicInstValueListObjects = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                            DateTimeInstDynamicAttListIds.Exists(y => y.Id == x.DynamicAttId) && !x.disable).ToList();

                        List<int> InventoriesIds = DynamicInstValueListObjects.Select(x => x.InventoryId).Distinct().ToList();

                        foreach (int InventoryId in InventoriesIds)
                        {
                            List<TLIdynamicAttInstValue> DynamicInstValueListInventories = DynamicInstValueListObjects.Where(x =>
                                x.InventoryId == InventoryId).ToList();

                            if (DynamicInstAttributeFilters.All(y => DynamicInstValueListInventories.Exists(x =>
                                (x.ValueDateTime != null ?
                                    (x.ValueDateTime >= y.DateFrom && x.ValueDateTime <= y.DateTo) : (false)))))
                            {
                                DynamicInstValueListIds.Add(InventoryId);
                            }
                        }
                    }

                    //
                    // Installation Attribute Activated...
                    //
                    List<PropertyInfo> InstallationProps = typeof(CivilWithoutLegViewModel).GetProperties().Where(x =>
                        AfterConvertDateFilters.Exists(y =>
                            y.key.ToLower() == x.Name.ToLower())).ToList();

                    List<int> InstallationAttributeActivatedIds = new List<int>();
                    bool AttrInstExist = false;

                    if (InstallationProps != null)
                    {
                        AttrInstExist = true;

                        List<DateFilterViewModel> InstallationPropsAttributeFilters = AfterConvertDateFilters.Where(x =>
                            InstallationProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                        InstallationAttributeActivatedIds = _unitOfWork.CivilWithoutLegRepository.GetWhere(x =>
                            InstallationPropsAttributeFilters.All(z =>
                                (InstallationProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && ((y.GetValue(_mapper.Map<CivilWithoutLegViewModel>(x), null) != null) ?
                                    ((z.DateFrom <= Convert.ToDateTime(y.GetValue(_mapper.Map<CivilWithoutLegViewModel>(x), null))) &&
                                     (z.DateTo >= Convert.ToDateTime(y.GetValue(_mapper.Map<CivilWithoutLegViewModel>(x), null)))) : (false)))))
                        ).Select(i => i.Id).ToList();
                    }

                    //
                    // Installation (Attribute Activated + Dynamic) Attributes...
                    //
                    if (AttrInstExist && DynamicInstExist)
                    {
                        WithDateFilterCivilWithoutLegInstallation = InstallationAttributeActivatedIds.Intersect(DynamicInstValueListIds).ToList();
                    }
                    else if (AttrInstExist)
                    {
                        WithDateFilterCivilWithoutLegInstallation = InstallationAttributeActivatedIds;
                    }
                    else if (DynamicInstExist)
                    {
                        WithDateFilterCivilWithoutLegInstallation = DynamicInstValueListIds;
                    }
                }

                if ((DateFilter != null ? DateFilter.Count() > 0 : false) ||
                    (AttributeFilters != null ? AttributeFilters.Count() > 0 : false))
                {
                    if ((AttributeFilters != null ? AttributeFilters.Count > 0 : false) &&
                        (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false))
                    {
                        CivilWithoutLegIds = WithoutDateFilterCivilWithoutLegInstallation.Intersect(WithDateFilterCivilWithoutLegInstallation).ToList();
                    }
                    else if (AttributeFilters != null ? AttributeFilters.Count > 0 : false)
                    {
                        CivilWithoutLegIds = WithoutDateFilterCivilWithoutLegInstallation;
                    }
                    else if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                    {
                        CivilWithoutLegIds = WithDateFilterCivilWithoutLegInstallation;
                    }

                    return _unitOfWork.CivilSiteDateRepository.GetIncludeWhere(x => (
                        (x.SiteCode == BaseFilter.siteCode) &&
                        (!x.Dismantle) &&
                        (x.allCivilInst.civilWithoutLegId != null) &&
                        (x.allCivilInst.Draft == false) &&

                        CivilWithoutLegIds.Contains(x.allCivilInst.civilWithoutLegId.Value)
                    ), x => x.allCivilInst, x => x.allCivilInst.civilWithoutLeg, x => x.allCivilInst.civilWithoutLeg.CivilWithoutlegsLib,
                       x => x.allCivilInst.civilWithoutLeg.Owner, x => x.allCivilInst.civilWithoutLeg.subType).ToList();
                }

                return _unitOfWork.CivilSiteDateRepository.GetIncludeWhere(x => (
                    (x.allCivilInst.civilWithoutLeg.CivilWithoutlegsLib.CivilWithoutLegCategoryId == CategoryId) &&
                    (x.SiteCode == BaseFilter.siteCode) &&
                    (!x.Dismantle) &&
                    (x.allCivilInst.civilWithoutLegId != null) &&
                    (x.allCivilInst.Draft == false)

                ), x => x.allCivilInst, x => x.allCivilInst.civilWithoutLeg, x => x.allCivilInst.civilWithoutLeg.CivilWithoutlegsLib,
                    x => x.allCivilInst.civilWithoutLeg.Owner, x => x.allCivilInst.civilWithoutLeg.subType).ToList();
            }
            else if (Kind == "CivilNonSteel")
            {
                List<int> CivilNonSteelIds = new List<int>();
                List<int> WithoutDateFilterCivilNonSteelInstallation = new List<int>();
                List<int> WithDateFilterCivilNonSteelInstallation = new List<int>();

                if (AttributeFilters != null && AttributeFilters.Count > 0)
                {
                    //
                    // Installation Dynamic Attributes...
                    //
                    List<TLIdynamicAtt> InstDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                        AttributeFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                        !x.LibraryAtt && !x.disable &&
                        x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcivilNonSteel.ToString()
                            , x => x.tablesNames, x => x.DataType).ToList();

                    List<int> DynamicInstValueListIds = new List<int>();
                    bool DynamicInstExist = false;
                    if (InstDynamicAttListIds.Count() > 0)
                    {
                        DynamicInstExist = true;
                        GetInventoriesIdsFromDynamicAttributes(out DynamicInstValueListIds, InstDynamicAttListIds, AttributeFilters);
                    }

                    //
                    // Installation Attribute Activated...
                    //
                    bool AttrInstExist = typeof(CivilNonSteelViewModel).GetProperties().ToList().Exists(x =>
                        AttributeFilters.Exists(y =>
                            y.key.ToLower() == x.Name.ToLower() && y.key.ToLower() != "id"));

                    List<int> InstallationAttributeActivated = new List<int>();
                    if (AttrInstExist)
                    {
                        List<PropertyInfo> NotStringProps = typeof(CivilNonSteelViewModel).GetProperties().Where(x =>
                            x.PropertyType.Name.ToLower() != "string" &&
                            AttributeFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower())).ToList();

                        List<PropertyInfo> StringProps = typeof(CivilNonSteelViewModel).GetProperties().Where(x =>
                            x.PropertyType.Name.ToLower() == "string" &&
                            AttributeFilters.Exists(y =>
                                y.key.ToLower() == x.Name.ToLower())).ToList();

                        List<StringFilterObjectList> AttrInstAttributeFilters = AttributeFilters.Where(x =>
                            NotStringProps.Exists(y => y.Name.ToLower() == x.key.ToLower()) ||
                            StringProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                        InstallationAttributeActivated = _unitOfWork.CivilNonSteelRepository.GetWhere(x =>
                             AttrInstAttributeFilters.All(z =>
                                NotStringProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (y.GetValue(_mapper.Map<CivilNonSteelViewModel>(x), null) != null ? z.value.Contains(y.GetValue(_mapper.Map<CivilNonSteelViewModel>(x), null).ToString().ToLower()) : false)) ||
                                StringProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && (z.value.Any(w =>
                                     y.GetValue(_mapper.Map<CivilNonSteelViewModel>(x), null) != null ? y.GetValue(_mapper.Map<CivilNonSteelViewModel>(x), null).ToString().ToLower().StartsWith(w.ToLower()) : false))))
                         ).Select(i => i.Id).ToList();
                    }

                    //
                    // Installation (Attribute Activated + Dynamic) Attributes...
                    //
                    if (AttrInstExist && DynamicInstExist)
                    {
                        WithoutDateFilterCivilNonSteelInstallation = InstallationAttributeActivated.Intersect(DynamicInstValueListIds).ToList();
                    }
                    else if (AttrInstExist)
                    {
                        WithoutDateFilterCivilNonSteelInstallation = InstallationAttributeActivated;
                    }
                    else if (DynamicInstExist)
                    {
                        WithoutDateFilterCivilNonSteelInstallation = DynamicInstValueListIds;
                    }
                }

                if (DateFilter != null ? DateFilter.Count() > 0 : false)
                {
                    List<TLIdynamicAtt> DateTimeInstDynamicAttListIds = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                        AfterConvertDateFilters.Exists(y => y.key.ToLower() == x.Key.ToLower()) &&
                        !x.LibraryAtt && !x.disable &&
                        x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcivilNonSteel.ToString()
                            , x => x.tablesNames, x => x.DataType).ToList();

                    List<int> DynamicInstValueListIds = new List<int>();
                    bool DynamicInstExist = false;

                    if (DateTimeInstDynamicAttListIds.Count > 0)
                    {
                        DynamicInstExist = true;
                        List<DateFilterViewModel> DynamicInstAttributeFilters = AfterConvertDateFilters.Where(x =>
                            DateTimeInstDynamicAttListIds.Exists(y => y.Key.ToLower() == x.key.ToLower())).ToList();

                        DynamicInstValueListIds = new List<int>();

                        List<TLIdynamicAttInstValue> DynamicInstValueListObjects = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                            DateTimeInstDynamicAttListIds.Exists(y => y.Id == x.DynamicAttId) && !x.disable).ToList();

                        List<int> InventoriesIds = DynamicInstValueListObjects.Select(x => x.InventoryId).Distinct().ToList();

                        foreach (int InventoryId in InventoriesIds)
                        {
                            List<TLIdynamicAttInstValue> DynamicInstValueListInventories = DynamicInstValueListObjects.Where(x =>
                                x.InventoryId == InventoryId).ToList();

                            if (DynamicInstAttributeFilters.All(y => DynamicInstValueListInventories.Exists(x =>
                                (x.ValueDateTime != null ?
                                    (x.ValueDateTime >= y.DateFrom && x.ValueDateTime <= y.DateTo) : (false)))))
                            {
                                DynamicInstValueListIds.Add(InventoryId);
                            }
                        }
                    }

                    //
                    // Installation Attribute Activated...
                    //
                    List<PropertyInfo> InstallationProps = typeof(CivilNonSteelViewModel).GetProperties().Where(x =>
                        AfterConvertDateFilters.Exists(y =>
                            y.key.ToLower() == x.Name.ToLower())).ToList();

                    List<int> InstallationAttributeActivatedIds = new List<int>();
                    bool AttrInstExist = false;

                    if (InstallationProps != null)
                    {
                        AttrInstExist = true;

                        List<DateFilterViewModel> InstallationPropsAttributeFilters = AfterConvertDateFilters.Where(x =>
                            InstallationProps.Exists(y => y.Name.ToLower() == x.key.ToLower())).ToList();

                        InstallationAttributeActivatedIds = _unitOfWork.CivilNonSteelRepository.GetWhere(x =>
                            InstallationPropsAttributeFilters.All(z =>
                                (InstallationProps.Exists(y => (z.key.ToLower() == y.Name.ToLower()) && ((y.GetValue(_mapper.Map<CivilNonSteelViewModel>(x), null) != null) ?
                                    ((z.DateFrom <= Convert.ToDateTime(y.GetValue(_mapper.Map<CivilNonSteelViewModel>(x), null))) &&
                                     (z.DateTo >= Convert.ToDateTime(y.GetValue(_mapper.Map<CivilNonSteelViewModel>(x), null)))) : (false)))))
                        ).Select(i => i.Id).ToList();
                    }

                    //
                    // Installation (Attribute Activated + Dynamic) Attributes...
                    //
                    if (AttrInstExist && DynamicInstExist)
                    {
                        WithDateFilterCivilNonSteelInstallation = InstallationAttributeActivatedIds.Intersect(DynamicInstValueListIds).ToList();
                    }
                    else if (AttrInstExist)
                    {
                        WithDateFilterCivilNonSteelInstallation = InstallationAttributeActivatedIds;
                    }
                    else if (DynamicInstExist)
                    {
                        WithDateFilterCivilNonSteelInstallation = DynamicInstValueListIds;
                    }
                }

                if ((DateFilter != null ? DateFilter.Count() > 0 : false) ||
                    (AttributeFilters != null ? AttributeFilters.Count() > 0 : false))
                {
                    if ((AttributeFilters != null ? AttributeFilters.Count > 0 : false) &&
                        (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false))
                    {
                        CivilNonSteelIds = WithoutDateFilterCivilNonSteelInstallation.Intersect(WithDateFilterCivilNonSteelInstallation).ToList();
                    }
                    else if (AttributeFilters != null ? AttributeFilters.Count > 0 : false)
                    {
                        CivilNonSteelIds = WithoutDateFilterCivilNonSteelInstallation;
                    }
                    else if (AfterConvertDateFilters != null ? AfterConvertDateFilters.Count() > 0 : false)
                    {
                        CivilNonSteelIds = WithDateFilterCivilNonSteelInstallation;
                    }

                    return _unitOfWork.CivilSiteDateRepository.GetIncludeWhere(x => (
                        (x.SiteCode == BaseFilter.siteCode) &&
                        (!x.Dismantle) &&                
                        (x.allCivilInst.civilNonSteelId != null) &&
                        (x.allCivilInst.Draft == false) &&

                        CivilNonSteelIds.Contains(x.allCivilInst.civilNonSteelId.Value)
                    ), x => x.allCivilInst, x => x.allCivilInst.civilNonSteel, x => x.allCivilInst.civilNonSteel.CivilNonsteelLibrary,
                       x => x.allCivilInst.civilNonSteel.locationType,
                       x => x.allCivilInst.civilNonSteel.owner, x => x.allCivilInst.civilNonSteel.supportTypeImplemented).ToList();
                }

                return _unitOfWork.CivilSiteDateRepository.GetIncludeWhere(x => (
                    (x.SiteCode == BaseFilter.siteCode) &&
                    (!x.Dismantle) &&
                    (x.allCivilInst.civilNonSteelId != null) &&
                    (x.allCivilInst.Draft == false)

                ), x => x.allCivilInst, x => x.allCivilInst.civilNonSteel, x => x.allCivilInst.civilNonSteel.CivilNonsteelLibrary,
                    x => x.allCivilInst.civilNonSteel.locationType,
                    x => x.allCivilInst.civilNonSteel.owner, x => x.allCivilInst.civilNonSteel.supportTypeImplemented).ToList();
            }

            return null;
        }
        public Response<ReturnWithFilters<object>> GetCivilWithoutLegWithEnableAtt(SiteFilter BaseFilter, bool WithFilterData, CombineFilters CombineFilters, ParameterPagination parameterPagination, int CategoryId)
        {
            try
            {
                int Count = 0;
                List<object> OutPutList = new List<object>();
                ReturnWithFilters<object> CivilTableDisplay = new ReturnWithFilters<object>();

                List<FilterObjectList> AttributeFilters = CombineFilters.filters;
                List<DateFilterViewModel> DateFilter = CombineFilters.DateFilter;

                //
                // Get All CivilSiteDateRecords To This BaseFilter
                //
                List<TLIcivilSiteDate> AllCivilSiteDateRecords = GetCivilSiteDateBySiteBaseFilter(BaseFilter, "CivilWithoutLegs", CombineFilters, CategoryId);

                List<TLIcivilSiteDate> CivilSiteDateRecords = GetMaxInstallationDates(out Count, AllCivilSiteDateRecords, "CivilWithoutLegs", parameterPagination);

                List<CivilWithoutLegViewModel> Civils = _mapper.Map<List<CivilWithoutLegViewModel>>(CivilSiteDateRecords.Select(x =>
                    x.allCivilInst.civilWithoutLeg).ToList());

                List<AttActivatedCategoryViewModel> AttributeActivatedCategories = _mapper.Map<List<AttActivatedCategoryViewModel>>(_unitOfWork.AttActivatedCategoryRepository.GetIncludeWhere(x =>
                    (x.civilWithoutLegCategoryId.Value == CategoryId) &&
                    (x.enable) &&
                    (x.attributeActivated != null ?
                        ((x.attributeActivated.enable && x.attributeActivated.Tabel == Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString()) ||
                        ((x.attributeActivated.Key.ToLower() == "id" || x.attributeActivated.Key.ToLower() == "active") && x.attributeActivated.Tabel == Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString())) : false)
                    , x => x.attributeActivated).ToList());

                string CategoryName = _unitOfWork.CivilWithoutLegCategoryRepository.GetByID(CategoryId).Name;
                string EditableMangmentCategoryViewName = "";
                if (CategoryName == "Mast")
                    EditableMangmentCategoryViewName = Helpers.Constants.EditableManamgmantViewNames.CivilWithoutLegInstallationMast.ToString();
                else if (CategoryName == "Capsule")
                    EditableMangmentCategoryViewName = Helpers.Constants.EditableManamgmantViewNames.CivilWithoutLegInstallationCapsule.ToString();
                else if (CategoryName == "Monopole")
                    EditableMangmentCategoryViewName = Helpers.Constants.EditableManamgmantViewNames.CivilWithoutLegInstallationMonopole.ToString();

                List<TLIattributeViewManagment> AllAttributes = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                   (x.Enable && x.EditableManagmentView.View == EditableMangmentCategoryViewName &&
                   (x.AttributeActivatedId != null ?
                        (x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString() && x.AttributeActivated.enable &&
                            AttributeActivatedCategories.Exists(y => y.attributeActivatedId == x.AttributeActivatedId)) :
                        (!x.DynamicAtt.LibraryAtt && !x.DynamicAtt.disable && x.DynamicAtt.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString()))) ||
                    (x.AttributeActivated != null ?
                        ((x.AttributeActivated.Key.ToLower() == "id" || x.AttributeActivated.Key.ToLower() == "active") && x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString()) : false),
                       x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1, x => x.EditableManagmentView.TLItablesNames2,
                       x => x.AttributeActivated, x => x.DynamicAtt, x => x.DynamicAtt.tablesNames, x => x.DynamicAtt.DataType).ToList();

                List<TLIattributeViewManagment> NotDateTimeInstallationAttributesViewModel = AllAttributes.Where(x =>
                    x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() != "datetime") : false).ToList();

                List<TLIattributeViewManagment> NotDateTimeDynamicInstallationAttributesViewModel = AllAttributes.Where(x =>
                    x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() != "datetime" : false).ToList();

                List<TLIattributeViewManagment> DateTimeInstallationAttributesViewModel = AllAttributes.Where(x =>
                    x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() == "datetime") : false).ToList();

                List<TLIattributeViewManagment> DateTimeDynamicInstallationAttributesViewModel = AllAttributes.Where(x =>
                    x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() == "datetime" : false).ToList();

                foreach (CivilWithoutLegViewModel CivilWithoutLegInstallationObject in Civils)
                {
                    dynamic DynamicCivilWithoutLegInstallation = new ExpandoObject();

                    //
                    // Installation Object ViewModel...
                    //
                    if (NotDateTimeInstallationAttributesViewModel != null ? NotDateTimeInstallationAttributesViewModel.Count > 0 : false)
                    {
                        List<PropertyInfo> InstallationProps = typeof(CivilWithoutLegViewModel).GetProperties().Where(x =>
                            x.PropertyType.GenericTypeArguments != null ?
                                (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() != "datetime" :
                                (x.PropertyType.Name.ToLower() != "datetime")) :
                            (x.PropertyType.Name.ToLower() != "datetime")).ToList();

                        foreach (PropertyInfo prop in InstallationProps)
                        {
                            if (prop.Name.ToLower().Contains("_name") &&
                                NotDateTimeInstallationAttributesViewModel.Exists(x =>
                                    x.AttributeActivated.Label.ToLower() == prop.Name.ToLower()))
                            {
                                object ForeignKeyNamePropObject = prop.GetValue(CivilWithoutLegInstallationObject, null);
                                ((IDictionary<String, Object>)DynamicCivilWithoutLegInstallation).Add(new KeyValuePair<string, object>(prop.Name, ForeignKeyNamePropObject));
                            }
                            else if (NotDateTimeInstallationAttributesViewModel.Exists(x =>
                                 x.AttributeActivated.Key.ToLower() == prop.Name.ToLower()) &&
                                !prop.Name.ToLower().Contains("_name") &&
                                (prop.Name.ToLower().Substring(Math.Max(0, prop.Name.Length - 2)) != "id" || prop.Name.ToLower() == "id"))
                            {
                                if (prop.Name.ToLower() != "id" && prop.Name.ToLower() != "active")
                                {
                                    TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                        x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString() &&
                                        x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                    if (LabelName != null)
                                    {
                                        object PropObject = prop.GetValue(CivilWithoutLegInstallationObject, null);
                                        ((IDictionary<String, Object>)DynamicCivilWithoutLegInstallation).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                    }
                                }
                                else
                                {
                                    object PropObject = prop.GetValue(CivilWithoutLegInstallationObject, null);
                                    ((IDictionary<String, Object>)DynamicCivilWithoutLegInstallation).Add(new KeyValuePair<string, object>(prop.Name, PropObject));
                                }
                            }
                        }
                    }

                    //
                    // Installation Dynamic Attributes... (Not DateTime DataType Attribute)
                    //
                    if (NotDateTimeDynamicInstallationAttributesViewModel != null ? NotDateTimeDynamicInstallationAttributesViewModel.Count > 0 : false)
                    {
                        List<TLIdynamicAtt> NotDateTimeInstallationDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString() &&
                            !x.LibraryAtt && x.DataType.Name.ToLower() != "datetime" &&
                            NotDateTimeDynamicInstallationAttributesViewModel.Exists(y => y.DynamicAttId == x.Id)
                                , x => x.tablesNames, x => x.DataType).ToList();

                        List<TLIdynamicAttInstValue> NotDateTimeDynamicAttInstValues = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                            !x.DynamicAtt.LibraryAtt && !x.disable &&
                            x.InventoryId == CivilWithoutLegInstallationObject.Id &&
                            NotDateTimeInstallationDynamicAttributes.Exists(y => y.Key.ToLower() == x.DynamicAtt.Key.ToLower()) &&
                            x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString()
                                , x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                        foreach (TLIdynamicAtt InstallationDynamicAtt in NotDateTimeInstallationDynamicAttributes)
                        {
                            TLIdynamicAttInstValue DynamicAttInstValue = NotDateTimeDynamicAttInstValues.FirstOrDefault(x =>
                                x.DynamicAtt.Key.ToLower() == InstallationDynamicAtt.Key.ToLower());

                            if (DynamicAttInstValue != null)
                            {
                                dynamic DynamicAttValue = new ExpandoObject();
                                if (DynamicAttInstValue.ValueString != null)
                                    DynamicAttValue = DynamicAttInstValue.ValueString;

                                else if (DynamicAttInstValue.ValueDouble != null)
                                    DynamicAttValue = DynamicAttInstValue.ValueDouble;

                                else if (DynamicAttInstValue.ValueDateTime != null)
                                    DynamicAttValue = DynamicAttInstValue.ValueDateTime;

                                else if (DynamicAttInstValue.ValueBoolean != null)
                                    DynamicAttValue = DynamicAttInstValue.ValueBoolean;

                                ((IDictionary<String, Object>)DynamicCivilWithoutLegInstallation).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, DynamicAttValue));
                            }
                            else
                            {
                                ((IDictionary<String, Object>)DynamicCivilWithoutLegInstallation).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, null));
                            }
                        }
                    }

                    //
                    // Installation Object ViewModel... (DateTime DataType Attribute)
                    //
                    dynamic DateTimeAttributes = new ExpandoObject();
                    if (DateTimeInstallationAttributesViewModel != null ? DateTimeInstallationAttributesViewModel.Count() > 0 : false)
                    {
                        List<PropertyInfo> DateTimeInstallationProps = typeof(CivilWithoutLegViewModel).GetProperties().Where(x =>
                            x.PropertyType.GenericTypeArguments != null ?
                                (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name == "datetime" :
                                (x.PropertyType.Name.ToLower() == "datetime")) :
                            (x.PropertyType.Name.ToLower() == "datetime")).ToList();

                        foreach (PropertyInfo prop in DateTimeInstallationProps)
                        {
                            TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString() &&
                                x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                            if (LabelName != null)
                            {
                                object PropObject = prop.GetValue(CivilWithoutLegInstallationObject, null);
                                ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                            }
                        }
                    }

                    //
                    // Installation Dynamic Attributes... (DateTime DataType Attribute)
                    //
                    if (DateTimeDynamicInstallationAttributesViewModel != null ? DateTimeDynamicInstallationAttributesViewModel.Count() > 0 : false)
                    {
                        List<TLIdynamicAtt> DateTimeInstallationDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                           !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString() &&
                           !x.LibraryAtt && x.DataType.Name.ToLower() == "datetime" &&
                            DateTimeDynamicInstallationAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames).ToList();

                        List<TLIdynamicAttInstValue> DateTimeDynamicAttInstValues = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                            x.InventoryId == CivilWithoutLegInstallationObject.Id && !x.disable &&
                           !x.DynamicAtt.LibraryAtt &&
                            DateTimeInstallationDynamicAttributes.Exists(y => y.Key.ToLower() == x.DynamicAtt.Key.ToLower()) &&
                            x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString()
                               , x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                        foreach (TLIdynamicAtt InstallationDynamicAtt in DateTimeInstallationDynamicAttributes)
                        {
                            TLIdynamicAttInstValue DynamicAttInstallationValue = DateTimeDynamicAttInstValues.FirstOrDefault(x =>
                                x.DynamicAtt.Key.ToLower() == InstallationDynamicAtt.Key.ToLower());

                            if (DynamicAttInstallationValue != null)
                            {
                                dynamic DynamicAttValue = new ExpandoObject();
                                if (DynamicAttInstallationValue.ValueDateTime != null)
                                    DynamicAttValue = DynamicAttInstallationValue.ValueDateTime;

                                ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, DynamicAttValue));
                            }
                            else
                            {
                                ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, null));
                            }
                        }
                    }

                    ((IDictionary<String, Object>)DynamicCivilWithoutLegInstallation).Add(new KeyValuePair<string, object>("DateTimeAttributes", DateTimeAttributes));

                    OutPutList.Add(DynamicCivilWithoutLegInstallation);
                }

                CivilTableDisplay.Model = OutPutList;

                if (WithFilterData == true)
                {
                    CivilTableDisplay.filters = _unitOfWork.CivilWithoutLegRepository.GetRelatedTables();
                }
                else
                {
                    CivilTableDisplay.filters = null;
                }

                return new Response<ReturnWithFilters<object>>(true, CivilTableDisplay, null, null, (int)Helpers.Constants.ApiReturnCode.success, Count);
            }
            catch (Exception err)
            {
                return new Response<ReturnWithFilters<object>>(true, null, null, err.Message, (int)Helpers.Constants.ApiReturnCode.fail);
            }
        }
        public Response<ReturnWithFilters<object>> GetCivilNonSteelWithEnableAtt(SiteFilter BaseFilter, bool WithFilterData, CombineFilters CombineFilters, ParameterPagination parameterPagination)
        {
            try
            {
                int Count = 0;
                List<object> OutPutList = new List<object>();
                ReturnWithFilters<object> CivilTableDisplay = new ReturnWithFilters<object>();

                List<FilterObjectList> AttributeFilters = CombineFilters.filters;
                List<DateFilterViewModel> DateFilter = CombineFilters.DateFilter;

                //
                // Get All CivilSiteDateRecords To This BaseFilter
                //
                List<TLIcivilSiteDate> AllCivilSiteDateRecords = GetCivilSiteDateBySiteBaseFilter(BaseFilter, "CivilNonSteel", CombineFilters, null);

                List<TLIcivilSiteDate> CivilSiteDateRecords = GetMaxInstallationDates(out Count, AllCivilSiteDateRecords, "CivilNonSteel", parameterPagination);

                List<CivilNonSteelViewModel> Civils = _mapper.Map<List<CivilNonSteelViewModel>>(CivilSiteDateRecords.Select(x =>
                    x.allCivilInst.civilNonSteel).ToList());

                List<TLIattributeViewManagment> AllAttributes = _unitOfWork.AttributeViewManagmentRepository.GetIncludeWhere(x =>
                   (x.Enable && x.EditableManagmentView.View == Helpers.Constants.EditableManamgmantViewNames.CivilNonSteelInstallation.ToString() &&
                   (x.AttributeActivatedId != null ?
                        (x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIcivilNonSteel.ToString() && x.AttributeActivated.enable) :
                        (!x.DynamicAtt.LibraryAtt && !x.DynamicAtt.disable && x.DynamicAtt.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcivilNonSteel.ToString()))) ||
                    (x.AttributeActivated != null ?
                        ((x.AttributeActivated.Key.ToLower() == "id" || x.AttributeActivated.Key.ToLower() == "active") && x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIcivilNonSteel.ToString()) : false),
                       x => x.EditableManagmentView, x => x.EditableManagmentView.TLItablesNames1, x => x.EditableManagmentView.TLItablesNames2,
                       x => x.AttributeActivated, x => x.DynamicAtt, x => x.DynamicAtt.tablesNames, x => x.DynamicAtt.DataType).ToList();

                List<TLIattributeViewManagment> NotDateTimeInstallationAttributesViewModel = AllAttributes.Where(x =>
                    x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() != "datetime") : false).ToList();

                List<TLIattributeViewManagment> NotDateTimeDynamicInstallationAttributesViewModel = AllAttributes.Where(x =>
                    x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() != "datetime" : false).ToList();

                List<TLIattributeViewManagment> DateTimeInstallationAttributesViewModel = AllAttributes.Where(x =>
                    x.AttributeActivatedId != null ? (x.AttributeActivated.Key.ToLower() != "deleted" && x.AttributeActivated.DataType.ToLower() == "datetime") : false).ToList();

                List<TLIattributeViewManagment> DateTimeDynamicInstallationAttributesViewModel = AllAttributes.Where(x =>
                    x.DynamicAttId != null ? x.DynamicAtt.DataType.Name.ToLower() == "datetime" : false).ToList();

                foreach (CivilNonSteelViewModel CivilNonSteelInstallationObject in Civils)
                {
                    dynamic DynamicCivilNonSteelInstallation = new ExpandoObject();

                    //
                    // Installation Object ViewModel...
                    //
                    if (NotDateTimeInstallationAttributesViewModel != null ? NotDateTimeInstallationAttributesViewModel.Count > 0 : false)
                    {
                        List<PropertyInfo> InstallationProps = typeof(CivilNonSteelViewModel).GetProperties().Where(x =>
                            x.PropertyType.GenericTypeArguments != null ?
                                (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name.ToLower() != "datetime" :
                                (x.PropertyType.Name.ToLower() != "datetime")) :
                            (x.PropertyType.Name.ToLower() != "datetime")).ToList();

                        foreach (PropertyInfo prop in InstallationProps)
                        {
                            if (prop.Name.ToLower().Contains("_name") &&
                                NotDateTimeInstallationAttributesViewModel.Exists(x =>
                                    x.AttributeActivated.Label.ToLower() == prop.Name.ToLower()))
                            {
                                object ForeignKeyNamePropObject = prop.GetValue(CivilNonSteelInstallationObject, null);
                                ((IDictionary<String, Object>)DynamicCivilNonSteelInstallation).Add(new KeyValuePair<string, object>(prop.Name, ForeignKeyNamePropObject));
                            }
                            else if (NotDateTimeInstallationAttributesViewModel.Exists(x =>
                                 x.AttributeActivated.Key.ToLower() == prop.Name.ToLower()) &&
                                !prop.Name.ToLower().Contains("_name") &&
                                (prop.Name.ToLower().Substring(Math.Max(0, prop.Name.Length - 2)) != "id" || prop.Name.ToLower() == "id"))
                            {
                                if (prop.Name.ToLower() != "id" && prop.Name.ToLower() != "active")
                                {
                                    TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                        x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIcivilNonSteel.ToString() &&
                                        x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                                    if (LabelName != null)
                                    {
                                        object PropObject = prop.GetValue(CivilNonSteelInstallationObject, null);
                                        ((IDictionary<String, Object>)DynamicCivilNonSteelInstallation).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                                    }
                                }
                                else
                                {
                                    object PropObject = prop.GetValue(CivilNonSteelInstallationObject, null);
                                    ((IDictionary<String, Object>)DynamicCivilNonSteelInstallation).Add(new KeyValuePair<string, object>(prop.Name, PropObject));
                                }
                            }
                        }
                    }

                    //
                    // Installation Dynamic Attributes... (Not DateTime DataType Attribute)
                    //
                    if (NotDateTimeDynamicInstallationAttributesViewModel != null ? NotDateTimeDynamicInstallationAttributesViewModel.Count > 0 : false)
                    {
                        List<TLIdynamicAtt> NotDateTimeInstallationDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                            !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcivilNonSteel.ToString() &&
                            !x.LibraryAtt && x.DataType.Name.ToLower() != "datetime" &&
                            NotDateTimeDynamicInstallationAttributesViewModel.Exists(y => y.DynamicAttId == x.Id)
                                , x => x.tablesNames, x => x.DataType).ToList();

                        List<TLIdynamicAttInstValue> NotDateTimeDynamicAttInstValues = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                            !x.DynamicAtt.LibraryAtt && !x.disable &&
                            x.InventoryId == CivilNonSteelInstallationObject.Id &&
                            NotDateTimeInstallationDynamicAttributes.Exists(y => y.Key.ToLower() == x.DynamicAtt.Key.ToLower()) &&
                            x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcivilNonSteel.ToString()
                                , x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                        foreach (TLIdynamicAtt InstallationDynamicAtt in NotDateTimeInstallationDynamicAttributes)
                        {
                            TLIdynamicAttInstValue DynamicAttInstValue = NotDateTimeDynamicAttInstValues.FirstOrDefault(x =>
                                x.DynamicAtt.Key.ToLower() == InstallationDynamicAtt.Key.ToLower());

                            if (DynamicAttInstValue != null)
                            {
                                dynamic DynamicAttValue = new ExpandoObject();
                                if (DynamicAttInstValue.ValueString != null)
                                    DynamicAttValue = DynamicAttInstValue.ValueString;

                                else if (DynamicAttInstValue.ValueDouble != null)
                                    DynamicAttValue = DynamicAttInstValue.ValueDouble;

                                else if (DynamicAttInstValue.ValueDateTime != null)
                                    DynamicAttValue = DynamicAttInstValue.ValueDateTime;

                                else if (DynamicAttInstValue.ValueBoolean != null)
                                    DynamicAttValue = DynamicAttInstValue.ValueBoolean;

                                ((IDictionary<String, Object>)DynamicCivilNonSteelInstallation).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, DynamicAttValue));
                            }
                            else
                            {
                                ((IDictionary<String, Object>)DynamicCivilNonSteelInstallation).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, null));
                            }
                        }
                    }

                    //
                    // Installation Object ViewModel... (DateTime DataType Attribute)
                    //
                    dynamic DateTimeAttributes = new ExpandoObject();
                    if (DateTimeInstallationAttributesViewModel != null ? DateTimeInstallationAttributesViewModel.Count() > 0 : false)
                    {
                        List<PropertyInfo> DateTimeInstallationProps = typeof(CivilNonSteelViewModel).GetProperties().Where(x =>
                            x.PropertyType.GenericTypeArguments != null ?
                                (x.PropertyType.GenericTypeArguments.Count() > 0 ? x.PropertyType.GenericTypeArguments.FirstOrDefault().Name == "datetime" :
                                (x.PropertyType.Name.ToLower() == "datetime")) :
                            (x.PropertyType.Name.ToLower() == "datetime")).ToList();

                        foreach (PropertyInfo prop in DateTimeInstallationProps)
                        {
                            TLIattributeViewManagment LabelName = AllAttributes.FirstOrDefault(x => ((x.AttributeActivated != null) ? x.AttributeActivated.Key == prop.Name : false) &&
                                x.AttributeActivated.Tabel == Helpers.Constants.TablesNames.TLIcivilNonSteel.ToString() &&
                                x.Enable && x.AttributeActivated.DataType != "List" && x.Id != 0);

                            if (LabelName != null)
                            {
                                object PropObject = prop.GetValue(CivilNonSteelInstallationObject, null);
                                ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(LabelName.AttributeActivated.Label, PropObject));
                            }
                        }
                    }

                    //
                    // Library Dynamic Attributes... (DateTime DataType Attribute)
                    // 
                    if (DateTimeDynamicInstallationAttributesViewModel != null ? DateTimeDynamicInstallationAttributesViewModel.Count() > 0 : false)
                    {
                        List<TLIdynamicAtt> DateTimeInstallationDynamicAttributes = _unitOfWork.DynamicAttRepository.GetIncludeWhere(x =>
                           !x.disable && x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcivilNonSteel.ToString() &&
                           !x.LibraryAtt && x.DataType.Name.ToLower() == "datetime" &&
                            DateTimeDynamicInstallationAttributesViewModel.Exists(y => y.DynamicAttId == x.Id), x => x.tablesNames).ToList();

                        List<TLIdynamicAttInstValue> DateTimeDynamicAttInstValues = _unitOfWork.DynamicAttInstValueRepository.GetIncludeWhere(x =>
                            x.InventoryId == CivilNonSteelInstallationObject.Id && !x.disable &&
                           !x.DynamicAtt.LibraryAtt &&
                            DateTimeInstallationDynamicAttributes.Exists(y => y.Key.ToLower() == x.DynamicAtt.Key.ToLower()) &&
                            x.tablesNames.TableName == Helpers.Constants.TablesNames.TLIcivilNonSteel.ToString()
                               , x => x.DynamicAtt, x => x.tablesNames, x => x.DynamicAtt.DataType).ToList();

                        foreach (TLIdynamicAtt InstallationDynamicAtt in DateTimeInstallationDynamicAttributes)
                        {
                            TLIdynamicAttInstValue DynamicAttInstallationValue = DateTimeDynamicAttInstValues.FirstOrDefault(x =>
                                x.DynamicAtt.Key.ToLower() == InstallationDynamicAtt.Key.ToLower());

                            if (DynamicAttInstallationValue != null)
                            {
                                dynamic DynamicAttValue = new ExpandoObject();
                                if (DynamicAttInstallationValue.ValueDateTime != null)
                                    DynamicAttValue = DynamicAttInstallationValue.ValueDateTime;

                                ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, DynamicAttValue));
                            }
                            else
                            {
                                ((IDictionary<String, Object>)DateTimeAttributes).Add(new KeyValuePair<string, object>(InstallationDynamicAtt.Key, null));
                            }
                        }
                    }

                    ((IDictionary<String, Object>)DynamicCivilNonSteelInstallation).Add(new KeyValuePair<string, object>("DateTimeAttributes", DateTimeAttributes));

                    OutPutList.Add(DynamicCivilNonSteelInstallation);
                }

                CivilTableDisplay.Model = OutPutList;

                if (WithFilterData == true)
                {
                    CivilTableDisplay.filters = _unitOfWork.CivilNonSteelRepository.GetRelatedTables();
                }
                else
                {
                    CivilTableDisplay.filters = null;
                }

                return new Response<ReturnWithFilters<object>>(true, CivilTableDisplay, null, null, (int)Helpers.Constants.ApiReturnCode.success, Count);
            }
            catch (Exception err)
            {
                return new Response<ReturnWithFilters<object>>(true, null, null, err.Message, (int)Helpers.Constants.ApiReturnCode.fail);
            }
        }
        public Response<List<BassAttViewModel>> GetConfigurationAttributes(string TableName, bool IsDynamic,int CategoryId)
        {
            try
            {
                var TableId = _unitOfWork.TablesNamesRepository.GetWhereFirst(x => x.TableName == TableName);
                List<BassAttViewModel> baseAttViews = new List<BassAttViewModel>();
                if (IsDynamic == false)
                {
                    if(TableName == "TLIcivilWithoutLegLibrary" && CategoryId == null)
                    {
                        return new Response<List<BassAttViewModel>>(false, null, null, "Must Input CategoryId", (int)Helpers.Constants.ApiReturnCode.fail);
                    }
                    if (TableName == "TLIcivilWithoutLeg" && CategoryId == null)
                    {
                        return new Response<List<BassAttViewModel>>(false, null, null, "Must Input CategoryId", (int)Helpers.Constants.ApiReturnCode.fail);
                    }
                    if (TableName == "TLIcivilWithoutLegLibrary" || TableName == "TLIcivilWithoutLeg" && CategoryId != null)
                    {
                        var attactivatedcategory = _unitOfWork.AttActivatedCategoryRepository.GetWhere(x => x.civilWithoutLegCategoryId == CategoryId).Select(x=>x.attributeActivatedId).ToList();
                        foreach (var item in attactivatedcategory)
                        {
                            var tLIattributeActivated = _unitOfWork.AttributeActivatedRepository.GetWhereFirst(x => x.Id == item&&x.Tabel== TableName && x.Key != "Id" && x.Key != "Active" && x.Key != "Deleted");
                            if (tLIattributeActivated != null)
                            {
                                baseAttViews.Add(new BassAttViewModel()
                                {
                                    Key = tLIattributeActivated.Key,
                                    Label = tLIattributeActivated.Label,
                                    Desc = tLIattributeActivated.Description,
                                    Required = tLIattributeActivated.Required,
                                    Manage = tLIattributeActivated.Manage,
                                    enable = tLIattributeActivated.enable,
                                    AutoFill = tLIattributeActivated.AutoFill,
                                    DataType = tLIattributeActivated.DataType
                                });
                            }
                        }
                        return new Response<List<BassAttViewModel>>(true, baseAttViews, null, null, (int)Helpers.Constants.ApiReturnCode.success, baseAttViews.Count);

                    }
                    else 
                    {
                        var attactivated = _unitOfWork.AttributeActivatedRepository.GetWhere(x => x.Tabel == TableName&& x.Key != "Id" && x.Key != "Active" && x.Key != "Deleted").ToList();
                        foreach (var item in attactivated)
                        {
                            baseAttViews.Add(new BassAttViewModel()
                            {
                                Key = item.Key,
                                Label = item.Label,
                                Desc = item.Description,
                                Required = item.Required,
                                Manage = item.Manage,
                                enable = item.enable,
                                AutoFill = item.AutoFill,
                                DataType = item.DataType
                            });
                        }
                        return new Response<List<BassAttViewModel>>(true, baseAttViews, null, null, (int)Helpers.Constants.ApiReturnCode.success, baseAttViews.Count);
                    }
                }
                else if (IsDynamic == true)
                {
                    if (CategoryId != 0)
                    {
                        var dynamicAtt = _unitOfWork.DynamicAttRepository.GetWhereAndInclude(x => x.tablesNamesId == TableId.Id && x.CivilWithoutLegCategoryId == CategoryId, x => x.DataType).ToList();
                        foreach (var item in dynamicAtt)
                        {
                            baseAttViews.Add(new BassAttViewModel()
                            {
                                Key = item.Key,
                                Desc = item.Description,
                                Required = item.Required,
                                enable = !item.disable,
                                DataType = item.DataType.Name,
                                DefaultValue = item.DefaultValue
                            });
                        }
                        return new Response<List<BassAttViewModel>>(true, baseAttViews, null, null, (int)Helpers.Constants.ApiReturnCode.success, baseAttViews.Count);


                    }

                    else
                    {
                        var dynamicAtt = _unitOfWork.DynamicAttRepository.GetWhereAndInclude(x => x.tablesNamesId == TableId.Id, x => x.DataType).ToList();
                        foreach (var item in dynamicAtt)
                        {
                            baseAttViews.Add(new BassAttViewModel()
                            {
                                Key = item.Key,
                                Desc = item.Description,
                                Required = item.Required,
                                enable = !item.disable,
                                DataType = item.DataType.Name,
                                DefaultValue = item.DefaultValue
                            });
                        }
                        return new Response<List<BassAttViewModel>>(true, baseAttViews, null, null, (int)Helpers.Constants.ApiReturnCode.success, baseAttViews.Count);

                    }
                }
                return new Response<List<BassAttViewModel>>(true, null, null, null, (int)Helpers.Constants.ApiReturnCode.success);

            }
            catch (Exception err)
            {

                return new Response<List<BassAttViewModel>>(false, null, null, err.Message, (int)Helpers.Constants.ApiReturnCode.fail);
            }



        }
        public List<int> GetInstallationRecordsIds(string TableName)
        {
            try
            {
                List<int> Records = new List<int>();

                // Civils ...
                if (TableName.ToLower() == TablesNames.TLIcivilWithLegs.ToString().ToLower())
                {
                    Records = _unitOfWork.CivilWithLegsRepository.GetWhere(x =>
                        x.Id > 0).Select(x => x.Id).ToList();
                }
                else if (TableName.ToLower() == TablesNames.TLIcivilWithoutLeg.ToString().ToLower())
                {
                    Records = _unitOfWork.CivilWithoutLegRepository.GetWhere(x =>
                        x.Id > 0).Select(x => x.Id).ToList();
                }
                else if (TableName.ToLower() == TablesNames.TLIcivilNonSteel.ToString().ToLower())
                {
                    Records = _unitOfWork.CivilNonSteelRepository.GetWhere(x =>
                        x.Id > 0).Select(x => x.Id).ToList();
                }

                // Microwaves ...
                else if (TableName.ToLower() == TablesNames.TLImwBU.ToString().ToLower())
                {
                    Records = _unitOfWork.MW_BURepository.GetWhere(x =>
                        x.Id > 0).Select(x => x.Id).ToList();
                }
                else if (TableName.ToLower() == TablesNames.TLImwDish.ToString().ToLower())
                {
                    Records = _unitOfWork.MW_DishRepository.GetWhere(x =>
                        x.Id > 0).Select(x => x.Id).ToList();
                }
                else if (TableName.ToLower() == TablesNames.TLImwODU.ToString().ToLower())
                {
                    Records = _unitOfWork.MW_ODURepository.GetWhere(x =>
                        x.Id > 0).Select(x => x.Id).ToList();
                }
                else if (TableName.ToLower() == TablesNames.TLImwOther.ToString().ToLower())
                {
                    Records = _unitOfWork.Mw_OtherRepository.GetWhere(x =>
                        x.Id > 0).Select(x => x.Id).ToList();
                }
                else if (TableName.ToLower() == TablesNames.TLImwRFU.ToString().ToLower())
                {
                    Records = _unitOfWork.MW_RFURepository.GetWhere(x =>
                        x.Id > 0).Select(x => x.Id).ToList();
                }

                // Load Other ...
                else if (TableName.ToLower() == TablesNames.TLIloadOther.ToString().ToLower())
                {
                    Records = _unitOfWork.LoadOtherRepository.GetWhere(x =>
                        x.Id > 0).Select(x => x.Id).ToList();
                }

                // Power ...
                else if (TableName.ToLower() == TablesNames.TLIpower.ToString().ToLower())
                {
                    Records = _unitOfWork.PowerRepository.GetWhere(x =>
                        x.Id > 0).Select(x => x.Id).ToList();
                }

                // Radio ...
                else if (TableName.ToLower() == TablesNames.TLIradioAntenna.ToString().ToLower())
                {
                    Records = _unitOfWork.RadioAntennaRepository.GetWhere(x =>
                        x.Id > 0).Select(x => x.Id).ToList();
                }
                else if (TableName.ToLower() == TablesNames.TLIradioOther.ToString().ToLower())
                {
                    Records = _unitOfWork.RadioOtherRepository.GetWhere(x =>
                        x.Id > 0).Select(x => x.Id).ToList();
                }
                else if (TableName.ToLower() == TablesNames.TLIradioRRU.ToString().ToLower())
                {
                    Records = _unitOfWork.RadioRRURepository.GetWhere(x =>
                        x.Id > 0).Select(x => x.Id).ToList();
                }

                // Side Arm ...
                else if (TableName.ToLower() == TablesNames.TLIsideArm.ToString().ToLower())
                {
                    Records = _unitOfWork.SideArmRepository.GetWhere(x =>
                        x.Id > 0).Select(x => x.Id).ToList();
                }

                // Other Inventories ...
                else if (TableName.ToLower() == TablesNames.TLIcabinet.ToString().ToLower())
                {
                    Records = _unitOfWork.CabinetRepository.GetWhere(x =>
                        x.Id > 0).Select(x => x.Id).ToList();
                }
                else if (TableName.ToLower() == TablesNames.TLIsolar.ToString().ToLower())
                {
                    Records = _unitOfWork.SolarRepository.GetWhere(x =>
                        x.Id > 0).Select(x => x.Id).ToList();
                }
                else if (TableName.ToLower() == TablesNames.TLIgenerator.ToString().ToLower())
                {
                    Records = _unitOfWork.GeneratorRepository.GetWhere(x =>
                        x.Id > 0).Select(x => x.Id).ToList();
                }

                return Records;
            }
            catch (Exception)
            {
                throw;
            }
        }
        public List<int> GetLibraryRecordsIds(string TableName)
        {
            try
            {
                List<int> Records = new List<int>();

                // Civils ...
                if (TableName.ToLower() == TablesNames.TLIcivilWithLegLibrary.ToString().ToLower())
                {
                    Records = _unitOfWork.CivilWithLegLibraryRepository.GetWhere(x =>
                        x.Id > 0 && !x.Deleted).Select(x => x.Id).ToList();
                }
                else if (TableName.ToLower() == TablesNames.TLIcivilWithoutLegLibrary.ToString().ToLower())
                {
                    Records = _unitOfWork.CivilWithoutLegLibraryRepository.GetWhere(x =>
                        x.Id > 0 && !x.Deleted).Select(x => x.Id).ToList();
                }
                else if (TableName.ToLower() == TablesNames.TLIcivilNonSteelLibrary.ToString().ToLower())
                {
                    Records = _unitOfWork.CivilNonSteelLibraryRepository.GetWhere(x =>
                        x.Id > 0 && !x.Deleted).Select(x => x.Id).ToList();
                }

                // Microwaves ...
                else if (TableName.ToLower() == TablesNames.TLImwBULibrary.ToString().ToLower())
                {
                    Records = _unitOfWork.MW_BULibraryRepository.GetWhere(x =>
                        x.Id > 0 && !x.Deleted).Select(x => x.Id).ToList();
                }
                else if (TableName.ToLower() == TablesNames.TLImwDishLibrary.ToString().ToLower())
                {
                    Records = _unitOfWork.MW_DishLibraryRepository.GetWhere(x =>
                        x.Id > 0 && !x.Deleted).Select(x => x.Id).ToList();
                }
                else if (TableName.ToLower() == TablesNames.TLImwODULibrary.ToString().ToLower())
                {
                    Records = _unitOfWork.MW_ODULibraryRepository.GetWhere(x =>
                        x.Id > 0 && !x.Deleted).Select(x => x.Id).ToList();
                }
                else if (TableName.ToLower() == TablesNames.TLImwOtherLibrary.ToString().ToLower())
                {
                    Records = _unitOfWork.MW_OtherLibraryRepository.GetWhere(x =>
                        x.Id > 0 && !x.Deleted).Select(x => x.Id).ToList();
                }
                else if (TableName.ToLower() == TablesNames.TLImwRFULibrary.ToString().ToLower())
                {
                    Records = _unitOfWork.MW_RFULibraryRepository.GetWhere(x =>
                        x.Id > 0 && !x.Deleted).Select(x => x.Id).ToList();
                }

                // Load Other ...
                else if (TableName.ToLower() == TablesNames.TLIloadOtherLibrary.ToString().ToLower())
                {
                    Records = _unitOfWork.LoadOtherLibraryRepository.GetWhere(x =>
                        x.Id > 0 && !x.Deleted).Select(x => x.Id).ToList();
                }

                // Power ...
                else if (TableName.ToLower() == TablesNames.TLIpowerLibrary.ToString().ToLower())
                {
                    Records = _unitOfWork.PowerLibraryRepository.GetWhere(x =>
                        x.Id > 0 && !x.Deleted).Select(x => x.Id).ToList();
                }

                // Radio ...
                else if (TableName.ToLower() == TablesNames.TLIradioAntennaLibrary.ToString().ToLower())
                {
                    Records = _unitOfWork.RadioAntennaLibraryRepository.GetWhere(x =>
                        x.Id > 0 && !x.Deleted).Select(x => x.Id).ToList();
                }
                else if (TableName.ToLower() == TablesNames.TLIradioOtherLibrary.ToString().ToLower())
                {
                    Records = _unitOfWork.RadioOtherLibraryRepository.GetWhere(x =>
                        x.Id > 0 && !x.Deleted).Select(x => x.Id).ToList();
                }
                else if (TableName.ToLower() == TablesNames.TLIradioRRULibrary.ToString().ToLower())
                {
                    Records = _unitOfWork.RadioRRULibraryRepository.GetWhere(x =>
                        x.Id > 0 && !x.Deleted).Select(x => x.Id).ToList();
                }

                // Side Arm ...
                else if (TableName.ToLower() == TablesNames.TLIsideArmLibrary.ToString().ToLower())
                {
                    Records = _unitOfWork.SideArmLibraryRepository.GetWhere(x =>
                        x.Id > 0 && !x.Deleted).Select(x => x.Id).ToList();
                }

                // Other Inventories ...
                else if (TableName.ToLower() == TablesNames.TLIcabinetPowerLibrary.ToString().ToLower())
                {
                    Records = _unitOfWork.CabinetPowerLibraryRepository.GetWhere(x =>
                        x.Id > 0 && !x.Deleted).Select(x => x.Id).ToList();
                }
                else if (TableName.ToLower() == TablesNames.TLIcabinetTelecomLibrary.ToString().ToLower())
                {
                    Records = _unitOfWork.CabinetTelecomLibraryRepository.GetWhere(x =>
                        x.Id > 0 && !x.Deleted).Select(x => x.Id).ToList();
                }
                else if (TableName.ToLower() == TablesNames.TLIsolarLibrary.ToString().ToLower())
                {
                    Records = _unitOfWork.SolarLibraryRepository.GetWhere(x =>
                        x.Id > 0 && !x.Deleted).Select(x => x.Id).ToList();
                }
                else if (TableName.ToLower() == TablesNames.TLIgeneratorLibrary.ToString().ToLower())
                {
                    Records = _unitOfWork.GeneratorLibraryRepository.GetWhere(x =>
                        x.Id > 0 && !x.Deleted).Select(x => x.Id).ToList();
                }


                return Records;
            }
            catch (Exception)
            {
                throw;
            }
        }
        public void LoopForPath(List<string> Path, int StartIndex, ApplicationDbContext db, object Value, List<int> OutPutIds)
        {
            if (StartIndex == Path.Count())
            {
                OutPutIds.Add((int)Value);
            }
            else
            {
                List<object> TableRecords = _mapper.Map<List<object>>(db.GetType()
                    .GetProperties().FirstOrDefault(x => x.Name.ToLower() == Path[StartIndex].ToLower())
                    .GetValue(db, null))
                        .Where(x => x.GetType().GetProperty(Path[StartIndex + 1]).GetValue(x, null) != null ?
                            x.GetType().GetProperty(Path[StartIndex + 1]).GetValue(x, null).ToString().ToLower() == Value.ToString().ToLower() : false).ToList();

                foreach (object Record in TableRecords)
                {
                    // The New Value..
                    object PrimaryKeyValue = Record.GetType().GetProperty(Path[StartIndex + 2]).GetValue(Record, null);

                    if (PrimaryKeyValue != null)
                    {
                        if (StartIndex + 3 < Path.Count())
                            LoopForPath(Path, StartIndex + 3, db, PrimaryKeyValue, OutPutIds);

                        else if (StartIndex + 3 == Path.Count())
                            OutPutIds.Add((int)PrimaryKeyValue);
                    }
                }
            }
        }
        public List<int> GetRecordsIds(string MainTableName, AddInstRuleViewModel Rule)
        {
            string SDTableName = Rule.TableName;
            string Operation = _unitOfWork.OperationRepository.GetByID(Rule.OperationId.Value).Name;
            object Value = new object();

            string DataType = "";
            if (Rule.OperationValueBoolean != null)
            {
                DataType = "Bool";
                Value = Rule.OperationValueBoolean;
            }
            else if (Rule.OperationValueDateTime != null)
            {
                DataType = "DateTime";
                Value = Rule.OperationValueDateTime;
            }
            else if (Rule.OperationValueDouble != null)
            {
                DataType = "Double";
                Value = Rule.OperationValueDouble;
            }
            else if (!string.IsNullOrEmpty(Rule.OperationValueString))
            {
                DataType = "String";
                Value = Rule.OperationValueString;
            }

            List<int> OutPutIds = new List<int>();

            PathToAddDynamicAttValue Item = new PathToAddDynamicAttValue();

            if (MainTableName.ToLower() == TablesNames.TLIradioRRU.ToString().ToLower() || SDTableName.ToLower() == TablesNames.TLIradioRRU.ToString().ToLower())
                Item = (PathToAddDynamicAttValue)Enum.Parse(typeof(PathToAddDynamicAttValue),
                    (MainTableName + SDTableName).ToLower());

            else
                Item = (PathToAddDynamicAttValue)Enum.Parse(typeof(PathToAddDynamicAttValue),
                    MainTableName + SDTableName);

            List<string> Path = GetEnumDescription(Item).Split(" ").ToList();

            if (Path[0].ToLower() == MainTableName.ToLower() &&
                Path[1].ToLower() == SDTableName.ToLower())
            {
                List<object> TableRecords = new List<object>();
                if (Rule.attributeActivatedId != null && !Rule.IsDynamic)
                {
                    string AttributeName = _unitOfWork.AttributeActivatedRepository
                        .GetByID(Rule.attributeActivatedId.Value).Key;

                    TableRecords = _mapper.Map<List<object>>(db.GetType()
                        .GetProperties().FirstOrDefault(x => x.Name.ToLower() == Path[1].ToLower()).GetValue(db, null))
                            .Where(x => x.GetType().GetProperty(AttributeName).GetValue(x, null) != null ?
                               (Operation == ">" ?
                                    (DataType.ToLower() == "DateTime".ToLower() ?
                                        Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), Value) == 1 :
                                    DataType.ToLower() == "Double".ToLower() ?
                                        Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), Value) == 1 : false) :
                                Operation == ">=" ?
                                    (DataType.ToLower() == "DateTime".ToLower() ?
                                        (Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), Value) == 1 ||
                                            x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == Value.ToString().ToLower()) :
                                    DataType.ToLower() == "Double".ToLower() ?
                                        (Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), Value) == 1 ||
                                            x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == Value.ToString().ToLower()) : false) :
                                Operation == "<" ?
                                    (DataType.ToLower() == "DateTime".ToLower() ?
                                        Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), Value) == -1 :
                                    DataType.ToLower() == "Double".ToLower() ?
                                        Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), Value) == -1 : false) :
                                Operation == "<=" ?
                                    (DataType.ToLower() == "DateTime".ToLower() ?
                                        (Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), Value) == -1 ||
                                            x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == Value.ToString().ToLower()) :
                                    DataType.ToLower() == "Double".ToLower() ?
                                        (Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), Value) == -1 ||
                                            x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == Value.ToString().ToLower()) : false) :
                                Operation == "==" ?
                                    x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == Value.ToString().ToLower() :
                                Operation == "!=" ?
                                    x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() != Value.ToString().ToLower() : false) : false).ToList();

                    foreach (object Record in TableRecords)
                    {
                        object PrimaryKeyValue = Record.GetType().GetProperty(Path[2]).GetValue(Record, null);

                        LoopForPath(Path, 3, db, PrimaryKeyValue, OutPutIds);
                    }
                }
                else if (Rule.dynamicAttId != null && Rule.IsDynamic)
                {
                    TLIdynamicAtt DynamicAttribute = _unitOfWork.DynamicAttRepository
                        .GetByID(Rule.dynamicAttId.Value);
                    if (!DynamicAttribute.LibraryAtt)
                    {
                        List<TLIdynamicAttInstValue> DynamicAttValues = new List<TLIdynamicAttInstValue>();
                        if (Rule.OperationValueBoolean != null)
                        {
                            DynamicAttValues = _unitOfWork.DynamicAttInstValueRepository
                                .GetWhere(x => x.DynamicAttId == Rule.dynamicAttId && !x.disable &&
                                    (x.ValueBoolean != null ? x.ValueBoolean.ToString().ToLower() == Rule.OperationValueBoolean.ToString().ToLower() : false)).ToList();
                        }
                        else if (Rule.OperationValueDateTime != null)
                        {
                            DynamicAttValues = _unitOfWork.DynamicAttInstValueRepository
                                .GetWhere(x => x.DynamicAttId == Rule.dynamicAttId && !x.disable &&
                                    (x.ValueDateTime != null ? x.ValueDateTime.ToString().ToLower() == Rule.OperationValueDateTime.ToString().ToLower() : false)).ToList();
                        }
                        else if (Rule.OperationValueDouble != null)
                        {
                            DynamicAttValues = _unitOfWork.DynamicAttInstValueRepository
                                .GetWhere(x => x.DynamicAttId == Rule.dynamicAttId && !x.disable &&
                                    (x.ValueDouble != null ? x.ValueDouble == Rule.OperationValueDouble : false)).ToList();
                        }
                        else if (!string.IsNullOrEmpty(Rule.OperationValueString))
                        {
                            DynamicAttValues = _unitOfWork.DynamicAttInstValueRepository
                                .GetWhere(x => x.DynamicAttId == Rule.dynamicAttId && !x.disable &&
                                    (!string.IsNullOrEmpty(x.ValueString) ? x.ValueString.ToLower() == Rule.OperationValueString.ToString().ToLower() : false)).ToList();
                        }
                        if (DynamicAttValues != null)
                        {
                            TableRecords = _mapper.Map<List<object>>(db.GetType()
                                .GetProperties().FirstOrDefault(x => x.Name.ToLower() == Path[1].ToLower()).GetValue(db, null))
                                    .Where(x => DynamicAttValues.Exists(y =>
                                        y.InventoryId.ToString() == x.GetType().GetProperty("Id").GetValue(x, null).ToString() ? (
                                            (y.ValueBoolean != null ? (
                                                Operation == "==" ? y.ValueBoolean.ToString().ToLower() == Value.ToString().ToLower() :
                                                Operation == "!=" ? y.ValueBoolean.ToString().ToLower() != Value.ToString().ToLower() : false) : false) ||
                                            (y.ValueDateTime != null ? (
                                                Operation == "==" ? y.ValueDateTime.ToString().ToLower() == Value.ToString().ToLower() :
                                                Operation == ">" ? Comparer.DefaultInvariant.Compare(y.ValueDateTime, Value) == 1 :
                                                Operation == ">=" ? (Comparer.DefaultInvariant.Compare(y.ValueDateTime, Value) == 1 ||
                                                    y.ValueDateTime.ToString().ToLower() == Value.ToString().ToLower()) :
                                                Operation == "<" ? Comparer.DefaultInvariant.Compare(y.ValueDateTime, Value) == -1 :
                                                Operation == "<=" ? (Comparer.DefaultInvariant.Compare(y.ValueDateTime, Value) == -1 ||
                                                    y.ValueDateTime.ToString().ToLower() == Value.ToString().ToLower()) :
                                                Operation == "!=" ? y.ValueDateTime.ToString().ToLower() != Value.ToString().ToLower() : false) : false) ||
                                            (y.ValueDouble != null ? (
                                                Operation == "==" ? y.ValueDouble.ToString().ToLower() == Value.ToString().ToLower() :
                                                Operation == ">" ? Comparer.DefaultInvariant.Compare(y.ValueDouble, Value) == 1 :
                                                Operation == ">=" ? (Comparer.DefaultInvariant.Compare(y.ValueDouble, Value) == 1 ||
                                                    y.ValueDouble.ToString().ToLower() == Value.ToString().ToLower()) :
                                                Operation == "<" ? Comparer.DefaultInvariant.Compare(y.ValueDouble, Value) == -1 :
                                                Operation == "<=" ? (Comparer.DefaultInvariant.Compare(y.ValueDouble, Value) == -1 ||
                                                    y.ValueDouble.ToString().ToLower() == Value.ToString().ToLower()) :
                                                Operation == "!=" ? y.ValueDouble.ToString().ToLower() != Value.ToString().ToLower() : false) : false) ||
                                            (!string.IsNullOrEmpty(y.ValueString) ? (
                                                Operation == "==" ? y.ValueString.ToLower() == Value.ToString().ToLower() :
                                                Operation == "!=" ? y.ValueString.ToLower() != Value.ToString().ToLower() : false) : false)
                                        ) : false)).ToList();

                            foreach (object Record in TableRecords)
                            {
                                object PrimaryKeyValue = Record.GetType().GetProperty(Path[2]).GetValue(Record, null);

                                LoopForPath(Path, 3, db, PrimaryKeyValue, OutPutIds);
                            }
                        }
                    }
                    else
                    {
                        List<TLIdynamicAttLibValue> DynamicAttValues = new List<TLIdynamicAttLibValue>();
                        if (Rule.OperationValueBoolean != null)
                        {
                            DynamicAttValues = _unitOfWork.DynamicAttLibRepository
                                .GetWhere(x => x.DynamicAttId == Rule.dynamicAttId && !x.disable &&
                                    (x.ValueBoolean != null ? x.ValueBoolean.ToString().ToLower() == Rule.OperationValueBoolean.ToString().ToLower() : false)).ToList();
                        }
                        else if (Rule.OperationValueDateTime != null)
                        {
                            DynamicAttValues = _unitOfWork.DynamicAttLibRepository
                                .GetWhere(x => x.DynamicAttId == Rule.dynamicAttId && !x.disable &&
                                    (x.ValueDateTime != null ? x.ValueDateTime.ToString().ToLower() == Rule.OperationValueDateTime.ToString().ToLower() : false)).ToList();
                        }
                        else if (Rule.OperationValueDouble != null)
                        {
                            DynamicAttValues = _unitOfWork.DynamicAttLibRepository
                                .GetWhere(x => x.DynamicAttId == Rule.dynamicAttId && !x.disable &&
                                    (x.ValueDouble != null ? x.ValueDouble == Rule.OperationValueDouble : false)).ToList();
                        }
                        else if (!string.IsNullOrEmpty(Rule.OperationValueString))
                        {
                            DynamicAttValues = _unitOfWork.DynamicAttLibRepository
                                .GetWhere(x => x.DynamicAttId == Rule.dynamicAttId && !x.disable &&
                                    (!string.IsNullOrEmpty(x.ValueString) ? x.ValueString.ToLower() == Rule.OperationValueString.ToLower() : false)).ToList();
                        }
                        if (DynamicAttValues != null)
                        {
                            TableRecords = _mapper.Map<List<object>>(db.GetType()
                                .GetProperties().FirstOrDefault(x => x.Name.ToLower() == Path[1].ToLower()).GetValue(db, null))
                                    .Where(x => DynamicAttValues.FirstOrDefault(y =>
                                        y.InventoryId.ToString() == x.GetType().GetProperty("Id").GetValue(x, null).ToString() ? (
                                            (y.ValueBoolean != null ? (
                                                Operation == "==" ? y.ValueBoolean.ToString().ToLower() == Value.ToString().ToLower() :
                                                Operation == "!=" ? y.ValueBoolean.ToString().ToLower() != Value.ToString().ToLower() : false) : false) ||
                                            (y.ValueDateTime != null ? (
                                                Operation == "==" ? y.ValueDateTime.ToString().ToLower() == Value.ToString().ToLower() :
                                                Operation == ">" ? Comparer.DefaultInvariant.Compare(y.ValueDateTime, Value) == 1 :
                                                Operation == ">=" ? (Comparer.DefaultInvariant.Compare(y.ValueDateTime, Value) == 1 ||
                                                    y.ValueDateTime.ToString().ToLower() == Value.ToString().ToLower()) :
                                                Operation == "<" ? Comparer.DefaultInvariant.Compare(y.ValueDateTime, Value) == -1 :
                                                Operation == "<=" ? (Comparer.DefaultInvariant.Compare(y.ValueDateTime, Value) == -1 ||
                                                    y.ValueDateTime.ToString().ToLower() == Value.ToString().ToLower()) :
                                                Operation == "!=" ? y.ValueDateTime.ToString().ToLower() != Value.ToString().ToLower() : false
                                            ) : false) ||
                                            (y.ValueDouble != null ? (
                                                Operation == "==" ? y.ValueDouble.ToString().ToLower() == Value.ToString().ToLower() :
                                                Operation == ">" ? Comparer.DefaultInvariant.Compare(y.ValueDouble, Value) == 1 :
                                                Operation == ">=" ? (Comparer.DefaultInvariant.Compare(y.ValueDouble, Value) == 1 ||
                                                    y.ValueDouble.ToString().ToLower() == Value.ToString().ToLower()) :
                                                Operation == "<" ? Comparer.DefaultInvariant.Compare(y.ValueDouble, Value) == -1 :
                                                Operation == "<=" ? (Comparer.DefaultInvariant.Compare(y.ValueDouble, Value) == -1 ||
                                                    y.ValueDouble.ToString().ToLower() == Value.ToString().ToLower()) :
                                                Operation == "!=" ? y.ValueDouble.ToString().ToLower() != Value.ToString().ToLower() : false
                                            ) : false) ||
                                            (!string.IsNullOrEmpty(y.ValueString) ?
                                                (Operation == "==" ? y.ValueString.ToLower() == Value.ToString().ToLower() :
                                                Operation == "!=" ? y.ValueString.ToLower() != Value.ToString().ToLower() : false) : false)) : false) != null).ToList();

                            foreach (object Record in TableRecords)
                            {
                                object PrimaryKeyValue = Record.GetType().GetProperty(Path[2]).GetValue(Record, null);

                                LoopForPath(Path, 3, db, PrimaryKeyValue, OutPutIds);
                            }
                        }
                    }
                }
            }
            OutPutIds = OutPutIds.Distinct().ToList();
            return OutPutIds;
        }
        public void AddInstallationListValues(AddDependencyInstViewModel addDependencyInstViewModel, int DynamicAttId)
        {
            try
            {
                if (addDependencyInstViewModel.Dependencies != null ? addDependencyInstViewModel.Dependencies.Count() == 0 : true)
                {
                    AddDefaultValues(null, addDependencyInstViewModel, DynamicAttId);
                }
                else
                {
                    if (addDependencyInstViewModel.BooleanResult != null || addDependencyInstViewModel.DoubleResult != null ||
                        addDependencyInstViewModel.DateTimeResult != null || !string.IsNullOrEmpty(addDependencyInstViewModel.StringResult))
                    {
                        List<int> DependencySucessRecords = new List<int>();
                        foreach (DependencyViewModel Dependency in addDependencyInstViewModel.Dependencies)
                        {
                            foreach (AddDependencyRowViewModel DependencyRow in Dependency.DependencyRows)
                            {
                                foreach (AddRowRuleViewModel RowRule in DependencyRow.RowRules)
                                {
                                    DependencySucessRecords.AddRange(GetRecordsIds(addDependencyInstViewModel.TableName, RowRule.Rule));
                                }
                            }
                        }

                        DependencySucessRecords = DependencySucessRecords.Distinct().ToList();

                        List<TLIdynamicAttInstValue> ListToAdd = new List<TLIdynamicAttInstValue>();

                        foreach (int Id in DependencySucessRecords)
                        {
                            ListToAdd.Add(new TLIdynamicAttInstValue
                            {
                                disable = false,
                                DynamicAttId = DynamicAttId,
                                InventoryId = Id,
                                tablesNamesId = addDependencyInstViewModel.tablesNamesId,
                                ValueBoolean = addDependencyInstViewModel.BooleanResult,
                                ValueString = addDependencyInstViewModel.StringResult,
                                ValueDateTime = addDependencyInstViewModel.DateTimeResult,
                                ValueDouble = addDependencyInstViewModel.DoubleResult
                            });
                        }

                        List<object> TableRecordsIds = _mapper.Map<List<object>>(db.GetType()
                            .GetProperties().FirstOrDefault(x => x.Name.ToLower() == addDependencyInstViewModel.TableName.ToLower()).GetValue(db, null))
                            .Where(x => !DependencySucessRecords.Contains((int)x.GetType().GetProperty("Id").GetValue(x, null))).ToList();

                        foreach (object Record in TableRecordsIds)
                        {
                            ListToAdd.Add(new TLIdynamicAttInstValue
                            {
                                disable = false,
                                DynamicAttId = DynamicAttId,
                                InventoryId = (int)Record.GetType().GetProperty("Id").GetValue(Record, null),
                                tablesNamesId = addDependencyInstViewModel.tablesNamesId,
                                ValueBoolean = addDependencyInstViewModel.BooleanDefaultValue,
                                ValueString = addDependencyInstViewModel.StringDefaultValue,
                                ValueDateTime = addDependencyInstViewModel.DateTimeDefaultValue,
                                ValueDouble = addDependencyInstViewModel.DoubleDefaultValue
                            });
                        }
                        _unitOfWork.DynamicAttInstValueRepository.AddRange(ListToAdd);
                        _unitOfWork.SaveChanges();
                    }
                    else
                    {
                        AddDefaultValues(null, addDependencyInstViewModel, DynamicAttId);
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }
        public void AddDefaultValues(AddDependencyViewModel addDependencyViewModel, AddDependencyInstViewModel addDependencyInstViewModel, int DynamicAttId)
        {
            try
            {
                if (addDependencyViewModel != null)
                {
                    if (addDependencyViewModel.BooleanDefaultValue != null || addDependencyViewModel.DoubleDefaultValue != null ||
                        addDependencyViewModel.DateTimeDefaultValue != null || !string.IsNullOrEmpty(addDependencyViewModel.StringDefaultValue))
                    {
                        List<int> RecordsIds = new List<int>();

                        if (addDependencyViewModel.LibraryAtt)
                        {
                            RecordsIds = GetLibraryRecordsIds(addDependencyViewModel.TableName);
                            List<TLIdynamicAttLibValue> ListToAdd = new List<TLIdynamicAttLibValue>();

                            foreach (int RecordId in RecordsIds)
                            {
                                ListToAdd.Add(new TLIdynamicAttLibValue
                                {
                                    disable = false,
                                    DynamicAttId = DynamicAttId,
                                    InventoryId = RecordId,
                                    tablesNamesId = addDependencyViewModel.tablesNamesId,
                                    ValueBoolean = addDependencyViewModel.BooleanDefaultValue,
                                    ValueDateTime = addDependencyViewModel.DateTimeDefaultValue,
                                    ValueDouble = addDependencyViewModel.DoubleDefaultValue,
                                    ValueString = addDependencyViewModel.StringDefaultValue
                                });
                            }

                            _unitOfWork.DynamicAttLibRepository.AddRange(ListToAdd);
                            _unitOfWork.SaveChanges();
                        }
                        else
                        {
                            RecordsIds = GetInstallationRecordsIds(addDependencyViewModel.TableName);
                            List<TLIdynamicAttInstValue> ListToAdd = new List<TLIdynamicAttInstValue>();

                            foreach (int RecordId in RecordsIds)
                            {
                                ListToAdd.Add(new TLIdynamicAttInstValue
                                {
                                    disable = false,
                                    DynamicAttId = DynamicAttId,
                                    InventoryId = RecordId,
                                    tablesNamesId = addDependencyViewModel.tablesNamesId,
                                    ValueBoolean = addDependencyViewModel.BooleanDefaultValue,
                                    ValueDateTime = addDependencyViewModel.DateTimeDefaultValue,
                                    ValueDouble = addDependencyViewModel.DoubleDefaultValue,
                                    ValueString = addDependencyViewModel.StringDefaultValue
                                });
                            }

                            _unitOfWork.DynamicAttInstValueRepository.AddRange(ListToAdd);
                            _unitOfWork.SaveChanges();
                        }
                    }
                }
                else
                {
                    if (addDependencyInstViewModel.BooleanDefaultValue != null || addDependencyInstViewModel.DoubleDefaultValue != null ||
                        addDependencyInstViewModel.DateTimeDefaultValue != null || !string.IsNullOrEmpty(addDependencyInstViewModel.StringDefaultValue))
                    {
                        List<int> RecordsIds = new List<int>();

                        if (addDependencyInstViewModel.LibraryAtt)
                        {
                            RecordsIds = GetLibraryRecordsIds(addDependencyInstViewModel.TableName);
                            List<TLIdynamicAttLibValue> ListToAdd = new List<TLIdynamicAttLibValue>();

                            foreach (int RecordId in RecordsIds)
                            {
                                ListToAdd.Add(new TLIdynamicAttLibValue
                                {
                                    disable = false,
                                    DynamicAttId = DynamicAttId,
                                    InventoryId = RecordId,
                                    tablesNamesId = addDependencyInstViewModel.tablesNamesId,
                                    ValueBoolean = addDependencyInstViewModel.BooleanDefaultValue,
                                    ValueDateTime = addDependencyInstViewModel.DateTimeDefaultValue,
                                    ValueDouble = addDependencyInstViewModel.DoubleDefaultValue,
                                    ValueString = addDependencyInstViewModel.StringDefaultValue
                                });
                            }
                            _unitOfWork.DynamicAttLibRepository.AddRange(ListToAdd);
                            _unitOfWork.SaveChanges();
                        }
                        else
                        {
                            RecordsIds = GetInstallationRecordsIds(addDependencyInstViewModel.TableName);
                            List<TLIdynamicAttInstValue> ListToAdd = new List<TLIdynamicAttInstValue>();

                            foreach (int RecordId in RecordsIds)
                            {
                                ListToAdd.Add(new TLIdynamicAttInstValue
                                {
                                    disable = false,
                                    DynamicAttId = DynamicAttId,
                                    InventoryId = RecordId,
                                    tablesNamesId = addDependencyInstViewModel.tablesNamesId,
                                    ValueBoolean = addDependencyInstViewModel.BooleanDefaultValue,
                                    ValueDateTime = addDependencyInstViewModel.DateTimeDefaultValue,
                                    ValueDouble = addDependencyInstViewModel.DoubleDefaultValue,
                                    ValueString = addDependencyInstViewModel.StringDefaultValue
                                });
                            }
                            _unitOfWork.DynamicAttInstValueRepository.AddRange(ListToAdd);
                            _unitOfWork.SaveChanges();
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw;
            }
        }
        public void AddLibraryListValues(AddDependencyViewModel addDependencyViewModel, int DynamicAttId)
        {
            try
            {
                if (addDependencyViewModel.Dependencies != null ? addDependencyViewModel.Dependencies.Count() == 0 : true)
                {
                    AddDefaultValues(addDependencyViewModel, null, DynamicAttId);
                }
                else
                {
                    if (addDependencyViewModel.BooleanResult != null || addDependencyViewModel.DoubleResult != null ||
                        addDependencyViewModel.DateTimeResult != null || !string.IsNullOrEmpty(addDependencyViewModel.StringResult))
                    {
                        if (addDependencyViewModel.LibraryAtt)
                        {
                            // Civils..
                            if (addDependencyViewModel.TableName.ToLower() == TablesNames.TLIcivilWithLegLibrary.ToString().ToLower())
                            {
                                List<CivilWithLegLibraryViewModel> CivilWithLegLibraries = _mapper.Map<List<CivilWithLegLibraryViewModel>>(_unitOfWork.CivilWithLegLibraryRepository.GetIncludeWhere(x =>
                                    x.Id > 0 && !x.Deleted, x => x.civilSteelSupportCategory, x => x.sectionsLegType, x => x.structureType, x => x.supportTypeDesigned).ToList());

                                foreach (DependencyViewModel Dependency in addDependencyViewModel.Dependencies)
                                {
                                    foreach (CivilWithLegLibraryViewModel CivilWithLegLibrary in CivilWithLegLibraries)
                                    {
                                        List<TLIdynamicAttLibValue> ListToAdd = new List<TLIdynamicAttLibValue>();

                                        foreach (AddDependencyRowViewModel DependencyRow in Dependency.DependencyRows)
                                        {
                                            int Succeed = 0;

                                            foreach (AddRowRuleViewModel RowRule in DependencyRow.RowRules)
                                            {
                                                if (RowRule.Rule.attributeActivatedId != null)
                                                {
                                                    TLIattributeActivated RuleStaticAttribute = _unitOfWork.AttributeActivatedRepository.GetByID(RowRule.Rule.attributeActivatedId.Value);

                                                    PropertyInfo LibraryProp = typeof(CivilWithLegLibraryViewModel).GetProperties().FirstOrDefault(x =>
                                                        x.Name.ToLower() == RuleStaticAttribute.Key.ToLower());

                                                    object PropObject = LibraryProp.GetValue(CivilWithLegLibrary, null);

                                                    if (PropObject != null)
                                                    {
                                                        string OperationStatic = _unitOfWork.OperationRepository.GetWhereFirst(x => !x.Deleted && x.Id == RowRule.Rule.OperationId.Value).Name;
                                                        if (OperationStatic == "==")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean == Convert.ToBoolean(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime == Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble == Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString == PropObject.ToString())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "!=")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean != Convert.ToBoolean(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime != Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble != Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString != PropObject.ToString())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "<")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime > Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble > Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "<=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime >= Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble >= Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == ">")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime < Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble < Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == ">=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime <= Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble <= Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                else if (RowRule.Rule.dynamicAttId != null)
                                                {
                                                    TLIdynamicAttLibValue RuleDynamicAttribute = _unitOfWork.DynamicAttLibRepository.GetWhereFirst(x =>
                                                        x.DynamicAttId == RowRule.Rule.dynamicAttId.Value && x.InventoryId == CivilWithLegLibrary.Id);

                                                    if (RuleDynamicAttribute != null)
                                                    {
                                                        string OperationDynamic = _unitOfWork.OperationRepository.GetWhereFirst(x => !x.Deleted && x.Id == RowRule.Rule.OperationId.Value).Name;

                                                        if (OperationDynamic == "==")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null && RuleDynamicAttribute.ValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean == RuleDynamicAttribute.ValueBoolean)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime == RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble == RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString) && !string.IsNullOrEmpty(RuleDynamicAttribute.ValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString.ToLower() == RuleDynamicAttribute.ValueString.ToLower())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "!=")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null && RuleDynamicAttribute.ValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean != RuleDynamicAttribute.ValueBoolean)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime != RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble != RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString) && !string.IsNullOrEmpty(RuleDynamicAttribute.ValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString.ToLower() != RuleDynamicAttribute.ValueString.ToLower())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == ">")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime > RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble > RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == ">=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime >= RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble >= RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "<")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime < RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble < RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "<=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime <= RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble <= RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (Succeed == DependencyRow.RowRules.Count())
                                            {
                                                TLIdynamicAttLibValue Check = ListToAdd.FirstOrDefault(x =>
                                                    !x.disable && x.DynamicAttId == DynamicAttId && x.tablesNamesId == addDependencyViewModel.tablesNamesId &&
                                                    x.InventoryId == CivilWithLegLibrary.Id);

                                                if (Check == null)
                                                {
                                                    ListToAdd.Add(new TLIdynamicAttLibValue
                                                    {
                                                        disable = false,
                                                        DynamicAttId = DynamicAttId,
                                                        InventoryId = CivilWithLegLibrary.Id,
                                                        tablesNamesId = addDependencyViewModel.tablesNamesId,
                                                        ValueBoolean = addDependencyViewModel.BooleanResult,
                                                        ValueString = addDependencyViewModel.StringResult,
                                                        ValueDateTime = addDependencyViewModel.DateTimeResult,
                                                        ValueDouble = addDependencyViewModel.DoubleResult
                                                    });
                                                }
                                            }
                                        }
                                        if (addDependencyViewModel.BooleanDefaultValue != null || addDependencyViewModel.DoubleDefaultValue != null ||
                                            addDependencyViewModel.DateTimeDefaultValue != null || !string.IsNullOrEmpty(addDependencyViewModel.StringDefaultValue))
                                        {
                                            TLIdynamicAttLibValue Check = ListToAdd.FirstOrDefault(x =>
                                                !x.disable && x.DynamicAttId == DynamicAttId && x.tablesNamesId == addDependencyViewModel.tablesNamesId &&
                                                x.InventoryId == CivilWithLegLibrary.Id);

                                            if (Check == null)
                                            {
                                                ListToAdd.Add(new TLIdynamicAttLibValue
                                                {
                                                    disable = false,
                                                    DynamicAttId = DynamicAttId,
                                                    InventoryId = CivilWithLegLibrary.Id,
                                                    tablesNamesId = addDependencyViewModel.tablesNamesId,
                                                    ValueBoolean = addDependencyViewModel.BooleanDefaultValue,
                                                    ValueString = addDependencyViewModel.StringDefaultValue,
                                                    ValueDateTime = addDependencyViewModel.DateTimeDefaultValue,
                                                    ValueDouble = addDependencyViewModel.DoubleDefaultValue
                                                });
                                            }
                                        }
                                        _unitOfWork.DynamicAttLibRepository.AddRange(ListToAdd);
                                        _unitOfWork.SaveChanges();
                                    }
                                }
                            }
                            else if (addDependencyViewModel.TableName.ToLower() == TablesNames.TLIcivilWithoutLegLibrary.ToString().ToLower())
                            {
                                List<CivilWithoutLegLibraryViewModel> CivilWithoutLegLibraries = _mapper.Map<List<CivilWithoutLegLibraryViewModel>>(_unitOfWork.CivilWithoutLegLibraryRepository.GetIncludeWhere(x =>
                                    x.Id > 0 && !x.Deleted, x => x.CivilSteelSupportCategory, x => x.CivilWithoutLegCategory, x => x.InstallationCivilwithoutLegsType,
                                    x => x.structureType).ToList());

                                foreach (DependencyViewModel Dependency in addDependencyViewModel.Dependencies)
                                {
                                    foreach (CivilWithoutLegLibraryViewModel CivilWithoutLegLibrary in CivilWithoutLegLibraries)
                                    {
                                        List<TLIdynamicAttLibValue> ListToAdd = new List<TLIdynamicAttLibValue>();

                                        foreach (AddDependencyRowViewModel DependencyRow in Dependency.DependencyRows)
                                        {
                                            int Succeed = 0;

                                            foreach (AddRowRuleViewModel RowRule in DependencyRow.RowRules)
                                            {
                                                if (RowRule.Rule.attributeActivatedId != null)
                                                {
                                                    TLIattributeActivated RuleStaticAttribute = _unitOfWork.AttributeActivatedRepository.GetByID(RowRule.Rule.attributeActivatedId.Value);

                                                    PropertyInfo LibraryProp = typeof(CivilWithoutLegLibraryViewModel).GetProperties().FirstOrDefault(x =>
                                                        x.Name.ToLower() == RuleStaticAttribute.Key.ToLower());

                                                    object PropObject = LibraryProp.GetValue(CivilWithoutLegLibrary, null);
                                                    if (PropObject != null)
                                                    {
                                                        string OperationStatic = _unitOfWork.OperationRepository.GetWhereFirst(x => !x.Deleted && x.Id == RowRule.Rule.OperationId.Value).Name;
                                                        if (OperationStatic == "==")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean == Convert.ToBoolean(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime == Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble == Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString == PropObject.ToString())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "!=")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean != Convert.ToBoolean(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime != Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble != Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString != PropObject.ToString())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "<")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime > Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble > Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "<=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime >= Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble >= Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == ">")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime < Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble < Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == ">=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime <= Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble <= Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                else if (RowRule.Rule.dynamicAttId != null)
                                                {
                                                    TLIdynamicAttLibValue RuleDynamicAttribute = _unitOfWork.DynamicAttLibRepository.GetWhereFirst(x =>
                                                        x.DynamicAttId == RowRule.Rule.dynamicAttId.Value && x.InventoryId == CivilWithoutLegLibrary.Id);

                                                    if (RuleDynamicAttribute != null)
                                                    {
                                                        string OperationDynamic = _unitOfWork.OperationRepository.GetWhereFirst(x => !x.Deleted && x.Id == RowRule.Rule.OperationId.Value).Name;

                                                        if (OperationDynamic == "==")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null && RuleDynamicAttribute.ValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean == RuleDynamicAttribute.ValueBoolean)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime == RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble == RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString) && !string.IsNullOrEmpty(RuleDynamicAttribute.ValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString.ToLower() == RuleDynamicAttribute.ValueString.ToLower())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "!=")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null && RuleDynamicAttribute.ValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean != RuleDynamicAttribute.ValueBoolean)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime != RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble != RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString) && !string.IsNullOrEmpty(RuleDynamicAttribute.ValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString.ToLower() != RuleDynamicAttribute.ValueString.ToLower())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == ">")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime > RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble > RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == ">=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime >= RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble >= RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "<")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime < RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble < RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "<=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime <= RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble <= RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (Succeed == DependencyRow.RowRules.Count())
                                            {
                                                TLIdynamicAttLibValue Check = ListToAdd.FirstOrDefault(x =>
                                                    !x.disable && x.DynamicAttId == DynamicAttId && x.tablesNamesId == addDependencyViewModel.tablesNamesId &&
                                                    x.InventoryId == CivilWithoutLegLibrary.Id);

                                                if (Check == null)
                                                {
                                                    ListToAdd.Add(new TLIdynamicAttLibValue
                                                    {
                                                        disable = false,
                                                        DynamicAttId = DynamicAttId,
                                                        InventoryId = CivilWithoutLegLibrary.Id,
                                                        tablesNamesId = addDependencyViewModel.tablesNamesId,
                                                        ValueBoolean = addDependencyViewModel.BooleanResult,
                                                        ValueString = addDependencyViewModel.StringResult,
                                                        ValueDateTime = addDependencyViewModel.DateTimeResult,
                                                        ValueDouble = addDependencyViewModel.DoubleResult
                                                    });
                                                }
                                            }
                                        }
                                        if (addDependencyViewModel.BooleanDefaultValue != null || addDependencyViewModel.DoubleDefaultValue != null ||
                                            addDependencyViewModel.DateTimeDefaultValue != null || !string.IsNullOrEmpty(addDependencyViewModel.StringDefaultValue))
                                        {
                                            TLIdynamicAttLibValue Check = ListToAdd.FirstOrDefault(x =>
                                                !x.disable && x.DynamicAttId == DynamicAttId && x.tablesNamesId == addDependencyViewModel.tablesNamesId &&
                                                x.InventoryId == CivilWithoutLegLibrary.Id);

                                            if (Check == null)
                                            {
                                                ListToAdd.Add(new TLIdynamicAttLibValue
                                                {
                                                    disable = false,
                                                    DynamicAttId = DynamicAttId,
                                                    InventoryId = CivilWithoutLegLibrary.Id,
                                                    tablesNamesId = addDependencyViewModel.tablesNamesId,
                                                    ValueBoolean = addDependencyViewModel.BooleanDefaultValue,
                                                    ValueString = addDependencyViewModel.StringDefaultValue,
                                                    ValueDateTime = addDependencyViewModel.DateTimeDefaultValue,
                                                    ValueDouble = addDependencyViewModel.DoubleDefaultValue
                                                });
                                            }
                                        }

                                        _unitOfWork.DynamicAttLibRepository.AddRange(ListToAdd);
                                        _unitOfWork.SaveChanges();
                                    }
                                }
                            }
                            else if (addDependencyViewModel.TableName.ToLower() == TablesNames.TLIcivilNonSteelLibrary.ToString().ToLower())
                            {
                                List<CivilNonSteelLibraryViewModel> CivilNonSteelLibraries = _mapper.Map<List<CivilNonSteelLibraryViewModel>>(_unitOfWork.CivilNonSteelLibraryRepository.GetIncludeWhere(x =>
                                    x.Id > 0 && !x.Deleted, x => x.civilNonSteelType).ToList());

                                foreach (DependencyViewModel Dependency in addDependencyViewModel.Dependencies)
                                {
                                    foreach (CivilNonSteelLibraryViewModel CivilNonSteelLibrary in CivilNonSteelLibraries)
                                    {
                                        List<TLIdynamicAttLibValue> ListToAdd = new List<TLIdynamicAttLibValue>();

                                        foreach (AddDependencyRowViewModel DependencyRow in Dependency.DependencyRows)
                                        {
                                            int Succeed = 0;

                                            foreach (AddRowRuleViewModel RowRule in DependencyRow.RowRules)
                                            {
                                                if (RowRule.Rule.attributeActivatedId != null)
                                                {
                                                    TLIattributeActivated RuleStaticAttribute = _unitOfWork.AttributeActivatedRepository.GetByID(RowRule.Rule.attributeActivatedId.Value);

                                                    PropertyInfo LibraryProp = typeof(CivilNonSteelLibraryViewModel).GetProperties().FirstOrDefault(x =>
                                                        x.Name.ToLower() == RuleStaticAttribute.Key.ToLower());

                                                    object PropObject = LibraryProp.GetValue(CivilNonSteelLibrary, null);
                                                    if (PropObject != null)
                                                    {
                                                        string OperationStatic = _unitOfWork.OperationRepository.GetWhereFirst(x => !x.Deleted && x.Id == RowRule.Rule.OperationId.Value).Name;
                                                        if (OperationStatic == "==")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean == Convert.ToBoolean(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime == Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble == Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString == PropObject.ToString())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "!=")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean != Convert.ToBoolean(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime != Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble != Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString != PropObject.ToString())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "<")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime > Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble > Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "<=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime >= Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble >= Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == ">")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime < Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble < Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == ">=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime <= Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble <= Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                else if (RowRule.Rule.dynamicAttId != null)
                                                {
                                                    TLIdynamicAttLibValue RuleDynamicAttribute = _unitOfWork.DynamicAttLibRepository.GetWhereFirst(x =>
                                                        x.DynamicAttId == RowRule.Rule.dynamicAttId.Value && x.InventoryId == CivilNonSteelLibrary.Id);

                                                    if (RuleDynamicAttribute != null)
                                                    {
                                                        string OperationDynamic = _unitOfWork.OperationRepository.GetWhereFirst(x => !x.Deleted && x.Id == RowRule.Rule.OperationId.Value).Name;

                                                        if (OperationDynamic == "==")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null && RuleDynamicAttribute.ValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean == RuleDynamicAttribute.ValueBoolean)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime == RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble == RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString) && !string.IsNullOrEmpty(RuleDynamicAttribute.ValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString.ToLower() == RuleDynamicAttribute.ValueString.ToLower())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "!=")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null && RuleDynamicAttribute.ValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean != RuleDynamicAttribute.ValueBoolean)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime != RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble != RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString) && !string.IsNullOrEmpty(RuleDynamicAttribute.ValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString.ToLower() != RuleDynamicAttribute.ValueString.ToLower())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == ">")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime > RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble > RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == ">=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime >= RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble >= RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "<")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime < RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble < RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "<=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime <= RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble <= RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (Succeed == DependencyRow.RowRules.Count())
                                            {
                                                TLIdynamicAttLibValue Check = ListToAdd.FirstOrDefault(x =>
                                                    !x.disable && x.DynamicAttId == DynamicAttId && x.tablesNamesId == addDependencyViewModel.tablesNamesId &&
                                                    x.InventoryId == CivilNonSteelLibrary.Id);

                                                if (Check == null)
                                                {
                                                    ListToAdd.Add(new TLIdynamicAttLibValue
                                                    {
                                                        disable = false,
                                                        DynamicAttId = DynamicAttId,
                                                        InventoryId = CivilNonSteelLibrary.Id,
                                                        tablesNamesId = addDependencyViewModel.tablesNamesId,
                                                        ValueBoolean = addDependencyViewModel.BooleanResult,
                                                        ValueString = addDependencyViewModel.StringResult,
                                                        ValueDateTime = addDependencyViewModel.DateTimeResult,
                                                        ValueDouble = addDependencyViewModel.DoubleResult
                                                    });
                                                }
                                            }
                                        }
                                        if (addDependencyViewModel.BooleanDefaultValue != null || addDependencyViewModel.DoubleDefaultValue != null ||
                                            addDependencyViewModel.DateTimeDefaultValue != null || !string.IsNullOrEmpty(addDependencyViewModel.StringDefaultValue))
                                        {
                                            TLIdynamicAttLibValue Check = ListToAdd.FirstOrDefault(x =>
                                                !x.disable && x.DynamicAttId == DynamicAttId && x.tablesNamesId == addDependencyViewModel.tablesNamesId &&
                                                x.InventoryId == CivilNonSteelLibrary.Id);

                                            if (Check == null)
                                            {
                                                ListToAdd.Add(new TLIdynamicAttLibValue
                                                {
                                                    disable = false,
                                                    DynamicAttId = DynamicAttId,
                                                    InventoryId = CivilNonSteelLibrary.Id,
                                                    tablesNamesId = addDependencyViewModel.tablesNamesId,
                                                    ValueBoolean = addDependencyViewModel.BooleanDefaultValue,
                                                    ValueString = addDependencyViewModel.StringDefaultValue,
                                                    ValueDateTime = addDependencyViewModel.DateTimeDefaultValue,
                                                    ValueDouble = addDependencyViewModel.DoubleDefaultValue
                                                });
                                            }
                                        }

                                        _unitOfWork.DynamicAttLibRepository.AddRange(ListToAdd);
                                        _unitOfWork.SaveChanges();
                                    }
                                }
                            }


                            // SideArm..
                            else if (addDependencyViewModel.TableName.ToLower() == TablesNames.TLIsideArmLibrary.ToString().ToLower())
                            {
                                List<SideArmLibraryViewModel> SideArmLibraries = _mapper.Map<List<SideArmLibraryViewModel>>(_unitOfWork.SideArmLibraryRepository.GetWhere(x =>
                                    x.Id > 0 && !x.Deleted).ToList());

                                foreach (DependencyViewModel Dependency in addDependencyViewModel.Dependencies)
                                {
                                    foreach (SideArmLibraryViewModel SideArmLibrary in SideArmLibraries)
                                    {
                                        List<TLIdynamicAttLibValue> ListToAdd = new List<TLIdynamicAttLibValue>();

                                        foreach (AddDependencyRowViewModel DependencyRow in Dependency.DependencyRows)
                                        {
                                            int Succeed = 0;

                                            foreach (AddRowRuleViewModel RowRule in DependencyRow.RowRules)
                                            {
                                                if (RowRule.Rule.attributeActivatedId != null)
                                                {
                                                    TLIattributeActivated RuleStaticAttribute = _unitOfWork.AttributeActivatedRepository.GetByID(RowRule.Rule.attributeActivatedId.Value);

                                                    PropertyInfo LibraryProp = typeof(SideArmLibraryViewModel).GetProperties().FirstOrDefault(x =>
                                                        x.Name.ToLower() == RuleStaticAttribute.Key.ToLower());

                                                    object PropObject = LibraryProp.GetValue(SideArmLibrary, null);
                                                    if (PropObject != null)
                                                    {
                                                        string OperationStatic = _unitOfWork.OperationRepository.GetWhereFirst(x => !x.Deleted && x.Id == RowRule.Rule.OperationId.Value).Name;
                                                        if (OperationStatic == "==")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean == Convert.ToBoolean(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime == Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble == Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString == PropObject.ToString())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "!=")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean != Convert.ToBoolean(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime != Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble != Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString != PropObject.ToString())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "<")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime > Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble > Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "<=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime >= Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble >= Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == ">")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime < Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble < Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == ">=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime <= Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble <= Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                else if (RowRule.Rule.dynamicAttId != null)
                                                {
                                                    TLIdynamicAttLibValue RuleDynamicAttribute = _unitOfWork.DynamicAttLibRepository.GetWhereFirst(x =>
                                                        x.DynamicAttId == RowRule.Rule.dynamicAttId.Value && x.InventoryId == SideArmLibrary.Id);

                                                    if (RuleDynamicAttribute != null)
                                                    {
                                                        string OperationDynamic = _unitOfWork.OperationRepository.GetWhereFirst(x => !x.Deleted && x.Id == RowRule.Rule.OperationId.Value).Name;

                                                        if (OperationDynamic == "==")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null && RuleDynamicAttribute.ValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean == RuleDynamicAttribute.ValueBoolean)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime == RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble == RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString) && !string.IsNullOrEmpty(RuleDynamicAttribute.ValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString.ToLower() == RuleDynamicAttribute.ValueString.ToLower())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "!=")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null && RuleDynamicAttribute.ValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean != RuleDynamicAttribute.ValueBoolean)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime != RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble != RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString) && !string.IsNullOrEmpty(RuleDynamicAttribute.ValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString.ToLower() != RuleDynamicAttribute.ValueString.ToLower())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == ">")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime > RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble > RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == ">=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime >= RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble >= RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "<")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime < RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble < RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "<=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime <= RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble <= RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (Succeed == DependencyRow.RowRules.Count())
                                            {
                                                TLIdynamicAttLibValue Check = ListToAdd.FirstOrDefault(x =>
                                                    !x.disable && x.DynamicAttId == DynamicAttId && x.tablesNamesId == addDependencyViewModel.tablesNamesId &&
                                                    x.InventoryId == SideArmLibrary.Id);

                                                if (Check == null)
                                                {
                                                    ListToAdd.Add(new TLIdynamicAttLibValue
                                                    {
                                                        disable = false,
                                                        DynamicAttId = DynamicAttId,
                                                        InventoryId = SideArmLibrary.Id,
                                                        tablesNamesId = addDependencyViewModel.tablesNamesId,
                                                        ValueBoolean = addDependencyViewModel.BooleanResult,
                                                        ValueString = addDependencyViewModel.StringResult,
                                                        ValueDateTime = addDependencyViewModel.DateTimeResult,
                                                        ValueDouble = addDependencyViewModel.DoubleResult
                                                    });
                                                }
                                            }
                                        }
                                        if (addDependencyViewModel.BooleanDefaultValue != null || addDependencyViewModel.DoubleDefaultValue != null ||
                                            addDependencyViewModel.DateTimeDefaultValue != null || !string.IsNullOrEmpty(addDependencyViewModel.StringDefaultValue))
                                        {
                                            TLIdynamicAttLibValue Check = ListToAdd.FirstOrDefault(x =>
                                                !x.disable && x.DynamicAttId == DynamicAttId && x.tablesNamesId == addDependencyViewModel.tablesNamesId &&
                                                x.InventoryId == SideArmLibrary.Id);

                                            if (Check == null)
                                            {
                                                ListToAdd.Add(new TLIdynamicAttLibValue
                                                {
                                                    disable = false,
                                                    DynamicAttId = DynamicAttId,
                                                    InventoryId = SideArmLibrary.Id,
                                                    tablesNamesId = addDependencyViewModel.tablesNamesId,
                                                    ValueBoolean = addDependencyViewModel.BooleanDefaultValue,
                                                    ValueString = addDependencyViewModel.StringDefaultValue,
                                                    ValueDateTime = addDependencyViewModel.DateTimeDefaultValue,
                                                    ValueDouble = addDependencyViewModel.DoubleDefaultValue
                                                });
                                            }
                                        }

                                        _unitOfWork.DynamicAttLibRepository.AddRange(ListToAdd);
                                        _unitOfWork.SaveChanges();
                                    }
                                }
                            }

                            // Other Inventories..
                            else if (addDependencyViewModel.TableName.ToLower() == TablesNames.TLIcabinetPowerLibrary.ToString().ToLower())
                            {
                                List<CabinetPowerLibraryViewModel> CabinetPowerLibraries = _mapper.Map<List<CabinetPowerLibraryViewModel>>(_unitOfWork.CabinetPowerLibraryRepository.GetIncludeWhere(x =>
                                    x.Id > 0 && !x.Deleted, x => x.CabinetPowerType).ToList());

                                foreach (DependencyViewModel Dependency in addDependencyViewModel.Dependencies)
                                {
                                    foreach (CabinetPowerLibraryViewModel CabinetPowerLibrary in CabinetPowerLibraries)
                                    {
                                        List<TLIdynamicAttLibValue> ListToAdd = new List<TLIdynamicAttLibValue>();

                                        foreach (AddDependencyRowViewModel DependencyRow in Dependency.DependencyRows)
                                        {
                                            int Succeed = 0;

                                            foreach (AddRowRuleViewModel RowRule in DependencyRow.RowRules)
                                            {
                                                if (RowRule.Rule.attributeActivatedId != null)
                                                {
                                                    TLIattributeActivated RuleStaticAttribute = _unitOfWork.AttributeActivatedRepository.GetByID(RowRule.Rule.attributeActivatedId.Value);

                                                    PropertyInfo LibraryProp = typeof(CabinetPowerLibraryViewModel).GetProperties().FirstOrDefault(x =>
                                                        x.Name.ToLower() == RuleStaticAttribute.Key.ToLower());

                                                    object PropObject = LibraryProp.GetValue(CabinetPowerLibrary, null);
                                                    if (PropObject != null)
                                                    {
                                                        string OperationStatic = _unitOfWork.OperationRepository.GetWhereFirst(x => !x.Deleted && x.Id == RowRule.Rule.OperationId.Value).Name;
                                                        if (OperationStatic == "==")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean == Convert.ToBoolean(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime == Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble == Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString == PropObject.ToString())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "!=")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean != Convert.ToBoolean(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime != Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble != Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString != PropObject.ToString())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "<")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime > Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble > Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "<=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime >= Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble >= Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == ">")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime < Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble < Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == ">=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime <= Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble <= Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                else if (RowRule.Rule.dynamicAttId != null)
                                                {
                                                    TLIdynamicAttLibValue RuleDynamicAttribute = _unitOfWork.DynamicAttLibRepository.GetWhereFirst(x =>
                                                        x.DynamicAttId == RowRule.Rule.dynamicAttId.Value && x.InventoryId == CabinetPowerLibrary.Id);

                                                    if (RuleDynamicAttribute != null)
                                                    {
                                                        string OperationDynamic = _unitOfWork.OperationRepository.GetWhereFirst(x => !x.Deleted && x.Id == RowRule.Rule.OperationId.Value).Name;

                                                        if (OperationDynamic == "==")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null && RuleDynamicAttribute.ValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean == RuleDynamicAttribute.ValueBoolean)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime == RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble == RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString) && !string.IsNullOrEmpty(RuleDynamicAttribute.ValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString.ToLower() == RuleDynamicAttribute.ValueString.ToLower())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "!=")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null && RuleDynamicAttribute.ValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean != RuleDynamicAttribute.ValueBoolean)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime != RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble != RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString) && !string.IsNullOrEmpty(RuleDynamicAttribute.ValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString.ToLower() != RuleDynamicAttribute.ValueString.ToLower())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == ">")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime > RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble > RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == ">=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime >= RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble >= RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "<")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime < RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble < RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "<=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime <= RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble <= RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (Succeed == DependencyRow.RowRules.Count())
                                            {
                                                TLIdynamicAttLibValue Check = ListToAdd.FirstOrDefault(x =>
                                                    !x.disable && x.DynamicAttId == DynamicAttId && x.tablesNamesId == addDependencyViewModel.tablesNamesId &&
                                                    x.InventoryId == CabinetPowerLibrary.Id);

                                                if (Check == null)
                                                {
                                                    ListToAdd.Add(new TLIdynamicAttLibValue
                                                    {
                                                        disable = false,
                                                        DynamicAttId = DynamicAttId,
                                                        InventoryId = CabinetPowerLibrary.Id,
                                                        tablesNamesId = addDependencyViewModel.tablesNamesId,
                                                        ValueBoolean = addDependencyViewModel.BooleanResult,
                                                        ValueString = addDependencyViewModel.StringResult,
                                                        ValueDateTime = addDependencyViewModel.DateTimeResult,
                                                        ValueDouble = addDependencyViewModel.DoubleResult
                                                    });
                                                }
                                            }
                                        }
                                        if (addDependencyViewModel.BooleanDefaultValue != null || addDependencyViewModel.DoubleDefaultValue != null ||
                                            addDependencyViewModel.DateTimeDefaultValue != null || !string.IsNullOrEmpty(addDependencyViewModel.StringDefaultValue))
                                        {
                                            TLIdynamicAttLibValue Check = ListToAdd.FirstOrDefault(x =>
                                                !x.disable && x.DynamicAttId == DynamicAttId && x.tablesNamesId == addDependencyViewModel.tablesNamesId &&
                                                x.InventoryId == CabinetPowerLibrary.Id);

                                            if (Check == null)
                                            {
                                                ListToAdd.Add(new TLIdynamicAttLibValue
                                                {
                                                    disable = false,
                                                    DynamicAttId = DynamicAttId,
                                                    InventoryId = CabinetPowerLibrary.Id,
                                                    tablesNamesId = addDependencyViewModel.tablesNamesId,
                                                    ValueBoolean = addDependencyViewModel.BooleanDefaultValue,
                                                    ValueString = addDependencyViewModel.StringDefaultValue,
                                                    ValueDateTime = addDependencyViewModel.DateTimeDefaultValue,
                                                    ValueDouble = addDependencyViewModel.DoubleDefaultValue
                                                });
                                            }
                                        }

                                        _unitOfWork.DynamicAttLibRepository.AddRange(ListToAdd);
                                        _unitOfWork.SaveChanges();
                                    }
                                }
                            }
                            else if (addDependencyViewModel.TableName.ToLower() == TablesNames.TLIcabinetTelecomLibrary.ToString().ToLower())
                            {
                                List<CabinetTelecomLibraryViewModel> CabinetTelecomLibraries = _mapper.Map<List<CabinetTelecomLibraryViewModel>>(_unitOfWork.CabinetTelecomLibraryRepository.GetIncludeWhere(x =>
                                    x.Id > 0 && !x.Deleted, x => x.TelecomType).ToList());

                                foreach (DependencyViewModel Dependency in addDependencyViewModel.Dependencies)
                                {
                                    foreach (CabinetTelecomLibraryViewModel CabinetTelecomLibrary in CabinetTelecomLibraries)
                                    {
                                        List<TLIdynamicAttLibValue> ListToAdd = new List<TLIdynamicAttLibValue>();

                                        foreach (AddDependencyRowViewModel DependencyRow in Dependency.DependencyRows)
                                        {
                                            int Succeed = 0;

                                            foreach (AddRowRuleViewModel RowRule in DependencyRow.RowRules)
                                            {
                                                if (RowRule.Rule.attributeActivatedId != null)
                                                {
                                                    TLIattributeActivated RuleStaticAttribute = _unitOfWork.AttributeActivatedRepository.GetByID(RowRule.Rule.attributeActivatedId.Value);

                                                    PropertyInfo LibraryProp = typeof(CabinetTelecomLibraryViewModel).GetProperties().FirstOrDefault(x =>
                                                        x.Name.ToLower() == RuleStaticAttribute.Key.ToLower());

                                                    object PropObject = LibraryProp.GetValue(CabinetTelecomLibrary, null);
                                                    if (PropObject != null)
                                                    {
                                                        string OperationStatic = _unitOfWork.OperationRepository.GetWhereFirst(x => !x.Deleted && x.Id == RowRule.Rule.OperationId.Value).Name;
                                                        if (OperationStatic == "==")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean == Convert.ToBoolean(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime == Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble == Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString == PropObject.ToString())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "!=")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean != Convert.ToBoolean(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime != Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble != Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString != PropObject.ToString())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "<")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime > Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble > Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "<=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime >= Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble >= Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == ">")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime < Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble < Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == ">=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime <= Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble <= Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                else if (RowRule.Rule.dynamicAttId != null)
                                                {
                                                    TLIdynamicAttLibValue RuleDynamicAttribute = _unitOfWork.DynamicAttLibRepository.GetWhereFirst(x =>
                                                        x.DynamicAttId == RowRule.Rule.dynamicAttId.Value && x.InventoryId == CabinetTelecomLibrary.Id);

                                                    if (RuleDynamicAttribute != null)
                                                    {
                                                        string OperationDynamic = _unitOfWork.OperationRepository.GetWhereFirst(x => !x.Deleted && x.Id == RowRule.Rule.OperationId.Value).Name;

                                                        if (OperationDynamic == "==")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null && RuleDynamicAttribute.ValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean == RuleDynamicAttribute.ValueBoolean)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime == RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble == RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString) && !string.IsNullOrEmpty(RuleDynamicAttribute.ValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString.ToLower() == RuleDynamicAttribute.ValueString.ToLower())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "!=")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null && RuleDynamicAttribute.ValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean != RuleDynamicAttribute.ValueBoolean)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime != RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble != RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString) && !string.IsNullOrEmpty(RuleDynamicAttribute.ValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString.ToLower() != RuleDynamicAttribute.ValueString.ToLower())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == ">")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime > RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble > RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == ">=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime >= RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble >= RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "<")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime < RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble < RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "<=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime <= RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble <= RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (Succeed == DependencyRow.RowRules.Count())
                                            {
                                                TLIdynamicAttLibValue Check = ListToAdd.FirstOrDefault(x =>
                                                    !x.disable && x.DynamicAttId == DynamicAttId && x.tablesNamesId == addDependencyViewModel.tablesNamesId &&
                                                    x.InventoryId == CabinetTelecomLibrary.Id);

                                                if (Check == null)
                                                {
                                                    ListToAdd.Add(new TLIdynamicAttLibValue
                                                    {
                                                        disable = false,
                                                        DynamicAttId = DynamicAttId,
                                                        InventoryId = CabinetTelecomLibrary.Id,
                                                        tablesNamesId = addDependencyViewModel.tablesNamesId,
                                                        ValueBoolean = addDependencyViewModel.BooleanResult,
                                                        ValueString = addDependencyViewModel.StringResult,
                                                        ValueDateTime = addDependencyViewModel.DateTimeResult,
                                                        ValueDouble = addDependencyViewModel.DoubleResult
                                                    });
                                                }
                                            }
                                        }
                                        if (addDependencyViewModel.BooleanDefaultValue != null || addDependencyViewModel.DoubleDefaultValue != null ||
                                            addDependencyViewModel.DateTimeDefaultValue != null || !string.IsNullOrEmpty(addDependencyViewModel.StringDefaultValue))
                                        {
                                            TLIdynamicAttLibValue Check = ListToAdd.FirstOrDefault(x =>
                                                !x.disable && x.DynamicAttId == DynamicAttId && x.tablesNamesId == addDependencyViewModel.tablesNamesId &&
                                                x.InventoryId == CabinetTelecomLibrary.Id);

                                            if (Check == null)
                                            {
                                                ListToAdd.Add(new TLIdynamicAttLibValue
                                                {
                                                    disable = false,
                                                    DynamicAttId = DynamicAttId,
                                                    InventoryId = CabinetTelecomLibrary.Id,
                                                    tablesNamesId = addDependencyViewModel.tablesNamesId,
                                                    ValueBoolean = addDependencyViewModel.BooleanDefaultValue,
                                                    ValueString = addDependencyViewModel.StringDefaultValue,
                                                    ValueDateTime = addDependencyViewModel.DateTimeDefaultValue,
                                                    ValueDouble = addDependencyViewModel.DoubleDefaultValue
                                                });
                                            }
                                        }

                                        _unitOfWork.DynamicAttLibRepository.AddRange(ListToAdd);
                                        _unitOfWork.SaveChanges();
                                    }
                                }
                            }
                            else if (addDependencyViewModel.TableName.ToLower() == TablesNames.TLIsolarLibrary.ToString().ToLower())
                            {
                                List<SolarLibraryViewModel> SolarLibraries = _mapper.Map<List<SolarLibraryViewModel>>(_unitOfWork.SolarLibraryRepository.GetIncludeWhere(x =>
                                    x.Id > 0 && !x.Deleted, x => x.Capacity).ToList());

                                foreach (DependencyViewModel Dependency in addDependencyViewModel.Dependencies)
                                {
                                    foreach (SolarLibraryViewModel SolarLibrary in SolarLibraries)
                                    {
                                        List<TLIdynamicAttLibValue> ListToAdd = new List<TLIdynamicAttLibValue>();

                                        foreach (AddDependencyRowViewModel DependencyRow in Dependency.DependencyRows)
                                        {
                                            int Succeed = 0;

                                            foreach (AddRowRuleViewModel RowRule in DependencyRow.RowRules)
                                            {
                                                if (RowRule.Rule.attributeActivatedId != null)
                                                {
                                                    TLIattributeActivated RuleStaticAttribute = _unitOfWork.AttributeActivatedRepository.GetByID(RowRule.Rule.attributeActivatedId.Value);

                                                    PropertyInfo LibraryProp = typeof(SolarLibraryViewModel).GetProperties().FirstOrDefault(x =>
                                                        x.Name.ToLower() == RuleStaticAttribute.Key.ToLower());

                                                    object PropObject = LibraryProp.GetValue(SolarLibrary, null);
                                                    if (PropObject != null)
                                                    {
                                                        string OperationStatic = _unitOfWork.OperationRepository.GetWhereFirst(x => !x.Deleted && x.Id == RowRule.Rule.OperationId.Value).Name;
                                                        if (OperationStatic == "==")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean == Convert.ToBoolean(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime == Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble == Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString == PropObject.ToString())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "!=")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean != Convert.ToBoolean(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime != Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble != Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString != PropObject.ToString())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "<")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime > Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble > Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "<=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime >= Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble >= Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == ">")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime < Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble < Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == ">=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime <= Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble <= Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                else if (RowRule.Rule.dynamicAttId != null)
                                                {
                                                    TLIdynamicAttLibValue RuleDynamicAttribute = _unitOfWork.DynamicAttLibRepository.GetWhereFirst(x =>
                                                        x.DynamicAttId == RowRule.Rule.dynamicAttId.Value && x.InventoryId == SolarLibrary.Id);

                                                    if (RuleDynamicAttribute != null)
                                                    {
                                                        string OperationDynamic = _unitOfWork.OperationRepository.GetWhereFirst(x => !x.Deleted && x.Id == RowRule.Rule.OperationId.Value).Name;

                                                        if (OperationDynamic == "==")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null && RuleDynamicAttribute.ValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean == RuleDynamicAttribute.ValueBoolean)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime == RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble == RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString) && !string.IsNullOrEmpty(RuleDynamicAttribute.ValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString.ToLower() == RuleDynamicAttribute.ValueString.ToLower())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "!=")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null && RuleDynamicAttribute.ValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean != RuleDynamicAttribute.ValueBoolean)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime != RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble != RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString) && !string.IsNullOrEmpty(RuleDynamicAttribute.ValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString.ToLower() != RuleDynamicAttribute.ValueString.ToLower())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == ">")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime > RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble > RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == ">=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime >= RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble >= RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "<")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime < RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble < RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "<=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime <= RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble <= RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (Succeed == DependencyRow.RowRules.Count())
                                            {
                                                TLIdynamicAttLibValue Check = ListToAdd.FirstOrDefault(x =>
                                                    !x.disable && x.DynamicAttId == DynamicAttId && x.tablesNamesId == addDependencyViewModel.tablesNamesId &&
                                                    x.InventoryId == SolarLibrary.Id);

                                                if (Check == null)
                                                {
                                                    ListToAdd.Add(new TLIdynamicAttLibValue
                                                    {
                                                        disable = false,
                                                        DynamicAttId = DynamicAttId,
                                                        InventoryId = SolarLibrary.Id,
                                                        tablesNamesId = addDependencyViewModel.tablesNamesId,
                                                        ValueBoolean = addDependencyViewModel.BooleanResult,
                                                        ValueString = addDependencyViewModel.StringResult,
                                                        ValueDateTime = addDependencyViewModel.DateTimeResult,
                                                        ValueDouble = addDependencyViewModel.DoubleResult
                                                    });
                                                }
                                            }
                                        }
                                        if (addDependencyViewModel.BooleanDefaultValue != null || addDependencyViewModel.DoubleDefaultValue != null ||
                                            addDependencyViewModel.DateTimeDefaultValue != null || !string.IsNullOrEmpty(addDependencyViewModel.StringDefaultValue))
                                        {
                                            TLIdynamicAttLibValue Check = ListToAdd.FirstOrDefault(x =>
                                                !x.disable && x.DynamicAttId == DynamicAttId && x.tablesNamesId == addDependencyViewModel.tablesNamesId &&
                                                x.InventoryId == SolarLibrary.Id);

                                            if (Check == null)
                                            {
                                                ListToAdd.Add(new TLIdynamicAttLibValue
                                                {
                                                    disable = false,
                                                    DynamicAttId = DynamicAttId,
                                                    InventoryId = SolarLibrary.Id,
                                                    tablesNamesId = addDependencyViewModel.tablesNamesId,
                                                    ValueBoolean = addDependencyViewModel.BooleanDefaultValue,
                                                    ValueString = addDependencyViewModel.StringDefaultValue,
                                                    ValueDateTime = addDependencyViewModel.DateTimeDefaultValue,
                                                    ValueDouble = addDependencyViewModel.DoubleDefaultValue
                                                });
                                            }
                                        }

                                        _unitOfWork.DynamicAttLibRepository.AddRange(ListToAdd);
                                        _unitOfWork.SaveChanges();
                                    }
                                }
                            }
                            else if (addDependencyViewModel.TableName.ToLower() == TablesNames.TLIgeneratorLibrary.ToString().ToLower())
                            {
                                List<GeneratorLibraryViewModel> GeneratorLibraries = _mapper.Map<List<GeneratorLibraryViewModel>>(_unitOfWork.GeneratorLibraryRepository.GetIncludeWhere(x =>
                                    x.Id > 0 && !x.Deleted, x => x.Capacity).ToList());

                                foreach (DependencyViewModel Dependency in addDependencyViewModel.Dependencies)
                                {
                                    foreach (GeneratorLibraryViewModel GeneratorLibrary in GeneratorLibraries)
                                    {
                                        List<TLIdynamicAttLibValue> ListToAdd = new List<TLIdynamicAttLibValue>();

                                        foreach (AddDependencyRowViewModel DependencyRow in Dependency.DependencyRows)
                                        {
                                            int Succeed = 0;

                                            foreach (AddRowRuleViewModel RowRule in DependencyRow.RowRules)
                                            {
                                                if (RowRule.Rule.attributeActivatedId != null)
                                                {
                                                    TLIattributeActivated RuleStaticAttribute = _unitOfWork.AttributeActivatedRepository.GetByID(RowRule.Rule.attributeActivatedId.Value);

                                                    PropertyInfo LibraryProp = typeof(GeneratorLibraryViewModel).GetProperties().FirstOrDefault(x =>
                                                        x.Name.ToLower() == RuleStaticAttribute.Key.ToLower());

                                                    object PropObject = LibraryProp.GetValue(GeneratorLibrary, null);
                                                    if (PropObject != null)
                                                    {
                                                        string OperationStatic = _unitOfWork.OperationRepository.GetWhereFirst(x => !x.Deleted && x.Id == RowRule.Rule.OperationId.Value).Name;
                                                        if (OperationStatic == "==")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean == Convert.ToBoolean(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime == Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble == Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString == PropObject.ToString())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "!=")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean != Convert.ToBoolean(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime != Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble != Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString != PropObject.ToString())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "<")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime > Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble > Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "<=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime >= Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble >= Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == ">")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime < Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble < Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == ">=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime <= Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble <= Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                else if (RowRule.Rule.dynamicAttId != null)
                                                {
                                                    TLIdynamicAttLibValue RuleDynamicAttribute = _unitOfWork.DynamicAttLibRepository.GetWhereFirst(x =>
                                                        x.DynamicAttId == RowRule.Rule.dynamicAttId.Value && x.InventoryId == GeneratorLibrary.Id);

                                                    if (RuleDynamicAttribute != null)
                                                    {
                                                        string OperationDynamic = _unitOfWork.OperationRepository.GetWhereFirst(x => !x.Deleted && x.Id == RowRule.Rule.OperationId.Value).Name;

                                                        if (OperationDynamic == "==")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null && RuleDynamicAttribute.ValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean == RuleDynamicAttribute.ValueBoolean)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime == RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble == RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString) && !string.IsNullOrEmpty(RuleDynamicAttribute.ValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString.ToLower() == RuleDynamicAttribute.ValueString.ToLower())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "!=")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null && RuleDynamicAttribute.ValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean != RuleDynamicAttribute.ValueBoolean)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime != RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble != RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString) && !string.IsNullOrEmpty(RuleDynamicAttribute.ValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString.ToLower() != RuleDynamicAttribute.ValueString.ToLower())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == ">")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime > RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble > RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == ">=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime >= RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble >= RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "<")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime < RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble < RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "<=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime <= RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble <= RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (Succeed == DependencyRow.RowRules.Count())
                                            {
                                                TLIdynamicAttLibValue Check = ListToAdd.FirstOrDefault(x =>
                                                    !x.disable && x.DynamicAttId == DynamicAttId && x.tablesNamesId == addDependencyViewModel.tablesNamesId &&
                                                    x.InventoryId == GeneratorLibrary.Id);

                                                if (Check == null)
                                                {
                                                    ListToAdd.Add(new TLIdynamicAttLibValue
                                                    {
                                                        disable = false,
                                                        DynamicAttId = DynamicAttId,
                                                        InventoryId = GeneratorLibrary.Id,
                                                        tablesNamesId = addDependencyViewModel.tablesNamesId,
                                                        ValueBoolean = addDependencyViewModel.BooleanResult,
                                                        ValueString = addDependencyViewModel.StringResult,
                                                        ValueDateTime = addDependencyViewModel.DateTimeResult,
                                                        ValueDouble = addDependencyViewModel.DoubleResult
                                                    });
                                                }
                                            }
                                        }
                                        if (addDependencyViewModel.BooleanDefaultValue != null || addDependencyViewModel.DoubleDefaultValue != null ||
                                            addDependencyViewModel.DateTimeDefaultValue != null || !string.IsNullOrEmpty(addDependencyViewModel.StringDefaultValue))
                                        {
                                            TLIdynamicAttLibValue Check = ListToAdd.FirstOrDefault(x =>
                                                !x.disable && x.DynamicAttId == DynamicAttId && x.tablesNamesId == addDependencyViewModel.tablesNamesId &&
                                                x.InventoryId == GeneratorLibrary.Id);

                                            if (Check == null)
                                            {
                                                ListToAdd.Add(new TLIdynamicAttLibValue
                                                {
                                                    disable = false,
                                                    DynamicAttId = DynamicAttId,
                                                    InventoryId = GeneratorLibrary.Id,
                                                    tablesNamesId = addDependencyViewModel.tablesNamesId,
                                                    ValueBoolean = addDependencyViewModel.BooleanDefaultValue,
                                                    ValueString = addDependencyViewModel.StringDefaultValue,
                                                    ValueDateTime = addDependencyViewModel.DateTimeDefaultValue,
                                                    ValueDouble = addDependencyViewModel.DoubleDefaultValue
                                                });
                                            }
                                        }

                                        _unitOfWork.DynamicAttLibRepository.AddRange(ListToAdd);
                                        _unitOfWork.SaveChanges();
                                    }
                                }
                            }

                            // Loads..
                            // Microwaves..
                            else if (addDependencyViewModel.TableName.ToLower() == TablesNames.TLImwDishLibrary.ToString().ToLower())
                            {
                                List<MW_DishLibraryViewModel> MWDishLibraries = _mapper.Map<List<MW_DishLibraryViewModel>>(_unitOfWork.MW_DishLibraryRepository.GetIncludeWhere(x =>
                                    x.Id > 0 && !x.Deleted, x => x.asType, x => x.polarityType).ToList());

                                foreach (DependencyViewModel Dependency in addDependencyViewModel.Dependencies)
                                {
                                    foreach (MW_DishLibraryViewModel MWDishLibrary in MWDishLibraries)
                                    {
                                        List<TLIdynamicAttLibValue> ListToAdd = new List<TLIdynamicAttLibValue>();

                                        foreach (AddDependencyRowViewModel DependencyRow in Dependency.DependencyRows)
                                        {
                                            int Succeed = 0;

                                            foreach (AddRowRuleViewModel RowRule in DependencyRow.RowRules)
                                            {
                                                if (RowRule.Rule.attributeActivatedId != null)
                                                {
                                                    TLIattributeActivated RuleStaticAttribute = _unitOfWork.AttributeActivatedRepository.GetByID(RowRule.Rule.attributeActivatedId.Value);

                                                    PropertyInfo LibraryProp = typeof(MW_DishLibraryViewModel).GetProperties().FirstOrDefault(x =>
                                                        x.Name.ToLower() == RuleStaticAttribute.Key.ToLower());

                                                    object PropObject = LibraryProp.GetValue(MWDishLibrary, null);
                                                    if (PropObject != null)
                                                    {
                                                        string OperationStatic = _unitOfWork.OperationRepository.GetWhereFirst(x => !x.Deleted && x.Id == RowRule.Rule.OperationId.Value).Name;
                                                        if (OperationStatic == "==")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean == Convert.ToBoolean(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime == Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble == Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString == PropObject.ToString())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "!=")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean != Convert.ToBoolean(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime != Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble != Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString != PropObject.ToString())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "<")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime > Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble > Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "<=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime >= Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble >= Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == ">")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime < Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble < Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == ">=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime <= Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble <= Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                else if (RowRule.Rule.dynamicAttId != null)
                                                {
                                                    TLIdynamicAttLibValue RuleDynamicAttribute = _unitOfWork.DynamicAttLibRepository.GetWhereFirst(x =>
                                                        x.DynamicAttId == RowRule.Rule.dynamicAttId.Value && x.InventoryId == MWDishLibrary.Id);

                                                    if (RuleDynamicAttribute != null)
                                                    {
                                                        string OperationDynamic = _unitOfWork.OperationRepository.GetWhereFirst(x => !x.Deleted && x.Id == RowRule.Rule.OperationId.Value).Name;

                                                        if (OperationDynamic == "==")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null && RuleDynamicAttribute.ValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean == RuleDynamicAttribute.ValueBoolean)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime == RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble == RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString) && !string.IsNullOrEmpty(RuleDynamicAttribute.ValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString.ToLower() == RuleDynamicAttribute.ValueString.ToLower())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "!=")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null && RuleDynamicAttribute.ValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean != RuleDynamicAttribute.ValueBoolean)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime != RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble != RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString) && !string.IsNullOrEmpty(RuleDynamicAttribute.ValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString.ToLower() != RuleDynamicAttribute.ValueString.ToLower())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == ">")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime > RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble > RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == ">=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime >= RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble >= RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "<")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime < RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble < RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "<=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime <= RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble <= RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (Succeed == DependencyRow.RowRules.Count())
                                            {
                                                TLIdynamicAttLibValue Check = ListToAdd.FirstOrDefault(x =>
                                                    !x.disable && x.DynamicAttId == DynamicAttId && x.tablesNamesId == addDependencyViewModel.tablesNamesId &&
                                                    x.InventoryId == MWDishLibrary.Id);

                                                if (Check == null)
                                                {
                                                    ListToAdd.Add(new TLIdynamicAttLibValue
                                                    {
                                                        disable = false,
                                                        DynamicAttId = DynamicAttId,
                                                        InventoryId = MWDishLibrary.Id,
                                                        tablesNamesId = addDependencyViewModel.tablesNamesId,
                                                        ValueBoolean = addDependencyViewModel.BooleanResult,
                                                        ValueString = addDependencyViewModel.StringResult,
                                                        ValueDateTime = addDependencyViewModel.DateTimeResult,
                                                        ValueDouble = addDependencyViewModel.DoubleResult
                                                    });
                                                }
                                            }
                                        }
                                        if (addDependencyViewModel.BooleanDefaultValue != null || addDependencyViewModel.DoubleDefaultValue != null ||
                                            addDependencyViewModel.DateTimeDefaultValue != null || !string.IsNullOrEmpty(addDependencyViewModel.StringDefaultValue))
                                        {
                                            TLIdynamicAttLibValue Check = ListToAdd.FirstOrDefault(x =>
                                                !x.disable && x.DynamicAttId == DynamicAttId && x.tablesNamesId == addDependencyViewModel.tablesNamesId &&
                                                x.InventoryId == MWDishLibrary.Id);

                                            if (Check == null)
                                            {
                                                ListToAdd.Add(new TLIdynamicAttLibValue
                                                {
                                                    disable = false,
                                                    DynamicAttId = DynamicAttId,
                                                    InventoryId = MWDishLibrary.Id,
                                                    tablesNamesId = addDependencyViewModel.tablesNamesId,
                                                    ValueBoolean = addDependencyViewModel.BooleanDefaultValue,
                                                    ValueString = addDependencyViewModel.StringDefaultValue,
                                                    ValueDateTime = addDependencyViewModel.DateTimeDefaultValue,
                                                    ValueDouble = addDependencyViewModel.DoubleDefaultValue
                                                });
                                            }
                                        }

                                        _unitOfWork.DynamicAttLibRepository.AddRange(ListToAdd);
                                        _unitOfWork.SaveChanges();
                                    }
                                }
                            }
                            else if (addDependencyViewModel.TableName.ToLower() == TablesNames.TLImwODULibrary.ToString().ToLower())
                            {
                                List<MW_ODULibraryViewModel> MWODULibraries = _mapper.Map<List<MW_ODULibraryViewModel>>(_unitOfWork.MW_ODULibraryRepository.GetIncludeWhere(x =>
                                    x.Id > 0 && !x.Deleted, x => x.parity).ToList());

                                foreach (DependencyViewModel Dependency in addDependencyViewModel.Dependencies)
                                {
                                    foreach (MW_ODULibraryViewModel MWODULibrary in MWODULibraries)
                                    {
                                        List<TLIdynamicAttLibValue> ListToAdd = new List<TLIdynamicAttLibValue>();

                                        foreach (AddDependencyRowViewModel DependencyRow in Dependency.DependencyRows)
                                        {
                                            int Succeed = 0;

                                            foreach (AddRowRuleViewModel RowRule in DependencyRow.RowRules)
                                            {
                                                if (RowRule.Rule.attributeActivatedId != null)
                                                {
                                                    TLIattributeActivated RuleStaticAttribute = _unitOfWork.AttributeActivatedRepository.GetByID(RowRule.Rule.attributeActivatedId.Value);

                                                    PropertyInfo LibraryProp = typeof(MW_ODULibraryViewModel).GetProperties().FirstOrDefault(x =>
                                                        x.Name.ToLower() == RuleStaticAttribute.Key.ToLower());

                                                    object PropObject = LibraryProp.GetValue(MWODULibrary, null);
                                                    if (PropObject != null)
                                                    {
                                                        string OperationStatic = _unitOfWork.OperationRepository.GetWhereFirst(x => !x.Deleted && x.Id == RowRule.Rule.OperationId.Value).Name;
                                                        if (OperationStatic == "==")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean == Convert.ToBoolean(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime == Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble == Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString == PropObject.ToString())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "!=")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean != Convert.ToBoolean(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime != Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble != Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString != PropObject.ToString())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "<")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime > Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble > Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "<=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime >= Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble >= Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == ">")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime < Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble < Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == ">=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime <= Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble <= Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                else if (RowRule.Rule.dynamicAttId != null)
                                                {
                                                    TLIdynamicAttLibValue RuleDynamicAttribute = _unitOfWork.DynamicAttLibRepository.GetWhereFirst(x =>
                                                        x.DynamicAttId == RowRule.Rule.dynamicAttId.Value && x.InventoryId == MWODULibrary.Id);

                                                    if (RuleDynamicAttribute != null)
                                                    {
                                                        string OperationDynamic = _unitOfWork.OperationRepository.GetWhereFirst(x => !x.Deleted && x.Id == RowRule.Rule.OperationId.Value).Name;

                                                        if (OperationDynamic == "==")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null && RuleDynamicAttribute.ValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean == RuleDynamicAttribute.ValueBoolean)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime == RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble == RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString) && !string.IsNullOrEmpty(RuleDynamicAttribute.ValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString.ToLower() == RuleDynamicAttribute.ValueString.ToLower())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "!=")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null && RuleDynamicAttribute.ValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean != RuleDynamicAttribute.ValueBoolean)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime != RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble != RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString) && !string.IsNullOrEmpty(RuleDynamicAttribute.ValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString.ToLower() != RuleDynamicAttribute.ValueString.ToLower())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == ">")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime > RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble > RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == ">=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime >= RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble >= RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "<")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime < RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble < RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "<=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime <= RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble <= RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (Succeed == DependencyRow.RowRules.Count())
                                            {
                                                TLIdynamicAttLibValue Check = ListToAdd.FirstOrDefault(x =>
                                                    !x.disable && x.DynamicAttId == DynamicAttId && x.tablesNamesId == addDependencyViewModel.tablesNamesId &&
                                                    x.InventoryId == MWODULibrary.Id);

                                                if (Check == null)
                                                {
                                                    ListToAdd.Add(new TLIdynamicAttLibValue
                                                    {
                                                        disable = false,
                                                        DynamicAttId = DynamicAttId,
                                                        InventoryId = MWODULibrary.Id,
                                                        tablesNamesId = addDependencyViewModel.tablesNamesId,
                                                        ValueBoolean = addDependencyViewModel.BooleanResult,
                                                        ValueString = addDependencyViewModel.StringResult,
                                                        ValueDateTime = addDependencyViewModel.DateTimeResult,
                                                        ValueDouble = addDependencyViewModel.DoubleResult
                                                    });
                                                }
                                            }
                                        }
                                        if (addDependencyViewModel.BooleanDefaultValue != null || addDependencyViewModel.DoubleDefaultValue != null ||
                                            addDependencyViewModel.DateTimeDefaultValue != null || !string.IsNullOrEmpty(addDependencyViewModel.StringDefaultValue))
                                        {
                                            TLIdynamicAttLibValue Check = ListToAdd.FirstOrDefault(x =>
                                                !x.disable && x.DynamicAttId == DynamicAttId && x.tablesNamesId == addDependencyViewModel.tablesNamesId &&
                                                x.InventoryId == MWODULibrary.Id);

                                            if (Check == null)
                                            {
                                                ListToAdd.Add(new TLIdynamicAttLibValue
                                                {
                                                    disable = false,
                                                    DynamicAttId = DynamicAttId,
                                                    InventoryId = MWODULibrary.Id,
                                                    tablesNamesId = addDependencyViewModel.tablesNamesId,
                                                    ValueBoolean = addDependencyViewModel.BooleanDefaultValue,
                                                    ValueString = addDependencyViewModel.StringDefaultValue,
                                                    ValueDateTime = addDependencyViewModel.DateTimeDefaultValue,
                                                    ValueDouble = addDependencyViewModel.DoubleDefaultValue
                                                });
                                            }
                                        }

                                        _unitOfWork.DynamicAttLibRepository.AddRange(ListToAdd);
                                        _unitOfWork.SaveChanges();
                                    }
                                }
                            }
                            else if (addDependencyViewModel.TableName.ToLower() == TablesNames.TLImwBULibrary.ToString().ToLower())
                            {
                                List<MW_BULibraryViewModel> MWBULibraries = _mapper.Map<List<MW_BULibraryViewModel>>(_unitOfWork.MW_BULibraryRepository.GetIncludeWhere(x =>
                                    x.Id > 0 && !x.Deleted, x => x.diversityType).ToList());

                                foreach (DependencyViewModel Dependency in addDependencyViewModel.Dependencies)
                                {
                                    foreach (MW_BULibraryViewModel MWBULibrary in MWBULibraries)
                                    {
                                        List<TLIdynamicAttLibValue> ListToAdd = new List<TLIdynamicAttLibValue>();

                                        foreach (AddDependencyRowViewModel DependencyRow in Dependency.DependencyRows)
                                        {
                                            int Succeed = 0;

                                            foreach (AddRowRuleViewModel RowRule in DependencyRow.RowRules)
                                            {
                                                if (RowRule.Rule.attributeActivatedId != null)
                                                {
                                                    TLIattributeActivated RuleStaticAttribute = _unitOfWork.AttributeActivatedRepository.GetByID(RowRule.Rule.attributeActivatedId.Value);

                                                    PropertyInfo LibraryProp = typeof(MW_BULibraryViewModel).GetProperties().FirstOrDefault(x =>
                                                        x.Name.ToLower() == RuleStaticAttribute.Key.ToLower());

                                                    object PropObject = LibraryProp.GetValue(MWBULibrary, null);
                                                    if (PropObject != null)
                                                    {
                                                        string OperationStatic = _unitOfWork.OperationRepository.GetWhereFirst(x => !x.Deleted && x.Id == RowRule.Rule.OperationId.Value).Name;
                                                        if (OperationStatic == "==")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean == Convert.ToBoolean(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime == Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble == Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString == PropObject.ToString())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "!=")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean != Convert.ToBoolean(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime != Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble != Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString != PropObject.ToString())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "<")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime > Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble > Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "<=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime >= Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble >= Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == ">")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime < Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble < Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == ">=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime <= Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble <= Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                else if (RowRule.Rule.dynamicAttId != null)
                                                {
                                                    TLIdynamicAttLibValue RuleDynamicAttribute = _unitOfWork.DynamicAttLibRepository.GetWhereFirst(x =>
                                                        x.DynamicAttId == RowRule.Rule.dynamicAttId.Value && x.InventoryId == MWBULibrary.Id);

                                                    if (RuleDynamicAttribute != null)
                                                    {
                                                        string OperationDynamic = _unitOfWork.OperationRepository.GetWhereFirst(x => !x.Deleted && x.Id == RowRule.Rule.OperationId.Value).Name;

                                                        if (OperationDynamic == "==")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null && RuleDynamicAttribute.ValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean == RuleDynamicAttribute.ValueBoolean)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime == RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble == RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString) && !string.IsNullOrEmpty(RuleDynamicAttribute.ValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString.ToLower() == RuleDynamicAttribute.ValueString.ToLower())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "!=")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null && RuleDynamicAttribute.ValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean != RuleDynamicAttribute.ValueBoolean)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime != RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble != RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString) && !string.IsNullOrEmpty(RuleDynamicAttribute.ValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString.ToLower() != RuleDynamicAttribute.ValueString.ToLower())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == ">")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime > RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble > RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == ">=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime >= RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble >= RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "<")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime < RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble < RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "<=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime <= RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble <= RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (Succeed == DependencyRow.RowRules.Count())
                                            {
                                                TLIdynamicAttLibValue Check = ListToAdd.FirstOrDefault(x =>
                                                    !x.disable && x.DynamicAttId == DynamicAttId && x.tablesNamesId == addDependencyViewModel.tablesNamesId &&
                                                    x.InventoryId == MWBULibrary.Id);

                                                if (Check == null)
                                                {
                                                    ListToAdd.Add(new TLIdynamicAttLibValue
                                                    {
                                                        disable = false,
                                                        DynamicAttId = DynamicAttId,
                                                        InventoryId = MWBULibrary.Id,
                                                        tablesNamesId = addDependencyViewModel.tablesNamesId,
                                                        ValueBoolean = addDependencyViewModel.BooleanResult,
                                                        ValueString = addDependencyViewModel.StringResult,
                                                        ValueDateTime = addDependencyViewModel.DateTimeResult,
                                                        ValueDouble = addDependencyViewModel.DoubleResult
                                                    });
                                                }
                                            }
                                        }
                                        if (addDependencyViewModel.BooleanDefaultValue != null || addDependencyViewModel.DoubleDefaultValue != null ||
                                            addDependencyViewModel.DateTimeDefaultValue != null || !string.IsNullOrEmpty(addDependencyViewModel.StringDefaultValue))
                                        {
                                            TLIdynamicAttLibValue Check = ListToAdd.FirstOrDefault(x =>
                                                !x.disable && x.DynamicAttId == DynamicAttId && x.tablesNamesId == addDependencyViewModel.tablesNamesId &&
                                                x.InventoryId == MWBULibrary.Id);

                                            if (Check == null)
                                            {
                                                ListToAdd.Add(new TLIdynamicAttLibValue
                                                {
                                                    disable = false,
                                                    DynamicAttId = DynamicAttId,
                                                    InventoryId = MWBULibrary.Id,
                                                    tablesNamesId = addDependencyViewModel.tablesNamesId,
                                                    ValueBoolean = addDependencyViewModel.BooleanDefaultValue,
                                                    ValueString = addDependencyViewModel.StringDefaultValue,
                                                    ValueDateTime = addDependencyViewModel.DateTimeDefaultValue,
                                                    ValueDouble = addDependencyViewModel.DoubleDefaultValue
                                                });
                                            }
                                        }

                                        _unitOfWork.DynamicAttLibRepository.AddRange(ListToAdd);
                                        _unitOfWork.SaveChanges();
                                    }
                                }
                            }
                            else if (addDependencyViewModel.TableName.ToLower() == TablesNames.TLImwRFULibrary.ToString().ToLower())
                            {
                                List<MW_RFULibraryViewModel> MWRFULibraries = _mapper.Map<List<MW_RFULibraryViewModel>>(_unitOfWork.MW_RFULibraryRepository.GetIncludeWhere(x =>
                                    x.Id > 0 && !x.Deleted, x => x.boardType, x => x.diversityType).ToList());

                                foreach (DependencyViewModel Dependency in addDependencyViewModel.Dependencies)
                                {
                                    foreach (MW_RFULibraryViewModel MWRFULibrary in MWRFULibraries)
                                    {
                                        List<TLIdynamicAttLibValue> ListToAdd = new List<TLIdynamicAttLibValue>();

                                        foreach (AddDependencyRowViewModel DependencyRow in Dependency.DependencyRows)
                                        {
                                            int Succeed = 0;

                                            foreach (AddRowRuleViewModel RowRule in DependencyRow.RowRules)
                                            {
                                                if (RowRule.Rule.attributeActivatedId != null)
                                                {
                                                    TLIattributeActivated RuleStaticAttribute = _unitOfWork.AttributeActivatedRepository.GetByID(RowRule.Rule.attributeActivatedId.Value);

                                                    PropertyInfo LibraryProp = typeof(MW_RFULibraryViewModel).GetProperties().FirstOrDefault(x =>
                                                        x.Name.ToLower() == RuleStaticAttribute.Key.ToLower());

                                                    object PropObject = LibraryProp.GetValue(MWRFULibrary, null);
                                                    if (PropObject != null)
                                                    {
                                                        string OperationStatic = _unitOfWork.OperationRepository.GetWhereFirst(x => !x.Deleted && x.Id == RowRule.Rule.OperationId.Value).Name;
                                                        if (OperationStatic == "==")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean == Convert.ToBoolean(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime == Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble == Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString == PropObject.ToString())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "!=")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean != Convert.ToBoolean(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime != Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble != Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString != PropObject.ToString())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "<")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime > Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble > Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "<=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime >= Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble >= Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == ">")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime < Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble < Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == ">=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime <= Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble <= Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                else if (RowRule.Rule.dynamicAttId != null)
                                                {
                                                    TLIdynamicAttLibValue RuleDynamicAttribute = _unitOfWork.DynamicAttLibRepository.GetWhereFirst(x =>
                                                        x.DynamicAttId == RowRule.Rule.dynamicAttId.Value && x.InventoryId == MWRFULibrary.Id);

                                                    if (RuleDynamicAttribute != null)
                                                    {
                                                        string OperationDynamic = _unitOfWork.OperationRepository.GetWhereFirst(x => !x.Deleted && x.Id == RowRule.Rule.OperationId.Value).Name;

                                                        if (OperationDynamic == "==")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null && RuleDynamicAttribute.ValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean == RuleDynamicAttribute.ValueBoolean)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime == RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble == RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString) && !string.IsNullOrEmpty(RuleDynamicAttribute.ValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString.ToLower() == RuleDynamicAttribute.ValueString.ToLower())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "!=")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null && RuleDynamicAttribute.ValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean != RuleDynamicAttribute.ValueBoolean)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime != RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble != RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString) && !string.IsNullOrEmpty(RuleDynamicAttribute.ValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString.ToLower() != RuleDynamicAttribute.ValueString.ToLower())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == ">")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime > RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble > RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == ">=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime >= RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble >= RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "<")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime < RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble < RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "<=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime <= RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble <= RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (Succeed == DependencyRow.RowRules.Count())
                                            {
                                                TLIdynamicAttLibValue Check = ListToAdd.FirstOrDefault(x =>
                                                    !x.disable && x.DynamicAttId == DynamicAttId && x.tablesNamesId == addDependencyViewModel.tablesNamesId &&
                                                    x.InventoryId == MWRFULibrary.Id);

                                                if (Check == null)
                                                {
                                                    ListToAdd.Add(new TLIdynamicAttLibValue
                                                    {
                                                        disable = false,
                                                        DynamicAttId = DynamicAttId,
                                                        InventoryId = MWRFULibrary.Id,
                                                        tablesNamesId = addDependencyViewModel.tablesNamesId,
                                                        ValueBoolean = addDependencyViewModel.BooleanResult,
                                                        ValueString = addDependencyViewModel.StringResult,
                                                        ValueDateTime = addDependencyViewModel.DateTimeResult,
                                                        ValueDouble = addDependencyViewModel.DoubleResult
                                                    });
                                                }
                                            }
                                        }
                                        if (addDependencyViewModel.BooleanDefaultValue != null || addDependencyViewModel.DoubleDefaultValue != null ||
                                            addDependencyViewModel.DateTimeDefaultValue != null || !string.IsNullOrEmpty(addDependencyViewModel.StringDefaultValue))
                                        {
                                            TLIdynamicAttLibValue Check = ListToAdd.FirstOrDefault(x =>
                                                !x.disable && x.DynamicAttId == DynamicAttId && x.tablesNamesId == addDependencyViewModel.tablesNamesId &&
                                                x.InventoryId == MWRFULibrary.Id);

                                            if (Check == null)
                                            {
                                                ListToAdd.Add(new TLIdynamicAttLibValue
                                                {
                                                    disable = false,
                                                    DynamicAttId = DynamicAttId,
                                                    InventoryId = MWRFULibrary.Id,
                                                    tablesNamesId = addDependencyViewModel.tablesNamesId,
                                                    ValueBoolean = addDependencyViewModel.BooleanDefaultValue,
                                                    ValueString = addDependencyViewModel.StringDefaultValue,
                                                    ValueDateTime = addDependencyViewModel.DateTimeDefaultValue,
                                                    ValueDouble = addDependencyViewModel.DoubleDefaultValue
                                                });
                                            }
                                        }

                                        _unitOfWork.DynamicAttLibRepository.AddRange(ListToAdd);
                                        _unitOfWork.SaveChanges();
                                    }
                                }
                            }
                            else if (addDependencyViewModel.TableName.ToLower() == TablesNames.TLImwOtherLibrary.ToString().ToLower())
                            {
                                List<MW_OtherLibraryViewModel> MWOtherLibraries = _mapper.Map<List<MW_OtherLibraryViewModel>>(_unitOfWork.MW_OtherLibraryRepository.GetWhere(x =>
                                    x.Id > 0 && !x.Deleted).ToList());

                                foreach (DependencyViewModel Dependency in addDependencyViewModel.Dependencies)
                                {
                                    foreach (MW_OtherLibraryViewModel MWOtherLibrary in MWOtherLibraries)
                                    {
                                        List<TLIdynamicAttLibValue> ListToAdd = new List<TLIdynamicAttLibValue>();

                                        foreach (AddDependencyRowViewModel DependencyRow in Dependency.DependencyRows)
                                        {
                                            int Succeed = 0;

                                            foreach (AddRowRuleViewModel RowRule in DependencyRow.RowRules)
                                            {
                                                if (RowRule.Rule.attributeActivatedId != null)
                                                {
                                                    TLIattributeActivated RuleStaticAttribute = _unitOfWork.AttributeActivatedRepository.GetByID(RowRule.Rule.attributeActivatedId.Value);

                                                    PropertyInfo LibraryProp = typeof(MW_OtherLibraryViewModel).GetProperties().FirstOrDefault(x =>
                                                        x.Name.ToLower() == RuleStaticAttribute.Key.ToLower());

                                                    object PropObject = LibraryProp.GetValue(MWOtherLibrary, null);
                                                    if (PropObject != null)
                                                    {
                                                        string OperationStatic = _unitOfWork.OperationRepository.GetWhereFirst(x => !x.Deleted && x.Id == RowRule.Rule.OperationId.Value).Name;
                                                        if (OperationStatic == "==")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean == Convert.ToBoolean(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime == Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble == Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString == PropObject.ToString())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "!=")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean != Convert.ToBoolean(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime != Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble != Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString != PropObject.ToString())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "<")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime > Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble > Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "<=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime >= Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble >= Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == ">")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime < Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble < Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == ">=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime <= Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble <= Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                else if (RowRule.Rule.dynamicAttId != null)
                                                {
                                                    TLIdynamicAttLibValue RuleDynamicAttribute = _unitOfWork.DynamicAttLibRepository.GetWhereFirst(x =>
                                                        x.DynamicAttId == RowRule.Rule.dynamicAttId.Value && x.InventoryId == MWOtherLibrary.Id);

                                                    if (RuleDynamicAttribute != null)
                                                    {
                                                        string OperationDynamic = _unitOfWork.OperationRepository.GetWhereFirst(x => !x.Deleted && x.Id == RowRule.Rule.OperationId.Value).Name;

                                                        if (OperationDynamic == "==")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null && RuleDynamicAttribute.ValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean == RuleDynamicAttribute.ValueBoolean)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime == RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble == RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString) && !string.IsNullOrEmpty(RuleDynamicAttribute.ValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString.ToLower() == RuleDynamicAttribute.ValueString.ToLower())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "!=")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null && RuleDynamicAttribute.ValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean != RuleDynamicAttribute.ValueBoolean)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime != RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble != RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString) && !string.IsNullOrEmpty(RuleDynamicAttribute.ValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString.ToLower() != RuleDynamicAttribute.ValueString.ToLower())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == ">")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime > RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble > RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == ">=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime >= RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble >= RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "<")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime < RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble < RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "<=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime <= RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble <= RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (Succeed == DependencyRow.RowRules.Count())
                                            {
                                                TLIdynamicAttLibValue Check = ListToAdd.FirstOrDefault(x =>
                                                    !x.disable && x.DynamicAttId == DynamicAttId && x.tablesNamesId == addDependencyViewModel.tablesNamesId &&
                                                    x.InventoryId == MWOtherLibrary.Id);

                                                if (Check == null)
                                                {
                                                    ListToAdd.Add(new TLIdynamicAttLibValue
                                                    {
                                                        disable = false,
                                                        DynamicAttId = DynamicAttId,
                                                        InventoryId = MWOtherLibrary.Id,
                                                        tablesNamesId = addDependencyViewModel.tablesNamesId,
                                                        ValueBoolean = addDependencyViewModel.BooleanResult,
                                                        ValueString = addDependencyViewModel.StringResult,
                                                        ValueDateTime = addDependencyViewModel.DateTimeResult,
                                                        ValueDouble = addDependencyViewModel.DoubleResult
                                                    });
                                                }
                                            }
                                        }
                                        if (addDependencyViewModel.BooleanDefaultValue != null || addDependencyViewModel.DoubleDefaultValue != null ||
                                            addDependencyViewModel.DateTimeDefaultValue != null || !string.IsNullOrEmpty(addDependencyViewModel.StringDefaultValue))
                                        {
                                            TLIdynamicAttLibValue Check = ListToAdd.FirstOrDefault(x =>
                                                !x.disable && x.DynamicAttId == DynamicAttId && x.tablesNamesId == addDependencyViewModel.tablesNamesId &&
                                                x.InventoryId == MWOtherLibrary.Id);

                                            if (Check == null)
                                            {
                                                ListToAdd.Add(new TLIdynamicAttLibValue
                                                {
                                                    disable = false,
                                                    DynamicAttId = DynamicAttId,
                                                    InventoryId = MWOtherLibrary.Id,
                                                    tablesNamesId = addDependencyViewModel.tablesNamesId,
                                                    ValueBoolean = addDependencyViewModel.BooleanDefaultValue,
                                                    ValueString = addDependencyViewModel.StringDefaultValue,
                                                    ValueDateTime = addDependencyViewModel.DateTimeDefaultValue,
                                                    ValueDouble = addDependencyViewModel.DoubleDefaultValue
                                                });
                                            }
                                        }

                                        _unitOfWork.DynamicAttLibRepository.AddRange(ListToAdd);
                                        _unitOfWork.SaveChanges();
                                    }
                                }
                            }

                            // Radios..
                            else if (addDependencyViewModel.TableName.ToLower() == TablesNames.TLIradioAntennaLibrary.ToString().ToLower())
                            {
                                List<RadioAntennaLibraryViewModel> RadioAntennaLibraries = _mapper.Map<List<RadioAntennaLibraryViewModel>>(_unitOfWork.RadioAntennaLibraryRepository.GetWhere(x =>
                                    x.Id > 0 && !x.Deleted).ToList());

                                foreach (DependencyViewModel Dependency in addDependencyViewModel.Dependencies)
                                {
                                    foreach (RadioAntennaLibraryViewModel RadioAntennaLibrary in RadioAntennaLibraries)
                                    {
                                        List<TLIdynamicAttLibValue> ListToAdd = new List<TLIdynamicAttLibValue>();

                                        foreach (AddDependencyRowViewModel DependencyRow in Dependency.DependencyRows)
                                        {
                                            int Succeed = 0;

                                            foreach (AddRowRuleViewModel RowRule in DependencyRow.RowRules)
                                            {
                                                if (RowRule.Rule.attributeActivatedId != null)
                                                {
                                                    TLIattributeActivated RuleStaticAttribute = _unitOfWork.AttributeActivatedRepository.GetByID(RowRule.Rule.attributeActivatedId.Value);

                                                    PropertyInfo LibraryProp = typeof(RadioAntennaLibraryViewModel).GetProperties().FirstOrDefault(x =>
                                                        x.Name.ToLower() == RuleStaticAttribute.Key.ToLower());

                                                    object PropObject = LibraryProp.GetValue(RadioAntennaLibrary, null);
                                                    if (PropObject != null)
                                                    {
                                                        string OperationStatic = _unitOfWork.OperationRepository.GetWhereFirst(x => !x.Deleted && x.Id == RowRule.Rule.OperationId.Value).Name;
                                                        if (OperationStatic == "==")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean == Convert.ToBoolean(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime == Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble == Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString == PropObject.ToString())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "!=")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean != Convert.ToBoolean(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime != Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble != Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString != PropObject.ToString())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "<")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime > Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble > Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "<=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime >= Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble >= Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == ">")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime < Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble < Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == ">=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime <= Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble <= Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                else if (RowRule.Rule.dynamicAttId != null)
                                                {
                                                    TLIdynamicAttLibValue RuleDynamicAttribute = _unitOfWork.DynamicAttLibRepository.GetWhereFirst(x =>
                                                        x.DynamicAttId == RowRule.Rule.dynamicAttId.Value && x.InventoryId == RadioAntennaLibrary.Id);

                                                    if (RuleDynamicAttribute != null)
                                                    {
                                                        string OperationDynamic = _unitOfWork.OperationRepository.GetWhereFirst(x => !x.Deleted && x.Id == RowRule.Rule.OperationId.Value).Name;

                                                        if (OperationDynamic == "==")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null && RuleDynamicAttribute.ValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean == RuleDynamicAttribute.ValueBoolean)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime == RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble == RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString) && !string.IsNullOrEmpty(RuleDynamicAttribute.ValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString.ToLower() == RuleDynamicAttribute.ValueString.ToLower())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "!=")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null && RuleDynamicAttribute.ValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean != RuleDynamicAttribute.ValueBoolean)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime != RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble != RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString) && !string.IsNullOrEmpty(RuleDynamicAttribute.ValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString.ToLower() != RuleDynamicAttribute.ValueString.ToLower())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == ">")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime > RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble > RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == ">=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime >= RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble >= RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "<")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime < RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble < RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "<=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime <= RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble <= RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (Succeed == DependencyRow.RowRules.Count())
                                            {
                                                TLIdynamicAttLibValue Check = ListToAdd.FirstOrDefault(x =>
                                                    !x.disable && x.DynamicAttId == DynamicAttId && x.tablesNamesId == addDependencyViewModel.tablesNamesId &&
                                                    x.InventoryId == RadioAntennaLibrary.Id);

                                                if (Check == null)
                                                {
                                                    ListToAdd.Add(new TLIdynamicAttLibValue
                                                    {
                                                        disable = false,
                                                        DynamicAttId = DynamicAttId,
                                                        InventoryId = RadioAntennaLibrary.Id,
                                                        tablesNamesId = addDependencyViewModel.tablesNamesId,
                                                        ValueBoolean = addDependencyViewModel.BooleanResult,
                                                        ValueString = addDependencyViewModel.StringResult,
                                                        ValueDateTime = addDependencyViewModel.DateTimeResult,
                                                        ValueDouble = addDependencyViewModel.DoubleResult
                                                    });
                                                }
                                            }
                                        }
                                        if (addDependencyViewModel.BooleanDefaultValue != null || addDependencyViewModel.DoubleDefaultValue != null ||
                                            addDependencyViewModel.DateTimeDefaultValue != null || !string.IsNullOrEmpty(addDependencyViewModel.StringDefaultValue))
                                        {
                                            TLIdynamicAttLibValue Check = ListToAdd.FirstOrDefault(x =>
                                                !x.disable && x.DynamicAttId == DynamicAttId && x.tablesNamesId == addDependencyViewModel.tablesNamesId &&
                                                x.InventoryId == RadioAntennaLibrary.Id);

                                            if (Check == null)
                                            {
                                                ListToAdd.Add(new TLIdynamicAttLibValue
                                                {
                                                    disable = false,
                                                    DynamicAttId = DynamicAttId,
                                                    InventoryId = RadioAntennaLibrary.Id,
                                                    tablesNamesId = addDependencyViewModel.tablesNamesId,
                                                    ValueBoolean = addDependencyViewModel.BooleanDefaultValue,
                                                    ValueString = addDependencyViewModel.StringDefaultValue,
                                                    ValueDateTime = addDependencyViewModel.DateTimeDefaultValue,
                                                    ValueDouble = addDependencyViewModel.DoubleDefaultValue
                                                });
                                            }
                                        }

                                        _unitOfWork.DynamicAttLibRepository.AddRange(ListToAdd);
                                        _unitOfWork.SaveChanges();
                                    }
                                }
                            }
                            else if (addDependencyViewModel.TableName.ToLower() == TablesNames.TLIradioRRULibrary.ToString().ToLower())
                            {
                                List<RadioRRULibraryViewModel> RadioRRULibraries = _mapper.Map<List<RadioRRULibraryViewModel>>(_unitOfWork.RadioRRULibraryRepository.GetWhere(x =>
                                    x.Id > 0 && !x.Deleted).ToList());

                                foreach (DependencyViewModel Dependency in addDependencyViewModel.Dependencies)
                                {
                                    foreach (RadioRRULibraryViewModel RadioRRULibrary in RadioRRULibraries)
                                    {
                                        List<TLIdynamicAttLibValue> ListToAdd = new List<TLIdynamicAttLibValue>();

                                        foreach (AddDependencyRowViewModel DependencyRow in Dependency.DependencyRows)
                                        {
                                            int Succeed = 0;

                                            foreach (AddRowRuleViewModel RowRule in DependencyRow.RowRules)
                                            {
                                                if (RowRule.Rule.attributeActivatedId != null)
                                                {
                                                    TLIattributeActivated RuleStaticAttribute = _unitOfWork.AttributeActivatedRepository.GetByID(RowRule.Rule.attributeActivatedId.Value);

                                                    PropertyInfo LibraryProp = typeof(RadioRRULibraryViewModel).GetProperties().FirstOrDefault(x =>
                                                        x.Name.ToLower() == RuleStaticAttribute.Key.ToLower());

                                                    object PropObject = LibraryProp.GetValue(RadioRRULibrary, null);
                                                    if (PropObject != null)
                                                    {
                                                        string OperationStatic = _unitOfWork.OperationRepository.GetWhereFirst(x => !x.Deleted && x.Id == RowRule.Rule.OperationId.Value).Name;
                                                        if (OperationStatic == "==")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean == Convert.ToBoolean(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime == Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble == Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString == PropObject.ToString())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "!=")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean != Convert.ToBoolean(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime != Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble != Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString != PropObject.ToString())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "<")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime > Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble > Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "<=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime >= Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble >= Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == ">")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime < Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble < Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == ">=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime <= Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble <= Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                else if (RowRule.Rule.dynamicAttId != null)
                                                {
                                                    TLIdynamicAttLibValue RuleDynamicAttribute = _unitOfWork.DynamicAttLibRepository.GetWhereFirst(x =>
                                                        x.DynamicAttId == RowRule.Rule.dynamicAttId.Value && x.InventoryId == RadioRRULibrary.Id);

                                                    if (RuleDynamicAttribute != null)
                                                    {
                                                        string OperationDynamic = _unitOfWork.OperationRepository.GetWhereFirst(x => !x.Deleted && x.Id == RowRule.Rule.OperationId.Value).Name;

                                                        if (OperationDynamic == "==")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null && RuleDynamicAttribute.ValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean == RuleDynamicAttribute.ValueBoolean)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime == RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble == RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString) && !string.IsNullOrEmpty(RuleDynamicAttribute.ValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString.ToLower() == RuleDynamicAttribute.ValueString.ToLower())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "!=")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null && RuleDynamicAttribute.ValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean != RuleDynamicAttribute.ValueBoolean)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime != RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble != RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString) && !string.IsNullOrEmpty(RuleDynamicAttribute.ValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString.ToLower() != RuleDynamicAttribute.ValueString.ToLower())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == ">")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime > RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble > RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == ">=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime >= RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble >= RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "<")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime < RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble < RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "<=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime <= RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble <= RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (Succeed == DependencyRow.RowRules.Count())
                                            {
                                                TLIdynamicAttLibValue Check = ListToAdd.FirstOrDefault(x =>
                                                    !x.disable && x.DynamicAttId == DynamicAttId && x.tablesNamesId == addDependencyViewModel.tablesNamesId &&
                                                    x.InventoryId == RadioRRULibrary.Id);

                                                if (Check == null)
                                                {
                                                    ListToAdd.Add(new TLIdynamicAttLibValue
                                                    {
                                                        disable = false,
                                                        DynamicAttId = DynamicAttId,
                                                        InventoryId = RadioRRULibrary.Id,
                                                        tablesNamesId = addDependencyViewModel.tablesNamesId,
                                                        ValueBoolean = addDependencyViewModel.BooleanResult,
                                                        ValueString = addDependencyViewModel.StringResult,
                                                        ValueDateTime = addDependencyViewModel.DateTimeResult,
                                                        ValueDouble = addDependencyViewModel.DoubleResult
                                                    });
                                                }
                                            }
                                        }
                                        if (addDependencyViewModel.BooleanDefaultValue != null || addDependencyViewModel.DoubleDefaultValue != null ||
                                            addDependencyViewModel.DateTimeDefaultValue != null || !string.IsNullOrEmpty(addDependencyViewModel.StringDefaultValue))
                                        {
                                            TLIdynamicAttLibValue Check = ListToAdd.FirstOrDefault(x =>
                                                !x.disable && x.DynamicAttId == DynamicAttId && x.tablesNamesId == addDependencyViewModel.tablesNamesId &&
                                                x.InventoryId == RadioRRULibrary.Id);

                                            if (Check == null)
                                            {
                                                ListToAdd.Add(new TLIdynamicAttLibValue
                                                {
                                                    disable = false,
                                                    DynamicAttId = DynamicAttId,
                                                    InventoryId = RadioRRULibrary.Id,
                                                    tablesNamesId = addDependencyViewModel.tablesNamesId,
                                                    ValueBoolean = addDependencyViewModel.BooleanDefaultValue,
                                                    ValueString = addDependencyViewModel.StringDefaultValue,
                                                    ValueDateTime = addDependencyViewModel.DateTimeDefaultValue,
                                                    ValueDouble = addDependencyViewModel.DoubleDefaultValue
                                                });
                                            }
                                        }

                                        _unitOfWork.DynamicAttLibRepository.AddRange(ListToAdd);
                                        _unitOfWork.SaveChanges();
                                    }
                                }
                            }
                            else if (addDependencyViewModel.TableName.ToLower() == TablesNames.TLIradioOtherLibrary.ToString().ToLower())
                            {
                                List<RadioOtherLibraryViewModel> RadioOtherLibraries = _mapper.Map<List<RadioOtherLibraryViewModel>>(_unitOfWork.RadioOtherLibraryRepository.GetWhere(x =>
                                    x.Id > 0 && !x.Deleted).ToList());

                                foreach (DependencyViewModel Dependency in addDependencyViewModel.Dependencies)
                                {
                                    foreach (RadioOtherLibraryViewModel RadioOtherLibrary in RadioOtherLibraries)
                                    {
                                        List<TLIdynamicAttLibValue> ListToAdd = new List<TLIdynamicAttLibValue>();

                                        foreach (AddDependencyRowViewModel DependencyRow in Dependency.DependencyRows)
                                        {
                                            int Succeed = 0;

                                            foreach (AddRowRuleViewModel RowRule in DependencyRow.RowRules)
                                            {
                                                if (RowRule.Rule.attributeActivatedId != null)
                                                {
                                                    TLIattributeActivated RuleStaticAttribute = _unitOfWork.AttributeActivatedRepository.GetByID(RowRule.Rule.attributeActivatedId.Value);

                                                    PropertyInfo LibraryProp = typeof(RadioOtherLibraryViewModel).GetProperties().FirstOrDefault(x =>
                                                        x.Name.ToLower() == RuleStaticAttribute.Key.ToLower());

                                                    object PropObject = LibraryProp.GetValue(RadioOtherLibrary, null);
                                                    if (PropObject != null)
                                                    {
                                                        string OperationStatic = _unitOfWork.OperationRepository.GetWhereFirst(x => !x.Deleted && x.Id == RowRule.Rule.OperationId.Value).Name;
                                                        if (OperationStatic == "==")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean == Convert.ToBoolean(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime == Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble == Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString == PropObject.ToString())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "!=")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean != Convert.ToBoolean(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime != Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble != Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString != PropObject.ToString())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "<")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime > Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble > Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "<=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime >= Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble >= Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == ">")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime < Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble < Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == ">=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime <= Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble <= Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                else if (RowRule.Rule.dynamicAttId != null)
                                                {
                                                    TLIdynamicAttLibValue RuleDynamicAttribute = _unitOfWork.DynamicAttLibRepository.GetWhereFirst(x =>
                                                        x.DynamicAttId == RowRule.Rule.dynamicAttId.Value && x.InventoryId == RadioOtherLibrary.Id);

                                                    if (RuleDynamicAttribute != null)
                                                    {
                                                        string OperationDynamic = _unitOfWork.OperationRepository.GetWhereFirst(x => !x.Deleted && x.Id == RowRule.Rule.OperationId.Value).Name;

                                                        if (OperationDynamic == "==")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null && RuleDynamicAttribute.ValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean == RuleDynamicAttribute.ValueBoolean)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime == RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble == RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString) && !string.IsNullOrEmpty(RuleDynamicAttribute.ValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString.ToLower() == RuleDynamicAttribute.ValueString.ToLower())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "!=")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null && RuleDynamicAttribute.ValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean != RuleDynamicAttribute.ValueBoolean)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime != RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble != RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString) && !string.IsNullOrEmpty(RuleDynamicAttribute.ValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString.ToLower() != RuleDynamicAttribute.ValueString.ToLower())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == ">")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime > RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble > RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == ">=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime >= RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble >= RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "<")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime < RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble < RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "<=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime <= RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble <= RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (Succeed == DependencyRow.RowRules.Count())
                                            {
                                                TLIdynamicAttLibValue Check = ListToAdd.FirstOrDefault(x =>
                                                    !x.disable && x.DynamicAttId == DynamicAttId && x.tablesNamesId == addDependencyViewModel.tablesNamesId &&
                                                    x.InventoryId == RadioOtherLibrary.Id);

                                                if (Check == null)
                                                {
                                                    ListToAdd.Add(new TLIdynamicAttLibValue
                                                    {
                                                        disable = false,
                                                        DynamicAttId = DynamicAttId,
                                                        InventoryId = RadioOtherLibrary.Id,
                                                        tablesNamesId = addDependencyViewModel.tablesNamesId,
                                                        ValueBoolean = addDependencyViewModel.BooleanResult,
                                                        ValueString = addDependencyViewModel.StringResult,
                                                        ValueDateTime = addDependencyViewModel.DateTimeResult,
                                                        ValueDouble = addDependencyViewModel.DoubleResult
                                                    });
                                                }
                                            }
                                        }
                                        if (addDependencyViewModel.BooleanDefaultValue != null || addDependencyViewModel.DoubleDefaultValue != null ||
                                            addDependencyViewModel.DateTimeDefaultValue != null || !string.IsNullOrEmpty(addDependencyViewModel.StringDefaultValue))
                                        {
                                            TLIdynamicAttLibValue Check = ListToAdd.FirstOrDefault(x =>
                                                !x.disable && x.DynamicAttId == DynamicAttId && x.tablesNamesId == addDependencyViewModel.tablesNamesId &&
                                                x.InventoryId == RadioOtherLibrary.Id);

                                            if (Check == null)
                                            {
                                                ListToAdd.Add(new TLIdynamicAttLibValue
                                                {
                                                    disable = false,
                                                    DynamicAttId = DynamicAttId,
                                                    InventoryId = RadioOtherLibrary.Id,
                                                    tablesNamesId = addDependencyViewModel.tablesNamesId,
                                                    ValueBoolean = addDependencyViewModel.BooleanDefaultValue,
                                                    ValueString = addDependencyViewModel.StringDefaultValue,
                                                    ValueDateTime = addDependencyViewModel.DateTimeDefaultValue,
                                                    ValueDouble = addDependencyViewModel.DoubleDefaultValue
                                                });
                                            }
                                        }

                                        _unitOfWork.DynamicAttLibRepository.AddRange(ListToAdd);
                                        _unitOfWork.SaveChanges();
                                    }
                                }
                            }

                            // Power..
                            else if (addDependencyViewModel.TableName.ToLower() == TablesNames.TLIpowerLibrary.ToString().ToLower())
                            {
                                List<PowerLibraryViewModel> PowerLibraries = _mapper.Map<List<PowerLibraryViewModel>>(_unitOfWork.PowerLibraryRepository.GetWhere(x =>
                                    x.Id > 0 && !x.Deleted).ToList());

                                foreach (DependencyViewModel Dependency in addDependencyViewModel.Dependencies)
                                {
                                    foreach (PowerLibraryViewModel PowerLibrary in PowerLibraries)
                                    {
                                        List<TLIdynamicAttLibValue> ListToAdd = new List<TLIdynamicAttLibValue>();

                                        foreach (AddDependencyRowViewModel DependencyRow in Dependency.DependencyRows)
                                        {
                                            int Succeed = 0;

                                            foreach (AddRowRuleViewModel RowRule in DependencyRow.RowRules)
                                            {
                                                if (RowRule.Rule.attributeActivatedId != null)
                                                {
                                                    TLIattributeActivated RuleStaticAttribute = _unitOfWork.AttributeActivatedRepository.GetByID(RowRule.Rule.attributeActivatedId.Value);

                                                    PropertyInfo LibraryProp = typeof(PowerLibraryViewModel).GetProperties().FirstOrDefault(x =>
                                                        x.Name.ToLower() == RuleStaticAttribute.Key.ToLower());

                                                    object PropObject = LibraryProp.GetValue(PowerLibrary, null);
                                                    if (PropObject != null)
                                                    {
                                                        string OperationStatic = _unitOfWork.OperationRepository.GetWhereFirst(x => !x.Deleted && x.Id == RowRule.Rule.OperationId.Value).Name;
                                                        if (OperationStatic == "==")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean == Convert.ToBoolean(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime == Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble == Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString == PropObject.ToString())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "!=")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean != Convert.ToBoolean(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime != Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble != Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString != PropObject.ToString())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "<")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime > Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble > Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "<=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime >= Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble >= Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == ">")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime < Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble < Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == ">=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime <= Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble <= Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                else if (RowRule.Rule.dynamicAttId != null)
                                                {
                                                    TLIdynamicAttLibValue RuleDynamicAttribute = _unitOfWork.DynamicAttLibRepository.GetWhereFirst(x =>
                                                        x.DynamicAttId == RowRule.Rule.dynamicAttId.Value && x.InventoryId == PowerLibrary.Id);

                                                    if (RuleDynamicAttribute != null)
                                                    {
                                                        string OperationDynamic = _unitOfWork.OperationRepository.GetWhereFirst(x => !x.Deleted && x.Id == RowRule.Rule.OperationId.Value).Name;

                                                        if (OperationDynamic == "==")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null && RuleDynamicAttribute.ValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean == RuleDynamicAttribute.ValueBoolean)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime == RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble == RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString) && !string.IsNullOrEmpty(RuleDynamicAttribute.ValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString.ToLower() == RuleDynamicAttribute.ValueString.ToLower())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "!=")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null && RuleDynamicAttribute.ValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean != RuleDynamicAttribute.ValueBoolean)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime != RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble != RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString) && !string.IsNullOrEmpty(RuleDynamicAttribute.ValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString.ToLower() != RuleDynamicAttribute.ValueString.ToLower())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == ">")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime > RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble > RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == ">=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime >= RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble >= RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "<")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime < RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble < RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "<=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime <= RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble <= RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (Succeed == DependencyRow.RowRules.Count())
                                            {
                                                TLIdynamicAttLibValue Check = ListToAdd.FirstOrDefault(x =>
                                                    !x.disable && x.DynamicAttId == DynamicAttId && x.tablesNamesId == addDependencyViewModel.tablesNamesId &&
                                                    x.InventoryId == PowerLibrary.Id);

                                                if (Check == null)
                                                {
                                                    ListToAdd.Add(new TLIdynamicAttLibValue
                                                    {
                                                        disable = false,
                                                        DynamicAttId = DynamicAttId,
                                                        InventoryId = PowerLibrary.Id,
                                                        tablesNamesId = addDependencyViewModel.tablesNamesId,
                                                        ValueBoolean = addDependencyViewModel.BooleanResult,
                                                        ValueString = addDependencyViewModel.StringResult,
                                                        ValueDateTime = addDependencyViewModel.DateTimeResult,
                                                        ValueDouble = addDependencyViewModel.DoubleResult
                                                    });
                                                }
                                            }
                                        }
                                        if (addDependencyViewModel.BooleanDefaultValue != null || addDependencyViewModel.DoubleDefaultValue != null ||
                                            addDependencyViewModel.DateTimeDefaultValue != null || !string.IsNullOrEmpty(addDependencyViewModel.StringDefaultValue))
                                        {
                                            TLIdynamicAttLibValue Check = ListToAdd.FirstOrDefault(x =>
                                                !x.disable && x.DynamicAttId == DynamicAttId && x.tablesNamesId == addDependencyViewModel.tablesNamesId &&
                                                x.InventoryId == PowerLibrary.Id);

                                            if (Check == null)
                                            {
                                                ListToAdd.Add(new TLIdynamicAttLibValue
                                                {
                                                    disable = false,
                                                    DynamicAttId = DynamicAttId,
                                                    InventoryId = PowerLibrary.Id,
                                                    tablesNamesId = addDependencyViewModel.tablesNamesId,
                                                    ValueBoolean = addDependencyViewModel.BooleanDefaultValue,
                                                    ValueString = addDependencyViewModel.StringDefaultValue,
                                                    ValueDateTime = addDependencyViewModel.DateTimeDefaultValue,
                                                    ValueDouble = addDependencyViewModel.DoubleDefaultValue
                                                });
                                            }
                                        }

                                        _unitOfWork.DynamicAttLibRepository.AddRange(ListToAdd);
                                        _unitOfWork.SaveChanges();
                                    }
                                }
                            }

                            // Load Other..
                            else if (addDependencyViewModel.TableName.ToLower() == TablesNames.TLIloadOtherLibrary.ToString().ToLower())
                            {
                                List<LoadOtherLibraryViewModel> LoadOtherLibraries = _mapper.Map<List<LoadOtherLibraryViewModel>>(_unitOfWork.LoadOtherLibraryRepository.GetWhere(x =>
                                    x.Id > 0 && !x.Deleted).ToList());

                                foreach (DependencyViewModel Dependency in addDependencyViewModel.Dependencies)
                                {
                                    foreach (LoadOtherLibraryViewModel LoadOtherLibrary in LoadOtherLibraries)
                                    {
                                        List<TLIdynamicAttLibValue> ListToAdd = new List<TLIdynamicAttLibValue>();

                                        foreach (AddDependencyRowViewModel DependencyRow in Dependency.DependencyRows)
                                        {
                                            int Succeed = 0;

                                            foreach (AddRowRuleViewModel RowRule in DependencyRow.RowRules)
                                            {
                                                if (RowRule.Rule.attributeActivatedId != null)
                                                {
                                                    TLIattributeActivated RuleStaticAttribute = _unitOfWork.AttributeActivatedRepository.GetByID(RowRule.Rule.attributeActivatedId.Value);

                                                    PropertyInfo LibraryProp = typeof(LoadOtherLibraryViewModel).GetProperties().FirstOrDefault(x =>
                                                        x.Name.ToLower() == RuleStaticAttribute.Key.ToLower());

                                                    object PropObject = LibraryProp.GetValue(LoadOtherLibrary, null);
                                                    if (PropObject != null)
                                                    {
                                                        string OperationStatic = _unitOfWork.OperationRepository.GetWhereFirst(x => !x.Deleted && x.Id == RowRule.Rule.OperationId.Value).Name;
                                                        if (OperationStatic == "==")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean == Convert.ToBoolean(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime == Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble == Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString == PropObject.ToString())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "!=")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean != Convert.ToBoolean(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime != Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble != Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString != PropObject.ToString())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "<")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime > Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble > Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == "<=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime >= Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble >= Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == ">")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime < Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble < Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationStatic == ">=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime <= Convert.ToDateTime(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble <= Convert.ToDouble(PropObject))
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                else if (RowRule.Rule.dynamicAttId != null)
                                                {
                                                    TLIdynamicAttLibValue RuleDynamicAttribute = _unitOfWork.DynamicAttLibRepository.GetWhereFirst(x =>
                                                        x.DynamicAttId == RowRule.Rule.dynamicAttId.Value && x.InventoryId == LoadOtherLibrary.Id);

                                                    if (RuleDynamicAttribute != null)
                                                    {
                                                        string OperationDynamic = _unitOfWork.OperationRepository.GetWhereFirst(x => !x.Deleted && x.Id == RowRule.Rule.OperationId.Value).Name;

                                                        if (OperationDynamic == "==")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null && RuleDynamicAttribute.ValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean == RuleDynamicAttribute.ValueBoolean)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime == RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble == RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString) && !string.IsNullOrEmpty(RuleDynamicAttribute.ValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString.ToLower() == RuleDynamicAttribute.ValueString.ToLower())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "!=")
                                                        {
                                                            if (RowRule.Rule.OperationValueBoolean != null && RuleDynamicAttribute.ValueBoolean != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueBoolean != RuleDynamicAttribute.ValueBoolean)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime != RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble != RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(RowRule.Rule.OperationValueString) && !string.IsNullOrEmpty(RuleDynamicAttribute.ValueString))
                                                            {
                                                                if (RowRule.Rule.OperationValueString.ToLower() != RuleDynamicAttribute.ValueString.ToLower())
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == ">")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime > RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble > RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == ">=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime >= RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble >= RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "<")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime < RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble < RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                        else if (OperationDynamic == "<=")
                                                        {
                                                            if (RowRule.Rule.OperationValueDateTime != null && RuleDynamicAttribute.ValueDateTime != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDateTime <= RuleDynamicAttribute.ValueDateTime)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                            else if (RowRule.Rule.OperationValueDouble != null && RuleDynamicAttribute.ValueDouble != null)
                                                            {
                                                                if (RowRule.Rule.OperationValueDouble <= RuleDynamicAttribute.ValueDouble)
                                                                {
                                                                    Succeed++;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (Succeed == DependencyRow.RowRules.Count())
                                            {
                                                TLIdynamicAttLibValue Check = ListToAdd.FirstOrDefault(x =>
                                                    !x.disable && x.DynamicAttId == DynamicAttId && x.tablesNamesId == addDependencyViewModel.tablesNamesId &&
                                                    x.InventoryId == LoadOtherLibrary.Id);

                                                if (Check == null)
                                                {
                                                    ListToAdd.Add(new TLIdynamicAttLibValue
                                                    {
                                                        disable = false,
                                                        DynamicAttId = DynamicAttId,
                                                        InventoryId = LoadOtherLibrary.Id,
                                                        tablesNamesId = addDependencyViewModel.tablesNamesId,
                                                        ValueBoolean = addDependencyViewModel.BooleanResult,
                                                        ValueString = addDependencyViewModel.StringResult,
                                                        ValueDateTime = addDependencyViewModel.DateTimeResult,
                                                        ValueDouble = addDependencyViewModel.DoubleResult
                                                    });
                                                }
                                            }
                                        }
                                        if (addDependencyViewModel.BooleanDefaultValue != null || addDependencyViewModel.DoubleDefaultValue != null ||
                                            addDependencyViewModel.DateTimeDefaultValue != null || !string.IsNullOrEmpty(addDependencyViewModel.StringDefaultValue))
                                        {
                                            TLIdynamicAttLibValue Check = ListToAdd.FirstOrDefault(x =>
                                                !x.disable && x.DynamicAttId == DynamicAttId && x.tablesNamesId == addDependencyViewModel.tablesNamesId &&
                                                x.InventoryId == LoadOtherLibrary.Id);

                                            if (Check == null)
                                            {
                                                ListToAdd.Add(new TLIdynamicAttLibValue
                                                {
                                                    disable = false,
                                                    DynamicAttId = DynamicAttId,
                                                    InventoryId = LoadOtherLibrary.Id,
                                                    tablesNamesId = addDependencyViewModel.tablesNamesId,
                                                    ValueBoolean = addDependencyViewModel.BooleanDefaultValue,
                                                    ValueString = addDependencyViewModel.StringDefaultValue,
                                                    ValueDateTime = addDependencyViewModel.DateTimeDefaultValue,
                                                    ValueDouble = addDependencyViewModel.DoubleDefaultValue
                                                });
                                            }
                                        }

                                        _unitOfWork.DynamicAttLibRepository.AddRange(ListToAdd);
                                        _unitOfWork.SaveChanges();
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        AddDefaultValues(addDependencyViewModel, null, DynamicAttId);
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }
        public Response<AddDependencyInstViewModel> AddDynamicAttInst(AddDependencyInstViewModel addDependencyInstViewModel, string ConnectionString)
        {
            using (var con = new OracleConnection(ConnectionString))
            {
                con.Open();
                using (var tran = con.BeginTransaction())
                {
                    using (TransactionScope transaction = new TransactionScope(TransactionScopeOption.Required,
                        new System.TimeSpan(0, 15, 0)))
                    {
                        try
                        {
                            List<int> ResultDataType = _unitOfWork.OperationRepository.GetWhereAndSelect(x =>
                                x.Name.ToLower() == "result" || x.Name == "==", x => new { x.Id }).Select(x => x.Id).ToList();

                            TLIdynamicAtt DynamicAttEntity = _mapper.Map<TLIdynamicAtt>(addDependencyInstViewModel);

                            string DataTypeName = _unitOfWork.DataTypeRepository.GetByID(addDependencyInstViewModel.DataTypeId.Value).Name;

                            if (DataTypeName.ToLower() == "string".ToLower())
                            {
                                DynamicAttEntity.DefaultValue = !string.IsNullOrEmpty(addDependencyInstViewModel.StringDefaultValue) ?
                                    addDependencyInstViewModel.StringDefaultValue : "";
                            }

                            else if (DataTypeName.ToLower() == "int".ToLower())
                            {
                                DynamicAttEntity.DefaultValue = addDependencyInstViewModel.DoubleDefaultValue != null ?
                                    addDependencyInstViewModel.DoubleDefaultValue.ToString() : "0";
                            }

                            else if (DataTypeName.ToLower() == "double".ToLower())
                            {
                                DynamicAttEntity.DefaultValue = addDependencyInstViewModel.DoubleDefaultValue != null ?
                                    addDependencyInstViewModel.DoubleDefaultValue.ToString() : "0";
                            }

                            else if (DataTypeName.ToLower() == "boolean".ToLower())
                            {
                                DynamicAttEntity.DefaultValue = addDependencyInstViewModel.BooleanDefaultValue != null ?
                                    addDependencyInstViewModel.BooleanDefaultValue.ToString() : "false";
                            }

                            else if (DataTypeName.ToLower() == "datetime".ToLower())
                            {
                                DynamicAttEntity.DefaultValue = addDependencyInstViewModel.DateTimeDefaultValue != null ?
                                    addDependencyInstViewModel.DateTimeDefaultValue.ToString() : DateTime.Now.ToString();
                            }

                            DynamicAttEntity.tablesNames = _unitOfWork.TablesNamesRepository.GetByID(DynamicAttEntity.tablesNamesId);

                            // Validation For Dynamic Attribute Key (Dynamic Attribute Key Can't Be Reapeated For The Same TableName)..
                            TLIdynamicAtt CheckNameInTLIDynamic = _unitOfWork.DynamicAttRepository.GetIncludeWhereFirst(x =>
                                x.Key.ToLower() == DynamicAttEntity.Key.ToLower() && x.CivilWithoutLegCategoryId == DynamicAttEntity.CivilWithoutLegCategoryId &&
                                x.tablesNames.TableName.ToLower() == DynamicAttEntity.tablesNames.TableName.ToLower(),
                                    x => x.tablesNames);

                            if (CheckNameInTLIDynamic != null)
                                return new Response<AddDependencyInstViewModel>(true, null, null, $"This Key {DynamicAttEntity.Key} is Already Exist in Table {DynamicAttEntity.tablesNames.TableName} as a Dynamic Attribute", (int)Constants.ApiReturnCode.fail);

                            // Validation For Dynamic Attribute Key (Can't Add New Dynamic Attribute Key If It is Already Exist in Atttribute Activated Table (TLIattributeActivated))..
                            TLIattributeActivated CheckNameInTLIAttribute = _unitOfWork.AttributeActivatedRepository.GetWhereFirst(x =>
                                x.Key.ToLower() == DynamicAttEntity.Key.ToLower() &&
                                x.Tabel.ToLower() == DynamicAttEntity.tablesNames.TableName.ToLower());

                            if (CheckNameInTLIAttribute != null)
                                return new Response<AddDependencyInstViewModel>(true, null, null, $"This Key {DynamicAttEntity.Key} is Already Exist in Table {DynamicAttEntity.tablesNames.TableName} as a Static Attribute", (int)Constants.ApiReturnCode.fail);

                            DynamicAttEntity.LibraryAtt = false;
                            DynamicAttEntity.CivilWithoutLegCategoryId = addDependencyInstViewModel.CivilWithoutLegCategoryId;

                            TLIdataType DataType = _unitOfWork.DataTypeRepository.GetWhereFirst(x =>
                                x.Id == addDependencyInstViewModel.DataTypeId);

                            int DynamicAttId;
                            Dictionary<string, int> ListValuesIds = new Dictionary<string, int>();

                            _unitOfWork.DynamicAttRepository.Add(DynamicAttEntity);
                            _unitOfWork.SaveChanges();

                            DynamicAttId = DynamicAttEntity.Id;

                            if (addDependencyInstViewModel.validations != null ? addDependencyInstViewModel.validations.Count > 0 : false)
                            {
                                foreach (var GeneralValidation in addDependencyInstViewModel.validations)
                                {
                                    if (GeneralValidation.OperationId > 0 && !string.IsNullOrEmpty(GeneralValidation.OperationValue))
                                    {
                                        TLIvalidation validation = new TLIvalidation();
                                        validation.DynamicAttId = DynamicAttId;
                                        validation.OperationId = GeneralValidation.OperationId;
                                        if (DataType.Name.ToLower() == "string")
                                        {
                                            validation.ValueString = GeneralValidation.OperationValue;
                                        }
                                        else if (DataType.Name.ToLower() == "int" || DataType.Name.ToLower() == "double" || DataType.Name.ToLower() == "float")
                                        {
                                            validation.ValueDouble = Convert.ToDouble(GeneralValidation.OperationValue);
                                        }
                                        else if (DataType.Name.ToLower() == "boolean")
                                        {
                                            validation.ValueBoolean = Convert.ToBoolean(GeneralValidation.OperationValue);
                                        }
                                        else if (DataType.Name.ToLower() == "datetime")
                                        {
                                            validation.ValueDateTime = Convert.ToDateTime(GeneralValidation.OperationValue);
                                        }
                                        //validation.OperationValue = addDependencyInstViewModel.validation.OperationValue;
                                        _unitOfWork.ValidationRepository.Add(validation);
                                        //_unitOfWork.SaveChanges();
                                    }
                                }
                            }

                            string TableName = string.Empty;
                            if (addDependencyInstViewModel.Dependencies != null ? addDependencyInstViewModel.Dependencies.Count > 0 : false)
                            {
                                TableName = addDependencyInstViewModel.TableName;
                                foreach (var Dependencie in addDependencyInstViewModel.Dependencies)
                                {
                                    TLIdependency dependency = new TLIdependency();
                                    dependency.DynamicAttId = DynamicAttId;
                                    dependency.OperationId = Dependencie.OperationId;
                                    if (DataType.Name.ToLower() == "string")
                                    {
                                        dependency.ValueString = Dependencie.ValueString;
                                    }
                                    else if (DataType.Name.ToLower() == "int" || DataType.Name.ToLower() == "double" || DataType.Name.ToLower() == "float")
                                    {
                                        dependency.ValueDouble = Convert.ToDouble(Dependencie.ValueDouble);
                                    }
                                    else if (DataType.Name.ToLower() == "boolean")
                                    {
                                        dependency.ValueBoolean = Convert.ToBoolean(Dependencie.ValueBoolean);
                                    }
                                    else if (DataType.Name.ToLower() == "datetime")
                                    {
                                        dependency.ValueDateTime = Convert.ToDateTime(Dependencie.ValueDateTime);
                                    }
                                    _unitOfWork.DependencieRepository.Add(dependency);

                                    foreach (var DependencyRow in Dependencie.DependencyRows)
                                    {
                                        TLIrow row = new TLIrow();
                                        _unitOfWork.RowRepository.Add(row);

                                        foreach (var RowRule in DependencyRow.RowRules)
                                        {
                                            var TableNameEntity = _unitOfWork.TablesNamesRepository
                                                .GetWhereFirst(x => x.TableName.ToLower() == RowRule.Rule.TableName.ToLower());
                                            TLIrule Rule = _mapper.Map<TLIrule>(RowRule.Rule);
                                            Rule.tablesNamesId = TableNameEntity.Id;
                                            //TableName = _unitOfWork.AttributeActivatedRepository.GetAllAsQueryable().Where(x => x.Id == Rule.attributeActivatedId).FirstOrDefault().Tabel;
                                            _unitOfWork.RuleRepository.Add(Rule);
                                            //_unitOfWork.SaveChanges();
                                            TLIrowRule RowRuleEntity = new TLIrowRule();
                                            RowRuleEntity.RuleId = Rule.Id;
                                            RowRuleEntity.RowId = row.Id;
                                            RowRuleEntity.LogicalOperationId = RowRule.LogicalOperationId;
                                            _unitOfWork.RowRuleRepository.Add(RowRuleEntity);
                                            //_unitOfWork.SaveChanges();
                                        }
                                        TLIdependencyRow DependencyRowEntity = new TLIdependencyRow();
                                        DependencyRowEntity.DependencyId = dependency.Id;
                                        DependencyRowEntity.RowId = row.Id;
                                        DependencyRowEntity.LogicalOperationId = DependencyRow.LogicalOperationId;
                                        _unitOfWork.DependencyRowRepository.Add(DependencyRowEntity);

                                        // int Count = ResultDataType.Count();
                                        //for (int i = 0; i < Count; i++)
                                        //{
                                        //    if (Dependencie.OperationId == ResultDataType[i])
                                        //        FilterInstData(addDependencyInstViewModel, addDependencyInstViewModel.TableName, DynamicAttId, null, con);
                                        //}
                                    }
                                }
                            }

                            bool CheckIfDynamicInCivilWithoutLeg = _unitOfWork.TablesNamesRepository
                                .GetWhereFirst(x => x.TableName.ToLower() == Helpers.Constants.TablesNames.TLIcivilWithoutLeg.ToString().ToLower()).Id == addDependencyInstViewModel.tablesNamesId ?
                                    true : false;

                            if (CheckIfDynamicInCivilWithoutLeg)
                            {
                                _unitOfWork.AttributeViewManagmentRepository.Add(new TLIattributeViewManagment
                                {
                                    DynamicAttId = DynamicAttId,
                                    Enable = true,
                                    EditableManagmentViewId = _unitOfWork.EditableManagmentViewRepository.GetWhereFirst(x =>
                                        x.TLItablesNames1Id == addDependencyInstViewModel.tablesNamesId &&
                                        (x.CivilWithoutLegCategoryId != null ?
                                            x.CivilWithoutLegCategoryId == addDependencyInstViewModel.CivilWithoutLegCategoryId : false)).Id
                                });
                            }
                            else
                            {
                                _unitOfWork.AttributeViewManagmentRepository.Add(new TLIattributeViewManagment
                                {
                                    DynamicAttId = DynamicAttId,
                                    Enable = true,
                                    EditableManagmentViewId = _unitOfWork.EditableManagmentViewRepository.GetWhereFirst(x =>
                                        x.TLItablesNames1Id == addDependencyInstViewModel.tablesNamesId).Id
                                });
                            }

                            AddInstallationListValues(addDependencyInstViewModel, DynamicAttId);

                            //for ADO.NET
                            tran.Commit();
                            _unitOfWork.SaveChanges();
                            //FOR ENTITIES
                            transaction.Complete();
                            return new Response<AddDependencyInstViewModel>();
                        }
                        catch (Exception err)
                        {
                            tran.Rollback();
                            return new Response<AddDependencyInstViewModel>(true, null, null, err.Message, Int32.Parse(Constants.ApiReturnCode.fail.ToString()));
                        }
                    }
                }
            }
        }
        public Response<AddDependencyViewModel> AddDynamicAtts(AddDependencyViewModel addDependencyViewModel, string ConnectionString)
        {
            using (var con = new OracleConnection(ConnectionString))
            {
                con.Open();
                using (var tran = con.BeginTransaction())
                {
                    using (TransactionScope transaction = new TransactionScope(TransactionScopeOption.Required,
                        new System.TimeSpan(0, 15, 0)))
                    {
                        try
                        {
                            // Map ViewModel to Entity
                            TLIdynamicAtt DynamicAttEntity = _mapper.Map<TLIdynamicAtt>(addDependencyViewModel);

                            string DataTypeName = _unitOfWork.DataTypeRepository.GetByID(addDependencyViewModel.DataTypeId.Value).Name;

                            if (DataTypeName.ToLower() == "string".ToLower())
                            {
                                DynamicAttEntity.DefaultValue = !string.IsNullOrEmpty(addDependencyViewModel.StringDefaultValue) ?
                                    addDependencyViewModel.StringDefaultValue : "";
                            }

                            else if (DataTypeName.ToLower() == "int".ToLower())
                            {
                                DynamicAttEntity.DefaultValue = addDependencyViewModel.DoubleDefaultValue != null ?
                                    addDependencyViewModel.DoubleDefaultValue.ToString() : "0";
                            }

                            else if (DataTypeName.ToLower() == "double".ToLower())
                            {
                                DynamicAttEntity.DefaultValue = addDependencyViewModel.DoubleDefaultValue != null ?
                                    addDependencyViewModel.DoubleDefaultValue.ToString() : "0";
                            }

                            else if (DataTypeName.ToLower() == "boolean".ToLower())
                            {
                                DynamicAttEntity.DefaultValue = addDependencyViewModel.BooleanDefaultValue != null ?
                                    addDependencyViewModel.BooleanDefaultValue.ToString() : "false";
                            }

                            else if (DataTypeName.ToLower() == "datetime".ToLower())
                            {
                                DynamicAttEntity.DefaultValue = addDependencyViewModel.DateTimeDefaultValue != null ?
                                    addDependencyViewModel.DateTimeDefaultValue.ToString() : DateTime.Now.ToString();
                            }

                            DynamicAttEntity.tablesNames = _unitOfWork.TablesNamesRepository.GetByID(DynamicAttEntity.tablesNamesId);

                            // Validation For Dynamic Attribute Key (Dynamic Attribute Key Can't Be Reapeated For The Same TableName)..
                            TLIdynamicAtt CheckNameInTLIDynamic = _unitOfWork.DynamicAttRepository.GetIncludeWhereFirst(x =>
                                x.Key.ToLower() == DynamicAttEntity.Key.ToLower() &&
                                x.tablesNames.TableName.ToLower() == DynamicAttEntity.tablesNames.TableName.ToLower() && x.CivilWithoutLegCategoryId == DynamicAttEntity.CivilWithoutLegCategoryId,
                                    x => x.tablesNames);

                            if (CheckNameInTLIDynamic != null)
                                return new Response<AddDependencyViewModel>(true, null, null, $"This Key {DynamicAttEntity.Key} is Already Exist in Table {DynamicAttEntity.tablesNames.TableName} as a Dynamic Attribute", (int)Constants.ApiReturnCode.fail);

                            // Validation For Dynamic Attribute Key (Can't Add New Dynamic Attribute Key If It is Already Exist in Atttribute Activated Table (TLIattributeActivated))..
                            object CheckNameInTLIAttribute = null;
                            if (DynamicAttEntity.CivilWithoutLegCategoryId == null || DynamicAttEntity.CivilWithoutLegCategoryId == 0)
                            {
                                CheckNameInTLIAttribute = _unitOfWork.AttributeActivatedRepository.GetWhereFirst(x =>
                                    x.Key.ToLower() == DynamicAttEntity.Key.ToLower() &&
                                    x.Tabel.ToLower() == DynamicAttEntity.tablesNames.TableName.ToLower());
                            }
                            else
                            {
                                CheckNameInTLIAttribute = _unitOfWork.AttActivatedCategoryRepository.GetIncludeWhereFirst(x =>
                                    x.Label.ToLower() == DynamicAttEntity.Key.ToLower() &&
                                    x.attributeActivated.Tabel.ToLower() == DynamicAttEntity.tablesNames.TableName.ToLower() &&
                                    x.civilWithoutLegCategoryId == DynamicAttEntity.CivilWithoutLegCategoryId, x => x.attributeActivated);
                            }

                            if (CheckNameInTLIAttribute != null)
                                return new Response<AddDependencyViewModel>(true, null, null, $"This Key {DynamicAttEntity.Key} is Already Exist in Table {DynamicAttEntity.tablesNames.TableName} as a Static Attribute", (int)Constants.ApiReturnCode.fail);

                            DynamicAttEntity.LibraryAtt = true;
                            DynamicAttEntity.CivilWithoutLegCategoryId = addDependencyViewModel.CivilWithoutLegCategoryId;

                            TLIdataType DataType = _unitOfWork.DataTypeRepository
                                .GetWhereFirst(x => x.Id == addDependencyViewModel.DataTypeId);

                            int DynamicAttId;
                            Dictionary<string, int> ListValuesIds = new Dictionary<string, int>();

                            #region NO NEED FOR THIS SECTION BECAUSE THERE IS NO DYNAMIC ATTRIBUTE LIST....

                            //if data type is list then add dynamic attributes and add list of values 
                            //if (DataType.Name.ToLower() == "list")
                            //{
                            //    //Add dynamic attribute
                            //    //_unitOfWork.DynamicAttRepository.Add(DynamicAttEntity);
                            //    //_unitOfWork.SaveChanges();
                            //    //Add values for that dynamic attribute
                            //    using (var cmd = con.CreateCommand())
                            //    {

                            //        if (DynamicAttEntity.CivilWithoutLegCategoryId == null)
                            //        {
                            //            cmd.CommandText = $"Insert into \"TLIdynamicAtt\"(\"Key\", \"LibraryAtt\", \"DataTypeId\", \"Description\", \"tablesNamesId\") VALUES('{ DynamicAttEntity.Key }', { Convert.ToInt32(0) }, { Convert.ToInt32(DynamicAttEntity.DataTypeId) }, '{ DynamicAttEntity.Description }',  { Convert.ToInt32(DynamicAttEntity.tablesNamesId) }) RETURNING \"Id\" INTO :id";
                            //        }
                            //        else
                            //        {
                            //            cmd.CommandText = $"Insert into \"TLIdynamicAtt\"(\"Key\", \"LibraryAtt\", \"DataTypeId\", \"Description\", \"CivilWithoutLegCategoryId\", \"tablesNamesId\") VALUES('{ DynamicAttEntity.Key }', { Convert.ToInt32(0) }, { Convert.ToInt32(DynamicAttEntity.DataTypeId) }, '{ DynamicAttEntity.Description }', { Convert.ToInt32(DynamicAttEntity.CivilWithoutLegCategoryId) },  { Convert.ToInt32(DynamicAttEntity.tablesNamesId) }) RETURNING \"Id\" INTO :id";
                            //        }
                            //        cmd.Parameters.Add(new OracleParameter
                            //        {
                            //            ParameterName = ":id",
                            //            OracleDbType = OracleDbType.Int16,
                            //            Direction = System.Data.ParameterDirection.Output
                            //        });
                            //        cmd.ExecuteNonQuery();
                            //        //read data and save it on list of integers to add dynamic installation attribute values for each filtered data
                            //        DynamicAttId = int.Parse(cmd.Parameters[":id"].Value.ToString());
                            //        AddHistoryForDynamic(DynamicAttId, "Add", DynamicAttEntity.tablesNamesId);
                            //    }
                            //    foreach (var DynamicAttValue in addDependencyViewModel.dynamicListValues)
                            //    {
                            //        //TLIdynamicListValues dynamicListValues = new TLIdynamicListValues();
                            //        //dynamicListValues.dynamicAttId = DynamicAttId;
                            //        //dynamicListValues.Value = DynamicAttValue.Value;
                            //        //_unitOfWork.DynamicListValuesRepository.Add(dynamicListValues);
                            //        using (var cmd = con.CreateCommand())
                            //        {

                            //            cmd.CommandText = $"Insert into \"TLIdynamicListValues\"(\"Value\", \"dynamicAttId\") VALUES('{ DynamicAttValue.Value }', { Convert.ToInt32(DynamicAttId) }) RETURNING \"Id\" INTO :id";

                            //            cmd.Parameters.Add(new OracleParameter
                            //            {
                            //                ParameterName = ":id",
                            //                OracleDbType = OracleDbType.Int16,
                            //                Direction = System.Data.ParameterDirection.Output
                            //            });
                            //            cmd.ExecuteNonQuery();
                            //            //read data and save it on list of integers to add dynamic installation attribute values for each filtered data
                            //            ListValuesIds.Add(DynamicAttValue.Value, int.Parse(cmd.Parameters[":id"].Value.ToString()));
                            //        }
                            //    }
                            //    //_unitOfWork.SaveChanges();
                            //}
                            //else
                            //{
                            //using (var cmd = con.CreateCommand())
                            //{
                            //    if (DynamicAttEntity.CivilWithoutLegCategoryId == null)
                            //    {
                            //        cmd.CommandText = $"Insert into \"TLIdynamicAtt\"(\"Key\", \"LibraryAtt\", \"DataTypeId\", \"Description\", \"tablesNamesId\") VALUES('{ DynamicAttEntity.Key }', { Convert.ToInt32(1) }, { Convert.ToInt32(DynamicAttEntity.DataTypeId) }, '{ DynamicAttEntity.Description }',  { Convert.ToInt32(DynamicAttEntity.tablesNamesId) }) RETURNING \"Id\" INTO :id";
                            //    }
                            //    else
                            //    {
                            //        cmd.CommandText = $"Insert into \"TLIdynamicAtt\"(\"Key\", \"LibraryAtt\", \"DataTypeId\", \"Description\", \"CivilWithoutLegCategoryId\", \"tablesNamesId\") VALUES('{ DynamicAttEntity.Key }', { Convert.ToInt32(1) }, { Convert.ToInt32(DynamicAttEntity.DataTypeId) }, '{ DynamicAttEntity.Description }', { Convert.ToInt32(DynamicAttEntity.CivilWithoutLegCategoryId) },  { Convert.ToInt32(DynamicAttEntity.tablesNamesId) }) RETURNING \"Id\" INTO :id";
                            //    }
                            //    cmd.Parameters.Add(new OracleParameter
                            //    {
                            //        ParameterName = ":id",
                            //        OracleDbType = OracleDbType.Int16,
                            //        Direction = System.Data.ParameterDirection.Output
                            //    });
                            //    cmd.ExecuteNonQuery();
                            //    //read data and save it on list of integers to add dynamic installation attribute values for each filtered data
                            //    DynamicAttId = int.Parse(cmd.Parameters[":id"].Value.ToString());
                            //    // AddHistoryForDynamic(DynamicAttId, "Add", DynamicAttEntity.tablesNamesId);
                            //}
                            //if not list then just add dynamic attribute
                            //_unitOfWork.DynamicAttRepository.Add(DynamicAttEntity);
                            //_unitOfWork.SaveChanges();
                            //}

                            #endregion

                            _unitOfWork.DynamicAttRepository.Add(DynamicAttEntity);
                            _unitOfWork.SaveChanges();

                            DynamicAttId = DynamicAttEntity.Id;

                            #region NO NEED FOR THIS SECTION BECAUSE THERE IS NO DYNAMIC ATTRIBUTE LIST....
                            //using (var cmd = con.CreateCommand())
                            //{
                            //    if (DynamicAttEntity.CivilWithoutLegCategoryId == null)
                            //    {
                            //        cmd.CommandText = $"Insert into \"TLIdynamicAtt\"(\"Key\", \"LibraryAtt\", \"DataTypeId\", \"Description\", \"tablesNamesId\", \"Required\") VALUES('{ DynamicAttEntity.Key }', { Convert.ToInt32(1) }, { Convert.ToInt32(DynamicAttEntity.DataTypeId) }, '{ DynamicAttEntity.Description }',  { Convert.ToInt32(DynamicAttEntity.tablesNamesId) }, { Convert.ToBoolean(DynamicAttEntity.Required) }) RETURNING \"Id\" INTO :id";
                            //    }
                            //    else
                            //    {
                            //        cmd.CommandText = $"Insert into \"TLIdynamicAtt\"(\"Key\", \"LibraryAtt\", \"DataTypeId\", \"Description\", \"CivilWithoutLegCategoryId\", \"tablesNamesId\", \"Required\") VALUES('{ DynamicAttEntity.Key }', { Convert.ToInt32(1) }, { Convert.ToInt32(DynamicAttEntity.DataTypeId) }, '{ DynamicAttEntity.Description }', { Convert.ToInt32(DynamicAttEntity.CivilWithoutLegCategoryId) },  { Convert.ToInt32(DynamicAttEntity.tablesNamesId) }, { Convert.ToBoolean(DynamicAttEntity.Required) }) RETURNING \"Id\" INTO :id";
                            //    }
                            //    cmd.Parameters.Add(new OracleParameter
                            //    {
                            //        ParameterName = ":id",
                            //        OracleDbType = OracleDbType.Int16,
                            //        Direction = System.Data.ParameterDirection.Output
                            //    });
                            //    cmd.ExecuteNonQuery();

                            //    //read data and save it on list of integers to add dynamic installation attribute values for each filtered data
                            //    DynamicAttId = int.Parse(cmd.Parameters[":id"].Value.ToString());

                            //    // AddHistoryForDynamic(DynamicAttId, "Add", DynamicAttEntity.tablesNamesId);
                            //}
                            #endregion
                            if (addDependencyViewModel.validations != null ? addDependencyViewModel.validations.Count > 0 : false)
                            {
                                foreach (var GeneralValidation in addDependencyViewModel.validations)
                                {
                                    if (GeneralValidation.OperationId > 0 && !string.IsNullOrEmpty(GeneralValidation.OperationValue))
                                    {
                                        //if there is validation on that dynamic attribute then add validation
                                        //validation used when i add value for that dynamic attribute then should valid form that validation
                                        TLIvalidation validation = new TLIvalidation();
                                        validation.DynamicAttId = DynamicAttId;
                                        validation.OperationId = GeneralValidation.OperationId;
                                        if (DataType.Name.ToLower() == "string")
                                        {
                                            validation.ValueString = GeneralValidation.OperationValue;
                                        }
                                        else if (DataType.Name.ToLower() == "int" || DataType.Name.ToLower() == "double" || DataType.Name.ToLower() == "float")
                                        {
                                            validation.ValueDouble = Convert.ToDouble(GeneralValidation.OperationValue);
                                        }
                                        else if (DataType.Name.ToLower() == "boolean")
                                        {
                                            validation.ValueBoolean = Convert.ToBoolean(GeneralValidation.OperationValue);
                                        }
                                        else if (DataType.Name.ToLower() == "datetime")
                                        {
                                            validation.ValueDateTime = Convert.ToDateTime(GeneralValidation.OperationValue);
                                        }
                                        //validation.OperationValue = addDependencyViewModel.validation.OperationValue;
                                        _unitOfWork.ValidationRepository.Add(validation);
                                        //_unitOfWork.SaveChanges();
                                    }
                                }
                            }

                            if (addDependencyViewModel.Dependencies != null ? addDependencyViewModel.Dependencies.Count > 0 : false)
                            {
                                // Check if there are dependencies
                                foreach (var Dependencie in addDependencyViewModel.Dependencies)
                                {
                                    //First add depenedency 
                                    TLIdependency dependency = new TLIdependency();
                                    dependency.DynamicAttId = DynamicAttId;
                                    dependency.OperationId = Dependencie.OperationId;
                                    if (DataType.Name.ToLower() == "string")
                                    {
                                        dependency.ValueString = Dependencie.ValueString;
                                    }
                                    else if (DataType.Name.ToLower() == "int" || DataType.Name.ToLower() == "double" || DataType.Name.ToLower() == "float")
                                    {
                                        dependency.ValueDouble = Convert.ToDouble(Dependencie.ValueDouble);
                                    }
                                    else if (DataType.Name.ToLower() == "boolean")
                                    {
                                        dependency.ValueBoolean = Convert.ToBoolean(Dependencie.ValueBoolean);
                                    }
                                    else if (DataType.Name.ToLower() == "datetime")
                                    {
                                        dependency.ValueDateTime = Convert.ToDateTime(Dependencie.ValueDateTime);
                                    }
                                    //dependency.Value = Dependencie.Value;
                                    _unitOfWork.DependencieRepository.Add(dependency);

                                    //Each dependency have more than one row
                                    foreach (var DependencyRow in Dependencie.DependencyRows)
                                    {
                                        //Add new row
                                        TLIrow row = new TLIrow();
                                        _unitOfWork.RowRepository.Add(row);
                                        //_unitOfWork.SaveChanges();
                                        //Each depenedency row have more than 1 RowRule
                                        foreach (var RowRule in DependencyRow.RowRules)
                                        {
                                            var TableNameEntity = DynamicAttEntity.tablesNames;
                                            //First add the Rule 
                                            TLIrule Rule = _mapper.Map<TLIrule>(RowRule.Rule);
                                            Rule.tablesNamesId = TableNameEntity.Id;
                                            //TableName = _unitOfWork.AttributeActivatedRepository.GetAllAsQueryable().Where(x => x.Id == Rule.attributeActivatedId).FirstOrDefault().Tabel;
                                            _unitOfWork.RuleRepository.Add(Rule);
                                            //_unitOfWork.SaveChanges();
                                            //Then add RowRule
                                            TLIrowRule RowRuleEntity = new TLIrowRule();
                                            RowRuleEntity.RuleId = Rule.Id;
                                            RowRuleEntity.RowId = row.Id;
                                            RowRuleEntity.LogicalOperationId = RowRule.LogicalOperationId;
                                            _unitOfWork.RowRuleRepository.Add(RowRuleEntity);
                                            //_unitOfWork.SaveChanges();
                                        }
                                        //Then Depenedency Row
                                        TLIdependencyRow DependencyRowEntity = new TLIdependencyRow();
                                        DependencyRowEntity.DependencyId = dependency.Id;
                                        DependencyRowEntity.RowId = row.Id;
                                        DependencyRowEntity.LogicalOperationId = DependencyRow.LogicalOperationId;
                                        _unitOfWork.DependencyRowRepository.Add(DependencyRowEntity);
                                        //_unitOfWork.SaveChanges();

                                        //List<int> ResultDataType = _unitOfWork.OperationRepository.GetWhereAndSelect(x =>
                                        //    x.Name.ToLower() == "result" || x.Name == "==", x => new { x.Id }).Select(x => x.Id).ToList();

                                        //int Count = ResultDataType.Count();
                                        //for (int i = 0; i < Count; i++)
                                        //{
                                        //    if (Dependencie.OperationId == ResultDataType[i])
                                        //        FilterLibraryDataAndInsertIt(addDependencyViewModel, addDependencyViewModel.TableName, con, DynamicAttId, ListValuesIds);
                                        //}
                                    }
                                }
                            }
                            if (addDependencyViewModel.CivilWithoutLegCategoryId != null)
                            {
                                _unitOfWork.AttributeViewManagmentRepository.Add(new TLIattributeViewManagment
                                {
                                    DynamicAttId = DynamicAttId,
                                    Enable = true,
                                    EditableManagmentViewId = _unitOfWork.EditableManagmentViewRepository.GetWhereFirst(x =>
                                        x.TLItablesNames1Id == addDependencyViewModel.tablesNamesId &&
                                        (x.CivilWithoutLegCategoryId != null ?
                                            x.CivilWithoutLegCategoryId == addDependencyViewModel.CivilWithoutLegCategoryId : false)).Id
                                });
                                _unitOfWork.SaveChanges();

                            }
                            else
                            {
                                _unitOfWork.AttributeViewManagmentRepository.Add(new TLIattributeViewManagment
                                {
                                    DynamicAttId = DynamicAttId,
                                    Enable = true,
                                    EditableManagmentViewId = _unitOfWork.EditableManagmentViewRepository.GetWhereFirst(x =>
                                        x.TLItablesNames1Id == addDependencyViewModel.tablesNamesId).Id
                                });
                            }

                            AddLibraryListValues(addDependencyViewModel, DynamicAttId);

                            tran.Commit();
                            _unitOfWork.SaveChanges();
                            transaction.Complete();

                            return new Response<AddDependencyViewModel>();
                        }
                        catch (Exception err)
                        {
                            tran.Rollback();
                            return new Response<AddDependencyViewModel>(true, null, null, err.Message, (int)Constants.ApiReturnCode.fail);
                        }
                    }
                }
            }
        }
        public async Task<Response<DynamicAttViewModel>> Edit(EditDynamicAttViewModel DynamicAttViewModel)
        {
            try
            {
                TLIdynamicAtt OldDynamicAttData = db.TLIdynamicAtt.Include(x => x.DataType).AsQueryable().AsNoTracking()
                    .AsQueryable().AsNoTracking().FirstOrDefault(x => x.Id == DynamicAttViewModel.Id);

                if (OldDynamicAttData.DataTypeId != DynamicAttViewModel.DataTypeId)
                {
                    TLIdataType NewDataType = _unitOfWork.DataTypeRepository
                        .GetWhereFirst(x => x.Id == DynamicAttViewModel.DataTypeId.Value);

                    if (NewDataType.Name.ToLower() == "string".ToLower())
                    {
                        if (OldDynamicAttData.LibraryAtt)
                        {
                            List<TLIdynamicAttLibValue> DynamicAttValues = _unitOfWork.DynamicAttLibRepository
                                .GetWhere(x => x.DynamicAttId == DynamicAttViewModel.Id).ToList();

                            if (OldDynamicAttData.DataType.Name.ToLower() == "double".ToLower())
                            {
                                foreach (TLIdynamicAttLibValue DynamicAttValue in DynamicAttValues)
                                {
                                    if (DynamicAttValue.ValueDouble != null)
                                    {
                                        DynamicAttValue.ValueString = DynamicAttValue.ValueDouble.ToString();
                                        DynamicAttValue.ValueDouble = null;
                                    }
                                }
                            }
                            else if (OldDynamicAttData.DataType.Name.ToLower() == "boolean".ToLower())
                            {
                                foreach (TLIdynamicAttLibValue DynamicAttValue in DynamicAttValues)
                                {
                                    if (DynamicAttValue.ValueBoolean != null)
                                    {
                                        DynamicAttValue.ValueString = DynamicAttValue.ValueBoolean.ToString();
                                        DynamicAttValue.ValueBoolean = null;
                                    }
                                }
                            }
                            else if (OldDynamicAttData.DataType.Name.ToLower() == "datetime".ToLower())
                            {
                                foreach (TLIdynamicAttLibValue DynamicAttValue in DynamicAttValues)
                                {
                                    if (DynamicAttValue.ValueDateTime != null)
                                    {
                                        DynamicAttValue.ValueString = DynamicAttValue.ValueDateTime.ToString();
                                        DynamicAttValue.ValueDateTime = null;
                                    }
                                }
                            }
                        }
                        else
                        {
                            List<TLIdynamicAttInstValue> DynamicAttValues = _unitOfWork.DynamicAttInstValueRepository
                                .GetWhere(x => x.DynamicAttId == DynamicAttViewModel.Id).ToList();

                            if (OldDynamicAttData.DataType.Name.ToLower() == "double".ToLower())
                            {
                                foreach (TLIdynamicAttInstValue DynamicAttValue in DynamicAttValues)
                                {
                                    DynamicAttValue.ValueString = DynamicAttValue.ValueDouble.ToString();
                                    DynamicAttValue.ValueDouble = null;
                                }
                            }
                            else if (OldDynamicAttData.DataType.Name.ToLower() == "boolean".ToLower())
                            {
                                foreach (TLIdynamicAttInstValue DynamicAttValue in DynamicAttValues)
                                {
                                    DynamicAttValue.ValueString = DynamicAttValue.ValueBoolean.ToString();
                                    DynamicAttValue.ValueBoolean = null;
                                }
                            }
                            else if (OldDynamicAttData.DataType.Name.ToLower() == "datetime".ToLower())
                            {
                                foreach (TLIdynamicAttInstValue DynamicAttValue in DynamicAttValues)
                                {
                                    DynamicAttValue.ValueString = DynamicAttValue.ValueDateTime.ToString();
                                    DynamicAttValue.ValueDateTime = null;
                                }
                            }
                        }
                    }
                    else if (NewDataType.Name.ToLower() == "double".ToLower())
                    {
                        if (OldDynamicAttData.LibraryAtt)
                        {
                            List<TLIdynamicAttLibValue> DynamicAttValues = _unitOfWork.DynamicAttLibRepository
                                .GetWhere(x => x.DynamicAttId == DynamicAttViewModel.Id && !string.IsNullOrEmpty(x.ValueString) &&
                                    !string.IsNullOrWhiteSpace(x.ValueString)).ToList();

                            foreach (TLIdynamicAttLibValue DynamicAttValue in DynamicAttValues)
                            {
                                DynamicAttValue.ValueDouble = double.Parse(DynamicAttValue.ValueString);
                                DynamicAttValue.ValueString = null;
                            }
                        }
                        else
                        {
                            List<TLIdynamicAttInstValue> DynamicAttValues = _unitOfWork.DynamicAttInstValueRepository
                                .GetWhere(x => x.DynamicAttId == DynamicAttViewModel.Id && !string.IsNullOrEmpty(x.ValueString) &&
                                    !string.IsNullOrWhiteSpace(x.ValueString)).ToList();

                            foreach (TLIdynamicAttInstValue DynamicAttValue in DynamicAttValues)
                            {
                                DynamicAttValue.ValueDouble = double.Parse(DynamicAttValue.ValueString);
                                DynamicAttValue.ValueString = null;
                            }
                        }
                    }
                    else if (NewDataType.Name.ToLower() == "boolean".ToLower())
                    {
                        if (OldDynamicAttData.LibraryAtt)
                        {
                            List<TLIdynamicAttLibValue> DynamicAttValues = _unitOfWork.DynamicAttLibRepository
                                .GetWhere(x => x.DynamicAttId == DynamicAttViewModel.Id && !string.IsNullOrEmpty(x.ValueString) &&
                                    !string.IsNullOrWhiteSpace(x.ValueString)).ToList();

                            foreach (TLIdynamicAttLibValue DynamicAttValue in DynamicAttValues)
                            {
                                DynamicAttValue.ValueBoolean = bool.Parse(DynamicAttValue.ValueString);
                                DynamicAttValue.ValueString = null;
                            }
                        }
                        else
                        {
                            List<TLIdynamicAttInstValue> DynamicAttValues = _unitOfWork.DynamicAttInstValueRepository
                                .GetWhere(x => x.DynamicAttId == DynamicAttViewModel.Id && !string.IsNullOrEmpty(x.ValueString) &&
                                    !string.IsNullOrWhiteSpace(x.ValueString)).ToList();

                            foreach (TLIdynamicAttInstValue DynamicAttValue in DynamicAttValues)
                            {
                                DynamicAttValue.ValueBoolean = bool.Parse(DynamicAttValue.ValueString);
                                DynamicAttValue.ValueString = null;
                            }
                        }
                    }
                    else if (NewDataType.Name.ToLower() == "datetime".ToLower())
                    {
                        if (OldDynamicAttData.LibraryAtt)
                        {
                            List<TLIdynamicAttLibValue> DynamicAttValues = _unitOfWork.DynamicAttLibRepository
                                .GetWhere(x => x.DynamicAttId == DynamicAttViewModel.Id && !string.IsNullOrEmpty(x.ValueString) &&
                                    !string.IsNullOrWhiteSpace(x.ValueString)).ToList();

                            foreach (TLIdynamicAttLibValue DynamicAttValue in DynamicAttValues)
                            {
                                DynamicAttValue.ValueDateTime = DateTime.Parse(DynamicAttValue.ValueString);
                                DynamicAttValue.ValueString = null;
                            }
                        }
                        else
                        {
                            List<TLIdynamicAttInstValue> DynamicAttValues = _unitOfWork.DynamicAttInstValueRepository
                                .GetWhere(x => x.DynamicAttId == DynamicAttViewModel.Id && !string.IsNullOrEmpty(x.ValueString) &&
                                    !string.IsNullOrWhiteSpace(x.ValueString)).ToList();

                            foreach (TLIdynamicAttInstValue DynamicAttValue in DynamicAttValues)
                            {
                                DynamicAttValue.ValueDateTime = DateTime.Parse(DynamicAttValue.ValueString);
                                DynamicAttValue.ValueString = null;
                            }
                        }
                    }
                }

                TLItablesNames TableName = _unitOfWork.TablesNamesRepository
                    .GetWhereFirst(x => x.Id == DynamicAttViewModel.tablesNamesId);

                TLIdynamicAtt CheckNameInTLIDynamic = _unitOfWork.DynamicAttRepository.GetIncludeWhereFirst(x =>
                    x.Key.ToLower() == DynamicAttViewModel.Key.ToLower() && x.Id != DynamicAttViewModel.Id &&
                    x.tablesNamesId == DynamicAttViewModel.tablesNamesId && x.CivilWithoutLegCategoryId == DynamicAttViewModel.CivilWithoutLegCategoryId,
                        x => x.tablesNames);

                if (CheckNameInTLIDynamic != null)
                    return new Response<DynamicAttViewModel>(true, null, null, $"This Key {DynamicAttViewModel.Key} is Already Exist", (int)Constants.ApiReturnCode.fail);

                // Validation For Dynamic Attribute Key (Can't Add New Dynamic Attribute Key If It is Already Exist in Atttribute Activated Table (TLIattributeActivated))..
                TLIattributeActivated CheckNameInTLIAttribute = _unitOfWork.AttributeActivatedRepository.GetWhereFirst(x =>
                    x.Key.ToLower() == DynamicAttViewModel.Key.ToLower() &&
                    x.Tabel.ToLower() == TableName.TableName.ToLower());

                if (CheckNameInTLIAttribute != null)
                    return new Response<DynamicAttViewModel>(true, null, null, $"This Key {DynamicAttViewModel.Key} is Already Exist in Table {TableName.TableName} as a Static Attribute", (int)Constants.ApiReturnCode.fail);

                //---------------------------------------------------

                TLIdynamicAtt DynamicAtt = _mapper.Map<TLIdynamicAtt>(DynamicAttViewModel);
                DynamicAtt.DefaultValue = OldDynamicAttData.DefaultValue;

                await _unitOfWork.DynamicAttRepository.UpdateItem(DynamicAtt);
                await _unitOfWork.SaveChangesAsync();

                return new Response<DynamicAttViewModel>(true, null, null, null, (int)Constants.ApiReturnCode.success);
            }
            catch (Exception err)
            {

                return new Response<DynamicAttViewModel>(true, null, null, err.Message, (int)Constants.ApiReturnCode.fail);
            }
        }
        public Response<AllAtributes> GetForAdd(string TableName)
        {
            try
            {
                AllAtributes Attributes = new AllAtributes();

                TLItablesNames TableNameEntity = _unitOfWork.TablesNamesRepository.GetWhereFirst(c =>
                    c.TableName == TableName);

                // Radio Load Libraries
                if (Helpers.Constants.TablesNames.TLIradioAntennaLibrary.ToString() == TableName)
                {
                    List<BaseAttView> listofAttributesActivated = _unitOfWork.AttributeActivatedRepository.GetAttributeActivated(TableName, null, null).ToList();

                    listofAttributesActivated.AddRange(_unitOfWork.LogistcalRepository.GetLogistical(Helpers.Constants.TablePartName.Radio.ToString()));
                    Attributes.AttributesActivated = listofAttributesActivated;

                    IEnumerable<DynamicAttLibViewModel> DynamicAttributesWithoutValue = _unitOfWork.DynamicAttRepository
                        .GetDynamicLibAtts(TableNameEntity.Id, null);

                    foreach (DynamicAttLibViewModel DynamicAttribute in DynamicAttributesWithoutValue)
                    {
                        TLIdynamicAtt DynamicAttributeEntity = _unitOfWork.DynamicAttRepository.GetByID(DynamicAttribute.Id);

                        if (!string.IsNullOrEmpty(DynamicAttributeEntity.DefaultValue))
                        {
                            if (DynamicAttribute.DataType.ToLower() == "string".ToLower())
                                DynamicAttribute.Value = DynamicAttributeEntity.DefaultValue;

                            else if (DynamicAttribute.DataType.ToLower() == "int".ToLower())
                                DynamicAttribute.Value = int.Parse(DynamicAttributeEntity.DefaultValue);

                            else if (DynamicAttribute.DataType.ToLower() == "double".ToLower())
                                DynamicAttribute.Value = double.Parse(DynamicAttributeEntity.DefaultValue);

                            else if (DynamicAttribute.DataType.ToLower() == "boolean".ToLower())
                                DynamicAttribute.Value = bool.Parse(DynamicAttributeEntity.DefaultValue);

                            else if (DynamicAttribute.DataType.ToLower() == "datetime".ToLower())
                                DynamicAttribute.Value = DateTime.Parse(DynamicAttributeEntity.DefaultValue);
                        }
                        else
                        {
                            DynamicAttribute.Value = " ".Split(' ')[0];
                        }
                    }

                    Attributes.DynamicAtts = DynamicAttributesWithoutValue;
                }
                else if (Helpers.Constants.TablesNames.TLIradioRRULibrary.ToString() == TableName)
                {
                    List<BaseAttView> listofAttributesActivated = _unitOfWork.AttributeActivatedRepository.GetAttributeActivated(TableName, null, null).ToList();

                    listofAttributesActivated.AddRange(_unitOfWork.LogistcalRepository.GetLogistical(Helpers.Constants.TablePartName.Radio.ToString()));
                    Attributes.AttributesActivated = listofAttributesActivated;

                    IEnumerable<DynamicAttLibViewModel> DynamicAttributesWithoutValue = _unitOfWork.DynamicAttRepository
                        .GetDynamicLibAtts(TableNameEntity.Id, null);

                    foreach (DynamicAttLibViewModel DynamicAttribute in DynamicAttributesWithoutValue)
                    {
                        TLIdynamicAtt DynamicAttributeEntity = _unitOfWork.DynamicAttRepository.GetByID(DynamicAttribute.Id);

                        if (!string.IsNullOrEmpty(DynamicAttributeEntity.DefaultValue))
                        {
                            if (DynamicAttribute.DataType.ToLower() == "string".ToLower())
                                DynamicAttribute.Value = DynamicAttributeEntity.DefaultValue;

                            else if (DynamicAttribute.DataType.ToLower() == "int".ToLower())
                                DynamicAttribute.Value = int.Parse(DynamicAttributeEntity.DefaultValue);

                            else if (DynamicAttribute.DataType.ToLower() == "double".ToLower())
                                DynamicAttribute.Value = double.Parse(DynamicAttributeEntity.DefaultValue);

                            else if (DynamicAttribute.DataType.ToLower() == "boolean".ToLower())
                                DynamicAttribute.Value = bool.Parse(DynamicAttributeEntity.DefaultValue);

                            else if (DynamicAttribute.DataType.ToLower() == "datetime".ToLower())
                                DynamicAttribute.Value = DateTime.Parse(DynamicAttributeEntity.DefaultValue);
                        }
                        else
                        {
                            DynamicAttribute.Value = " ".Split(' ')[0];
                        }
                    }

                    Attributes.DynamicAtts = DynamicAttributesWithoutValue;
                }
                else if (Helpers.Constants.TablesNames.TLIradioOtherLibrary.ToString() == TableName)
                {
                    List<BaseAttView> listofAttributesActivated = _unitOfWork.AttributeActivatedRepository.GetAttributeActivated(TableName, null, null).ToList();

                    listofAttributesActivated.AddRange(_unitOfWork.LogistcalRepository.GetLogistical(Helpers.Constants.TablePartName.Radio.ToString()));
                    Attributes.AttributesActivated = listofAttributesActivated;

                    IEnumerable<DynamicAttLibViewModel> DynamicAttributesWithoutValue = _unitOfWork.DynamicAttRepository
                        .GetDynamicLibAtts(TableNameEntity.Id, null);

                    foreach (DynamicAttLibViewModel DynamicAttribute in DynamicAttributesWithoutValue)
                    {
                        TLIdynamicAtt DynamicAttributeEntity = _unitOfWork.DynamicAttRepository.GetByID(DynamicAttribute.Id);

                        if (!string.IsNullOrEmpty(DynamicAttributeEntity.DefaultValue))
                        {
                            if (DynamicAttribute.DataType.ToLower() == "string".ToLower())
                                DynamicAttribute.Value = DynamicAttributeEntity.DefaultValue;

                            else if (DynamicAttribute.DataType.ToLower() == "int".ToLower())
                                DynamicAttribute.Value = int.Parse(DynamicAttributeEntity.DefaultValue);

                            else if (DynamicAttribute.DataType.ToLower() == "double".ToLower())
                                DynamicAttribute.Value = double.Parse(DynamicAttributeEntity.DefaultValue);

                            else if (DynamicAttribute.DataType.ToLower() == "boolean".ToLower())
                                DynamicAttribute.Value = bool.Parse(DynamicAttributeEntity.DefaultValue);

                            else if (DynamicAttribute.DataType.ToLower() == "datetime".ToLower())
                                DynamicAttribute.Value = DateTime.Parse(DynamicAttributeEntity.DefaultValue);
                        }
                        else
                        {
                            DynamicAttribute.Value = " ".Split(' ')[0];
                        }
                    }

                    Attributes.DynamicAtts = DynamicAttributesWithoutValue;
                }
                foreach (BaseAttView Attribute in Attributes.AttributesActivated)
                {
                    if (Attribute.Key.ToLower() == "length" || Attribute.Key.ToLower() == "width" ||
                        Attribute.Key.ToLower() == "diameter" || Attribute.Key.ToLower() == "height")
                    {
                        Attribute.Manage = true;
                        Attribute.Required = true;
                        Attribute.enable = true;
                    }
                    if (Attribute.Key.ToLower() == "model")
                    {
                        Attribute.Required = true;
                        Attribute.enable = true;
                    }
                }

                List<BaseAttView> Test = Attributes.AttributesActivated.ToList();
                BaseAttView NameAttribute = Test.FirstOrDefault(x => x.Key.ToLower() == "Model".ToLower());
                if (NameAttribute != null)
                {
                    BaseAttView Swap = Test.ToList()[0];
                    Test[Test.IndexOf(NameAttribute)] = Swap;
                    Test[0] = NameAttribute;
                    Attributes.AttributesActivated = Test;
                }

                return new Response<AllAtributes>(true, Attributes, null, null, (int)Helpers.Constants.ApiReturnCode.success);
            }
            catch (Exception err)
            {
                return new Response<AllAtributes>(true, null, null, err.Message, (int)Helpers.Constants.ApiReturnCode.fail);
            }
        }
        public string CheckDependencyValidationForRadioTypes(object Input, string RadioType)
        {
            if (RadioType.ToLower() == TablesNames.TLIradioRRULibrary.ToString().ToLower())
            {
                AddRadioRRULibraryViewModel AddRadioLibraryViewModel = _mapper.Map<AddRadioRRULibraryViewModel>(Input);

                List<DynamicAttViewModel> DynamicAttributes = _mapper.Map<List<DynamicAttViewModel>>(_unitOfWork.DynamicAttRepository
                    .GetIncludeWhere(x => x.tablesNames.TableName.ToLower() == RadioType.ToLower() && !x.disable
                        , x => x.tablesNames).ToList());

                foreach (DynamicAttViewModel DynamicAttribute in DynamicAttributes)
                {
                    TLIdependency Dependency = _unitOfWork.DependencieRepository.GetIncludeWhereFirst(x => x.DynamicAttId == DynamicAttribute.Id &&
                        x.OperationId != null && (x.ValueBoolean != null || x.ValueDateTime != null || x.ValueDouble != null || !string.IsNullOrEmpty(x.ValueString)),
                            x => x.Operation, x => x.DynamicAtt);

                    if (Dependency != null)
                    {
                        AddDynamicLibAttValueViewModel InsertedDynamicAttributeValue = AddRadioLibraryViewModel.TLIdynamicAttLibValue
                            .FirstOrDefault(x => x.DynamicAttId == DynamicAttribute.Id);

                        if (InsertedDynamicAttributeValue == null)
                            return $"({DynamicAttribute.Key}) value can't be null and must be inserted";

                        List<int> RowsIds = _unitOfWork.DependencyRowRepository.GetWhere(x => x.DependencyId == Dependency.Id && x.RowId != null).Select(x => x.RowId.Value).Distinct().ToList();

                        foreach (int RowId in RowsIds)
                        {
                            List<TLIrule> Rules = _unitOfWork.RowRuleRepository.GetIncludeWhere(x => x.RowId.Value == RowId, x => x.Rule, x => x.Rule.Operation, x => x.Rule.attributeActivated
                                , x => x.Rule.dynamicAtt).Select(x => x.Rule).Distinct().ToList();

                            int Succed = 0;

                            foreach (TLIrule Rule in Rules)
                            {
                                string RuleOperation = Rule.Operation.Name;
                                object RuleValue = new object();

                                if (Rule.OperationValueBoolean != null)
                                    RuleValue = Rule.OperationValueBoolean;

                                else if (Rule.OperationValueDateTime != null)
                                    RuleValue = Rule.OperationValueDateTime;

                                else if (Rule.OperationValueDouble != null)
                                    RuleValue = Rule.OperationValueDouble;

                                else if (!string.IsNullOrEmpty(Rule.OperationValueString))
                                    RuleValue = Rule.OperationValueString;

                                object InsertedValue = new object();

                                if (Rule.attributeActivatedId != null)
                                {
                                    string AttributeName = Rule.attributeActivated.Key;

                                    InsertedValue = AddRadioLibraryViewModel.GetType().GetProperties()
                                        .FirstOrDefault(x => x.Name.ToLower() == AttributeName.ToLower()).GetValue(AddRadioLibraryViewModel, null);

                                    if (InsertedValue == null)
                                        break;
                                }
                                else if (Rule.dynamicAttId != null)
                                {
                                    AddDynamicLibAttValueViewModel DynamicObject = AddRadioLibraryViewModel.TLIdynamicAttLibValue
                                        .FirstOrDefault(x => x.DynamicAttId == Rule.dynamicAttId.Value);

                                    if (DynamicObject == null)
                                        break;

                                    if (DynamicObject.ValueBoolean != null)
                                        InsertedValue = DynamicObject.ValueBoolean;

                                    else if (DynamicObject.ValueDateTime != null)
                                        InsertedValue = DynamicObject.ValueDateTime;

                                    else if (DynamicObject.ValueDouble != null)
                                        InsertedValue = DynamicObject.ValueDouble;

                                    else if (!string.IsNullOrEmpty(DynamicObject.ValueString))
                                        InsertedValue = DynamicObject.ValueString;
                                }

                                if (InsertedValue == null)
                                    break;

                                if (RuleOperation == "==" ? InsertedValue.ToString().ToLower() == RuleValue.ToString().ToLower() :
                                    RuleOperation == "!=" ? InsertedValue.ToString().ToLower() != RuleValue.ToString().ToLower() :
                                    RuleOperation == ">" ? Comparer.DefaultInvariant.Compare(InsertedValue, RuleValue) == 1 :
                                    RuleOperation == ">=" ? (Comparer.DefaultInvariant.Compare(InsertedValue, RuleValue) == 1 ||
                                        InsertedValue.ToString().ToLower() == RuleValue.ToString().ToLower()) :
                                    RuleOperation == "<" ? Comparer.DefaultInvariant.Compare(InsertedValue, RuleValue) == -1 :
                                    RuleOperation == "<=" ? (Comparer.DefaultInvariant.Compare(InsertedValue, RuleValue) == -1 ||
                                        InsertedValue.ToString().ToLower() == RuleValue.ToString().ToLower()) : false)
                                {
                                    Succed++;
                                }
                            }
                            if (Rules.Count() == Succed)
                            {
                                string DependencyValidationOperation = Dependency.Operation.Name;

                                object DependencyValdiationValue = Dependency.ValueBoolean != null ? Dependency.ValueBoolean :
                                    Dependency.ValueDateTime != null ? Dependency.ValueDateTime :
                                    Dependency.ValueDouble != null ? Dependency.ValueDouble :
                                    !string.IsNullOrEmpty(Dependency.ValueString) ? Dependency.ValueString : null;

                                object InsertedDynamicAttributeValueAsObject = InsertedDynamicAttributeValue.ValueBoolean != null ? InsertedDynamicAttributeValue.ValueBoolean :
                                    InsertedDynamicAttributeValue.ValueDateTime != null ? InsertedDynamicAttributeValue.ValueDateTime :
                                    InsertedDynamicAttributeValue.ValueDouble != null ? InsertedDynamicAttributeValue.ValueDouble :
                                    !string.IsNullOrEmpty(InsertedDynamicAttributeValue.ValueString) ? InsertedDynamicAttributeValue.ValueString : null;

                                if (Dependency.ValueDateTime != null && InsertedDynamicAttributeValue.ValueDateTime != null)
                                {
                                    DateTime DependencyValdiationValueConverter = new DateTime(Dependency.ValueDateTime.Value.Year,
                                        Dependency.ValueDateTime.Value.Month, Dependency.ValueDateTime.Value.Day);

                                    DependencyValdiationValue = DependencyValdiationValueConverter;

                                    DateTime InsertedDynamicAttributeValueAsObjectConverter = new DateTime(InsertedDynamicAttributeValue.ValueDateTime.Value.Year,
                                        InsertedDynamicAttributeValue.ValueDateTime.Value.Month, InsertedDynamicAttributeValue.ValueDateTime.Value.Day);

                                    InsertedDynamicAttributeValueAsObject = InsertedDynamicAttributeValueAsObjectConverter;
                                }

                                if (InsertedDynamicAttributeValueAsObject != null && DependencyValdiationValue != null)
                                {
                                    if (!(DependencyValidationOperation == "==" ? InsertedDynamicAttributeValueAsObject.ToString().ToLower() == DependencyValdiationValue.ToString().ToLower() :
                                         DependencyValidationOperation == "!=" ? InsertedDynamicAttributeValueAsObject.ToString().ToLower() != DependencyValdiationValue.ToString().ToLower() :
                                         DependencyValidationOperation == ">" ? Comparer.DefaultInvariant.Compare(InsertedDynamicAttributeValueAsObject, DependencyValdiationValue) == 1 :
                                         DependencyValidationOperation == ">=" ? (InsertedDynamicAttributeValueAsObject.ToString().ToLower() == DependencyValdiationValue.ToString().ToLower() ||
                                             Comparer.DefaultInvariant.Compare(InsertedDynamicAttributeValueAsObject, DependencyValdiationValue) == 1) :
                                         DependencyValidationOperation == "<" ? Comparer.DefaultInvariant.Compare(InsertedDynamicAttributeValueAsObject, DependencyValdiationValue) == -1 :
                                         DependencyValidationOperation == "<=" ? (InsertedDynamicAttributeValueAsObject.ToString().ToLower() == DependencyValdiationValue.ToString().ToLower() ||
                                             Comparer.DefaultInvariant.Compare(InsertedDynamicAttributeValueAsObject, DependencyValdiationValue) == -1) : false))
                                    {
                                        string ReturnOperation = (DependencyValidationOperation == "==" ? "Equal To" :
                                            (DependencyValidationOperation == "!=" ? "not equal to" :
                                            (DependencyValidationOperation == ">" ? "bigger than" :
                                            (DependencyValidationOperation == ">=" ? "bigger than or equal to" :
                                            (DependencyValidationOperation == "<" ? "smaller than" :
                                            (DependencyValidationOperation == "<=" ? "smaller than or equal to" : ""))))));

                                        return $"({Dependency.DynamicAtt.Key}) value must be {ReturnOperation} {DependencyValdiationValue}";
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else if (RadioType.ToLower() == TablesNames.TLIradioAntennaLibrary.ToString().ToLower())
            {
                AddRadioAntennaLibraryViewModel AddRadioLibraryViewModel = _mapper.Map<AddRadioAntennaLibraryViewModel>(Input);

                List<DynamicAttViewModel> DynamicAttributes = _mapper.Map<List<DynamicAttViewModel>>(_unitOfWork.DynamicAttRepository
                    .GetIncludeWhere(x => x.tablesNames.TableName.ToLower() == RadioType.ToLower() && !x.disable
                        , x => x.tablesNames).ToList());

                foreach (DynamicAttViewModel DynamicAttribute in DynamicAttributes)
                {
                    TLIdependency Dependency = _unitOfWork.DependencieRepository.GetIncludeWhereFirst(x => x.DynamicAttId == DynamicAttribute.Id &&
                        x.OperationId != null && (x.ValueBoolean != null || x.ValueDateTime != null || x.ValueDouble != null || !string.IsNullOrEmpty(x.ValueString)),
                            x => x.Operation, x => x.DynamicAtt);

                    if (Dependency != null)
                    {
                        AddDynamicLibAttValueViewModel InsertedDynamicAttributeValue = AddRadioLibraryViewModel.TLIdynamicAttLibValue
                            .FirstOrDefault(x => x.DynamicAttId == DynamicAttribute.Id);

                        if (InsertedDynamicAttributeValue == null)
                            return $"({DynamicAttribute.Key}) value can't be null and must be inserted";

                        List<int> RowsIds = _unitOfWork.DependencyRowRepository.GetWhere(x => x.DependencyId == Dependency.Id && x.RowId != null).Select(x => x.RowId.Value).Distinct().ToList();

                        foreach (int RowId in RowsIds)
                        {
                            List<TLIrule> Rules = _unitOfWork.RowRuleRepository.GetIncludeWhere(x => x.RowId.Value == RowId, x => x.Rule, x => x.Rule.Operation, x => x.Rule.attributeActivated
                                , x => x.Rule.dynamicAtt).Select(x => x.Rule).Distinct().ToList();

                            int Succed = 0;

                            foreach (TLIrule Rule in Rules)
                            {
                                string RuleOperation = Rule.Operation.Name;
                                object RuleValue = new object();

                                if (Rule.OperationValueBoolean != null)
                                    RuleValue = Rule.OperationValueBoolean;

                                else if (Rule.OperationValueDateTime != null)
                                    RuleValue = Rule.OperationValueDateTime;

                                else if (Rule.OperationValueDouble != null)
                                    RuleValue = Rule.OperationValueDouble;

                                else if (!string.IsNullOrEmpty(Rule.OperationValueString))
                                    RuleValue = Rule.OperationValueString;

                                object InsertedValue = new object();

                                if (Rule.attributeActivatedId != null)
                                {
                                    string AttributeName = Rule.attributeActivated.Key;

                                    InsertedValue = AddRadioLibraryViewModel.GetType().GetProperties()
                                        .FirstOrDefault(x => x.Name.ToLower() == AttributeName.ToLower()).GetValue(AddRadioLibraryViewModel, null);
                                }
                                else if (Rule.dynamicAttId != null)
                                {
                                    AddDynamicLibAttValueViewModel DynamicObject = AddRadioLibraryViewModel.TLIdynamicAttLibValue
                                        .FirstOrDefault(x => x.DynamicAttId == Rule.dynamicAttId.Value);

                                    if (DynamicObject == null)
                                        break;

                                    if (DynamicObject.ValueBoolean != null)
                                        InsertedValue = DynamicObject.ValueBoolean;

                                    else if (DynamicObject.ValueDateTime != null)
                                        InsertedValue = DynamicObject.ValueDateTime;

                                    else if (DynamicObject.ValueDouble != null)
                                        InsertedValue = DynamicObject.ValueDouble;

                                    else if (!string.IsNullOrEmpty(DynamicObject.ValueString))
                                        InsertedValue = DynamicObject.ValueString;
                                }

                                if (InsertedValue == null)
                                    break;

                                if (RuleOperation == "==" ? InsertedValue.ToString().ToLower() == RuleValue.ToString().ToLower() :
                                    RuleOperation == "!=" ? InsertedValue.ToString().ToLower() != RuleValue.ToString().ToLower() :
                                    RuleOperation == ">" ? Comparer.DefaultInvariant.Compare(InsertedValue, RuleValue) == 1 :
                                    RuleOperation == ">=" ? (Comparer.DefaultInvariant.Compare(InsertedValue, RuleValue) == 1 ||
                                        InsertedValue.ToString().ToLower() == RuleValue.ToString().ToLower()) :
                                    RuleOperation == "<" ? Comparer.DefaultInvariant.Compare(InsertedValue, RuleValue) == -1 :
                                    RuleOperation == "<=" ? (Comparer.DefaultInvariant.Compare(InsertedValue, RuleValue) == -1 ||
                                        InsertedValue.ToString().ToLower() == RuleValue.ToString().ToLower()) : false)
                                {
                                    Succed++;
                                }
                            }
                            if (Rules.Count() == Succed)
                            {
                                string DependencyValidationOperation = Dependency.Operation.Name;

                                object DependencyValdiationValue = Dependency.ValueBoolean != null ? Dependency.ValueBoolean :
                                    Dependency.ValueDateTime != null ? Dependency.ValueDateTime :
                                    Dependency.ValueDouble != null ? Dependency.ValueDouble :
                                    !string.IsNullOrEmpty(Dependency.ValueString) ? Dependency.ValueString : null;

                                object InsertedDynamicAttributeValueAsObject = InsertedDynamicAttributeValue.ValueBoolean != null ? InsertedDynamicAttributeValue.ValueBoolean :
                                    InsertedDynamicAttributeValue.ValueDateTime != null ? InsertedDynamicAttributeValue.ValueDateTime :
                                    InsertedDynamicAttributeValue.ValueDouble != null ? InsertedDynamicAttributeValue.ValueDouble :
                                    !string.IsNullOrEmpty(InsertedDynamicAttributeValue.ValueString) ? InsertedDynamicAttributeValue.ValueString : null;

                                if (Dependency.ValueDateTime != null && InsertedDynamicAttributeValue.ValueDateTime != null)
                                {
                                    DateTime DependencyValdiationValueConverter = new DateTime(Dependency.ValueDateTime.Value.Year,
                                        Dependency.ValueDateTime.Value.Month, Dependency.ValueDateTime.Value.Day);

                                    DependencyValdiationValue = DependencyValdiationValueConverter;

                                    DateTime InsertedDynamicAttributeValueAsObjectConverter = new DateTime(InsertedDynamicAttributeValue.ValueDateTime.Value.Year,
                                        InsertedDynamicAttributeValue.ValueDateTime.Value.Month, InsertedDynamicAttributeValue.ValueDateTime.Value.Day);

                                    InsertedDynamicAttributeValueAsObject = InsertedDynamicAttributeValueAsObjectConverter;
                                }

                                if (InsertedDynamicAttributeValueAsObject != null && DependencyValdiationValue != null)
                                {
                                    if (!(DependencyValidationOperation == "==" ? InsertedDynamicAttributeValueAsObject.ToString().ToLower() == DependencyValdiationValue.ToString().ToLower() :
                                         DependencyValidationOperation == "!=" ? InsertedDynamicAttributeValueAsObject.ToString().ToLower() != DependencyValdiationValue.ToString().ToLower() :
                                         DependencyValidationOperation == ">" ? Comparer.DefaultInvariant.Compare(InsertedDynamicAttributeValueAsObject, DependencyValdiationValue) == 1 :
                                         DependencyValidationOperation == ">=" ? (InsertedDynamicAttributeValueAsObject.ToString().ToLower() == DependencyValdiationValue.ToString().ToLower() ||
                                             Comparer.DefaultInvariant.Compare(InsertedDynamicAttributeValueAsObject, DependencyValdiationValue) == 1) :
                                         DependencyValidationOperation == "<" ? Comparer.DefaultInvariant.Compare(InsertedDynamicAttributeValueAsObject, DependencyValdiationValue) == -1 :
                                         DependencyValidationOperation == "<=" ? (InsertedDynamicAttributeValueAsObject.ToString().ToLower() == DependencyValdiationValue.ToString().ToLower() ||
                                             Comparer.DefaultInvariant.Compare(InsertedDynamicAttributeValueAsObject, DependencyValdiationValue) == -1) : false))
                                    {
                                        string ReturnOperation = (DependencyValidationOperation == "==" ? "Equal To" :
                                            (DependencyValidationOperation == "!=" ? "not equal to" :
                                            (DependencyValidationOperation == ">" ? "bigger than" :
                                            (DependencyValidationOperation == ">=" ? "bigger than or equal to" :
                                            (DependencyValidationOperation == "<" ? "smaller than" :
                                            (DependencyValidationOperation == "<=" ? "smaller than or equal to" : ""))))));

                                        return $"({Dependency.DynamicAtt.Key}) value must be {ReturnOperation} {DependencyValdiationValue}";
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else if (RadioType.ToLower() == TablesNames.TLIradioOtherLibrary.ToString().ToLower())
            {
                AddRadioOtherLibraryViewModel AddRadioLibraryViewModel = _mapper.Map<AddRadioOtherLibraryViewModel>(Input);

                List<DynamicAttViewModel> DynamicAttributes = _mapper.Map<List<DynamicAttViewModel>>(_unitOfWork.DynamicAttRepository
                    .GetIncludeWhere(x => x.tablesNames.TableName.ToLower() == RadioType.ToLower() && !x.disable
                        , x => x.tablesNames).ToList());

                foreach (DynamicAttViewModel DynamicAttribute in DynamicAttributes)
                {
                    TLIdependency Dependency = _unitOfWork.DependencieRepository.GetIncludeWhereFirst(x => x.DynamicAttId == DynamicAttribute.Id &&
                        x.OperationId != null && (x.ValueBoolean != null || x.ValueDateTime != null || x.ValueDouble != null || !string.IsNullOrEmpty(x.ValueString)),
                            x => x.Operation, x => x.DynamicAtt);

                    if (Dependency != null)
                    {
                        AddDynamicLibAttValueViewModel InsertedDynamicAttributeValue = AddRadioLibraryViewModel.TLIdynamicAttLibValue
                            .FirstOrDefault(x => x.DynamicAttId == DynamicAttribute.Id);

                        if (InsertedDynamicAttributeValue == null)
                            return $"({DynamicAttribute.Key}) value can't be null and must be inserted";

                        List<int> RowsIds = _unitOfWork.DependencyRowRepository.GetWhere(x => x.DependencyId == Dependency.Id && x.RowId != null).Select(x => x.RowId.Value).Distinct().ToList();

                        foreach (int RowId in RowsIds)
                        {
                            List<TLIrule> Rules = _unitOfWork.RowRuleRepository.GetIncludeWhere(x => x.RowId.Value == RowId, x => x.Rule, x => x.Rule.Operation, x => x.Rule.attributeActivated
                                , x => x.Rule.dynamicAtt).Select(x => x.Rule).Distinct().ToList();

                            int Succed = 0;

                            foreach (TLIrule Rule in Rules)
                            {
                                string RuleOperation = Rule.Operation.Name;
                                object RuleValue = new object();

                                if (Rule.OperationValueBoolean != null)
                                    RuleValue = Rule.OperationValueBoolean;

                                else if (Rule.OperationValueDateTime != null)
                                    RuleValue = Rule.OperationValueDateTime;

                                else if (Rule.OperationValueDouble != null)
                                    RuleValue = Rule.OperationValueDouble;

                                else if (!string.IsNullOrEmpty(Rule.OperationValueString))
                                    RuleValue = Rule.OperationValueString;

                                object InsertedValue = new object();

                                if (Rule.attributeActivatedId != null)
                                {
                                    string AttributeName = Rule.attributeActivated.Key;

                                    InsertedValue = AddRadioLibraryViewModel.GetType().GetProperties()
                                        .FirstOrDefault(x => x.Name.ToLower() == AttributeName.ToLower()).GetValue(AddRadioLibraryViewModel, null);
                                }
                                else if (Rule.dynamicAttId != null)
                                {
                                    AddDynamicLibAttValueViewModel DynamicObject = AddRadioLibraryViewModel.TLIdynamicAttLibValue
                                        .FirstOrDefault(x => x.DynamicAttId == Rule.dynamicAttId.Value);

                                    if (DynamicObject == null)
                                        break;

                                    if (DynamicObject.ValueBoolean != null)
                                        InsertedValue = DynamicObject.ValueBoolean;

                                    else if (DynamicObject.ValueDateTime != null)
                                        InsertedValue = DynamicObject.ValueDateTime;

                                    else if (DynamicObject.ValueDouble != null)
                                        InsertedValue = DynamicObject.ValueDouble;

                                    else if (!string.IsNullOrEmpty(DynamicObject.ValueString))
                                        InsertedValue = DynamicObject.ValueString;
                                }

                                if (InsertedValue == null)
                                    break;

                                if (RuleOperation == "==" ? InsertedValue.ToString().ToLower() == RuleValue.ToString().ToLower() :
                                    RuleOperation == "!=" ? InsertedValue.ToString().ToLower() != RuleValue.ToString().ToLower() :
                                    RuleOperation == ">" ? Comparer.DefaultInvariant.Compare(InsertedValue, RuleValue) == 1 :
                                    RuleOperation == ">=" ? (Comparer.DefaultInvariant.Compare(InsertedValue, RuleValue) == 1 ||
                                        InsertedValue.ToString().ToLower() == RuleValue.ToString().ToLower()) :
                                    RuleOperation == "<" ? Comparer.DefaultInvariant.Compare(InsertedValue, RuleValue) == -1 :
                                    RuleOperation == "<=" ? (Comparer.DefaultInvariant.Compare(InsertedValue, RuleValue) == -1 ||
                                        InsertedValue.ToString().ToLower() == RuleValue.ToString().ToLower()) : false)
                                {
                                    Succed++;
                                }
                            }
                            if (Rules.Count() == Succed)
                            {
                                string DependencyValidationOperation = Dependency.Operation.Name;

                                object DependencyValdiationValue = Dependency.ValueBoolean != null ? Dependency.ValueBoolean :
                                    Dependency.ValueDateTime != null ? Dependency.ValueDateTime :
                                    Dependency.ValueDouble != null ? Dependency.ValueDouble :
                                    !string.IsNullOrEmpty(Dependency.ValueString) ? Dependency.ValueString : null;

                                object InsertedDynamicAttributeValueAsObject = InsertedDynamicAttributeValue.ValueBoolean != null ? InsertedDynamicAttributeValue.ValueBoolean :
                                    InsertedDynamicAttributeValue.ValueDateTime != null ? InsertedDynamicAttributeValue.ValueDateTime :
                                    InsertedDynamicAttributeValue.ValueDouble != null ? InsertedDynamicAttributeValue.ValueDouble :
                                    !string.IsNullOrEmpty(InsertedDynamicAttributeValue.ValueString) ? InsertedDynamicAttributeValue.ValueString : null;

                                if (Dependency.ValueDateTime != null && InsertedDynamicAttributeValue.ValueDateTime != null)
                                {
                                    DateTime DependencyValdiationValueConverter = new DateTime(Dependency.ValueDateTime.Value.Year,
                                        Dependency.ValueDateTime.Value.Month, Dependency.ValueDateTime.Value.Day);

                                    DependencyValdiationValue = DependencyValdiationValueConverter;

                                    DateTime InsertedDynamicAttributeValueAsObjectConverter = new DateTime(InsertedDynamicAttributeValue.ValueDateTime.Value.Year,
                                        InsertedDynamicAttributeValue.ValueDateTime.Value.Month, InsertedDynamicAttributeValue.ValueDateTime.Value.Day);

                                    InsertedDynamicAttributeValueAsObject = InsertedDynamicAttributeValueAsObjectConverter;
                                }

                                if (InsertedDynamicAttributeValueAsObject != null && DependencyValdiationValue != null)
                                {
                                    if (!(DependencyValidationOperation == "==" ? InsertedDynamicAttributeValueAsObject.ToString().ToLower() == DependencyValdiationValue.ToString().ToLower() :
                                         DependencyValidationOperation == "!=" ? InsertedDynamicAttributeValueAsObject.ToString().ToLower() != DependencyValdiationValue.ToString().ToLower() :
                                         DependencyValidationOperation == ">" ? Comparer.DefaultInvariant.Compare(InsertedDynamicAttributeValueAsObject, DependencyValdiationValue) == 1 :
                                         DependencyValidationOperation == ">=" ? (InsertedDynamicAttributeValueAsObject.ToString().ToLower() == DependencyValdiationValue.ToString().ToLower() ||
                                             Comparer.DefaultInvariant.Compare(InsertedDynamicAttributeValueAsObject, DependencyValdiationValue) == 1) :
                                         DependencyValidationOperation == "<" ? Comparer.DefaultInvariant.Compare(InsertedDynamicAttributeValueAsObject, DependencyValdiationValue) == -1 :
                                         DependencyValidationOperation == "<=" ? (InsertedDynamicAttributeValueAsObject.ToString().ToLower() == DependencyValdiationValue.ToString().ToLower() ||
                                             Comparer.DefaultInvariant.Compare(InsertedDynamicAttributeValueAsObject, DependencyValdiationValue) == -1) : false))
                                    {
                                        string ReturnOperation = (DependencyValidationOperation == "==" ? "Equal To" :
                                            (DependencyValidationOperation == "!=" ? "not equal to" :
                                            (DependencyValidationOperation == ">" ? "bigger than" :
                                            (DependencyValidationOperation == ">=" ? "bigger than or equal to" :
                                            (DependencyValidationOperation == "<" ? "smaller than" :
                                            (DependencyValidationOperation == "<=" ? "smaller than or equal to" : ""))))));

                                        return $"({Dependency.DynamicAtt.Key}) value must be {ReturnOperation} {DependencyValdiationValue}";
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return string.Empty;
        }
        public void AddLogisticalItemWithRadio(dynamic LogisticalItemIds, dynamic RadioEntity, int TableNameEntityId)
        {
            using (TransactionScope transaction = new TransactionScope())
            {
                try
                {
                    if (LogisticalItemIds.LogisticalItems != null)
                    {
                        if (LogisticalItemIds.LogisticalItems.VendorId != null && LogisticalItemIds.LogisticalItems.VendorId != 0)
                        {
                            TLIlogistical LogisticalObject = _unitOfWork.LogistcalRepository.GetByID(LogisticalItemIds.LogisticalItems.VendorId);
                            TLIlogisticalitem NewLogisticalItem = new TLIlogisticalitem
                            {
                                Name = "",
                                IsLib = true,
                                logisticalId = LogisticalObject.Id,
                                RecordId = RadioEntity.Id,
                                tablesNamesId = TableNameEntityId
                            };
                            _unitOfWork.LogisticalitemRepository.AddAsync(NewLogisticalItem);
                            _unitOfWork.SaveChangesAsync();
                        }
                        if (LogisticalItemIds.LogisticalItems.SupplierId != null && LogisticalItemIds.LogisticalItems.SupplierId != 0)
                        {
                            TLIlogistical LogisticalObject = _unitOfWork.LogistcalRepository.GetByID(LogisticalItemIds.LogisticalItems.SupplierId);
                            TLIlogisticalitem NewLogisticalItem = new TLIlogisticalitem
                            {
                                Name = "",
                                IsLib = true,
                                logisticalId = LogisticalObject.Id,
                                RecordId = RadioEntity.Id,
                                tablesNamesId = TableNameEntityId
                            };
                            _unitOfWork.LogisticalitemRepository.AddAsync(NewLogisticalItem);
                            _unitOfWork.SaveChangesAsync();
                        }
                        if (LogisticalItemIds.LogisticalItems.DesignerId != null && LogisticalItemIds.LogisticalItems.DesignerId != 0)
                        {
                            TLIlogistical LogisticalObject = _unitOfWork.LogistcalRepository.GetByID(LogisticalItemIds.LogisticalItems.DesignerId);
                            TLIlogisticalitem NewLogisticalItem = new TLIlogisticalitem
                            {
                                Name = "",
                                IsLib = true,
                                logisticalId = LogisticalObject.Id,
                                RecordId = RadioEntity.Id,
                                tablesNamesId = TableNameEntityId
                            };
                            _unitOfWork.LogisticalitemRepository.AddAsync(NewLogisticalItem);
                            _unitOfWork.SaveChangesAsync();
                        }
                        if (LogisticalItemIds.LogisticalItems.ManufacturerId != null && LogisticalItemIds.LogisticalItems.ManufacturerId != 0)
                        {
                            TLIlogistical LogisticalObject = _unitOfWork.LogistcalRepository.GetByID(LogisticalItemIds.LogisticalItems.ManufacturerId);
                            TLIlogisticalitem NewLogisticalItem = new TLIlogisticalitem
                            {
                                Name = "",
                                IsLib = true,
                                logisticalId = LogisticalObject.Id,
                                RecordId = RadioEntity.Id,
                                tablesNamesId = TableNameEntityId
                            };
                            _unitOfWork.LogisticalitemRepository.AddAsync(NewLogisticalItem);
                            _unitOfWork.SaveChangesAsync();
                        }
                    }

                    transaction.Complete();
                }
                catch (Exception)
                {
                    throw;
                }
            }
        }
        public string CheckGeneralValidationFunction(List<AddDynamicLibAttValueViewModel> TLIdynamicAttLibValue, string TableName)
        {
            List<DynamicAttViewModel> DynamicAttributes = _mapper.Map<List<DynamicAttViewModel>>(_unitOfWork.DynamicAttRepository
                .GetIncludeWhere(x => x.tablesNames.TableName.ToLower() == TableName.ToLower() && !x.disable
                    , x => x.tablesNames).ToList());

            foreach (DynamicAttViewModel DynamicAttributeEntity in DynamicAttributes)
            {
                TLIvalidation Validation = _unitOfWork.ValidationRepository
                    .GetIncludeWhereFirst(x => x.DynamicAttId == DynamicAttributeEntity.Id, x => x.Operation, x => x.DynamicAtt);

                if (Validation != null)
                {
                    AddDynamicLibAttValueViewModel DynmaicAttributeValue = TLIdynamicAttLibValue.FirstOrDefault(x => x.DynamicAttId == DynamicAttributeEntity.Id);

                    if (DynmaicAttributeValue == null)
                        return $"({Validation.DynamicAtt.Key}) value can't be null and must be inserted";

                    string OperationName = Validation.Operation.Name;

                    object InputDynamicValue = new object();

                    if (DynmaicAttributeValue.ValueBoolean != null)
                        InputDynamicValue = DynmaicAttributeValue.ValueBoolean;

                    else if (DynmaicAttributeValue.ValueDateTime != null)
                        InputDynamicValue = DynmaicAttributeValue.ValueDateTime;

                    else if (DynmaicAttributeValue.ValueDouble != null)
                        InputDynamicValue = DynmaicAttributeValue.ValueDouble;

                    else if (!string.IsNullOrEmpty(DynmaicAttributeValue.ValueString))
                        InputDynamicValue = DynmaicAttributeValue.ValueString;

                    object ValidationValue = new object();

                    if (Validation.ValueBoolean != null)
                        ValidationValue = Validation.ValueBoolean;

                    else if (Validation.ValueDateTime != null)
                        ValidationValue = Validation.ValueDateTime;

                    else if (Validation.ValueDouble != null)
                        ValidationValue = Validation.ValueDouble;

                    else if (!string.IsNullOrEmpty(Validation.ValueString))
                        ValidationValue = Validation.ValueString;

                    if (!(OperationName == "==" ? InputDynamicValue.ToString().ToLower() == ValidationValue.ToString().ToLower() :
                        OperationName == "!=" ? InputDynamicValue.ToString().ToLower() != ValidationValue.ToString().ToLower() :
                        OperationName == ">" ? Comparer.DefaultInvariant.Compare(InputDynamicValue, ValidationValue) == 1 :
                        OperationName == ">=" ? (Comparer.DefaultInvariant.Compare(InputDynamicValue, ValidationValue) == 1 ||
                            InputDynamicValue.ToString().ToLower() == ValidationValue.ToString().ToLower()) :
                        OperationName == "<" ? Comparer.DefaultInvariant.Compare(InputDynamicValue, ValidationValue) == -1 :
                        OperationName == "<=" ? (Comparer.DefaultInvariant.Compare(InputDynamicValue, ValidationValue) == -1 ||
                            InputDynamicValue.ToString().ToLower() == ValidationValue.ToString().ToLower()) : false))
                    {
                        string DynamicAttributeName = _unitOfWork.DynamicAttRepository
                            .GetWhereFirst(x => x.Id == Validation.DynamicAttId).Key;

                        string ReturnOperation = (OperationName == "==" ? "equal to" :
                            (OperationName == "!=" ? "not equal to" :
                            (OperationName == ">" ? "bigger than" :
                            (OperationName == ">=" ? "bigger than or equal to" :
                            (OperationName == "<" ? "smaller than" :
                            (OperationName == "<=" ? "smaller than or equal to" : ""))))));

                        return $"({DynamicAttributeName}) value must be {ReturnOperation} {ValidationValue}";
                    }
                }
            }

            return string.Empty;
        }
        public string CheckGeneralValidationFunctionIns(List<AddDynamicAttInstValueViewModel> TLIdynamicAttInstValue, string TableName)
        {
            List<DynamicAttViewModel> DynamicAttributes = _mapper.Map<List<DynamicAttViewModel>>(_unitOfWork.DynamicAttRepository
                .GetIncludeWhere(x => x.tablesNames.TableName.ToLower() == TableName.ToLower() && !x.disable
                    , x => x.tablesNames).ToList());

            foreach (DynamicAttViewModel DynamicAttributeEntity in DynamicAttributes)
            {
                TLIvalidation Validation = _unitOfWork.ValidationRepository
                    .GetIncludeWhereFirst(x => x.DynamicAttId == DynamicAttributeEntity.Id, x => x.Operation, x => x.DynamicAtt);

                if (Validation != null)
                {
                    AddDynamicAttInstValueViewModel DynmaicAttributeValue = TLIdynamicAttInstValue.FirstOrDefault(x => x.DynamicAttId == DynamicAttributeEntity.Id);

                    if (DynmaicAttributeValue == null)
                        return $"({Validation.DynamicAtt.Key}) value can't be null and must be inserted";

                    string OperationName = Validation.Operation.Name;

                    object InputDynamicValue = new object();

                    if (DynmaicAttributeValue.ValueBoolean != null)
                        InputDynamicValue = DynmaicAttributeValue.ValueBoolean;

                    else if (DynmaicAttributeValue.ValueDateTime != null)
                        InputDynamicValue = DynmaicAttributeValue.ValueDateTime;

                    else if (DynmaicAttributeValue.ValueDouble != null)
                        InputDynamicValue = DynmaicAttributeValue.ValueDouble;

                    else if (!string.IsNullOrEmpty(DynmaicAttributeValue.ValueString))
                        InputDynamicValue = DynmaicAttributeValue.ValueString;

                    object ValidationValue = new object();

                    if (Validation.ValueBoolean != null)
                        ValidationValue = Validation.ValueBoolean;

                    else if (Validation.ValueDateTime != null)
                        ValidationValue = Validation.ValueDateTime;

                    else if (Validation.ValueDouble != null)
                        ValidationValue = Validation.ValueDouble;

                    else if (!string.IsNullOrEmpty(Validation.ValueString))
                        ValidationValue = Validation.ValueString;

                    if (!(OperationName == "==" ? InputDynamicValue.ToString().ToLower() == ValidationValue.ToString().ToLower() :
                        OperationName == "!=" ? InputDynamicValue.ToString().ToLower() != ValidationValue.ToString().ToLower() :
                        OperationName == ">" ? Comparer.DefaultInvariant.Compare(InputDynamicValue, ValidationValue) == 1 :
                        OperationName == ">=" ? (Comparer.DefaultInvariant.Compare(InputDynamicValue, ValidationValue) == 1 ||
                            InputDynamicValue.ToString().ToLower() == ValidationValue.ToString().ToLower()) :
                        OperationName == "<" ? Comparer.DefaultInvariant.Compare(InputDynamicValue, ValidationValue) == -1 :
                        OperationName == "<=" ? (Comparer.DefaultInvariant.Compare(InputDynamicValue, ValidationValue) == -1 ||
                            InputDynamicValue.ToString().ToLower() == ValidationValue.ToString().ToLower()) : false))
                    {
                        string DynamicAttributeName = _unitOfWork.DynamicAttRepository
                            .GetWhereFirst(x => x.Id == Validation.DynamicAttId).Key;

                        string ReturnOperation = (OperationName == "==" ? "equal to" :
                            (OperationName == "!=" ? "not equal to" :
                            (OperationName == ">" ? "bigger than" :
                            (OperationName == ">=" ? "bigger than or equal to" :
                            (OperationName == "<" ? "smaller than" :
                            (OperationName == "<=" ? "smaller than or equal to" : ""))))));

                        return $"({DynamicAttributeName}) value must be {ReturnOperation} {ValidationValue}";
                    }
                }
            }

            return string.Empty;
        }
        public Response<AllItemAttributes> AddRadioLibrary(string TableName, object RadioLibraryViewModel, string connectionString)
        {
            using (var con = new OracleConnection(connectionString))
            {
                con.Open();
                using (var tran = con.BeginTransaction())
                {
                    using (TransactionScope transaction = new TransactionScope())
                    {
                        try
                        {
                            string ErrorMessage = string.Empty;
                            TLItablesNames TableNameEntity = _unitOfWork.TablesNamesRepository.GetWhereFirst(l => l.TableName.ToLower() == TableName.ToLower());
                            if (Helpers.Constants.LoadSubType.TLIradioAntennaLibrary.ToString().ToLower() == TableName.ToLower())
                            {
                                AddRadioAntennaLibraryViewModel addRadioAntenna = _mapper.Map<AddRadioAntennaLibraryViewModel>(RadioLibraryViewModel);
                                TLIradioAntennaLibrary radioAntennaLibrary = _mapper.Map<TLIradioAntennaLibrary>(addRadioAntenna);

                                bool test = true;
                                string CheckDependencyValidation = CheckDependencyValidationForRadioTypes(RadioLibraryViewModel, TableName);

                                if (!string.IsNullOrEmpty(CheckDependencyValidation))
                                    return new Response<AllItemAttributes>(true, null, null, CheckDependencyValidation, (int)ApiReturnCode.fail);

                                string CheckGeneralValidation = CheckGeneralValidationFunction(addRadioAntenna.TLIdynamicAttLibValue, TableNameEntity.TableName);

                                if (!string.IsNullOrEmpty(CheckGeneralValidation))
                                    return new Response<AllItemAttributes>(true, null, null, CheckGeneralValidation, (int)ApiReturnCode.fail);

                                if (test == true)
                                {
                                    var CheckModel = _unitOfWork.RadioAntennaLibraryRepository
                                        .GetWhereFirst(x => x.Model == radioAntennaLibrary.Model && !x.Deleted);
                                    if (CheckModel != null)
                                    {
                                        return new Response<AllItemAttributes>(true, null, null, $"This model {radioAntennaLibrary.Model} is already exists", (int)Helpers.Constants.ApiReturnCode.fail);
                                    }
                                    //else if (radioAntennaLibrary.Width <= 0)
                                    //{
                                    //    return new Response<AllItemAttributes>(true, null, null, "Width Should be bigger than zero", (int)Helpers.Constants.ApiReturnCode.fail);
                                    //}
                                    //else if (radioAntennaLibrary.Depth <= 0)
                                    //{
                                    //    return new Response<AllItemAttributes>(true, null, null, "Depth Should be bigger than zero", (int)Helpers.Constants.ApiReturnCode.fail);
                                    //}
                                    //else if (radioAntennaLibrary.Length <= 0)
                                    //{
                                    //    return new Response<AllItemAttributes>(true, null, null, "Length Should be bigger than zero", (int)Helpers.Constants.ApiReturnCode.fail);
                                    //}
                                    //else if (radioAntennaLibrary.SpaceLibrary <= 0)
                                    //{
                                    //    return new Response<AllItemAttributes>(true, null, null, "SpaceLibrary Should be bigger than zero", (int)Helpers.Constants.ApiReturnCode.fail);
                                    //}
                                    _unitOfWork.RadioAntennaLibraryRepository.AddWithHistory(Helpers.LogFilterAttribute.UserId, radioAntennaLibrary);
                                    _unitOfWork.SaveChanges();

                                    dynamic LogisticalItemIds = new ExpandoObject();
                                    LogisticalItemIds = RadioLibraryViewModel;

                                    AddLogisticalItemWithRadio(LogisticalItemIds, radioAntennaLibrary, TableNameEntity.Id);

                                    if (addRadioAntenna.TLIdynamicAttLibValue.Count > 0)
                                    {
                                        _unitOfWork.DynamicAttLibRepository.AddDynamicLibAtts(addRadioAntenna.TLIdynamicAttLibValue, TableNameEntity.Id, radioAntennaLibrary.Id);
                                    }
                                    // _unitOfWork.TablesHistoryRepository.AddHistory(radioAntennaLibrary.Id, "Add", "TLIradioAntennaLibrary");
                                }
                                else
                                {
                                    return new Response<AllItemAttributes>(true, null, null, ErrorMessage, (int)Helpers.Constants.ApiReturnCode.fail);
                                }
                            }
                            else if (Helpers.Constants.LoadSubType.TLIradioOtherLibrary.ToString().ToLower() == TableName.ToLower())
                            {
                                AddRadioOtherLibraryViewModel addRadioOther = _mapper.Map<AddRadioOtherLibraryViewModel>(RadioLibraryViewModel);
                                TLIradioOtherLibrary radioOther = _mapper.Map<TLIradioOtherLibrary>(addRadioOther);
                                bool test = true;
                                string CheckDependencyValidation = CheckDependencyValidationForRadioTypes(RadioLibraryViewModel, TableName);

                                if (!string.IsNullOrEmpty(CheckDependencyValidation))
                                    return new Response<AllItemAttributes>(true, null, null, CheckDependencyValidation, (int)ApiReturnCode.fail);

                                string CheckGeneralValidation = CheckGeneralValidationFunction(addRadioOther.TLIdynamicAttLibValue, TableNameEntity.TableName);

                                if (!string.IsNullOrEmpty(CheckGeneralValidation))
                                    return new Response<AllItemAttributes>(true, null, null, CheckGeneralValidation, (int)ApiReturnCode.fail);
                                if (test == true)
                                {
                                    var CheckModel = _unitOfWork.RadioOtherLibraryRepository.GetWhereFirst(x => x.Model == radioOther.Model && !x.Deleted);
                                    if (CheckModel != null)
                                    {
                                        return new Response<AllItemAttributes>(true, null, null, $"This model {radioOther.Model} is already exists", (int)Helpers.Constants.ApiReturnCode.fail);
                                    }
                                    //else if (radioOther.Width <= 0)
                                    //{
                                    //    return new Response<AllItemAttributes>(true, null, null, "Width Should be bigger than zero", (int)Helpers.Constants.ApiReturnCode.fail);
                                    //}
                                    //else if (radioOther.Length <= 0)
                                    //{
                                    //    return new Response<AllItemAttributes>(true, null, null, "Length Should be bigger than zero", (int)Helpers.Constants.ApiReturnCode.fail);
                                    //}
                                    //else if (radioOther.Height <= 0)
                                    //{
                                    //    return new Response<AllItemAttributes>(true, null, null, "Height Should be bigger than zero", (int)Helpers.Constants.ApiReturnCode.fail);
                                    //}
                                    //else if (radioOther.SpaceLibrary <= 0)
                                    //{
                                    //    return new Response<AllItemAttributes>(true, null, null, "SpaceLibrary Should be bigger than zero", (int)Helpers.Constants.ApiReturnCode.fail);
                                    //}
                                    _unitOfWork.RadioOtherLibraryRepository.AddWithHistory(Helpers.LogFilterAttribute.UserId, radioOther);
                                    _unitOfWork.SaveChanges();

                                    dynamic LogisticalItemIds = new ExpandoObject();
                                    LogisticalItemIds = RadioLibraryViewModel;

                                    AddLogisticalItemWithRadio(LogisticalItemIds, radioOther, TableNameEntity.Id);

                                    if (addRadioOther.TLIdynamicAttLibValue.Count > 0)
                                    {
                                        _unitOfWork.DynamicAttLibRepository.AddDynamicLibAtts(addRadioOther.TLIdynamicAttLibValue, TableNameEntity.Id, radioOther.Id);
                                    }
                                    _unitOfWork.TablesHistoryRepository.AddHistory(radioOther.Id, "Add", "TLIradioOtherLibrary");
                                }
                                else
                                {
                                    return new Response<AllItemAttributes>(true, null, null, ErrorMessage, (int)Helpers.Constants.ApiReturnCode.fail);
                                }
                            }
                            else if (Helpers.Constants.LoadSubType.TLIradioRRULibrary.ToString().ToLower() == TableName.ToLower())
                            {
                                AddRadioRRULibraryViewModel addRadioRRULibrary = _mapper.Map<AddRadioRRULibraryViewModel>(RadioLibraryViewModel);
                                TLIradioRRULibrary radioRRULibrary = _mapper.Map<TLIradioRRULibrary>(addRadioRRULibrary);
                                if (radioRRULibrary.L_W_H_cm3 == null || radioRRULibrary.L_W_H_cm3 == "")
                                {
                                    radioRRULibrary.L_W_H_cm3 = radioRRULibrary.Length + "_" + radioRRULibrary.Width + "_" + radioRRULibrary.Height;
                                }
                                bool test = true;
                                string CheckDependencyValidation = CheckDependencyValidationForRadioTypes(RadioLibraryViewModel, TableName);

                                if (!string.IsNullOrEmpty(CheckDependencyValidation))
                                    return new Response<AllItemAttributes>(true, null, null, CheckDependencyValidation, (int)ApiReturnCode.fail);

                                string CheckGeneralValidation = CheckGeneralValidationFunction(addRadioRRULibrary.TLIdynamicAttLibValue, TableNameEntity.TableName);

                                if (!string.IsNullOrEmpty(CheckGeneralValidation))
                                    return new Response<AllItemAttributes>(true, null, null, CheckGeneralValidation, (int)ApiReturnCode.fail);
                                if (test == true)
                                {
                                    var CheckModel = _unitOfWork.RadioRRULibraryRepository.GetWhereFirst(x => x.Model == radioRRULibrary.Model && !x.Deleted);
                                    if (CheckModel != null)
                                    {
                                        return new Response<AllItemAttributes>(true, null, null, $"This model {radioRRULibrary.Model} is already exists", (int)Helpers.Constants.ApiReturnCode.fail);
                                    }
                                    //else if (radioRRULibrary.Length <= 0)
                                    //{
                                    //    return new Response<AllItemAttributes>(true, null, null, "Length Should be bigger than zero", (int)Helpers.Constants.ApiReturnCode.fail);
                                    //}
                                    //else if (radioRRULibrary.Width <= 0)
                                    //{
                                    //    return new Response<AllItemAttributes>(true, null, null, "Width Should be bigger than zero", (int)Helpers.Constants.ApiReturnCode.fail);
                                    //}
                                    //else if (radioRRULibrary.Height <= 0)
                                    //{
                                    //    return new Response<AllItemAttributes>(true, null, null, "Height Should be bigger than zero", (int)Helpers.Constants.ApiReturnCode.fail);
                                    //}
                                    //else if (radioRRULibrary.SpaceLibrary <= 0)
                                    //{
                                    //    return new Response<AllItemAttributes>(true, null, null, "SpaceLibrary Should be bigger than zero", (int)Helpers.Constants.ApiReturnCode.fail);
                                    //}
                                    _unitOfWork.RadioRRULibraryRepository.AddWithHistory(Helpers.LogFilterAttribute.UserId, radioRRULibrary);
                                    _unitOfWork.SaveChanges();

                                    dynamic LogisticalItemIds = new ExpandoObject();
                                    LogisticalItemIds = RadioLibraryViewModel;

                                    AddLogisticalItemWithRadio(LogisticalItemIds, radioRRULibrary, TableNameEntity.Id);

                                    if (addRadioRRULibrary.TLIdynamicAttLibValue.Count > 0)
                                    {
                                        _unitOfWork.DynamicAttLibRepository.AddDynamicLibAtts(addRadioRRULibrary.TLIdynamicAttLibValue, TableNameEntity.Id, radioRRULibrary.Id);
                                    }
                                    //_unitOfWork.TablesHistoryRepository.AddHistory(radioRRULibrary.Id, "Add", "TLIradioRRULibrary");
                                }
                                else
                                {
                                    return new Response<AllItemAttributes>(true, null, null, ErrorMessage, (int)Helpers.Constants.ApiReturnCode.fail);
                                }
                            }
                            transaction.Complete();
                            tran.Commit();
                            return new Response<AllItemAttributes>();
                        }
                        catch (Exception err)
                        {
                            tran.Rollback();
                            return new Response<AllItemAttributes>(true, null, null, err.Message, (int)Helpers.Constants.ApiReturnCode.fail);
                        }
                    }
                }
            }

        }
        public Response<ObjectAttributeInst> GetAttForAdd(string TableName, int LibId, string SiteCode)
        {
            try
            {
                TLItablesNames TableNameEntity = _unitOfWork.TablesNamesRepository.GetWhereFirst(l =>
                    l.TableName == TableName);

                ObjectAttributeInst objectInst = new ObjectAttributeInst();

                List<BaseInstAttView> ListAttributesActivated = _unitOfWork.AttributeActivatedRepository.
                    GetInstAttributeActivated(TableName, null, "installationPlaceId", "EquivalentSpace", "radioAntennaLibraryId", "radioRRULibraryId",
                        "radioOtherLibraryId").ToList();

                BaseInstAttView NameAttribute = ListAttributesActivated.FirstOrDefault(x => x.Key.ToLower() == "Name".ToLower());
                if (NameAttribute != null)
                {
                    BaseInstAttView Swap = ListAttributesActivated[0];
                    ListAttributesActivated[ListAttributesActivated.IndexOf(NameAttribute)] = Swap;
                    ListAttributesActivated[0] = NameAttribute;
                }
                if (LoadSubType.TLIradioAntenna.ToString().ToLower() == TableName.ToLower())
                {
                    ListAttributesActivated.Remove(NameAttribute);
                }

                if (LoadSubType.TLIradioAntenna.ToString().ToLower() == TableName.ToLower())
                {
                    RadioAntennaLibraryViewModel RadioAntennaLibrary = _mapper.Map<RadioAntennaLibraryViewModel>(_unitOfWork.RadioAntennaLibraryRepository.GetByID(LibId));

                    List<BaseAttView> LibraryAttributes = _unitOfWork.AttributeActivatedRepository
                        .GetAttributeActivated(TablesNames.TLIradioAntennaLibrary.ToString(), RadioAntennaLibrary, null).ToList();

                    List<BaseAttView> LogisticalAttributes = _mapper.Map<List<BaseAttView>>(_unitOfWork.LogistcalRepository
                        .GetLogistical(TablePartName.Radio.ToString(), TablesNames.TLIradioAntennaLibrary.ToString(), RadioAntennaLibrary.Id).ToList());

                    LibraryAttributes.AddRange(LogisticalAttributes);

                    objectInst.LibraryActivatedAttributes = LibraryAttributes;

                    foreach (BaseInstAttView FKitem in ListAttributesActivated)
                    {
                        if (FKitem.Desc.ToLower() == "tliowner")
                            FKitem.Value = _mapper.Map<List<OwnerViewModel>>(_unitOfWork.OwnerRepository.GetWhere(x => !x.Deleted && !x.Disable).ToList());
                    }
                }
                else if (LoadSubType.TLIradioRRU.ToString().ToLower() == TableName.ToLower())
                {
                    TLIradioRRULibrary RadioRRULibrary = _unitOfWork.RadioRRULibraryRepository.GetByID(LibId);

                    List<BaseAttView> LibraryAttributes = _unitOfWork.AttributeActivatedRepository
                        .GetAttributeActivated(TablesNames.TLIradioRRULibrary.ToString(), RadioRRULibrary, null).ToList();

                    List<BaseAttView> LogisticalAttributes = _mapper.Map<List<BaseAttView>>(_unitOfWork.LogistcalRepository
                        .GetLogistical(TablePartName.Radio.ToString(), TablesNames.TLIradioRRULibrary.ToString(), RadioRRULibrary.Id).ToList());

                    LibraryAttributes.AddRange(LogisticalAttributes);

                    objectInst.LibraryActivatedAttributes = LibraryAttributes;

                    foreach (BaseInstAttView FKitem in ListAttributesActivated)
                    {
                        if (FKitem.Desc.ToLower() == "tliowner")
                            FKitem.Value = _mapper.Map<List<OwnerViewModel>>(_unitOfWork.OwnerRepository.GetWhere(x => !x.Deleted && !x.Disable).ToList());

                        else if (FKitem.Desc.ToLower() == "tliradioantenna")
                        {
                            var Radioantenna = db.TLIcivilLoads.Include(x => x.allLoadInst).Where(x => !x.Dismantle && x.allLoadInstId != null &&
                           x.allLoadInst.radioAntennaId != null).Select(x => x.allLoadInst.radioAntennaId).ToList();
                            // var Radio = db.TLIradioAntenna.Select(x => x.Id).ToList();
                            //var newList = Radioantenna.Where(v => !Radioantenna.Contains(v)).ToList();
                            List<TLIradioAntenna> tLIradioAntennas = new List<TLIradioAntenna>();
                            foreach (var item in Radioantenna)
                            {

                                var radioname = db.TLIradioAntenna.Where(x => x.Id == item).FirstOrDefault();
                                tLIradioAntennas.Add(radioname);

                            }
                            FKitem.Value = _mapper.Map<List<RadioAntennaViewModel>>(tLIradioAntennas);
                        }
                    }
                }
                else if (LoadSubType.TLIradioOther.ToString().ToLower() == TableName.ToLower())
                {
                    TLIradioOtherLibrary RadioOtherLibrary = _unitOfWork.RadioOtherLibraryRepository.GetByID(LibId);

                    List<BaseAttView> LibraryAttributes = _unitOfWork.AttributeActivatedRepository
                        .GetAttributeActivated(TablesNames.TLIradioOtherLibrary.ToString(), RadioOtherLibrary, null).ToList();

                    List<BaseAttView> LogisticalAttributes = _mapper.Map<List<BaseAttView>>(_unitOfWork.LogistcalRepository
                        .GetLogistical(TablePartName.Radio.ToString(), TablesNames.TLIradioOtherLibrary.ToString(), RadioOtherLibrary.Id).ToList());

                    LibraryAttributes.AddRange(LogisticalAttributes);

                    objectInst.LibraryActivatedAttributes = LibraryAttributes;

                    foreach (BaseInstAttView FKitem in ListAttributesActivated)
                    {
                        if (FKitem.Desc.ToLower() == "tliowner")
                            FKitem.Value = _mapper.Map<List<OwnerViewModel>>(_unitOfWork.OwnerRepository.GetWhere(x => !x.Deleted && !x.Disable).ToList());
                    }
                }

                objectInst.AttributesActivated = ListAttributesActivated;


                objectInst.RelatedTables = _unitOfWork.CivilLoadsRepository.GetRelatedTables(SiteCode);

                IEnumerable<DynaminAttInstViewModel> DynamicAttributesWithoutValue = _unitOfWork.DynamicAttRepository
                        .GetDynamicInstAtts(TableNameEntity.Id, null);

                foreach (DynaminAttInstViewModel DynamicAttribute in DynamicAttributesWithoutValue)
                {
                    TLIdynamicAtt DynamicAttributeEntity = _unitOfWork.DynamicAttRepository.GetByID(DynamicAttribute.Id);

                    if (!string.IsNullOrEmpty(DynamicAttributeEntity.DefaultValue))
                    {
                        if (DynamicAttribute.DataType.ToLower() == "string".ToLower())
                            DynamicAttribute.ValueString = DynamicAttributeEntity.DefaultValue;

                        else if (DynamicAttribute.DataType.ToLower() == "int".ToLower())
                            DynamicAttribute.ValueDouble = int.Parse(DynamicAttributeEntity.DefaultValue);

                        else if (DynamicAttribute.DataType.ToLower() == "double".ToLower())
                            DynamicAttribute.ValueDouble = double.Parse(DynamicAttributeEntity.DefaultValue);

                        else if (DynamicAttribute.DataType.ToLower() == "boolean".ToLower())
                            DynamicAttribute.ValueBoolean = bool.Parse(DynamicAttributeEntity.DefaultValue);

                        else if (DynamicAttribute.DataType.ToLower() == "datetime".ToLower())
                            DynamicAttribute.ValueDateTime = DateTime.Parse(DynamicAttributeEntity.DefaultValue);
                    }
                    else
                    {
                        DynamicAttribute.ValueString = " ".Split(' ')[0];
                    }
                }

                objectInst.DynamicAtts = DynamicAttributesWithoutValue;

                objectInst.CivilLoads = _unitOfWork.AttributeActivatedRepository
                    .GetInstAttributeActivated(TablesNames.TLIcivilLoads.ToString(), null, "allLoadInstId", "Dismantle", "SiteCode", "legId", "Leg2Id", "sideArmId",
                        "allCivilInstId", "civilSteelSupportCategoryId");

                return new Response<ObjectAttributeInst>(true, objectInst, null, null, (int)ApiReturnCode.success);
            }
            catch (Exception err)
            {
                return new Response<ObjectAttributeInst>(true, null, null, err.Message, (int)ApiReturnCode.fail);
            }
        }
        public string CheckDependencyValidationForRadioTypes(object Input, string RadioType, string SiteCode)
        {
            if (RadioType.ToLower() == TablesNames.TLIradioAntenna.ToString().ToLower())
            {
                string MainTableName = TablesNames.TLIradioAntenna.ToString();
                AddRadioAntennaViewModel AddInstallationViewModel = _mapper.Map<AddRadioAntennaViewModel>(Input);

                List<DynamicAttViewModel> DynamicAttributes = _mapper.Map<List<DynamicAttViewModel>>(_unitOfWork.DynamicAttRepository
                    .GetIncludeWhere(x => x.tablesNames.TableName.ToLower() == MainTableName.ToLower() && !x.disable
                        , x => x.tablesNames).ToList());

                foreach (DynamicAttViewModel DynamicAttribute in DynamicAttributes)
                {
                    TLIdependency DynamicAttributeMainDependency = _unitOfWork.DependencieRepository.GetIncludeWhereFirst(x => x.DynamicAttId == DynamicAttribute.Id &&
                        (x.ValueBoolean != null || x.ValueDateTime != null || x.ValueDouble != null || !string.IsNullOrEmpty(x.ValueString)),
                            x => x.Operation);

                    if (DynamicAttributeMainDependency == null)
                        continue;

                    List<int> DependencyRows = _unitOfWork.DependencyRowRepository.GetWhere(x => x.DependencyId == DynamicAttributeMainDependency.Id)
                        .Select(x => x.RowId.Value).Distinct().ToList();

                    foreach (int RowId in DependencyRows)
                    {
                        List<TLIrule> Rules = _unitOfWork.RowRuleRepository.GetIncludeWhere(x => x.RowId == RowId, x => x.Rule, x => x.Rule.tablesNames,
                            x => x.Rule.Operation, x => x.Rule.dynamicAtt, x => x.Rule.attributeActivated).Select(x => x.Rule).ToList();

                        int CheckIfSuccessAllRules = 0;

                        foreach (TLIrule Rule in Rules)
                        {
                            string SDTableName = Rule.tablesNames.TableName;

                            string DataType = "";

                            string Operation = Rule.Operation.Name;
                            object OperationValue = new object();

                            if (Rule.OperationValueBoolean != null)
                            {
                                DataType = "Bool";
                                OperationValue = Rule.OperationValueBoolean;
                            }
                            else if (Rule.OperationValueDateTime != null)
                            {
                                DataType = "DateTime";
                                OperationValue = Rule.OperationValueDateTime;
                            }
                            else if (Rule.OperationValueDouble != null)
                            {
                                DataType = "Double";
                                OperationValue = Rule.OperationValueDouble;
                            }
                            else if (!string.IsNullOrEmpty(Rule.OperationValueString))
                            {
                                DataType = "String";
                                OperationValue = Rule.OperationValueString;
                            }

                            if (MainTableName.ToLower() == SDTableName.ToLower())
                            {
                                object InsertedValue = new object();

                                if (Rule.attributeActivatedId != null)
                                {
                                    string AttributeName = Rule.attributeActivated.Key;

                                    object TestValue = AddInstallationViewModel.GetType().GetProperties()
                                        .FirstOrDefault(x => x.Name.ToLower() == AttributeName.ToLower()).GetValue(AddInstallationViewModel, null);

                                    if (TestValue == null)
                                        break;

                                    if (Rule.OperationValueBoolean != null)
                                        InsertedValue = bool.Parse(TestValue.ToString());

                                    else if (Rule.OperationValueDateTime != null)
                                        InsertedValue = DateTime.Parse(TestValue.ToString());

                                    else if (Rule.OperationValueDouble != null)
                                        InsertedValue = double.Parse(TestValue.ToString());

                                    else if (!string.IsNullOrEmpty(Rule.OperationValueString))
                                        InsertedValue = TestValue.ToString();
                                }
                                else if (Rule.dynamicAttId != null)
                                {
                                    AddDynamicAttInstValueViewModel DynamicObject = AddInstallationViewModel.TLIdynamicAttInstValue
                                        .FirstOrDefault(x => x.DynamicAttId == Rule.dynamicAttId.Value);

                                    if (DynamicObject == null)
                                        break;

                                    if (DynamicObject.ValueBoolean != null)
                                        InsertedValue = DynamicObject.ValueBoolean;

                                    else if (DynamicObject.ValueDateTime != null)
                                        InsertedValue = DynamicObject.ValueDateTime;

                                    else if (DynamicObject.ValueDouble != null)
                                        InsertedValue = DynamicObject.ValueDouble;

                                    else if (!string.IsNullOrEmpty(DynamicObject.ValueString))
                                        InsertedValue = DynamicObject.ValueString;
                                }

                                if (Operation == "==" ? InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower() :
                                    Operation == "!=" ? InsertedValue.ToString().ToLower() != OperationValue.ToString().ToLower() :
                                    Operation == ">" ? Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == 1 :
                                    Operation == ">=" ? (Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == 1 ||
                                        InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower()) :
                                    Operation == "<" ? Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == -1 :
                                    Operation == "<=" ? (Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == -1 ||
                                        InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower()) : false)
                                {
                                    CheckIfSuccessAllRules++;
                                }
                            }
                            else
                            {
                                List<object> TableRecords = new List<object>();
                                if (Rule.attributeActivatedId != null)
                                {
                                    string AttributeName = Rule.attributeActivated.Key;

                                    if (OperationValue != null)
                                        TableRecords = _mapper.Map<List<object>>(db.GetType().GetProperty(SDTableName)
                                            .GetValue(db, null)).Where(x => x.GetType().GetProperty(AttributeName).GetValue(x, null) != null ? (Operation == ">" ?
                                                (DataType.ToLower() == "DateTime".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 : false) :
                                            Operation == ">=" ?
                                                (DataType.ToLower() == "DateTime".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 ||
                                                        x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 ||
                                                        x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) : false) :
                                            Operation == "<" ?
                                                (DataType.ToLower() == "DateTime".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 : false) :
                                            Operation == "<=" ?
                                                (DataType.ToLower() == "DateTime".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 ||
                                                        x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 ||
                                                        x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) : false) :
                                            Operation == "==" ?
                                                x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower() :
                                            Operation == "!=" ?
                                                x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() != OperationValue.ToString().ToLower() : false) : false).ToList();

                                }
                                else if (Rule.dynamicAttId != null)
                                {
                                    List<int> DynamicAttValuesInventoryIds = new List<int>();

                                    if (!DynamicAttribute.LibraryAtt)
                                    {
                                        DynamicAttValuesInventoryIds = _unitOfWork.DynamicAttInstValueRepository
                                            .GetWhere(x => (x.DynamicAttId == Rule.dynamicAttId.Value && !x.disable) &&
                                                (Operation == "==" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() == Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() == Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble == Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() == Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == "!=" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() != Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() != Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble != Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() != Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == ">" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime > Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble > Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == ">=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime >= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble >= Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime < Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble < Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime <= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble <= Rule.OperationValueDouble : false)) : false)

                                                ).Select(x => x.InventoryId).ToList();
                                    }
                                    else
                                    {
                                        DynamicAttValuesInventoryIds = _unitOfWork.DynamicAttLibRepository
                                            .GetWhere(x => (x.DynamicAttId == Rule.dynamicAttId && !x.disable) &&
                                                (Operation == "==" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() == Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() == Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble == Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() == Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == "!=" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() != Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() != Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble != Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() != Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == ">" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime > Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble > Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == ">=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime >= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble >= Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime < Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble < Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime <= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble <= Rule.OperationValueDouble : false)) : false)

                                                ).Select(x => x.InventoryId).ToList();
                                    }
                                    if (DynamicAttValuesInventoryIds != null ? DynamicAttValuesInventoryIds.Count() != 0 : false)
                                    {
                                        TableRecords = _mapper.Map<List<object>>(db.GetType()
                                            .GetProperty(SDTableName).GetValue(db, null))
                                                .Where(x => DynamicAttValuesInventoryIds.Contains(Convert.ToInt32(x.GetType().GetProperty("Id").GetValue(x, null)))).ToList();
                                    }
                                }

                                AddInstRuleViewModel AddInstRuleViewModel = new AddInstRuleViewModel();
                                if (Rule.dynamicAttId != null)
                                {
                                    AddInstRuleViewModel = new AddInstRuleViewModel
                                    {
                                        dynamicAttId = Rule.dynamicAttId,
                                        IsDynamic = true,
                                        OperationId = Rule.OperationId,
                                        OperationValueBoolean = Rule.OperationValueBoolean,
                                        OperationValueDateTime = Rule.OperationValueDateTime,
                                        OperationValueDouble = Rule.OperationValueDouble,
                                        OperationValueString = Rule.OperationValueString,
                                        TableName = Rule.tablesNames.TableName
                                    };
                                }
                                else if (Rule.attributeActivatedId != null)
                                {
                                    AddInstRuleViewModel = new AddInstRuleViewModel
                                    {
                                        attributeActivatedId = Rule.attributeActivatedId,
                                        IsDynamic = false,
                                        OperationId = Rule.OperationId,
                                        OperationValueBoolean = Rule.OperationValueBoolean,
                                        OperationValueDateTime = Rule.OperationValueDateTime,
                                        OperationValueDouble = Rule.OperationValueDouble,
                                        OperationValueString = Rule.OperationValueString,
                                        TableName = Rule.tablesNames.TableName
                                    };
                                }
                                List<object> RecordsIds = _mapper.Map<List<object>>(GetRecordsIds(MainTableName, AddInstRuleViewModel));

                                PathToCheckDependencyValidation Item = (PathToCheckDependencyValidation)Enum.Parse(typeof(PathToCheckDependencyValidation),
                                    MainTableName + SDTableName + "Goal");

                                List<string> Path = GetEnumDescription(Item).Split(" ").ToList();

                                object CheckId = new object();

                                if (Path.Count() > 1)
                                {
                                    object CivilLoads = AddInstallationViewModel.GetType().GetProperty(Path[0])
                                        .GetValue(AddInstallationViewModel, null);

                                    CheckId = CivilLoads.GetType().GetProperty(Path[1]).GetValue(CivilLoads, null) != null ?
                                        (int)CivilLoads.GetType().GetProperty(Path[1]).GetValue(CivilLoads, null) : new object();
                                }
                                else if (Path.Count() == 1 && Path[0].ToLower() == "sitecode")
                                {
                                    CheckId = SiteCode;
                                }
                                else if (Path.Count() == 1)
                                {
                                    if (AddInstallationViewModel.GetType().GetProperty(Path[0]).GetValue(AddInstallationViewModel, null) != null)
                                        CheckId = (int)AddInstallationViewModel.GetType().GetProperty(Path[0])
                                            .GetValue(AddInstallationViewModel, null);
                                }

                                if (RecordsIds.Exists(x => x.ToString().ToLower() == CheckId.ToString().ToLower()))
                                {
                                    CheckIfSuccessAllRules++;
                                }
                            }
                        }

                        if (Rules.Count() == CheckIfSuccessAllRules)
                        {
                            string DynamicAttributeName = "";
                            int DynamicAttributeId = _unitOfWork.DependencyRowRepository
                                .GetIncludeWhereFirst(x => x.RowId == RowId, x => x.Dependency).Dependency.DynamicAttId.Value;

                            AddDynamicAttInstValueViewModel InputDynamicAttribute = AddInstallationViewModel.TLIdynamicAttInstValue
                                .FirstOrDefault(x => x.DynamicAttId == DynamicAttributeId);

                            if (InputDynamicAttribute == null)
                            {
                                DynamicAttributeName = _unitOfWork.DynamicAttRepository
                                    .GetWhereFirst(x => x.Id == DynamicAttributeId).Key;

                                return $"({DynamicAttributeName}) value can't be null";
                            }
                            else
                            {
                                string DependencyValidationOperation = DynamicAttributeMainDependency.Operation.Name;

                                object DependencyValidationValue = new object();

                                if (DynamicAttributeMainDependency.ValueBoolean != null)
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueBoolean;

                                else if (DynamicAttributeMainDependency.ValueDateTime != null)
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueDateTime;

                                else if (DynamicAttributeMainDependency.ValueDouble != null)
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueDouble;

                                else if (!string.IsNullOrEmpty(DynamicAttributeMainDependency.ValueString))
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueString;

                                object InputDynamicValue = new object();

                                if (InputDynamicAttribute.ValueBoolean != null)
                                    InputDynamicValue = InputDynamicAttribute.ValueBoolean;

                                else if (InputDynamicAttribute.ValueDateTime != null)
                                    InputDynamicValue = InputDynamicAttribute.ValueDateTime;

                                else if (InputDynamicAttribute.ValueDouble != null)
                                    InputDynamicValue = InputDynamicAttribute.ValueDouble;

                                else if (!string.IsNullOrEmpty(InputDynamicAttribute.ValueString))
                                    InputDynamicValue = InputDynamicAttribute.ValueString;

                                if (!(DependencyValidationOperation == "==" ? InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower() :
                                    DependencyValidationOperation == "!=" ? InputDynamicValue.ToString().ToLower() != DependencyValidationValue.ToString().ToLower() :
                                    DependencyValidationOperation == ">" ? Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == 1 :
                                    DependencyValidationOperation == ">=" ? (Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == 1 ||
                                        InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower()) :
                                    DependencyValidationOperation == "<" ? Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == -1 :
                                    DependencyValidationOperation == "<=" ? (Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == -1 ||
                                        InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower()) : false))
                                {
                                    DynamicAttributeName = _unitOfWork.DynamicAttRepository
                                        .GetWhereFirst(x => x.Id == DynamicAttributeId).Key;

                                    string ReturnOperation = (DependencyValidationOperation == "==" ? "equal to" :
                                        (DependencyValidationOperation == "!=" ? "not equal to" :
                                        (DependencyValidationOperation == ">" ? "bigger than" :
                                        (DependencyValidationOperation == ">=" ? "bigger than or equal to" :
                                        (DependencyValidationOperation == "<" ? "smaller than" :
                                        (DependencyValidationOperation == "<=" ? "smaller than or equal to" : ""))))));

                                    return $"({DynamicAttributeName}) value must be {ReturnOperation} {DependencyValidationValue}";
                                }
                            }
                        }
                    }
                }
            }
            else if (RadioType.ToLower() == TablesNames.TLIradioRRU.ToString().ToLower())
            {
                string MainTableName = TablesNames.TLIradioRRU.ToString();
                AddRadioRRUViewModel AddInstallationViewModel = _mapper.Map<AddRadioRRUViewModel>(Input);

                List<DynamicAttViewModel> DynamicAttributes = _mapper.Map<List<DynamicAttViewModel>>(_unitOfWork.DynamicAttRepository
                    .GetIncludeWhere(x => x.tablesNames.TableName.ToLower() == MainTableName.ToLower() && !x.disable
                        , x => x.tablesNames).ToList());

                foreach (DynamicAttViewModel DynamicAttribute in DynamicAttributes)
                {
                    TLIdependency DynamicAttributeMainDependency = _unitOfWork.DependencieRepository.GetIncludeWhereFirst(x => x.DynamicAttId == DynamicAttribute.Id &&
                        (x.ValueBoolean != null || x.ValueDateTime != null || x.ValueDouble != null || !string.IsNullOrEmpty(x.ValueString)),
                            x => x.Operation);

                    if (DynamicAttributeMainDependency == null)
                        continue;

                    List<int> DependencyRows = _unitOfWork.DependencyRowRepository.GetWhere(x => x.DependencyId == DynamicAttributeMainDependency.Id)
                        .Select(x => x.RowId.Value).Distinct().ToList();

                    foreach (int RowId in DependencyRows)
                    {
                        List<TLIrule> Rules = _unitOfWork.RowRuleRepository.GetIncludeWhere(x => x.RowId == RowId, x => x.Rule, x => x.Rule.tablesNames,
                            x => x.Rule.Operation, x => x.Rule.dynamicAtt, x => x.Rule.attributeActivated).Select(x => x.Rule).ToList();

                        int CheckIfSuccessAllRules = 0;

                        foreach (TLIrule Rule in Rules)
                        {
                            string SDTableName = Rule.tablesNames.TableName;

                            string DataType = "";

                            string Operation = Rule.Operation.Name;
                            object OperationValue = new object();

                            if (Rule.OperationValueBoolean != null)
                            {
                                DataType = "Bool";
                                OperationValue = Rule.OperationValueBoolean;
                            }
                            else if (Rule.OperationValueDateTime != null)
                            {
                                DataType = "DateTime";
                                OperationValue = Rule.OperationValueDateTime;
                            }
                            else if (Rule.OperationValueDouble != null)
                            {
                                DataType = "Double";
                                OperationValue = Rule.OperationValueDouble;
                            }
                            else if (!string.IsNullOrEmpty(Rule.OperationValueString))
                            {
                                DataType = "String";
                                OperationValue = Rule.OperationValueString;
                            }

                            if (MainTableName.ToLower() == SDTableName.ToLower())
                            {
                                object InsertedValue = new object();

                                if (Rule.attributeActivatedId != null)
                                {
                                    string AttributeName = Rule.attributeActivated.Key;

                                    object TestValue = AddInstallationViewModel.GetType().GetProperties()
                                        .FirstOrDefault(x => x.Name.ToLower() == AttributeName.ToLower()).GetValue(AddInstallationViewModel, null);

                                    if (TestValue == null)
                                        break;

                                    if (Rule.OperationValueBoolean != null)
                                        InsertedValue = bool.Parse(TestValue.ToString());

                                    else if (Rule.OperationValueDateTime != null)
                                        InsertedValue = DateTime.Parse(TestValue.ToString());

                                    else if (Rule.OperationValueDouble != null)
                                        InsertedValue = double.Parse(TestValue.ToString());

                                    else if (!string.IsNullOrEmpty(Rule.OperationValueString))
                                        InsertedValue = TestValue.ToString();
                                }
                                else if (Rule.dynamicAttId != null)
                                {
                                    AddDynamicAttInstValueViewModel DynamicObject = AddInstallationViewModel.TLIdynamicAttInstValue
                                        .FirstOrDefault(x => x.DynamicAttId == Rule.dynamicAttId.Value);

                                    if (DynamicObject == null)
                                        break;

                                    if (DynamicObject.ValueBoolean != null)
                                        InsertedValue = DynamicObject.ValueBoolean;

                                    else if (DynamicObject.ValueDateTime != null)
                                        InsertedValue = DynamicObject.ValueDateTime;

                                    else if (DynamicObject.ValueDouble != null)
                                        InsertedValue = DynamicObject.ValueDouble;

                                    else if (!string.IsNullOrEmpty(DynamicObject.ValueString))
                                        InsertedValue = DynamicObject.ValueString;
                                }

                                if (Operation == "==" ? InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower() :
                                    Operation == "!=" ? InsertedValue.ToString().ToLower() != OperationValue.ToString().ToLower() :
                                    Operation == ">" ? Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == 1 :
                                    Operation == ">=" ? (Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == 1 ||
                                        InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower()) :
                                    Operation == "<" ? Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == -1 :
                                    Operation == "<=" ? (Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == -1 ||
                                        InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower()) : false)
                                {
                                    CheckIfSuccessAllRules++;
                                }
                            }
                            else
                            {
                                List<object> TableRecords = new List<object>();
                                if (Rule.attributeActivatedId != null)
                                {
                                    string AttributeName = Rule.attributeActivated.Key;

                                    if (OperationValue != null)
                                        TableRecords = _mapper.Map<List<object>>(db.GetType().GetProperty(SDTableName)
                                            .GetValue(db, null)).Where(x => x.GetType().GetProperty(AttributeName).GetValue(x, null) != null ? (Operation == ">" ?
                                                (DataType.ToLower() == "DateTime".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 : false) :
                                            Operation == ">=" ?
                                                (DataType.ToLower() == "DateTime".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 ||
                                                        x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 ||
                                                        x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) : false) :
                                            Operation == "<" ?
                                                (DataType.ToLower() == "DateTime".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 : false) :
                                            Operation == "<=" ?
                                                (DataType.ToLower() == "DateTime".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 ||
                                                        x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 ||
                                                        x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) : false) :
                                            Operation == "==" ?
                                                x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower() :
                                            Operation == "!=" ?
                                                x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() != OperationValue.ToString().ToLower() : false) : false).ToList();

                                }
                                else if (Rule.dynamicAttId != null)
                                {
                                    List<int> DynamicAttValuesInventoryIds = new List<int>();

                                    if (!DynamicAttribute.LibraryAtt)
                                    {
                                        DynamicAttValuesInventoryIds = _unitOfWork.DynamicAttInstValueRepository
                                            .GetWhere(x => (x.DynamicAttId == Rule.dynamicAttId.Value && !x.disable) &&
                                                (Operation == "==" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() == Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() == Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble == Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() == Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == "!=" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() != Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() != Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble != Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() != Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == ">" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime > Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble > Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == ">=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime >= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble >= Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime < Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble < Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime <= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble <= Rule.OperationValueDouble : false)) : false)

                                                ).Select(x => x.InventoryId).ToList();
                                    }
                                    else
                                    {
                                        DynamicAttValuesInventoryIds = _unitOfWork.DynamicAttLibRepository
                                            .GetWhere(x => (x.DynamicAttId == Rule.dynamicAttId && !x.disable) &&
                                                (Operation == "==" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() == Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() == Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble == Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() == Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == "!=" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() != Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() != Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble != Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() != Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == ">" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime > Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble > Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == ">=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime >= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble >= Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime < Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble < Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime <= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble <= Rule.OperationValueDouble : false)) : false)

                                                ).Select(x => x.InventoryId).ToList();
                                    }
                                    if (DynamicAttValuesInventoryIds != null ? DynamicAttValuesInventoryIds.Count() != 0 : false)
                                    {
                                        TableRecords = _mapper.Map<List<object>>(db.GetType()
                                            .GetProperty(SDTableName).GetValue(db, null))
                                                .Where(x => DynamicAttValuesInventoryIds.Contains(Convert.ToInt32(x.GetType().GetProperty("Id").GetValue(x, null)))).ToList();
                                    }
                                }

                                AddInstRuleViewModel AddInstRuleViewModel = new AddInstRuleViewModel();
                                if (Rule.dynamicAttId != null)
                                {
                                    AddInstRuleViewModel = new AddInstRuleViewModel
                                    {
                                        dynamicAttId = Rule.dynamicAttId,
                                        IsDynamic = true,
                                        OperationId = Rule.OperationId,
                                        OperationValueBoolean = Rule.OperationValueBoolean,
                                        OperationValueDateTime = Rule.OperationValueDateTime,
                                        OperationValueDouble = Rule.OperationValueDouble,
                                        OperationValueString = Rule.OperationValueString,
                                        TableName = Rule.tablesNames.TableName
                                    };
                                }
                                else if (Rule.attributeActivatedId != null)
                                {
                                    AddInstRuleViewModel = new AddInstRuleViewModel
                                    {
                                        attributeActivatedId = Rule.attributeActivatedId,
                                        IsDynamic = false,
                                        OperationId = Rule.OperationId,
                                        OperationValueBoolean = Rule.OperationValueBoolean,
                                        OperationValueDateTime = Rule.OperationValueDateTime,
                                        OperationValueDouble = Rule.OperationValueDouble,
                                        OperationValueString = Rule.OperationValueString,
                                        TableName = Rule.tablesNames.TableName
                                    };
                                }
                                List<object> RecordsIds = _mapper.Map<List<object>>(GetRecordsIds(MainTableName, AddInstRuleViewModel));

                                PathToCheckDependencyValidation Item = (PathToCheckDependencyValidation)Enum.Parse(typeof(PathToCheckDependencyValidation),
                                    (MainTableName + SDTableName + "Goal").ToLower());

                                List<string> Path = GetEnumDescription(Item).Split(" ").ToList();

                                object CheckId = new object();

                                if (Path.Count() > 1)
                                {
                                    object CivilLoads = AddInstallationViewModel.GetType().GetProperty(Path[0])
                                        .GetValue(AddInstallationViewModel, null);

                                    CheckId = CivilLoads.GetType().GetProperty(Path[1]).GetValue(CivilLoads, null) != null ?
                                        (int)CivilLoads.GetType().GetProperty(Path[1]).GetValue(CivilLoads, null) : new object();
                                }
                                else if (Path.Count() == 1 && Path[0].ToLower() == "sitecode")
                                {
                                    CheckId = SiteCode;
                                }
                                else if (Path.Count() == 1)
                                {
                                    if (AddInstallationViewModel.GetType().GetProperty(Path[0]).GetValue(AddInstallationViewModel, null) != null)
                                        CheckId = (int)AddInstallationViewModel.GetType().GetProperty(Path[0])
                                            .GetValue(AddInstallationViewModel, null);
                                }

                                if (RecordsIds.Exists(x => x.ToString().ToLower() == CheckId.ToString().ToLower()))
                                {
                                    CheckIfSuccessAllRules++;
                                }
                            }
                        }

                        if (Rules.Count() == CheckIfSuccessAllRules)
                        {
                            string DynamicAttributeName = "";
                            int DynamicAttributeId = _unitOfWork.DependencyRowRepository
                                .GetIncludeWhereFirst(x => x.RowId == RowId, x => x.Dependency).Dependency.DynamicAttId.Value;

                            AddDynamicAttInstValueViewModel InputDynamicAttribute = AddInstallationViewModel.TLIdynamicAttInstValue
                                .FirstOrDefault(x => x.DynamicAttId == DynamicAttributeId);

                            if (InputDynamicAttribute == null)
                            {
                                DynamicAttributeName = _unitOfWork.DynamicAttRepository
                                    .GetWhereFirst(x => x.Id == DynamicAttributeId).Key;

                                return $"({DynamicAttributeName}) value can't be null";
                            }
                            else
                            {
                                string DependencyValidationOperation = DynamicAttributeMainDependency.Operation.Name;

                                object DependencyValidationValue = new object();

                                if (DynamicAttributeMainDependency.ValueBoolean != null)
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueBoolean;

                                else if (DynamicAttributeMainDependency.ValueDateTime != null)
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueDateTime;

                                else if (DynamicAttributeMainDependency.ValueDouble != null)
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueDouble;

                                else if (!string.IsNullOrEmpty(DynamicAttributeMainDependency.ValueString))
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueString;

                                object InputDynamicValue = new object();

                                if (InputDynamicAttribute.ValueBoolean != null)
                                    InputDynamicValue = InputDynamicAttribute.ValueBoolean;

                                else if (InputDynamicAttribute.ValueDateTime != null)
                                    InputDynamicValue = InputDynamicAttribute.ValueDateTime;

                                else if (InputDynamicAttribute.ValueDouble != null)
                                    InputDynamicValue = InputDynamicAttribute.ValueDouble;

                                else if (!string.IsNullOrEmpty(InputDynamicAttribute.ValueString))
                                    InputDynamicValue = InputDynamicAttribute.ValueString;

                                if (!(DependencyValidationOperation == "==" ? InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower() :
                                    DependencyValidationOperation == "!=" ? InputDynamicValue.ToString().ToLower() != DependencyValidationValue.ToString().ToLower() :
                                    DependencyValidationOperation == ">" ? Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == 1 :
                                    DependencyValidationOperation == ">=" ? (Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == 1 ||
                                        InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower()) :
                                    DependencyValidationOperation == "<" ? Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == -1 :
                                    DependencyValidationOperation == "<=" ? (Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == -1 ||
                                        InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower()) : false))
                                {
                                    DynamicAttributeName = _unitOfWork.DynamicAttRepository
                                        .GetWhereFirst(x => x.Id == DynamicAttributeId).Key;

                                    string ReturnOperation = (DependencyValidationOperation == "==" ? "equal to" :
                                        (DependencyValidationOperation == "!=" ? "not equal to" :
                                        (DependencyValidationOperation == ">" ? "bigger than" :
                                        (DependencyValidationOperation == ">=" ? "bigger than or equal to" :
                                        (DependencyValidationOperation == "<" ? "smaller than" :
                                        (DependencyValidationOperation == "<=" ? "smaller than or equal to" : ""))))));

                                    return $"({DynamicAttributeName}) value must be {ReturnOperation} {DependencyValidationValue}";
                                }
                            }
                        }
                    }
                }
            }
            else if (RadioType.ToLower() == TablesNames.TLIradioOther.ToString().ToLower())
            {
                string MainTableName = TablesNames.TLIradioOther.ToString();
                AddRadioOtherViewModel AddInstallationViewModel = _mapper.Map<AddRadioOtherViewModel>(Input);

                List<DynamicAttViewModel> DynamicAttributes = _mapper.Map<List<DynamicAttViewModel>>(_unitOfWork.DynamicAttRepository
                    .GetIncludeWhere(x => x.tablesNames.TableName.ToLower() == MainTableName.ToLower() && !x.disable
                        , x => x.tablesNames).ToList());

                foreach (DynamicAttViewModel DynamicAttribute in DynamicAttributes)
                {
                    TLIdependency DynamicAttributeMainDependency = _unitOfWork.DependencieRepository.GetIncludeWhereFirst(x => x.DynamicAttId == DynamicAttribute.Id &&
                        (x.ValueBoolean != null || x.ValueDateTime != null || x.ValueDouble != null || !string.IsNullOrEmpty(x.ValueString)),
                            x => x.Operation);

                    if (DynamicAttributeMainDependency == null)
                        continue;

                    List<int> DependencyRows = _unitOfWork.DependencyRowRepository.GetWhere(x => x.DependencyId == DynamicAttributeMainDependency.Id)
                        .Select(x => x.RowId.Value).Distinct().ToList();

                    foreach (int RowId in DependencyRows)
                    {
                        List<TLIrule> Rules = _unitOfWork.RowRuleRepository.GetIncludeWhere(x => x.RowId == RowId, x => x.Rule, x => x.Rule.tablesNames,
                            x => x.Rule.Operation, x => x.Rule.dynamicAtt, x => x.Rule.attributeActivated).Select(x => x.Rule).ToList();

                        int CheckIfSuccessAllRules = 0;

                        foreach (TLIrule Rule in Rules)
                        {
                            string SDTableName = Rule.tablesNames.TableName;

                            string DataType = "";

                            string Operation = Rule.Operation.Name;
                            object OperationValue = new object();

                            if (Rule.OperationValueBoolean != null)
                            {
                                DataType = "Bool";
                                OperationValue = Rule.OperationValueBoolean;
                            }
                            else if (Rule.OperationValueDateTime != null)
                            {
                                DataType = "DateTime";
                                OperationValue = Rule.OperationValueDateTime;
                            }
                            else if (Rule.OperationValueDouble != null)
                            {
                                DataType = "Double";
                                OperationValue = Rule.OperationValueDouble;
                            }
                            else if (!string.IsNullOrEmpty(Rule.OperationValueString))
                            {
                                DataType = "String";
                                OperationValue = Rule.OperationValueString;
                            }

                            if (MainTableName.ToLower() == SDTableName.ToLower())
                            {
                                object InsertedValue = new object();

                                if (Rule.attributeActivatedId != null)
                                {
                                    string AttributeName = Rule.attributeActivated.Key;

                                    object TestValue = AddInstallationViewModel.GetType().GetProperties()
                                        .FirstOrDefault(x => x.Name.ToLower() == AttributeName.ToLower()).GetValue(AddInstallationViewModel, null);

                                    if (TestValue == null)
                                        break;

                                    if (Rule.OperationValueBoolean != null)
                                        InsertedValue = bool.Parse(TestValue.ToString());

                                    else if (Rule.OperationValueDateTime != null)
                                        InsertedValue = DateTime.Parse(TestValue.ToString());

                                    else if (Rule.OperationValueDouble != null)
                                        InsertedValue = double.Parse(TestValue.ToString());

                                    else if (!string.IsNullOrEmpty(Rule.OperationValueString))
                                        InsertedValue = TestValue.ToString();
                                }
                                else if (Rule.dynamicAttId != null)
                                {
                                    AddDynamicAttInstValueViewModel DynamicObject = AddInstallationViewModel.TLIdynamicAttInstValue
                                        .FirstOrDefault(x => x.DynamicAttId == Rule.dynamicAttId.Value);

                                    if (DynamicObject == null)
                                        break;

                                    if (DynamicObject.ValueBoolean != null)
                                        InsertedValue = DynamicObject.ValueBoolean;

                                    else if (DynamicObject.ValueDateTime != null)
                                        InsertedValue = DynamicObject.ValueDateTime;

                                    else if (DynamicObject.ValueDouble != null)
                                        InsertedValue = DynamicObject.ValueDouble;

                                    else if (!string.IsNullOrEmpty(DynamicObject.ValueString))
                                        InsertedValue = DynamicObject.ValueString;
                                }

                                if (Operation == "==" ? InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower() :
                                    Operation == "!=" ? InsertedValue.ToString().ToLower() != OperationValue.ToString().ToLower() :
                                    Operation == ">" ? Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == 1 :
                                    Operation == ">=" ? (Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == 1 ||
                                        InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower()) :
                                    Operation == "<" ? Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == -1 :
                                    Operation == "<=" ? (Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == -1 ||
                                        InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower()) : false)
                                {
                                    CheckIfSuccessAllRules++;
                                }
                            }
                            else
                            {
                                List<object> TableRecords = new List<object>();
                                if (Rule.attributeActivatedId != null)
                                {
                                    string AttributeName = Rule.attributeActivated.Key;

                                    if (OperationValue != null)
                                        TableRecords = _mapper.Map<List<object>>(db.GetType().GetProperty(SDTableName)
                                            .GetValue(db, null)).Where(x => x.GetType().GetProperty(AttributeName).GetValue(x, null) != null ? (Operation == ">" ?
                                                (DataType.ToLower() == "DateTime".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 : false) :
                                            Operation == ">=" ?
                                                (DataType.ToLower() == "DateTime".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 ||
                                                        x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 ||
                                                        x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) : false) :
                                            Operation == "<" ?
                                                (DataType.ToLower() == "DateTime".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 : false) :
                                            Operation == "<=" ?
                                                (DataType.ToLower() == "DateTime".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 ||
                                                        x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 ||
                                                        x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) : false) :
                                            Operation == "==" ?
                                                x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower() :
                                            Operation == "!=" ?
                                                x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() != OperationValue.ToString().ToLower() : false) : false).ToList();

                                }
                                else if (Rule.dynamicAttId != null)
                                {
                                    List<int> DynamicAttValuesInventoryIds = new List<int>();

                                    if (!DynamicAttribute.LibraryAtt)
                                    {
                                        DynamicAttValuesInventoryIds = _unitOfWork.DynamicAttInstValueRepository
                                            .GetWhere(x => (x.DynamicAttId == Rule.dynamicAttId.Value && !x.disable) &&
                                                (Operation == "==" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() == Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() == Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble == Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() == Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == "!=" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() != Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() != Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble != Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() != Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == ">" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime > Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble > Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == ">=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime >= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble >= Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime < Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble < Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime <= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble <= Rule.OperationValueDouble : false)) : false)

                                                ).Select(x => x.InventoryId).ToList();
                                    }
                                    else
                                    {
                                        DynamicAttValuesInventoryIds = _unitOfWork.DynamicAttLibRepository
                                            .GetWhere(x => (x.DynamicAttId == Rule.dynamicAttId && !x.disable) &&
                                                (Operation == "==" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() == Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() == Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble == Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() == Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == "!=" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() != Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() != Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble != Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() != Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == ">" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime > Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble > Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == ">=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime >= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble >= Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime < Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble < Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime <= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble <= Rule.OperationValueDouble : false)) : false)

                                                ).Select(x => x.InventoryId).ToList();
                                    }
                                    if (DynamicAttValuesInventoryIds != null ? DynamicAttValuesInventoryIds.Count() != 0 : false)
                                    {
                                        TableRecords = _mapper.Map<List<object>>(db.GetType()
                                            .GetProperty(SDTableName).GetValue(db, null))
                                                .Where(x => DynamicAttValuesInventoryIds.Contains(Convert.ToInt32(x.GetType().GetProperty("Id").GetValue(x, null)))).ToList();
                                    }
                                }

                                AddInstRuleViewModel AddInstRuleViewModel = new AddInstRuleViewModel();
                                if (Rule.dynamicAttId != null)
                                {
                                    AddInstRuleViewModel = new AddInstRuleViewModel
                                    {
                                        dynamicAttId = Rule.dynamicAttId,
                                        IsDynamic = true,
                                        OperationId = Rule.OperationId,
                                        OperationValueBoolean = Rule.OperationValueBoolean,
                                        OperationValueDateTime = Rule.OperationValueDateTime,
                                        OperationValueDouble = Rule.OperationValueDouble,
                                        OperationValueString = Rule.OperationValueString,
                                        TableName = Rule.tablesNames.TableName
                                    };
                                }
                                else if (Rule.attributeActivatedId != null)
                                {
                                    AddInstRuleViewModel = new AddInstRuleViewModel
                                    {
                                        attributeActivatedId = Rule.attributeActivatedId,
                                        IsDynamic = false,
                                        OperationId = Rule.OperationId,
                                        OperationValueBoolean = Rule.OperationValueBoolean,
                                        OperationValueDateTime = Rule.OperationValueDateTime,
                                        OperationValueDouble = Rule.OperationValueDouble,
                                        OperationValueString = Rule.OperationValueString,
                                        TableName = Rule.tablesNames.TableName
                                    };
                                }
                                List<object> RecordsIds = _mapper.Map<List<object>>(GetRecordsIds(MainTableName, AddInstRuleViewModel));

                                PathToCheckDependencyValidation Item = (PathToCheckDependencyValidation)Enum.Parse(typeof(PathToCheckDependencyValidation),
                                    MainTableName + SDTableName + "Goal");

                                List<string> Path = GetEnumDescription(Item).Split(" ").ToList();

                                object CheckId = new object();

                                if (Path.Count() > 1)
                                {
                                    object CivilLoads = AddInstallationViewModel.GetType().GetProperty(Path[0])
                                        .GetValue(AddInstallationViewModel, null);

                                    CheckId = CivilLoads.GetType().GetProperty(Path[1]).GetValue(CivilLoads, null) != null ?
                                        (int)CivilLoads.GetType().GetProperty(Path[1]).GetValue(CivilLoads, null) : new object();
                                }
                                else if (Path.Count() == 1 && Path[0].ToLower() == "sitecode")
                                {
                                    CheckId = SiteCode;
                                }
                                else if (Path.Count() == 1)
                                {
                                    if (AddInstallationViewModel.GetType().GetProperty(Path[0]).GetValue(AddInstallationViewModel, null) != null)
                                        CheckId = (int)AddInstallationViewModel.GetType().GetProperty(Path[0])
                                            .GetValue(AddInstallationViewModel, null);
                                }

                                if (RecordsIds.Exists(x => x.ToString().ToLower() == CheckId.ToString().ToLower()))
                                {
                                    CheckIfSuccessAllRules++;
                                }
                            }
                        }

                        if (Rules.Count() == CheckIfSuccessAllRules)
                        {
                            string DynamicAttributeName = "";
                            int DynamicAttributeId = _unitOfWork.DependencyRowRepository
                                .GetIncludeWhereFirst(x => x.RowId == RowId, x => x.Dependency).Dependency.DynamicAttId.Value;

                            AddDynamicAttInstValueViewModel InputDynamicAttribute = AddInstallationViewModel.TLIdynamicAttInstValue
                                .FirstOrDefault(x => x.DynamicAttId == DynamicAttributeId);

                            if (InputDynamicAttribute == null)
                            {
                                DynamicAttributeName = _unitOfWork.DynamicAttRepository
                                    .GetWhereFirst(x => x.Id == DynamicAttributeId).Key;

                                return $"({DynamicAttributeName}) value can't be null";
                            }
                            else
                            {
                                string DependencyValidationOperation = DynamicAttributeMainDependency.Operation.Name;

                                object DependencyValidationValue = new object();

                                if (DynamicAttributeMainDependency.ValueBoolean != null)
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueBoolean;

                                else if (DynamicAttributeMainDependency.ValueDateTime != null)
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueDateTime;

                                else if (DynamicAttributeMainDependency.ValueDouble != null)
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueDouble;

                                else if (!string.IsNullOrEmpty(DynamicAttributeMainDependency.ValueString))
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueString;

                                object InputDynamicValue = new object();

                                if (InputDynamicAttribute.ValueBoolean != null)
                                    InputDynamicValue = InputDynamicAttribute.ValueBoolean;

                                else if (InputDynamicAttribute.ValueDateTime != null)
                                    InputDynamicValue = InputDynamicAttribute.ValueDateTime;

                                else if (InputDynamicAttribute.ValueDouble != null)
                                    InputDynamicValue = InputDynamicAttribute.ValueDouble;

                                else if (!string.IsNullOrEmpty(InputDynamicAttribute.ValueString))
                                    InputDynamicValue = InputDynamicAttribute.ValueString;

                                if (!(DependencyValidationOperation == "==" ? InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower() :
                                    DependencyValidationOperation == "!=" ? InputDynamicValue.ToString().ToLower() != DependencyValidationValue.ToString().ToLower() :
                                    DependencyValidationOperation == ">" ? Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == 1 :
                                    DependencyValidationOperation == ">=" ? (Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == 1 ||
                                        InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower()) :
                                    DependencyValidationOperation == "<" ? Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == -1 :
                                    DependencyValidationOperation == "<=" ? (Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == -1 ||
                                        InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower()) : false))
                                {
                                    DynamicAttributeName = _unitOfWork.DynamicAttRepository
                                        .GetWhereFirst(x => x.Id == DynamicAttributeId).Key;

                                    string ReturnOperation = (DependencyValidationOperation == "==" ? "equal to" :
                                        (DependencyValidationOperation == "!=" ? "not equal to" :
                                        (DependencyValidationOperation == ">" ? "bigger than" :
                                        (DependencyValidationOperation == ">=" ? "bigger than or equal to" :
                                        (DependencyValidationOperation == "<" ? "smaller than" :
                                        (DependencyValidationOperation == "<=" ? "smaller than or equal to" : ""))))));

                                    return $"({DynamicAttributeName}) value must be {ReturnOperation} {DependencyValidationValue}";
                                }
                            }
                        }
                    }
                }
            }
            return string.Empty;
        }
        public string CheckDependencyValidationForRadioTypesIns(object Input, string RadioType, string SiteCode)
        {
            if (RadioType.ToLower() == TablesNames.TLIradioAntenna.ToString().ToLower())
            {
                string MainTableName = TablesNames.TLIradioAntenna.ToString();
                AddRadioAntennaIntegration AddInstallationViewModel = _mapper.Map<AddRadioAntennaIntegration>(Input);

                List<DynamicAttViewModel> DynamicAttributes = _mapper.Map<List<DynamicAttViewModel>>(_unitOfWork.DynamicAttRepository
                    .GetIncludeWhere(x => x.tablesNames.TableName.ToLower() == MainTableName.ToLower() && !x.disable
                        , x => x.tablesNames).ToList());

                foreach (DynamicAttViewModel DynamicAttribute in DynamicAttributes)
                {
                    TLIdependency DynamicAttributeMainDependency = _unitOfWork.DependencieRepository.GetIncludeWhereFirst(x => x.DynamicAttId == DynamicAttribute.Id &&
                        (x.ValueBoolean != null || x.ValueDateTime != null || x.ValueDouble != null || !string.IsNullOrEmpty(x.ValueString)),
                            x => x.Operation);

                    if (DynamicAttributeMainDependency == null)
                        continue;

                    List<int> DependencyRows = _unitOfWork.DependencyRowRepository.GetWhere(x => x.DependencyId == DynamicAttributeMainDependency.Id)
                        .Select(x => x.RowId.Value).Distinct().ToList();

                    foreach (int RowId in DependencyRows)
                    {
                        List<TLIrule> Rules = _unitOfWork.RowRuleRepository.GetIncludeWhere(x => x.RowId == RowId, x => x.Rule, x => x.Rule.tablesNames,
                            x => x.Rule.Operation, x => x.Rule.dynamicAtt, x => x.Rule.attributeActivated).Select(x => x.Rule).ToList();

                        int CheckIfSuccessAllRules = 0;

                        foreach (TLIrule Rule in Rules)
                        {
                            string SDTableName = Rule.tablesNames.TableName;

                            string DataType = "";

                            string Operation = Rule.Operation.Name;
                            object OperationValue = new object();

                            if (Rule.OperationValueBoolean != null)
                            {
                                DataType = "Bool";
                                OperationValue = Rule.OperationValueBoolean;
                            }
                            else if (Rule.OperationValueDateTime != null)
                            {
                                DataType = "DateTime";
                                OperationValue = Rule.OperationValueDateTime;
                            }
                            else if (Rule.OperationValueDouble != null)
                            {
                                DataType = "Double";
                                OperationValue = Rule.OperationValueDouble;
                            }
                            else if (!string.IsNullOrEmpty(Rule.OperationValueString))
                            {
                                DataType = "String";
                                OperationValue = Rule.OperationValueString;
                            }

                            if (MainTableName.ToLower() == SDTableName.ToLower())
                            {
                                object InsertedValue = new object();

                                if (Rule.attributeActivatedId != null)
                                {
                                    string AttributeName = Rule.attributeActivated.Key;

                                    object TestValue = AddInstallationViewModel.GetType().GetProperties()
                                        .FirstOrDefault(x => x.Name.ToLower() == AttributeName.ToLower()).GetValue(AddInstallationViewModel, null);

                                    if (TestValue == null)
                                        break;

                                    if (Rule.OperationValueBoolean != null)
                                        InsertedValue = bool.Parse(TestValue.ToString());

                                    else if (Rule.OperationValueDateTime != null)
                                        InsertedValue = DateTime.Parse(TestValue.ToString());

                                    else if (Rule.OperationValueDouble != null)
                                        InsertedValue = double.Parse(TestValue.ToString());

                                    else if (!string.IsNullOrEmpty(Rule.OperationValueString))
                                        InsertedValue = TestValue.ToString();
                                }
                                else if (Rule.dynamicAttId != null)
                                {
                                    AddDynamicAttInstValueViewModel DynamicObject = AddInstallationViewModel.TLIdynamicAttInstValue
                                        .FirstOrDefault(x => x.DynamicAttId == Rule.dynamicAttId.Value);

                                    if (DynamicObject == null)
                                        break;

                                    if (DynamicObject.ValueBoolean != null)
                                        InsertedValue = DynamicObject.ValueBoolean;

                                    else if (DynamicObject.ValueDateTime != null)
                                        InsertedValue = DynamicObject.ValueDateTime;

                                    else if (DynamicObject.ValueDouble != null)
                                        InsertedValue = DynamicObject.ValueDouble;

                                    else if (!string.IsNullOrEmpty(DynamicObject.ValueString))
                                        InsertedValue = DynamicObject.ValueString;
                                }

                                if (Operation == "==" ? InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower() :
                                    Operation == "!=" ? InsertedValue.ToString().ToLower() != OperationValue.ToString().ToLower() :
                                    Operation == ">" ? Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == 1 :
                                    Operation == ">=" ? (Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == 1 ||
                                        InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower()) :
                                    Operation == "<" ? Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == -1 :
                                    Operation == "<=" ? (Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == -1 ||
                                        InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower()) : false)
                                {
                                    CheckIfSuccessAllRules++;
                                }
                            }
                            else
                            {
                                List<object> TableRecords = new List<object>();
                                if (Rule.attributeActivatedId != null)
                                {
                                    string AttributeName = Rule.attributeActivated.Key;

                                    if (OperationValue != null)
                                        TableRecords = _mapper.Map<List<object>>(db.GetType().GetProperty(SDTableName)
                                            .GetValue(db, null)).Where(x => x.GetType().GetProperty(AttributeName).GetValue(x, null) != null ? (Operation == ">" ?
                                                (DataType.ToLower() == "DateTime".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 : false) :
                                            Operation == ">=" ?
                                                (DataType.ToLower() == "DateTime".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 ||
                                                        x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 ||
                                                        x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) : false) :
                                            Operation == "<" ?
                                                (DataType.ToLower() == "DateTime".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 : false) :
                                            Operation == "<=" ?
                                                (DataType.ToLower() == "DateTime".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 ||
                                                        x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 ||
                                                        x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) : false) :
                                            Operation == "==" ?
                                                x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower() :
                                            Operation == "!=" ?
                                                x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() != OperationValue.ToString().ToLower() : false) : false).ToList();

                                }
                                else if (Rule.dynamicAttId != null)
                                {
                                    List<int> DynamicAttValuesInventoryIds = new List<int>();

                                    if (!DynamicAttribute.LibraryAtt)
                                    {
                                        DynamicAttValuesInventoryIds = _unitOfWork.DynamicAttInstValueRepository
                                            .GetWhere(x => (x.DynamicAttId == Rule.dynamicAttId.Value && !x.disable) &&
                                                (Operation == "==" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() == Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() == Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble == Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() == Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == "!=" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() != Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() != Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble != Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() != Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == ">" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime > Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble > Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == ">=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime >= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble >= Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime < Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble < Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime <= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble <= Rule.OperationValueDouble : false)) : false)

                                                ).Select(x => x.InventoryId).ToList();
                                    }
                                    else
                                    {
                                        DynamicAttValuesInventoryIds = _unitOfWork.DynamicAttLibRepository
                                            .GetWhere(x => (x.DynamicAttId == Rule.dynamicAttId && !x.disable) &&
                                                (Operation == "==" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() == Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() == Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble == Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() == Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == "!=" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() != Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() != Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble != Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() != Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == ">" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime > Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble > Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == ">=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime >= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble >= Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime < Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble < Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime <= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble <= Rule.OperationValueDouble : false)) : false)

                                                ).Select(x => x.InventoryId).ToList();
                                    }
                                    if (DynamicAttValuesInventoryIds != null ? DynamicAttValuesInventoryIds.Count() != 0 : false)
                                    {
                                        TableRecords = _mapper.Map<List<object>>(db.GetType()
                                            .GetProperty(SDTableName).GetValue(db, null))
                                                .Where(x => DynamicAttValuesInventoryIds.Contains(Convert.ToInt32(x.GetType().GetProperty("Id").GetValue(x, null)))).ToList();
                                    }
                                }

                                AddInstRuleViewModel AddInstRuleViewModel = new AddInstRuleViewModel();
                                if (Rule.dynamicAttId != null)
                                {
                                    AddInstRuleViewModel = new AddInstRuleViewModel
                                    {
                                        dynamicAttId = Rule.dynamicAttId,
                                        IsDynamic = true,
                                        OperationId = Rule.OperationId,
                                        OperationValueBoolean = Rule.OperationValueBoolean,
                                        OperationValueDateTime = Rule.OperationValueDateTime,
                                        OperationValueDouble = Rule.OperationValueDouble,
                                        OperationValueString = Rule.OperationValueString,
                                        TableName = Rule.tablesNames.TableName
                                    };
                                }
                                else if (Rule.attributeActivatedId != null)
                                {
                                    AddInstRuleViewModel = new AddInstRuleViewModel
                                    {
                                        attributeActivatedId = Rule.attributeActivatedId,
                                        IsDynamic = false,
                                        OperationId = Rule.OperationId,
                                        OperationValueBoolean = Rule.OperationValueBoolean,
                                        OperationValueDateTime = Rule.OperationValueDateTime,
                                        OperationValueDouble = Rule.OperationValueDouble,
                                        OperationValueString = Rule.OperationValueString,
                                        TableName = Rule.tablesNames.TableName
                                    };
                                }
                                List<object> RecordsIds = _mapper.Map<List<object>>(GetRecordsIds(MainTableName, AddInstRuleViewModel));

                                PathToCheckDependencyValidation Item = (PathToCheckDependencyValidation)Enum.Parse(typeof(PathToCheckDependencyValidation),
                                    MainTableName + SDTableName + "Goal");

                                List<string> Path = GetEnumDescription(Item).Split(" ").ToList();

                                object CheckId = new object();

                                if (Path.Count() > 1)
                                {
                                    object CivilLoads = AddInstallationViewModel.GetType().GetProperty(Path[0])
                                        .GetValue(AddInstallationViewModel, null);

                                    CheckId = CivilLoads.GetType().GetProperty(Path[1]).GetValue(CivilLoads, null) != null ?
                                        (int)CivilLoads.GetType().GetProperty(Path[1]).GetValue(CivilLoads, null) : new object();
                                }
                                else if (Path.Count() == 1 && Path[0].ToLower() == "sitecode")
                                {
                                    CheckId = SiteCode;
                                }
                                else if (Path.Count() == 1)
                                {
                                    if (AddInstallationViewModel.GetType().GetProperty(Path[0]).GetValue(AddInstallationViewModel, null) != null)
                                        CheckId = (int)AddInstallationViewModel.GetType().GetProperty(Path[0])
                                            .GetValue(AddInstallationViewModel, null);
                                }

                                if (RecordsIds.Exists(x => x.ToString().ToLower() == CheckId.ToString().ToLower()))
                                {
                                    CheckIfSuccessAllRules++;
                                }
                            }
                        }

                        if (Rules.Count() == CheckIfSuccessAllRules)
                        {
                            string DynamicAttributeName = "";
                            int DynamicAttributeId = _unitOfWork.DependencyRowRepository
                                .GetIncludeWhereFirst(x => x.RowId == RowId, x => x.Dependency).Dependency.DynamicAttId.Value;

                            AddDynamicAttInstValueViewModel InputDynamicAttribute = AddInstallationViewModel.TLIdynamicAttInstValue
                                .FirstOrDefault(x => x.DynamicAttId == DynamicAttributeId);

                            if (InputDynamicAttribute == null)
                            {
                                DynamicAttributeName = _unitOfWork.DynamicAttRepository
                                    .GetWhereFirst(x => x.Id == DynamicAttributeId).Key;

                                return $"({DynamicAttributeName}) value can't be null";
                            }
                            else
                            {
                                string DependencyValidationOperation = DynamicAttributeMainDependency.Operation.Name;

                                object DependencyValidationValue = new object();

                                if (DynamicAttributeMainDependency.ValueBoolean != null)
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueBoolean;

                                else if (DynamicAttributeMainDependency.ValueDateTime != null)
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueDateTime;

                                else if (DynamicAttributeMainDependency.ValueDouble != null)
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueDouble;

                                else if (!string.IsNullOrEmpty(DynamicAttributeMainDependency.ValueString))
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueString;

                                object InputDynamicValue = new object();

                                if (InputDynamicAttribute.ValueBoolean != null)
                                    InputDynamicValue = InputDynamicAttribute.ValueBoolean;

                                else if (InputDynamicAttribute.ValueDateTime != null)
                                    InputDynamicValue = InputDynamicAttribute.ValueDateTime;

                                else if (InputDynamicAttribute.ValueDouble != null)
                                    InputDynamicValue = InputDynamicAttribute.ValueDouble;

                                else if (!string.IsNullOrEmpty(InputDynamicAttribute.ValueString))
                                    InputDynamicValue = InputDynamicAttribute.ValueString;

                                if (!(DependencyValidationOperation == "==" ? InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower() :
                                    DependencyValidationOperation == "!=" ? InputDynamicValue.ToString().ToLower() != DependencyValidationValue.ToString().ToLower() :
                                    DependencyValidationOperation == ">" ? Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == 1 :
                                    DependencyValidationOperation == ">=" ? (Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == 1 ||
                                        InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower()) :
                                    DependencyValidationOperation == "<" ? Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == -1 :
                                    DependencyValidationOperation == "<=" ? (Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == -1 ||
                                        InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower()) : false))
                                {
                                    DynamicAttributeName = _unitOfWork.DynamicAttRepository
                                        .GetWhereFirst(x => x.Id == DynamicAttributeId).Key;

                                    string ReturnOperation = (DependencyValidationOperation == "==" ? "equal to" :
                                        (DependencyValidationOperation == "!=" ? "not equal to" :
                                        (DependencyValidationOperation == ">" ? "bigger than" :
                                        (DependencyValidationOperation == ">=" ? "bigger than or equal to" :
                                        (DependencyValidationOperation == "<" ? "smaller than" :
                                        (DependencyValidationOperation == "<=" ? "smaller than or equal to" : ""))))));

                                    return $"({DynamicAttributeName}) value must be {ReturnOperation} {DependencyValidationValue}";
                                }
                            }
                        }
                    }
                }
            }
            else if (RadioType.ToLower() == TablesNames.TLIradioRRU.ToString().ToLower())
            {
                string MainTableName = TablesNames.TLIradioRRU.ToString();
                AddRadioRRUIntegration AddInstallationViewModel = _mapper.Map<AddRadioRRUIntegration>(Input);

                List<DynamicAttViewModel> DynamicAttributes = _mapper.Map<List<DynamicAttViewModel>>(_unitOfWork.DynamicAttRepository
                    .GetIncludeWhere(x => x.tablesNames.TableName.ToLower() == MainTableName.ToLower() && !x.disable
                        , x => x.tablesNames).ToList());

                foreach (DynamicAttViewModel DynamicAttribute in DynamicAttributes)
                {
                    TLIdependency DynamicAttributeMainDependency = _unitOfWork.DependencieRepository.GetIncludeWhereFirst(x => x.DynamicAttId == DynamicAttribute.Id &&
                        (x.ValueBoolean != null || x.ValueDateTime != null || x.ValueDouble != null || !string.IsNullOrEmpty(x.ValueString)),
                            x => x.Operation);

                    if (DynamicAttributeMainDependency == null)
                        continue;

                    List<int> DependencyRows = _unitOfWork.DependencyRowRepository.GetWhere(x => x.DependencyId == DynamicAttributeMainDependency.Id)
                        .Select(x => x.RowId.Value).Distinct().ToList();

                    foreach (int RowId in DependencyRows)
                    {
                        List<TLIrule> Rules = _unitOfWork.RowRuleRepository.GetIncludeWhere(x => x.RowId == RowId, x => x.Rule, x => x.Rule.tablesNames,
                            x => x.Rule.Operation, x => x.Rule.dynamicAtt, x => x.Rule.attributeActivated).Select(x => x.Rule).ToList();

                        int CheckIfSuccessAllRules = 0;

                        foreach (TLIrule Rule in Rules)
                        {
                            string SDTableName = Rule.tablesNames.TableName;

                            string DataType = "";

                            string Operation = Rule.Operation.Name;
                            object OperationValue = new object();

                            if (Rule.OperationValueBoolean != null)
                            {
                                DataType = "Bool";
                                OperationValue = Rule.OperationValueBoolean;
                            }
                            else if (Rule.OperationValueDateTime != null)
                            {
                                DataType = "DateTime";
                                OperationValue = Rule.OperationValueDateTime;
                            }
                            else if (Rule.OperationValueDouble != null)
                            {
                                DataType = "Double";
                                OperationValue = Rule.OperationValueDouble;
                            }
                            else if (!string.IsNullOrEmpty(Rule.OperationValueString))
                            {
                                DataType = "String";
                                OperationValue = Rule.OperationValueString;
                            }

                            if (MainTableName.ToLower() == SDTableName.ToLower())
                            {
                                object InsertedValue = new object();

                                if (Rule.attributeActivatedId != null)
                                {
                                    string AttributeName = Rule.attributeActivated.Key;

                                    object TestValue = AddInstallationViewModel.GetType().GetProperties()
                                        .FirstOrDefault(x => x.Name.ToLower() == AttributeName.ToLower()).GetValue(AddInstallationViewModel, null);

                                    if (TestValue == null)
                                        break;

                                    if (Rule.OperationValueBoolean != null)
                                        InsertedValue = bool.Parse(TestValue.ToString());

                                    else if (Rule.OperationValueDateTime != null)
                                        InsertedValue = DateTime.Parse(TestValue.ToString());

                                    else if (Rule.OperationValueDouble != null)
                                        InsertedValue = double.Parse(TestValue.ToString());

                                    else if (!string.IsNullOrEmpty(Rule.OperationValueString))
                                        InsertedValue = TestValue.ToString();
                                }
                                else if (Rule.dynamicAttId != null)
                                {
                                    AddDynamicAttInstValueViewModel DynamicObject = AddInstallationViewModel.TLIdynamicAttInstValue
                                        .FirstOrDefault(x => x.DynamicAttId == Rule.dynamicAttId.Value);

                                    if (DynamicObject == null)
                                        break;

                                    if (DynamicObject.ValueBoolean != null)
                                        InsertedValue = DynamicObject.ValueBoolean;

                                    else if (DynamicObject.ValueDateTime != null)
                                        InsertedValue = DynamicObject.ValueDateTime;

                                    else if (DynamicObject.ValueDouble != null)
                                        InsertedValue = DynamicObject.ValueDouble;

                                    else if (!string.IsNullOrEmpty(DynamicObject.ValueString))
                                        InsertedValue = DynamicObject.ValueString;
                                }

                                if (Operation == "==" ? InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower() :
                                    Operation == "!=" ? InsertedValue.ToString().ToLower() != OperationValue.ToString().ToLower() :
                                    Operation == ">" ? Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == 1 :
                                    Operation == ">=" ? (Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == 1 ||
                                        InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower()) :
                                    Operation == "<" ? Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == -1 :
                                    Operation == "<=" ? (Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == -1 ||
                                        InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower()) : false)
                                {
                                    CheckIfSuccessAllRules++;
                                }
                            }
                            else
                            {
                                List<object> TableRecords = new List<object>();
                                if (Rule.attributeActivatedId != null)
                                {
                                    string AttributeName = Rule.attributeActivated.Key;

                                    if (OperationValue != null)
                                        TableRecords = _mapper.Map<List<object>>(db.GetType().GetProperty(SDTableName)
                                            .GetValue(db, null)).Where(x => x.GetType().GetProperty(AttributeName).GetValue(x, null) != null ? (Operation == ">" ?
                                                (DataType.ToLower() == "DateTime".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 : false) :
                                            Operation == ">=" ?
                                                (DataType.ToLower() == "DateTime".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 ||
                                                        x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 ||
                                                        x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) : false) :
                                            Operation == "<" ?
                                                (DataType.ToLower() == "DateTime".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 : false) :
                                            Operation == "<=" ?
                                                (DataType.ToLower() == "DateTime".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 ||
                                                        x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 ||
                                                        x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) : false) :
                                            Operation == "==" ?
                                                x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower() :
                                            Operation == "!=" ?
                                                x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() != OperationValue.ToString().ToLower() : false) : false).ToList();

                                }
                                else if (Rule.dynamicAttId != null)
                                {
                                    List<int> DynamicAttValuesInventoryIds = new List<int>();

                                    if (!DynamicAttribute.LibraryAtt)
                                    {
                                        DynamicAttValuesInventoryIds = _unitOfWork.DynamicAttInstValueRepository
                                            .GetWhere(x => (x.DynamicAttId == Rule.dynamicAttId.Value && !x.disable) &&
                                                (Operation == "==" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() == Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() == Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble == Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() == Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == "!=" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() != Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() != Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble != Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() != Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == ">" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime > Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble > Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == ">=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime >= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble >= Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime < Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble < Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime <= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble <= Rule.OperationValueDouble : false)) : false)

                                                ).Select(x => x.InventoryId).ToList();
                                    }
                                    else
                                    {
                                        DynamicAttValuesInventoryIds = _unitOfWork.DynamicAttLibRepository
                                            .GetWhere(x => (x.DynamicAttId == Rule.dynamicAttId && !x.disable) &&
                                                (Operation == "==" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() == Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() == Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble == Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() == Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == "!=" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() != Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() != Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble != Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() != Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == ">" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime > Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble > Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == ">=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime >= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble >= Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime < Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble < Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime <= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble <= Rule.OperationValueDouble : false)) : false)

                                                ).Select(x => x.InventoryId).ToList();
                                    }
                                    if (DynamicAttValuesInventoryIds != null ? DynamicAttValuesInventoryIds.Count() != 0 : false)
                                    {
                                        TableRecords = _mapper.Map<List<object>>(db.GetType()
                                            .GetProperty(SDTableName).GetValue(db, null))
                                                .Where(x => DynamicAttValuesInventoryIds.Contains(Convert.ToInt32(x.GetType().GetProperty("Id").GetValue(x, null)))).ToList();
                                    }
                                }

                                AddInstRuleViewModel AddInstRuleViewModel = new AddInstRuleViewModel();
                                if (Rule.dynamicAttId != null)
                                {
                                    AddInstRuleViewModel = new AddInstRuleViewModel
                                    {
                                        dynamicAttId = Rule.dynamicAttId,
                                        IsDynamic = true,
                                        OperationId = Rule.OperationId,
                                        OperationValueBoolean = Rule.OperationValueBoolean,
                                        OperationValueDateTime = Rule.OperationValueDateTime,
                                        OperationValueDouble = Rule.OperationValueDouble,
                                        OperationValueString = Rule.OperationValueString,
                                        TableName = Rule.tablesNames.TableName
                                    };
                                }
                                else if (Rule.attributeActivatedId != null)
                                {
                                    AddInstRuleViewModel = new AddInstRuleViewModel
                                    {
                                        attributeActivatedId = Rule.attributeActivatedId,
                                        IsDynamic = false,
                                        OperationId = Rule.OperationId,
                                        OperationValueBoolean = Rule.OperationValueBoolean,
                                        OperationValueDateTime = Rule.OperationValueDateTime,
                                        OperationValueDouble = Rule.OperationValueDouble,
                                        OperationValueString = Rule.OperationValueString,
                                        TableName = Rule.tablesNames.TableName
                                    };
                                }
                                List<object> RecordsIds = _mapper.Map<List<object>>(GetRecordsIds(MainTableName, AddInstRuleViewModel));

                                PathToCheckDependencyValidation Item = (PathToCheckDependencyValidation)Enum.Parse(typeof(PathToCheckDependencyValidation),
                                    (MainTableName + SDTableName + "Goal").ToLower());

                                List<string> Path = GetEnumDescription(Item).Split(" ").ToList();

                                object CheckId = new object();

                                if (Path.Count() > 1)
                                {
                                    object CivilLoads = AddInstallationViewModel.GetType().GetProperty(Path[0])
                                        .GetValue(AddInstallationViewModel, null);

                                    CheckId = CivilLoads.GetType().GetProperty(Path[1]).GetValue(CivilLoads, null) != null ?
                                        (int)CivilLoads.GetType().GetProperty(Path[1]).GetValue(CivilLoads, null) : new object();
                                }
                                else if (Path.Count() == 1 && Path[0].ToLower() == "sitecode")
                                {
                                    CheckId = SiteCode;
                                }
                                else if (Path.Count() == 1)
                                {
                                    if (AddInstallationViewModel.GetType().GetProperty(Path[0]).GetValue(AddInstallationViewModel, null) != null)
                                        CheckId = (int)AddInstallationViewModel.GetType().GetProperty(Path[0])
                                            .GetValue(AddInstallationViewModel, null);
                                }

                                if (RecordsIds.Exists(x => x.ToString().ToLower() == CheckId.ToString().ToLower()))
                                {
                                    CheckIfSuccessAllRules++;
                                }
                            }
                        }

                        if (Rules.Count() == CheckIfSuccessAllRules)
                        {
                            string DynamicAttributeName = "";
                            int DynamicAttributeId = _unitOfWork.DependencyRowRepository
                                .GetIncludeWhereFirst(x => x.RowId == RowId, x => x.Dependency).Dependency.DynamicAttId.Value;

                            AddDynamicAttInstValueViewModel InputDynamicAttribute = AddInstallationViewModel.TLIdynamicAttInstValue
                                .FirstOrDefault(x => x.DynamicAttId == DynamicAttributeId);

                            if (InputDynamicAttribute == null)
                            {
                                DynamicAttributeName = _unitOfWork.DynamicAttRepository
                                    .GetWhereFirst(x => x.Id == DynamicAttributeId).Key;

                                return $"({DynamicAttributeName}) value can't be null";
                            }
                            else
                            {
                                string DependencyValidationOperation = DynamicAttributeMainDependency.Operation.Name;

                                object DependencyValidationValue = new object();

                                if (DynamicAttributeMainDependency.ValueBoolean != null)
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueBoolean;

                                else if (DynamicAttributeMainDependency.ValueDateTime != null)
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueDateTime;

                                else if (DynamicAttributeMainDependency.ValueDouble != null)
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueDouble;

                                else if (!string.IsNullOrEmpty(DynamicAttributeMainDependency.ValueString))
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueString;

                                object InputDynamicValue = new object();

                                if (InputDynamicAttribute.ValueBoolean != null)
                                    InputDynamicValue = InputDynamicAttribute.ValueBoolean;

                                else if (InputDynamicAttribute.ValueDateTime != null)
                                    InputDynamicValue = InputDynamicAttribute.ValueDateTime;

                                else if (InputDynamicAttribute.ValueDouble != null)
                                    InputDynamicValue = InputDynamicAttribute.ValueDouble;

                                else if (!string.IsNullOrEmpty(InputDynamicAttribute.ValueString))
                                    InputDynamicValue = InputDynamicAttribute.ValueString;

                                if (!(DependencyValidationOperation == "==" ? InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower() :
                                    DependencyValidationOperation == "!=" ? InputDynamicValue.ToString().ToLower() != DependencyValidationValue.ToString().ToLower() :
                                    DependencyValidationOperation == ">" ? Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == 1 :
                                    DependencyValidationOperation == ">=" ? (Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == 1 ||
                                        InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower()) :
                                    DependencyValidationOperation == "<" ? Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == -1 :
                                    DependencyValidationOperation == "<=" ? (Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == -1 ||
                                        InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower()) : false))
                                {
                                    DynamicAttributeName = _unitOfWork.DynamicAttRepository
                                        .GetWhereFirst(x => x.Id == DynamicAttributeId).Key;

                                    string ReturnOperation = (DependencyValidationOperation == "==" ? "equal to" :
                                        (DependencyValidationOperation == "!=" ? "not equal to" :
                                        (DependencyValidationOperation == ">" ? "bigger than" :
                                        (DependencyValidationOperation == ">=" ? "bigger than or equal to" :
                                        (DependencyValidationOperation == "<" ? "smaller than" :
                                        (DependencyValidationOperation == "<=" ? "smaller than or equal to" : ""))))));

                                    return $"({DynamicAttributeName}) value must be {ReturnOperation} {DependencyValidationValue}";
                                }
                            }
                        }
                    }
                }
            }
            else if (RadioType.ToLower() == TablesNames.TLIradioOther.ToString().ToLower())
            {
                string MainTableName = TablesNames.TLIradioOther.ToString();
               AddRadioOtherIntegration AddInstallationViewModel = _mapper.Map<AddRadioOtherIntegration>(Input);

                List<DynamicAttViewModel> DynamicAttributes = _mapper.Map<List<DynamicAttViewModel>>(_unitOfWork.DynamicAttRepository
                    .GetIncludeWhere(x => x.tablesNames.TableName.ToLower() == MainTableName.ToLower() && !x.disable
                        , x => x.tablesNames).ToList());

                foreach (DynamicAttViewModel DynamicAttribute in DynamicAttributes)
                {
                    TLIdependency DynamicAttributeMainDependency = _unitOfWork.DependencieRepository.GetIncludeWhereFirst(x => x.DynamicAttId == DynamicAttribute.Id &&
                        (x.ValueBoolean != null || x.ValueDateTime != null || x.ValueDouble != null || !string.IsNullOrEmpty(x.ValueString)),
                            x => x.Operation);

                    if (DynamicAttributeMainDependency == null)
                        continue;

                    List<int> DependencyRows = _unitOfWork.DependencyRowRepository.GetWhere(x => x.DependencyId == DynamicAttributeMainDependency.Id)
                        .Select(x => x.RowId.Value).Distinct().ToList();

                    foreach (int RowId in DependencyRows)
                    {
                        List<TLIrule> Rules = _unitOfWork.RowRuleRepository.GetIncludeWhere(x => x.RowId == RowId, x => x.Rule, x => x.Rule.tablesNames,
                            x => x.Rule.Operation, x => x.Rule.dynamicAtt, x => x.Rule.attributeActivated).Select(x => x.Rule).ToList();

                        int CheckIfSuccessAllRules = 0;

                        foreach (TLIrule Rule in Rules)
                        {
                            string SDTableName = Rule.tablesNames.TableName;

                            string DataType = "";

                            string Operation = Rule.Operation.Name;
                            object OperationValue = new object();

                            if (Rule.OperationValueBoolean != null)
                            {
                                DataType = "Bool";
                                OperationValue = Rule.OperationValueBoolean;
                            }
                            else if (Rule.OperationValueDateTime != null)
                            {
                                DataType = "DateTime";
                                OperationValue = Rule.OperationValueDateTime;
                            }
                            else if (Rule.OperationValueDouble != null)
                            {
                                DataType = "Double";
                                OperationValue = Rule.OperationValueDouble;
                            }
                            else if (!string.IsNullOrEmpty(Rule.OperationValueString))
                            {
                                DataType = "String";
                                OperationValue = Rule.OperationValueString;
                            }

                            if (MainTableName.ToLower() == SDTableName.ToLower())
                            {
                                object InsertedValue = new object();

                                if (Rule.attributeActivatedId != null)
                                {
                                    string AttributeName = Rule.attributeActivated.Key;

                                    object TestValue = AddInstallationViewModel.GetType().GetProperties()
                                        .FirstOrDefault(x => x.Name.ToLower() == AttributeName.ToLower()).GetValue(AddInstallationViewModel, null);

                                    if (TestValue == null)
                                        break;

                                    if (Rule.OperationValueBoolean != null)
                                        InsertedValue = bool.Parse(TestValue.ToString());

                                    else if (Rule.OperationValueDateTime != null)
                                        InsertedValue = DateTime.Parse(TestValue.ToString());

                                    else if (Rule.OperationValueDouble != null)
                                        InsertedValue = double.Parse(TestValue.ToString());

                                    else if (!string.IsNullOrEmpty(Rule.OperationValueString))
                                        InsertedValue = TestValue.ToString();
                                }
                                else if (Rule.dynamicAttId != null)
                                {
                                    AddDynamicAttInstValueViewModel DynamicObject = AddInstallationViewModel.TLIdynamicAttInstValue
                                        .FirstOrDefault(x => x.DynamicAttId == Rule.dynamicAttId.Value);

                                    if (DynamicObject == null)
                                        break;

                                    if (DynamicObject.ValueBoolean != null)
                                        InsertedValue = DynamicObject.ValueBoolean;

                                    else if (DynamicObject.ValueDateTime != null)
                                        InsertedValue = DynamicObject.ValueDateTime;

                                    else if (DynamicObject.ValueDouble != null)
                                        InsertedValue = DynamicObject.ValueDouble;

                                    else if (!string.IsNullOrEmpty(DynamicObject.ValueString))
                                        InsertedValue = DynamicObject.ValueString;
                                }

                                if (Operation == "==" ? InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower() :
                                    Operation == "!=" ? InsertedValue.ToString().ToLower() != OperationValue.ToString().ToLower() :
                                    Operation == ">" ? Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == 1 :
                                    Operation == ">=" ? (Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == 1 ||
                                        InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower()) :
                                    Operation == "<" ? Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == -1 :
                                    Operation == "<=" ? (Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == -1 ||
                                        InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower()) : false)
                                {
                                    CheckIfSuccessAllRules++;
                                }
                            }
                            else
                            {
                                List<object> TableRecords = new List<object>();
                                if (Rule.attributeActivatedId != null)
                                {
                                    string AttributeName = Rule.attributeActivated.Key;

                                    if (OperationValue != null)
                                        TableRecords = _mapper.Map<List<object>>(db.GetType().GetProperty(SDTableName)
                                            .GetValue(db, null)).Where(x => x.GetType().GetProperty(AttributeName).GetValue(x, null) != null ? (Operation == ">" ?
                                                (DataType.ToLower() == "DateTime".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 : false) :
                                            Operation == ">=" ?
                                                (DataType.ToLower() == "DateTime".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 ||
                                                        x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 ||
                                                        x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) : false) :
                                            Operation == "<" ?
                                                (DataType.ToLower() == "DateTime".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 : false) :
                                            Operation == "<=" ?
                                                (DataType.ToLower() == "DateTime".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 ||
                                                        x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 ||
                                                        x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) : false) :
                                            Operation == "==" ?
                                                x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower() :
                                            Operation == "!=" ?
                                                x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() != OperationValue.ToString().ToLower() : false) : false).ToList();

                                }
                                else if (Rule.dynamicAttId != null)
                                {
                                    List<int> DynamicAttValuesInventoryIds = new List<int>();

                                    if (!DynamicAttribute.LibraryAtt)
                                    {
                                        DynamicAttValuesInventoryIds = _unitOfWork.DynamicAttInstValueRepository
                                            .GetWhere(x => (x.DynamicAttId == Rule.dynamicAttId.Value && !x.disable) &&
                                                (Operation == "==" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() == Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() == Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble == Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() == Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == "!=" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() != Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() != Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble != Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() != Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == ">" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime > Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble > Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == ">=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime >= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble >= Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime < Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble < Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime <= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble <= Rule.OperationValueDouble : false)) : false)

                                                ).Select(x => x.InventoryId).ToList();
                                    }
                                    else
                                    {
                                        DynamicAttValuesInventoryIds = _unitOfWork.DynamicAttLibRepository
                                            .GetWhere(x => (x.DynamicAttId == Rule.dynamicAttId && !x.disable) &&
                                                (Operation == "==" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() == Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() == Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble == Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() == Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == "!=" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() != Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() != Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble != Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() != Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == ">" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime > Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble > Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == ">=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime >= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble >= Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime < Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble < Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime <= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble <= Rule.OperationValueDouble : false)) : false)

                                                ).Select(x => x.InventoryId).ToList();
                                    }
                                    if (DynamicAttValuesInventoryIds != null ? DynamicAttValuesInventoryIds.Count() != 0 : false)
                                    {
                                        TableRecords = _mapper.Map<List<object>>(db.GetType()
                                            .GetProperty(SDTableName).GetValue(db, null))
                                                .Where(x => DynamicAttValuesInventoryIds.Contains(Convert.ToInt32(x.GetType().GetProperty("Id").GetValue(x, null)))).ToList();
                                    }
                                }

                                AddInstRuleViewModel AddInstRuleViewModel = new AddInstRuleViewModel();
                                if (Rule.dynamicAttId != null)
                                {
                                    AddInstRuleViewModel = new AddInstRuleViewModel
                                    {
                                        dynamicAttId = Rule.dynamicAttId,
                                        IsDynamic = true,
                                        OperationId = Rule.OperationId,
                                        OperationValueBoolean = Rule.OperationValueBoolean,
                                        OperationValueDateTime = Rule.OperationValueDateTime,
                                        OperationValueDouble = Rule.OperationValueDouble,
                                        OperationValueString = Rule.OperationValueString,
                                        TableName = Rule.tablesNames.TableName
                                    };
                                }
                                else if (Rule.attributeActivatedId != null)
                                {
                                    AddInstRuleViewModel = new AddInstRuleViewModel
                                    {
                                        attributeActivatedId = Rule.attributeActivatedId,
                                        IsDynamic = false,
                                        OperationId = Rule.OperationId,
                                        OperationValueBoolean = Rule.OperationValueBoolean,
                                        OperationValueDateTime = Rule.OperationValueDateTime,
                                        OperationValueDouble = Rule.OperationValueDouble,
                                        OperationValueString = Rule.OperationValueString,
                                        TableName = Rule.tablesNames.TableName
                                    };
                                }
                                List<object> RecordsIds = _mapper.Map<List<object>>(GetRecordsIds(MainTableName, AddInstRuleViewModel));

                                PathToCheckDependencyValidation Item = (PathToCheckDependencyValidation)Enum.Parse(typeof(PathToCheckDependencyValidation),
                                    MainTableName + SDTableName + "Goal");

                                List<string> Path = GetEnumDescription(Item).Split(" ").ToList();

                                object CheckId = new object();

                                if (Path.Count() > 1)
                                {
                                    object CivilLoads = AddInstallationViewModel.GetType().GetProperty(Path[0])
                                        .GetValue(AddInstallationViewModel, null);

                                    CheckId = CivilLoads.GetType().GetProperty(Path[1]).GetValue(CivilLoads, null) != null ?
                                        (int)CivilLoads.GetType().GetProperty(Path[1]).GetValue(CivilLoads, null) : new object();
                                }
                                else if (Path.Count() == 1 && Path[0].ToLower() == "sitecode")
                                {
                                    CheckId = SiteCode;
                                }
                                else if (Path.Count() == 1)
                                {
                                    if (AddInstallationViewModel.GetType().GetProperty(Path[0]).GetValue(AddInstallationViewModel, null) != null)
                                        CheckId = (int)AddInstallationViewModel.GetType().GetProperty(Path[0])
                                            .GetValue(AddInstallationViewModel, null);
                                }

                                if (RecordsIds.Exists(x => x.ToString().ToLower() == CheckId.ToString().ToLower()))
                                {
                                    CheckIfSuccessAllRules++;
                                }
                            }
                        }

                        if (Rules.Count() == CheckIfSuccessAllRules)
                        {
                            string DynamicAttributeName = "";
                            int DynamicAttributeId = _unitOfWork.DependencyRowRepository
                                .GetIncludeWhereFirst(x => x.RowId == RowId, x => x.Dependency).Dependency.DynamicAttId.Value;

                            AddDynamicAttInstValueViewModel InputDynamicAttribute = AddInstallationViewModel.TLIdynamicAttInstValue
                                .FirstOrDefault(x => x.DynamicAttId == DynamicAttributeId);

                            if (InputDynamicAttribute == null)
                            {
                                DynamicAttributeName = _unitOfWork.DynamicAttRepository
                                    .GetWhereFirst(x => x.Id == DynamicAttributeId).Key;

                                return $"({DynamicAttributeName}) value can't be null";
                            }
                            else
                            {
                                string DependencyValidationOperation = DynamicAttributeMainDependency.Operation.Name;

                                object DependencyValidationValue = new object();

                                if (DynamicAttributeMainDependency.ValueBoolean != null)
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueBoolean;

                                else if (DynamicAttributeMainDependency.ValueDateTime != null)
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueDateTime;

                                else if (DynamicAttributeMainDependency.ValueDouble != null)
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueDouble;

                                else if (!string.IsNullOrEmpty(DynamicAttributeMainDependency.ValueString))
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueString;

                                object InputDynamicValue = new object();

                                if (InputDynamicAttribute.ValueBoolean != null)
                                    InputDynamicValue = InputDynamicAttribute.ValueBoolean;

                                else if (InputDynamicAttribute.ValueDateTime != null)
                                    InputDynamicValue = InputDynamicAttribute.ValueDateTime;

                                else if (InputDynamicAttribute.ValueDouble != null)
                                    InputDynamicValue = InputDynamicAttribute.ValueDouble;

                                else if (!string.IsNullOrEmpty(InputDynamicAttribute.ValueString))
                                    InputDynamicValue = InputDynamicAttribute.ValueString;

                                if (!(DependencyValidationOperation == "==" ? InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower() :
                                    DependencyValidationOperation == "!=" ? InputDynamicValue.ToString().ToLower() != DependencyValidationValue.ToString().ToLower() :
                                    DependencyValidationOperation == ">" ? Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == 1 :
                                    DependencyValidationOperation == ">=" ? (Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == 1 ||
                                        InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower()) :
                                    DependencyValidationOperation == "<" ? Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == -1 :
                                    DependencyValidationOperation == "<=" ? (Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == -1 ||
                                        InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower()) : false))
                                {
                                    DynamicAttributeName = _unitOfWork.DynamicAttRepository
                                        .GetWhereFirst(x => x.Id == DynamicAttributeId).Key;

                                    string ReturnOperation = (DependencyValidationOperation == "==" ? "equal to" :
                                        (DependencyValidationOperation == "!=" ? "not equal to" :
                                        (DependencyValidationOperation == ">" ? "bigger than" :
                                        (DependencyValidationOperation == ">=" ? "bigger than or equal to" :
                                        (DependencyValidationOperation == "<" ? "smaller than" :
                                        (DependencyValidationOperation == "<=" ? "smaller than or equal to" : ""))))));

                                    return $"({DynamicAttributeName}) value must be {ReturnOperation} {DependencyValidationValue}";
                                }
                            }
                        }
                    }
                }
            }
            return string.Empty;
        }
        public Response<ObjectInstAtts> AddRadioInstallation(object RadioInstallationViewModel, string TableName, string SiteCode, string ConnectionString)
        {
            using (var con = new OracleConnection(ConnectionString))
            {
                con.Open();
                using (var tran = con.BeginTransaction())
                {
                    using (TransactionScope transaction = new TransactionScope())
                    {
                        try
                        {
                            string ErrorMessage = string.Empty;
                            var TableNameEntity = _unitOfWork.TablesNamesRepository.GetWhereFirst(l => l.TableName == TableName);
                            if (LoadSubType.TLIradioAntenna.ToString() == TableName)
                            {
                                AddRadioAntennaIntegration RadioAntennaModel = _mapper.Map<AddRadioAntennaIntegration>(RadioInstallationViewModel);
                                TLIradioAntenna RadioAntennaEntity = _mapper.Map<TLIradioAntenna>(RadioAntennaModel);
                                var Message = _unitOfWork.CivilWithLegsRepository.CheckAvailableSpaceOnCivil(RadioAntennaModel.TLIcivilLoads.allCivilInstId).Message;
                                if (Message != "Success")
                                {
                                    return new Response<ObjectInstAtts>(true, null, null, Message, (int)Helpers.Constants.ApiReturnCode.fail);
                                }
                                var radioAntennaLibrary = db.TLIradioAntennaLibrary.Where(x => x.Id == RadioAntennaModel.radioAntennaLibraryId).FirstOrDefault();
                                if (RadioAntennaEntity.CenterHigh == 0 || RadioAntennaEntity.CenterHigh == null)
                                {
                                    RadioAntennaEntity.CenterHigh = RadioAntennaEntity.HBA + radioAntennaLibrary.Length / 2;
                                }
                                var message = _unitOfWork.CivilWithLegsRepository.CheckloadsOnCivil(RadioAntennaModel.TLIcivilLoads.allCivilInstId, 0, ((float)RadioAntennaEntity.Azimuth), RadioAntennaEntity.CenterHigh).Message;
                                if (message != "Success")
                                {
                                    return new Response<ObjectInstAtts>(true, null, null, message, (int)Helpers.Constants.ApiReturnCode.fail);
                                }

                                if (RadioAntennaModel.TLIcivilLoads.ReservedSpace == true && RadioAntennaEntity.SpaceInstallation == 0)
                                {
                                    RadioAntennaEntity.SpaceInstallation = radioAntennaLibrary.SpaceLibrary;

                                    if (radioAntennaLibrary.SpaceLibrary == 0)
                                    {
                                        RadioAntennaEntity.SpaceInstallation = radioAntennaLibrary.Length * radioAntennaLibrary.Width;
                                    }
                                }
                                if (RadioAntennaModel.TLIcivilLoads.ReservedSpace == true && (RadioAntennaModel.TLIcivilLoads.sideArmId == null || RadioAntennaModel.TLIcivilLoads.sideArmId == 0))
                                {
                                    RadioAntennaEntity.EquivalentSpace = _unitOfWork.CivilWithLegsRepository.Checkspaceload(RadioAntennaModel.TLIcivilLoads.allCivilInstId, TableName, RadioAntennaEntity.SpaceInstallation, RadioAntennaEntity.CenterHigh, RadioAntennaModel.radioAntennaLibraryId, RadioAntennaModel.HBA).Data;
                                }
                                bool test = true;

                                string CheckDependencyValidation = CheckDependencyValidationForRadioTypesIns(RadioInstallationViewModel, TableName, SiteCode);

                                if (!string.IsNullOrEmpty(CheckDependencyValidation))
                                    return new Response<ObjectInstAtts>(true, null, null, CheckDependencyValidation, (int)ApiReturnCode.fail);

                                string CheckGeneralValidation = CheckGeneralValidationFunctionIns(RadioAntennaModel.TLIdynamicAttInstValue, TableName);

                                if (!string.IsNullOrEmpty(CheckGeneralValidation))
                                    return new Response<ObjectInstAtts>(true, null, null, CheckGeneralValidation, (int)ApiReturnCode.fail);

                                test = true;
                                if (test == true)
                                {
                                    //TLIcivilLoads CheckName = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => !x.Dismantle && (x.allLoadInstId != null ?
                                    //    !x.allLoadInst.Draft && (x.allLoadInst.radioAntennaId != null ? x.allLoadInst.radioAntenna.Name.ToLower() == RadioAntennaEntity.Name.ToLower() : false) : false),
                                    //        x => x.allLoadInst, x => x.allLoadInst.radioAntenna);
                                    //if (CheckName != null)
                                    //    return new Response<ObjectInstAtts>(true, null, null, $"This name {RadioAntennaEntity.Name} is already exists", (int)ApiReturnCode.fail);

                                    var CheckSerialNumber = _unitOfWork.RadioAntennaRepository.GetWhereFirst(x => x.SerialNumber == RadioAntennaEntity.SerialNumber);
                                    if (CheckSerialNumber != null)
                                    {
                                        return new Response<ObjectInstAtts>(true, null, null, $"The serial number {RadioAntennaEntity.SerialNumber} is already exists", (int)ApiReturnCode.fail);
                                    }

                                    TLIsideArm SideArmEntity = new TLIsideArm();

                                    if (RadioAntennaModel.TLIcivilLoads.sideArmId != null)
                                    {
                                        SideArmEntity = _unitOfWork.SideArmRepository.GetByID((int)RadioAntennaModel.TLIcivilLoads.sideArmId);
                                        RadioAntennaEntity.Name = SideArmEntity.Name + " " + RadioAntennaModel.HeightBase + " " + RadioAntennaModel.Azimuth;
                                    }
                                    else
                                    {
                                        RadioAntennaEntity.Name = RadioAntennaModel.HeightBase + " " + RadioAntennaModel.Azimuth;
                                    }
                                    TLIcivilLoads CheckName = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => !x.Dismantle && (x.allLoadInstId != null ?
                                        !x.allLoadInst.Draft && (x.allLoadInst.radioAntennaId != null ? x.allLoadInst.radioAntenna.Name.ToLower() == RadioAntennaEntity.Name.ToLower() : false) : false) &&
                                        x.SiteCode.ToLower() == SiteCode.ToLower(),
                                            x => x.allLoadInst, x => x.allLoadInst.radioAntenna);
                                    if (CheckName != null)
                                        return new Response<ObjectInstAtts>(true, null, null, $"This name {RadioAntennaEntity.Name} is already exists", (int)ApiReturnCode.fail);


                                    TLIinstallationPlace InstallationPlaceEntity = null;
                                    if (RadioAntennaModel.installationPlaceId != null)
                                    {
                                        InstallationPlaceEntity = _unitOfWork.InstallationPlaceRepository.GetByID((int)RadioAntennaModel.installationPlaceId);
                                        if (InstallationPlaceEntity.Name.ToLower() == "direct")
                                        {
                                            if (RadioAntennaModel.TLIcivilLoads.allCivilInstId == 0 || RadioAntennaModel.TLIcivilLoads.sideArmId != null)
                                            {
                                                return new Response<ObjectInstAtts>(true, null, null, "The antenna should be on civil only", (int)ApiReturnCode.fail);
                                            }
                                        }
                                        else if (InstallationPlaceEntity.Name.ToLower() == "sidearm")
                                        {
                                            if (RadioAntennaModel.TLIcivilLoads.allCivilInstId == 0 || RadioAntennaModel.TLIcivilLoads.sideArmId == null)
                                            {
                                                return new Response<ObjectInstAtts>(true, null, null, "The antenna should be on civil by sidearm", (int)ApiReturnCode.fail);
                                            }
                                        }
                                    }
                                    _unitOfWork.RadioAntennaRepository.AddWithHistory(Helpers.LogFilterAttribute.UserId, RadioAntennaEntity);
                                    _unitOfWork.SaveChanges();
                                    int Id = _unitOfWork.AllLoadInstRepository.AddAllLoadInst(LoadSubType.TLIradioAntenna.ToString(), RadioAntennaEntity.Id);
                                    _unitOfWork.CivilLoadsRepository.AddCivilLoad(RadioAntennaModel.TLIcivilLoads, Id, SiteCode);
                                    if (RadioAntennaModel.TLIdynamicAttInstValue.Count > 0)
                                    {
                                        foreach (var DynamicAttInstValue in RadioAntennaModel.TLIdynamicAttInstValue)
                                        {
                                            _unitOfWork.DynamicAttInstValueRepository.AddDynamicInstAtts(DynamicAttInstValue, TableNameEntity.Id, RadioAntennaEntity.Id);
                                        }

                                    }
                                    //AddHistory(RadioAntennaModel.ticketAtt, Id, "Insert");     
                                }
                                else
                                {
                                    return new Response<ObjectInstAtts>(true, null, null, ErrorMessage, (int)ApiReturnCode.fail);
                                }
                            }
                            else if (LoadSubType.TLIradioRRU.ToString() == TableName)
                            {
                                var RadioRRuModel = _mapper.Map<AddRadioRRUIntegration>(RadioInstallationViewModel);
                                var RadioRRuEntity = _mapper.Map<TLIRadioRRU>(RadioRRuModel);
                                var Message = _unitOfWork.CivilWithLegsRepository.CheckAvailableSpaceOnCivil(RadioRRuModel.TLIcivilLoads.allCivilInstId).Message;
                                if (Message != "Success")
                                {
                                    return new Response<ObjectInstAtts>(true, null, null, Message, (int)Helpers.Constants.ApiReturnCode.fail);
                                }
                                var radioRRULibrary = db.TLIradioRRULibrary.Where(x => x.Id == RadioRRuModel.radioRRULibraryId).FirstOrDefault();
                                if (RadioRRuEntity.CenterHigh == 0 || RadioRRuEntity.CenterHigh == null)
                                {
                                    RadioRRuEntity.CenterHigh = RadioRRuEntity.HBA + radioRRULibrary.Length / 2;
                                }
                                var message = _unitOfWork.CivilWithLegsRepository.CheckloadsOnCivil(RadioRRuModel.TLIcivilLoads.allCivilInstId, 0, RadioRRuEntity.Azimuth, RadioRRuEntity.CenterHigh).Message;
                                if (message != "Success")
                                {
                                    return new Response<ObjectInstAtts>(true, null, null, message, (int)Helpers.Constants.ApiReturnCode.fail);
                                }

                                if (RadioRRuModel.TLIcivilLoads.ReservedSpace == true && RadioRRuEntity.SpaceInstallation == 0)
                                {
                                    RadioRRuEntity.SpaceInstallation = radioRRULibrary.SpaceLibrary;

                                    if (radioRRULibrary.SpaceLibrary == 0)
                                    {
                                        RadioRRuEntity.SpaceInstallation = radioRRULibrary.Length * radioRRULibrary.Width;
                                    }
                                }
                                if (RadioRRuModel.TLIcivilLoads.ReservedSpace == true && (RadioRRuModel.TLIcivilLoads.sideArmId == null || RadioRRuModel.TLIcivilLoads.sideArmId == 0))
                                {
                                    RadioRRuEntity.EquivalentSpace = _unitOfWork.CivilWithLegsRepository.Checkspaceload(RadioRRuModel.TLIcivilLoads.allCivilInstId, TableName, RadioRRuEntity.SpaceInstallation, RadioRRuEntity.CenterHigh, RadioRRuModel.radioRRULibraryId, RadioRRuModel.HBA).Data;
                                }
                                bool test = true;
                                string CheckDependencyValidation = CheckDependencyValidationForRadioTypesIns(RadioInstallationViewModel, TableName, SiteCode);

                                if (!string.IsNullOrEmpty(CheckDependencyValidation))
                                    return new Response<ObjectInstAtts>(true, null, null, CheckDependencyValidation, (int)ApiReturnCode.fail);

                                if(RadioRRuModel.TLIdynamicAttInstValue.Count!=0)
                                {
                                    string CheckGeneralValidation = CheckGeneralValidationFunctionIns(RadioRRuModel.TLIdynamicAttInstValue, TableName);

                                    if (!string.IsNullOrEmpty(CheckGeneralValidation))
                                        return new Response<ObjectInstAtts>(true, null, null, CheckGeneralValidation, (int)ApiReturnCode.fail);
                                }
                               


                                if (test == true)
                                {
                                    TLIcivilLoads CheckName = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => !x.Dismantle && (x.allLoadInstId != null ?
                                        !x.allLoadInst.Draft && (x.allLoadInst.radioRRUId != null ? x.allLoadInst.radioRRU.Name.ToLower() == RadioRRuEntity.Name.ToLower() : false) : false) &&
                                        x.SiteCode.ToLower() == SiteCode.ToLower(),
                                            x => x.allLoadInst, x => x.allLoadInst.radioRRU);
                                    if (CheckName != null)
                                        return new Response<ObjectInstAtts>(true, null, null, $"This name {RadioRRuEntity.Name} is already exists", (int)ApiReturnCode.fail);

                                    var CheckSerialNumber = _unitOfWork.RadioRRURepository.GetWhereFirst(x => x.SerialNumber == RadioRRuEntity.SerialNumber);
                                    if (CheckSerialNumber != null)
                                    {
                                        return new Response<ObjectInstAtts>(true, null, null, $"The serial number {RadioRRuEntity.SerialNumber} is already exists", (int)ApiReturnCode.fail);
                                    }

                                    //TLIsideArm SideArmEntity = new TLIsideArm();

                                    //if (RadioRRuModel.TLIcivilLoads.sideArmId != null)
                                    //{
                                    //    SideArmEntity = _unitOfWork.SideArmRepository.GetByID((int)RadioRRuModel.TLIcivilLoads.sideArmId);
                                    //    RadioRRuEntity.Name = SideArmEntity.Name + " " + RadioRRuModel.HeightBase + " " + RadioRRuModel.Azimuth;
                                    //}
                                    //else
                                    //{
                                    //    RadioRRuEntity.Name = RadioRRuModel.HeightBase + " " + RadioRRuModel.Azimuth;

                                    //}
                                    TLIinstallationPlace InstallationPlaceEntity = null;
                                    if (RadioRRuModel.installationPlaceId != null)
                                    {
                                        InstallationPlaceEntity = _unitOfWork.InstallationPlaceRepository.GetByID((int)RadioRRuModel.installationPlaceId);
                                        if (InstallationPlaceEntity.Name.ToLower() == "direct")
                                        {
                                            if (RadioRRuModel.TLIcivilLoads.allCivilInstId == 0 || RadioRRuModel.TLIcivilLoads.sideArmId != null)
                                            {
                                                return new Response<ObjectInstAtts>(true, null, null, "The RRU should be on civil only", (int)ApiReturnCode.fail);
                                            }
                                        }
                                        else if (InstallationPlaceEntity.Name.ToLower() == "sidearm")
                                        {
                                            if (RadioRRuModel.TLIcivilLoads.allCivilInstId == 0 || RadioRRuModel.TLIcivilLoads.sideArmId == null)
                                            {
                                                return new Response<ObjectInstAtts>(true, null, null, "The RRU should be on civil by sidearm", (int)ApiReturnCode.fail);
                                            }
                                        }
                                    }
                                    _unitOfWork.RadioRRURepository.AddWithHistory(Helpers.LogFilterAttribute.UserId, RadioRRuEntity);
                                    _unitOfWork.SaveChanges();
                                    int Id = _unitOfWork.AllLoadInstRepository.AddAllLoadInst(LoadSubType.TLIradioRRU.ToString(), RadioRRuEntity.Id);
                                    _unitOfWork.CivilLoadsRepository.AddCivilLoad(RadioRRuModel.TLIcivilLoads, Id, SiteCode);
                                    if (RadioRRuModel.TLIdynamicAttInstValue.Count > 0)
                                    {
                                        foreach (var DynamicAttInstValue in RadioRRuModel.TLIdynamicAttInstValue)
                                        {
                                            _unitOfWork.DynamicAttInstValueRepository.AddDynamicInstAtts(DynamicAttInstValue, TableNameEntity.Id, RadioRRuEntity.Id);
                                        }
                                    }
                                    //AddHistory(RadioRRuModel.ticketAtt, Id, "Insert");
                                    transaction.Complete();
                                    tran.Commit();
                                    return new Response<ObjectInstAtts>(true, null, null, ErrorMessage, (int)ApiReturnCode.success, RadioRRuEntity.Id);

                                }
                                else
                                {
                                    return new Response<ObjectInstAtts>(true, null, null, ErrorMessage, (int)ApiReturnCode.fail);
                                }

                            }
                            else if (LoadSubType.TLIradioOther.ToString() == TableName)
                            {
                                var RadioOtherModel = _mapper.Map<AddRadioOtherIntegration>(RadioInstallationViewModel);
                                var RadioOtherEntity = _mapper.Map<TLIradioOther>(RadioOtherModel);
                                var Message = _unitOfWork.CivilWithLegsRepository.CheckAvailableSpaceOnCivil(RadioOtherModel.TLIcivilLoads.allCivilInstId).Message;
                                if (Message != "Success")
                                {
                                    return new Response<ObjectInstAtts>(true, null, null, Message, (int)Helpers.Constants.ApiReturnCode.fail);
                                }
                                var radioOtherLibrary = db.TLIradioOtherLibrary.Where(x => x.Id == RadioOtherModel.radioOtherLibraryId).FirstOrDefault();
                                if (RadioOtherEntity.CenterHigh == 0 || RadioOtherEntity.CenterHigh == null)
                                {
                                    RadioOtherEntity.CenterHigh = RadioOtherEntity.HBA + radioOtherLibrary.Length / 2;
                                }
                                if (RadioOtherModel.TLIcivilLoads.ReservedSpace == true && RadioOtherEntity.Spaceinstallation == 0)
                                {
                                    RadioOtherEntity.Spaceinstallation = radioOtherLibrary.SpaceLibrary;

                                    if (radioOtherLibrary.SpaceLibrary == 0)
                                    {
                                        RadioOtherEntity.Spaceinstallation = radioOtherLibrary.Length * radioOtherLibrary.Width;
                                    }
                                }
                                if (RadioOtherModel.TLIcivilLoads.ReservedSpace == true && (RadioOtherModel.TLIcivilLoads.sideArmId == null || RadioOtherModel.TLIcivilLoads.sideArmId == 0))
                                {
                                    RadioOtherEntity.EquivalentSpace = _unitOfWork.CivilWithLegsRepository.Checkspaceload(RadioOtherModel.TLIcivilLoads.allCivilInstId, TableName, RadioOtherEntity.Spaceinstallation, RadioOtherEntity.CenterHigh, RadioOtherModel.radioOtherLibraryId, RadioOtherModel.HBA).Data;
                                }
                                bool test = true;
                                string CheckDependencyValidation = CheckDependencyValidationForRadioTypesIns(RadioInstallationViewModel, TableName, SiteCode);

                                if (!string.IsNullOrEmpty(CheckDependencyValidation))
                                    return new Response<ObjectInstAtts>(true, null, null, CheckDependencyValidation, (int)ApiReturnCode.fail);

                                string CheckGeneralValidation = CheckGeneralValidationFunctionIns(RadioOtherModel.TLIdynamicAttInstValue, TableName);

                                if (!string.IsNullOrEmpty(CheckGeneralValidation))
                                    return new Response<ObjectInstAtts>(true, null, null, CheckGeneralValidation, (int)ApiReturnCode.fail);

                                if (test == true)
                                {
                                    TLIcivilLoads CheckName = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => !x.Dismantle && (x.allLoadInstId != null ?
                                        !x.allLoadInst.Draft && (x.allLoadInst.radioOtherId != null ? x.allLoadInst.radioOther.Name.ToLower() == RadioOtherEntity.Name.ToLower() : false) : false) &&
                                        x.SiteCode.ToLower() == SiteCode.ToLower(),
                                            x => x.allLoadInst, x => x.allLoadInst.radioOther);
                                    if (CheckName != null)
                                        return new Response<ObjectInstAtts>(true, null, null, $"This name {RadioOtherEntity.Name} is already exists", (int)ApiReturnCode.fail);

                                    var CheckSerialNumber = _unitOfWork.RadioOtherRepository.GetWhereFirst(x => x.SerialNumber == RadioOtherEntity.SerialNumber);
                                    if (CheckSerialNumber != null)
                                    {
                                        return new Response<ObjectInstAtts>(true, null, null, $"The serial number {RadioOtherEntity.SerialNumber} is already exists", (int)ApiReturnCode.fail);
                                    }

                                    TLIinstallationPlace InstallationPlaceEntity = null;
                                    if (RadioOtherModel.installationPlaceId != null)
                                    {
                                        InstallationPlaceEntity = _unitOfWork.InstallationPlaceRepository.GetByID((int)RadioOtherModel.installationPlaceId);
                                        if (InstallationPlaceEntity.Name.ToLower() == "direct")
                                        {
                                            if (RadioOtherModel.TLIcivilLoads.allCivilInstId == 0 || RadioOtherModel.TLIcivilLoads.sideArmId != null)
                                            {
                                                return new Response<ObjectInstAtts>(true, null, null, "The RRU should be on civil only", (int)ApiReturnCode.fail);
                                            }
                                        }
                                        else if (InstallationPlaceEntity.Name.ToLower() == "sidearm")
                                        {
                                            if (RadioOtherModel.TLIcivilLoads.allCivilInstId == 0 || RadioOtherModel.TLIcivilLoads.sideArmId == null)
                                            {
                                                return new Response<ObjectInstAtts>(true, null, null, "The RRU should be on civil by sidearm", (int)ApiReturnCode.fail);
                                            }
                                        }
                                    }
                                    _unitOfWork.RadioOtherRepository.AddWithHistory(Helpers.LogFilterAttribute.UserId, RadioOtherEntity);
                                    _unitOfWork.SaveChanges();
                                    int Id = _unitOfWork.AllLoadInstRepository.AddAllLoadInst(LoadSubType.TLIradioOther.ToString(), RadioOtherEntity.Id);
                                    _unitOfWork.CivilLoadsRepository.AddCivilLoad(RadioOtherModel.TLIcivilLoads, Id, SiteCode);
                                    if (RadioOtherModel.TLIdynamicAttInstValue.Count > 0)
                                    {
                                        foreach (var DynamicAttInstValue in RadioOtherModel.TLIdynamicAttInstValue)
                                        {
                                            _unitOfWork.DynamicAttInstValueRepository.AddDynamicInstAtts(DynamicAttInstValue, TableNameEntity.Id, RadioOtherEntity.Id);
                                        }
                                    }
                                    //AddHistory(RadioOtherModel.ticketAtt, Id, "Insert");
                                }
                                else
                                {
                                    return new Response<ObjectInstAtts>(true, null, null, ErrorMessage, (int)ApiReturnCode.fail);
                                }
                            }
                            transaction.Complete();
                            tran.Commit();
                            return new Response<ObjectInstAtts>();
                        }
                        catch (Exception err)
                        {
                            tran.Rollback();
                            return new Response<ObjectInstAtts>(true, null, null, err.Message, (int)ApiReturnCode.fail);
                        }
                    }
                }
            }


        }
        public Response<string> AttachFile(IFormFile file, int documenttypeId, string Model, string Name, string SiteCode, string RecordId, string TableName, string connection, string AttachFolder, string asset)
        {
            try
            {



                if (RecordId == "undefined")
                    RecordId = "0";
                //Set list of image types to check later if attach file is image or not
                List<string> ImgTypes = new List<string>() { "JPEG", "JPG", "PNG", "GIF", "TIFF", "PSD", "AI", "INDD", "RAW" };
                //Get table name entity by table name
                // var TableNamesEntity = _unitOfWork.TablesNamesRepository.GetAllAsQueryable().Where(x => x.TableName == TableName).FirstOrDefault();
                var TableNamesEntity = _unitOfWork.TablesNamesRepository.GetIncludeWhereFirst(x => x.TableName == TableName);
                var FileName = file.FileName;
                //Check if the file is already exist
                // var FileExists = _unitOfWork.AttachedFilesRepository.GetAllAsQueryable().Where(x => x.Name == FileName && x.RecordId == RecordId).FirstOrDefault();

                var FileExists = _unitOfWork.AttachedFilesRepository.GetWhereFirst(x => x.Name == FileName && x.RecordId == Convert.ToInt32(RecordId) && x.SiteCode == SiteCode);


                //If file exist then return error message 
                if (FileExists != null)
                {
                    return new Response<string>(true, null, null, "The file is already exist", (int)Helpers.Constants.ApiReturnCode.fail);
                }
                var FullFileName = FileName;
                var SplitFileName = FileName.Split('.');
                //Get file name
                FileName = SplitFileName[0];
                //Get file type
                var FileType = SplitFileName[1];
                //Check if file is img
                bool IsImg = ImgTypes.Contains(FileType.ToUpper());
                //Get current directory
                // string fileDirectory = Directory.GetCurrentDirectory();
                string DirectoryPath = null;
                string FilePath = null;

                //string fileDirectory = "\\\\192.168.1.50\\Share folder\\TLIATTACHED";
                string fileDirectory = AttachFolder;

                //Create file path depened on table name
                if (TableName.Contains("Library"))
                {
                    TLIsite site = new TLIsite();
                    site.SiteCode = null;
                    DirectoryPath = Path.Combine(fileDirectory, "AttachFiles", "Library", TableName);
                    FilePath = Path.Combine(DirectoryPath, $"{FileName}_{RecordId.ToString()}_{Model}_{DateTime.Now.ToString("yyyy_MM_dd")}.{FileType}");
                }
                else if (TableName == "TLIsite")
                {
                    if (IsImg == true)
                    {
                        //fileDirectory = "\\\\192.168.1.6\\Users\\DELL\\Desktop\\TliFront\\assets\\galleria";
                        fileDirectory = asset;
                        DirectoryPath = fileDirectory;
                        FilePath = Path.Combine(fileDirectory, $"{FileName}.{FileType}");
                    }
                    else
                    {
                        DirectoryPath = Path.Combine(fileDirectory, "AttachFiles", "Site");
                        FilePath = Path.Combine(DirectoryPath, $"{FileName}.{FileType}");
                    }


                }


                else
                {
                    DirectoryPath = Path.Combine(fileDirectory, "AttachFiles", "Installation", TableName);
                    FilePath = Path.Combine(DirectoryPath, $"{FileName}_{RecordId.ToString()}_{Name}_{DateTime.Now.ToString("yyyy_MM_dd")}.{FileType}");
                }
                //Check if DirectoryPath not exist then create it
                if (!Directory.Exists(DirectoryPath))
                {
                    Directory.CreateDirectory(DirectoryPath);
                }
                FilePath = Path.Combine(DirectoryPath, $"{FileName}.{FileType}");
                //Create file path
                using (var stream = new FileStream(FilePath, FileMode.Create))
                {
                    file.CopyTo(stream);
                }
                //Add attach file to TLIattachedFiles table in database
                //using ADO method
                double FileSizePerMega = (double)(file.Length / 1024) / 1042;

                var connectionString = new OracleConnection(connection);
                var IsImage = IsImg == false ? 0 : 1;

                OracleCommand cmd = connectionString.CreateCommand();
                if (TableName.Contains("Library"))
                {
                    cmd.CommandText = "INSERT INTO \"TLIattachedFiles\" (\"Name\", \"Path\", \"RecordId\", \"tablesNamesId\",\"IsImg\",\"documenttypeId\",\"fileSize\",\"SiteCode\",\"Description\",\"Description2\",\"UnAttached\")" +
                    " VALUES ('" + FullFileName + "','" + FilePath + "'," + Convert.ToInt32(RecordId) + "," + TableNamesEntity.Id + "," + IsImage + "," + documenttypeId + "," + FileSizePerMega + ",'NA','NA','NA',0)";
                }
                else if (TableName.Contains("TLIsite"))
                {
                    if (IsImg == true)
                    {
                        FilePath = Path.Combine("assets\\galleria", $"{FileName}.{FileType}");
                        cmd.CommandText = "INSERT INTO \"TLIattachedFiles\" (\"Name\", \"Path\", \"RecordId\", \"tablesNamesId\",\"IsImg\",\"documenttypeId\",\"fileSize\",\"SiteCode\",\"Description\",\"Description2\",\"UnAttached\")" +
                   " VALUES ('" + FullFileName + "','" + FilePath + "','0'," + TableNamesEntity.Id + "," + IsImage + "," + documenttypeId + "," + FileSizePerMega + ",'" + SiteCode + "','NA','NA',0)";

                    }
                    else
                    {
                        cmd.CommandText = "INSERT INTO \"TLIattachedFiles\" (\"Name\", \"Path\", \"RecordId\", \"tablesNamesId\",\"IsImg\",\"documenttypeId\",\"fileSize\",\"SiteCode\",\"Description\",\"Description2\",\"UnAttached\")" +
                        " VALUES ('" + FullFileName + "','" + FilePath + "','0'," + TableNamesEntity.Id + "," + IsImage + "," + documenttypeId + "," + FileSizePerMega + ",'" + SiteCode + "','NA','NA',0)";
                    }
                }


                else
                {
                    cmd.CommandText = "INSERT INTO \"TLIattachedFiles\" (\"Name\", \"Path\", \"RecordId\", \"tablesNamesId\",\"IsImg\",\"documenttypeId\",\"fileSize\",\"SiteCode\",\"Description\",\"Description2\",\"UnAttached\")" +
                    " VALUES ('" + FullFileName + "','" + FilePath + "'," + Convert.ToInt32(RecordId) + "," + TableNamesEntity.Id + "," + IsImage + "," + documenttypeId + "," + FileSizePerMega + ",'" + SiteCode + "','NA','NA',0)";
                }

                connectionString.Open();
                cmd.ExecuteNonQuery();
                connectionString.Close();
                //  AddHistoryForUnAttached(attachedFiles.Id, "Add", "TLIattachedFiles");
                return new Response<string>(true, FilePath, null, null, (int)Helpers.Constants.ApiReturnCode.success);
            }
            catch (Exception err)
            {

                return new Response<string>(true, null, null, err.Message, (int)Helpers.Constants.ApiReturnCode.fail);
            }
        }
        //public Response<ObjectInstAtts> AddMWInstallation(object MWInstallationViewModel, string TableName, string SiteCode, string ConnectionString)
        //{
        //    using (var con = new OracleConnection(ConnectionString))
        //    {
        //        con.Open();
        //        using (var tran = con.BeginTransaction())
        //        {
        //            using (TransactionScope transaction = new TransactionScope())
        //            {
        //                try
        //                {
        //                    string ErrorMessage = string.Empty;
        //                    var TableNameEntity = _unitOfWork.TablesNamesRepository.GetWhereFirst(x => x.TableName == TableName);
        //                    if (LoadSubType.TLImwODU.ToString() == TableName)
        //                    {
        //                        AddMW_ODUViewModel addMW_ODU = _mapper.Map<AddMW_ODUViewModel>(MWInstallationViewModel);
        //                        TLImwODU mwODU = _mapper.Map<TLImwODU>(addMW_ODU);
        //                        //Installation: 
        //                        //{(((( -Directly behind the dish, (Installation mode called “Direct Mount”). In other installation mode(called “Separate Mount”, the ODU is installed separately to the civil steel support using side arm))))}.
        //                        bool test = true;
        //                        string CheckDependencyValidation = CheckDependencyValidationForMWTypes(MWInstallationViewModel, TableName, SiteCode);

        //                        if (!string.IsNullOrEmpty(CheckDependencyValidation))
        //                            return new Response<ObjectInstAtts>(true, null, null, CheckDependencyValidation, (int)ApiReturnCode.fail);

        //                        string CheckGeneralValidation = CheckGeneralValidationFunction(addMW_ODU.TLIdynamicAttInstValue, TableName);

        //                        if (!string.IsNullOrEmpty(CheckGeneralValidation))
        //                            return new Response<ObjectInstAtts>(true, null, null, CheckGeneralValidation, (int)ApiReturnCode.fail);

        //                        if (test == true)
        //                        {
        //                            //TLIcivilLoads CheckName = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => !x.Dismantle && (x.allLoadInstId != null ?
        //                            //    !x.allLoadInst.Draft && (x.allLoadInst.mwODUId != null ? x.allLoadInst.mwODU.Name.ToLower() == mwODU.Name.ToLower() : false) : false),
        //                            //        x => x.allLoadInst, x => x.allLoadInst.mwODU);
        //                            //if (CheckName != null)
        //                            //    return new Response<ObjectInstAtts>(true, null, null, $"This name {mwODU.Name} is already exists", (int)ApiReturnCode.fail); 
        //                            var CheckSerialNumber = _unitOfWork.MW_ODURepository.GetWhereFirst(x => x.Serial_Number == mwODU.Serial_Number);
        //                            if (CheckSerialNumber != null)
        //                            {
        //                                return new Response<ObjectInstAtts>(true, null, null, $"The SerialNumber {mwODU.Serial_Number} is already exists", (int)ApiReturnCode.fail);
        //                            }
        //                            TLIoduInstallationType OduInstallationType = _unitOfWork.OduInstallationTypeRepository.GetByID((int)addMW_ODU.OduInstallationTypeId);

        //                            //if (addMW_ODU.OduInstallationTypeId != null)
        //                            //{
        //                            //    OduInstallationType = _unitOfWork.OduInstallationTypeRepository.GetByID((int)addMW_ODU.OduInstallationTypeId);
        //                            //    if (OduInstallationType.Name.ToLower() != "sidearm")
        //                            //    {
        //                            //        return new Response<ObjectInstAtts>(true, null, null, "The odu installation place should be sidearm", (int)ApiReturnCode.fail);
        //                            //    }
        //                            //}

        //                            if (OduInstallationType.Name.ToLower() == "sperate mount")
        //                            {
        //                                if (addMW_ODU.Height == null)
        //                                {
        //                                    return new Response<ObjectInstAtts>(true, null, null, "The odu Height Can't Be Null ", (int)ApiReturnCode.fail);
        //                                }
        //                            }

        //                            TLImwDish DishEntity = null;
        //                            mwODU.Name = "";
        //                            if (mwODU.Mw_DishId != null)
        //                            {
        //                                DishEntity = _unitOfWork.MW_DishRepository.GetByID((int)mwODU.Mw_DishId);
        //                                mwODU.Name += DishEntity.DishName;
        //                            }
        //                            TLImwODULibrary ODULibraryEntity = null;
        //                            if (mwODU.MwODULibraryId != null)
        //                            {
        //                                ODULibraryEntity = _unitOfWork.MW_ODULibraryRepository.GetByID((int)mwODU.MwODULibraryId);
        //                                if (String.IsNullOrEmpty(mwODU.Name) == true)
        //                                {
        //                                    mwODU.Name += ODULibraryEntity.Model;
        //                                }
        //                                else
        //                                {
        //                                    mwODU.Name += " " + ODULibraryEntity.Model;
        //                                }
        //                            }
        //                            TLIpolarityOnLocation PolarityOnLocationEntity = null;
        //                            if (DishEntity.PolarityOnLocationId != null)
        //                            {
        //                                PolarityOnLocationEntity = _unitOfWork.PolarityOnLocationRepository.GetByID((int)DishEntity.PolarityOnLocationId);
        //                                if (String.IsNullOrEmpty(mwODU.Name) == true)
        //                                {
        //                                    mwODU.Name += PolarityOnLocationEntity.Name;
        //                                }
        //                                else
        //                                {
        //                                    mwODU.Name += " " + PolarityOnLocationEntity.Name;
        //                                }
        //                            }
        //                            TLIcivilLoads CheckName = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => !x.Dismantle && (x.allLoadInstId != null ?
        //                               !x.allLoadInst.Draft && (x.allLoadInst.mwODUId != null ? x.allLoadInst.mwODU.Name.ToLower() == mwODU.Name.ToLower() : false) : false) &&
        //                               x.SiteCode.ToLower() == SiteCode.ToLower(),
        //                                   x => x.allLoadInst, x => x.allLoadInst.mwODU);

        //                            if (CheckName != null)
        //                                return new Response<ObjectInstAtts>(true, null, null, $"This name {mwODU.Name} is already exists", (int)ApiReturnCode.fail);

        //                            _unitOfWork.MW_ODURepository.Add(mwODU);
        //                            _unitOfWork.SaveChanges();

        //                            var Id = _unitOfWork.AllLoadInstRepository.AddAllLoadInst(LoadSubType.TLImwODU.ToString(), mwODU.Id);
        //                            _unitOfWork.CivilLoadsRepository.AddCivilLoad(addMW_ODU.TLIcivilLoads, Id, SiteCode);
        //                            if (addMW_ODU.TLIdynamicAttInstValue.Count > 0)
        //                            {
        //                                foreach (var DynamicAttInstValue in addMW_ODU.TLIdynamicAttInstValue)
        //                                {
        //                                    _unitOfWork.DynamicAttInstValueRepository.AddDynamicInstAtts(DynamicAttInstValue, TableNameEntity.Id, mwODU.Id);
        //                                }
        //                            }
        //                            //AddHistory(addMW_ODU.ticketAtt, Id, "Insert");
        //                        }
        //                        else
        //                        {
        //                            return new Response<ObjectInstAtts>(true, null, null, ErrorMessage, (int)ApiReturnCode.fail);
        //                        }
        //                    }
        //                    else if (LoadSubType.TLImwBU.ToString() == TableName)
        //                    {
        //                        AddMW_BUViewModel addMW_BU = _mapper.Map<AddMW_BUViewModel>(MWInstallationViewModel);
        //                        TLImwBU mwBU = _mapper.Map<TLImwBU>(addMW_BU);
        //                        var Message = _unitOfWork.CivilWithLegsRepository.CheckAvailableSpaceOnCivil(addMW_BU.TLIcivilLoads.allCivilInstId).Message;
        //                        if (Message != "Success")
        //                        {
        //                            return new Response<ObjectInstAtts>(true, null, null, Message, (int)ApiReturnCode.fail);
        //                        }
        //                        var mwBULibrary = db.TLImwBULibrary.Where(x => x.Id == addMW_BU.MwBULibraryId).AsNoTracking().FirstOrDefault();
        //                        if (mwBU.CenterHigh == 0 || mwBU.CenterHigh == null)
        //                        {
        //                            mwBU.CenterHigh = mwBU.HBA + mwBULibrary.Length / 2;
        //                        }
        //                        var message = _unitOfWork.CivilWithLegsRepository.CheckloadsOnCivil(addMW_BU.TLIcivilLoads.allCivilInstId, 0, mwBU.Azimuth, mwBU.CenterHigh).Message;
        //                        if (message != "Success")
        //                        {
        //                            return new Response<ObjectInstAtts>(true, null, null, message, (int)ApiReturnCode.fail);
        //                        }

        //                        if (addMW_BU.TLIcivilLoads.ReservedSpace == true && mwBU.SpaceInstallation == 0)
        //                        {
        //                            mwBU.SpaceInstallation = mwBULibrary.SpaceLibrary;

        //                            if (mwBULibrary.SpaceLibrary == 0)
        //                            {
        //                                mwBU.SpaceInstallation = mwBULibrary.Length * mwBULibrary.Width;
        //                            }
        //                        }
        //                        if (addMW_BU.TLIcivilLoads.ReservedSpace == true && (addMW_BU.TLIcivilLoads.sideArmId == null || addMW_BU.TLIcivilLoads.sideArmId == 0))
        //                        {
        //                            mwBU.EquivalentSpace = _unitOfWork.CivilWithLegsRepository.Checkspaceload(addMW_BU.TLIcivilLoads.allCivilInstId, TableName, mwBU.SpaceInstallation, mwBU.CenterHigh, addMW_BU.MwBULibraryId, addMW_BU.HBA).Data;
        //                        }
        //                        bool test = true;
        //                        string CheckDependencyValidation = CheckDependencyValidationForMWTypes(MWInstallationViewModel, TableName, SiteCode);

        //                        if (!string.IsNullOrEmpty(CheckDependencyValidation))
        //                            return new Response<ObjectInstAtts>(true, null, null, CheckDependencyValidation, (int)ApiReturnCode.fail);

        //                        string CheckGeneralValidation = CheckGeneralValidationFunction(addMW_BU.TLIdynamicAttInstValue, TableName);

        //                        if (!string.IsNullOrEmpty(CheckGeneralValidation))
        //                            return new Response<ObjectInstAtts>(true, null, null, CheckGeneralValidation, (int)ApiReturnCode.fail);

        //                        if (test == true)
        //                        {
        //                            //TLIcivilLoads CheckName = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => !x.Dismantle && (x.allLoadInstId != null ?
        //                            //    !x.allLoadInst.Draft && (x.allLoadInst.mwBUId != null ? x.allLoadInst.mwBU.Name.ToLower() == mwBU.Name.ToLower() : false) : false),
        //                            //        x => x.allLoadInst, x => x.allLoadInst.mwBU);
        //                            //if (CheckName != null)
        //                            //    return new Response<ObjectInstAtts>(true, null, null, $"This name {mwBU.Name} is already exists", (int)ApiReturnCode.fail);

        //                            var CheckSerialNumber = _unitOfWork.MW_BURepository.GetWhereFirst(x => x.Serial_Number == mwBU.Serial_Number);
        //                            if (CheckSerialNumber != null)
        //                            {
        //                                return new Response<ObjectInstAtts>(true, null, null, $"The SerialNumber {mwBU.Serial_Number} is already exists", (int)ApiReturnCode.fail);
        //                            }
        //                            mwBU.Name = "";
        //                            TLIsideArm SideArmEntity = null;
        //                            if (addMW_BU.TLIcivilLoads.sideArmId != null)
        //                            {
        //                                //  SideArmEntity = _unitOfWork.SideArmRepository.GetByID((int)addMW_BU.TLIcivilLoads.sideArmId);
        //                                SideArmEntity = db.TLIsideArm.Where(x => x.Id == (int)addMW_BU.TLIcivilLoads.sideArmId).AsNoTracking().FirstOrDefault();

        //                                mwBU.Name = SideArmEntity.Name;
        //                            }
        //                            TLImwBULibrary BULibrary = null;
        //                            if (mwBU.MwBULibraryId != null)
        //                            {
        //                                // BULibrary = _unitOfWork.MW_BULibraryRepository.GetByID((int)mwBU.MwBULibraryId);
        //                                BULibrary = db.TLImwBULibrary.Where(x => x.Id == (int)mwBU.MwBULibraryId).AsNoTracking().FirstOrDefault();
        //                                if (String.IsNullOrEmpty(mwBU.Name) == true)
        //                                {
        //                                    mwBU.Name = BULibrary.Model + " " + mwBU.Height;
        //                                }
        //                                else
        //                                {
        //                                    mwBU.Name += " " + BULibrary.Model + " " + mwBU.Height;
        //                                }
        //                            }
        //                            TLIcivilLoads CheckName = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => !x.Dismantle && (x.allLoadInstId != null ?
        //                               !x.allLoadInst.Draft && (x.allLoadInst.mwBUId != null ? x.allLoadInst.mwBU.Name.ToLower() == mwBU.Name.ToLower() : false) : false) &&
        //                               x.SiteCode.ToLower() == SiteCode.ToLower(),
        //                                   x => x.allLoadInst, x => x.allLoadInst.mwBU);
        //                            if (CheckName != null)
        //                                return new Response<ObjectInstAtts>(true, null, null, $"This name {mwBU.Name} is already exists", (int)ApiReturnCode.fail);

        //                            _unitOfWork.MW_BURepository.AddWithHistory(Helpers.LogFilterAttribute.UserId, mwBU);
        //                            _unitOfWork.SaveChanges();
        //                            int Id = _unitOfWork.AllLoadInstRepository.AddAllLoadInst(LoadSubType.TLImwBU.ToString(), mwBU.Id);
        //                            _unitOfWork.CivilLoadsRepository.AddCivilLoad(addMW_BU.TLIcivilLoads, Id, SiteCode);
        //                            if (addMW_BU.TLIdynamicAttInstValue.Count > 0)
        //                            {
        //                                foreach (var DynamicAttInstValue in addMW_BU.TLIdynamicAttInstValue)
        //                                {
        //                                    _unitOfWork.DynamicAttInstValueRepository.AddDynamicInstAtts(DynamicAttInstValue, TableNameEntity.Id, mwBU.Id);
        //                                }
        //                            }
        //                            //add ports to BU

        //                            for (int i = 0; i <= 4; i++)
        //                            {
        //                                if (i != 4)
        //                                {
        //                                    TLImwPort item = new TLImwPort();
        //                                    item.Port_Name = mwBU.Name + "_Port" + (i + 1);
        //                                    item.TX_Frequency = "100";
        //                                    item.MwBUId = mwBU.Id;
        //                                    item.MwBULibraryId = mwBU.MwBULibraryId;
        //                                    item.Port_Type = 1;
        //                                    db.TLImwPort.Add(item);
        //                                    db.SaveChanges();
        //                                }
        //                                else
        //                                {
        //                                    TLImwPort item = new TLImwPort();
        //                                    item.Port_Name = mwBU.Name + "_Port" + (i + 1);
        //                                    item.TX_Frequency = "100";
        //                                    item.MwBUId = mwBU.Id;
        //                                    item.MwBULibraryId = mwBU.MwBULibraryId;
        //                                    item.Port_Type = 2;
        //                                    db.TLImwPort.Add(item);
        //                                    db.SaveChanges();
        //                                }

        //                            }
        //                            //AddHistory(addMW_BU.ticketAtt, Id, "Insert");
        //                        }
        //                        else
        //                        {
        //                            return new Response<ObjectInstAtts>(true, null, null, ErrorMessage, (int)ApiReturnCode.fail);
        //                        }
        //                    }
        //                    else if (LoadSubType.TLImwDish.ToString() == TableName)
        //                    {
        //                        AddMW_DishViewModel AddMW_Dish = _mapper.Map<AddMW_DishViewModel>(MWInstallationViewModel);

        //                        TLImwDish mwDish = _mapper.Map<TLImwDish>(AddMW_Dish);
        //                        var Message = _unitOfWork.CivilWithLegsRepository.CheckAvailableSpaceOnCivil(AddMW_Dish.TLIcivilLoads.allCivilInstId).Message;
        //                        if (Message != "Success")
        //                        {
        //                            return new Response<ObjectInstAtts>(true, null, null, Message, (int)ApiReturnCode.fail);
        //                        }
        //                        var mwDishLibrary = db.TLImwDishLibrary.Where(x => x.Id == AddMW_Dish.MwDishLibraryId).AsNoTracking().FirstOrDefault();
        //                        if (mwDish.CenterHigh == 0 || mwDish.CenterHigh == null)
        //                        {
        //                            mwDish.CenterHigh = mwDish.HBA + mwDishLibrary.Length / 2;
        //                        }
        //                        var message = _unitOfWork.CivilWithLegsRepository.CheckloadsOnCivil(AddMW_Dish.TLIcivilLoads.allCivilInstId, 0, mwDish.Azimuth, mwDish.CenterHigh).Message;
        //                        if (message != "Success")
        //                        {
        //                            return new Response<ObjectInstAtts>(true, null, null, message, (int)ApiReturnCode.fail);
        //                        }

        //                        if (AddMW_Dish.TLIcivilLoads.ReservedSpace == true && mwDish.SpaceInstallation == 0)
        //                        {
        //                            mwDish.SpaceInstallation = mwDishLibrary.SpaceLibrary;

        //                            if (mwDishLibrary.SpaceLibrary == 0)
        //                            {
        //                                mwDish.SpaceInstallation = Convert.ToSingle(3.14) * (float)Math.Pow(mwDishLibrary.diameter / 2, 2);
        //                            }
        //                        }
        //                        if (AddMW_Dish.TLIcivilLoads.ReservedSpace == true && (AddMW_Dish.TLIcivilLoads.sideArmId == null || AddMW_Dish.TLIcivilLoads.sideArmId == 0))
        //                        {
        //                            mwDish.EquivalentSpace = _unitOfWork.CivilWithLegsRepository.Checkspaceload(AddMW_Dish.TLIcivilLoads.allCivilInstId, TableName, mwDish.SpaceInstallation, mwDish.CenterHigh, AddMW_Dish.MwDishLibraryId, AddMW_Dish.HBA).Data;
        //                        }
        //                        //TLIcivilLoads CheckName = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => !x.Dismantle && (x.allLoadInstId != null ?
        //                        //        !x.allLoadInst.Draft && (x.allLoadInst.mwDishId != null ? x.allLoadInst.mwDish.DishName.ToLower() == mwDish.DishName.ToLower() : false) : false),
        //                        //            x => x.allLoadInst, x => x.allLoadInst.mwDish);
        //                        //if (CheckName != null)
        //                        //    return new Response<ObjectInstAtts>(true, null, null, $"This name {mwDish.DishName} is already exists", (int)ApiReturnCode.fail);
        //                        string CheckDependencyValidation = CheckDependencyValidationForMWTypes(MWInstallationViewModel, TableName, SiteCode);

        //                        if (!string.IsNullOrEmpty(CheckDependencyValidation))
        //                            return new Response<ObjectInstAtts>(true, null, null, CheckDependencyValidation, (int)ApiReturnCode.fail);

        //                        string CheckGeneralValidation = CheckGeneralValidationFunction(AddMW_Dish.TLIdynamicAttInstValue, TableName);

        //                        if (!string.IsNullOrEmpty(CheckGeneralValidation))
        //                            return new Response<ObjectInstAtts>(true, null, null, CheckGeneralValidation, (int)ApiReturnCode.fail);

        //                        if (!string.IsNullOrEmpty(mwDish.Serial_Number))
        //                        {
        //                            bool CheckSerialNumber = _unitOfWork.MW_DishRepository.Any(x => x.Serial_Number == mwDish.Serial_Number);
        //                            if (CheckSerialNumber)
        //                                return new Response<ObjectInstAtts>(true, null, null, $"The Serial Number {mwDish.Serial_Number} is already exists", (int)ApiReturnCode.fail);
        //                        }

        //                        bool CheckMW_LinkId = _unitOfWork.MW_DishRepository.Any(x => x.MW_LinkId == mwDish.MW_LinkId);
        //                        if (CheckMW_LinkId)
        //                            return new Response<ObjectInstAtts>(true, null, null, $"The MW_LinkId {mwDish.MW_LinkId} is already exists", (int)ApiReturnCode.fail);

        //                        mwDish.DishName = AddMW_Dish.TLIcivilLoads.sideArmId != null ?
        //                            $"{_unitOfWork.SideArmRepository.GetByID((int)AddMW_Dish.TLIcivilLoads.sideArmId).Name} {AddMW_Dish.HeightBase} {AddMW_Dish.Azimuth}" :
        //                            AddMW_Dish.HeightBase + " " + AddMW_Dish.Azimuth;

        //                        TLImwDishLibrary DishLibrary = _unitOfWork.MW_DishLibraryRepository.GetByID(AddMW_Dish.MwDishLibraryId);
        //                        TLIcivilLoads CheckName = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => !x.Dismantle && (x.allLoadInstId != null ?
        //                            !x.allLoadInst.Draft && (x.allLoadInst.mwDishId != null ? x.allLoadInst.mwDish.DishName.ToLower() == mwDish.DishName.ToLower() : false) : false) &&
        //                                x.SiteCode.ToLower() == SiteCode.ToLower(),
        //                                x => x.allLoadInst, x => x.allLoadInst.mwDish);
        //                        if (CheckName != null)
        //                            return new Response<ObjectInstAtts>(true, null, null, $"This name {mwDish.DishName} is already exists", (int)ApiReturnCode.fail);

        //                        if (AddMW_Dish.InstallationPlaceId != null)
        //                        {
        //                            TLIinstallationPlace InstallationPlaceEntity = _unitOfWork.InstallationPlaceRepository.GetByID(AddMW_Dish.InstallationPlaceId.Value);

        //                            if (InstallationPlaceEntity.Name.ToLower() == "direct")
        //                                if (AddMW_Dish.TLIcivilLoads.allCivilInstId == 0 || AddMW_Dish.TLIcivilLoads.sideArmId != null)
        //                                    return new Response<ObjectInstAtts>(true, null, null, "The dish if installateion place is direct then should be on civil without sideArm", (int)ApiReturnCode.fail);

        //                                else if (InstallationPlaceEntity.Name.ToLower() == "sidearm")
        //                                    if (AddMW_Dish.TLIcivilLoads.allCivilInstId == 0 || AddMW_Dish.TLIcivilLoads.sideArmId == null)
        //                                        return new Response<ObjectInstAtts>(true, null, null, "The dish if installateion place is direct then should be on civil by sideArm", (int)ApiReturnCode.fail);
        //                        }
        //                        if (AddMW_Dish.ItemConnectToId != null)
        //                        {
        //                            TLIitemConnectTo ConnectedToEntity = _unitOfWork.ItemConnectToRepository.GetByID(AddMW_Dish.ItemConnectToId.Value);
        //                            if (ConnectedToEntity.Name.ToLower() == "farsitedish")
        //                                if (string.IsNullOrEmpty(AddMW_Dish.Far_End_Site_Code))
        //                                    return new Response<ObjectInstAtts>(true, null, null, "Far Site Code Shouldn't be null if dish connected to FarSiteDish", (int)ApiReturnCode.fail);
        //                                else if (ConnectedToEntity.Name.ToLower() == "repeater")
        //                                {
        //                                    if (AddMW_Dish.RepeaterTypeId == null)
        //                                    {
        //                                        return new Response<ObjectInstAtts>(true, null, null, "if dish connected to repeater then repeater type shouldn't be null", (int)ApiReturnCode.fail);
        //                                    }
        //                                    else
        //                                    {
        //                                        TLIrepeaterType RepeaterTypeEntity = null;
        //                                        if (AddMW_Dish.RepeaterTypeId != null)
        //                                        {
        //                                            RepeaterTypeEntity = _unitOfWork.RepeaterTypeRepository.GetByID((int)AddMW_Dish.RepeaterTypeId);
        //                                            if (RepeaterTypeEntity.Name.ToLower() != "active" && RepeaterTypeEntity.Name.ToLower() != "passive")
        //                                            {
        //                                                return new Response<ObjectInstAtts>(true, null, null, "if dish connected to repeater then repeater type should be active or passive", (int)ApiReturnCode.fail);
        //                                            }
        //                                            if (RepeaterTypeEntity.Name.ToLower() == "active")
        //                                            {
        //                                                if (String.IsNullOrEmpty(AddMW_Dish.Far_End_Site_Code))
        //                                                {
        //                                                    return new Response<ObjectInstAtts>(true, null, null, "Far Site Code Shouldn't be null if repeater type is active", (int)ApiReturnCode.fail);
        //                                                }
        //                                            }
        //                                            else if (RepeaterTypeEntity.Name.ToLower() == "passive")
        //                                            {
        //                                                if (ConnectedToEntity.Name.ToLower() != "repeater" || RepeaterTypeEntity.Name.ToLower() != "passive")
        //                                                {
        //                                                    return new Response<ObjectInstAtts>(true, null, null, "The dish should be connected to repeater and repeater type is passive", (int)ApiReturnCode.fail);
        //                                                }
        //                                            }
        //                                        }
        //                                    }
        //                                }
        //                        }
        //                        _unitOfWork.MW_DishRepository.AddWithHistory(Helpers.LogFilterAttribute.UserId, mwDish);
        //                        _unitOfWork.SaveChanges();
        //                        int Id = _unitOfWork.AllLoadInstRepository.AddAllLoadInst(LoadSubType.TLImwDish.ToString(), mwDish.Id);
        //                        _unitOfWork.CivilLoadsRepository.AddCivilLoad(AddMW_Dish.TLIcivilLoads, Id, SiteCode);
        //                        if (AddMW_Dish.TLIdynamicAttInstValue.Count > 0)
        //                        {
        //                            foreach (var DynamicAttInstValue in AddMW_Dish.TLIdynamicAttInstValue)
        //                            {
        //                                _unitOfWork.DynamicAttInstValueRepository.AddDynamicInstAtts(DynamicAttInstValue, TableNameEntity.Id, mwDish.Id);
        //                            }
        //                        }
        //                    }
        //                    else if (LoadSubType.TLImwRFU.ToString() == TableName)
        //                    {
        //                        AddMW_RFUViewModel AddMW_RFU = _mapper.Map<AddMW_RFUViewModel>(MWInstallationViewModel);
        //                        TLImwRFU mwRFU = _mapper.Map<TLImwRFU>(AddMW_RFU);
        //                        if (AddMW_RFU.MwPortId == null)
        //                        {
        //                            var Message = _unitOfWork.CivilWithLegsRepository.CheckAvailableSpaceOnCivil(AddMW_RFU.TLIcivilLoads.allCivilInstId).Message;
        //                            if (Message != "Success")
        //                            {
        //                                return new Response<ObjectInstAtts>(true, null, null, Message, (int)ApiReturnCode.fail);
        //                            }
        //                            var mwRFULibrary = db.TLImwRFULibrary.Where(x => x.Id == AddMW_RFU.MwRFULibraryId).FirstOrDefault();
        //                            if (mwRFU.CenterHigh == 0 || mwRFU.CenterHigh == null)
        //                            {
        //                                mwRFU.CenterHigh = mwRFU.HBA + mwRFULibrary.Length / 2;
        //                            }
        //                            if (AddMW_RFU.TLIcivilLoads.ReservedSpace == true && mwRFU.SpaceInstallation == 0)
        //                            {
        //                                mwRFU.SpaceInstallation = mwRFULibrary.SpaceLibrary;

        //                                if (mwRFULibrary.SpaceLibrary == 0)
        //                                {
        //                                    mwRFU.SpaceInstallation = mwRFULibrary.Length * mwRFULibrary.Width;
        //                                }
        //                            }
        //                            if (AddMW_RFU.TLIcivilLoads.ReservedSpace == true && (AddMW_RFU.TLIcivilLoads.sideArmId == null || AddMW_RFU.TLIcivilLoads.sideArmId == 0))
        //                            {
        //                                mwRFU.EquivalentSpace = _unitOfWork.CivilWithLegsRepository.Checkspaceload(AddMW_RFU.TLIcivilLoads.allCivilInstId, TableName, mwRFU.SpaceInstallation, mwRFU.CenterHigh, AddMW_RFU.MwRFULibraryId, AddMW_RFU.HBA).Data;
        //                            }
        //                        }

        //                        bool test = false;
        //                        if (AddMW_RFU.TLIdynamicAttInstValue != null ? AddMW_RFU.TLIdynamicAttInstValue.Count > 0 : false)
        //                        {
        //                            string CheckDependencyValidation = CheckDependencyValidationForMWTypes(MWInstallationViewModel, TableName, SiteCode);

        //                            if (!string.IsNullOrEmpty(CheckDependencyValidation))
        //                                return new Response<ObjectInstAtts>(true, null, null, CheckDependencyValidation, (int)ApiReturnCode.fail);

        //                            string CheckGeneralValidation = CheckGeneralValidationFunction(AddMW_RFU.TLIdynamicAttInstValue, TableName);

        //                            if (!string.IsNullOrEmpty(CheckGeneralValidation))
        //                                return new Response<ObjectInstAtts>(true, null, null, CheckGeneralValidation, (int)ApiReturnCode.fail);

        //                            test = true;
        //                        }
        //                        else
        //                        {
        //                            test = true;
        //                        }
        //                        if (test == true)
        //                        {
        //                            TLIcivilLoads CheckName = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => !x.Dismantle && (x.allLoadInstId != null ?
        //                                !x.allLoadInst.Draft && (x.allLoadInst.mwRFUId != null ? x.allLoadInst.mwRFU.Name.ToLower() == mwRFU.Name.ToLower() : false) : false) &&
        //                                x.SiteCode.ToLower() == SiteCode.ToLower(),
        //                                    x => x.allLoadInst, x => x.allLoadInst.mwRFU);
        //                            if (CheckName != null)
        //                                return new Response<ObjectInstAtts>(true, null, null, $"This name {mwRFU.Name} is already exists", (int)ApiReturnCode.fail);

        //                            var CheckSerialNumber = _unitOfWork.MW_RFURepository.GetWhereFirst(x => x.SerialNumber == mwRFU.SerialNumber);
        //                            if (CheckSerialNumber != null)
        //                            {
        //                                return new Response<ObjectInstAtts>(true, null, null, $"The SerialNumber {mwRFU.SerialNumber} is already exists", (int)ApiReturnCode.fail);
        //                            }

        //                            _unitOfWork.MW_RFURepository.AddWithHistory(Helpers.LogFilterAttribute.UserId, mwRFU);
        //                            _unitOfWork.SaveChanges();
        //                            int Id = _unitOfWork.AllLoadInstRepository.AddAllLoadInst(LoadSubType.TLImwRFU.ToString(), mwRFU.Id);
        //                            _unitOfWork.CivilLoadsRepository.AddCivilLoad(AddMW_RFU.TLIcivilLoads, Id, SiteCode);
        //                            if (AddMW_RFU.TLIdynamicAttInstValue.Count > 0)
        //                            {
        //                                foreach (var DynamicAttInstValue in AddMW_RFU.TLIdynamicAttInstValue)
        //                                {
        //                                    _unitOfWork.DynamicAttInstValueRepository.AddDynamicInstAtts(DynamicAttInstValue, TableNameEntity.Id, mwRFU.Id);
        //                                }
        //                            }
        //                        }    //AddHistory(AddMW_RFU.ticketAtt, Id, "Insert");

        //                        else
        //                        {
        //                            return new Response<ObjectInstAtts>(true, null, null, ErrorMessage, (int)ApiReturnCode.fail);
        //                        }

        //                    }
        //                    else if (LoadSubType.TLImwOther.ToString() == TableName)
        //                    {
        //                        AddMw_OtherViewModel AddMW_Other = _mapper.Map<AddMw_OtherViewModel>(MWInstallationViewModel);
        //                        TLImwOther mwOther = _mapper.Map<TLImwOther>(AddMW_Other);
        //                        var Message = _unitOfWork.CivilWithLegsRepository.CheckAvailableSpaceOnCivil(AddMW_Other.TLIcivilLoads.allCivilInstId).Message;
        //                        if (Message != "Success")
        //                        {
        //                            return new Response<ObjectInstAtts>(true, null, null, Message, (int)ApiReturnCode.fail);
        //                        }
        //                        var mwOtherLibrary = db.TLImwOtherLibrary.Where(x => x.Id == AddMW_Other.mwOtherLibraryId).FirstOrDefault();
        //                        if (mwOther.CenterHigh == 0 || mwOther.CenterHigh == null)
        //                        {
        //                            mwOther.CenterHigh = mwOther.HBA + mwOtherLibrary.Length / 2;
        //                        }
        //                        if (AddMW_Other.TLIcivilLoads.ReservedSpace == true && mwOther.Spaceinstallation == 0)
        //                        {
        //                            mwOther.Spaceinstallation = mwOtherLibrary.SpaceLibrary;

        //                            if (mwOtherLibrary.SpaceLibrary == 0)
        //                            {
        //                                mwOther.Spaceinstallation = mwOtherLibrary.Length * mwOtherLibrary.Width;
        //                            }
        //                        }
        //                        if (AddMW_Other.TLIcivilLoads.ReservedSpace == true && (AddMW_Other.TLIcivilLoads.sideArmId == null || AddMW_Other.TLIcivilLoads.sideArmId == 0))
        //                        {
        //                            mwOther.EquivalentSpace = _unitOfWork.CivilWithLegsRepository.Checkspaceload(AddMW_Other.TLIcivilLoads.allCivilInstId, TableName, mwOther.Spaceinstallation, mwOther.CenterHigh, AddMW_Other.mwOtherLibraryId, AddMW_Other.HBA).Data;
        //                        }
        //                        bool test = false;
        //                        if (AddMW_Other.TLIdynamicAttInstValue != null ? AddMW_Other.TLIdynamicAttInstValue.Count > 0 : false)
        //                        {
        //                            string CheckDependencyValidation = CheckDependencyValidationForMWTypes(MWInstallationViewModel, TableName, SiteCode);

        //                            if (!string.IsNullOrEmpty(CheckDependencyValidation))
        //                                return new Response<ObjectInstAtts>(true, null, null, CheckDependencyValidation, (int)ApiReturnCode.fail);

        //                            string CheckGeneralValidation = CheckGeneralValidationFunction(AddMW_Other.TLIdynamicAttInstValue, TableName);

        //                            if (!string.IsNullOrEmpty(CheckGeneralValidation))
        //                                return new Response<ObjectInstAtts>(true, null, null, CheckGeneralValidation, (int)ApiReturnCode.fail);

        //                            test = true;
        //                        }
        //                        else
        //                        {
        //                            test = true;
        //                        }
        //                        if (test == true)
        //                        {
        //                            TLIcivilLoads CheckName = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => !x.Dismantle && (x.allLoadInstId != null ?
        //                                !x.allLoadInst.Draft && (x.allLoadInst.mwOtherId != null ? x.allLoadInst.mwOther.Name.ToLower() == mwOther.Name.ToLower() : false) : false) &&
        //                                x.SiteCode.ToLower() == SiteCode.ToLower(),
        //                                    x => x.allLoadInst, x => x.allLoadInst.mwOther);
        //                            if (CheckName != null)
        //                                return new Response<ObjectInstAtts>(true, null, null, $"This name {mwOther.Name} is already exists", (int)ApiReturnCode.fail);

        //                            var CheckSerialNumber = _unitOfWork.Mw_OtherRepository.GetWhereFirst(x => x.SerialNumber == mwOther.SerialNumber);
        //                            if (CheckSerialNumber != null)
        //                            {
        //                                return new Response<ObjectInstAtts>(true, null, null, $"The SerialNumber {mwOther.SerialNumber} is already exists", (int)ApiReturnCode.fail);
        //                            }

        //                            _unitOfWork.Mw_OtherRepository.AddWithHistory(Helpers.LogFilterAttribute.UserId, mwOther);
        //                            _unitOfWork.SaveChanges();
        //                            int Id = _unitOfWork.AllLoadInstRepository.AddAllLoadInst(LoadSubType.TLImwOther.ToString(), mwOther.Id);
        //                            _unitOfWork.CivilLoadsRepository.AddCivilLoad(AddMW_Other.TLIcivilLoads, Id, SiteCode);
        //                            if (AddMW_Other.TLIdynamicAttInstValue.Count > 0)
        //                            {
        //                                foreach (var DynamicAttInstValue in AddMW_Other.TLIdynamicAttInstValue)
        //                                {
        //                                    _unitOfWork.DynamicAttInstValueRepository.AddDynamicInstAtts(DynamicAttInstValue, TableNameEntity.Id, mwOther.Id);
        //                                }
        //                            }

        //                        }
        //                        else
        //                        {
        //                            return new Response<ObjectInstAtts>(true, null, null, ErrorMessage, (int)ApiReturnCode.fail);
        //                        }
        //                    }

        //                    transaction.Complete();
        //                    tran.Commit();
        //                    return new Response<ObjectInstAtts>();
        //                }
        //                catch (Exception err)
        //                {

        //                    tran.Rollback();
        //                    return new Response<ObjectInstAtts>(true, null, null, err.Message, (int)ApiReturnCode.fail);
        //                }
        //            }
        //        }
        //    }

        //}
        //public async Task<Response<ObjectInstAtts>> EditMWInstallation(object MWInstallationViewModel, string TableName)
        //{
        //    try
        //    {
        //        int TableNameId = 0;
        //        if (LoadSubType.TLImwODU.ToString() == TableName)
        //        {
        //            TableNameId = _unitOfWork.TablesNamesRepository.GetWhereFirst(x => x.TableName.ToLower() == TablesNames.TLImwODU.ToString().ToLower()).Id;
        //            EditMW_ODUViewModel MW_ODUViewModel = _mapper.Map<EditMW_ODUViewModel>(MWInstallationViewModel);

        //            TLIcivilLoads CivilLoads = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => !x.Dismantle && (x.allLoadInstId != null ?
        //                x.allLoadInst.mwODUId == MW_ODUViewModel.Id : false), x => x.allLoadInst);

        //            string SiteCode = "";

        //            if (CivilLoads != null)
        //                SiteCode = CivilLoads.SiteCode;

        //            else
        //                SiteCode = null;

        //            TLIcivilLoads CheckName = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => !x.Dismantle && x.allLoadInst.mwODUId != MW_ODUViewModel.Id && (x.allLoadInstId != null ?
        //                !x.allLoadInst.Draft && (x.allLoadInst.mwODUId != null ? x.allLoadInst.mwODU.Name.ToLower() == MW_ODUViewModel.Name.ToLower() : false) : false) &&
        //                x.SiteCode.ToLower() == SiteCode.ToLower(),
        //                    x => x.allLoadInst, x => x.allLoadInst.mwODU);

        //            if (CheckName != null)
        //                return new Response<ObjectInstAtts>(true, null, null, $"This name [{MW_ODUViewModel.Name}] is already exists", (int)ApiReturnCode.fail);

        //            string CheckGeneralValidation = CheckGeneralValidationFunctionEditVersion(MW_ODUViewModel.DynamicInstAttsValue, TableName);

        //            if (!string.IsNullOrEmpty(CheckGeneralValidation))
        //                return new Response<ObjectInstAtts>(true, null, null, CheckGeneralValidation, (int)ApiReturnCode.fail);

        //            string CheckDependencyValidation = CheckDependencyValidationEditVersion(MWInstallationViewModel, SiteCode, TableName);

        //            if (!string.IsNullOrEmpty(CheckDependencyValidation))
        //                return new Response<ObjectInstAtts>(true, null, null, CheckDependencyValidation, (int)ApiReturnCode.fail);

        //            TLImwODU mwODU = _mapper.Map<TLImwODU>(MW_ODUViewModel);
        //            TLImwODU OldMW_ODUViewModel = _unitOfWork.MW_ODURepository.GetAllAsQueryable().AsNoTracking().FirstOrDefault(x => x.Id == MW_ODUViewModel.Id);

        //            _unitOfWork.MW_ODURepository.UpdateWithHistory(Helpers.LogFilterAttribute.UserId, OldMW_ODUViewModel, mwODU);
        //            var allloads = _unitOfWork.AllLoadInstRepository.GetWhereFirst(x => x.mwODUId == MW_ODUViewModel.Id).Id;
        //            var civilloads = _unitOfWork.CivilLoadsRepository.GetWhereFirst(x => x.allLoadInstId == allloads);
        //            CivilLoads.InstallationDate = MW_ODUViewModel.TLIcivilLoads.InstallationDate;
        //            CivilLoads.ItemOnCivilStatus = MW_ODUViewModel.TLIcivilLoads.ItemOnCivilStatus;
        //            CivilLoads.ItemStatus = MW_ODUViewModel.TLIcivilLoads.ItemStatus;
        //            CivilLoads.ReservedSpace = MW_ODUViewModel.TLIcivilLoads.ReservedSpace;
        //            CivilLoads.sideArmId = MW_ODUViewModel.TLIcivilLoads.sideArmId;
        //            CivilLoads.allCivilInstId = MW_ODUViewModel.TLIcivilLoads.allCivilInstId;
        //            CivilLoads.legId = MW_ODUViewModel.TLIcivilLoads.legId;
        //            CivilLoads.Leg2Id = MW_ODUViewModel.TLIcivilLoads.Leg2Id;

        //            _unitOfWork.SaveChanges();
        //            if (MW_ODUViewModel.DynamicInstAttsValue != null ? MW_ODUViewModel.DynamicInstAttsValue.Count() > 0 : false)
        //                _unitOfWork.DynamicAttInstValueRepository.UpdateDynamicValue(MW_ODUViewModel.DynamicInstAttsValue, TableNameId, mwODU.Id);

        //            await _unitOfWork.SaveChangesAsync();
        //        }
        //        else if (LoadSubType.TLImwBU.ToString() == TableName)
        //        {
        //            TableNameId = _unitOfWork.TablesNamesRepository.GetWhereFirst(x => x.TableName.ToLower() == TablesNames.TLImwBU.ToString().ToLower()).Id;
        //            EditMW_BUViewModel MW_BUViewModel = _mapper.Map<EditMW_BUViewModel>(MWInstallationViewModel);

        //            TLIcivilLoads CivilLoads = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => !x.Dismantle && (x.allLoadInstId != null ?
        //                x.allLoadInst.mwBUId == MW_BUViewModel.Id : false), x => x.allLoadInst);

        //            string SiteCode = "";

        //            if (CivilLoads != null)
        //                SiteCode = CivilLoads.SiteCode;

        //            else
        //                SiteCode = null;

        //            TLIcivilLoads CheckName = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => !x.Dismantle && x.allLoadInst.mwBUId != MW_BUViewModel.Id && (x.allLoadInstId != null ?
        //                !x.allLoadInst.Draft && (x.allLoadInst.mwBUId != null ? x.allLoadInst.mwBU.Name.ToLower() == MW_BUViewModel.Name.ToLower() : false) : false) &&
        //                x.SiteCode.ToLower() == SiteCode.ToLower(),
        //                    x => x.allLoadInst, x => x.allLoadInst.mwBU);

        //            if (CheckName != null)
        //                return new Response<ObjectInstAtts>(true, null, null, $"This name [{MW_BUViewModel.Name}] is already exists", (int)ApiReturnCode.fail);

        //            string CheckGeneralValidation = CheckGeneralValidationFunctionEditVersion(MW_BUViewModel.DynamicInstAttsValue, TableName);

        //            if (!string.IsNullOrEmpty(CheckGeneralValidation))
        //                return new Response<ObjectInstAtts>(true, null, null, CheckGeneralValidation, (int)ApiReturnCode.fail);

        //            string CheckDependencyValidation = CheckDependencyValidationEditVersion(MWInstallationViewModel, SiteCode, TableName);

        //            if (!string.IsNullOrEmpty(CheckDependencyValidation))
        //                return new Response<ObjectInstAtts>(true, null, null, CheckDependencyValidation, (int)ApiReturnCode.fail);

        //            TLImwBU mwBU = _mapper.Map<TLImwBU>(MW_BUViewModel);
        //            var mw_BUInst = _unitOfWork.MW_BURepository.GetAllAsQueryable().AsNoTracking().FirstOrDefault(x => x.Id == MW_BUViewModel.Id);
        //            if (mwBU.HBA == mw_BUInst.HBA && mwBU.CenterHigh == mw_BUInst.CenterHigh && mwBU.SpaceInstallation == mw_BUInst.SpaceInstallation && mwBU.Azimuth != mw_BUInst.Azimuth && MW_BUViewModel.TLIcivilLoads.ReservedSpace == true)
        //            {
        //                var message = _unitOfWork.CivilWithLegsRepository.CheckloadsOnCivil(MW_BUViewModel.TLIcivilLoads.allCivilInstId, 0, mwBU.Azimuth, mwBU.CenterHigh).Message;
        //                if (message != "Success")
        //                {
        //                    return new Response<ObjectInstAtts>(true, null, null, message, (int)ApiReturnCode.fail);
        //                }
        //            }
        //            if (mwBU.HBA != mw_BUInst.HBA || mwBU.CenterHigh != mw_BUInst.CenterHigh || mwBU.SpaceInstallation != mw_BUInst.SpaceInstallation && MW_BUViewModel.TLIcivilLoads.ReservedSpace == true)
        //            {
        //                var mwBULibrary = db.TLImwBULibrary.Where(x => x.Id == mwBU.MwBULibraryId).FirstOrDefault();
        //                if (mwBU.CenterHigh == 0 || mwBU.CenterHigh == null)
        //                {
        //                    mwBU.CenterHigh = mwBU.HBA + mwBULibrary.Length / 2;
        //                }
        //                var message = _unitOfWork.CivilWithLegsRepository.CheckloadsOnCivil(MW_BUViewModel.TLIcivilLoads.allCivilInstId, 0, mwBU.Azimuth, mwBU.CenterHigh).Message;
        //                if (message != "Success")
        //                {
        //                    return new Response<ObjectInstAtts>(true, null, null, message, (int)ApiReturnCode.fail);
        //                }
        //                if (MW_BUViewModel.TLIcivilLoads.ReservedSpace == true && (MW_BUViewModel.TLIcivilLoads.sideArmId == null || MW_BUViewModel.TLIcivilLoads.sideArmId == 0))
        //                {
        //                    mwBU.EquivalentSpace = _unitOfWork.CivilWithLegsRepository.Checkspaceload(MW_BUViewModel.TLIcivilLoads.allCivilInstId, TableName, mwBU.SpaceInstallation, mwBU.CenterHigh, mwBU.MwBULibraryId, mwBU.HBA).Data;
        //                }
        //            }
        //            _unitOfWork.MW_BURepository.UpdateWithHistory(Helpers.LogFilterAttribute.UserId, mw_BUInst, mwBU);
        //            var allloads = _unitOfWork.AllLoadInstRepository.GetWhereFirst(x => x.mwBUId == MW_BUViewModel.Id).Id;
        //            var civilloads = _unitOfWork.CivilLoadsRepository.GetWhereFirst(x => x.allLoadInstId == allloads);
        //            CivilLoads.InstallationDate = MW_BUViewModel.TLIcivilLoads.InstallationDate;
        //            CivilLoads.ItemOnCivilStatus = MW_BUViewModel.TLIcivilLoads.ItemOnCivilStatus;
        //            CivilLoads.ItemStatus = MW_BUViewModel.TLIcivilLoads.ItemStatus;
        //            CivilLoads.ReservedSpace = MW_BUViewModel.TLIcivilLoads.ReservedSpace;
        //            CivilLoads.sideArmId = MW_BUViewModel.TLIcivilLoads.sideArmId;
        //            CivilLoads.allCivilInstId = MW_BUViewModel.TLIcivilLoads.allCivilInstId;
        //            CivilLoads.legId = MW_BUViewModel.TLIcivilLoads.legId;
        //            CivilLoads.Leg2Id = MW_BUViewModel.TLIcivilLoads.Leg2Id;

        //            _unitOfWork.SaveChanges();
        //            if (MW_BUViewModel.DynamicInstAttsValue != null ? MW_BUViewModel.DynamicInstAttsValue.Count > 0 : false)
        //                _unitOfWork.DynamicAttInstValueRepository.UpdateDynamicValue(MW_BUViewModel.DynamicInstAttsValue, TableNameId, mwBU.Id);

        //            await _unitOfWork.SaveChangesAsync();
        //        }
        //        else if (LoadSubType.TLImwDish.ToString() == TableName)
        //        {
        //            TableNameId = _unitOfWork.TablesNamesRepository.GetWhereFirst(x => x.TableName.ToLower() == TablesNames.TLImwDish.ToString().ToLower()).Id;
        //            EditMW_DishViewModel MW_DishViewModel = _mapper.Map<EditMW_DishViewModel>(MWInstallationViewModel);

        //            TLIcivilLoads CivilLoads = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => !x.Dismantle && (x.allLoadInstId != null ?
        //                x.allLoadInst.mwDishId == MW_DishViewModel.Id : false), x => x.allLoadInst);

        //            string SiteCode = "";

        //            if (CivilLoads != null)
        //                SiteCode = CivilLoads.SiteCode;

        //            else
        //                SiteCode = null;

        //            TLIcivilLoads CheckName = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => !x.Dismantle && x.allLoadInst.mwDishId != MW_DishViewModel.Id && (x.allLoadInstId != null ?
        //                !x.allLoadInst.Draft && (x.allLoadInst.mwDishId != null ? x.allLoadInst.mwDish.DishName.ToLower() == MW_DishViewModel.DishName.ToLower() : false) : false) &&
        //                x.SiteCode.ToLower() == SiteCode.ToLower(),
        //                    x => x.allLoadInst, x => x.allLoadInst.mwDish);

        //            if (CheckName != null)
        //                return new Response<ObjectInstAtts>(true, null, null, $"This name [{MW_DishViewModel.DishName}] is already exists", (int)ApiReturnCode.fail);

        //            string CheckGeneralValidation = CheckGeneralValidationFunctionEditVersion(MW_DishViewModel.DynamicInstAttsValue, TableName);

        //            if (!string.IsNullOrEmpty(CheckGeneralValidation))
        //                return new Response<ObjectInstAtts>(true, null, null, CheckGeneralValidation, (int)ApiReturnCode.fail);

        //            string CheckDependencyValidation = CheckDependencyValidationEditVersion(MWInstallationViewModel, SiteCode, TableName);

        //            if (!string.IsNullOrEmpty(CheckDependencyValidation))
        //                return new Response<ObjectInstAtts>(true, null, null, CheckDependencyValidation, (int)ApiReturnCode.fail);

        //            TLImwDish mwDish = _mapper.Map<TLImwDish>(MW_DishViewModel);
        //            TLImwDish OldMW_DishViewModel = _unitOfWork.MW_DishRepository.GetAllAsQueryable().AsNoTracking().FirstOrDefault(x => x.Id == MW_DishViewModel.Id);
        //            if (mwDish.HBA == OldMW_DishViewModel.HBA && mwDish.CenterHigh == OldMW_DishViewModel.CenterHigh && mwDish.SpaceInstallation == OldMW_DishViewModel.SpaceInstallation && mwDish.Azimuth != OldMW_DishViewModel.Azimuth && MW_DishViewModel.TLIcivilLoads.ReservedSpace == true)
        //            {
        //                var message = _unitOfWork.CivilWithLegsRepository.CheckloadsOnCivil(MW_DishViewModel.TLIcivilLoads.allCivilInstId, 0, mwDish.Azimuth, mwDish.CenterHigh).Message;
        //                if (message != "Success")
        //                {
        //                    return new Response<ObjectInstAtts>(true, null, null, message, (int)ApiReturnCode.fail);
        //                }
        //            }
        //            if (mwDish.HBA != OldMW_DishViewModel.HBA || mwDish.CenterHigh != OldMW_DishViewModel.CenterHigh || mwDish.SpaceInstallation != OldMW_DishViewModel.SpaceInstallation && MW_DishViewModel.TLIcivilLoads.ReservedSpace == true)
        //            {
        //                var mwDishLibrary = db.TLImwDishLibrary.Where(x => x.Id == mwDish.MwDishLibraryId).FirstOrDefault();
        //                if (mwDish.CenterHigh == 0 || mwDish.CenterHigh == null)
        //                {
        //                    mwDish.CenterHigh = mwDish.HBA + mwDishLibrary.Length / 2;
        //                }
        //                var message = _unitOfWork.CivilWithLegsRepository.CheckloadsOnCivil(MW_DishViewModel.TLIcivilLoads.allCivilInstId, 0, mwDish.Azimuth, mwDish.CenterHigh).Message;
        //                if (message != "Success")
        //                {
        //                    return new Response<ObjectInstAtts>(true, null, null, message, (int)ApiReturnCode.fail);
        //                }
        //                if (MW_DishViewModel.TLIcivilLoads.ReservedSpace == true && (MW_DishViewModel.TLIcivilLoads.sideArmId == null || MW_DishViewModel.TLIcivilLoads.sideArmId == 0))
        //                {
        //                    mwDish.EquivalentSpace = _unitOfWork.CivilWithLegsRepository.Checkspaceload(MW_DishViewModel.TLIcivilLoads.allCivilInstId, TableName, mwDish.SpaceInstallation, mwDish.CenterHigh, mwDish.MwDishLibraryId, mwDish.HBA).Data;
        //                }
        //            }
        //            _unitOfWork.MW_DishRepository.UpdateWithHistory(Helpers.LogFilterAttribute.UserId, OldMW_DishViewModel, mwDish);
        //            var allloads = _unitOfWork.AllLoadInstRepository.GetWhereFirst(x => x.mwDishId == MW_DishViewModel.Id).Id;
        //            var civilloads = _unitOfWork.CivilLoadsRepository.GetWhereFirst(x => x.allLoadInstId == allloads);
        //            CivilLoads.InstallationDate = MW_DishViewModel.TLIcivilLoads.InstallationDate;
        //            CivilLoads.ItemOnCivilStatus = MW_DishViewModel.TLIcivilLoads.ItemOnCivilStatus;
        //            CivilLoads.ItemStatus = MW_DishViewModel.TLIcivilLoads.ItemStatus;
        //            CivilLoads.ReservedSpace = MW_DishViewModel.TLIcivilLoads.ReservedSpace;
        //            CivilLoads.sideArmId = MW_DishViewModel.TLIcivilLoads.sideArmId;
        //            CivilLoads.allCivilInstId = MW_DishViewModel.TLIcivilLoads.allCivilInstId;
        //            CivilLoads.legId = MW_DishViewModel.TLIcivilLoads.legId;
        //            CivilLoads.Leg2Id = MW_DishViewModel.TLIcivilLoads.Leg2Id;

        //            _unitOfWork.SaveChanges();
        //            if (MW_DishViewModel.DynamicInstAttsValue != null ? MW_DishViewModel.DynamicInstAttsValue.Count > 0 : false)
        //            {
        //                _unitOfWork.DynamicAttInstValueRepository.UpdateDynamicValue(MW_DishViewModel.DynamicInstAttsValue, TableNameId, mwDish.Id);
        //            }
        //            await _unitOfWork.SaveChangesAsync();
        //        }
        //        else if (LoadSubType.TLImwRFU.ToString() == TableName)
        //        {
        //            TableNameId = _unitOfWork.TablesNamesRepository.GetWhereFirst(x => x.TableName.ToLower() == TablesNames.TLImwRFU.ToString().ToLower()).Id;
        //            EditMW_RFUViewModel MW_RFUViewModel = _mapper.Map<EditMW_RFUViewModel>(MWInstallationViewModel);

        //            TLIcivilLoads CivilLoads = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => !x.Dismantle && (x.allLoadInstId != null ?
        //                x.allLoadInst.mwRFUId == MW_RFUViewModel.Id : false), x => x.allLoadInst);

        //            string SiteCode = "";

        //            if (CivilLoads != null)
        //                SiteCode = CivilLoads.SiteCode;

        //            else
        //                SiteCode = null;

        //            TLIcivilLoads CheckName = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => !x.Dismantle && x.allLoadInst.mwRFUId != MW_RFUViewModel.Id && (x.allLoadInstId != null ?
        //                !x.allLoadInst.Draft && (x.allLoadInst.mwRFUId != null ? x.allLoadInst.mwRFU.Name.ToLower() == MW_RFUViewModel.Name.ToLower() : false) : false) &&
        //                x.SiteCode.ToLower() == SiteCode.ToLower(),
        //                    x => x.allLoadInst, x => x.allLoadInst.mwRFU);

        //            if (CheckName != null)
        //                return new Response<ObjectInstAtts>(true, null, null, $"This name [{MW_RFUViewModel.Name}] is already exists", (int)ApiReturnCode.fail);

        //            string CheckGeneralValidation = CheckGeneralValidationFunctionEditVersion(MW_RFUViewModel.DynamicInstAttsValue, TableName);

        //            if (!string.IsNullOrEmpty(CheckGeneralValidation))
        //                return new Response<ObjectInstAtts>(true, null, null, CheckGeneralValidation, (int)ApiReturnCode.fail);

        //            string CheckDependencyValidation = CheckDependencyValidationEditVersion(MWInstallationViewModel, SiteCode, TableName);

        //            if (!string.IsNullOrEmpty(CheckDependencyValidation))
        //                return new Response<ObjectInstAtts>(true, null, null, CheckDependencyValidation, (int)ApiReturnCode.fail);

        //            TLImwRFU mwRFU = _mapper.Map<TLImwRFU>(MW_RFUViewModel);
        //            TLImwRFU OldMW_RFUViewModel = _unitOfWork.MW_RFURepository.GetAllAsQueryable().AsNoTracking().FirstOrDefault(x => x.Id == MW_RFUViewModel.Id);
        //            if (mwRFU.HBA == OldMW_RFUViewModel.HBA && mwRFU.CenterHigh == OldMW_RFUViewModel.CenterHigh && mwRFU.SpaceInstallation == OldMW_RFUViewModel.SpaceInstallation && mwRFU.Azimuth != OldMW_RFUViewModel.Azimuth && MW_RFUViewModel.TLIcivilLoads.ReservedSpace == true)
        //            {
        //                var message = _unitOfWork.CivilWithLegsRepository.CheckloadsOnCivil(MW_RFUViewModel.TLIcivilLoads.allCivilInstId, 0, mwRFU.Azimuth, mwRFU.CenterHigh).Message;
        //                if (message != "Success")
        //                {
        //                    return new Response<ObjectInstAtts>(true, null, null, message, (int)ApiReturnCode.fail);
        //                }
        //            }
        //            if (mwRFU.HBA != OldMW_RFUViewModel.HBA || mwRFU.CenterHigh != OldMW_RFUViewModel.CenterHigh || mwRFU.SpaceInstallation != OldMW_RFUViewModel.SpaceInstallation && MW_RFUViewModel.TLIcivilLoads.ReservedSpace == true)
        //            {
        //                var mwRFULibrary = db.TLImwRFULibrary.Where(x => x.Id == mwRFU.MwRFULibraryId).FirstOrDefault();
        //                if (mwRFU.CenterHigh == 0 || mwRFU.CenterHigh == null)
        //                {
        //                    mwRFU.CenterHigh = mwRFU.HBA + mwRFULibrary.Length / 2;
        //                }
        //                var message = _unitOfWork.CivilWithLegsRepository.CheckloadsOnCivil(MW_RFUViewModel.TLIcivilLoads.allCivilInstId, 0, mwRFU.Azimuth, mwRFU.CenterHigh).Message;
        //                if (message != "Success")
        //                {
        //                    return new Response<ObjectInstAtts>(true, null, null, message, (int)ApiReturnCode.fail);
        //                }
        //                if (MW_RFUViewModel.TLIcivilLoads.ReservedSpace == true && (MW_RFUViewModel.TLIcivilLoads.sideArmId == null || MW_RFUViewModel.TLIcivilLoads.sideArmId == 0))
        //                {
        //                    mwRFU.EquivalentSpace = _unitOfWork.CivilWithLegsRepository.Checkspaceload(MW_RFUViewModel.TLIcivilLoads.allCivilInstId, TableName, mwRFU.SpaceInstallation, mwRFU.CenterHigh, mwRFU.MwRFULibraryId, mwRFU.HBA).Data;
        //                }
        //            }
        //            _unitOfWork.MW_RFURepository.UpdateWithHistory(Helpers.LogFilterAttribute.UserId, OldMW_RFUViewModel, mwRFU);
        //            var allloads = _unitOfWork.AllLoadInstRepository.GetWhereFirst(x => x.mwRFUId == MW_RFUViewModel.Id).Id;
        //            var civilloads = _unitOfWork.CivilLoadsRepository.GetWhereFirst(x => x.allLoadInstId == allloads);
        //            CivilLoads.InstallationDate = MW_RFUViewModel.TLIcivilLoads.InstallationDate;
        //            CivilLoads.ItemOnCivilStatus = MW_RFUViewModel.TLIcivilLoads.ItemOnCivilStatus;
        //            CivilLoads.ItemStatus = MW_RFUViewModel.TLIcivilLoads.ItemStatus;
        //            CivilLoads.ReservedSpace = MW_RFUViewModel.TLIcivilLoads.ReservedSpace;
        //            CivilLoads.sideArmId = MW_RFUViewModel.TLIcivilLoads.sideArmId;
        //            CivilLoads.allCivilInstId = MW_RFUViewModel.TLIcivilLoads.allCivilInstId;
        //            CivilLoads.legId = MW_RFUViewModel.TLIcivilLoads.legId;
        //            CivilLoads.Leg2Id = MW_RFUViewModel.TLIcivilLoads.Leg2Id;

        //            _unitOfWork.SaveChanges();
        //            if (MW_RFUViewModel.DynamicInstAttsValue.Count > 0)
        //            {
        //                _unitOfWork.DynamicAttInstValueRepository.UpdateDynamicValue(MW_RFUViewModel.DynamicInstAttsValue, TableNameId, mwRFU.Id);
        //            }
        //            await _unitOfWork.SaveChangesAsync();
        //        }
        //        else if (LoadSubType.TLImwOther.ToString() == TableName)
        //        {
        //            TableNameId = _unitOfWork.TablesNamesRepository.GetWhereFirst(x => x.TableName.ToLower() == TablesNames.TLImwOther.ToString().ToLower()).Id;
        //            EditMw_OtherViewModel Mw_OtherViewModel = _mapper.Map<EditMw_OtherViewModel>(MWInstallationViewModel);

        //            TLIcivilLoads CivilLoads = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => !x.Dismantle && (x.allLoadInstId != null ?
        //                x.allLoadInst.mwOtherId == Mw_OtherViewModel.Id : false), x => x.allLoadInst);

        //            string SiteCode = "";

        //            if (CivilLoads != null)
        //                SiteCode = CivilLoads.SiteCode;

        //            else
        //                SiteCode = null;

        //            TLIcivilLoads CheckName = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => !x.Dismantle && x.allLoadInst.mwOtherId != Mw_OtherViewModel.Id && (x.allLoadInstId != null ?
        //                !x.allLoadInst.Draft && (x.allLoadInst.mwOtherId != null ? x.allLoadInst.mwOther.Name.ToLower() == Mw_OtherViewModel.Name.ToLower() : false) : false) &&
        //                x.SiteCode.ToLower() == SiteCode.ToLower(),
        //                    x => x.allLoadInst, x => x.allLoadInst.mwOther);

        //            if (CheckName != null)
        //                return new Response<ObjectInstAtts>(true, null, null, $"This name [{Mw_OtherViewModel.Name}] is already exists", (int)ApiReturnCode.fail);

        //            string CheckGeneralValidation = CheckGeneralValidationFunctionEditVersion(Mw_OtherViewModel.DynamicInstAttsValue, TableName);

        //            if (!string.IsNullOrEmpty(CheckGeneralValidation))
        //                return new Response<ObjectInstAtts>(true, null, null, CheckGeneralValidation, (int)ApiReturnCode.fail);

        //            string CheckDependencyValidation = CheckDependencyValidationEditVersion(MWInstallationViewModel, SiteCode, TableName);

        //            if (!string.IsNullOrEmpty(CheckDependencyValidation))
        //                return new Response<ObjectInstAtts>(true, null, null, CheckDependencyValidation, (int)ApiReturnCode.fail);

        //            TLImwOther mwOther = _mapper.Map<TLImwOther>(Mw_OtherViewModel);
        //            TLImwOther OldMw_OtherViewModel = _unitOfWork.Mw_OtherRepository.GetAllAsQueryable().AsNoTracking().FirstOrDefault(x => x.Id == Mw_OtherViewModel.Id);
        //            if (mwOther.HBA != OldMw_OtherViewModel.HBA || mwOther.CenterHigh != OldMw_OtherViewModel.CenterHigh || mwOther.Spaceinstallation != OldMw_OtherViewModel.Spaceinstallation && Mw_OtherViewModel.TLIcivilLoads.ReservedSpace == true)
        //            {
        //                var mwOtherLibrary = db.TLImwOtherLibrary.Where(x => x.Id == mwOther.mwOtherLibraryId).FirstOrDefault();
        //                if (mwOther.CenterHigh == 0 || mwOther.CenterHigh == null)
        //                {
        //                    mwOther.CenterHigh = mwOther.HBA + mwOtherLibrary.Length / 2;
        //                }
        //                if (Mw_OtherViewModel.TLIcivilLoads.ReservedSpace == true && (Mw_OtherViewModel.TLIcivilLoads.sideArmId == null || Mw_OtherViewModel.TLIcivilLoads.sideArmId == 0))
        //                {
        //                    mwOther.EquivalentSpace = _unitOfWork.CivilWithLegsRepository.Checkspaceload(Mw_OtherViewModel.TLIcivilLoads.allCivilInstId, TableName, mwOther.Spaceinstallation, mwOther.CenterHigh, mwOther.mwOtherLibraryId, mwOther.HBA).Data;
        //                }
        //            }
        //            _unitOfWork.Mw_OtherRepository.UpdateWithHistory(Helpers.LogFilterAttribute.UserId, OldMw_OtherViewModel, mwOther);
        //            var allloads = _unitOfWork.AllLoadInstRepository.GetWhereFirst(x => x.mwOtherId == Mw_OtherViewModel.Id).Id;
        //            var civilloads = _unitOfWork.CivilLoadsRepository.GetWhereFirst(x => x.allLoadInstId == allloads);
        //            CivilLoads.InstallationDate = Mw_OtherViewModel.TLIcivilLoads.InstallationDate;
        //            CivilLoads.ItemOnCivilStatus = Mw_OtherViewModel.TLIcivilLoads.ItemOnCivilStatus;
        //            CivilLoads.ItemStatus = Mw_OtherViewModel.TLIcivilLoads.ItemStatus;
        //            CivilLoads.ReservedSpace = Mw_OtherViewModel.TLIcivilLoads.ReservedSpace;
        //            CivilLoads.sideArmId = Mw_OtherViewModel.TLIcivilLoads.sideArmId;
        //            CivilLoads.allCivilInstId = Mw_OtherViewModel.TLIcivilLoads.allCivilInstId;
        //            CivilLoads.legId = Mw_OtherViewModel.TLIcivilLoads.legId;
        //            CivilLoads.Leg2Id = Mw_OtherViewModel.TLIcivilLoads.Leg2Id;

        //            _unitOfWork.SaveChanges();
        //            if (Mw_OtherViewModel.DynamicInstAttsValue.Count > 0)
        //            {
        //                _unitOfWork.DynamicAttInstValueRepository.UpdateDynamicValue(Mw_OtherViewModel.DynamicInstAttsValue, TableNameId, mwOther.Id);
        //            }
        //            await _unitOfWork.SaveChangesAsync();
        //        }
        //        return new Response<ObjectInstAtts>();
        //    }
        //    catch (Exception err)
        //    {
        //        return new Response<ObjectInstAtts>(true, null, null, err.Message, (int)ApiReturnCode.fail);
        //    }
        //}
        //public Response<bool> DismantleLoads(string sitecode, int LoadId, string LoadName)
        //{
        //    try
        //    {
        //        double? Freespace = 0;
        //        double? EquivalentSpace = 0;
        //        var allLoadInst = db.TLIallLoadInst.Where(x => x.mwBUId == LoadId || x.mwDishId == LoadId || x.mwODUId == LoadId || x.mwRFUId == LoadId || x.mwOtherId == LoadId || x.radioAntennaId == LoadId || x.radioRRUId == LoadId || x.radioOtherId == LoadId || x.powerId == LoadId || x.loadOtherId == LoadId)
        //            .Include(x => x.mwBU).Include(x => x.mwDish).Include(x => x.mwODU)
        //            .Include(x => x.mwRFU).Include(x => x.mwOther).Include(x => x.radioAntenna).Include(x => x.radioRRU).Include(x => x.radioOther).
        //            Include(x => x.power).Include(x => x.loadOther).ToList();

        //        foreach (var item in allLoadInst)
        //        {
        //            var civilload = db.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id).Select(x => x.allCivilInstId).ToList();
        //            foreach (var civilloadinst in civilload)
        //            {
        //                var allcivil = db.TLIallCivilInst.Where(x => x.Id == civilloadinst).Include(x => x.civilWithLegs).Include(x => x.civilWithoutLeg).Include(x => x.civilNonSteel).ToList();


        //                foreach (var t in allcivil)
        //                {
        //                    if (t.civilWithLegsId != null)
        //                    {
        //                        if (item.mwBUId != null && LoadName == TablesNames.TLImwBU.ToString())
        //                        {

        //                            TLImwBU TLImwBU = item.mwBU;
        //                            var PortCascadeId = db.TLImwBU.Where(x => x.Id == item.mwBUId).Select(x => x.PortCascadeId).FirstOrDefault();
        //                            var PortCascade = db.TLImwPort.Where(x => x.Id == PortCascadeId).ToList();
        //                            foreach (var Port in PortCascade)
        //                            {
        //                                var allload = db.TLIallLoadInst.Where(x => x.mwBUId == Port.MwBUId).Select(x => x.Id).FirstOrDefault();
        //                                var Civilloads = db.TLIcivilLoads.Where(x => x.allLoadInstId == allload && x.allCivilInstId == t.Id && x.Dismantle == false).FirstOrDefault();
        //                                if (Civilloads != null)
        //                                {
        //                                    Civilloads.Dismantle = true;
        //                                    EquivalentSpace += 0;
        //                                    Port.MwBUId = 0;
        //                                    Port.MwBULibraryId = 0;
        //                                }
        //                            }
        //                            var mwport = db.TLImwPort.Where(x => x.MwBUId == item.mwBUId).Select(x => x.Id).ToList();
        //                            foreach (var port in mwport)
        //                            {
        //                                var mwrfu = db.TLImwRFU.Where(x => x.MwPortId == port).Select(x => x.Id).ToList();

        //                                foreach (var rfu in mwrfu)
        //                                {
        //                                    var allLoadRFU = db.TLIallLoadInst.Where(x => x.mwRFUId == rfu).Select(x => x.Id).ToList();
        //                                    foreach (var allLoad in allLoadRFU)
        //                                    {
        //                                        var MwRfu = db.TLIcivilLoads.Where(x => x.allLoadInstId == allLoad && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //                                        foreach (var MWRfU in MwRfu)
        //                                        {
        //                                            MWRfU.Dismantle = true;
        //                                            EquivalentSpace += 0;
        //                                        }

        //                                    }
        //                                }

        //                            }
        //                            var civilLoads = db.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.Dismantle == false && x.SiteCode == sitecode && x.allCivilInstId == t.Id).ToList();
        //                            foreach (var civilLoad in civilLoads)
        //                            {
        //                                civilLoad.Dismantle = true;
        //                                if (civilLoad.sideArmId == null)
        //                                {

        //                                    EquivalentSpace += 0;

        //                                }
        //                                else
        //                                {
        //                                    EquivalentSpace += 0;
        //                                }

        //                            }
        //                            TLIcivilWithLegs tLIcivilWithLegs = t.civilWithLegs;
        //                            tLIcivilWithLegs.CurrentLoads = tLIcivilWithLegs.CurrentLoads - EquivalentSpace;
        //                        }
        //                        else if (item.mwDishId != null && LoadName == TablesNames.TLImwDish.ToString())
        //                        {
        //                            TLImwDish TLImwDish = item.mwDish;
        //                            var mwODU = db.TLImwODU.Where(x => x.Mw_DishId == item.mwDishId).Select(x => x.Id).ToList();
        //                            foreach (var ODU in mwODU)
        //                            {
        //                                var allLoadinst = db.TLIallLoadInst.Where(x => x.mwODUId == ODU).Select(x => x.Id).ToList();
        //                                foreach (var Load in allLoadinst)
        //                                {
        //                                    var civil = db.TLIcivilLoads.Where(x => x.allLoadInstId == Load && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();


        //                                    foreach (var civillload in civil)
        //                                    {
        //                                        civillload.Dismantle = true;
        //                                        if (civillload.sideArmId == null)
        //                                        {
        //                                            EquivalentSpace += 0;
        //                                        }
        //                                        else
        //                                        {
        //                                            EquivalentSpace += 0;
        //                                        }
        //                                    }
        //                                }
        //                            }
        //                            var mwdish = db.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == true && x.Dismantle == false).ToList();
        //                            foreach (var TlImwdish in mwdish)
        //                            {
        //                                TlImwdish.Dismantle = true;
        //                                var Bu = db.TLImwBU.Where(x => x.MainDishId == item.mwDishId).ToList();
        //                                foreach (var TLIBu in Bu)
        //                                {
        //                                    TLIBu.MainDishId = null;
        //                                }
        //                                if (TlImwdish.sideArmId == null)
        //                                {
        //                                    EquivalentSpace += TLImwDish.EquivalentSpace;
        //                                }
        //                                else
        //                                {
        //                                    EquivalentSpace += 0;
        //                                }

        //                            }
        //                            var TLImwdish = db.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == false && x.Dismantle == false).ToList();
        //                            foreach (var TLmwdish in TLImwdish)
        //                            {
        //                                TLmwdish.Dismantle = true;
        //                                var Bu = db.TLImwBU.Where(x => x.MainDishId == item.mwDishId).ToList();
        //                                foreach (var TLIBu in Bu)
        //                                {
        //                                    TLIBu.MainDishId = null;
        //                                }
        //                            }
        //                            TLIcivilWithLegs tLIcivilWithLegs = t.civilWithLegs;
        //                            tLIcivilWithLegs.CurrentLoads = tLIcivilWithLegs.CurrentLoads - EquivalentSpace;

        //                        }
        //                        else if (item.mwODUId != null && LoadName == TablesNames.TLImwODU.ToString())
        //                        {
        //                            TLImwODU TLImwODU = item.mwODU;
        //                            var MWODU = db.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //                            foreach (var mwodu in MWODU)
        //                            {
        //                                mwodu.Dismantle = true;
        //                                EquivalentSpace += 0;
        //                            }
        //                            TLIcivilWithLegs tLIcivilWithLegs = t.civilWithLegs;
        //                            tLIcivilWithLegs.CurrentLoads = tLIcivilWithLegs.CurrentLoads - EquivalentSpace;

        //                        }
        //                        else if (item.mwRFUId != null && LoadName == TablesNames.TLImwRFU.ToString())
        //                        {
        //                            TLImwRFU TLImwRFU = item.mwRFU;
        //                            var MWRFU = db.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //                            foreach (var mwrfu in MWRFU)
        //                            {
        //                                mwrfu.Dismantle = true;
        //                                EquivalentSpace += 0;
        //                            }
        //                            TLIcivilWithLegs tLIcivilWithLegs = t.civilWithLegs;
        //                            tLIcivilWithLegs.CurrentLoads = tLIcivilWithLegs.CurrentLoads - EquivalentSpace;
        //                        }
        //                        else if (item.mwOtherId != null && LoadName == TablesNames.TLImwOther.ToString())
        //                        {
        //                            TLImwOther TLImwOther = item.mwOther;
        //                            var MWOTHER = db.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == true && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //                            foreach (var mwother in MWOTHER)
        //                            {
        //                                mwother.Dismantle = true;
        //                                if (mwother.sideArmId == null)
        //                                {
        //                                    EquivalentSpace += TLImwOther.EquivalentSpace;
        //                                }
        //                                else
        //                                {
        //                                    EquivalentSpace += 0;
        //                                }

        //                            }
        //                            var TLIMWOTHER = db.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == false && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //                            foreach (var mwother in TLIMWOTHER)
        //                            {
        //                                mwother.Dismantle = true;
        //                            }
        //                            TLIcivilWithLegs tLIcivilWithLegs = t.civilWithLegs;
        //                            tLIcivilWithLegs.CurrentLoads = tLIcivilWithLegs.CurrentLoads - EquivalentSpace;
        //                        }
        //                        else if (item.radioAntennaId != null && LoadName == TablesNames.TLIradioAntenna.ToString())
        //                        {
        //                            TLIradioAntenna TLIradioAntenna = item.radioAntenna;
        //                            var RADIOANTENNA = db.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == true && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //                            foreach (var radioantenna in RADIOANTENNA)
        //                            {
        //                                radioantenna.Dismantle = true;
        //                                var RadioRRu = db.TLIRadioRRU.Where(x => x.radioAntennaId == item.radioAntennaId).ToList();
        //                                foreach (var radioRru in RadioRRu)
        //                                {
        //                                    radioRru.radioAntennaId = null;
        //                                }
        //                                if (radioantenna.sideArmId == null)
        //                                {
        //                                    EquivalentSpace += TLIradioAntenna.EquivalentSpace;
        //                                }
        //                                else
        //                                {
        //                                    EquivalentSpace += 0;
        //                                }

        //                            }
        //                            var TLIRADIOANTENNA = db.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == false && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //                            foreach (var radioantenna in TLIRADIOANTENNA)
        //                            {
        //                                radioantenna.Dismantle = true;
        //                                var RadioRRu = db.TLIRadioRRU.Where(x => x.radioAntennaId == item.radioAntennaId).ToList();
        //                                foreach (var radioRru in RadioRRu)
        //                                {
        //                                    radioRru.radioAntennaId = null;
        //                                }
        //                            }
        //                            TLIcivilWithLegs tLIcivilWithLegs = t.civilWithLegs;
        //                            tLIcivilWithLegs.CurrentLoads = tLIcivilWithLegs.CurrentLoads - EquivalentSpace;
        //                        }
        //                        else if (item.radioRRUId != null && LoadName == TablesNames.TLIradioRRU.ToString())
        //                        {

        //                            TLIRadioRRU TLIRadioRRU = item.radioRRU;
        //                            var RADIORRU = db.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == true && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //                            foreach (var radiorru in RADIORRU)
        //                            {
        //                                radiorru.Dismantle = true;
        //                                if (radiorru.sideArmId == null)
        //                                {
        //                                    EquivalentSpace += TLIRadioRRU.EquivalentSpace;
        //                                }
        //                                else
        //                                {
        //                                    EquivalentSpace += 0;
        //                                }
        //                            }
        //                            var TLIRADIORRU = db.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == false && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //                            foreach (var radio in TLIRADIORRU)
        //                            {
        //                                radio.Dismantle = true;
        //                            }
        //                            TLIcivilWithLegs tLIcivilWithLegs = t.civilWithLegs;
        //                            tLIcivilWithLegs.CurrentLoads = tLIcivilWithLegs.CurrentLoads - EquivalentSpace;
        //                        }
        //                        else if (item.radioOtherId != null && LoadName == TablesNames.TLIradioOther.ToString())
        //                        {
        //                            TLIradioOther TLIradioOther = item.radioOther;
        //                            var RADIOOTHER = db.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == true && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //                            foreach (var radioother in RADIOOTHER)
        //                            {
        //                                radioother.Dismantle = true;
        //                                if (radioother.sideArmId == null)
        //                                {
        //                                    EquivalentSpace += TLIradioOther.EquivalentSpace;
        //                                }
        //                                else
        //                                {
        //                                    EquivalentSpace += 0;
        //                                }
        //                            }
        //                            var TLIRADIOOTHER = db.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == false && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //                            foreach (var radioother in TLIRADIOOTHER)
        //                            {
        //                                radioother.Dismantle = true;
        //                            }
        //                            TLIcivilWithLegs tLIcivilWithLegs = t.civilWithLegs;
        //                            tLIcivilWithLegs.CurrentLoads = tLIcivilWithLegs.CurrentLoads - EquivalentSpace;
        //                        }
        //                        else if (item.powerId != null && LoadName == TablesNames.TLIpower.ToString())
        //                        {
        //                            TLIpower TLIpower = item.power;
        //                            var POWER = db.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == true && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //                            foreach (var power in POWER)
        //                            {
        //                                power.Dismantle = true;
        //                                if (power.sideArmId == null)
        //                                {
        //                                    EquivalentSpace += TLIpower.EquivalentSpace;
        //                                }
        //                                else
        //                                {
        //                                    EquivalentSpace += 0;
        //                                }
        //                            }
        //                            var TLIPOWER = db.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == false && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //                            foreach (var power in TLIPOWER)
        //                            {
        //                                power.Dismantle = true;
        //                            }
        //                            TLIcivilWithLegs tLIcivilWithLegs = t.civilWithLegs;
        //                            tLIcivilWithLegs.CurrentLoads = tLIcivilWithLegs.CurrentLoads - EquivalentSpace;
        //                        }
        //                        else if (item.loadOtherId != null && LoadName == TablesNames.TLIloadOther.ToString())
        //                        {
        //                            TLIloadOther tLIloadOther = item.loadOther;
        //                            var LOADOTHER = db.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == true && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //                            foreach (var loadother in LOADOTHER)
        //                            {
        //                                loadother.Dismantle = true;
        //                                if (loadother.sideArmId == null)
        //                                {
        //                                    EquivalentSpace += tLIloadOther.EquivalentSpace;
        //                                }
        //                                else
        //                                {
        //                                    EquivalentSpace += 0;
        //                                }
        //                            }
        //                            var TLILOADOTHER = db.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == false && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //                            foreach (var loadother in TLILOADOTHER)
        //                            {
        //                                loadother.Dismantle = true;
        //                            }
        //                            TLIcivilWithLegs tLIcivilWithLegs = t.civilWithLegs;
        //                            tLIcivilWithLegs.CurrentLoads = tLIcivilWithLegs.CurrentLoads - EquivalentSpace;
        //                        }
        //                        db.SaveChanges();
        //                    }
        //                    else if (t.civilWithoutLegId != null)
        //                    {

        //                        if (item.mwBUId != null && LoadName == TablesNames.TLImwBU.ToString())
        //                        {

        //                            TLImwBU TLImwBU = item.mwBU;
        //                            var PortCascadeId = db.TLImwBU.Where(x => x.Id == item.mwBUId).Select(x => x.PortCascadeId).FirstOrDefault();
        //                            var PortCascade = db.TLImwPort.Where(x => x.Id == PortCascadeId).ToList();
        //                            foreach (var Port in PortCascade)
        //                            {
        //                                var allload = db.TLIallLoadInst.Where(x => x.mwBUId == Port.MwBUId).Select(x => x.Id).FirstOrDefault();
        //                                var Civilloads = db.TLIcivilLoads.Where(x => x.allLoadInstId == allload && x.allCivilInstId == t.Id && x.Dismantle == false).FirstOrDefault();
        //                                if (Civilloads != null)
        //                                {
        //                                    Civilloads.Dismantle = true;
        //                                    EquivalentSpace += 0;
        //                                    Port.MwBUId = 0;
        //                                    Port.MwBULibraryId = 0;
        //                                }
        //                            }
        //                            var mwport = db.TLImwPort.Where(x => x.MwBUId == item.mwBUId).Select(x => x.Id).ToList();
        //                            foreach (var port in mwport)
        //                            {
        //                                var mwrfu = db.TLImwRFU.Where(x => x.MwPortId == port).Select(x => x.Id).ToList();

        //                                foreach (var rfu in mwrfu)
        //                                {
        //                                    var allLoadRFU = db.TLIallLoadInst.Where(x => x.mwRFUId == rfu).Select(x => x.Id).ToList();
        //                                    foreach (var allLoad in allLoadRFU)
        //                                    {
        //                                        var MwRfu = db.TLIcivilLoads.Where(x => x.allLoadInstId == allLoad && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //                                        foreach (var MWRfU in MwRfu)
        //                                        {
        //                                            MWRfU.Dismantle = true;
        //                                            EquivalentSpace += 0;
        //                                        }

        //                                    }
        //                                }

        //                            }
        //                            var civilLoads = db.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.Dismantle == false && x.SiteCode == sitecode && x.allCivilInstId == t.Id).ToList();
        //                            foreach (var civilLoad in civilLoads)
        //                            {
        //                                civilLoad.Dismantle = true;
        //                                if (civilLoad.sideArmId == null)
        //                                {

        //                                    EquivalentSpace += 0;

        //                                }
        //                                else
        //                                {
        //                                    EquivalentSpace += 0;
        //                                }

        //                            }
        //                            TLIcivilWithoutLeg tLIcivilWithoutLeg = t.civilWithoutLeg;
        //                            tLIcivilWithoutLeg.CurrentLoads = tLIcivilWithoutLeg.CurrentLoads - (float?)EquivalentSpace;
        //                        }
        //                        else if (item.mwDishId != null && LoadName == TablesNames.TLImwDish.ToString())
        //                        {
        //                            TLImwDish TLImwDish = item.mwDish;
        //                            var mwODU = db.TLImwODU.Where(x => x.Mw_DishId == item.mwDishId).Select(x => x.Id).ToList();
        //                            foreach (var ODU in mwODU)
        //                            {
        //                                var allLoadinst = db.TLIallLoadInst.Where(x => x.mwODUId == ODU).Select(x => x.Id).ToList();
        //                                foreach (var Load in allLoadinst)
        //                                {
        //                                    var civil = db.TLIcivilLoads.Where(x => x.allLoadInstId == Load && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();


        //                                    foreach (var civillload in civil)
        //                                    {
        //                                        civillload.Dismantle = true;
        //                                        if (civillload.sideArmId == null)
        //                                        {
        //                                            EquivalentSpace += 0;
        //                                        }
        //                                        else
        //                                        {
        //                                            EquivalentSpace += 0;
        //                                        }
        //                                    }
        //                                }
        //                            }
        //                            var mwdish = db.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == true && x.Dismantle == false).ToList();
        //                            foreach (var TLImwdish in mwdish)
        //                            {
        //                                TLImwdish.Dismantle = true;
        //                                var Bu = db.TLImwBU.Where(x => x.MainDishId == item.mwDishId).ToList();
        //                                foreach (var TLIBu in Bu)
        //                                {
        //                                    TLIBu.MainDishId = null;
        //                                }
        //                                if (TLImwdish.sideArmId == null)
        //                                {
        //                                    EquivalentSpace += TLImwDish.EquivalentSpace;
        //                                }
        //                                else
        //                                {
        //                                    EquivalentSpace += 0;
        //                                }

        //                            }
        //                            var tlimwdish = db.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == false && x.Dismantle == false).ToList();
        //                            foreach (var MwDish in tlimwdish)
        //                            {
        //                                MwDish.Dismantle = true;
        //                                var Bu = db.TLImwBU.Where(x => x.MainDishId == item.mwDishId).ToList();
        //                                foreach (var TLIBu in Bu)
        //                                {
        //                                    TLIBu.MainDishId = null;
        //                                }
        //                            }
        //                            TLIcivilWithoutLeg tLIcivilWithoutLeg = t.civilWithoutLeg;
        //                            tLIcivilWithoutLeg.CurrentLoads = tLIcivilWithoutLeg.CurrentLoads - (float?)EquivalentSpace;

        //                        }
        //                        else if (item.mwODUId != null && LoadName == TablesNames.TLImwODU.ToString())
        //                        {
        //                            TLImwODU TLImwODU = item.mwODU;
        //                            var MWODU = db.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //                            foreach (var mwodu in MWODU)
        //                            {
        //                                mwodu.Dismantle = true;
        //                                EquivalentSpace += 0;
        //                            }
        //                            TLIcivilWithoutLeg tLIcivilWithoutLeg = t.civilWithoutLeg;
        //                            tLIcivilWithoutLeg.CurrentLoads = tLIcivilWithoutLeg.CurrentLoads - (float?)EquivalentSpace;

        //                        }
        //                        else if (item.mwRFUId != null && LoadName == TablesNames.TLImwRFU.ToString())
        //                        {
        //                            TLImwRFU TLImwRFU = item.mwRFU;
        //                            var MWRFU = db.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //                            foreach (var mwrfu in MWRFU)
        //                            {
        //                                mwrfu.Dismantle = true;
        //                                EquivalentSpace += 0;
        //                            }
        //                            TLIcivilWithoutLeg tLIcivilWithoutLeg = t.civilWithoutLeg;
        //                            tLIcivilWithoutLeg.CurrentLoads = tLIcivilWithoutLeg.CurrentLoads - (float?)EquivalentSpace;
        //                        }
        //                        else if (item.mwOtherId != null && LoadName == TablesNames.TLImwOther.ToString())
        //                        {
        //                            TLImwOther TLImwOther = item.mwOther;
        //                            var MWOTHER = db.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == true && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //                            foreach (var mwother in MWOTHER)
        //                            {
        //                                mwother.Dismantle = true;
        //                                if (mwother.sideArmId == null)
        //                                {
        //                                    EquivalentSpace += TLImwOther.EquivalentSpace;
        //                                }
        //                                else
        //                                {
        //                                    EquivalentSpace += 0;
        //                                }

        //                            }
        //                            var TLIMWOTHER = db.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == false && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //                            foreach (var mwother in TLIMWOTHER)
        //                            {
        //                                mwother.Dismantle = true;
        //                            }
        //                            TLIcivilWithoutLeg tLIcivilWithoutLeg = t.civilWithoutLeg;
        //                            tLIcivilWithoutLeg.CurrentLoads = tLIcivilWithoutLeg.CurrentLoads - (float?)EquivalentSpace;
        //                        }
        //                        else if (item.radioAntennaId != null && LoadName == TablesNames.TLIradioAntenna.ToString())
        //                        {
        //                            TLIradioAntenna TLIradioAntenna = item.radioAntenna;
        //                            var RADIOANTENNA = db.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == true && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //                            foreach (var radioantenna in RADIOANTENNA)
        //                            {
        //                                radioantenna.Dismantle = true;
        //                                var RadioRRu = db.TLIRadioRRU.Where(x => x.radioAntennaId == item.radioAntennaId).ToList();
        //                                foreach (var TLIRadioRRu in RadioRRu)
        //                                {
        //                                    TLIRadioRRu.radioAntennaId = null;
        //                                }
        //                                if (radioantenna.sideArmId == null)
        //                                {
        //                                    EquivalentSpace += TLIradioAntenna.EquivalentSpace;
        //                                }
        //                                else
        //                                {
        //                                    EquivalentSpace += 0;
        //                                }

        //                            }
        //                            var TLIRADIOANTENNA = db.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == false && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //                            foreach (var radioantenna in TLIRADIOANTENNA)
        //                            {
        //                                radioantenna.Dismantle = true;
        //                                var RadioRRu = db.TLIRadioRRU.Where(x => x.radioAntennaId == item.radioAntennaId).ToList();
        //                                foreach (var TLIRadioRRu in RadioRRu)
        //                                {
        //                                    TLIRadioRRu.radioAntennaId = null;
        //                                }
        //                            }
        //                            TLIcivilWithoutLeg tLIcivilWithoutLeg = t.civilWithoutLeg;
        //                            tLIcivilWithoutLeg.CurrentLoads = tLIcivilWithoutLeg.CurrentLoads - (float?)EquivalentSpace;
        //                        }
        //                        else if (item.radioRRUId != null && LoadName == TablesNames.TLIradioRRU.ToString())
        //                        {

        //                            TLIRadioRRU TLIRadioRRU = item.radioRRU;
        //                            var RADIORRU = db.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == true && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //                            foreach (var radiorru in RADIORRU)
        //                            {
        //                                radiorru.Dismantle = true;
        //                                if (radiorru.sideArmId == null)
        //                                {
        //                                    EquivalentSpace += TLIRadioRRU.EquivalentSpace;
        //                                }
        //                                else
        //                                {
        //                                    EquivalentSpace += 0;
        //                                }
        //                            }
        //                            var TLIRADIORRU = db.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == false && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //                            foreach (var radiorru in TLIRADIORRU)
        //                            {
        //                                radiorru.Dismantle = true;
        //                            }
        //                            TLIcivilWithoutLeg tLIcivilWithoutLeg = t.civilWithoutLeg;
        //                            tLIcivilWithoutLeg.CurrentLoads = tLIcivilWithoutLeg.CurrentLoads - (float?)EquivalentSpace;
        //                        }
        //                        else if (item.radioOtherId != null && LoadName == TablesNames.TLIradioOther.ToString())
        //                        {
        //                            TLIradioOther TLIradioOther = item.radioOther;
        //                            var RADIOOTHER = db.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == true && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //                            foreach (var radioother in RADIOOTHER)
        //                            {
        //                                radioother.Dismantle = true;
        //                                if (radioother.sideArmId == null)
        //                                {
        //                                    EquivalentSpace += TLIradioOther.EquivalentSpace;
        //                                }
        //                                else
        //                                {
        //                                    EquivalentSpace += 0;
        //                                }
        //                            }
        //                            var TLIRADIOOTHER = db.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == false && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //                            foreach (var radioother in TLIRADIOOTHER)
        //                            {
        //                                radioother.Dismantle = true;
        //                            }
        //                            TLIcivilWithoutLeg tLIcivilWithoutLeg = t.civilWithoutLeg;
        //                            tLIcivilWithoutLeg.CurrentLoads = tLIcivilWithoutLeg.CurrentLoads - (float?)EquivalentSpace;
        //                        }
        //                        else if (item.powerId != null && LoadName == TablesNames.TLIpower.ToString())
        //                        {
        //                            TLIpower TLIpower = item.power;
        //                            var POWER = db.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == true && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //                            foreach (var power in POWER)
        //                            {
        //                                power.Dismantle = true;
        //                                if (power.sideArmId == null)
        //                                {
        //                                    EquivalentSpace += TLIpower.EquivalentSpace;
        //                                }
        //                                else
        //                                {
        //                                    EquivalentSpace += 0;
        //                                }
        //                            }
        //                            var TLIPOWER = db.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == false && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //                            foreach (var power in TLIPOWER)
        //                            {
        //                                power.Dismantle = true;
        //                            }
        //                            TLIcivilWithoutLeg tLIcivilWithoutLeg = t.civilWithoutLeg;
        //                            tLIcivilWithoutLeg.CurrentLoads = tLIcivilWithoutLeg.CurrentLoads - (float?)EquivalentSpace;
        //                        }
        //                        else if (item.loadOtherId != null && LoadName == TablesNames.TLIloadOther.ToString())
        //                        {
        //                            TLIloadOther tLIloadOther = item.loadOther;
        //                            var LOADOTHER = db.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == true && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //                            foreach (var loadother in LOADOTHER)
        //                            {
        //                                loadother.Dismantle = true;
        //                                if (loadother.sideArmId == null)
        //                                {
        //                                    EquivalentSpace += tLIloadOther.EquivalentSpace;
        //                                }
        //                                else
        //                                {
        //                                    EquivalentSpace += 0;
        //                                }
        //                            }
        //                            var TLILOADOTHER = db.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == false && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //                            foreach (var loadother in TLILOADOTHER)
        //                            {
        //                                loadother.Dismantle = true;
        //                            }
        //                            TLIcivilWithoutLeg tLIcivilWithoutLeg = t.civilWithoutLeg;
        //                            tLIcivilWithoutLeg.CurrentLoads = tLIcivilWithoutLeg.CurrentLoads - (float?)EquivalentSpace;
        //                        }
        //                        db.SaveChanges();
        //                    }
        //                    else if (t.civilNonSteelId != null)
        //                    {
        //                        if (item.mwBUId != null && LoadName == TablesNames.TLImwBU.ToString())
        //                        {

        //                            TLImwBU TLImwBU = item.mwBU;
        //                            var PortCascadeId = db.TLImwBU.Where(x => x.Id == item.mwBUId).Select(x => x.PortCascadeId).FirstOrDefault();
        //                            var PortCascade = db.TLImwPort.Where(x => x.Id == PortCascadeId).ToList();
        //                            foreach (var Port in PortCascade)
        //                            {
        //                                var allload = db.TLIallLoadInst.Where(x => x.mwBUId == Port.MwBUId).Select(x => x.Id).FirstOrDefault();
        //                                var Civilloads = db.TLIcivilLoads.Where(x => x.allLoadInstId == allload && x.allCivilInstId == t.Id && x.Dismantle == false).FirstOrDefault();
        //                                if (Civilloads != null)
        //                                {
        //                                    Civilloads.Dismantle = true;
        //                                    EquivalentSpace += 0;
        //                                    Port.MwBUId = 0;
        //                                    Port.MwBULibraryId = 0;
        //                                }
        //                            }
        //                            var mwport = db.TLImwPort.Where(x => x.MwBUId == item.mwBUId).Select(x => x.Id).ToList();
        //                            foreach (var port in mwport)
        //                            {
        //                                var mwrfu = db.TLImwRFU.Where(x => x.MwPortId == port).Select(x => x.Id).ToList();

        //                                foreach (var rfu in mwrfu)
        //                                {
        //                                    var allLoadRFU = db.TLIallLoadInst.Where(x => x.mwRFUId == rfu).Select(x => x.Id).ToList();
        //                                    foreach (var allLoad in allLoadRFU)
        //                                    {
        //                                        var MwRfu = db.TLIcivilLoads.Where(x => x.allLoadInstId == allLoad && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //                                        foreach (var MWRfU in MwRfu)
        //                                        {
        //                                            MWRfU.Dismantle = true;
        //                                            EquivalentSpace += 0;
        //                                        }

        //                                    }
        //                                }

        //                            }
        //                            var civilLoads = db.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.Dismantle == false && x.SiteCode == sitecode && x.allCivilInstId == t.Id).ToList();
        //                            foreach (var civilLoad in civilLoads)
        //                            {
        //                                civilLoad.Dismantle = true;
        //                                EquivalentSpace += 0;

        //                            }
        //                            TLIcivilNonSteel tLIcivilNonSteel = t.civilNonSteel;
        //                            tLIcivilNonSteel.CurrentLoads = tLIcivilNonSteel.CurrentLoads - (double)EquivalentSpace;
        //                        }
        //                        else if (item.mwDishId != null && LoadName == TablesNames.TLImwDish.ToString())
        //                        {
        //                            TLImwDish TLImwDish = item.mwDish;
        //                            var mwODU = db.TLImwODU.Where(x => x.Mw_DishId == item.mwDishId).Select(x => x.Id).ToList();
        //                            foreach (var ODU in mwODU)
        //                            {
        //                                var allLoadinst = db.TLIallLoadInst.Where(x => x.mwODUId == ODU).Select(x => x.Id).ToList();
        //                                foreach (var Load in allLoadinst)
        //                                {
        //                                    var civil = db.TLIcivilLoads.Where(x => x.allLoadInstId == Load && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();


        //                                    foreach (var civillload in civil)
        //                                    {
        //                                        civillload.Dismantle = true;
        //                                        EquivalentSpace += 0;
        //                                    }
        //                                }
        //                            }
        //                            var mwdish = db.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.Dismantle == false).ToList();
        //                            foreach (var TLImwdish in mwdish)
        //                            {
        //                                TLImwdish.Dismantle = true;
        //                                var Bu = db.TLImwBU.Where(x => x.MainDishId == item.mwDishId).ToList();
        //                                foreach (var TLIBu in Bu)
        //                                {
        //                                    TLIBu.MainDishId = null;
        //                                }
        //                                EquivalentSpace += 0;

        //                            }
        //                            TLIcivilNonSteel tLIcivilNonSteel = t.civilNonSteel;
        //                            tLIcivilNonSteel.CurrentLoads = tLIcivilNonSteel.CurrentLoads - (double)EquivalentSpace;

        //                        }
        //                        else if (item.mwODUId != null && LoadName == TablesNames.TLImwODU.ToString())
        //                        {
        //                            TLImwODU TLImwODU = item.mwODU;
        //                            var MWODU = db.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //                            foreach (var mwodu in MWODU)
        //                            {
        //                                mwodu.Dismantle = true;
        //                                EquivalentSpace += 0;
        //                            }
        //                            TLIcivilNonSteel tLIcivilNonSteel = t.civilNonSteel;
        //                            tLIcivilNonSteel.CurrentLoads = tLIcivilNonSteel.CurrentLoads - (double)EquivalentSpace;


        //                        }
        //                        else if (item.mwRFUId != null && LoadName == TablesNames.TLImwRFU.ToString())
        //                        {
        //                            TLImwRFU TLImwRFU = item.mwRFU;
        //                            var MWRFU = db.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //                            foreach (var mwrfu in MWRFU)
        //                            {
        //                                mwrfu.Dismantle = true;
        //                                EquivalentSpace += 0;
        //                            }
        //                            TLIcivilNonSteel tLIcivilNonSteel = t.civilNonSteel;
        //                            tLIcivilNonSteel.CurrentLoads = tLIcivilNonSteel.CurrentLoads - (double)EquivalentSpace;

        //                        }
        //                        else if (item.mwOtherId != null && LoadName == TablesNames.TLImwOther.ToString())
        //                        {
        //                            TLImwOther TLImwOther = item.mwOther;
        //                            var MWOTHER = db.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //                            foreach (var mwother in MWOTHER)
        //                            {
        //                                mwother.Dismantle = true;
        //                                EquivalentSpace += 0;
        //                            }
        //                            TLIcivilNonSteel tLIcivilNonSteel = t.civilNonSteel;
        //                            tLIcivilNonSteel.CurrentLoads = tLIcivilNonSteel.CurrentLoads - (double)EquivalentSpace;

        //                        }
        //                        else if (item.radioAntennaId != null && LoadName == TablesNames.TLIradioAntenna.ToString())
        //                        {
        //                            TLIradioAntenna TLIradioAntenna = item.radioAntenna;
        //                            var RADIOANTENNA = db.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //                            foreach (var radioantenna in RADIOANTENNA)
        //                            {
        //                                radioantenna.Dismantle = true;
        //                                var RadioRRu = db.TLIRadioRRU.Where(x => x.radioAntennaId == item.radioAntennaId).ToList();
        //                                foreach (var radioRru in RadioRRu)
        //                                {
        //                                    radioRru.radioAntennaId = null;
        //                                }
        //                                EquivalentSpace += 0;

        //                            }
        //                            TLIcivilNonSteel tLIcivilNonSteel = t.civilNonSteel;
        //                            tLIcivilNonSteel.CurrentLoads = tLIcivilNonSteel.CurrentLoads - (double)EquivalentSpace;

        //                        }
        //                        else if (item.radioRRUId != null && LoadName == TablesNames.TLIradioRRU.ToString())
        //                        {

        //                            TLIRadioRRU TLIRadioRRU = item.radioRRU;
        //                            var RADIORRU = db.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //                            foreach (var radiorru in RADIORRU)
        //                            {
        //                                radiorru.Dismantle = true;
        //                                EquivalentSpace += 0;

        //                            }
        //                            TLIcivilNonSteel tLIcivilNonSteel = t.civilNonSteel;
        //                            tLIcivilNonSteel.CurrentLoads = tLIcivilNonSteel.CurrentLoads - (double)EquivalentSpace;

        //                        }
        //                        else if (item.radioOtherId != null && LoadName == TablesNames.TLIradioOther.ToString())
        //                        {
        //                            TLIradioOther TLIradioOther = item.radioOther;
        //                            var RADIOOTHER = db.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //                            foreach (var radioother in RADIOOTHER)
        //                            {
        //                                radioother.Dismantle = true;
        //                                EquivalentSpace += 0;

        //                            }
        //                            TLIcivilNonSteel tLIcivilNonSteel = t.civilNonSteel;
        //                            tLIcivilNonSteel.CurrentLoads = tLIcivilNonSteel.CurrentLoads - (double)EquivalentSpace;

        //                        }
        //                        else if (item.powerId != null && LoadName == TablesNames.TLIpower.ToString())
        //                        {
        //                            TLIpower TLIpower = item.power;
        //                            var POWER = db.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //                            foreach (var power in POWER)
        //                            {
        //                                power.Dismantle = true;
        //                                EquivalentSpace += 0;

        //                            }
        //                            TLIcivilNonSteel tLIcivilNonSteel = t.civilNonSteel;
        //                            tLIcivilNonSteel.CurrentLoads = tLIcivilNonSteel.CurrentLoads - (double)EquivalentSpace;

        //                        }
        //                        else if (item.loadOtherId != null && LoadName == TablesNames.TLIloadOther.ToString())
        //                        {
        //                            TLIloadOther tLIloadOther = item.loadOther;
        //                            var LOADOTHER = db.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //                            foreach (var loadother in LOADOTHER)
        //                            {
        //                                loadother.Dismantle = true;
        //                                EquivalentSpace += 0;
        //                            }
        //                            TLIcivilNonSteel tLIcivilNonSteel = t.civilNonSteel;
        //                            tLIcivilNonSteel.CurrentLoads = tLIcivilNonSteel.CurrentLoads - (double)EquivalentSpace;

        //                        }
        //                        db.SaveChanges();

        //                    }
        //                }
        //            }


        //            db.SaveChanges();
        //        }
        //        return new Response<bool>(true, true, null, null, (int)Helpers.Constants.ApiReturnCode.success);
        //    }
        //    catch (Exception er)
        //    {

        //        return new Response<bool>(false, false, null, er.Message, (int)Helpers.Constants.ApiReturnCode.fail);
        //    }
        //}
        //public Response<ObjectInstAttsForSideArm> GetById(int MWInsId, string TableName)
        //{
        //    try
        //    {
        //        TLItablesNames TableNameEntity = _unitOfWork.TablesNamesRepository.GetWhereFirst(c => c.TableName == TableName);
        //        ObjectInstAttsForSideArm objectInst = new ObjectInstAttsForSideArm();
        //        TLIallLoadInst AllLoadInst = new TLIallLoadInst();
        //        TLIcivilLoads CivilLoads = new TLIcivilLoads();
        //        List<BaseAttView> LoadInstAttributes = new List<BaseAttView>();

        //        TLIallCivilInst AllCivilInst = new TLIallCivilInst();
        //        List<BaseInstAttView> MWInstallationInfo = new List<BaseInstAttView>();

        //        if (LoadSubType.TLImwBU.ToString() == TableName)
        //        {
        //            TLImwBU mw_BU = _unitOfWork.MW_BURepository
        //                .GetIncludeWhereFirst(x => x.Id == MWInsId, x => x.baseBU,
        //                    x => x.Owner, x => x.InstallationPlace, x => x.MwBULibrary,
        //                    x => x.MainDish);

        //            MW_BULibraryViewModel MwBuLibrary = _mapper.Map<MW_BULibraryViewModel>(_unitOfWork.MW_BULibraryRepository
        //               .GetIncludeWhereFirst(x => x.Id == mw_BU.MwBULibraryId, x => x.diversityType));

        //            List<BaseAttView> LibraryAttributes = _unitOfWork.AttributeActivatedRepository
        //               .GetAttributeActivated(TablesNames.TLImwBULibrary.ToString(), MwBuLibrary, null).ToList();

        //            foreach (BaseAttView LibraryAttribute in LibraryAttributes)
        //            {
        //                if (LibraryAttribute.DataType.ToLower() == "list")
        //                {
        //                    LibraryAttribute.Value = MwBuLibrary.GetType().GetProperties()
        //                        .FirstOrDefault(x => x.Name.ToLower() == LibraryAttribute.Label.ToLower()).GetValue(MwBuLibrary);
        //                }
        //            }
        //            List<BaseAttView> LogisticalAttributes = _mapper.Map<List<BaseAttView>>(_unitOfWork.LogistcalRepository
        //                .GetLogistical(TablePartName.MW.ToString(), TablesNames.TLImwBULibrary.ToString(), MwBuLibrary.Id).ToList());

        //            LibraryAttributes.AddRange(LogisticalAttributes);

        //            objectInst.LibraryActivatedAttributes = LibraryAttributes;

        //            List<BaseInstAttView> ListAttributesActivated = _unitOfWork.AttributeActivatedRepository
        //                .GetInstAttributeActivated(LoadSubType.TLImwBU.ToString(), mw_BU,
        //                    "InstallationPlaceId").ToList();

        //            BaseInstAttView NameAttribute = ListAttributesActivated.FirstOrDefault(x => x.Key.ToLower() == "Name".ToLower());
        //            if (NameAttribute != null)
        //            {
        //                BaseInstAttView Swap = ListAttributesActivated[0];
        //                ListAttributesActivated[ListAttributesActivated.IndexOf(NameAttribute)] = Swap;
        //                ListAttributesActivated[0] = NameAttribute;
        //            }
        //            TLIcivilLoads CivilLoad = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => !x.Dismantle && (x.allLoadInstId != null ?
        //                x.allLoadInst.mwBUId == MWInsId : false), x => x.allLoadInst);
        //            foreach (BaseInstAttView FKitem in ListAttributesActivated)
        //            {
        //                if (FKitem.Desc.ToLower() == "tlibasebu")
        //                {
        //                    if (mw_BU.baseBU == null)
        //                    {
        //                        FKitem.Value = "NA";
        //                    }
        //                    else
        //                    {
        //                        FKitem.Value = mw_BU.baseBU.Name;
        //                    }
        //                }
        //                else if (FKitem.Desc.ToLower() == "tliowner")
        //                {
        //                    if (mw_BU.Owner == null)
        //                    {
        //                        FKitem.Value = "NA";
        //                    }
        //                    else
        //                    {
        //                        FKitem.Value = mw_BU.Owner.OwnerName;
        //                    }
        //                }
        //                else if (FKitem.Desc.ToLower() == "tlimwdish")
        //                {
        //                    if (mw_BU.MainDish == null)
        //                        FKitem.Value = "NA";

        //                    else
        //                    {
        //                        FKitem.Value = mw_BU.MainDish.DishName;
        //                    }

        //                }
        //                else if (FKitem.Desc.ToLower() == "tlimwbulibrary")
        //                {
        //                    if (mw_BU.MwBULibrary == null)
        //                    {
        //                        FKitem.Value = "NA";
        //                    }
        //                    else
        //                    {
        //                        FKitem.Value = mw_BU.MwBULibrary.Model;
        //                    }
        //                }

        //                else if (FKitem.Desc.ToLower() == "tlimwport")
        //                {
        //                    if (mw_BU.PortCascadeId == 0)
        //                        FKitem.Value = "NA";

        //                    else
        //                    {
        //                        var PortCascadeId = _unitOfWork.MW_PortRepository.GetWhereFirst(x => x.Id == mw_BU.PortCascadeId);

        //                        if (PortCascadeId != null)
        //                        {
        //                            FKitem.Value = PortCascadeId.Port_Name;
        //                            FKitem.Id = mw_BU.PortCascadeId;
        //                        }
        //                        else
        //                            FKitem.Value = "NA";
        //                    }
        //                }
        //            }
        //            objectInst.AttributesActivated = ListAttributesActivated;

        //            objectInst.DynamicAtts = _unitOfWork.DynamicAttInstValueRepository
        //                .GetDynamicInstAtts(TableNameEntity.Id, MWInsId, null);

        //            AllLoadInst = _unitOfWork.AllLoadInstRepository.GetWhereFirst(x => x.mwBUId == MWInsId);

        //            CivilLoads = _unitOfWork.CivilLoadsRepository
        //                .GetIncludeWhereFirst(x => x.allLoadInstId == AllLoadInst.Id, x => x.sideArm, x => x.site, x => x.leg, x => x.allCivilInst,
        //                    x => x.allLoadInst.loadOther, x => x.allLoadInst.mwBU, x => x.allLoadInst.mwDish, x => x.allLoadInst.mwODU, x => x.allLoadInst.mwOther,
        //                    x => x.allLoadInst.mwRFU, x => x.allLoadInst.power, x => x.allLoadInst.radioAntenna, x => x.allLoadInst.radioOther, x => x.allLoadInst.radioRRU,
        //                    x => x.allCivilInst.civilWithLegs, x => x.allCivilInst.civilWithoutLeg, x => x.allCivilInst.civilNonSteel, x => x.civilSteelSupportCategory);

        //            LoadInstAttributes = _unitOfWork.AttributeActivatedRepository
        //                .GetAttributeActivated(TablesNames.TLIcivilLoads.ToString(), CivilLoads, null, "allLoadInstId",
        //                    "Dismantle", "SiteCode", "civilSteelSupportCategoryId", "legId", "Leg2Id",
        //                        "sideArmId", "allCivilInstId").ToList();

        //            List<KeyValuePair<string, List<DropDownListFilters>>> CivilLoadsRelatedTables = _unitOfWork.CivilLoadsRepository
        //                .GetRelatedTables(CivilLoads.SiteCode);

        //            if (CivilLoads != null)
        //            {
        //                TLImwPort? CascadedBu_ForRelatedTables = _unitOfWork.MW_PortRepository
        //                    .GetIncludeWhereFirst(x => x.Id == mw_BU.PortCascadeId, x => x.MwBU);

        //                List<KeyValuePair<string, List<DropDownListFilters>>> mwbuRelatedTables = new List<KeyValuePair<string, List<DropDownListFilters>>>();
        //                if (CascadedBu_ForRelatedTables != null)
        //                    mwbuRelatedTables = _unitOfWork.MW_BURepository
        //                        .GetRelatedTablesForEdit(CivilLoads.SiteCode, CascadedBu_ForRelatedTables.MwBUId);

        //                else
        //                    mwbuRelatedTables = _unitOfWork.MW_BURepository
        //                        .GetRelatedTablesForEdit(CivilLoads.SiteCode, null);

        //                mwbuRelatedTables.AddRange(CivilLoadsRelatedTables);

        //                if (CivilLoads.allCivilInst.civilWithLegsId != null)
        //                {
        //                    List<TLIleg> LegsForCivilWithLegLibrary = _unitOfWork.LegRepository
        //                        .GetWhere(x => x.CivilWithLegInstId == CivilLoads.allCivilInst.civilWithLegsId).ToList();

        //                    List<DropDownListFilters> LegIds = _mapper.Map<List<DropDownListFilters>>(LegsForCivilWithLegLibrary);

        //                    mwbuRelatedTables.Add(new KeyValuePair<string, List<DropDownListFilters>>("Leg1Id", LegIds));

        //                    List<TLIleg> Legs2ForCivilWithLegLibrary = LegsForCivilWithLegLibrary.Except(LegsForCivilWithLegLibrary
        //                        .Where(x => x.Id == CivilLoads.legId)).ToList();

        //                    List<DropDownListFilters> Leg2Ids = _mapper.Map<List<DropDownListFilters>>(Legs2ForCivilWithLegLibrary);

        //                    mwbuRelatedTables.Add(new KeyValuePair<string, List<DropDownListFilters>>("Leg2Id", Leg2Ids));
        //                }

        //                objectInst.RelatedTables = mwbuRelatedTables;

        //                AllCivilInst = _unitOfWork.CivilLoadsRepository
        //                    .GetIncludeWhereFirst(x => (x.allLoadInstId != null ? (x.allLoadInst.mwBUId != null ?
        //                        x.allLoadInst.mwBUId.Value == MWInsId : false) : false) && !x.Dismantle, x => x.allCivilInst, x => x.allLoadInst).allCivilInst;

        //                if (AllCivilInst.civilWithLegsId != null)
        //                {
        //                    MWInstallationInfo.Add(new BaseInstAttView
        //                    {
        //                        AutoFill = false,
        //                        DataType = "List",
        //                        DataTypeId = null,
        //                        Desc = "Select civil support type",
        //                        enable = true,
        //                        Id = -1,
        //                        Key = "Select civil support type",
        //                        Label = "Select civil support type",
        //                        Manage = false,
        //                        Required = false,
        //                        Value = "Civil with legs"
        //                    });
        //                    MWInstallationInfo.Add(new BaseInstAttView
        //                    {
        //                        AutoFill = false,
        //                        DataType = "List",
        //                        DataTypeId = null,
        //                        Desc = "Select civil with legs support items",
        //                        enable = true,
        //                        Id = AllCivilInst.Id,
        //                        Key = "Select civil with legs support items",
        //                        Label = "Select civil with legs support items",
        //                        Manage = false,
        //                        Required = false,
        //                        Value = _unitOfWork.CivilWithLegsRepository.GetByID(AllCivilInst.civilWithLegsId.Value).Name
        //                    });
        //                    if (CivilLoads.sideArmId != null)
        //                    {
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the installation place type",
        //                            enable = true,
        //                            Id = -1,
        //                            Key = "Select the installation place type",
        //                            Label = "Select the installation place type",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = "SideArm"
        //                        });
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the sidearm",
        //                            enable = true,
        //                            Id = CivilLoads.sideArmId.Value,
        //                            Key = "Select the sidearm",
        //                            Label = "Select the sidearm",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = CivilLoads.sideArm.Name
        //                        });
        //                    }
        //                    else if (CivilLoads.legId != null)
        //                    {
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the installation place type",
        //                            enable = true,
        //                            Id = -1,
        //                            Key = "Select the installation place type",
        //                            Label = "Select the installation place type",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = "Leg"
        //                        });
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the leg",
        //                            enable = true,
        //                            Id = CivilLoads.legId.Value,
        //                            Key = "Select the leg",
        //                            Label = "Select the leg",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = CivilLoads.leg.CiviLegName
        //                        });
        //                    }
        //                    else
        //                    {
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the installation place type",
        //                            enable = true,
        //                            Id = -1,
        //                            Key = "Select the installation place type",
        //                            Label = "Select the installation place type",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = "Direct"
        //                        });
        //                    }
        //                    if (mw_BU.PortCascadeId != 0)
        //                    {
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select BU installtion type",
        //                            enable = true,
        //                            Id = -1,
        //                            Key = "Select BU installtion type",
        //                            Label = "Select BU installtion type",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = "Cascaded"
        //                        });

        //                        TLImwPort CascadedBu = _unitOfWork.MW_PortRepository.GetIncludeWhereFirst(x => x.Id == mw_BU.PortCascadeId, x => x.MwBU);

        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the cascaded BU",
        //                            enable = true,
        //                            Id = CascadedBu.MwBUId,
        //                            Key = "Select the cascaded BU",
        //                            Label = "Select the cascaded BU",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = CascadedBu.MwBU.Name
        //                        });
        //                    }
        //                    else
        //                    {
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select BU installtion type",
        //                            enable = true,
        //                            Id = -1,
        //                            Key = "Select BU installtion type",
        //                            Label = "Select BU installtion type",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = "Normal"
        //                        });
        //                    }
        //                }
        //                else if (AllCivilInst.civilWithoutLegId != null)
        //                {
        //                    MWInstallationInfo.Add(new BaseInstAttView
        //                    {
        //                        AutoFill = false,
        //                        DataType = "List",
        //                        DataTypeId = null,
        //                        Desc = "Select civil support type",
        //                        enable = true,
        //                        Id = -1,
        //                        Key = "Select civil support type",
        //                        Label = "Select civil support type",
        //                        Manage = false,
        //                        Required = false,
        //                        Value = "Civil without legs"
        //                    });
        //                    MWInstallationInfo.Add(new BaseInstAttView
        //                    {
        //                        AutoFill = false,
        //                        DataType = "List",
        //                        DataTypeId = null,
        //                        Desc = "Select civil without legs support items",
        //                        enable = true,
        //                        Id = AllCivilInst.Id,
        //                        Key = "Select civil without legs support items",
        //                        Label = "Select civil without legs support items",
        //                        Manage = false,
        //                        Required = false,
        //                        Value = _unitOfWork.CivilWithoutLegRepository.GetByID(AllCivilInst.civilWithoutLegId.Value).Name
        //                    });
        //                    if (CivilLoads.sideArmId != null)
        //                    {
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the installation place type",
        //                            enable = true,
        //                            Id = -1,
        //                            Key = "Select the installation place type",
        //                            Label = "Select the installation place type",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = "SideArm"
        //                        });
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the sidearm",
        //                            enable = true,
        //                            Id = CivilLoads.sideArmId.Value,
        //                            Key = "Select the sidearm",
        //                            Label = "Select the sidearm",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = CivilLoads.sideArm.Name
        //                        });
        //                    }
        //                    else
        //                    {
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the installation place type",
        //                            enable = true,
        //                            Id = -1,
        //                            Key = "Select the installation place type",
        //                            Label = "Select the installation place type",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = "Direct"
        //                        });
        //                    }
        //                    if (mw_BU.PortCascadeId != 0)
        //                    {
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select BU installtion type",
        //                            enable = true,
        //                            Id = -1,
        //                            Key = "Select BU installtion type",
        //                            Label = "Select BU installtion type",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = "Cascaded"
        //                        });

        //                        TLImwPort CascadedBU = _unitOfWork.MW_PortRepository
        //                            .GetIncludeWhereFirst(x => x.Id == mw_BU.PortCascadeId, x => x.MwBU);

        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the cascaded BU",
        //                            enable = true,
        //                            Id = CascadedBU.MwBUId,
        //                            Key = "Select the cascaded BU",
        //                            Label = "Select the cascaded BU",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = CascadedBU.MwBU.Name
        //                        });
        //                    }
        //                    else
        //                    {
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select BU installtion type",
        //                            enable = true,
        //                            Id = -1,
        //                            Key = "Select BU installtion type",
        //                            Label = "Select BU installtion type",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = "Normal"
        //                        });

        //                    }
        //                }
        //                else if (AllCivilInst.civilNonSteelId != null)
        //                {
        //                    MWInstallationInfo.Add(new BaseInstAttView
        //                    {
        //                        AutoFill = false,
        //                        DataType = "List",
        //                        DataTypeId = null,
        //                        Desc = "Select civil support type",
        //                        enable = true,
        //                        Id = -1,
        //                        Key = "Select civil support type",
        //                        Label = "Select civil support type",
        //                        Manage = false,
        //                        Required = false,
        //                        Value = "Civil non steel"
        //                    });
        //                    MWInstallationInfo.Add(new BaseInstAttView
        //                    {
        //                        AutoFill = false,
        //                        DataType = "List",
        //                        DataTypeId = null,
        //                        Desc = "Select civil non steel support items",
        //                        enable = true,
        //                        Id = AllCivilInst.Id,
        //                        Key = "Select civil non steel support items",
        //                        Label = "Select civil non steel support items",
        //                        Manage = false,
        //                        Required = false,
        //                        Value = _unitOfWork.CivilNonSteelRepository.GetByID(AllCivilInst.civilNonSteelId.Value).Name
        //                    });
        //                    if (CivilLoads.sideArmId != null)
        //                    {
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the installation place type",
        //                            enable = true,
        //                            Id = -1,
        //                            Key = "Select the installation place type",
        //                            Label = "Select the installation place type",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = "SideArm"
        //                        });
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the sidearm",
        //                            enable = true,
        //                            Id = CivilLoads.sideArmId.Value,
        //                            Key = "Select the sidearm",
        //                            Label = "Select the sidearm",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = CivilLoads.sideArm.Name
        //                        });
        //                    }
        //                    else
        //                    {
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the installation place type",
        //                            enable = true,
        //                            Id = -1,
        //                            Key = "Select the installation place type",
        //                            Label = "Select the installation place type",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = "Direct"
        //                        });
        //                    }
        //                    if (mw_BU.PortCascadeId != 0)
        //                    {
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select BU installtion type",
        //                            enable = true,
        //                            Id = -1,
        //                            Key = "Select BU installtion type",
        //                            Label = "Select BU installtion type",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = "Cascaded"
        //                        });

        //                        TLImwPort CascadedBU = _unitOfWork.MW_PortRepository.GetIncludeWhereFirst(x => x.Id == mw_BU.PortCascadeId, x => x.MwBU);

        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the cascaded BU",
        //                            enable = true,
        //                            Id = CascadedBU.MwBUId,
        //                            Key = "Select the cascaded BU",
        //                            Label = "Select the cascaded BU",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = CascadedBU.MwBU.Name
        //                        });
        //                    }
        //                    else
        //                    {
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select BU installtion type",
        //                            enable = true,
        //                            Id = -1,
        //                            Key = "Select BU installtion type",
        //                            Label = "Select BU installtion type",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = "Normal"
        //                        });

        //                    }
        //                }

        //                MWInstallationInfo.Add(new BaseInstAttView
        //                {
        //                    AutoFill = false,
        //                    DataType = "List",
        //                    DataTypeId = null,
        //                    Desc = "allLoadInstId",
        //                    enable = false,
        //                    Id = AllLoadInst.Id,
        //                    Key = "allLoadInstId",
        //                    Label = "allLoadInstId",
        //                    Manage = false,
        //                    Required = false,
        //                    Value = AllLoadInst.Id
        //                });
        //                objectInst.SideArmInstallationInfo = MWInstallationInfo;
        //            }
        //        }
        //        else if (LoadSubType.TLImwODU.ToString() == TableName)
        //        {
        //            TLImwODU MW_ODU = _unitOfWork.MW_ODURepository
        //                .GetIncludeWhereFirst(x => x.Id == MWInsId, x => x.MwODULibrary, x => x.Mw_Dish, x => x.OduInstallationType, x => x.Owner);

        //            MW_ODULibraryViewModel MwOduLibrary = _mapper.Map<MW_ODULibraryViewModel>(_unitOfWork.MW_ODULibraryRepository
        //                .GetIncludeWhereFirst(x => x.Id == MW_ODU.MwODULibraryId, x => x.parity));

        //            List<BaseAttView> LibraryAttributes = _unitOfWork.AttributeActivatedRepository
        //               .GetAttributeActivated(TablesNames.TLImwODULibrary.ToString(), MwOduLibrary, null).ToList();

        //            TLIcivilLoads CivilLoad = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => !x.Dismantle && (x.allLoadInstId != null ?
        //              x.allLoadInst.mwBUId == MWInsId : false), x => x.allLoadInst);

        //            foreach (BaseAttView LibraryAttribute in LibraryAttributes)
        //            {
        //                if (LibraryAttribute.DataType.ToLower() == "list")
        //                {
        //                    LibraryAttribute.Value = MwOduLibrary.GetType().GetProperties()
        //                        .FirstOrDefault(x => x.Name.ToLower() == LibraryAttribute.Label.ToLower()).GetValue(MwOduLibrary);
        //                }
        //            }

        //            List<BaseAttView> LogisticalAttributes = _mapper.Map<List<BaseAttView>>(_unitOfWork.LogistcalRepository
        //                .GetLogistical(TablePartName.MW.ToString(), TablesNames.TLImwODULibrary.ToString(), MwOduLibrary.Id).ToList());

        //            LibraryAttributes.AddRange(LogisticalAttributes);

        //            objectInst.LibraryActivatedAttributes = LibraryAttributes;


        //            List<BaseInstAttView> ListAttributesActivated = _unitOfWork.AttributeActivatedRepository
        //                .GetInstAttributeActivated(LoadSubType.TLImwODU.ToString(), MW_ODU, "OduInstallationTypeId", "Mw_DishId").ToList();

        //            BaseInstAttView NameAttribute = ListAttributesActivated.FirstOrDefault(x => x.Key.ToLower() == "Name".ToLower());
        //            if (NameAttribute != null)
        //            {
        //                BaseInstAttView Swap = ListAttributesActivated[0];
        //                ListAttributesActivated[ListAttributesActivated.IndexOf(NameAttribute)] = Swap;
        //                ListAttributesActivated[0] = NameAttribute;
        //            }
        //            foreach (BaseInstAttView FKitem in ListAttributesActivated)
        //            {
        //                if (FKitem.Desc.ToLower() == "tliowner")
        //                {
        //                    if (MW_ODU.Owner == null)
        //                        FKitem.Value = "NA";
        //                    else
        //                    {
        //                        FKitem.Value = MW_ODU.Owner.OwnerName;
        //                    }
        //                }
        //                else if (FKitem.Desc.ToLower() == "tlimwdish")
        //                {
        //                    if (MW_ODU.Mw_Dish == null)
        //                        FKitem.Value = "NA";

        //                    else
        //                    {
        //                        FKitem.Value = MW_ODU.Mw_Dish.DishName;
        //                    }

        //                }
        //                else if (FKitem.Desc.ToLower() == "tlimwodulibrary")
        //                {
        //                    if (MW_ODU.MwODULibrary == null)
        //                        FKitem.Value = "NA";

        //                    else
        //                    {
        //                        FKitem.Value = MW_ODU.MwODULibrary.Model;
        //                    }
        //                }
        //            }

        //            objectInst.AttributesActivated = ListAttributesActivated;

        //            objectInst.DynamicAtts = _unitOfWork.DynamicAttInstValueRepository
        //                .GetDynamicInstAtts(TableNameEntity.Id, MWInsId, null);

        //            AllLoadInst = _unitOfWork.AllLoadInstRepository.GetWhereFirst(x => x.mwODUId == MWInsId);

        //            CivilLoads = _unitOfWork.CivilLoadsRepository
        //                .GetIncludeWhereFirst(x => x.allLoadInstId == AllLoadInst.Id, x => x.sideArm, x => x.site, x => x.leg, x => x.allCivilInst,
        //                    x => x.allLoadInst.loadOther, x => x.allLoadInst.mwBU, x => x.allLoadInst.mwDish, x => x.allLoadInst.mwODU, x => x.allLoadInst.mwOther,
        //                    x => x.allLoadInst.mwRFU, x => x.allLoadInst.power, x => x.allLoadInst.radioAntenna, x => x.allLoadInst.radioOther, x => x.allLoadInst.radioRRU,
        //                    x => x.allCivilInst.civilWithLegs, x => x.allCivilInst.civilWithoutLeg, x => x.allCivilInst.civilNonSteel, x => x.civilSteelSupportCategory);

        //            LoadInstAttributes = _unitOfWork.AttributeActivatedRepository
        //                .GetAttributeActivated(TablesNames.TLIcivilLoads.ToString(), CivilLoads, null, "allLoadInstId",
        //                    "Dismantle", "SiteCode", "civilSteelSupportCategoryId", "legId", "Leg2Id",
        //                        "sideArmId", "allCivilInstId").ToList();

        //            List<KeyValuePair<string, List<DropDownListFilters>>> CivilLoadsRelatedTables = _unitOfWork.CivilLoadsRepository
        //                .GetRelatedTables(CivilLoads.SiteCode);
        //            if (CivilLoads != null)
        //            {
        //                List<KeyValuePair<string, List<DropDownListFilters>>> mwoduRelatedTables = _unitOfWork.MW_ODURepository
        //                    .GetRelatedTablesForEdit(CivilLoads.SiteCode, CivilLoads.allCivilInstId);

        //                mwoduRelatedTables.AddRange(CivilLoadsRelatedTables);

        //                if (CivilLoads.allCivilInst.civilWithLegsId != null)
        //                {
        //                    List<TLIleg> LegsForCivilWithLegLibrary = _unitOfWork.LegRepository
        //                        .GetWhere(x => x.CivilWithLegInstId == CivilLoads.allCivilInst.civilWithLegsId).ToList();

        //                    List<DropDownListFilters> LegIds = _mapper.Map<List<DropDownListFilters>>(LegsForCivilWithLegLibrary);

        //                    mwoduRelatedTables.Add(new KeyValuePair<string, List<DropDownListFilters>>("Leg1Id", LegIds));

        //                    List<TLIleg> Legs2ForCivilWithLegLibrary = LegsForCivilWithLegLibrary.Except(LegsForCivilWithLegLibrary
        //                        .Where(x => x.Id == CivilLoads.legId)).ToList();

        //                    List<DropDownListFilters> Leg2Ids = _mapper.Map<List<DropDownListFilters>>(Legs2ForCivilWithLegLibrary);

        //                    mwoduRelatedTables.Add(new KeyValuePair<string, List<DropDownListFilters>>("Leg2Id", Leg2Ids));
        //                }

        //                objectInst.RelatedTables = mwoduRelatedTables;

        //                AllCivilInst = _unitOfWork.CivilLoadsRepository
        //                    .GetIncludeWhereFirst(x => (x.allLoadInstId != null ? (x.allLoadInst.mwODUId != null ?
        //                        x.allLoadInst.mwODUId.Value == MWInsId : false) : false) && !x.Dismantle, x => x.allCivilInst, x => x.allLoadInst).allCivilInst;

        //                if (AllCivilInst.civilWithLegsId != null)
        //                {
        //                    MWInstallationInfo.Add(new BaseInstAttView
        //                    {
        //                        AutoFill = false,
        //                        DataType = "List",
        //                        DataTypeId = null,
        //                        Desc = "Select civil support type",
        //                        enable = true,
        //                        Id = -1,
        //                        Key = "Select civil support type",
        //                        Label = "Select civil support type",
        //                        Manage = false,
        //                        Required = false,
        //                        Value = "Civil with legs"
        //                    });
        //                    MWInstallationInfo.Add(new BaseInstAttView
        //                    {
        //                        AutoFill = false,
        //                        DataType = "List",
        //                        DataTypeId = null,
        //                        Desc = "Select civil with legs support items",
        //                        enable = true,
        //                        Id = AllCivilInst.Id,
        //                        Key = "Select civil with legs support items",
        //                        Label = "Select civil with legs support items",
        //                        Manage = false,
        //                        Required = false,
        //                        Value = _unitOfWork.CivilWithLegsRepository.GetByID(AllCivilInst.civilWithLegsId.Value).Name
        //                    });

        //                    if (CivilLoads.sideArmId != null)
        //                    {
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the installation place type",
        //                            enable = true,
        //                            Id = MW_ODU.OduInstallationTypeId.Value,
        //                            Key = "Select the installation place type",
        //                            Label = "Select the installation place type",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = _unitOfWork.OduInstallationTypeRepository.GetWhereFirst(x => x.Id == MW_ODU.OduInstallationTypeId.Value).Name
        //                        });
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the sidearm",
        //                            enable = true,
        //                            Id = CivilLoads.sideArmId.Value,
        //                            Key = "Select the sidearm",
        //                            Label = "Select the sidearm",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = CivilLoads.sideArm.Name
        //                        });
        //                    }
        //                    else if (CivilLoads.legId != null)
        //                    {
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the installation place type",
        //                            enable = true,
        //                            Id = MW_ODU.OduInstallationTypeId.Value,
        //                            Key = "Select the installation place type",
        //                            Label = "Select the installation place type",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = _unitOfWork.OduInstallationTypeRepository.GetWhereFirst(x => x.Id == MW_ODU.OduInstallationTypeId.Value).Name
        //                        });
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the seperate place",
        //                            enable = true,
        //                            Id = -1,
        //                            Key = "Select the seperate place",
        //                            Label = "Select the seperate place",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = "Leg"
        //                        });
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the leg",
        //                            enable = true,
        //                            Id = CivilLoads.legId.Value,
        //                            Key = "Select the leg",
        //                            Label = "Select the leg",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = CivilLoads.leg.CiviLegName
        //                        });
        //                    }
        //                    else if (MW_ODU.Mw_DishId != null ? MW_ODU.Mw_DishId != 0 : false)
        //                    {
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the installation place type",
        //                            enable = true,
        //                            Id = MW_ODU.OduInstallationTypeId.Value,
        //                            Key = "Select the installation place type",
        //                            Label = "Select the installation place type",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = _unitOfWork.OduInstallationTypeRepository.GetWhereFirst(x => x.Id == MW_ODU.OduInstallationTypeId).Name
        //                        });
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the dish ",
        //                            enable = true,
        //                            Id = MW_ODU.Mw_DishId.Value,
        //                            Key = "Select the dish",
        //                            Label = "Select the dish",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = _unitOfWork.MW_DishRepository.GetWhereFirst(x => x.Id == MW_ODU.Mw_DishId.Value).DishName
        //                        });
        //                    }
        //                    else
        //                    {
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the installation place type",
        //                            enable = true,
        //                            Id = MW_ODU.OduInstallationTypeId.Value,
        //                            Key = "Select the installation place type",
        //                            Label = "Select the installation place type",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = _unitOfWork.OduInstallationTypeRepository.GetWhereFirst(x => x.Id == MW_ODU.OduInstallationTypeId).Name
        //                        });
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the seperate place",
        //                            enable = true,
        //                            Id = -1,
        //                            Key = "Select the seperate place",
        //                            Label = "Select the seperate place",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = "Direct"
        //                        });
        //                    }
        //                }
        //                else if (AllCivilInst.civilWithoutLegId != null)
        //                {
        //                    MWInstallationInfo.Add(new BaseInstAttView
        //                    {
        //                        AutoFill = false,
        //                        DataType = "List",
        //                        DataTypeId = null,
        //                        Desc = "Select civil support type",
        //                        enable = true,
        //                        Id = -1,
        //                        Key = "Select civil support type",
        //                        Label = "Select civil support type",
        //                        Manage = false,
        //                        Required = false,
        //                        Value = "Civil without legs"
        //                    });
        //                    MWInstallationInfo.Add(new BaseInstAttView
        //                    {
        //                        AutoFill = false,
        //                        DataType = "List",
        //                        DataTypeId = null,
        //                        Desc = "Select civil without legs support items",
        //                        enable = true,
        //                        Id = AllCivilInst.Id,
        //                        Key = "Select civil without legs support items",
        //                        Label = "Select civil without legs support items",
        //                        Manage = false,
        //                        Required = false,
        //                        Value = _unitOfWork.CivilWithoutLegRepository.GetByID(AllCivilInst.civilWithoutLegId.Value).Name
        //                    });

        //                    if (CivilLoads.sideArmId != null)
        //                    {
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the installation place type",
        //                            enable = true,
        //                            Id = MW_ODU.OduInstallationTypeId.Value,
        //                            Key = "Select the installation place type",
        //                            Label = "Select the installation place type",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = _unitOfWork.OduInstallationTypeRepository.GetWhereFirst(x => x.Id == MW_ODU.OduInstallationTypeId.Value).Name
        //                        });
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the sidearm",
        //                            enable = true,
        //                            Id = CivilLoads.sideArmId.Value,
        //                            Key = "Select the sidearm",
        //                            Label = "Select the sidearm",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = CivilLoads.sideArm.Name
        //                        });
        //                    }
        //                    else if (MW_ODU.Mw_DishId != null ? MW_ODU.Mw_DishId != 0 : false)
        //                    {
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the installation place type",
        //                            enable = true,
        //                            Id = MW_ODU.OduInstallationTypeId.Value,
        //                            Key = "Select the installation place type",
        //                            Label = "Select the installation place type",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = _unitOfWork.OduInstallationTypeRepository.GetWhereFirst(x => x.Id == MW_ODU.OduInstallationTypeId.Value).Name
        //                        });
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the dish",
        //                            enable = true,
        //                            Id = MW_ODU.Mw_DishId.Value,
        //                            Key = "Select the dish",
        //                            Label = "Select the dish",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = _unitOfWork.MW_DishRepository.GetWhereFirst(x => x.Id == MW_ODU.Mw_DishId).DishName
        //                        });
        //                    }
        //                    else
        //                    {
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the installation place type",
        //                            enable = true,
        //                            Id = MW_ODU.OduInstallationTypeId.Value,
        //                            Key = "Select the installation place type",
        //                            Label = "Select the installation place type",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = _unitOfWork.OduInstallationTypeRepository.GetWhereFirst(x => x.Id == MW_ODU.OduInstallationTypeId).Name
        //                        });
        //                    }
        //                }
        //                else if (AllCivilInst.civilNonSteelId != null)
        //                {
        //                    MWInstallationInfo.Add(new BaseInstAttView
        //                    {
        //                        AutoFill = false,
        //                        DataType = "List",
        //                        DataTypeId = null,
        //                        Desc = "Select civil support type",
        //                        enable = true,
        //                        Id = -1,
        //                        Key = "Select civil support type",
        //                        Label = "Select civil support type",
        //                        Manage = false,
        //                        Required = false,
        //                        Value = "Civil non steel"
        //                    });
        //                    MWInstallationInfo.Add(new BaseInstAttView
        //                    {
        //                        AutoFill = false,
        //                        DataType = "List",
        //                        DataTypeId = null,
        //                        Desc = "Select civil non steel support items",
        //                        enable = true,
        //                        Id = AllCivilInst.Id,
        //                        Key = "Select civil non steel support items",
        //                        Label = "Select civil non steel support items",
        //                        Manage = false,
        //                        Required = false,
        //                        Value = _unitOfWork.CivilNonSteelRepository.GetByID(AllCivilInst.civilNonSteelId.Value).Name
        //                    });

        //                    if (CivilLoads.sideArmId != null)
        //                    {
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the installation place type",
        //                            enable = true,
        //                            Id = MW_ODU.OduInstallationTypeId.Value,
        //                            Key = "Select the installation place type",
        //                            Label = "Select the installation place type",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = _unitOfWork.OduInstallationTypeRepository.GetWhereFirst(x => x.Id == MW_ODU.OduInstallationTypeId.Value).Name
        //                        });
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the sidearm",
        //                            enable = true,
        //                            Id = CivilLoads.sideArmId.Value,
        //                            Key = "Select the sidearm",
        //                            Label = "Select the sidearm",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = CivilLoads.sideArm.Name
        //                        });
        //                    }
        //                    else if (MW_ODU.Mw_DishId != null ? MW_ODU.Mw_DishId != 0 : false)
        //                    {
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the installation place type",
        //                            enable = true,
        //                            Id = MW_ODU.OduInstallationTypeId.Value,
        //                            Key = "Select the installation place type",
        //                            Label = "Select the installation place type",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = _unitOfWork.OduInstallationTypeRepository.GetWhereFirst(x => x.Id == MW_ODU.OduInstallationTypeId.Value).Name
        //                        });
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the dish",
        //                            enable = true,
        //                            Id = MW_ODU.Mw_DishId.Value,
        //                            Key = "Select the dish",
        //                            Label = "Select the dish",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = _unitOfWork.MW_DishRepository.GetWhereFirst(x => x.Id == MW_ODU.Mw_DishId).DishName
        //                        });
        //                    }
        //                    else
        //                    {
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the installation place type",
        //                            enable = true,
        //                            Id = MW_ODU.OduInstallationTypeId.Value,
        //                            Key = "Select the installation place type",
        //                            Label = "Select the installation place type",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = _unitOfWork.OduInstallationTypeRepository.GetWhereFirst(x => x.Id == MW_ODU.OduInstallationTypeId).Name
        //                        });
        //                    }
        //                }

        //                MWInstallationInfo.Add(new BaseInstAttView
        //                {
        //                    AutoFill = false,
        //                    DataType = "List",
        //                    DataTypeId = null,
        //                    Desc = "allLoadInstId",
        //                    enable = false,
        //                    Id = AllLoadInst.Id,
        //                    Key = "allLoadInstId",
        //                    Label = "allLoadInstId",
        //                    Manage = false,
        //                    Required = false,
        //                    Value = AllLoadInst.Id
        //                });
        //                objectInst.SideArmInstallationInfo = MWInstallationInfo;
        //            }
        //        }
        //        else if (LoadSubType.TLImwDish.ToString() == TableName)
        //        {
        //            TLImwDish MW_Dish = _unitOfWork.MW_DishRepository
        //                .GetIncludeWhereFirst(x => x.Id == MWInsId, x => x.MwDishLibrary,
        //                    x => x.RepeaterType, x => x.owner, x => x.PolarityOnLocation,
        //                    x => x.ItemConnectTo, x => x.InstallationPlace);

        //            MW_DishLibraryViewModel MwdishLibrary = _mapper.Map<MW_DishLibraryViewModel>(_unitOfWork.MW_DishLibraryRepository
        //                .GetIncludeWhereFirst(x => x.Id == MW_Dish.MwDishLibraryId, x => x.polarityType, x => x.asType));

        //            List<BaseAttView> LibraryAttributes = _unitOfWork.AttributeActivatedRepository
        //               .GetAttributeActivated(TablesNames.TLImwDishLibrary.ToString(), MwdishLibrary, null).ToList();

        //            foreach (BaseAttView LibraryAttribute in LibraryAttributes)
        //            {
        //                if (LibraryAttribute.DataType.ToLower() == "list")
        //                {
        //                    LibraryAttribute.Value = MwdishLibrary.GetType().GetProperties()
        //                        .FirstOrDefault(x => x.Name.ToLower() == LibraryAttribute.Label.ToLower()).GetValue(MwdishLibrary);
        //                }
        //            }

        //            List<BaseAttView> LogisticalAttributes = _mapper.Map<List<BaseAttView>>(_unitOfWork.LogistcalRepository
        //               .GetLogistical(TablePartName.MW.ToString(), TablesNames.TLImwDishLibrary.ToString(), MwdishLibrary.Id).ToList());

        //            LibraryAttributes.AddRange(LogisticalAttributes);

        //            objectInst.LibraryActivatedAttributes = LibraryAttributes;

        //            List<BaseInstAttView> ListAttributesActivated = _unitOfWork.AttributeActivatedRepository
        //                .GetInstAttributeActivated(TablesNames.TLImwDish.ToString(), MW_Dish,
        //                    "InstallationPlaceId").ToList();

        //            BaseInstAttView NameAttribute = ListAttributesActivated.FirstOrDefault(x => x.Key.ToLower() == "DishName".ToLower());
        //            if (NameAttribute != null)
        //            {
        //                BaseInstAttView Swap = ListAttributesActivated[0];
        //                ListAttributesActivated[ListAttributesActivated.IndexOf(NameAttribute)] = Swap;
        //                ListAttributesActivated[0] = NameAttribute;
        //            }
        //            foreach (BaseInstAttView FKitem in ListAttributesActivated)
        //            {
        //                if (FKitem.Desc.ToLower() == "tliowner")
        //                {
        //                    if (MW_Dish.owner == null)
        //                    {
        //                        FKitem.Value = "NA";
        //                    }
        //                    else
        //                    {
        //                        FKitem.Value = MW_Dish.owner.OwnerName;
        //                    }
        //                }
        //                else if (FKitem.Desc.ToLower() == "tlirepeatertype")
        //                {
        //                    if (MW_Dish.RepeaterType == null)
        //                    {
        //                        FKitem.Value = "NA";
        //                    }
        //                    else
        //                    {
        //                        FKitem.Value = MW_Dish.RepeaterType.Name;
        //                    }
        //                }
        //                else if (FKitem.Desc.ToLower() == "tlipolarityonlocation")
        //                {
        //                    if (MW_Dish.PolarityOnLocation == null)
        //                    {
        //                        FKitem.Value = "NA";
        //                    }
        //                    else
        //                    {
        //                        FKitem.Value = MW_Dish.PolarityOnLocation.Name;
        //                    }
        //                }
        //                else if (FKitem.Desc.ToLower() == "tliitemconnectto")
        //                {
        //                    if (MW_Dish.ItemConnectTo == null)
        //                    {
        //                        FKitem.Value = "NA";
        //                    }
        //                    else
        //                    {
        //                        FKitem.Value = MW_Dish.ItemConnectTo.Name;
        //                    }
        //                }
        //                else if (FKitem.Desc.ToLower() == "tlimwdishlibrary")
        //                {
        //                    if (MW_Dish.MwDishLibrary == null)
        //                        FKitem.Value = "NA";
        //                    else
        //                    {
        //                        FKitem.Value = MW_Dish.MwDishLibrary.Model;
        //                    }
        //                }
        //            }

        //            objectInst.AttributesActivated = ListAttributesActivated;

        //            objectInst.DynamicAtts = _unitOfWork.DynamicAttInstValueRepository.
        //                GetDynamicInstAtts(TableNameEntity.Id, MWInsId, null);

        //            AllLoadInst = _unitOfWork.AllLoadInstRepository.GetWhereFirst(x => x.mwDishId == MWInsId);

        //            CivilLoads = _unitOfWork.CivilLoadsRepository
        //               .GetIncludeWhereFirst(x => x.allLoadInstId == AllLoadInst.Id, x => x.sideArm, x => x.site, x => x.leg, x => x.allCivilInst,
        //                   x => x.allLoadInst.loadOther, x => x.allLoadInst.mwBU, x => x.allLoadInst.mwDish, x => x.allLoadInst.mwODU, x => x.allLoadInst.mwOther,
        //                   x => x.allLoadInst.mwRFU, x => x.allLoadInst.power, x => x.allLoadInst.radioAntenna, x => x.allLoadInst.radioOther, x => x.allLoadInst.radioRRU,
        //                   x => x.allCivilInst.civilWithLegs, x => x.allCivilInst.civilWithoutLeg, x => x.allCivilInst.civilNonSteel, x => x.civilSteelSupportCategory);

        //            LoadInstAttributes = _unitOfWork.AttributeActivatedRepository
        //                .GetAttributeActivated(TablesNames.TLIcivilLoads.ToString(), CivilLoads, null, "allLoadInstId",
        //                    "Dismantle", "SiteCode", "civilSteelSupportCategoryId", "legId", "Leg2Id",
        //                        "sideArmId", "allCivilInstId").ToList();

        //            List<KeyValuePair<string, List<DropDownListFilters>>> CivilLoadsRelatedTables = _unitOfWork.CivilLoadsRepository
        //                .GetRelatedTables(CivilLoads.SiteCode);
        //            if (CivilLoads != null)
        //            {
        //                List<KeyValuePair<string, List<DropDownListFilters>>> mwdishRelatedTables = _unitOfWork.MW_DishRepository
        //                    .GetRelatedTables();
        //                mwdishRelatedTables.AddRange(CivilLoadsRelatedTables);

        //                if (CivilLoads.allCivilInst.civilWithLegsId != null)
        //                {
        //                    List<TLIleg> LegsForCivilWithLegLibrary = _unitOfWork.LegRepository
        //                        .GetWhere(x => x.CivilWithLegInstId == CivilLoads.allCivilInst.civilWithLegsId).ToList();

        //                    List<DropDownListFilters> LegIds = _mapper.Map<List<DropDownListFilters>>(LegsForCivilWithLegLibrary);

        //                    mwdishRelatedTables.Add(new KeyValuePair<string, List<DropDownListFilters>>("Leg1Id", LegIds));

        //                    List<TLIleg> Legs2ForCivilWithLegLibrary = LegsForCivilWithLegLibrary.Except(LegsForCivilWithLegLibrary
        //                        .Where(x => x.Id == CivilLoads.legId)).ToList();

        //                    List<DropDownListFilters> Leg2Ids = _mapper.Map<List<DropDownListFilters>>(Legs2ForCivilWithLegLibrary);

        //                    mwdishRelatedTables.Add(new KeyValuePair<string, List<DropDownListFilters>>("Leg2Id", Leg2Ids));
        //                }

        //                objectInst.RelatedTables = mwdishRelatedTables;

        //                AllCivilInst = _unitOfWork.CivilLoadsRepository
        //                   .GetIncludeWhereFirst(x => (x.allLoadInstId != null ? (x.allLoadInst.mwDishId != null ?
        //                       x.allLoadInst.mwDishId.Value == MWInsId : false) : false) && !x.Dismantle, x => x.allCivilInst, x => x.allLoadInst).allCivilInst;

        //                if (AllCivilInst.civilWithLegsId != null)
        //                {
        //                    MWInstallationInfo.Add(new BaseInstAttView
        //                    {
        //                        AutoFill = false,
        //                        DataType = "List",
        //                        DataTypeId = null,
        //                        Desc = "Select civil support type",
        //                        enable = true,
        //                        Id = -1,
        //                        Key = "Select civil support type",
        //                        Label = "Select civil support type",
        //                        Manage = false,
        //                        Required = false,
        //                        Value = "Civil with legs"
        //                    });
        //                    MWInstallationInfo.Add(new BaseInstAttView
        //                    {
        //                        AutoFill = false,
        //                        DataType = "List",
        //                        DataTypeId = null,
        //                        Desc = "Select civil with legs support items",
        //                        enable = true,
        //                        Id = AllCivilInst.Id,
        //                        Key = "Select civil with legs support items",
        //                        Label = "Select civil with legs support items",
        //                        Manage = false,
        //                        Required = false,
        //                        Value = _unitOfWork.CivilWithLegsRepository.GetByID(AllCivilInst.civilWithLegsId.Value).Name
        //                    });

        //                    if (CivilLoads.sideArmId != null)
        //                    {
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the installation place type",
        //                            enable = true,
        //                            Id = -1,
        //                            Key = "Select the installation place type",
        //                            Label = "Select the installation place type",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = "SideArm"
        //                        });
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the sidearm",
        //                            enable = true,
        //                            Id = CivilLoads.sideArmId.Value,
        //                            Key = "Select the sidearm",
        //                            Label = "Select the sidearm",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = CivilLoads.sideArm.Name
        //                        });
        //                    }
        //                    else if (CivilLoads.legId != null)
        //                    {
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the installation place type",
        //                            enable = true,
        //                            Id = -1,
        //                            Key = "Select the installation place type",
        //                            Label = "Select the installation place type",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = "Leg"
        //                        });
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the leg",
        //                            enable = true,
        //                            Id = CivilLoads.legId.Value,
        //                            Key = "Select the leg",
        //                            Label = "Select the leg",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = CivilLoads.leg.CiviLegName
        //                        });
        //                    }
        //                    else
        //                    {
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the installation place type",
        //                            enable = true,
        //                            Id = -1,
        //                            Key = "Select the installation place type",
        //                            Label = "Select the installation place type",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = "Direct"
        //                        });
        //                    }
        //                }
        //                else if (AllCivilInst.civilWithoutLegId != null)
        //                {
        //                    MWInstallationInfo.Add(new BaseInstAttView
        //                    {
        //                        AutoFill = false,
        //                        DataType = "List",
        //                        DataTypeId = null,
        //                        Desc = "Select civil support type",
        //                        enable = true,
        //                        Id = -1,
        //                        Key = "Select civil support type",
        //                        Label = "Select civil support type",
        //                        Manage = false,
        //                        Required = false,
        //                        Value = "Civil without legs"
        //                    });
        //                    MWInstallationInfo.Add(new BaseInstAttView
        //                    {
        //                        AutoFill = false,
        //                        DataType = "List",
        //                        DataTypeId = null,
        //                        Desc = "Select civil without legs support items",
        //                        enable = true,
        //                        Id = AllCivilInst.Id,
        //                        Key = "Select civil without legs support items",
        //                        Label = "Select civil without legs support items",
        //                        Manage = false,
        //                        Required = false,
        //                        Value = _unitOfWork.CivilWithoutLegRepository.GetByID(AllCivilInst.civilWithoutLegId.Value).Name
        //                    });

        //                    if (CivilLoads.sideArmId != null)
        //                    {
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the installation place type",
        //                            enable = true,
        //                            Id = -1,
        //                            Key = "Select the installation place type",
        //                            Label = "Select the installation place type",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = "SideArm"
        //                        });
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the sidearm",
        //                            enable = true,
        //                            Id = CivilLoads.sideArmId.Value,
        //                            Key = "Select the sidearm",
        //                            Label = "Select the sidearm",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = CivilLoads.sideArm.Name
        //                        });
        //                    }
        //                    else
        //                    {
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the installation place type",
        //                            enable = true,
        //                            Id = -1,
        //                            Key = "Select the installation place type",
        //                            Label = "Select the installation place type",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = "Direct"
        //                        });
        //                    }
        //                }
        //                else if (AllCivilInst.civilNonSteelId != null)
        //                {
        //                    MWInstallationInfo.Add(new BaseInstAttView
        //                    {
        //                        AutoFill = false,
        //                        DataType = "List",
        //                        DataTypeId = null,
        //                        Desc = "Select civil support type",
        //                        enable = true,
        //                        Id = -1,
        //                        Key = "Select civil support type",
        //                        Label = "Select civil support type",
        //                        Manage = false,
        //                        Required = false,
        //                        Value = "Civil non steel"
        //                    });
        //                    MWInstallationInfo.Add(new BaseInstAttView
        //                    {
        //                        AutoFill = false,
        //                        DataType = "List",
        //                        DataTypeId = null,
        //                        Desc = "Select civil non steel support items",
        //                        enable = true,
        //                        Id = AllCivilInst.Id,
        //                        Key = "Select civil non steel support items",
        //                        Label = "Select civil non steel support items",
        //                        Manage = false,
        //                        Required = false,
        //                        Value = _unitOfWork.CivilNonSteelRepository.GetByID(AllCivilInst.civilNonSteelId.Value).Name
        //                    });

        //                    if (CivilLoads.sideArmId != null)
        //                    {
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the installation place type",
        //                            enable = true,
        //                            Id = -1,
        //                            Key = "Select the installation place type",
        //                            Label = "Select the installation place type",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = "SideArm"
        //                        });
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the sidearm",
        //                            enable = true,
        //                            Id = CivilLoads.sideArmId.Value,
        //                            Key = "Select the sidearm",
        //                            Label = "Select the sidearm",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = CivilLoads.sideArm.Name
        //                        });
        //                    }
        //                    else
        //                    {
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the installation place type",
        //                            enable = true,
        //                            Id = -1,
        //                            Key = "Select the installation place type",
        //                            Label = "Select the installation place type",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = "Direct"
        //                        });
        //                    }
        //                }

        //                MWInstallationInfo.Add(new BaseInstAttView
        //                {
        //                    AutoFill = false,
        //                    DataType = "List",
        //                    DataTypeId = null,
        //                    Desc = "allLoadInstId",
        //                    enable = false,
        //                    Id = AllLoadInst.Id,
        //                    Key = "allLoadInstId",
        //                    Label = "allLoadInstId",
        //                    Manage = false,
        //                    Required = false,
        //                    Value = AllLoadInst.Id
        //                });
        //                objectInst.SideArmInstallationInfo = MWInstallationInfo;
        //            }
        //        }
        //        else if (LoadSubType.TLImwRFU.ToString() == TableName)
        //        {
        //            TLImwRFU MW_RFU = _unitOfWork.MW_RFURepository
        //                .GetIncludeWhereFirst(x => x.Id == MWInsId, x => x.Owner,
        //                    x => x.MwPort, x => x.MwRFULibrary, x => x.MwPort.MwBU);

        //            MW_RFULibraryViewModel MwRfuLibrary = _mapper.Map<MW_RFULibraryViewModel>(_unitOfWork.MW_RFULibraryRepository
        //              .GetIncludeWhereFirst(x => x.Id == MW_RFU.MwRFULibraryId, x => x.diversityType, x => x.boardType));

        //            List<BaseAttView> LibraryAttributes = _unitOfWork.AttributeActivatedRepository
        //               .GetAttributeActivated(TablesNames.TLImwRFULibrary.ToString(), MwRfuLibrary, null).ToList();

        //            foreach (BaseAttView LibraryAttribute in LibraryAttributes)
        //            {
        //                if (LibraryAttribute.DataType.ToLower() == "list")
        //                {
        //                    LibraryAttribute.Value = MwRfuLibrary.GetType().GetProperties()
        //                        .FirstOrDefault(x => x.Name.ToLower() == LibraryAttribute.Label.ToLower()).GetValue(MwRfuLibrary);
        //                }
        //            }

        //            List<BaseAttView> LogisticalAttributes = _mapper.Map<List<BaseAttView>>(_unitOfWork.LogistcalRepository
        //                .GetLogistical(TablePartName.MW.ToString(), TablesNames.TLImwRFULibrary.ToString(), MwRfuLibrary.Id).ToList());

        //            LibraryAttributes.AddRange(LogisticalAttributes);

        //            objectInst.LibraryActivatedAttributes = LibraryAttributes;

        //            List<BaseInstAttView> ListAttributesActivated = _unitOfWork.AttributeActivatedRepository
        //                .GetInstAttributeActivated(LoadSubType.TLImwRFU.ToString(), MW_RFU).ToList();

        //            BaseInstAttView NameAttribute = ListAttributesActivated.FirstOrDefault(x => x.Key.ToLower() == "Name".ToLower());
        //            if (NameAttribute != null)
        //            {
        //                BaseInstAttView Swap = ListAttributesActivated[0];
        //                ListAttributesActivated[ListAttributesActivated.IndexOf(NameAttribute)] = Swap;
        //                ListAttributesActivated[0] = NameAttribute;
        //            }
        //            foreach (BaseInstAttView FKitem in ListAttributesActivated)
        //            {
        //                if (FKitem.Desc.ToLower() == "tliowner")
        //                {
        //                    if (MW_RFU.Owner == null)
        //                        FKitem.Value = "NA";

        //                    else
        //                    {
        //                        FKitem.Value = MW_RFU.Owner.OwnerName;
        //                    }
        //                }
        //                else if (FKitem.Desc.ToLower() == "tlimwport")
        //                {
        //                    if (MW_RFU.MwPort == null)
        //                        FKitem.Value = "NA";

        //                    else
        //                    {
        //                        FKitem.Value = MW_RFU.MwPort.Port_Name;
        //                    }
        //                }
        //                else if (FKitem.Desc.ToLower() == "tlimwrfulibrary")
        //                {
        //                    if (MW_RFU.MwRFULibrary == null)
        //                        FKitem.Value = "NA";

        //                    else
        //                    {
        //                        FKitem.Value = MW_RFU.MwRFULibrary.Model;
        //                    }
        //                }
        //            }
        //            objectInst.AttributesActivated = ListAttributesActivated;

        //            objectInst.DynamicAtts = _unitOfWork.DynamicAttInstValueRepository
        //               .GetDynamicInstAtts(TableNameEntity.Id, MWInsId, null);

        //            AllLoadInst = _unitOfWork.AllLoadInstRepository.GetWhereFirst(x => x.mwRFUId == MWInsId);

        //            CivilLoads = _unitOfWork.CivilLoadsRepository
        //                .GetIncludeWhereFirst(x => x.allLoadInstId == AllLoadInst.Id, x => x.sideArm, x => x.site, x => x.leg, x => x.allCivilInst,
        //                    x => x.allLoadInst.loadOther, x => x.allLoadInst.mwBU, x => x.allLoadInst.mwDish, x => x.allLoadInst.mwODU, x => x.allLoadInst.mwOther,
        //                    x => x.allLoadInst.mwRFU, x => x.allLoadInst.power, x => x.allLoadInst.radioAntenna, x => x.allLoadInst.radioOther, x => x.allLoadInst.radioRRU,
        //                    x => x.allCivilInst.civilWithLegs, x => x.allCivilInst.civilWithoutLeg, x => x.allCivilInst.civilNonSteel, x => x.civilSteelSupportCategory);

        //            LoadInstAttributes = _unitOfWork.AttributeActivatedRepository
        //                .GetAttributeActivated(TablesNames.TLIcivilLoads.ToString(), CivilLoads, null, "allLoadInstId",
        //                    "Dismantle", "SiteCode", "civilSteelSupportCategoryId", "legId", "Leg2Id",
        //                        "sideArmId", "allCivilInstId").ToList();

        //            List<KeyValuePair<string, List<DropDownListFilters>>> CivilLoadsRelatedTables = _unitOfWork.CivilLoadsRepository
        //                .GetRelatedTables(CivilLoads.SiteCode);
        //            if (CivilLoads != null)
        //            {
        //                List<KeyValuePair<string, List<DropDownListFilters>>> mwrfuRelatedTables = _unitOfWork.MW_RFURepository
        //                    .GetRelatedTables();
        //                mwrfuRelatedTables.AddRange(CivilLoadsRelatedTables);

        //                if (CivilLoads.allCivilInst.civilWithLegsId != null)
        //                {
        //                    List<TLIleg> LegsForCivilWithLegLibrary = _unitOfWork.LegRepository
        //                        .GetWhere(x => x.CivilWithLegInstId == CivilLoads.allCivilInst.civilWithLegsId).ToList();

        //                    List<DropDownListFilters> LegIds = _mapper.Map<List<DropDownListFilters>>(LegsForCivilWithLegLibrary);

        //                    mwrfuRelatedTables.Add(new KeyValuePair<string, List<DropDownListFilters>>("Leg1Id", LegIds));

        //                    List<TLIleg> Legs2ForCivilWithLegLibrary = LegsForCivilWithLegLibrary.Except(LegsForCivilWithLegLibrary
        //                        .Where(x => x.Id == CivilLoads.legId)).ToList();

        //                    List<DropDownListFilters> Leg2Ids = _mapper.Map<List<DropDownListFilters>>(Legs2ForCivilWithLegLibrary);

        //                    mwrfuRelatedTables.Add(new KeyValuePair<string, List<DropDownListFilters>>("Leg2Id", Leg2Ids));
        //                }

        //                objectInst.RelatedTables = mwrfuRelatedTables;

        //                AllCivilInst = _unitOfWork.CivilLoadsRepository
        //                   .GetIncludeWhereFirst(x => (x.allLoadInstId != null ? (x.allLoadInst.mwRFUId != null ?
        //                       x.allLoadInst.mwRFUId.Value == MWInsId : false) : false) && !x.Dismantle, x => x.allCivilInst, x => x.allLoadInst).allCivilInst;

        //                if (AllCivilInst.civilWithLegsId != null)
        //                {
        //                    MWInstallationInfo.Add(new BaseInstAttView
        //                    {
        //                        AutoFill = false,
        //                        DataType = "List",
        //                        DataTypeId = null,
        //                        Desc = "Select civil support type",
        //                        enable = true,
        //                        Id = -1,
        //                        Key = "Select civil support type",
        //                        Label = "Select civil support type",
        //                        Manage = false,
        //                        Required = false,
        //                        Value = "Civil with legs"
        //                    });
        //                    MWInstallationInfo.Add(new BaseInstAttView
        //                    {
        //                        AutoFill = false,
        //                        DataType = "List",
        //                        DataTypeId = null,
        //                        Desc = "Select civil with legs support items",
        //                        enable = true,
        //                        Id = AllCivilInst.Id,
        //                        Key = "Select civil with legs support items",
        //                        Label = "Select civil with legs support items",
        //                        Manage = false,
        //                        Required = false,
        //                        Value = _unitOfWork.CivilWithLegsRepository.GetByID(AllCivilInst.civilWithLegsId.Value).Name
        //                    });
        //                    MWInstallationInfo.Add(new BaseInstAttView
        //                    {
        //                        AutoFill = false,
        //                        DataType = "List",
        //                        DataTypeId = null,
        //                        Desc = "Select the BU",
        //                        enable = true,
        //                        Id = MW_RFU.MwPort.MwBUId,
        //                        Key = "Select the BU",
        //                        Label = "Select the BU",
        //                        Manage = false,
        //                        Required = false,
        //                        Value = MW_RFU.MwPort.MwBU.Name
        //                    });
        //                    MWInstallationInfo.Add(new BaseInstAttView
        //                    {
        //                        AutoFill = false,
        //                        DataType = "List",
        //                        DataTypeId = null,
        //                        Desc = "Select the port of BU",
        //                        enable = true,
        //                        Id = MW_RFU.MwPortId.Value,
        //                        Key = "Select the port of BU",
        //                        Label = "Select the port of BU",
        //                        Manage = false,
        //                        Required = false,
        //                        Value = MW_RFU.MwPort.Port_Name
        //                    });
        //                }
        //                else if (AllCivilInst.civilWithoutLegId != null)
        //                {
        //                    MWInstallationInfo.Add(new BaseInstAttView
        //                    {
        //                        AutoFill = false,
        //                        DataType = "List",
        //                        DataTypeId = null,
        //                        Desc = "Select civil support type",
        //                        enable = true,
        //                        Id = -1,
        //                        Key = "Select civil support type",
        //                        Label = "Select civil support type",
        //                        Manage = false,
        //                        Required = false,
        //                        Value = "Civil without Legs"
        //                    });
        //                    MWInstallationInfo.Add(new BaseInstAttView
        //                    {
        //                        AutoFill = false,
        //                        DataType = "List",
        //                        DataTypeId = null,
        //                        Desc = "Select civil without legs support items",
        //                        enable = true,
        //                        Id = AllCivilInst.Id,
        //                        Key = "Select civil without legs support items",
        //                        Label = "Select civil without legs support items",
        //                        Manage = false,
        //                        Required = false,
        //                        Value = _unitOfWork.CivilWithoutLegRepository.GetByID(AllCivilInst.civilWithoutLegId.Value).Name
        //                    });
        //                    MWInstallationInfo.Add(new BaseInstAttView
        //                    {
        //                        AutoFill = false,
        //                        DataType = "List",
        //                        DataTypeId = null,
        //                        Desc = "Select the BU",
        //                        enable = true,
        //                        Id = MW_RFU.MwPort.MwBUId,
        //                        Key = "Select the BU",
        //                        Label = "Select the BU",
        //                        Manage = false,
        //                        Required = false,
        //                        Value = MW_RFU.MwPort.MwBU.Name
        //                    });
        //                    MWInstallationInfo.Add(new BaseInstAttView
        //                    {
        //                        AutoFill = false,
        //                        DataType = "List",
        //                        DataTypeId = null,
        //                        Desc = "Select the port of BU",
        //                        enable = true,
        //                        Id = MW_RFU.MwPortId.Value,
        //                        Key = "Select the port of BU",
        //                        Label = "Select the port of BU",
        //                        Manage = false,
        //                        Required = false,
        //                        Value = MW_RFU.MwPort.Port_Name
        //                    });
        //                }
        //                else if (AllCivilInst.civilNonSteelId != null)
        //                {
        //                    MWInstallationInfo.Add(new BaseInstAttView
        //                    {
        //                        AutoFill = false,
        //                        DataType = "List",
        //                        DataTypeId = null,
        //                        Desc = "Select civil support type",
        //                        enable = true,
        //                        Id = -1,
        //                        Key = "Select civil support type",
        //                        Label = "Select civil support type",
        //                        Manage = false,
        //                        Required = false,
        //                        Value = "Civil non steel"
        //                    });
        //                    MWInstallationInfo.Add(new BaseInstAttView
        //                    {
        //                        AutoFill = false,
        //                        DataType = "List",
        //                        DataTypeId = null,
        //                        Desc = "Select civil without legs support items",
        //                        enable = true,
        //                        Id = AllCivilInst.Id,
        //                        Key = "Select civil without legs support items",
        //                        Label = "Select civil without legs support items",
        //                        Manage = false,
        //                        Required = false,
        //                        Value = _unitOfWork.CivilNonSteelRepository.GetByID(AllCivilInst.civilNonSteelId.Value).Name
        //                    });
        //                    MWInstallationInfo.Add(new BaseInstAttView
        //                    {
        //                        AutoFill = false,
        //                        DataType = "List",
        //                        DataTypeId = null,
        //                        Desc = "Select the BU",
        //                        enable = true,
        //                        Id = MW_RFU.MwPort.MwBUId,
        //                        Key = "Select the BU",
        //                        Label = "Select the BU",
        //                        Manage = false,
        //                        Required = false,
        //                        Value = MW_RFU.MwPort.MwBU.Name
        //                    });
        //                    MWInstallationInfo.Add(new BaseInstAttView
        //                    {
        //                        AutoFill = false,
        //                        DataType = "List",
        //                        DataTypeId = null,
        //                        Desc = "Select the port of BU",
        //                        enable = true,
        //                        Id = MW_RFU.MwPortId.Value,
        //                        Key = "Select the port of BU",
        //                        Label = "Select the port of BU",
        //                        Manage = false,
        //                        Required = false,
        //                        Value = MW_RFU.MwPort.Port_Name
        //                    });
        //                }
        //                MWInstallationInfo.Add(new BaseInstAttView
        //                {
        //                    AutoFill = false,
        //                    DataType = "List",
        //                    DataTypeId = null,
        //                    Desc = "allLoadInstId",
        //                    enable = false,
        //                    Id = AllLoadInst.Id,
        //                    Key = "allLoadInstId",
        //                    Label = "allLoadInstId",
        //                    Manage = false,
        //                    Required = false,
        //                    Value = AllLoadInst.Id
        //                });

        //                objectInst.SideArmInstallationInfo = MWInstallationInfo;

        //            }
        //        }
        //        else if (LoadSubType.TLImwOther.ToString() == TableName)
        //        {
        //            TLImwOther mwOther = _unitOfWork.Mw_OtherRepository
        //                .GetIncludeWhereFirst(x => x.Id == MWInsId, x => x.mwOtherLibrary);

        //            MW_OtherLibraryViewModel MwOtherLibrary = _mapper.Map<MW_OtherLibraryViewModel>(_unitOfWork.MW_OtherLibraryRepository
        //                .GetIncludeWhereFirst(x => x.Id == mwOther.mwOtherLibraryId));

        //            List<BaseAttView> LibraryAttributes = _unitOfWork.AttributeActivatedRepository
        //               .GetAttributeActivated(TablesNames.TLImwOtherLibrary.ToString(), MwOtherLibrary, null).ToList();

        //            foreach (BaseAttView LibraryAttribute in LibraryAttributes)
        //            {
        //                if (LibraryAttribute.DataType.ToLower() == "list")
        //                {
        //                    LibraryAttribute.Value = MwOtherLibrary.GetType().GetProperties()
        //                        .FirstOrDefault(x => x.Name.ToLower() == LibraryAttribute.Label.ToLower()).GetValue(MwOtherLibrary);
        //                }
        //            }
        //            List<BaseAttView> LogisticalAttributes = _mapper.Map<List<BaseAttView>>(_unitOfWork.LogistcalRepository
        //               .GetLogistical(TablePartName.MW.ToString(), TablesNames.TLImwOtherLibrary.ToString(), MwOtherLibrary.Id).ToList());

        //            LibraryAttributes.AddRange(LogisticalAttributes);
        //            objectInst.LibraryActivatedAttributes = LibraryAttributes;

        //            List<BaseInstAttView> ListAttributesActivated = _unitOfWork.AttributeActivatedRepository
        //                .GetInstAttributeActivated(LoadSubType.TLImwOther.ToString(), mwOther, "InstallationPlaceId").ToList();

        //            BaseInstAttView NameAttribute = ListAttributesActivated.FirstOrDefault(x => x.Key.ToLower() == "Name".ToLower());
        //            if (NameAttribute != null)
        //            {
        //                BaseInstAttView Swap = ListAttributesActivated[0];
        //                ListAttributesActivated[ListAttributesActivated.IndexOf(NameAttribute)] = Swap;
        //                ListAttributesActivated[0] = NameAttribute;
        //            }
        //            foreach (BaseInstAttView FKitem in ListAttributesActivated)
        //            {
        //                if (FKitem.Desc.ToLower() == "tlimwotherlibrary")
        //                {
        //                    if (mwOther.mwOtherLibrary == null)
        //                        FKitem.Value = "NA";

        //                    else
        //                    {
        //                        FKitem.Value = mwOther.mwOtherLibrary.Model;
        //                    }
        //                }
        //            }
        //            objectInst.AttributesActivated = ListAttributesActivated;

        //            objectInst.DynamicAtts = _unitOfWork.DynamicAttInstValueRepository
        //               .GetDynamicInstAtts(TableNameEntity.Id, MWInsId, null);

        //            AllLoadInst = _unitOfWork.AllLoadInstRepository.GetWhereFirst(x => x.mwOtherId == MWInsId);

        //            CivilLoads = _unitOfWork.CivilLoadsRepository
        //                .GetIncludeWhereFirst(x => x.allLoadInstId == AllLoadInst.Id, x => x.sideArm, x => x.site, x => x.leg, x => x.allCivilInst,
        //                    x => x.allLoadInst.loadOther, x => x.allLoadInst.mwBU, x => x.allLoadInst.mwDish, x => x.allLoadInst.mwODU, x => x.allLoadInst.mwOther,
        //                    x => x.allLoadInst.mwRFU, x => x.allLoadInst.power, x => x.allLoadInst.radioAntenna, x => x.allLoadInst.radioOther, x => x.allLoadInst.radioRRU,
        //                    x => x.allCivilInst.civilWithLegs, x => x.allCivilInst.civilWithoutLeg, x => x.allCivilInst.civilNonSteel, x => x.civilSteelSupportCategory);

        //            LoadInstAttributes = _unitOfWork.AttributeActivatedRepository
        //                .GetAttributeActivated(TablesNames.TLIcivilLoads.ToString(), CivilLoads, null, "allLoadInstId",
        //                    "Dismantle", "SiteCode", "civilSteelSupportCategoryId", "legId", "Leg2Id",
        //                        "sideArmId", "allCivilInstId").ToList();

        //            List<KeyValuePair<string, List<DropDownListFilters>>> CivilLoadsRelatedTables = _unitOfWork.CivilLoadsRepository
        //                .GetRelatedTables(CivilLoads.SiteCode);
        //            if (CivilLoads != null)
        //            {
        //                List<KeyValuePair<string, List<DropDownListFilters>>> mwotherRelatedTables = _unitOfWork.Mw_OtherRepository
        //                    .GetRelatedTables();
        //                mwotherRelatedTables.AddRange(CivilLoadsRelatedTables);

        //                if (CivilLoads.allCivilInst.civilWithLegsId != null)
        //                {
        //                    List<TLIleg> LegsForCivilWithLegLibrary = _unitOfWork.LegRepository
        //                        .GetWhere(x => x.CivilWithLegInstId == CivilLoads.allCivilInst.civilWithLegsId).ToList();

        //                    List<DropDownListFilters> LegIds = _mapper.Map<List<DropDownListFilters>>(LegsForCivilWithLegLibrary);

        //                    mwotherRelatedTables.Add(new KeyValuePair<string, List<DropDownListFilters>>("Leg1Id", LegIds));

        //                    List<TLIleg> Legs2ForCivilWithLegLibrary = LegsForCivilWithLegLibrary.Except(LegsForCivilWithLegLibrary
        //                        .Where(x => x.Id == CivilLoads.legId)).ToList();

        //                    List<DropDownListFilters> Leg2Ids = _mapper.Map<List<DropDownListFilters>>(Legs2ForCivilWithLegLibrary);

        //                    mwotherRelatedTables.Add(new KeyValuePair<string, List<DropDownListFilters>>("Leg2Id", Leg2Ids));
        //                }

        //                objectInst.RelatedTables = mwotherRelatedTables;

        //                AllCivilInst = _unitOfWork.CivilLoadsRepository
        //                   .GetIncludeWhereFirst(x => (x.allLoadInstId != null ? (x.allLoadInst.mwOtherId != null ?
        //                       x.allLoadInst.mwOtherId.Value == MWInsId : false) : false) && !x.Dismantle, x => x.allCivilInst, x => x.allLoadInst).allCivilInst;

        //                if (AllCivilInst.civilWithLegsId != null)
        //                {
        //                    MWInstallationInfo.Add(new BaseInstAttView
        //                    {
        //                        AutoFill = false,
        //                        DataType = "List",
        //                        DataTypeId = null,
        //                        Desc = "Select civil support type",
        //                        enable = true,
        //                        Id = -1,
        //                        Key = "Select civil support type",
        //                        Label = "Select civil support type",
        //                        Manage = false,
        //                        Required = false,
        //                        Value = "Civil with legs"
        //                    });
        //                    MWInstallationInfo.Add(new BaseInstAttView
        //                    {
        //                        AutoFill = false,
        //                        DataType = "List",
        //                        DataTypeId = null,
        //                        Desc = "Select civil with legs support items",
        //                        enable = true,
        //                        Id = AllCivilInst.Id,
        //                        Key = "Select civil with legs support items",
        //                        Label = "Select civil with legs support items",
        //                        Manage = false,
        //                        Required = false,
        //                        Value = _unitOfWork.CivilWithLegsRepository.GetByID(AllCivilInst.civilWithLegsId.Value).Name
        //                    });

        //                    if (CivilLoads.sideArmId != null)
        //                    {
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the installation place type",
        //                            enable = true,
        //                            Id = -1,
        //                            Key = "Select the installation place type",
        //                            Label = "Select the installation place type",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = "SideArm"
        //                        });
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the sidearm",
        //                            enable = true,
        //                            Id = CivilLoads.sideArmId.Value,
        //                            Key = "Select the sidearm",
        //                            Label = "Select the sidearm",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = CivilLoads.sideArm.Name
        //                        });
        //                    }
        //                    else if (CivilLoads.legId != null)
        //                    {
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the installation place type",
        //                            enable = true,
        //                            Id = -1,
        //                            Key = "Select the installation place type",
        //                            Label = "Select the installation place type",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = "Leg"
        //                        });
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the leg",
        //                            enable = true,
        //                            Id = CivilLoads.legId.Value,
        //                            Key = "Select the leg",
        //                            Label = "Select the leg",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = CivilLoads.leg.CiviLegName
        //                        });
        //                    }
        //                    else
        //                    {
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the installation place type",
        //                            enable = true,
        //                            Id = -1,
        //                            Key = "Select the installation place type",
        //                            Label = "Select the installation place type",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = "Direct"
        //                        });
        //                    }
        //                }
        //                else if (AllCivilInst.civilWithoutLegId != null)
        //                {
        //                    MWInstallationInfo.Add(new BaseInstAttView
        //                    {
        //                        AutoFill = false,
        //                        DataType = "List",
        //                        DataTypeId = null,
        //                        Desc = "Select civil support type",
        //                        enable = true,
        //                        Id = -1,
        //                        Key = "Select civil support type",
        //                        Label = "Select civil support type",
        //                        Manage = false,
        //                        Required = false,
        //                        Value = "Civil without legs"
        //                    });
        //                    MWInstallationInfo.Add(new BaseInstAttView
        //                    {
        //                        AutoFill = false,
        //                        DataType = "List",
        //                        DataTypeId = null,
        //                        Desc = "Select civil without legs support items",
        //                        enable = true,
        //                        Id = AllCivilInst.Id,
        //                        Key = "Select civil without legs support items",
        //                        Label = "Select civil without legs support items",
        //                        Manage = false,
        //                        Required = false,
        //                        Value = _unitOfWork.CivilWithoutLegRepository.GetByID(AllCivilInst.civilWithoutLegId.Value).Name
        //                    });

        //                    if (CivilLoads.sideArmId != null)
        //                    {
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the installation place type",
        //                            enable = true,
        //                            Id = -1,
        //                            Key = "Select the installation place type",
        //                            Label = "Select the installation place type",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = "SideArm"
        //                        });
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the sidearm",
        //                            enable = true,
        //                            Id = CivilLoads.sideArmId.Value,
        //                            Key = "Select the sidearm",
        //                            Label = "Select the sidearm",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = CivilLoads.sideArm.Name
        //                        });
        //                    }
        //                    else
        //                    {
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the installation place type",
        //                            enable = true,
        //                            Id = -1,
        //                            Key = "Select the installation place type",
        //                            Label = "Select the installation place type",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = "Direct"
        //                        });
        //                    }
        //                }
        //                else if (AllCivilInst.civilNonSteelId != null)
        //                {
        //                    MWInstallationInfo.Add(new BaseInstAttView
        //                    {
        //                        AutoFill = false,
        //                        DataType = "List",
        //                        DataTypeId = null,
        //                        Desc = "Select civil support type",
        //                        enable = true,
        //                        Id = -1,
        //                        Key = "Select civil support type",
        //                        Label = "Select civil support type",
        //                        Manage = false,
        //                        Required = false,
        //                        Value = "Civil non steel"
        //                    });
        //                    MWInstallationInfo.Add(new BaseInstAttView
        //                    {
        //                        AutoFill = false,
        //                        DataType = "List",
        //                        DataTypeId = null,
        //                        Desc = "Select civil non steel support items",
        //                        enable = true,
        //                        Id = AllCivilInst.Id,
        //                        Key = "Select civil non steel support items",
        //                        Label = "Select civil non steel support items",
        //                        Manage = false,
        //                        Required = false,
        //                        Value = _unitOfWork.CivilNonSteelRepository.GetByID(AllCivilInst.civilNonSteelId.Value).Name
        //                    });

        //                    if (CivilLoads.sideArmId != null)
        //                    {
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the installation place type",
        //                            enable = true,
        //                            Id = -1,
        //                            Key = "Select the installation place type",
        //                            Label = "Select the installation place type",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = "SideArm"
        //                        });
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the sidearm",
        //                            enable = true,
        //                            Id = CivilLoads.sideArmId.Value,
        //                            Key = "Select the sidearm",
        //                            Label = "Select the sidearm",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = CivilLoads.sideArm.Name
        //                        });
        //                    }
        //                    else
        //                    {
        //                        MWInstallationInfo.Add(new BaseInstAttView
        //                        {
        //                            AutoFill = false,
        //                            DataType = "List",
        //                            DataTypeId = null,
        //                            Desc = "Select the installation place type",
        //                            enable = true,
        //                            Id = -1,
        //                            Key = "Select the installation place type",
        //                            Label = "Select the installation place type",
        //                            Manage = false,
        //                            Required = false,
        //                            Value = "Direct"
        //                        });
        //                    }
        //                }

        //                MWInstallationInfo.Add(new BaseInstAttView
        //                {
        //                    AutoFill = false,
        //                    DataType = "List",
        //                    DataTypeId = null,
        //                    Desc = "allLoadInstId",
        //                    enable = false,
        //                    Id = AllLoadInst.Id,
        //                    Key = "allLoadInstId",
        //                    Label = "allLoadInstId",
        //                    Manage = false,
        //                    Required = false,
        //                    Value = AllLoadInst.Id
        //                });
        //                objectInst.SideArmInstallationInfo = MWInstallationInfo;
        //            }
        //        }
        //        if (CivilLoads != null)
        //        {
        //            foreach (BaseAttView FKitem in LoadInstAttributes)
        //            {
        //                if (FKitem.Desc.ToLower() == "tlisidearm")
        //                {
        //                    if (CivilLoads.sideArm == null)
        //                        FKitem.Value = "NA";

        //                    else
        //                        FKitem.Value = CivilLoads.sideArm.Name;
        //                }

        //                else if (FKitem.Desc.ToLower() == "tlileg")
        //                {
        //                    if (CivilLoads.leg == null)
        //                        FKitem.Value = _unitOfWork.LegRepository.GetWhereFirst(x => x.Id == 0).CiviLegName;

        //                    else
        //                        FKitem.Value = CivilLoads.leg.CiviLegName;
        //                }

        //                if (FKitem.Desc.ToLower() == "tlicivilsteelsupportcategory")
        //                {
        //                    if (CivilLoads.civilSteelSupportCategory == null)
        //                        FKitem.Value = _unitOfWork.CivilSteelSupportCategoryRepository.GetWhereFirst(x => x.Id == 0).Name;

        //                    else
        //                        FKitem.Value = CivilLoads.civilSteelSupportCategory.Name;
        //                }
        //                else if (FKitem.Desc.ToLower() == "tlisite")
        //                {
        //                    FKitem.Value = CivilLoads.site.SiteName;
        //                }

        //                else if (FKitem.Desc.ToLower() == "tliallcivilinst")
        //                {
        //                    if (CivilLoads.allCivilInst.civilWithLegsId != null)
        //                    {
        //                        FKitem.Value = CivilLoads.allCivilInst.civilWithLegs.Name;
        //                    }
        //                    else if (CivilLoads.allCivilInst.civilWithoutLegId != null)
        //                    {
        //                        FKitem.Value = CivilLoads.allCivilInst.civilWithoutLeg.Name;
        //                    }
        //                    else if (CivilLoads.allCivilInst.civilNonSteelId != null)
        //                    {
        //                        FKitem.Value = CivilLoads.allCivilInst.civilNonSteel.Name;
        //                    }
        //                }
        //                else if (FKitem.Desc.ToLower() == "tliallloadinst")
        //                {
        //                    if (CivilLoads.allLoadInst.power != null)
        //                    {
        //                        FKitem.Value = CivilLoads.allLoadInst.power.Name;
        //                    }
        //                    else if (CivilLoads.allLoadInst.loadOther != null)
        //                    {
        //                        FKitem.Value = CivilLoads.allLoadInst.loadOther.Name;
        //                    }
        //                    else if (CivilLoads.allLoadInst.mwBU != null)
        //                    {
        //                        FKitem.Value = CivilLoads.allLoadInst.mwBU.Name;
        //                    }
        //                    else if (CivilLoads.allLoadInst.mwDish != null)
        //                    {
        //                        FKitem.Value = CivilLoads.allLoadInst.mwDish.DishName;
        //                    }
        //                    else if (CivilLoads.allLoadInst.mwODU != null)
        //                    {
        //                        FKitem.Value = CivilLoads.allLoadInst.mwODU.Name;
        //                    }
        //                    else if (CivilLoads.allLoadInst.mwOther != null)
        //                    {
        //                        FKitem.Value = CivilLoads.allLoadInst.mwOther.Name;
        //                    }
        //                    else if (CivilLoads.allLoadInst.mwRFU != null)
        //                    {
        //                        FKitem.Value = CivilLoads.allLoadInst.mwRFU.Name;
        //                    }
        //                    else if (CivilLoads.allLoadInst.radioAntenna != null)
        //                    {
        //                        FKitem.Value = CivilLoads.allLoadInst.radioAntenna.Name;
        //                    }
        //                    else if (CivilLoads.allLoadInst.radioRRU != null)
        //                    {
        //                        FKitem.Value = CivilLoads.allLoadInst.radioRRU.Name;
        //                    }
        //                    else if (CivilLoads.allLoadInst.radioOther != null)
        //                    {
        //                        FKitem.Value = CivilLoads.allLoadInst.radioOther.Name;
        //                    }
        //                }
        //            }

        //            objectInst.CivilLoads = _mapper.Map<IEnumerable<BaseInstAttView>>(LoadInstAttributes);
        //        }

        //        return new Response<ObjectInstAttsForSideArm>(true, objectInst, null, null, (int)ApiReturnCode.success);
        //    }
        //    catch (Exception err)
        //    {
        //        return new Response<ObjectInstAttsForSideArm>(true, null, null, err.Message, (int)ApiReturnCode.fail);
        //    }
        //}
        //public Response<ObjectInstAtts> GetAttForAdd(string TableName, int LibraryID, string SiteCode)
        //{
        //    try
        //    {
        //        TLItablesNames TableNameEntity = _unitOfWork.TablesNamesRepository.GetWhereFirst(x =>
        //            x.TableName == TableName);

        //        ObjectInstAtts objectInst = new ObjectInstAtts();
        //        List<BaseInstAttView> ListAttributesActivated = new List<BaseInstAttView>();

        //        if (LoadSubType.TLImwBU.ToString() == TableName)
        //        {
        //            MW_BULibraryViewModel mwBULibrary = _mapper.Map<MW_BULibraryViewModel>(_unitOfWork.MW_BULibraryRepository
        //                .GetIncludeWhereFirst(x => x.Id == LibraryID, x => x.diversityType));

        //            List<BaseAttView> LibraryAttributes = _unitOfWork.AttributeActivatedRepository
        //                .GetAttributeActivated(TablesNames.TLImwBULibrary.ToString(), mwBULibrary, null).ToList();

        //            foreach (BaseAttView LibraryAttribute in LibraryAttributes)
        //            {
        //                if (LibraryAttribute.DataType.ToLower() == "list")
        //                {
        //                    LibraryAttribute.Value = mwBULibrary.GetType().GetProperties()
        //                        .FirstOrDefault(x => x.Name.ToLower() == LibraryAttribute.Label.ToLower()).GetValue(mwBULibrary);
        //                }
        //            }

        //            List<BaseAttView> LogisticalAttributes = _mapper.Map<List<BaseAttView>>(_unitOfWork.LogistcalRepository
        //                .GetLogistical(TablePartName.MW.ToString(), Helpers.Constants.TablesNames.TLImwBULibrary.ToString(), mwBULibrary.Id).ToList());

        //            LibraryAttributes.AddRange(LogisticalAttributes);

        //            objectInst.LibraryActivatedAttributes = LibraryAttributes;

        //            ListAttributesActivated = _unitOfWork.AttributeActivatedRepository.
        //                GetInstAttributeActivated(LoadSubType.TLImwBU.ToString(), null, "Name", "InstallationPlaceId", "MwBULibraryId" /*, "EquivalentSpace"*/).ToList();

        //            BaseInstAttView NameAttribute = ListAttributesActivated.FirstOrDefault(x => x.Key.ToLower() == "Name".ToLower());
        //            if (NameAttribute != null)
        //            {
        //                BaseInstAttView Swap = ListAttributesActivated[0];
        //                ListAttributesActivated[ListAttributesActivated.IndexOf(NameAttribute)] = Swap;
        //                ListAttributesActivated[0] = NameAttribute;
        //            }
        //            foreach (BaseInstAttView FKitem in ListAttributesActivated)
        //            {
        //                if (FKitem.Desc.ToLower() == "tlibasebu")
        //                    FKitem.Value = _mapper.Map<List<BaseBUViewModel>>(_unitOfWork.BaseBURepository.GetWhere(x => !x.Disable && !x.Deleted).ToList());

        //                else if (FKitem.Desc.ToLower() == "tliowner")
        //                    FKitem.Value = _mapper.Map<List<OwnerViewModel>>(_unitOfWork.OwnerRepository.GetWhere(x => !x.Disable && !x.Deleted).ToList());

        //                else if (FKitem.Desc.ToLower() == "tlimwdish")
        //                {
        //                    var Dish = _unitOfWork.CivilLoadsRepository.GetIncludeWhere(x => x.SiteCode == SiteCode && !x.Dismantle && x.allLoadInstId != null, x => x.allLoadInst).Select(x => x.allLoadInst.mwDishId).ToList();

        //                    List<TLImwDish> mwdishlist = new List<TLImwDish>();
        //                    foreach (var item in Dish)
        //                    {
        //                        if (item != null)
        //                        {
        //                            var dishname = db.TLImwDish.FirstOrDefault(x => x.Id == item);
        //                            mwdishlist.Add(dishname);
        //                        }
        //                    }
        //                    FKitem.Value = _mapper.Map<List<MW_DishGetForAddViewModel>>(mwdishlist);

        //                }
        //                else if (FKitem.Desc.ToLower() == "tlimwport")
        //                    FKitem.Value = _mapper.Map<List<MW_PortViewModel>>(_unitOfWork.MW_PortRepository.GetWhere(x => x.Port_Type == 2).ToList());
        //            }
        //        }
        //        else if (LoadSubType.TLImwODU.ToString() == TableName)
        //        {
        //            MW_ODULibraryViewModel mwODULibrary = _mapper.Map<MW_ODULibraryViewModel>(_unitOfWork.MW_ODULibraryRepository
        //                .GetIncludeWhereFirst(x => x.Id == LibraryID, x => x.parity));

        //            List<BaseAttView> LibraryAttributes = _unitOfWork.AttributeActivatedRepository
        //                .GetAttributeActivated(TablesNames.TLImwODULibrary.ToString(), mwODULibrary, null).ToList();

        //            foreach (BaseAttView LibraryAttribute in LibraryAttributes)
        //            {
        //                if (LibraryAttribute.DataType.ToLower() == "list")
        //                {
        //                    LibraryAttribute.Value = mwODULibrary.GetType().GetProperties()
        //                        .FirstOrDefault(x => x.Name.ToLower() == LibraryAttribute.Label.ToLower()).GetValue(mwODULibrary);
        //                }
        //            }

        //            List<BaseAttView> LogisticalAttributes = _mapper.Map<List<BaseAttView>>(_unitOfWork.LogistcalRepository
        //                .GetLogistical(TablePartName.MW.ToString(), Helpers.Constants.TablesNames.TLImwODULibrary.ToString(), mwODULibrary.Id).ToList());

        //            LibraryAttributes.AddRange(LogisticalAttributes);

        //            objectInst.LibraryActivatedAttributes = LibraryAttributes;

        //            ListAttributesActivated = _unitOfWork.AttributeActivatedRepository.
        //                GetInstAttributeActivated(LoadSubType.TLImwODU.ToString(), null, "Name", "MwODULibraryId", "OduInstallationTypeId"/*, "EquivalentSpace"*/).ToList();

        //            BaseInstAttView NameAttribute = ListAttributesActivated.FirstOrDefault(x => x.Key.ToLower() == "Name".ToLower());
        //            if (NameAttribute != null)
        //            {
        //                BaseInstAttView Swap = ListAttributesActivated[0];
        //                ListAttributesActivated[ListAttributesActivated.IndexOf(NameAttribute)] = Swap;
        //                ListAttributesActivated[0] = NameAttribute;
        //            }
        //            foreach (BaseInstAttView FKitem in ListAttributesActivated)
        //            {
        //                if (FKitem.Desc.ToLower() == "tliowner")
        //                    FKitem.Value = _mapper.Map<List<OwnerViewModel>>(_unitOfWork.OwnerRepository.GetWhere(x => !x.Disable && !x.Deleted).ToList());

        //                else if (FKitem.Desc.ToLower() == "tlimwdish")
        //                {
        //                    List<int> UsedDishesIds = _unitOfWork.MW_ODURepository.GetWhere(x => x.Mw_DishId != null).Select(x => x.Mw_DishId.Value).ToList();

        //                    List<MW_DishGetForAddViewModel> MW_Dishes = _mapper.Map<List<MW_DishGetForAddViewModel>>(_unitOfWork.CivilLoadsRepository
        //                        .GetIncludeWhere(x => !x.Dismantle &&
        //                            (x.allLoadInstId != null ? x.allLoadInst.mwDishId != null : false) &&
        //                            !UsedDishesIds.Contains(x.allLoadInst.mwDishId.Value), x => x.allLoadInst, x => x.allLoadInst.mwDish)
        //                        .Select(x => x.allLoadInst.mwDish).ToList());

        //                    FKitem.Value = _mapper.Map<List<MW_DishGetForAddViewModel>>(MW_Dishes);
        //                }
        //            }

        //        }
        //        else if (LoadSubType.TLImwRFU.ToString() == TableName)
        //        {
        //            MW_RFULibraryViewModel mwRFULibrary = _mapper.Map<MW_RFULibraryViewModel>(_unitOfWork.MW_RFULibraryRepository
        //                .GetIncludeWhereFirst(x => x.Id == LibraryID, x => x.boardType, x => x.diversityType));

        //            List<BaseAttView> LibraryAttributes = _unitOfWork.AttributeActivatedRepository
        //                .GetAttributeActivated(TablesNames.TLImwRFULibrary.ToString(), mwRFULibrary, null).ToList();

        //            foreach (BaseAttView LibraryAttribute in LibraryAttributes)
        //            {
        //                if (LibraryAttribute.DataType.ToLower() == "list")
        //                {
        //                    LibraryAttribute.Value = mwRFULibrary.GetType().GetProperties()
        //                        .FirstOrDefault(x => x.Name.ToLower() == LibraryAttribute.Label.ToLower()).GetValue(mwRFULibrary);
        //                }
        //            }

        //            List<BaseAttView> LogisticalAttributes = _mapper.Map<List<BaseAttView>>(_unitOfWork.LogistcalRepository
        //                .GetLogistical(TablePartName.MW.ToString(), Helpers.Constants.TablesNames.TLImwRFULibrary.ToString(), mwRFULibrary.Id).ToList());

        //            LibraryAttributes.AddRange(LogisticalAttributes);

        //            objectInst.LibraryActivatedAttributes = LibraryAttributes;

        //            ListAttributesActivated = _unitOfWork.AttributeActivatedRepository.
        //                GetInstAttributeActivated(LoadSubType.TLImwRFU.ToString(), null, "MwRFULibraryId", "MwPortId"/*, "EquivalentSpace"*/).ToList();

        //            BaseInstAttView NameAttribute = ListAttributesActivated.FirstOrDefault(x => x.Key.ToLower() == "Name".ToLower());
        //            if (NameAttribute != null)
        //            {
        //                BaseInstAttView Swap = ListAttributesActivated[0];
        //                ListAttributesActivated[ListAttributesActivated.IndexOf(NameAttribute)] = Swap;
        //                ListAttributesActivated[0] = NameAttribute;
        //            }
        //            foreach (BaseInstAttView FKitem in ListAttributesActivated)
        //            {
        //                if (FKitem.Desc.ToLower() == "tliowner")
        //                    FKitem.Value = _mapper.Map<List<OwnerViewModel>>(_unitOfWork.OwnerRepository.GetWhere(x => !x.Disable && !x.Deleted).ToList());
        //            }
        //        }
        //        else if (LoadSubType.TLImwDish.ToString() == TableName)
        //        {
        //            MW_DishLibraryViewModel mwDishLibrary = _mapper.Map<MW_DishLibraryViewModel>(_unitOfWork.MW_DishLibraryRepository
        //                .GetIncludeWhereFirst(x => x.Id == LibraryID, x => x.asType, x => x.polarityType));

        //            List<BaseAttView> LibraryAttributes = _unitOfWork.AttributeActivatedRepository
        //                .GetAttributeActivated(TablesNames.TLImwDishLibrary.ToString(), mwDishLibrary, null).ToList();

        //            foreach (BaseAttView LibraryAttribute in LibraryAttributes)
        //            {
        //                if (LibraryAttribute.DataType.ToLower() == "list")
        //                {
        //                    LibraryAttribute.Value = mwDishLibrary.GetType().GetProperties()
        //                        .FirstOrDefault(x => x.Name.ToLower() == LibraryAttribute.Label.ToLower()).GetValue(mwDishLibrary);
        //                }
        //            }

        //            List<BaseAttView> LogisticalAttributes = _mapper.Map<List<BaseAttView>>(_unitOfWork.LogistcalRepository
        //                .GetLogistical(TablePartName.MW.ToString(), Helpers.Constants.TablesNames.TLImwDishLibrary.ToString(), mwDishLibrary.Id).ToList());

        //            LibraryAttributes.AddRange(LogisticalAttributes);

        //            objectInst.LibraryActivatedAttributes = LibraryAttributes;

        //            ListAttributesActivated = _unitOfWork.AttributeActivatedRepository.
        //                GetInstAttributeActivated(LoadSubType.TLImwDish.ToString(), null, "DishName", "InstallationPlaceId", "MwDishLibraryId"/*, "EquivalentSpace"*/).ToList();

        //            BaseInstAttView NameAttribute = ListAttributesActivated.FirstOrDefault(x => x.Key.ToLower() == "DishName".ToLower());
        //            if (NameAttribute != null)
        //            {
        //                BaseInstAttView Swap = ListAttributesActivated[0];
        //                ListAttributesActivated[ListAttributesActivated.IndexOf(NameAttribute)] = Swap;
        //                ListAttributesActivated[0] = NameAttribute;
        //            }

        //            foreach (BaseInstAttView FKitem in ListAttributesActivated)
        //            {
        //                if (FKitem.Desc.ToLower() == "tliitemconnectto")
        //                    FKitem.Value = _mapper.Map<List<ItemConnectToViewModel>>(_unitOfWork.ItemConnectToRepository.GetWhere(x => !x.Deleted && !x.Disable).ToList());

        //                else if (FKitem.Desc.ToLower() == "tlipolarityonlocation")
        //                    FKitem.Value = _mapper.Map<List<PolarityOnLocationViewModel>>(_unitOfWork.PolarityOnLocationRepository.GetWhere(x => !x.Deleted && !x.Disable).ToList());

        //                else if (FKitem.Desc.ToLower() == "tlirepeatertype")
        //                    FKitem.Value = _mapper.Map<List<RepeaterTypeViewModel>>(_unitOfWork.RepeaterTypeRepository.GetWhere(x => !x.Deleted && !x.Disable).ToList());

        //                else if (FKitem.Desc.ToLower() == "tliowner")
        //                    FKitem.Value = _mapper.Map<List<OwnerViewModel>>(_unitOfWork.OwnerRepository.GetWhere(x => !x.Deleted && !x.Disable).ToList());
        //            }
        //        }
        //        else if (LoadSubType.TLImwOther.ToString() == TableName)
        //        {
        //            TLImwOtherLibrary mwOtherLibrary = _unitOfWork.MW_OtherLibraryRepository.GetByID(LibraryID);

        //            List<BaseAttView> LibraryAttributes = _unitOfWork.AttributeActivatedRepository
        //                .GetAttributeActivated(TablesNames.TLImwOtherLibrary.ToString(), mwOtherLibrary, null).ToList();

        //            List<BaseAttView> LogisticalAttributes = _mapper.Map<List<BaseAttView>>(_unitOfWork.LogistcalRepository
        //                .GetLogistical(TablePartName.MW.ToString(), Helpers.Constants.TablesNames.TLImwOtherLibrary.ToString(), mwOtherLibrary.Id).ToList());

        //            LibraryAttributes.AddRange(LogisticalAttributes);

        //            objectInst.LibraryActivatedAttributes = LibraryAttributes;

        //            ListAttributesActivated = _unitOfWork.AttributeActivatedRepository.
        //                GetInstAttributeActivated(LoadSubType.TLImwOther.ToString(), null, "mwOtherLibraryId", /*"EquivalentSpace",*/
        //                    "InstallationPlaceId").ToList();

        //            BaseInstAttView NameAttribute = ListAttributesActivated.FirstOrDefault(x => x.Key.ToLower() == "Name".ToLower());
        //            if (NameAttribute != null)
        //            {
        //                BaseInstAttView Swap = ListAttributesActivated[0];
        //                ListAttributesActivated[ListAttributesActivated.IndexOf(NameAttribute)] = Swap;
        //                ListAttributesActivated[0] = NameAttribute;
        //            }
        //        }

        //        List<KeyValuePair<string, List<DropDownListFilters>>> RelatedTables = _unitOfWork.CivilLoadsRepository.GetRelatedTables(SiteCode);
        //        objectInst.RelatedTables = RelatedTables;

        //        objectInst.AttributesActivated = ListAttributesActivated;

        //        objectInst.CivilLoads = _unitOfWork.AttributeActivatedRepository.
        //            GetInstAttributeActivated(TablesNames.TLIcivilLoads.ToString(), null, "allLoadInstId", "Dismantle", "SiteCode", "legId", "Leg2Id",
        //                "sideArmId", "allCivilInstId", "civilSteelSupportCategoryId");

        //        IEnumerable<DynaminAttInstViewModel> DynamicAttributesWithoutValue = _unitOfWork.DynamicAttRepository
        //                .GetDynamicInstAtts(TableNameEntity.Id, null);

        //        foreach (DynaminAttInstViewModel DynamicAttribute in DynamicAttributesWithoutValue)
        //        {
        //            TLIdynamicAtt DynamicAttributeEntity = _unitOfWork.DynamicAttRepository.GetByID(DynamicAttribute.Id);

        //            if (!string.IsNullOrEmpty(DynamicAttributeEntity.DefaultValue))
        //            {
        //                if (DynamicAttribute.DataType.ToLower() == "string".ToLower())
        //                    DynamicAttribute.ValueString = DynamicAttributeEntity.DefaultValue;

        //                else if (DynamicAttribute.DataType.ToLower() == "int".ToLower())
        //                    DynamicAttribute.ValueDouble = int.Parse(DynamicAttributeEntity.DefaultValue);

        //                else if (DynamicAttribute.DataType.ToLower() == "double".ToLower())
        //                    DynamicAttribute.ValueDouble = double.Parse(DynamicAttributeEntity.DefaultValue);

        //                else if (DynamicAttribute.DataType.ToLower() == "boolean".ToLower())
        //                    DynamicAttribute.ValueBoolean = bool.Parse(DynamicAttributeEntity.DefaultValue);

        //                else if (DynamicAttribute.DataType.ToLower() == "datetime".ToLower())
        //                    DynamicAttribute.ValueDateTime = DateTime.Parse(DynamicAttributeEntity.DefaultValue);
        //            }
        //            else
        //            {
        //                DynamicAttribute.ValueString = " ".Split(' ')[0];
        //            }
        //        }

        //        objectInst.DynamicAtts = DynamicAttributesWithoutValue;

        //        return new Response<ObjectInstAtts>(objectInst);
        //    }
        //    catch (Exception err)
        //    {
        //        return new Response<ObjectInstAtts>(true, null, null, err.Message, (int)ApiReturnCode.fail);
        //    }
        //}
        //public string CheckDependencyValidationForMWTypes(object Input, string MWType, string SiteCode)
        //{
        //    if (MWType.ToLower() == TablesNames.TLImwDish.ToString().ToLower())
        //    {
        //        string MainTableName = TablesNames.TLImwDish.ToString();
        //        AddMW_DishViewModel AddInstallationViewModel = _mapper.Map<AddMW_DishViewModel>(Input);

        //        List<DynamicAttViewModel> DynamicAttributes = _mapper.Map<List<DynamicAttViewModel>>(_unitOfWork.DynamicAttRepository
        //            .GetIncludeWhere(x => x.tablesNames.TableName.ToLower() == MainTableName.ToLower() && !x.disable
        //                , x => x.tablesNames).ToList());

        //        foreach (DynamicAttViewModel DynamicAttribute in DynamicAttributes)
        //        {
        //            TLIdependency DynamicAttributeMainDependency = _unitOfWork.DependencieRepository.GetIncludeWhereFirst(x => x.DynamicAttId == DynamicAttribute.Id &&
        //                (x.ValueBoolean != null || x.ValueDateTime != null || x.ValueDouble != null || !string.IsNullOrEmpty(x.ValueString)) &&
        //                    x.OperationId != null, x => x.Operation);

        //            if (DynamicAttributeMainDependency == null)
        //                continue;

        //            List<int> DependencyRows = _unitOfWork.DependencyRowRepository.GetWhere(x => x.DependencyId == DynamicAttributeMainDependency.Id)
        //                .Select(x => x.RowId.Value).Distinct().ToList();

        //            foreach (int RowId in DependencyRows)
        //            {
        //                List<TLIrule> Rules = _unitOfWork.RowRuleRepository.GetIncludeWhere(x => x.RowId == RowId && x.Rule.OperationId != null, x => x.Rule, x => x.Rule.tablesNames,
        //                    x => x.Rule.Operation, x => x.Rule.dynamicAtt, x => x.Rule.attributeActivated).Select(x => x.Rule).ToList();

        //                int CheckIfSuccessAllRules = 0;

        //                foreach (TLIrule Rule in Rules)
        //                {
        //                    string SDTableName = Rule.tablesNames.TableName;

        //                    string DataType = "";

        //                    string Operation = Rule.Operation.Name;
        //                    object OperationValue = new object();

        //                    if (Rule.OperationValueBoolean != null)
        //                    {
        //                        DataType = "Bool";
        //                        OperationValue = Rule.OperationValueBoolean;
        //                    }
        //                    else if (Rule.OperationValueDateTime != null)
        //                    {
        //                        DataType = "DateTime";
        //                        OperationValue = Rule.OperationValueDateTime;
        //                    }
        //                    else if (Rule.OperationValueDouble != null)
        //                    {
        //                        DataType = "Double";
        //                        OperationValue = Rule.OperationValueDouble;
        //                    }
        //                    else if (!string.IsNullOrEmpty(Rule.OperationValueString))
        //                    {
        //                        DataType = "String";
        //                        OperationValue = Rule.OperationValueString;
        //                    }

        //                    if (MainTableName.ToLower() == SDTableName.ToLower())
        //                    {
        //                        object InsertedValue = new object();

        //                        if (Rule.attributeActivatedId != null)
        //                        {
        //                            string AttributeName = Rule.attributeActivated.Key;

        //                            object TestValue = AddInstallationViewModel.GetType().GetProperties()
        //                                .FirstOrDefault(x => x.Name.ToLower() == AttributeName.ToLower()).GetValue(AddInstallationViewModel, null);

        //                            if (TestValue == null)
        //                                break;

        //                            if (Rule.OperationValueBoolean != null)
        //                                InsertedValue = bool.Parse(TestValue.ToString());

        //                            else if (Rule.OperationValueDateTime != null)
        //                                InsertedValue = DateTime.Parse(TestValue.ToString());

        //                            else if (Rule.OperationValueDouble != null)
        //                                InsertedValue = double.Parse(TestValue.ToString());

        //                            else if (!string.IsNullOrEmpty(Rule.OperationValueString))
        //                                InsertedValue = TestValue.ToString();
        //                        }
        //                        else if (Rule.dynamicAttId != null)
        //                        {
        //                            AddDynamicAttInstValueViewModel DynamicObject = AddInstallationViewModel.TLIdynamicAttInstValue
        //                                .FirstOrDefault(x => x.DynamicAttId == Rule.dynamicAttId.Value);

        //                            if (DynamicObject == null)
        //                                break;

        //                            if (DynamicObject.ValueBoolean != null)
        //                                InsertedValue = DynamicObject.ValueBoolean;

        //                            else if (DynamicObject.ValueDateTime != null)
        //                                InsertedValue = DynamicObject.ValueDateTime;

        //                            else if (DynamicObject.ValueDouble != null)
        //                                InsertedValue = DynamicObject.ValueDouble;

        //                            else if (!string.IsNullOrEmpty(DynamicObject.ValueString))
        //                                InsertedValue = DynamicObject.ValueString;
        //                        }

        //                        if (Operation == "==" ? InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower() :
        //                            Operation == "!=" ? InsertedValue.ToString().ToLower() != OperationValue.ToString().ToLower() :
        //                            Operation == ">" ? Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == 1 :
        //                            Operation == ">=" ? (Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == 1 ||
        //                                InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower()) :
        //                            Operation == "<" ? Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == -1 :
        //                            Operation == "<=" ? (Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == -1 ||
        //                                InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower()) : false)
        //                        {
        //                            CheckIfSuccessAllRules++;
        //                        }
        //                    }
        //                    else
        //                    {
        //                        List<object> TableRecords = new List<object>();
        //                        if (Rule.attributeActivatedId != null)
        //                        {
        //                            string AttributeName = Rule.attributeActivated.Key;

        //                            if (OperationValue != null)
        //                                TableRecords = _mapper.Map<List<object>>(db.GetType().GetProperty(SDTableName)
        //                                    .GetValue(db, null)).Where(x => x.GetType().GetProperty(AttributeName).GetValue(x, null) != null ? (Operation == ">" ?
        //                                       (DataType.ToLower() == "DateTime".ToLower() ?
        //                                            Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 :
        //                                        DataType.ToLower() == "Double".ToLower() ?
        //                                            Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 : false) :
        //                                    Operation == ">=" ?
        //                                        (DataType.ToLower() == "DateTime".ToLower() ?
        //                                            (Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 ||
        //                                             x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) :
        //                                        DataType.ToLower() == "Double".ToLower() ?
        //                                            (Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 ||
        //                                             x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) : false) :
        //                                    Operation == "<" ?
        //                                       (DataType.ToLower() == "DateTime".ToLower() ?
        //                                            Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 :
        //                                        DataType.ToLower() == "Double".ToLower() ?
        //                                            Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 : false) :
        //                                    Operation == "<=" ?
        //                                        (DataType.ToLower() == "DateTime".ToLower() ?
        //                                            (Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 ||
        //                                             x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) :
        //                                        DataType.ToLower() == "Double".ToLower() ?
        //                                            (Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 ||
        //                                             x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) : false) :
        //                                    Operation == "==" ?
        //                                        x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower() :
        //                                    Operation == "!=" ?
        //                                        x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() != OperationValue.ToString().ToLower() : false) : false).ToList();
        //                        }
        //                        else if (Rule.dynamicAttId != null)
        //                        {
        //                            List<int> DynamicAttValuesInventoryIds = new List<int>();

        //                            if (!DynamicAttribute.LibraryAtt)
        //                            {
        //                                DynamicAttValuesInventoryIds = _unitOfWork.DynamicAttInstValueRepository
        //                                    .GetWhere(x => (x.DynamicAttId == Rule.dynamicAttId.Value && !x.disable) &&
        //                                        (Operation == "==" ?
        //                                            ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() == Rule.OperationValueBoolean.ToString().ToLower() : false) ||
        //                                            (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() == Rule.OperationValueDateTime.ToString().ToLower() : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble == Rule.OperationValueDouble : false) ||
        //                                            (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() == Rule.OperationValueString.ToLower() : false)) : false) ||

        //                                        (Operation == "!=" ?
        //                                            ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() != Rule.OperationValueBoolean.ToString().ToLower() : false) ||
        //                                            (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() != Rule.OperationValueDateTime.ToString().ToLower() : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble != Rule.OperationValueDouble : false) ||
        //                                            (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() != Rule.OperationValueString.ToLower() : false)) : false) ||

        //                                        (Operation == ">" ?
        //                                            ((Rule.OperationValueDateTime != null ? x.ValueDateTime > Rule.OperationValueDateTime : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble > Rule.OperationValueDouble : false)) : false) ||

        //                                        (Operation == ">=" ?
        //                                            ((Rule.OperationValueDateTime != null ? x.ValueDateTime >= Rule.OperationValueDateTime : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble >= Rule.OperationValueDouble : false)) : false) ||

        //                                        (Operation == "<" ?
        //                                            ((Rule.OperationValueDateTime != null ? x.ValueDateTime < Rule.OperationValueDateTime : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble < Rule.OperationValueDouble : false)) : false) ||

        //                                        (Operation == "<=" ?
        //                                            ((Rule.OperationValueDateTime != null ? x.ValueDateTime <= Rule.OperationValueDateTime : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble <= Rule.OperationValueDouble : false)) : false)

        //                                        ).Select(x => x.InventoryId).ToList();
        //                            }
        //                            else
        //                            {
        //                                DynamicAttValuesInventoryIds = _unitOfWork.DynamicAttLibRepository
        //                                    .GetWhere(x => (x.DynamicAttId == Rule.dynamicAttId && !x.disable) &&
        //                                        (Operation == "==" ?
        //                                            ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() == Rule.OperationValueBoolean.ToString().ToLower() : false) ||
        //                                            (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() == Rule.OperationValueDateTime.ToString().ToLower() : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble == Rule.OperationValueDouble : false) ||
        //                                            (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() == Rule.OperationValueString.ToLower() : false)) : false) ||

        //                                        (Operation == "!=" ?
        //                                            ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() != Rule.OperationValueBoolean.ToString().ToLower() : false) ||
        //                                            (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() != Rule.OperationValueDateTime.ToString().ToLower() : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble != Rule.OperationValueDouble : false) ||
        //                                            (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() != Rule.OperationValueString.ToLower() : false)) : false) ||

        //                                        (Operation == ">" ?
        //                                            ((Rule.OperationValueDateTime != null ? x.ValueDateTime > Rule.OperationValueDateTime : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble > Rule.OperationValueDouble : false)) : false) ||

        //                                        (Operation == ">=" ?
        //                                            ((Rule.OperationValueDateTime != null ? x.ValueDateTime >= Rule.OperationValueDateTime : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble >= Rule.OperationValueDouble : false)) : false) ||

        //                                        (Operation == "<" ?
        //                                            ((Rule.OperationValueDateTime != null ? x.ValueDateTime < Rule.OperationValueDateTime : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble < Rule.OperationValueDouble : false)) : false) ||

        //                                        (Operation == "<=" ?
        //                                            ((Rule.OperationValueDateTime != null ? x.ValueDateTime <= Rule.OperationValueDateTime : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble <= Rule.OperationValueDouble : false)) : false)

        //                                        ).Select(x => x.InventoryId).ToList();
        //                            }
        //                            if (DynamicAttValuesInventoryIds != null ? DynamicAttValuesInventoryIds.Count() != 0 : false)
        //                            {
        //                                TableRecords = _mapper.Map<List<object>>(db.GetType()
        //                                    .GetProperty(SDTableName).GetValue(db, null))
        //                                        .Where(x => DynamicAttValuesInventoryIds.Contains(Convert.ToInt32(x.GetType().GetProperty("Id").GetValue(x, null)))).ToList();
        //                            }
        //                        }

        //                        AddInstRuleViewModel AddInstRuleViewModel = new AddInstRuleViewModel();
        //                        if (Rule.dynamicAttId != null)
        //                        {
        //                            AddInstRuleViewModel = new AddInstRuleViewModel
        //                            {
        //                                dynamicAttId = Rule.dynamicAttId,
        //                                IsDynamic = true,
        //                                OperationId = Rule.OperationId,
        //                                OperationValueBoolean = Rule.OperationValueBoolean,
        //                                OperationValueDateTime = Rule.OperationValueDateTime,
        //                                OperationValueDouble = Rule.OperationValueDouble,
        //                                OperationValueString = Rule.OperationValueString,
        //                                TableName = Rule.tablesNames.TableName
        //                            };
        //                        }
        //                        else if (Rule.attributeActivatedId != null)
        //                        {
        //                            AddInstRuleViewModel = new AddInstRuleViewModel
        //                            {
        //                                attributeActivatedId = Rule.attributeActivatedId,
        //                                IsDynamic = false,
        //                                OperationId = Rule.OperationId,
        //                                OperationValueBoolean = Rule.OperationValueBoolean,
        //                                OperationValueDateTime = Rule.OperationValueDateTime,
        //                                OperationValueDouble = Rule.OperationValueDouble,
        //                                OperationValueString = Rule.OperationValueString,
        //                                TableName = Rule.tablesNames.TableName
        //                            };
        //                        }
        //                        List<object> RecordsIds = _mapper.Map<List<object>>(GetRecordsIds(MainTableName, AddInstRuleViewModel));

        //                        PathToCheckDependencyValidation Item = (PathToCheckDependencyValidation)Enum.Parse(typeof(PathToCheckDependencyValidation),
        //                            MainTableName + SDTableName + "Goal");

        //                        List<string> Path = GetEnumDescription(Item).Split(" ").ToList();

        //                        object CheckId = new object();

        //                        if (Path.Count() > 1)
        //                        {
        //                            object CivilLoads = AddInstallationViewModel.GetType().GetProperty(Path[0])
        //                                .GetValue(AddInstallationViewModel, null);

        //                            CheckId = CivilLoads.GetType().GetProperty(Path[1]).GetValue(CivilLoads, null) != null ?
        //                                (int)CivilLoads.GetType().GetProperty(Path[1]).GetValue(CivilLoads, null) : new object();
        //                        }
        //                        else if (Path.Count() == 1 && Path[0].ToLower() == "sitecode")
        //                        {
        //                            CheckId = SiteCode;
        //                        }
        //                        else if (Path.Count() == 1)
        //                        {
        //                            if (AddInstallationViewModel.GetType().GetProperty(Path[0]).GetValue(AddInstallationViewModel, null) != null)
        //                                CheckId = (int)AddInstallationViewModel.GetType().GetProperty(Path[0])
        //                                    .GetValue(AddInstallationViewModel, null);
        //                        }

        //                        if (RecordsIds.Exists(x => x.ToString().ToLower() == CheckId.ToString().ToLower()))
        //                        {
        //                            CheckIfSuccessAllRules++;
        //                        }
        //                    }
        //                }

        //                if (Rules.Count() == CheckIfSuccessAllRules)
        //                {
        //                    string DynamicAttributeName = "";
        //                    int DynamicAttributeId = _unitOfWork.DependencyRowRepository
        //                        .GetIncludeWhereFirst(x => x.RowId == RowId, x => x.Dependency).Dependency.DynamicAttId.Value;

        //                    AddDynamicAttInstValueViewModel InputDynamicAttribute = AddInstallationViewModel.TLIdynamicAttInstValue
        //                        .FirstOrDefault(x => x.DynamicAttId == DynamicAttributeId);

        //                    if (InputDynamicAttribute == null)
        //                    {
        //                        DynamicAttributeName = _unitOfWork.DynamicAttRepository
        //                            .GetWhereFirst(x => x.Id == DynamicAttributeId).Key;

        //                        return $"({DynamicAttributeName}) value can't be null";
        //                    }
        //                    else
        //                    {
        //                        string DependencyValidationOperation = DynamicAttributeMainDependency.Operation.Name;

        //                        object DependencyValidationValue = new object();

        //                        if (DynamicAttributeMainDependency.ValueBoolean != null)
        //                            DependencyValidationValue = DynamicAttributeMainDependency.ValueBoolean;

        //                        else if (DynamicAttributeMainDependency.ValueDateTime != null)
        //                            DependencyValidationValue = DynamicAttributeMainDependency.ValueDateTime;

        //                        else if (DynamicAttributeMainDependency.ValueDouble != null)
        //                            DependencyValidationValue = DynamicAttributeMainDependency.ValueDouble;

        //                        else if (!string.IsNullOrEmpty(DynamicAttributeMainDependency.ValueString))
        //                            DependencyValidationValue = DynamicAttributeMainDependency.ValueString;

        //                        object InputDynamicValue = new object();

        //                        if (InputDynamicAttribute.ValueBoolean != null)
        //                            InputDynamicValue = InputDynamicAttribute.ValueBoolean;

        //                        else if (InputDynamicAttribute.ValueDateTime != null)
        //                            InputDynamicValue = InputDynamicAttribute.ValueDateTime;

        //                        else if (InputDynamicAttribute.ValueDouble != null)
        //                            InputDynamicValue = InputDynamicAttribute.ValueDouble;

        //                        else if (!string.IsNullOrEmpty(InputDynamicAttribute.ValueString))
        //                            InputDynamicValue = InputDynamicAttribute.ValueString;

        //                        if (!(DependencyValidationOperation == "==" ? InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower() :
        //                            DependencyValidationOperation == "!=" ? InputDynamicValue.ToString().ToLower() != DependencyValidationValue.ToString().ToLower() :
        //                            DependencyValidationOperation == ">" ? Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == 1 :
        //                            DependencyValidationOperation == ">=" ? (Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == 1 ||
        //                                InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower()) :
        //                            DependencyValidationOperation == "<" ? Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == -1 :
        //                            DependencyValidationOperation == "<=" ? (Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == -1 ||
        //                                InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower()) : false))
        //                        {
        //                            DynamicAttributeName = _unitOfWork.DynamicAttRepository
        //                                .GetWhereFirst(x => x.Id == DynamicAttributeId).Key;

        //                            string ReturnOperation = (DependencyValidationOperation == "==" ? "equal to" :
        //                                (DependencyValidationOperation == "!=" ? "not equal to" :
        //                                (DependencyValidationOperation == ">" ? "bigger than" :
        //                                (DependencyValidationOperation == ">=" ? "bigger than or equal to" :
        //                                (DependencyValidationOperation == "<" ? "smaller than" :
        //                                (DependencyValidationOperation == "<=" ? "smaller than or equal to" : ""))))));

        //                            return $"({DynamicAttributeName}) value must be {ReturnOperation} {DependencyValidationValue}";
        //                        }
        //                    }
        //                }
        //            }
        //        }
        //    }
        //    else if (MWType.ToLower() == TablesNames.TLImwBU.ToString().ToLower())
        //    {
        //        string MainTableName = TablesNames.TLImwBU.ToString();
        //        AddMW_BUViewModel AddInstallationViewModel = _mapper.Map<AddMW_BUViewModel>(Input);

        //        List<DynamicAttViewModel> DynamicAttributes = _mapper.Map<List<DynamicAttViewModel>>(_unitOfWork.DynamicAttRepository
        //            .GetIncludeWhere(x => x.tablesNames.TableName.ToLower() == MainTableName.ToLower() && !x.disable
        //                , x => x.tablesNames).ToList());

        //        foreach (DynamicAttViewModel DynamicAttribute in DynamicAttributes)
        //        {
        //            TLIdependency DynamicAttributeMainDependency = _unitOfWork.DependencieRepository.GetIncludeWhereFirst(x => x.DynamicAttId == DynamicAttribute.Id &&
        //                (x.ValueBoolean != null || x.ValueDateTime != null || x.ValueDouble != null || !string.IsNullOrEmpty(x.ValueString)) &&
        //                    x.OperationId != null, x => x.Operation);

        //            if (DynamicAttributeMainDependency == null)
        //                continue;

        //            List<int> DependencyRows = _unitOfWork.DependencyRowRepository.GetWhere(x => x.DependencyId == DynamicAttributeMainDependency.Id)
        //                .Select(x => x.RowId.Value).Distinct().ToList();

        //            foreach (int RowId in DependencyRows)
        //            {
        //                List<TLIrule> Rules = _unitOfWork.RowRuleRepository.GetIncludeWhere(x => x.RowId == RowId && x.Rule.OperationId != null, x => x.Rule, x => x.Rule.tablesNames,
        //                    x => x.Rule.Operation, x => x.Rule.dynamicAtt, x => x.Rule.attributeActivated).Select(x => x.Rule).ToList();

        //                int CheckIfSuccessAllRules = 0;

        //                foreach (TLIrule Rule in Rules)
        //                {
        //                    string SDTableName = Rule.tablesNames.TableName;

        //                    string DataType = "";

        //                    string Operation = Rule.Operation.Name;
        //                    object OperationValue = new object();

        //                    if (Rule.OperationValueBoolean != null)
        //                    {
        //                        DataType = "Bool";
        //                        OperationValue = Rule.OperationValueBoolean;
        //                    }
        //                    else if (Rule.OperationValueDateTime != null)
        //                    {
        //                        DataType = "DateTime";
        //                        OperationValue = Rule.OperationValueDateTime;
        //                    }
        //                    else if (Rule.OperationValueDouble != null)
        //                    {
        //                        DataType = "Double";
        //                        OperationValue = Rule.OperationValueDouble;
        //                    }
        //                    else if (!string.IsNullOrEmpty(Rule.OperationValueString))
        //                    {
        //                        DataType = "String";
        //                        OperationValue = Rule.OperationValueString;
        //                    }

        //                    if (MainTableName.ToLower() == SDTableName.ToLower())
        //                    {
        //                        object InsertedValue = new object();

        //                        if (Rule.attributeActivatedId != null)
        //                        {
        //                            string AttributeName = Rule.attributeActivated.Key;

        //                            object TestValue = AddInstallationViewModel.GetType().GetProperties()
        //                                .FirstOrDefault(x => x.Name.ToLower() == AttributeName.ToLower()).GetValue(AddInstallationViewModel, null);

        //                            if (TestValue == null)
        //                                break;

        //                            if (Rule.OperationValueBoolean != null)
        //                                InsertedValue = bool.Parse(TestValue.ToString());

        //                            else if (Rule.OperationValueDateTime != null)
        //                                InsertedValue = DateTime.Parse(TestValue.ToString());

        //                            else if (Rule.OperationValueDouble != null)
        //                                InsertedValue = double.Parse(TestValue.ToString());

        //                            else if (!string.IsNullOrEmpty(Rule.OperationValueString))
        //                                InsertedValue = TestValue.ToString();
        //                        }
        //                        else if (Rule.dynamicAttId != null)
        //                        {
        //                            AddDynamicAttInstValueViewModel DynamicObject = AddInstallationViewModel.TLIdynamicAttInstValue
        //                                .FirstOrDefault(x => x.DynamicAttId == Rule.dynamicAttId.Value);

        //                            if (DynamicObject == null)
        //                                break;

        //                            if (DynamicObject.ValueBoolean != null)
        //                                InsertedValue = DynamicObject.ValueBoolean;

        //                            else if (DynamicObject.ValueDateTime != null)
        //                                InsertedValue = DynamicObject.ValueDateTime;

        //                            else if (DynamicObject.ValueDouble != null)
        //                                InsertedValue = DynamicObject.ValueDouble;

        //                            else if (!string.IsNullOrEmpty(DynamicObject.ValueString))
        //                                InsertedValue = DynamicObject.ValueString;
        //                        }

        //                        if (Operation == "==" ? InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower() :
        //                            Operation == "!=" ? InsertedValue.ToString().ToLower() != OperationValue.ToString().ToLower() :
        //                            Operation == ">" ? Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == 1 :
        //                            Operation == ">=" ? (Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == 1 ||
        //                                InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower()) :
        //                            Operation == "<" ? Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == -1 :
        //                            Operation == "<=" ? (Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == -1 ||
        //                                InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower()) : false)
        //                        {
        //                            CheckIfSuccessAllRules++;
        //                        }
        //                    }
        //                    else
        //                    {
        //                        List<object> TableRecords = new List<object>();
        //                        if (Rule.attributeActivatedId != null)
        //                        {
        //                            string AttributeName = Rule.attributeActivated.Key;

        //                            if (OperationValue != null)
        //                                TableRecords = _mapper.Map<List<object>>(db.GetType().GetProperty(SDTableName)
        //                                    .GetValue(db, null)).Where(x => x.GetType().GetProperty(AttributeName).GetValue(x, null) != null ? (Operation == ">" ?
        //                                       (DataType.ToLower() == "DateTime".ToLower() ?
        //                                            Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 :
        //                                        DataType.ToLower() == "Double".ToLower() ?
        //                                            Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 : false) :
        //                                    Operation == ">=" ?
        //                                        (DataType.ToLower() == "DateTime".ToLower() ?
        //                                            (Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 ||
        //                                             x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) :
        //                                        DataType.ToLower() == "Double".ToLower() ?
        //                                            (Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 ||
        //                                             x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) : false) :
        //                                    Operation == "<" ?
        //                                       (DataType.ToLower() == "DateTime".ToLower() ?
        //                                            Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 :
        //                                        DataType.ToLower() == "Double".ToLower() ?
        //                                            Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 : false) :
        //                                    Operation == "<=" ?
        //                                        (DataType.ToLower() == "DateTime".ToLower() ?
        //                                            (Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 ||
        //                                             x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) :
        //                                        DataType.ToLower() == "Double".ToLower() ?
        //                                            (Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 ||
        //                                             x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) : false) :
        //                                    Operation == "==" ?
        //                                        x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower() :
        //                                    Operation == "!=" ?
        //                                        x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() != OperationValue.ToString().ToLower() : false) : false).ToList();
        //                        }
        //                        else if (Rule.dynamicAttId != null)
        //                        {
        //                            List<int> DynamicAttValuesInventoryIds = new List<int>();

        //                            if (!DynamicAttribute.LibraryAtt)
        //                            {
        //                                DynamicAttValuesInventoryIds = _unitOfWork.DynamicAttInstValueRepository
        //                                    .GetWhere(x => (x.DynamicAttId == Rule.dynamicAttId.Value && !x.disable) &&
        //                                        (Operation == "==" ?
        //                                            ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() == Rule.OperationValueBoolean.ToString().ToLower() : false) ||
        //                                            (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() == Rule.OperationValueDateTime.ToString().ToLower() : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble == Rule.OperationValueDouble : false) ||
        //                                            (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() == Rule.OperationValueString.ToLower() : false)) : false) ||

        //                                        (Operation == "!=" ?
        //                                            ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() != Rule.OperationValueBoolean.ToString().ToLower() : false) ||
        //                                            (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() != Rule.OperationValueDateTime.ToString().ToLower() : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble != Rule.OperationValueDouble : false) ||
        //                                            (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() != Rule.OperationValueString.ToLower() : false)) : false) ||

        //                                        (Operation == ">" ?
        //                                            ((Rule.OperationValueDateTime != null ? x.ValueDateTime > Rule.OperationValueDateTime : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble > Rule.OperationValueDouble : false)) : false) ||

        //                                        (Operation == ">=" ?
        //                                            ((Rule.OperationValueDateTime != null ? x.ValueDateTime >= Rule.OperationValueDateTime : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble >= Rule.OperationValueDouble : false)) : false) ||

        //                                        (Operation == "<" ?
        //                                            ((Rule.OperationValueDateTime != null ? x.ValueDateTime < Rule.OperationValueDateTime : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble < Rule.OperationValueDouble : false)) : false) ||

        //                                        (Operation == "<=" ?
        //                                            ((Rule.OperationValueDateTime != null ? x.ValueDateTime <= Rule.OperationValueDateTime : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble <= Rule.OperationValueDouble : false)) : false)

        //                                        ).Select(x => x.InventoryId).ToList();
        //                            }
        //                            else
        //                            {
        //                                DynamicAttValuesInventoryIds = _unitOfWork.DynamicAttLibRepository
        //                                    .GetWhere(x => (x.DynamicAttId == Rule.dynamicAttId && !x.disable) &&
        //                                        (Operation == "==" ?
        //                                            ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() == Rule.OperationValueBoolean.ToString().ToLower() : false) ||
        //                                            (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() == Rule.OperationValueDateTime.ToString().ToLower() : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble == Rule.OperationValueDouble : false) ||
        //                                            (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() == Rule.OperationValueString.ToLower() : false)) : false) ||

        //                                        (Operation == "!=" ?
        //                                            ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() != Rule.OperationValueBoolean.ToString().ToLower() : false) ||
        //                                            (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() != Rule.OperationValueDateTime.ToString().ToLower() : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble != Rule.OperationValueDouble : false) ||
        //                                            (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() != Rule.OperationValueString.ToLower() : false)) : false) ||

        //                                        (Operation == ">" ?
        //                                            ((Rule.OperationValueDateTime != null ? x.ValueDateTime > Rule.OperationValueDateTime : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble > Rule.OperationValueDouble : false)) : false) ||

        //                                        (Operation == ">=" ?
        //                                            ((Rule.OperationValueDateTime != null ? x.ValueDateTime >= Rule.OperationValueDateTime : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble >= Rule.OperationValueDouble : false)) : false) ||

        //                                        (Operation == "<" ?
        //                                            ((Rule.OperationValueDateTime != null ? x.ValueDateTime < Rule.OperationValueDateTime : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble < Rule.OperationValueDouble : false)) : false) ||

        //                                        (Operation == "<=" ?
        //                                            ((Rule.OperationValueDateTime != null ? x.ValueDateTime <= Rule.OperationValueDateTime : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble <= Rule.OperationValueDouble : false)) : false)

        //                                        ).Select(x => x.InventoryId).ToList();
        //                            }
        //                            if (DynamicAttValuesInventoryIds != null ? DynamicAttValuesInventoryIds.Count() != 0 : false)
        //                            {
        //                                TableRecords = _mapper.Map<List<object>>(db.GetType()
        //                                    .GetProperty(SDTableName).GetValue(db, null))
        //                                        .Where(x => DynamicAttValuesInventoryIds.Contains(Convert.ToInt32(x.GetType().GetProperty("Id").GetValue(x, null)))).ToList();
        //                            }
        //                        }

        //                        AddInstRuleViewModel AddInstRuleViewModel = new AddInstRuleViewModel();
        //                        if (Rule.dynamicAttId != null)
        //                        {
        //                            AddInstRuleViewModel = new AddInstRuleViewModel
        //                            {
        //                                dynamicAttId = Rule.dynamicAttId,
        //                                IsDynamic = true,
        //                                OperationId = Rule.OperationId,
        //                                OperationValueBoolean = Rule.OperationValueBoolean,
        //                                OperationValueDateTime = Rule.OperationValueDateTime,
        //                                OperationValueDouble = Rule.OperationValueDouble,
        //                                OperationValueString = Rule.OperationValueString,
        //                                TableName = Rule.tablesNames.TableName
        //                            };
        //                        }
        //                        else if (Rule.attributeActivatedId != null)
        //                        {
        //                            AddInstRuleViewModel = new AddInstRuleViewModel
        //                            {
        //                                attributeActivatedId = Rule.attributeActivatedId,
        //                                IsDynamic = false,
        //                                OperationId = Rule.OperationId,
        //                                OperationValueBoolean = Rule.OperationValueBoolean,
        //                                OperationValueDateTime = Rule.OperationValueDateTime,
        //                                OperationValueDouble = Rule.OperationValueDouble,
        //                                OperationValueString = Rule.OperationValueString,
        //                                TableName = Rule.tablesNames.TableName
        //                            };
        //                        }
        //                        List<object> RecordsIds = _mapper.Map<List<object>>(GetRecordsIds(MainTableName, AddInstRuleViewModel));

        //                        PathToCheckDependencyValidation Item = (PathToCheckDependencyValidation)Enum.Parse(typeof(PathToCheckDependencyValidation),
        //                            MainTableName + SDTableName + "Goal");

        //                        List<string> Path = GetEnumDescription(Item).Split(" ").ToList();

        //                        object CheckId = new object();

        //                        if (Path.Count() > 1)
        //                        {
        //                            object CivilLoads = AddInstallationViewModel.GetType().GetProperty(Path[0])
        //                                .GetValue(AddInstallationViewModel, null);
        //                            if (CivilLoads.GetType().GetProperty(Path[1]).GetValue(CivilLoads, null) != null)
        //                            {
        //                                CheckId = CivilLoads.GetType().GetProperty(Path[1]).GetValue(CivilLoads, null) != null ?
        //                                    (int)CivilLoads.GetType().GetProperty(Path[1]).GetValue(CivilLoads, null) : new object();
        //                            }

        //                        }
        //                        else if (Path.Count() == 1 && Path[0].ToLower() == "sitecode")
        //                        {
        //                            CheckId = SiteCode;
        //                        }
        //                        else if (Path.Count() == 1)
        //                        {
        //                            if (AddInstallationViewModel.GetType().GetProperty(Path[0]).GetValue(AddInstallationViewModel, null) != null)
        //                                CheckId = (int)AddInstallationViewModel.GetType().GetProperty(Path[0])
        //                                    .GetValue(AddInstallationViewModel, null);
        //                        }

        //                        if (RecordsIds.Exists(x => x.ToString().ToLower() == CheckId.ToString().ToLower()))
        //                        {
        //                            CheckIfSuccessAllRules++;
        //                        }
        //                    }
        //                }

        //                if (Rules.Count() == CheckIfSuccessAllRules)
        //                {
        //                    string DynamicAttributeName = "";
        //                    int DynamicAttributeId = _unitOfWork.DependencyRowRepository
        //                        .GetIncludeWhereFirst(x => x.RowId == RowId, x => x.Dependency).Dependency.DynamicAttId.Value;

        //                    AddDynamicAttInstValueViewModel InputDynamicAttribute = AddInstallationViewModel.TLIdynamicAttInstValue
        //                        .FirstOrDefault(x => x.DynamicAttId == DynamicAttributeId);

        //                    if (InputDynamicAttribute == null)
        //                    {
        //                        DynamicAttributeName = _unitOfWork.DynamicAttRepository
        //                            .GetWhereFirst(x => x.Id == DynamicAttributeId).Key;

        //                        return $"({DynamicAttributeName}) value can't be null";
        //                    }
        //                    else
        //                    {
        //                        string DependencyValidationOperation = DynamicAttributeMainDependency.Operation.Name;

        //                        object DependencyValidationValue = new object();

        //                        if (DynamicAttributeMainDependency.ValueBoolean != null)
        //                            DependencyValidationValue = DynamicAttributeMainDependency.ValueBoolean;

        //                        else if (DynamicAttributeMainDependency.ValueDateTime != null)
        //                            DependencyValidationValue = DynamicAttributeMainDependency.ValueDateTime;

        //                        else if (DynamicAttributeMainDependency.ValueDouble != null)
        //                            DependencyValidationValue = DynamicAttributeMainDependency.ValueDouble;

        //                        else if (!string.IsNullOrEmpty(DynamicAttributeMainDependency.ValueString))
        //                            DependencyValidationValue = DynamicAttributeMainDependency.ValueString;

        //                        object InputDynamicValue = new object();

        //                        if (InputDynamicAttribute.ValueBoolean != null)
        //                            InputDynamicValue = InputDynamicAttribute.ValueBoolean;

        //                        else if (InputDynamicAttribute.ValueDateTime != null)
        //                            InputDynamicValue = InputDynamicAttribute.ValueDateTime;

        //                        else if (InputDynamicAttribute.ValueDouble != null)
        //                            InputDynamicValue = InputDynamicAttribute.ValueDouble;

        //                        else if (!string.IsNullOrEmpty(InputDynamicAttribute.ValueString))
        //                            InputDynamicValue = InputDynamicAttribute.ValueString;

        //                        if (!(DependencyValidationOperation == "==" ? InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower() :
        //                            DependencyValidationOperation == "!=" ? InputDynamicValue.ToString().ToLower() != DependencyValidationValue.ToString().ToLower() :
        //                            DependencyValidationOperation == ">" ? Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == 1 :
        //                            DependencyValidationOperation == ">=" ? (Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == 1 ||
        //                                InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower()) :
        //                            DependencyValidationOperation == "<" ? Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == -1 :
        //                            DependencyValidationOperation == "<=" ? (Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == -1 ||
        //                                InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower()) : false))
        //                        {
        //                            DynamicAttributeName = _unitOfWork.DynamicAttRepository
        //                                .GetWhereFirst(x => x.Id == DynamicAttributeId).Key;

        //                            string ReturnOperation = (DependencyValidationOperation == "==" ? "equal to" :
        //                                (DependencyValidationOperation == "!=" ? "not equal to" :
        //                                (DependencyValidationOperation == ">" ? "bigger than" :
        //                                (DependencyValidationOperation == ">=" ? "bigger than or equal to" :
        //                                (DependencyValidationOperation == "<" ? "smaller than" :
        //                                (DependencyValidationOperation == "<=" ? "smaller than or equal to" : ""))))));

        //                            return $"({DynamicAttributeName}) value must be {ReturnOperation} {DependencyValidationValue}";
        //                        }
        //                    }
        //                }
        //            }
        //        }
        //    }
        //    else if (MWType.ToLower() == TablesNames.TLImwRFU.ToString().ToLower())
        //    {
        //        string MainTableName = TablesNames.TLImwRFU.ToString();
        //        AddMW_RFUViewModel AddInstallationViewModel = _mapper.Map<AddMW_RFUViewModel>(Input);

        //        List<DynamicAttViewModel> DynamicAttributes = _mapper.Map<List<DynamicAttViewModel>>(_unitOfWork.DynamicAttRepository
        //            .GetIncludeWhere(x => x.tablesNames.TableName.ToLower() == MainTableName.ToLower() && !x.disable
        //                , x => x.tablesNames).ToList());

        //        foreach (DynamicAttViewModel DynamicAttribute in DynamicAttributes)
        //        {
        //            TLIdependency DynamicAttributeMainDependency = _unitOfWork.DependencieRepository.GetIncludeWhereFirst(x => x.DynamicAttId == DynamicAttribute.Id &&
        //                (x.ValueBoolean != null || x.ValueDateTime != null || x.ValueDouble != null || !string.IsNullOrEmpty(x.ValueString)) &&
        //                    x.OperationId != null, x => x.Operation);

        //            if (DynamicAttributeMainDependency == null)
        //                continue;

        //            List<int> DependencyRows = _unitOfWork.DependencyRowRepository.GetWhere(x => x.DependencyId == DynamicAttributeMainDependency.Id)
        //                .Select(x => x.RowId.Value).Distinct().ToList();

        //            foreach (int RowId in DependencyRows)
        //            {
        //                List<TLIrule> Rules = _unitOfWork.RowRuleRepository.GetIncludeWhere(x => x.RowId == RowId && x.Rule.OperationId != null, x => x.Rule, x => x.Rule.tablesNames,
        //                    x => x.Rule.Operation, x => x.Rule.dynamicAtt, x => x.Rule.attributeActivated).Select(x => x.Rule).ToList();

        //                int CheckIfSuccessAllRules = 0;

        //                foreach (TLIrule Rule in Rules)
        //                {
        //                    string SDTableName = Rule.tablesNames.TableName;

        //                    string DataType = "";

        //                    string Operation = Rule.Operation.Name;
        //                    object OperationValue = new object();

        //                    if (Rule.OperationValueBoolean != null)
        //                    {
        //                        DataType = "Bool";
        //                        OperationValue = Rule.OperationValueBoolean;
        //                    }
        //                    else if (Rule.OperationValueDateTime != null)
        //                    {
        //                        DataType = "DateTime";
        //                        OperationValue = Rule.OperationValueDateTime;
        //                    }
        //                    else if (Rule.OperationValueDouble != null)
        //                    {
        //                        DataType = "Double";
        //                        OperationValue = Rule.OperationValueDouble;
        //                    }
        //                    else if (!string.IsNullOrEmpty(Rule.OperationValueString))
        //                    {
        //                        DataType = "String";
        //                        OperationValue = Rule.OperationValueString;
        //                    }

        //                    if (MainTableName.ToLower() == SDTableName.ToLower())
        //                    {
        //                        object InsertedValue = new object();

        //                        if (Rule.attributeActivatedId != null)
        //                        {
        //                            string AttributeName = Rule.attributeActivated.Key;

        //                            object TestValue = AddInstallationViewModel.GetType().GetProperties()
        //                                .FirstOrDefault(x => x.Name.ToLower() == AttributeName.ToLower()).GetValue(AddInstallationViewModel, null);

        //                            if (TestValue == null)
        //                                break;

        //                            if (Rule.OperationValueBoolean != null)
        //                                InsertedValue = bool.Parse(TestValue.ToString());

        //                            else if (Rule.OperationValueDateTime != null)
        //                                InsertedValue = DateTime.Parse(TestValue.ToString());

        //                            else if (Rule.OperationValueDouble != null)
        //                                InsertedValue = double.Parse(TestValue.ToString());

        //                            else if (!string.IsNullOrEmpty(Rule.OperationValueString))
        //                                InsertedValue = TestValue.ToString();
        //                        }
        //                        else if (Rule.dynamicAttId != null)
        //                        {
        //                            AddDynamicAttInstValueViewModel DynamicObject = AddInstallationViewModel.TLIdynamicAttInstValue
        //                                .FirstOrDefault(x => x.DynamicAttId == Rule.dynamicAttId.Value);

        //                            if (DynamicObject == null)
        //                                break;

        //                            if (DynamicObject.ValueBoolean != null)
        //                                InsertedValue = DynamicObject.ValueBoolean;

        //                            else if (DynamicObject.ValueDateTime != null)
        //                                InsertedValue = DynamicObject.ValueDateTime;

        //                            else if (DynamicObject.ValueDouble != null)
        //                                InsertedValue = DynamicObject.ValueDouble;

        //                            else if (!string.IsNullOrEmpty(DynamicObject.ValueString))
        //                                InsertedValue = DynamicObject.ValueString;
        //                        }

        //                        if (Operation == "==" ? InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower() :
        //                            Operation == "!=" ? InsertedValue.ToString().ToLower() != OperationValue.ToString().ToLower() :
        //                            Operation == ">" ? Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == 1 :
        //                            Operation == ">=" ? (Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == 1 ||
        //                                InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower()) :
        //                            Operation == "<" ? Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == -1 :
        //                            Operation == "<=" ? (Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == -1 ||
        //                                InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower()) : false)
        //                        {
        //                            CheckIfSuccessAllRules++;
        //                        }
        //                    }
        //                    else
        //                    {
        //                        List<object> TableRecords = new List<object>();
        //                        if (Rule.attributeActivatedId != null)
        //                        {
        //                            string AttributeName = Rule.attributeActivated.Key;

        //                            if (OperationValue != null)
        //                                TableRecords = _mapper.Map<List<object>>(db.GetType().GetProperty(SDTableName)
        //                                    .GetValue(db, null)).Where(x => x.GetType().GetProperty(AttributeName).GetValue(x, null) != null ? (Operation == ">" ?
        //                                       (DataType.ToLower() == "DateTime".ToLower() ?
        //                                            Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 :
        //                                        DataType.ToLower() == "Double".ToLower() ?
        //                                            Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 : false) :
        //                                    Operation == ">=" ?
        //                                        (DataType.ToLower() == "DateTime".ToLower() ?
        //                                            (Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 ||
        //                                             x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) :
        //                                        DataType.ToLower() == "Double".ToLower() ?
        //                                            (Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 ||
        //                                             x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) : false) :
        //                                    Operation == "<" ?
        //                                       (DataType.ToLower() == "DateTime".ToLower() ?
        //                                            Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 :
        //                                        DataType.ToLower() == "Double".ToLower() ?
        //                                            Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 : false) :
        //                                    Operation == "<=" ?
        //                                        (DataType.ToLower() == "DateTime".ToLower() ?
        //                                            (Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 ||
        //                                             x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) :
        //                                        DataType.ToLower() == "Double".ToLower() ?
        //                                            (Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 ||
        //                                             x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) : false) :
        //                                    Operation == "==" ?
        //                                        x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower() :
        //                                    Operation == "!=" ?
        //                                        x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() != OperationValue.ToString().ToLower() : false) : false).ToList();
        //                        }
        //                        else if (Rule.dynamicAttId != null)
        //                        {
        //                            List<int> DynamicAttValuesInventoryIds = new List<int>();

        //                            if (!DynamicAttribute.LibraryAtt)
        //                            {
        //                                DynamicAttValuesInventoryIds = _unitOfWork.DynamicAttInstValueRepository
        //                                    .GetWhere(x => (x.DynamicAttId == Rule.dynamicAttId.Value && !x.disable) &&
        //                                        (Operation == "==" ?
        //                                            ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() == Rule.OperationValueBoolean.ToString().ToLower() : false) ||
        //                                            (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() == Rule.OperationValueDateTime.ToString().ToLower() : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble == Rule.OperationValueDouble : false) ||
        //                                            (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() == Rule.OperationValueString.ToLower() : false)) : false) ||

        //                                        (Operation == "!=" ?
        //                                            ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() != Rule.OperationValueBoolean.ToString().ToLower() : false) ||
        //                                            (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() != Rule.OperationValueDateTime.ToString().ToLower() : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble != Rule.OperationValueDouble : false) ||
        //                                            (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() != Rule.OperationValueString.ToLower() : false)) : false) ||

        //                                        (Operation == ">" ?
        //                                            ((Rule.OperationValueDateTime != null ? x.ValueDateTime > Rule.OperationValueDateTime : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble > Rule.OperationValueDouble : false)) : false) ||

        //                                        (Operation == ">=" ?
        //                                            ((Rule.OperationValueDateTime != null ? x.ValueDateTime >= Rule.OperationValueDateTime : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble >= Rule.OperationValueDouble : false)) : false) ||

        //                                        (Operation == "<" ?
        //                                            ((Rule.OperationValueDateTime != null ? x.ValueDateTime < Rule.OperationValueDateTime : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble < Rule.OperationValueDouble : false)) : false) ||

        //                                        (Operation == "<=" ?
        //                                            ((Rule.OperationValueDateTime != null ? x.ValueDateTime <= Rule.OperationValueDateTime : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble <= Rule.OperationValueDouble : false)) : false)

        //                                        ).Select(x => x.InventoryId).ToList();
        //                            }
        //                            else
        //                            {
        //                                DynamicAttValuesInventoryIds = _unitOfWork.DynamicAttLibRepository
        //                                    .GetWhere(x => (x.DynamicAttId == Rule.dynamicAttId && !x.disable) &&
        //                                        (Operation == "==" ?
        //                                            ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() == Rule.OperationValueBoolean.ToString().ToLower() : false) ||
        //                                            (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() == Rule.OperationValueDateTime.ToString().ToLower() : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble == Rule.OperationValueDouble : false) ||
        //                                            (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() == Rule.OperationValueString.ToLower() : false)) : false) ||

        //                                        (Operation == "!=" ?
        //                                            ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() != Rule.OperationValueBoolean.ToString().ToLower() : false) ||
        //                                            (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() != Rule.OperationValueDateTime.ToString().ToLower() : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble != Rule.OperationValueDouble : false) ||
        //                                            (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() != Rule.OperationValueString.ToLower() : false)) : false) ||

        //                                        (Operation == ">" ?
        //                                            ((Rule.OperationValueDateTime != null ? x.ValueDateTime > Rule.OperationValueDateTime : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble > Rule.OperationValueDouble : false)) : false) ||

        //                                        (Operation == ">=" ?
        //                                            ((Rule.OperationValueDateTime != null ? x.ValueDateTime >= Rule.OperationValueDateTime : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble >= Rule.OperationValueDouble : false)) : false) ||

        //                                        (Operation == "<" ?
        //                                            ((Rule.OperationValueDateTime != null ? x.ValueDateTime < Rule.OperationValueDateTime : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble < Rule.OperationValueDouble : false)) : false) ||

        //                                        (Operation == "<=" ?
        //                                            ((Rule.OperationValueDateTime != null ? x.ValueDateTime <= Rule.OperationValueDateTime : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble <= Rule.OperationValueDouble : false)) : false)

        //                                        ).Select(x => x.InventoryId).ToList();
        //                            }
        //                            if (DynamicAttValuesInventoryIds != null ? DynamicAttValuesInventoryIds.Count() != 0 : false)
        //                            {
        //                                TableRecords = _mapper.Map<List<object>>(db.GetType()
        //                                    .GetProperty(SDTableName).GetValue(db, null))
        //                                        .Where(x => DynamicAttValuesInventoryIds.Contains(Convert.ToInt32(x.GetType().GetProperty("Id").GetValue(x, null)))).ToList();
        //                            }
        //                        }

        //                        AddInstRuleViewModel AddInstRuleViewModel = new AddInstRuleViewModel();
        //                        if (Rule.dynamicAttId != null)
        //                        {
        //                            AddInstRuleViewModel = new AddInstRuleViewModel
        //                            {
        //                                dynamicAttId = Rule.dynamicAttId,
        //                                IsDynamic = true,
        //                                OperationId = Rule.OperationId,
        //                                OperationValueBoolean = Rule.OperationValueBoolean,
        //                                OperationValueDateTime = Rule.OperationValueDateTime,
        //                                OperationValueDouble = Rule.OperationValueDouble,
        //                                OperationValueString = Rule.OperationValueString,
        //                                TableName = Rule.tablesNames.TableName
        //                            };
        //                        }
        //                        else if (Rule.attributeActivatedId != null)
        //                        {
        //                            AddInstRuleViewModel = new AddInstRuleViewModel
        //                            {
        //                                attributeActivatedId = Rule.attributeActivatedId,
        //                                IsDynamic = false,
        //                                OperationId = Rule.OperationId,
        //                                OperationValueBoolean = Rule.OperationValueBoolean,
        //                                OperationValueDateTime = Rule.OperationValueDateTime,
        //                                OperationValueDouble = Rule.OperationValueDouble,
        //                                OperationValueString = Rule.OperationValueString,
        //                                TableName = Rule.tablesNames.TableName
        //                            };
        //                        }
        //                        List<object> RecordsIds = _mapper.Map<List<object>>(GetRecordsIds(MainTableName, AddInstRuleViewModel));

        //                        PathToCheckDependencyValidation Item = (PathToCheckDependencyValidation)Enum.Parse(typeof(PathToCheckDependencyValidation),
        //                            MainTableName + SDTableName + "Goal");

        //                        List<string> Path = GetEnumDescription(Item).Split(" ").ToList();

        //                        object CheckId = new object();

        //                        if (Path.Count() > 1)
        //                        {
        //                            if (Path[1].ToLower() == "allLoadInstId".ToLower())
        //                            {
        //                                int MW_PortId = (int)AddInstallationViewModel.GetType().GetProperty("MwPortId")
        //                                    .GetValue(AddInstallationViewModel, null);

        //                                int MW_BUId = _unitOfWork.MW_PortRepository.GetWhereFirst(x => x.Id == MW_PortId).MwBUId;

        //                                CheckId = _unitOfWork.AllLoadInstRepository.GetWhereFirst(x => !x.Draft && x.mwBUId == MW_BUId).Id;
        //                            }
        //                            else
        //                            {
        //                                object CivilLoads = AddInstallationViewModel.GetType().GetProperty(Path[0])
        //                                    .GetValue(AddInstallationViewModel, null);

        //                                CheckId = CivilLoads.GetType().GetProperty(Path[1]).GetValue(CivilLoads, null) != null ?
        //                                    (int)CivilLoads.GetType().GetProperty(Path[1]).GetValue(CivilLoads, null) : new object();
        //                            }
        //                        }
        //                        else if (Path.Count() == 1 && Path[0].ToLower() == "sitecode")
        //                        {
        //                            CheckId = SiteCode;
        //                        }
        //                        else if (Path.Count() == 1)
        //                        {
        //                            if (AddInstallationViewModel.GetType().GetProperty(Path[0]).GetValue(AddInstallationViewModel, null) != null)
        //                                CheckId = (int)AddInstallationViewModel.GetType().GetProperty(Path[0])
        //                                    .GetValue(AddInstallationViewModel, null);
        //                        }

        //                        if (RecordsIds.Exists(x => x.ToString().ToLower() == CheckId.ToString().ToLower()))
        //                        {
        //                            CheckIfSuccessAllRules++;
        //                        }
        //                    }
        //                }

        //                if (Rules.Count() == CheckIfSuccessAllRules)
        //                {
        //                    string DynamicAttributeName = "";
        //                    int DynamicAttributeId = _unitOfWork.DependencyRowRepository
        //                        .GetIncludeWhereFirst(x => x.RowId == RowId, x => x.Dependency).Dependency.DynamicAttId.Value;

        //                    AddDynamicAttInstValueViewModel InputDynamicAttribute = AddInstallationViewModel.TLIdynamicAttInstValue
        //                        .FirstOrDefault(x => x.DynamicAttId == DynamicAttributeId);

        //                    if (InputDynamicAttribute == null)
        //                    {
        //                        DynamicAttributeName = _unitOfWork.DynamicAttRepository
        //                            .GetWhereFirst(x => x.Id == DynamicAttributeId).Key;

        //                        return $"({DynamicAttributeName}) value can't be null";
        //                    }
        //                    else
        //                    {
        //                        string DependencyValidationOperation = DynamicAttributeMainDependency.Operation.Name;

        //                        object DependencyValidationValue = new object();

        //                        if (DynamicAttributeMainDependency.ValueBoolean != null)
        //                            DependencyValidationValue = DynamicAttributeMainDependency.ValueBoolean;

        //                        else if (DynamicAttributeMainDependency.ValueDateTime != null)
        //                            DependencyValidationValue = DynamicAttributeMainDependency.ValueDateTime;

        //                        else if (DynamicAttributeMainDependency.ValueDouble != null)
        //                            DependencyValidationValue = DynamicAttributeMainDependency.ValueDouble;

        //                        else if (!string.IsNullOrEmpty(DynamicAttributeMainDependency.ValueString))
        //                            DependencyValidationValue = DynamicAttributeMainDependency.ValueString;

        //                        object InputDynamicValue = new object();

        //                        if (InputDynamicAttribute.ValueBoolean != null)
        //                            InputDynamicValue = InputDynamicAttribute.ValueBoolean;

        //                        else if (InputDynamicAttribute.ValueDateTime != null)
        //                            InputDynamicValue = InputDynamicAttribute.ValueDateTime;

        //                        else if (InputDynamicAttribute.ValueDouble != null)
        //                            InputDynamicValue = InputDynamicAttribute.ValueDouble;

        //                        else if (!string.IsNullOrEmpty(InputDynamicAttribute.ValueString))
        //                            InputDynamicValue = InputDynamicAttribute.ValueString;

        //                        if (!(DependencyValidationOperation == "==" ? InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower() :
        //                            DependencyValidationOperation == "!=" ? InputDynamicValue.ToString().ToLower() != DependencyValidationValue.ToString().ToLower() :
        //                            DependencyValidationOperation == ">" ? Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == 1 :
        //                            DependencyValidationOperation == ">=" ? (Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == 1 ||
        //                                InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower()) :
        //                            DependencyValidationOperation == "<" ? Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == -1 :
        //                            DependencyValidationOperation == "<=" ? (Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == -1 ||
        //                                InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower()) : false))
        //                        {
        //                            DynamicAttributeName = _unitOfWork.DynamicAttRepository
        //                                .GetWhereFirst(x => x.Id == DynamicAttributeId).Key;

        //                            string ReturnOperation = (DependencyValidationOperation == "==" ? "equal to" :
        //                                (DependencyValidationOperation == "!=" ? "not equal to" :
        //                                (DependencyValidationOperation == ">" ? "bigger than" :
        //                                (DependencyValidationOperation == ">=" ? "bigger than or equal to" :
        //                                (DependencyValidationOperation == "<" ? "smaller than" :
        //                                (DependencyValidationOperation == "<=" ? "smaller than or equal to" : ""))))));

        //                            return $"({DynamicAttributeName}) value must be {ReturnOperation} {DependencyValidationValue}";
        //                        }
        //                    }
        //                }
        //            }
        //        }
        //    }
        //    else if (MWType.ToLower() == TablesNames.TLImwODU.ToString().ToLower())
        //    {
        //        string MainTableName = TablesNames.TLImwODU.ToString();
        //        AddMW_ODUViewModel AddInstallationViewModel = _mapper.Map<AddMW_ODUViewModel>(Input);

        //        List<DynamicAttViewModel> DynamicAttributes = _mapper.Map<List<DynamicAttViewModel>>(_unitOfWork.DynamicAttRepository
        //            .GetIncludeWhere(x => x.tablesNames.TableName.ToLower() == MainTableName.ToLower() && !x.disable
        //                , x => x.tablesNames).ToList());

        //        foreach (DynamicAttViewModel DynamicAttribute in DynamicAttributes)
        //        {
        //            TLIdependency DynamicAttributeMainDependency = _unitOfWork.DependencieRepository.GetIncludeWhereFirst(x => x.DynamicAttId == DynamicAttribute.Id &&
        //                (x.ValueBoolean != null || x.ValueDateTime != null || x.ValueDouble != null || !string.IsNullOrEmpty(x.ValueString)) &&
        //                    x.OperationId != null, x => x.Operation);

        //            if (DynamicAttributeMainDependency == null)
        //                continue;

        //            List<int> DependencyRows = _unitOfWork.DependencyRowRepository.GetWhere(x => x.DependencyId == DynamicAttributeMainDependency.Id)
        //                .Select(x => x.RowId.Value).Distinct().ToList();

        //            foreach (int RowId in DependencyRows)
        //            {
        //                List<TLIrule> Rules = _unitOfWork.RowRuleRepository.GetIncludeWhere(x => x.RowId == RowId && x.Rule.OperationId != null, x => x.Rule, x => x.Rule.tablesNames,
        //                    x => x.Rule.Operation, x => x.Rule.dynamicAtt, x => x.Rule.attributeActivated).Select(x => x.Rule).ToList();

        //                int CheckIfSuccessAllRules = 0;

        //                foreach (TLIrule Rule in Rules)
        //                {
        //                    string SDTableName = Rule.tablesNames.TableName;

        //                    string DataType = "";

        //                    string Operation = Rule.Operation.Name;
        //                    object OperationValue = new object();

        //                    if (Rule.OperationValueBoolean != null)
        //                    {
        //                        DataType = "Bool";
        //                        OperationValue = Rule.OperationValueBoolean;
        //                    }
        //                    else if (Rule.OperationValueDateTime != null)
        //                    {
        //                        DataType = "DateTime";
        //                        OperationValue = Rule.OperationValueDateTime;
        //                    }
        //                    else if (Rule.OperationValueDouble != null)
        //                    {
        //                        DataType = "Double";
        //                        OperationValue = Rule.OperationValueDouble;
        //                    }
        //                    else if (!string.IsNullOrEmpty(Rule.OperationValueString))
        //                    {
        //                        DataType = "String";
        //                        OperationValue = Rule.OperationValueString;
        //                    }

        //                    if (MainTableName.ToLower() == SDTableName.ToLower())
        //                    {
        //                        object InsertedValue = new object();

        //                        if (Rule.attributeActivatedId != null)
        //                        {
        //                            string AttributeName = Rule.attributeActivated.Key;

        //                            object TestValue = AddInstallationViewModel.GetType().GetProperties()
        //                                .FirstOrDefault(x => x.Name.ToLower() == AttributeName.ToLower()).GetValue(AddInstallationViewModel, null);

        //                            if (TestValue == null)
        //                                break;

        //                            if (Rule.OperationValueBoolean != null)
        //                                InsertedValue = bool.Parse(TestValue.ToString());

        //                            else if (Rule.OperationValueDateTime != null)
        //                                InsertedValue = DateTime.Parse(TestValue.ToString());

        //                            else if (Rule.OperationValueDouble != null)
        //                                InsertedValue = double.Parse(TestValue.ToString());

        //                            else if (!string.IsNullOrEmpty(Rule.OperationValueString))
        //                                InsertedValue = TestValue.ToString();
        //                        }
        //                        else if (Rule.dynamicAttId != null)
        //                        {
        //                            AddDynamicAttInstValueViewModel DynamicObject = AddInstallationViewModel.TLIdynamicAttInstValue
        //                                .FirstOrDefault(x => x.DynamicAttId == Rule.dynamicAttId.Value);

        //                            if (DynamicObject == null)
        //                                break;

        //                            if (DynamicObject.ValueBoolean != null)
        //                                InsertedValue = DynamicObject.ValueBoolean;

        //                            else if (DynamicObject.ValueDateTime != null)
        //                                InsertedValue = DynamicObject.ValueDateTime;

        //                            else if (DynamicObject.ValueDouble != null)
        //                                InsertedValue = DynamicObject.ValueDouble;

        //                            else if (!string.IsNullOrEmpty(DynamicObject.ValueString))
        //                                InsertedValue = DynamicObject.ValueString;
        //                        }

        //                        if (Operation == "==" ? InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower() :
        //                            Operation == "!=" ? InsertedValue.ToString().ToLower() != OperationValue.ToString().ToLower() :
        //                            Operation == ">" ? Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == 1 :
        //                            Operation == ">=" ? (Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == 1 ||
        //                                InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower()) :
        //                            Operation == "<" ? Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == -1 :
        //                            Operation == "<=" ? (Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == -1 ||
        //                                InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower()) : false)
        //                        {
        //                            CheckIfSuccessAllRules++;
        //                        }
        //                    }
        //                    else
        //                    {
        //                        List<object> TableRecords = new List<object>();
        //                        if (Rule.attributeActivatedId != null)
        //                        {
        //                            string AttributeName = Rule.attributeActivated.Key;

        //                            if (OperationValue != null)
        //                                TableRecords = _mapper.Map<List<object>>(db.GetType().GetProperty(SDTableName)
        //                                    .GetValue(db, null)).Where(x => x.GetType().GetProperty(AttributeName).GetValue(x, null) != null ? (Operation == ">" ?
        //                                       (DataType.ToLower() == "DateTime".ToLower() ?
        //                                            Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 :
        //                                        DataType.ToLower() == "Double".ToLower() ?
        //                                            Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 : false) :
        //                                    Operation == ">=" ?
        //                                        (DataType.ToLower() == "DateTime".ToLower() ?
        //                                            (Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 ||
        //                                             x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) :
        //                                        DataType.ToLower() == "Double".ToLower() ?
        //                                            (Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 ||
        //                                             x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) : false) :
        //                                    Operation == "<" ?
        //                                       (DataType.ToLower() == "DateTime".ToLower() ?
        //                                            Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 :
        //                                        DataType.ToLower() == "Double".ToLower() ?
        //                                            Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 : false) :
        //                                    Operation == "<=" ?
        //                                        (DataType.ToLower() == "DateTime".ToLower() ?
        //                                            (Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 ||
        //                                             x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) :
        //                                        DataType.ToLower() == "Double".ToLower() ?
        //                                            (Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 ||
        //                                             x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) : false) :
        //                                    Operation == "==" ?
        //                                        x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower() :
        //                                    Operation == "!=" ?
        //                                        x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() != OperationValue.ToString().ToLower() : false) : false).ToList();
        //                        }
        //                        else if (Rule.dynamicAttId != null)
        //                        {
        //                            List<int> DynamicAttValuesInventoryIds = new List<int>();

        //                            if (!DynamicAttribute.LibraryAtt)
        //                            {
        //                                DynamicAttValuesInventoryIds = _unitOfWork.DynamicAttInstValueRepository
        //                                    .GetWhere(x => (x.DynamicAttId == Rule.dynamicAttId.Value && !x.disable) &&
        //                                        (Operation == "==" ?
        //                                            ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() == Rule.OperationValueBoolean.ToString().ToLower() : false) ||
        //                                            (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() == Rule.OperationValueDateTime.ToString().ToLower() : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble == Rule.OperationValueDouble : false) ||
        //                                            (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() == Rule.OperationValueString.ToLower() : false)) : false) ||

        //                                        (Operation == "!=" ?
        //                                            ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() != Rule.OperationValueBoolean.ToString().ToLower() : false) ||
        //                                            (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() != Rule.OperationValueDateTime.ToString().ToLower() : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble != Rule.OperationValueDouble : false) ||
        //                                            (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() != Rule.OperationValueString.ToLower() : false)) : false) ||

        //                                        (Operation == ">" ?
        //                                            ((Rule.OperationValueDateTime != null ? x.ValueDateTime > Rule.OperationValueDateTime : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble > Rule.OperationValueDouble : false)) : false) ||

        //                                        (Operation == ">=" ?
        //                                            ((Rule.OperationValueDateTime != null ? x.ValueDateTime >= Rule.OperationValueDateTime : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble >= Rule.OperationValueDouble : false)) : false) ||

        //                                        (Operation == "<" ?
        //                                            ((Rule.OperationValueDateTime != null ? x.ValueDateTime < Rule.OperationValueDateTime : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble < Rule.OperationValueDouble : false)) : false) ||

        //                                        (Operation == "<=" ?
        //                                            ((Rule.OperationValueDateTime != null ? x.ValueDateTime <= Rule.OperationValueDateTime : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble <= Rule.OperationValueDouble : false)) : false)

        //                                        ).Select(x => x.InventoryId).ToList();
        //                            }
        //                            else
        //                            {
        //                                DynamicAttValuesInventoryIds = _unitOfWork.DynamicAttLibRepository
        //                                    .GetWhere(x => (x.DynamicAttId == Rule.dynamicAttId && !x.disable) &&
        //                                        (Operation == "==" ?
        //                                            ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() == Rule.OperationValueBoolean.ToString().ToLower() : false) ||
        //                                            (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() == Rule.OperationValueDateTime.ToString().ToLower() : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble == Rule.OperationValueDouble : false) ||
        //                                            (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() == Rule.OperationValueString.ToLower() : false)) : false) ||

        //                                        (Operation == "!=" ?
        //                                            ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() != Rule.OperationValueBoolean.ToString().ToLower() : false) ||
        //                                            (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() != Rule.OperationValueDateTime.ToString().ToLower() : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble != Rule.OperationValueDouble : false) ||
        //                                            (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() != Rule.OperationValueString.ToLower() : false)) : false) ||

        //                                        (Operation == ">" ?
        //                                            ((Rule.OperationValueDateTime != null ? x.ValueDateTime > Rule.OperationValueDateTime : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble > Rule.OperationValueDouble : false)) : false) ||

        //                                        (Operation == ">=" ?
        //                                            ((Rule.OperationValueDateTime != null ? x.ValueDateTime >= Rule.OperationValueDateTime : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble >= Rule.OperationValueDouble : false)) : false) ||

        //                                        (Operation == "<" ?
        //                                            ((Rule.OperationValueDateTime != null ? x.ValueDateTime < Rule.OperationValueDateTime : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble < Rule.OperationValueDouble : false)) : false) ||

        //                                        (Operation == "<=" ?
        //                                            ((Rule.OperationValueDateTime != null ? x.ValueDateTime <= Rule.OperationValueDateTime : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble <= Rule.OperationValueDouble : false)) : false)

        //                                        ).Select(x => x.InventoryId).ToList();
        //                            }
        //                            if (DynamicAttValuesInventoryIds != null ? DynamicAttValuesInventoryIds.Count() != 0 : false)
        //                            {
        //                                TableRecords = _mapper.Map<List<object>>(db.GetType()
        //                                    .GetProperty(SDTableName).GetValue(db, null))
        //                                        .Where(x => DynamicAttValuesInventoryIds.Contains(Convert.ToInt32(x.GetType().GetProperty("Id").GetValue(x, null)))).ToList();
        //                            }
        //                        }

        //                        AddInstRuleViewModel AddInstRuleViewModel = new AddInstRuleViewModel();
        //                        if (Rule.dynamicAttId != null)
        //                        {
        //                            AddInstRuleViewModel = new AddInstRuleViewModel
        //                            {
        //                                dynamicAttId = Rule.dynamicAttId,
        //                                IsDynamic = true,
        //                                OperationId = Rule.OperationId,
        //                                OperationValueBoolean = Rule.OperationValueBoolean,
        //                                OperationValueDateTime = Rule.OperationValueDateTime,
        //                                OperationValueDouble = Rule.OperationValueDouble,
        //                                OperationValueString = Rule.OperationValueString,
        //                                TableName = Rule.tablesNames.TableName
        //                            };
        //                        }
        //                        else if (Rule.attributeActivatedId != null)
        //                        {
        //                            AddInstRuleViewModel = new AddInstRuleViewModel
        //                            {
        //                                attributeActivatedId = Rule.attributeActivatedId,
        //                                IsDynamic = false,
        //                                OperationId = Rule.OperationId,
        //                                OperationValueBoolean = Rule.OperationValueBoolean,
        //                                OperationValueDateTime = Rule.OperationValueDateTime,
        //                                OperationValueDouble = Rule.OperationValueDouble,
        //                                OperationValueString = Rule.OperationValueString,
        //                                TableName = Rule.tablesNames.TableName
        //                            };
        //                        }
        //                        List<object> RecordsIds = _mapper.Map<List<object>>(GetRecordsIds(MainTableName, AddInstRuleViewModel));

        //                        PathToCheckDependencyValidation Item = (PathToCheckDependencyValidation)Enum.Parse(typeof(PathToCheckDependencyValidation),
        //                            MainTableName + SDTableName + "Goal");

        //                        List<string> Path = GetEnumDescription(Item).Split(" ").ToList();

        //                        object CheckId = new object();

        //                        if (Path.Count() > 1)
        //                        {
        //                            object CivilLoads = AddInstallationViewModel.GetType().GetProperty(Path[0])
        //                                .GetValue(AddInstallationViewModel, null);

        //                            CheckId = CivilLoads.GetType().GetProperty(Path[1]).GetValue(CivilLoads, null) != null ?
        //                                (int)CivilLoads.GetType().GetProperty(Path[1]).GetValue(CivilLoads, null) : new object();
        //                        }
        //                        else if (Path.Count() == 1 && Path[0].ToLower() == "sitecode")
        //                        {
        //                            CheckId = SiteCode;
        //                        }
        //                        else if (Path.Count() == 1)
        //                        {
        //                            if (AddInstallationViewModel.GetType().GetProperty(Path[0]).GetValue(AddInstallationViewModel, null) != null)
        //                                CheckId = (int)AddInstallationViewModel.GetType().GetProperty(Path[0])
        //                                    .GetValue(AddInstallationViewModel, null);
        //                        }

        //                        if (RecordsIds.Exists(x => x.ToString().ToLower() == CheckId.ToString().ToLower()))
        //                        {
        //                            CheckIfSuccessAllRules++;
        //                        }
        //                    }
        //                }

        //                if (Rules.Count() == CheckIfSuccessAllRules)
        //                {
        //                    string DynamicAttributeName = "";
        //                    int DynamicAttributeId = _unitOfWork.DependencyRowRepository
        //                        .GetIncludeWhereFirst(x => x.RowId == RowId, x => x.Dependency).Dependency.DynamicAttId.Value;

        //                    AddDynamicAttInstValueViewModel InputDynamicAttribute = AddInstallationViewModel.TLIdynamicAttInstValue
        //                        .FirstOrDefault(x => x.DynamicAttId == DynamicAttributeId);

        //                    if (InputDynamicAttribute == null)
        //                    {
        //                        DynamicAttributeName = _unitOfWork.DynamicAttRepository
        //                            .GetWhereFirst(x => x.Id == DynamicAttributeId).Key;

        //                        return $"({DynamicAttributeName}) value can't be null";
        //                    }
        //                    else
        //                    {
        //                        string DependencyValidationOperation = DynamicAttributeMainDependency.Operation.Name;

        //                        object DependencyValidationValue = new object();

        //                        if (DynamicAttributeMainDependency.ValueBoolean != null)
        //                            DependencyValidationValue = DynamicAttributeMainDependency.ValueBoolean;

        //                        else if (DynamicAttributeMainDependency.ValueDateTime != null)
        //                            DependencyValidationValue = DynamicAttributeMainDependency.ValueDateTime;

        //                        else if (DynamicAttributeMainDependency.ValueDouble != null)
        //                            DependencyValidationValue = DynamicAttributeMainDependency.ValueDouble;

        //                        else if (!string.IsNullOrEmpty(DynamicAttributeMainDependency.ValueString))
        //                            DependencyValidationValue = DynamicAttributeMainDependency.ValueString;

        //                        object InputDynamicValue = new object();

        //                        if (InputDynamicAttribute.ValueBoolean != null)
        //                            InputDynamicValue = InputDynamicAttribute.ValueBoolean;

        //                        else if (InputDynamicAttribute.ValueDateTime != null)
        //                            InputDynamicValue = InputDynamicAttribute.ValueDateTime;

        //                        else if (InputDynamicAttribute.ValueDouble != null)
        //                            InputDynamicValue = InputDynamicAttribute.ValueDouble;

        //                        else if (!string.IsNullOrEmpty(InputDynamicAttribute.ValueString))
        //                            InputDynamicValue = InputDynamicAttribute.ValueString;

        //                        if (!(DependencyValidationOperation == "==" ? InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower() :
        //                            DependencyValidationOperation == "!=" ? InputDynamicValue.ToString().ToLower() != DependencyValidationValue.ToString().ToLower() :
        //                            DependencyValidationOperation == ">" ? Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == 1 :
        //                            DependencyValidationOperation == ">=" ? (Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == 1 ||
        //                                InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower()) :
        //                            DependencyValidationOperation == "<" ? Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == -1 :
        //                            DependencyValidationOperation == "<=" ? (Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == -1 ||
        //                                InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower()) : false))
        //                        {
        //                            DynamicAttributeName = _unitOfWork.DynamicAttRepository
        //                                .GetWhereFirst(x => x.Id == DynamicAttributeId).Key;

        //                            string ReturnOperation = (DependencyValidationOperation == "==" ? "equal to" :
        //                                (DependencyValidationOperation == "!=" ? "not equal to" :
        //                                (DependencyValidationOperation == ">" ? "bigger than" :
        //                                (DependencyValidationOperation == ">=" ? "bigger than or equal to" :
        //                                (DependencyValidationOperation == "<" ? "smaller than" :
        //                                (DependencyValidationOperation == "<=" ? "smaller than or equal to" : ""))))));

        //                            return $"({DynamicAttributeName}) value must be {ReturnOperation} {DependencyValidationValue}";
        //                        }
        //                    }
        //                }
        //            }
        //        }
        //    }
        //    else if (MWType.ToLower() == TablesNames.TLImwOther.ToString().ToLower())
        //    {
        //        string MainTableName = TablesNames.TLImwOther.ToString();
        //        AddMw_OtherViewModel AddInstallationViewModel = _mapper.Map<AddMw_OtherViewModel>(Input);

        //        List<DynamicAttViewModel> DynamicAttributes = _mapper.Map<List<DynamicAttViewModel>>(_unitOfWork.DynamicAttRepository
        //            .GetIncludeWhere(x => x.tablesNames.TableName.ToLower() == MainTableName.ToLower() && !x.disable
        //                , x => x.tablesNames).ToList());

        //        foreach (DynamicAttViewModel DynamicAttribute in DynamicAttributes)
        //        {
        //            TLIdependency DynamicAttributeMainDependency = _unitOfWork.DependencieRepository.GetIncludeWhereFirst(x => x.DynamicAttId == DynamicAttribute.Id &&
        //                (x.ValueBoolean != null || x.ValueDateTime != null || x.ValueDouble != null || !string.IsNullOrEmpty(x.ValueString)) &&
        //                    x.OperationId != null, x => x.Operation);

        //            if (DynamicAttributeMainDependency == null)
        //                continue;

        //            List<int> DependencyRows = _unitOfWork.DependencyRowRepository.GetWhere(x => x.DependencyId == DynamicAttributeMainDependency.Id)
        //                .Select(x => x.RowId.Value).Distinct().ToList();

        //            foreach (int RowId in DependencyRows)
        //            {
        //                List<TLIrule> Rules = _unitOfWork.RowRuleRepository.GetIncludeWhere(x => x.RowId == RowId && x.Rule.OperationId != null, x => x.Rule, x => x.Rule.tablesNames,
        //                    x => x.Rule.Operation, x => x.Rule.dynamicAtt, x => x.Rule.attributeActivated).Select(x => x.Rule).ToList();

        //                int CheckIfSuccessAllRules = 0;

        //                foreach (TLIrule Rule in Rules)
        //                {
        //                    string SDTableName = Rule.tablesNames.TableName;

        //                    string DataType = "";

        //                    string Operation = Rule.Operation.Name;
        //                    object OperationValue = new object();

        //                    if (Rule.OperationValueBoolean != null)
        //                    {
        //                        DataType = "Bool";
        //                        OperationValue = Rule.OperationValueBoolean;
        //                    }
        //                    else if (Rule.OperationValueDateTime != null)
        //                    {
        //                        DataType = "DateTime";
        //                        OperationValue = Rule.OperationValueDateTime;
        //                    }
        //                    else if (Rule.OperationValueDouble != null)
        //                    {
        //                        DataType = "Double";
        //                        OperationValue = Rule.OperationValueDouble;
        //                    }
        //                    else if (!string.IsNullOrEmpty(Rule.OperationValueString))
        //                    {
        //                        DataType = "String";
        //                        OperationValue = Rule.OperationValueString;
        //                    }

        //                    if (MainTableName.ToLower() == SDTableName.ToLower())
        //                    {
        //                        object InsertedValue = new object();

        //                        if (Rule.attributeActivatedId != null)
        //                        {
        //                            string AttributeName = Rule.attributeActivated.Key;

        //                            object TestValue = AddInstallationViewModel.GetType().GetProperties()
        //                                .FirstOrDefault(x => x.Name.ToLower() == AttributeName.ToLower()).GetValue(AddInstallationViewModel, null);

        //                            if (TestValue == null)
        //                                break;

        //                            if (Rule.OperationValueBoolean != null)
        //                                InsertedValue = bool.Parse(TestValue.ToString());

        //                            else if (Rule.OperationValueDateTime != null)
        //                                InsertedValue = DateTime.Parse(TestValue.ToString());

        //                            else if (Rule.OperationValueDouble != null)
        //                                InsertedValue = double.Parse(TestValue.ToString());

        //                            else if (!string.IsNullOrEmpty(Rule.OperationValueString))
        //                                InsertedValue = TestValue.ToString();
        //                        }
        //                        else if (Rule.dynamicAttId != null)
        //                        {
        //                            AddDynamicAttInstValueViewModel DynamicObject = AddInstallationViewModel.TLIdynamicAttInstValue
        //                                .FirstOrDefault(x => x.DynamicAttId == Rule.dynamicAttId.Value);

        //                            if (DynamicObject == null)
        //                                break;

        //                            if (DynamicObject.ValueBoolean != null)
        //                                InsertedValue = DynamicObject.ValueBoolean;

        //                            else if (DynamicObject.ValueDateTime != null)
        //                                InsertedValue = DynamicObject.ValueDateTime;

        //                            else if (DynamicObject.ValueDouble != null)
        //                                InsertedValue = DynamicObject.ValueDouble;

        //                            else if (!string.IsNullOrEmpty(DynamicObject.ValueString))
        //                                InsertedValue = DynamicObject.ValueString;
        //                        }

        //                        if (Operation == "==" ? InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower() :
        //                            Operation == "!=" ? InsertedValue.ToString().ToLower() != OperationValue.ToString().ToLower() :
        //                            Operation == ">" ? Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == 1 :
        //                            Operation == ">=" ? (Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == 1 ||
        //                                InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower()) :
        //                            Operation == "<" ? Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == -1 :
        //                            Operation == "<=" ? (Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == -1 ||
        //                                InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower()) : false)
        //                        {
        //                            CheckIfSuccessAllRules++;
        //                        }
        //                    }
        //                    else
        //                    {
        //                        List<object> TableRecords = new List<object>();
        //                        if (Rule.attributeActivatedId != null)
        //                        {
        //                            string AttributeName = Rule.attributeActivated.Key;

        //                            if (OperationValue != null)
        //                                TableRecords = _mapper.Map<List<object>>(db.GetType().GetProperty(SDTableName)
        //                                    .GetValue(db, null)).Where(x => x.GetType().GetProperty(AttributeName).GetValue(x, null) != null ? (Operation == ">" ?
        //                                       (DataType.ToLower() == "DateTime".ToLower() ?
        //                                            Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 :
        //                                        DataType.ToLower() == "Double".ToLower() ?
        //                                            Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 : false) :
        //                                    Operation == ">=" ?
        //                                        (DataType.ToLower() == "DateTime".ToLower() ?
        //                                            (Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 ||
        //                                             x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) :
        //                                        DataType.ToLower() == "Double".ToLower() ?
        //                                            (Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 ||
        //                                             x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) : false) :
        //                                    Operation == "<" ?
        //                                       (DataType.ToLower() == "DateTime".ToLower() ?
        //                                            Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 :
        //                                        DataType.ToLower() == "Double".ToLower() ?
        //                                            Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 : false) :
        //                                    Operation == "<=" ?
        //                                        (DataType.ToLower() == "DateTime".ToLower() ?
        //                                            (Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 ||
        //                                             x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) :
        //                                        DataType.ToLower() == "Double".ToLower() ?
        //                                            (Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 ||
        //                                             x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) : false) :
        //                                    Operation == "==" ?
        //                                        x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower() :
        //                                    Operation == "!=" ?
        //                                        x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() != OperationValue.ToString().ToLower() : false) : false).ToList();
        //                        }
        //                        else if (Rule.dynamicAttId != null)
        //                        {
        //                            List<int> DynamicAttValuesInventoryIds = new List<int>();

        //                            if (!DynamicAttribute.LibraryAtt)
        //                            {
        //                                DynamicAttValuesInventoryIds = _unitOfWork.DynamicAttInstValueRepository
        //                                    .GetWhere(x => (x.DynamicAttId == Rule.dynamicAttId.Value && !x.disable) &&
        //                                        (Operation == "==" ?
        //                                            ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() == Rule.OperationValueBoolean.ToString().ToLower() : false) ||
        //                                            (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() == Rule.OperationValueDateTime.ToString().ToLower() : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble == Rule.OperationValueDouble : false) ||
        //                                            (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() == Rule.OperationValueString.ToLower() : false)) : false) ||

        //                                        (Operation == "!=" ?
        //                                            ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() != Rule.OperationValueBoolean.ToString().ToLower() : false) ||
        //                                            (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() != Rule.OperationValueDateTime.ToString().ToLower() : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble != Rule.OperationValueDouble : false) ||
        //                                            (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() != Rule.OperationValueString.ToLower() : false)) : false) ||

        //                                        (Operation == ">" ?
        //                                            ((Rule.OperationValueDateTime != null ? x.ValueDateTime > Rule.OperationValueDateTime : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble > Rule.OperationValueDouble : false)) : false) ||

        //                                        (Operation == ">=" ?
        //                                            ((Rule.OperationValueDateTime != null ? x.ValueDateTime >= Rule.OperationValueDateTime : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble >= Rule.OperationValueDouble : false)) : false) ||

        //                                        (Operation == "<" ?
        //                                            ((Rule.OperationValueDateTime != null ? x.ValueDateTime < Rule.OperationValueDateTime : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble < Rule.OperationValueDouble : false)) : false) ||

        //                                        (Operation == "<=" ?
        //                                            ((Rule.OperationValueDateTime != null ? x.ValueDateTime <= Rule.OperationValueDateTime : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble <= Rule.OperationValueDouble : false)) : false)

        //                                        ).Select(x => x.InventoryId).ToList();
        //                            }
        //                            else
        //                            {
        //                                DynamicAttValuesInventoryIds = _unitOfWork.DynamicAttLibRepository
        //                                    .GetWhere(x => (x.DynamicAttId == Rule.dynamicAttId && !x.disable) &&
        //                                        (Operation == "==" ?
        //                                            ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() == Rule.OperationValueBoolean.ToString().ToLower() : false) ||
        //                                            (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() == Rule.OperationValueDateTime.ToString().ToLower() : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble == Rule.OperationValueDouble : false) ||
        //                                            (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() == Rule.OperationValueString.ToLower() : false)) : false) ||

        //                                        (Operation == "!=" ?
        //                                            ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() != Rule.OperationValueBoolean.ToString().ToLower() : false) ||
        //                                            (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() != Rule.OperationValueDateTime.ToString().ToLower() : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble != Rule.OperationValueDouble : false) ||
        //                                            (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() != Rule.OperationValueString.ToLower() : false)) : false) ||

        //                                        (Operation == ">" ?
        //                                            ((Rule.OperationValueDateTime != null ? x.ValueDateTime > Rule.OperationValueDateTime : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble > Rule.OperationValueDouble : false)) : false) ||

        //                                        (Operation == ">=" ?
        //                                            ((Rule.OperationValueDateTime != null ? x.ValueDateTime >= Rule.OperationValueDateTime : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble >= Rule.OperationValueDouble : false)) : false) ||

        //                                        (Operation == "<" ?
        //                                            ((Rule.OperationValueDateTime != null ? x.ValueDateTime < Rule.OperationValueDateTime : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble < Rule.OperationValueDouble : false)) : false) ||

        //                                        (Operation == "<=" ?
        //                                            ((Rule.OperationValueDateTime != null ? x.ValueDateTime <= Rule.OperationValueDateTime : false) ||
        //                                            (Rule.OperationValueDouble != null ? x.ValueDouble <= Rule.OperationValueDouble : false)) : false)

        //                                        ).Select(x => x.InventoryId).ToList();
        //                            }
        //                            if (DynamicAttValuesInventoryIds != null ? DynamicAttValuesInventoryIds.Count() != 0 : false)
        //                            {
        //                                TableRecords = _mapper.Map<List<object>>(db.GetType()
        //                                    .GetProperty(SDTableName).GetValue(db, null))
        //                                        .Where(x => DynamicAttValuesInventoryIds.Contains(Convert.ToInt32(x.GetType().GetProperty("Id").GetValue(x, null)))).ToList();
        //                            }
        //                        }

        //                        AddInstRuleViewModel AddInstRuleViewModel = new AddInstRuleViewModel();
        //                        if (Rule.dynamicAttId != null)
        //                        {
        //                            AddInstRuleViewModel = new AddInstRuleViewModel
        //                            {
        //                                dynamicAttId = Rule.dynamicAttId,
        //                                IsDynamic = true,
        //                                OperationId = Rule.OperationId,
        //                                OperationValueBoolean = Rule.OperationValueBoolean,
        //                                OperationValueDateTime = Rule.OperationValueDateTime,
        //                                OperationValueDouble = Rule.OperationValueDouble,
        //                                OperationValueString = Rule.OperationValueString,
        //                                TableName = Rule.tablesNames.TableName
        //                            };
        //                        }
        //                        else if (Rule.attributeActivatedId != null)
        //                        {
        //                            AddInstRuleViewModel = new AddInstRuleViewModel
        //                            {
        //                                attributeActivatedId = Rule.attributeActivatedId,
        //                                IsDynamic = false,
        //                                OperationId = Rule.OperationId,
        //                                OperationValueBoolean = Rule.OperationValueBoolean,
        //                                OperationValueDateTime = Rule.OperationValueDateTime,
        //                                OperationValueDouble = Rule.OperationValueDouble,
        //                                OperationValueString = Rule.OperationValueString,
        //                                TableName = Rule.tablesNames.TableName
        //                            };
        //                        }
        //                        List<object> RecordsIds = _mapper.Map<List<object>>(GetRecordsIds(MainTableName, AddInstRuleViewModel));

        //                        PathToCheckDependencyValidation Item = (PathToCheckDependencyValidation)Enum.Parse(typeof(PathToCheckDependencyValidation),
        //                            MainTableName + SDTableName + "Goal");

        //                        List<string> Path = GetEnumDescription(Item).Split(" ").ToList();

        //                        object CheckId = new object();

        //                        if (Path.Count() > 1)
        //                        {
        //                            object CivilLoads = AddInstallationViewModel.GetType().GetProperty(Path[0])
        //                                .GetValue(AddInstallationViewModel, null);

        //                            CheckId = CivilLoads.GetType().GetProperty(Path[1]).GetValue(CivilLoads, null) != null ?
        //                                (int)CivilLoads.GetType().GetProperty(Path[1]).GetValue(CivilLoads, null) : new object();
        //                        }
        //                        else if (Path.Count() == 1 && Path[0].ToLower() == "sitecode")
        //                        {
        //                            CheckId = SiteCode;
        //                        }
        //                        else if (Path.Count() == 1)
        //                        {
        //                            if (AddInstallationViewModel.GetType().GetProperty(Path[0]).GetValue(AddInstallationViewModel, null) != null)
        //                                CheckId = (int)AddInstallationViewModel.GetType().GetProperty(Path[0])
        //                                    .GetValue(AddInstallationViewModel, null);
        //                        }

        //                        if (RecordsIds.Exists(x => x.ToString().ToLower() == CheckId.ToString().ToLower()))
        //                        {
        //                            CheckIfSuccessAllRules++;
        //                        }
        //                    }
        //                }

        //                if (Rules.Count() == CheckIfSuccessAllRules)
        //                {
        //                    string DynamicAttributeName = "";
        //                    int DynamicAttributeId = _unitOfWork.DependencyRowRepository
        //                        .GetIncludeWhereFirst(x => x.RowId == RowId, x => x.Dependency).Dependency.DynamicAttId.Value;

        //                    AddDynamicAttInstValueViewModel InputDynamicAttribute = AddInstallationViewModel.TLIdynamicAttInstValue
        //                        .FirstOrDefault(x => x.DynamicAttId == DynamicAttributeId);

        //                    if (InputDynamicAttribute == null)
        //                    {
        //                        DynamicAttributeName = _unitOfWork.DynamicAttRepository
        //                            .GetWhereFirst(x => x.Id == DynamicAttributeId).Key;

        //                        return $"({DynamicAttributeName}) value can't be null";
        //                    }
        //                    else
        //                    {
        //                        string DependencyValidationOperation = DynamicAttributeMainDependency.Operation.Name;

        //                        object DependencyValidationValue = new object();

        //                        if (DynamicAttributeMainDependency.ValueBoolean != null)
        //                            DependencyValidationValue = DynamicAttributeMainDependency.ValueBoolean;

        //                        else if (DynamicAttributeMainDependency.ValueDateTime != null)
        //                            DependencyValidationValue = DynamicAttributeMainDependency.ValueDateTime;

        //                        else if (DynamicAttributeMainDependency.ValueDouble != null)
        //                            DependencyValidationValue = DynamicAttributeMainDependency.ValueDouble;

        //                        else if (!string.IsNullOrEmpty(DynamicAttributeMainDependency.ValueString))
        //                            DependencyValidationValue = DynamicAttributeMainDependency.ValueString;

        //                        object InputDynamicValue = new object();

        //                        if (InputDynamicAttribute.ValueBoolean != null)
        //                            InputDynamicValue = InputDynamicAttribute.ValueBoolean;

        //                        else if (InputDynamicAttribute.ValueDateTime != null)
        //                            InputDynamicValue = InputDynamicAttribute.ValueDateTime;

        //                        else if (InputDynamicAttribute.ValueDouble != null)
        //                            InputDynamicValue = InputDynamicAttribute.ValueDouble;

        //                        else if (!string.IsNullOrEmpty(InputDynamicAttribute.ValueString))
        //                            InputDynamicValue = InputDynamicAttribute.ValueString;

        //                        if (!(DependencyValidationOperation == "==" ? InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower() :
        //                            DependencyValidationOperation == "!=" ? InputDynamicValue.ToString().ToLower() != DependencyValidationValue.ToString().ToLower() :
        //                            DependencyValidationOperation == ">" ? Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == 1 :
        //                            DependencyValidationOperation == ">=" ? (Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == 1 ||
        //                                InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower()) :
        //                            DependencyValidationOperation == "<" ? Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == -1 :
        //                            DependencyValidationOperation == "<=" ? (Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == -1 ||
        //                                InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower()) : false))
        //                        {
        //                            DynamicAttributeName = _unitOfWork.DynamicAttRepository
        //                                .GetWhereFirst(x => x.Id == DynamicAttributeId).Key;

        //                            string ReturnOperation = (DependencyValidationOperation == "==" ? "equal to" :
        //                                (DependencyValidationOperation == "!=" ? "not equal to" :
        //                                (DependencyValidationOperation == ">" ? "bigger than" :
        //                                (DependencyValidationOperation == ">=" ? "bigger than or equal to" :
        //                                (DependencyValidationOperation == "<" ? "smaller than" :
        //                                (DependencyValidationOperation == "<=" ? "smaller than or equal to" : ""))))));

        //                            return $"({DynamicAttributeName}) value must be {ReturnOperation} {DependencyValidationValue}";
        //                        }
        //                    }
        //                }
        //            }
        //        }
        //    }
        //    return string.Empty;
        //}
    }
}








