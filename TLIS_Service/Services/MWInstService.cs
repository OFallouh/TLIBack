using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Oracle.ManagedDataAccess.Client;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Transactions;
using TLIS_DAL;
using TLIS_DAL.Helper;
using System.Collections;
using TLIS_DAL.Helper.Filters;
using TLIS_DAL.Helpers;
using TLIS_DAL.Models;
using TLIS_DAL.ViewModelBase;
using TLIS_DAL.ViewModels;
using TLIS_DAL.ViewModels.BaseBUDTOs;
using TLIS_DAL.ViewModels.CivilWithLegsDTOs;
using TLIS_DAL.ViewModels.DynamicAttDTOs;
using TLIS_DAL.ViewModels.DynamicAttInstValueDTOs;
using TLIS_DAL.ViewModels.ItemConnectToDTOs;
using TLIS_DAL.ViewModels.MW_BUDTOs;
using TLIS_DAL.ViewModels.MW_BULibraryDTOs;
using TLIS_DAL.ViewModels.MW_DishDTOs;
using TLIS_DAL.ViewModels.MW_DishLbraryDTOs;
using TLIS_DAL.ViewModels.MW_ODUDTOs;
using TLIS_DAL.ViewModels.Mw_OtherDTOs;
using TLIS_DAL.ViewModels.MW_OtherLibraryDTOs;
using TLIS_DAL.ViewModels.MW_PortDTOs;
using TLIS_DAL.ViewModels.MW_RFUDTOs;
using TLIS_DAL.ViewModels.OduInstallationTypeDTOs;
using TLIS_DAL.ViewModels.OwnerDTOs;
using TLIS_DAL.ViewModels.PolarityOnLocationDTOs;
using TLIS_DAL.ViewModels.RepeaterTypeDTOs;
using TLIS_DAL.ViewModels.RuleDTOs;
using TLIS_DAL.ViewModels.TablesHistoryDTOs;
using TLIS_DAL.ViewModels.WorkflowHistoryDTOs;
using TLIS_Repository.Base;
using TLIS_Service.IService;
using static TLIS_Service.Helpers.Constants;
using TLIS_DAL.ViewModels.SideArmDTOs;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using OfficeOpenXml.FormulaParsing.Excel.Functions.Database;
using TLIS_DAL.ViewModels.CivilLoadsDTOs;
using AutoMapper;
using static Microsoft.EntityFrameworkCore.DbLoggerCategory.Database;
using OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering;
using TLIS_DAL.ViewModels.CivilWithoutLegDTOs;
using TLIS_DAL.ViewModels.StructureTypeDTOs;
using TLIS_DAL.ViewModels.AsTypeDTOs;
using TLIS_DAL.ViewModels.BaseCivilWithLegsTypeDTOs;
using TLIS_DAL.ViewModels.BaseTypeDTOs;
using TLIS_DAL.ViewModels.EnforcmentCategoryDTOs;
using TLIS_DAL.ViewModels.GuyLineTypeDTOs;
using TLIS_DAL.ViewModels.LocationTypeDTOs;
using TLIS_DAL.ViewModels.SupportTypeImplementedDTOs;
using TLIS_DAL.ViewModels.PolarityTypeDTOs;
using System.Data;
using TLIS_DAL.ViewModels.CivilWithLegLibraryDTOs;
using static TLIS_DAL.ViewModels.MW_DishLbraryDTOs.AddMWDishLibraryObject;
using Org.BouncyCastle.Asn1.Cms;
using System.Xml.Linq;
using TLIS_DAL.ViewModels.SectionsLegTypeDTOs;
using static TLIS_DAL.ViewModels.MW_DishLbraryDTOs.EditMWDishLibraryObject;
using TLIS_DAL.ViewModels.MW_ODULibraryDTOs;
using static TLIS_DAL.ViewModels.MW_ODULibraryDTOs.EditMWODULibraryObject;
using TLIS_DAL.ViewModels.ParityDTOs;
using static Dapper.SqlMapper;
using static Org.BouncyCastle.Crypto.Engines.SM2Engine;
using TLIS_DAL.ViewModels.RadioRRUDTOs;
using Nancy.ViewEngines;
using AutoMapper.Execution;

namespace TLIS_Service.Services
{
    public class MWInstService : IMWInstService
    {
        IUnitOfWork _unitOfWork;
        IServiceCollection _services;
        private readonly ApplicationDbContext _dbContext;
        private IMapper _mapper;
        public MWInstService(IUnitOfWork unitOfWork, IServiceCollection services, ApplicationDbContext dbContext, IMapper mapper)
        {
            _unitOfWork = unitOfWork;
            _services = services;
            _dbContext = dbContext;
            _mapper = mapper;
        }
        //Function take 3 parameters TableName, LibraryID, SiteCode
        //First get tabe name Entity by TableName
        //Second specify the table i deal with depened on TableName
        //Get Library by Id 
        //Get library activated attributes with values from selected library
        //Get activated attributes for installation table
        //Get dynamic attributes for table name
        //Get related tables
        public Response<GetForAddMWDishInstallationObject> GetAttForAddMWDishInstallation(string TableName, int LibraryID, string SiteCode)
        {
            try
            {
                TLItablesNames TableNameEntity = _unitOfWork.TablesNamesRepository.GetWhereFirst(x =>
                    x.TableName == TableName);

                GetForAddMWDishInstallationObject objectInst = new GetForAddMWDishInstallationObject();
                List<BaseInstAttViews> ListAttributesActivated = new List<BaseInstAttViews>();

                EditMWDishLibraryAttributes mwDishLibrary = _mapper.Map<EditMWDishLibraryAttributes>(_unitOfWork.MW_DishLibraryRepository
                    .GetIncludeWhereFirst(x => x.Id == LibraryID, x => x.asType, x => x.polarityType));
                if (mwDishLibrary != null)
                {
                    List<BaseInstAttViews> LibraryAttributes = _unitOfWork.AttributeActivatedRepository
                        .GetAttributeActivatedGetForAdd(TablesNames.TLImwDishLibrary.ToString(), mwDishLibrary, null).ToList();

                    var asType_name = LibraryAttributes.FirstOrDefault(item => item.Label.ToLower() == "astype_name");
                    if (asType_name != null)
                    {
                        asType_name.Options = _mapper.Map<List<AsTypeViewModel>>(_unitOfWork.AsTypeRepository.GetWhere(x => !x.Delete && !x.Disable).ToList());
                        asType_name.Value = _unitOfWork.AsTypeRepository != null && mwDishLibrary.asTypeId != null ?
                            _mapper.Map<AsTypeViewModel>(_unitOfWork.AsTypeRepository.GetWhereFirst(x => x.Id == mwDishLibrary.asTypeId)) :
                            null;
                    }
                    var polaritytype_name = LibraryAttributes.FirstOrDefault(item => item.Label.ToLower() == "polaritytype_name");
                    if (polaritytype_name != null)
                    {
                        polaritytype_name.Options = _mapper.Map<List<PolarityTypeViewModel>>(_unitOfWork.PolarityTypeRepository.GetWhere(x => !x.Delete && !x.Disable).ToList());
                        polaritytype_name.Value = _unitOfWork.PolarityTypeRepository != null && mwDishLibrary.polarityTypeId != null ?
                            _mapper.Map<PolarityTypeViewModel>(_unitOfWork.PolarityTypeRepository.GetWhereFirst(x => x.Id == mwDishLibrary.polarityTypeId)) :
                            null;
                    }

                    List<BaseInstAttViews> LogisticalAttributes = _mapper.Map<List<BaseInstAttViews>>(_unitOfWork.LogistcalRepository
                        .GetLogisticals(TablePartName.MW.ToString(), Helpers.Constants.TablesNames.TLImwDishLibrary.ToString(), mwDishLibrary.Id).ToList());

                    LibraryAttributes.AddRange(LogisticalAttributes);

                    objectInst.LibraryAttribute = LibraryAttributes;

                    ListAttributesActivated = _unitOfWork.AttributeActivatedRepository.
                        GetInstAttributeActivatedGetForAdd(LoadSubType.TLImwDish.ToString(), null, "DishName", "InstallationPlaceId", "MwDishLibraryId", "EquivalentSpace").ToList();

                    BaseInstAttViews NameAttribute = ListAttributesActivated.FirstOrDefault(x => x.Key.ToLower() == "DishName".ToLower());
                    if (NameAttribute != null)
                    {
                        BaseInstAttViews Swap = ListAttributesActivated[0];
                        ListAttributesActivated[ListAttributesActivated.IndexOf(NameAttribute)] = Swap;
                        ListAttributesActivated[0] = NameAttribute;
                    }


                    Dictionary<string, Func<IEnumerable<object>>> repositoryMethods = new Dictionary<string, Func<IEnumerable<object>>>
                    {
                        { "polarityonlocation_name", () => _mapper.Map<List<PolarityOnLocationViewModel>>(_unitOfWork.PolarityOnLocationRepository.GetWhere(x => !x.Deleted && !x.Disable).ToList())},
                        { "repeatertype_name", () => _mapper.Map<List<RepeaterTypeViewModel>>(_unitOfWork.RepeaterTypeRepository.GetWhere(x => !x.Deleted && !x.Disable).ToList()) },
                        { "itemconnectto_name", () => _mapper.Map<List<ItemConnectToViewModel>>(_unitOfWork.ItemConnectToRepository.GetWhere(x => !x.Deleted && !x.Disable).ToList()) },
                        { "owner_name", () => _mapper.Map<List<OwnerViewModel>>(_unitOfWork.OwnerRepository.GetWhere(x => !x.Deleted && !x.Disable).ToList()) },
                        { "mw_link_name", () => _mapper.Map<List<OwnerViewModel>>(_unitOfWork.CivilLoadsRepository.GetWhereAndInclude
                        (x=>!x.Dismantle && x.SiteCode==SiteCode&& x.allLoadInstId !=null && x.allLoadInst.mwDishId !=null,x=>x.allLoadInst,x=>x.allLoadInst.mwDish).Select(x=>x.allLoadInst.mwDish).ToList()) },

                    };

                    ListAttributesActivated = ListAttributesActivated
                        .Select(FKitem =>
                        {
                            if (repositoryMethods.ContainsKey(FKitem.Label.ToLower()))
                            {
                                FKitem.Options = repositoryMethods[FKitem.Label.ToLower()]().ToList();
                            }
                            else
                            {
                                FKitem.Options = new object[0];
                            }

                            return FKitem;
                        })
                        .ToList();

                    objectInst.InstallationAttributes = ListAttributesActivated;
                    objectInst.CivilLoads = _unitOfWork.AttributeActivatedRepository
                     .GetInstAttributeActivatedGetForAdd(TablesNames.TLIcivilLoads.ToString(), null, null, "allLoadInstId", "Dismantle", "SiteCode", "legId",
                         "Leg2Id", "sideArmId", "allCivilInstId", "civilSteelSupportCategoryId").ToList();

                    objectInst.DynamicAttribute = _unitOfWork.DynamicAttRepository
.GetDynamicInstAttInst(TableNameEntity.Id, null);
                    return new Response<GetForAddMWDishInstallationObject>(true, objectInst, null, null, (int)Helpers.Constants.ApiReturnCode.fail);
                }
                else
                {
                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "this mwdishlibrary is not found", (int)Helpers.Constants.ApiReturnCode.fail);
                }
                return new Response<GetForAddMWDishInstallationObject>(false, null, null, null, (int)Helpers.Constants.ApiReturnCode.fail);
            }
            catch (Exception err)
            {
                return new Response<GetForAddMWDishInstallationObject>(false, null, null, err.Message, (int)ApiReturnCode.fail);
            }
        }
        public Response<GetForAddMWDishInstallationObject> GetAttForAddMWODUInstallation(string TableName, int LibraryID, string SiteCode)
        {
            try
            {
                TLItablesNames TableNameEntity = _unitOfWork.TablesNamesRepository.GetWhereFirst(x =>
                    x.TableName == TableName);

                GetForAddMWDishInstallationObject objectInst = new GetForAddMWDishInstallationObject();
                List<BaseInstAttViews> ListAttributesActivated = new List<BaseInstAttViews>();

                EditMWODULibraryAttributes mwODULibrary = _mapper.Map<EditMWODULibraryAttributes>(_unitOfWork.MW_ODULibraryRepository
                    .GetIncludeWhereFirst(x => x.Id == LibraryID, x => x.parity));
                if (mwODULibrary != null)
                {
                    List<BaseInstAttViews> LibraryAttributes = _unitOfWork.AttributeActivatedRepository
                        .GetAttributeActivatedGetForAdd(TablesNames.TLImwODULibrary.ToString(), mwODULibrary, null).ToList();

                    var asType_name = LibraryAttributes.FirstOrDefault(item => item.Label.ToLower() == "parity_name");
                    if (asType_name != null)
                    {
                        asType_name.Options = _mapper.Map<List<ParityViewModel>>(_unitOfWork.ParityRepository.GetWhere(x => !x.Delete && !x.Disable).ToList());
                        asType_name.Value = _unitOfWork.ParityRepository != null && mwODULibrary.parityId != null ?
                            _mapper.Map<ParityViewModel>(_unitOfWork.ParityRepository.GetWhereFirst(x => x.Id == mwODULibrary.parityId)) :
                            null;
                    }
                    List<BaseInstAttViews> LogisticalAttributes = _mapper.Map<List<BaseInstAttViews>>(_unitOfWork.LogistcalRepository
                        .GetLogisticals(TablePartName.MW.ToString(), Helpers.Constants.TablesNames.TLImwDishLibrary.ToString(), mwODULibrary.Id).ToList());

                    LibraryAttributes.AddRange(LogisticalAttributes);

                    objectInst.LibraryAttribute = LibraryAttributes;

                    ListAttributesActivated = _unitOfWork.AttributeActivatedRepository.
                        GetInstAttributeActivatedGetForAdd(LoadSubType.TLImwODU.ToString(), null, "Name", "OduInstallationTypeId", "MwODULibraryId", "EquivalentSpace", "Mw_DishId").ToList();
                    var xx = _unitOfWork.CivilLoadsRepository.GetIncludeWhere(x => !x.Dismantle && x.allLoadInstId != null && x.allLoadInst.mwDishId != null
                            && x.SiteCode.ToLower() == SiteCode.ToLower(), x => x.allLoadInst, x => x.allLoadInst.mwDish).Select(x => x.allLoadInst.mwDish).ToList();
                    Dictionary<string, Func<IEnumerable<object>>> repositoryMethods = new Dictionary<string, Func<IEnumerable<object>>>
                    {
                         { "owner_name", () => _mapper.Map<List<OwnerViewModel>>(_unitOfWork.OwnerRepository.GetWhere(x => !x.Deleted && !x.Disable).ToList()) },

                    };

                    ListAttributesActivated = ListAttributesActivated
                        .Select(FKitem =>
                        {
                            if (repositoryMethods.ContainsKey(FKitem.Label.ToLower()))
                            {
                                FKitem.Options = repositoryMethods[FKitem.Label.ToLower()]().ToList();
                            }
                            else
                            {
                                FKitem.Options = new object[0];
                            }

                            return FKitem;
                        })
                        .ToList();

                    objectInst.InstallationAttributes = ListAttributesActivated;
                    objectInst.CivilLoads = _unitOfWork.AttributeActivatedRepository
                     .GetInstAttributeActivatedGetForAdd(TablesNames.TLIcivilLoads.ToString(), null, null, "allLoadInstId", "Dismantle", "SiteCode", "legId",
                         "Leg2Id", "sideArmId", "allCivilInstId", "civilSteelSupportCategoryId").ToList();

                    objectInst.DynamicAttribute = _unitOfWork.DynamicAttRepository
                   .GetDynamicInstAttInst(TableNameEntity.Id, null);

                    return new Response<GetForAddMWDishInstallationObject>(true, objectInst, null, null, (int)Helpers.Constants.ApiReturnCode.fail);
                }
                else
                {
                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "this mwdishlibrary is not found", (int)Helpers.Constants.ApiReturnCode.fail);
                }
                return new Response<GetForAddMWDishInstallationObject>(false, null, null, null, (int)Helpers.Constants.ApiReturnCode.fail);
            }
            catch (Exception err)
            {
                return new Response<GetForAddMWDishInstallationObject>(false, null, null, err.Message, (int)ApiReturnCode.fail);
            }
        }
        public Response<ObjectInstAtts> GetAttForAdd(string TableName, int LibraryID, string SiteCode)
        {
            try
            {
                TLItablesNames TableNameEntity = _unitOfWork.TablesNamesRepository.GetWhereFirst(x =>
                    x.TableName == TableName);

                ObjectInstAtts objectInst = new ObjectInstAtts();
                List<BaseInstAttView> ListAttributesActivated = new List<BaseInstAttView>();

                if (LoadSubType.TLImwBU.ToString() == TableName)
                {
                    MW_BULibraryViewModel mwBULibrary = _mapper.Map<MW_BULibraryViewModel>(_unitOfWork.MW_BULibraryRepository
                        .GetIncludeWhereFirst(x => x.Id == LibraryID, x => x.diversityType));

                    List<BaseAttView> LibraryAttributes = _unitOfWork.AttributeActivatedRepository
                        .GetAttributeActivated(TablesNames.TLImwBULibrary.ToString(), mwBULibrary, null).ToList();

                    foreach (BaseAttView LibraryAttribute in LibraryAttributes)
                    {
                        if (LibraryAttribute.DataType.ToLower() == "list")
                        {
                            LibraryAttribute.Value = mwBULibrary.GetType().GetProperties()
                                .FirstOrDefault(x => x.Name.ToLower() == LibraryAttribute.Label.ToLower()).GetValue(mwBULibrary);
                        }
                    }

                    List<BaseAttView> LogisticalAttributes = _mapper.Map<List<BaseAttView>>(_unitOfWork.LogistcalRepository
                        .GetLogistical(TablePartName.MW.ToString(), Helpers.Constants.TablesNames.TLImwBULibrary.ToString(), mwBULibrary.Id).ToList());

                    LibraryAttributes.AddRange(LogisticalAttributes);

                    objectInst.LibraryActivatedAttributes = LibraryAttributes;

                    ListAttributesActivated = _unitOfWork.AttributeActivatedRepository.
                        GetInstAttributeActivated(LoadSubType.TLImwBU.ToString(), null, "Name", "InstallationPlaceId", "MwBULibraryId" /*, "EquivalentSpace").ToList();

                    BaseInstAttView NameAttribute = ListAttributesActivated.FirstOrDefault(x => x.Key.ToLower() == "Name".ToLower());
                    if (NameAttribute != null)
                    {
                        BaseInstAttView Swap = ListAttributesActivated[0];
                        ListAttributesActivated[ListAttributesActivated.IndexOf(NameAttribute)] = Swap;
                        ListAttributesActivated[0] = NameAttribute;
                    }
                    foreach (BaseInstAttView FKitem in ListAttributesActivated)
                    {
                        if (FKitem.Desc.ToLower() == "tlibasebu")
                            FKitem.Value = _mapper.Map<List<BaseBUViewModel>>(_unitOfWork.BaseBURepository.GetWhere(x => !x.Disable && !x.Deleted).ToList());

                        else if (FKitem.Desc.ToLower() == "tliowner")
                            FKitem.Value = _mapper.Map<List<OwnerViewModel>>(_unitOfWork.OwnerRepository.GetWhere(x => !x.Disable && !x.Deleted).ToList());

                        else if (FKitem.Desc.ToLower() == "tlimwdish")
                        {
                            var Dish = _unitOfWork.CivilLoadsRepository.GetIncludeWhere(x => x.SiteCode == SiteCode && !x.Dismantle && x.allLoadInstId != null, x => x.allLoadInst).Select(x => x.allLoadInst.mwDishId).ToList();

                            List<TLImwDish> mwdishlist = new List<TLImwDish>();
                            foreach (var item in Dish)
                            {
                                if (item != null)
                                {
                                    var dishname = _dbContext.TLImwDish.FirstOrDefault(x => x.Id == item);
                                    mwdishlist.Add(dishname);
                                }
                            }
                            FKitem.Value = _mapper.Map<List<MW_DishGetForAddViewModel>>(mwdishlist);

                        }
                        else if (FKitem.Desc.ToLower() == "tlimwport")
                            FKitem.Value = _mapper.Map<List<MW_PortViewModel>>(_unitOfWork.MW_PortRepository.GetWhere(x => x.Port_Type == 2).ToList());
                    }
                }
                else if (LoadSubType.TLImwODU.ToString() == TableName)
                {
                    MW_ODULibraryViewModel mwODULibrary = _mapper.Map<MW_ODULibraryViewModel>(_unitOfWork.MW_ODULibraryRepository
                        .GetIncludeWhereFirst(x => x.Id == LibraryID, x => x.parity));

                    List<BaseAttView> LibraryAttributes = _unitOfWork.AttributeActivatedRepository
                        .GetAttributeActivated(TablesNames.TLImwODULibrary.ToString(), mwODULibrary, null).ToList();

                    foreach (BaseAttView LibraryAttribute in LibraryAttributes)
                    {
                        if (LibraryAttribute.DataType.ToLower() == "list")
                        {
                            LibraryAttribute.Value = mwODULibrary.GetType().GetProperties()
                                .FirstOrDefault(x => x.Name.ToLower() == LibraryAttribute.Label.ToLower()).GetValue(mwODULibrary);
                        }
                    }

                    List<BaseAttView> LogisticalAttributes = _mapper.Map<List<BaseAttView>>(_unitOfWork.LogistcalRepository
                        .GetLogistical(TablePartName.MW.ToString(), Helpers.Constants.TablesNames.TLImwODULibrary.ToString(), mwODULibrary.Id).ToList());

                    LibraryAttributes.AddRange(LogisticalAttributes);

                    objectInst.LibraryActivatedAttributes = LibraryAttributes;

                    ListAttributesActivated = _unitOfWork.AttributeActivatedRepository.
                        GetInstAttributeActivated(LoadSubType.TLImwODU.ToString(), null, "Name", "MwODULibraryId", "OduInstallationTypeId"/*, "EquivalentSpace"*/).ToList();

                    BaseInstAttView NameAttribute = ListAttributesActivated.FirstOrDefault(x => x.Key.ToLower() == "Name".ToLower());
                    if (NameAttribute != null)
                    {
                        BaseInstAttView Swap = ListAttributesActivated[0];
                        ListAttributesActivated[ListAttributesActivated.IndexOf(NameAttribute)] = Swap;
                        ListAttributesActivated[0] = NameAttribute;
                    }
                    foreach (BaseInstAttView FKitem in ListAttributesActivated)
                    {
                        if (FKitem.Desc.ToLower() == "tliowner")
                            FKitem.Value = _mapper.Map<List<OwnerViewModel>>(_unitOfWork.OwnerRepository.GetWhere(x => !x.Disable && !x.Deleted).ToList());

                        else if (FKitem.Desc.ToLower() == "tlimwdish")
                        {
                            List<int> UsedDishesIds = _unitOfWork.MW_ODURepository.GetWhere(x => x.Mw_DishId != null).Select(x => x.Mw_DishId).ToList();

                            List<MW_DishGetForAddViewModel> MW_Dishes = _mapper.Map<List<MW_DishGetForAddViewModel>>(_unitOfWork.CivilLoadsRepository
                                .GetIncludeWhere(x => !x.Dismantle &&
                                    (x.allLoadInstId != null ? x.allLoadInst.mwDishId != null : false) &&
                                    !UsedDishesIds.Contains(x.allLoadInst.mwDishId.Value), x => x.allLoadInst, x => x.allLoadInst.mwDish)
                                .Select(x => x.allLoadInst.mwDish).ToList());

                            FKitem.Value = _mapper.Map<List<MW_DishGetForAddViewModel>>(MW_Dishes);
                        }
                    }

                }
                else if (LoadSubType.TLImwRFU.ToString() == TableName)
                {
                    MW_RFULibraryViewModel mwRFULibrary = _mapper.Map<MW_RFULibraryViewModel>(_unitOfWork.MW_RFULibraryRepository
                        .GetIncludeWhereFirst(x => x.Id == LibraryID, x => x.boardType, x => x.diversityType));

                    List<BaseAttView> LibraryAttributes = _unitOfWork.AttributeActivatedRepository
                        .GetAttributeActivated(TablesNames.TLImwRFULibrary.ToString(), mwRFULibrary, null).ToList();

                    foreach (BaseAttView LibraryAttribute in LibraryAttributes)
                    {
                        if (LibraryAttribute.DataType.ToLower() == "list")
                        {
                            LibraryAttribute.Value = mwRFULibrary.GetType().GetProperties()
                                .FirstOrDefault(x => x.Name.ToLower() == LibraryAttribute.Label.ToLower()).GetValue(mwRFULibrary);
                        }
                    }

                    List<BaseAttView> LogisticalAttributes = _mapper.Map<List<BaseAttView>>(_unitOfWork.LogistcalRepository
                        .GetLogistical(TablePartName.MW.ToString(), Helpers.Constants.TablesNames.TLImwRFULibrary.ToString(), mwRFULibrary.Id).ToList());

                    LibraryAttributes.AddRange(LogisticalAttributes);

                    objectInst.LibraryActivatedAttributes = LibraryAttributes;

                    ListAttributesActivated = _unitOfWork.AttributeActivatedRepository.
                        GetInstAttributeActivated(LoadSubType.TLImwRFU.ToString(), null, "MwRFULibraryId", "MwPortId"/*, "EquivalentSpace"*/).ToList();

                    BaseInstAttView NameAttribute = ListAttributesActivated.FirstOrDefault(x => x.Key.ToLower() == "Name".ToLower());
                    if (NameAttribute != null)
                    {
                        BaseInstAttView Swap = ListAttributesActivated[0];
                        ListAttributesActivated[ListAttributesActivated.IndexOf(NameAttribute)] = Swap;
                        ListAttributesActivated[0] = NameAttribute;
                    }
                    foreach (BaseInstAttView FKitem in ListAttributesActivated)
                    {
                        if (FKitem.Desc.ToLower() == "tliowner")
                            FKitem.Value = _mapper.Map<List<OwnerViewModel>>(_unitOfWork.OwnerRepository.GetWhere(x => !x.Disable && !x.Deleted).ToList());
                    }
                }
                else if (LoadSubType.TLImwDish.ToString() == TableName)
                {
                    MW_DishLibraryViewModel mwDishLibrary = _mapper.Map<MW_DishLibraryViewModel>(_unitOfWork.MW_DishLibraryRepository
                        .GetIncludeWhereFirst(x => x.Id == LibraryID, x => x.asType, x => x.polarityType));

                    List<BaseAttView> LibraryAttributes = _unitOfWork.AttributeActivatedRepository
                        .GetAttributeActivated(TablesNames.TLImwDishLibrary.ToString(), mwDishLibrary, null).ToList();

                    foreach (BaseAttView LibraryAttribute in LibraryAttributes)
                    {
                        if (LibraryAttribute.DataType.ToLower() == "list")
                        {
                            LibraryAttribute.Value = mwDishLibrary.GetType().GetProperties()
                                .FirstOrDefault(x => x.Name.ToLower() == LibraryAttribute.Label.ToLower()).GetValue(mwDishLibrary);
                        }
                    }

                    List<BaseAttView> LogisticalAttributes = _mapper.Map<List<BaseAttView>>(_unitOfWork.LogistcalRepository
                        .GetLogistical(TablePartName.MW.ToString(), Helpers.Constants.TablesNames.TLImwDishLibrary.ToString(), mwDishLibrary.Id).ToList());

                    LibraryAttributes.AddRange(LogisticalAttributes);

                    objectInst.LibraryActivatedAttributes = LibraryAttributes;

                    ListAttributesActivated = _unitOfWork.AttributeActivatedRepository.
                        GetInstAttributeActivated(LoadSubType.TLImwDish.ToString(), null, "DishName", "InstallationPlaceId", "MwDishLibraryId"/*, "EquivalentSpace"*/).ToList();

                    BaseInstAttView NameAttribute = ListAttributesActivated.FirstOrDefault(x => x.Key.ToLower() == "DishName".ToLower());
                    if (NameAttribute != null)
                    {
                        BaseInstAttView Swap = ListAttributesActivated[0];
                        ListAttributesActivated[ListAttributesActivated.IndexOf(NameAttribute)] = Swap;
                        ListAttributesActivated[0] = NameAttribute;
                    }

                    foreach (BaseInstAttView FKitem in ListAttributesActivated)
                    {
                        if (FKitem.Desc.ToLower() == "tliitemconnectto")
                            FKitem.Value = _mapper.Map<List<ItemConnectToViewModel>>(_unitOfWork.ItemConnectToRepository.GetWhere(x => !x.Deleted && !x.Disable).ToList());

                        else if (FKitem.Desc.ToLower() == "tlipolarityonlocation")
                            FKitem.Value = _mapper.Map<List<PolarityOnLocationViewModel>>(_unitOfWork.PolarityOnLocationRepository.GetWhere(x => !x.Deleted && x.Disable).ToList());

                        else if (FKitem.Desc.ToLower() == "tlirepeatertype")
                            FKitem.Value = _mapper.Map<List<RepeaterTypeViewModel>>(_unitOfWork.RepeaterTypeRepository.GetWhere(x => !x.Deleted && !x.Disable).ToList());

                        else if (FKitem.Desc.ToLower() == "tliowner")
                            FKitem.Value = _mapper.Map<List<OwnerViewModel>>(_unitOfWork.OwnerRepository.GetWhere(x => !x.Deleted && !x.Disable).ToList());
                    }
                }
                else if (LoadSubType.TLImwOther.ToString() == TableName)
                {
                    TLImwOtherLibrary mwOtherLibrary = _unitOfWork.MW_OtherLibraryRepository.GetByID(LibraryID);

                    List<BaseAttView> LibraryAttributes = _unitOfWork.AttributeActivatedRepository
                        .GetAttributeActivated(TablesNames.TLImwOtherLibrary.ToString(), mwOtherLibrary, null).ToList();

                    List<BaseAttView> LogisticalAttributes = _mapper.Map<List<BaseAttView>>(_unitOfWork.LogistcalRepository
                        .GetLogistical(TablePartName.MW.ToString(), Helpers.Constants.TablesNames.TLImwOtherLibrary.ToString(), mwOtherLibrary.Id).ToList());

                    LibraryAttributes.AddRange(LogisticalAttributes);

                    objectInst.LibraryActivatedAttributes = LibraryAttributes;

                    ListAttributesActivated = _unitOfWork.AttributeActivatedRepository.
                        GetInstAttributeActivated(LoadSubType.TLImwOther.ToString(), null, "mwOtherLibraryId", /*"EquivalentSpace",*/
                            "InstallationPlaceId").ToList();

                    BaseInstAttView NameAttribute = ListAttributesActivated.FirstOrDefault(x => x.Key.ToLower() == "Name".ToLower());
                    if (NameAttribute != null)
                    {
                        BaseInstAttView Swap = ListAttributesActivated[0];
                        ListAttributesActivated[ListAttributesActivated.IndexOf(NameAttribute)] = Swap;
                        ListAttributesActivated[0] = NameAttribute;
                    }
                }

                List<KeyValuePair<string, List<DropDownListFilters>>> RelatedTables = _unitOfWork.CivilLoadsRepository.GetRelatedTables(SiteCode);
                objectInst.RelatedTables = RelatedTables;

                objectInst.AttributesActivated = ListAttributesActivated;

                objectInst.CivilLoads = _unitOfWork.AttributeActivatedRepository.
                    GetInstAttributeActivated(TablesNames.TLIcivilLoads.ToString(), null, "allLoadInstId", "Dismantle", "SiteCode", "legId", "Leg2Id",
                        "sideArmId", "allCivilInstId", "civilSteelSupportCategoryId");

                IEnumerable<DynaminAttInstViewModel> DynamicAttributesWithoutValue = _unitOfWork.DynamicAttRepository
                        .GetDynamicInstAtts(TableNameEntity.Id, null);

                foreach (DynaminAttInstViewModel DynamicAttribute in DynamicAttributesWithoutValue)
                {
                    TLIdynamicAtt DynamicAttributeEntity = _unitOfWork.DynamicAttRepository.GetByID(DynamicAttribute.Id);

                    if (!string.IsNullOrEmpty(DynamicAttributeEntity.DefaultValue))
                    {
                        if (DynamicAttribute.DataType.ToLower() == "string".ToLower())
                            DynamicAttribute.ValueString = DynamicAttributeEntity.DefaultValue;

                        else if (DynamicAttribute.DataType.ToLower() == "int".ToLower())
                            DynamicAttribute.ValueDouble = int.Parse(DynamicAttributeEntity.DefaultValue);

                        else if (DynamicAttribute.DataType.ToLower() == "double".ToLower())
                            DynamicAttribute.ValueDouble = double.Parse(DynamicAttributeEntity.DefaultValue);

                        else if (DynamicAttribute.DataType.ToLower() == "boolean".ToLower())
                            DynamicAttribute.ValueBoolean = bool.Parse(DynamicAttributeEntity.DefaultValue);

                        else if (DynamicAttribute.DataType.ToLower() == "datetime".ToLower())
                            DynamicAttribute.ValueDateTime = DateTime.Parse(DynamicAttributeEntity.DefaultValue);
                    }
                    else
                    {
                        DynamicAttribute.ValueString = " ".Split(' ')[0];
                    }
                }

                objectInst.DynamicAtts = DynamicAttributesWithoutValue;

                return new Response<ObjectInstAtts>(objectInst);
            }
            catch (Exception err)
            {
                return new Response<ObjectInstAtts>(true, null, null, err.Message, (int)ApiReturnCode.fail);
            }
        }
        public Response<List<MW_PortViewModel>> GetPortCascadedByBUId(int BUId, int? MainBUId)
        {
            //List<int> UsedPorts = _unitOfWork.MW_BURepository
            //    .GetWhere(x => x.PortCascadeId > 0 && (MainBUId != null ? x.Id != MainBUId : true)).Select(x => x.PortCascadeId).ToList();

            //List<MW_PortViewModel> Ports = _mapper.Map<List<MW_PortViewModel>>(_unitOfWork.MW_PortRepository
            //    .GetIncludeWhere(x => x.MwBUId == BUId && !UsedPorts.Contains(x.Id), x => x.MwBU, x => x.MwBULibrary).ToList());

            return new Response<List<MW_PortViewModel>>(null);
        }
        //Function take 3 parameters MWInstallationViewModel, TableName, SiteCode
        //First get table name Entity depened on TableName
        //Second specify the table i deal with depened on TableName
        //Map MWInstallationViewModel obj to ViewModel
        //Map ViewModel to Entity
        //Apply bussiness rules
        //Add Entity to database
        //Add relation between load and civil to TLIcivilLoads table
        //Add Dynamic Inst attributes
        #region Helper Methods..
        public void LoopForPath(List<string> Path, int StartIndex, ApplicationDbContext _dbContext, object Value, List<object> OutPutIds)
        {
            if (StartIndex == Path.Count())
            {
                OutPutIds.Add(Value);
            }
            else
            {
                List<object> TableRecords = _mapper.Map<List<object>>(_dbContext.GetType()
                    .GetProperties().FirstOrDefault(x => x.Name.ToLower() == Path[StartIndex].ToLower())
                    .GetValue(_dbContext, null))
                        .Where(x => x.GetType().GetProperty(Path[StartIndex + 1]).GetValue(x, null) != null ?
                            x.GetType().GetProperty(Path[StartIndex + 1]).GetValue(x, null).ToString().ToLower() == Value.ToString().ToLower() : false).ToList();

                foreach (object Record in TableRecords)
                {
                    // The New Value..
                    object PrimaryKeyValue = Record.GetType().GetProperties().FirstOrDefault(x => x.Name.ToLower() == Path[StartIndex + 2].ToLower()).GetValue(Record, null);

                    if (StartIndex + 3 < Path.Count())
                        LoopForPath(Path, StartIndex + 3, _dbContext, PrimaryKeyValue, OutPutIds);

                    else if (StartIndex + 3 == Path.Count())
                        OutPutIds.Add(PrimaryKeyValue);
                }
            }
        }
        public List<object> GetRecordsIds(string MainTableName, AddInstRuleViewModel Rule)
        {
            string SDTableName = Rule.TableName;
            string Operation = _unitOfWork.OperationRepository.GetByID(Rule.OperationId.Value).Name;
            object Value = new object();

            string DataType = "";

            if (Rule.OperationValueBoolean != null)
            {
                DataType = "Bool";
                Value = Rule.OperationValueBoolean;
            }
            else if (Rule.OperationValueDateTime != null)
            {
                DataType = "DateTime";
                Value = Rule.OperationValueDateTime;
            }
            else if (Rule.OperationValueDouble != null)
            {
                DataType = "Double";
                Value = Rule.OperationValueDouble;
            }
            else if (!string.IsNullOrEmpty(Rule.OperationValueString))
            {
                DataType = "String";
                Value = Rule.OperationValueString;
            }

            List<object> OutPutIds = new List<object>();

            PathToCheckDependencyValidation Item = (PathToCheckDependencyValidation)Enum.Parse(typeof(PathToCheckDependencyValidation),
                MainTableName + SDTableName);

            List<string> Path = GetEnumDescription(Item).Split(" ").ToList();

            if (Path[0].ToLower() == MainTableName.ToLower() &&
                Path[1].ToLower() == SDTableName.ToLower())
            {
                List<object> TableRecords = new List<object>();
                if (Rule.attributeActivatedId != null && !Rule.IsDynamic)
                {
                    string AttributeName = _unitOfWork.AttributeActivatedRepository
                        .GetByID(Rule.attributeActivatedId.Value).Key;

                    TableRecords = _mapper.Map<List<object>>(_dbContext.GetType().GetProperty(SDTableName)
                        .GetValue(_dbContext, null)).Where(x => x.GetType().GetProperty(AttributeName).GetValue(x, null) != null ? (Operation == ">" ?
                            (DataType.ToLower() == "DateTime".ToLower() ?
                                Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), Value) == 1 :
                            DataType.ToLower() == "Double".ToLower() ?
                                Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), Value) == 1 : false) :
                        Operation == ">=" ?
                            (DataType.ToLower() == "DateTime".ToLower() ?
                                (Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), Value) == 1 ||
                                    x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == Value.ToString().ToLower()) :
                            DataType.ToLower() == "Double".ToLower() ?
                                (Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), Value) == 1 ||
                                    x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == Value.ToString().ToLower()) : false) :
                        Operation == "<" ?
                            (DataType.ToLower() == "DateTime".ToLower() ?
                                Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), Value) == -1 :
                            DataType.ToLower() == "Double".ToLower() ?
                                Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), Value) == -1 : false) :
                        Operation == "<=" ?
                            (DataType.ToLower() == "DateTime".ToLower() ?
                                (Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), Value) == -1 ||
                                    x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == Value.ToString().ToLower()) :
                            DataType.ToLower() == "Double".ToLower() ?
                                (Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), Value) == -1 ||
                                    x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == Value.ToString().ToLower()) : false) :
                        Operation == "==" ?
                            x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == Value.ToString().ToLower() :
                        Operation == "!=" ?
                            x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() != Value.ToString().ToLower() : false) : false).ToList();

                    foreach (object Record in TableRecords)
                    {
                        object PrimaryKeyValue = Record.GetType().GetProperty(Path[2]).GetValue(Record, null);

                        LoopForPath(Path, 3, _dbContext, PrimaryKeyValue, OutPutIds);
                    }
                }
                else if (Rule.dynamicAttId != null && Rule.IsDynamic)
                {
                    TLIdynamicAtt DynamicAttribute = _unitOfWork.DynamicAttRepository
                        .GetByID(Rule.dynamicAttId.Value);

                    if (!DynamicAttribute.LibraryAtt)
                    {
                        List<TLIdynamicAttInstValue> DynamicAttValues = new List<TLIdynamicAttInstValue>();

                        if (Rule.OperationValueBoolean != null)
                        {
                            DynamicAttValues = _unitOfWork.DynamicAttInstValueRepository
                                .GetWhere(x => (x.DynamicAttId == Rule.dynamicAttId && !x.disable) &&
                                    (x.ValueBoolean != null ? x.ValueBoolean.ToString().ToLower() == Rule.OperationValueBoolean.ToString().ToLower() : false)).ToList();
                        }
                        else if (Rule.OperationValueDateTime != null)
                        {
                            DynamicAttValues = _unitOfWork.DynamicAttInstValueRepository
                                .GetWhere(x => (x.DynamicAttId == Rule.dynamicAttId && !x.disable) &&
                                    (x.ValueDateTime != null ? x.ValueDateTime.ToString().ToLower() == Rule.OperationValueDateTime.ToString().ToLower() : false)).ToList();
                        }
                        else if (Rule.OperationValueDouble != null)
                        {
                            DynamicAttValues = _unitOfWork.DynamicAttInstValueRepository
                                .GetWhere(x => (x.DynamicAttId == Rule.dynamicAttId && !x.disable) &&
                                    (x.ValueDouble != null ? x.ValueDouble == Rule.OperationValueDouble : false)).ToList();
                        }
                        else if (!string.IsNullOrEmpty(Rule.OperationValueString))
                        {
                            DynamicAttValues = _unitOfWork.DynamicAttInstValueRepository
                               .GetWhere(x => (x.DynamicAttId == Rule.dynamicAttId && !x.disable) &&
                                   (!string.IsNullOrEmpty(x.ValueString) ? x.ValueString.ToLower() == Rule.OperationValueString.ToLower() : false)).ToList();
                        }
                        if (DynamicAttValues != null ? DynamicAttValues.Count() > 0 : false)
                        {
                            TableRecords = _mapper.Map<List<object>>(_dbContext.GetType()
                                .GetProperty(Path[1]).GetValue(_dbContext, null))
                                    .Where(x => DynamicAttValues.FirstOrDefault(y =>
                                        y.InventoryId.ToString() == x.GetType().GetProperty("Id").GetValue(x, null).ToString() ? (
                                            (y.ValueBoolean != null ? (
                                                Operation == "==" ? y.ValueBoolean.ToString().ToLower() == Value.ToString().ToLower() :
                                                Operation == "!=" ? y.ValueBoolean.ToString().ToLower() != Value.ToString().ToLower() : false
                                            ) : false) ||
                                            (y.ValueDateTime != null ? (
                                                Operation == "==" ? y.ValueDateTime.ToString().ToLower() == Value.ToString().ToLower() :
                                                Operation == ">" ? Comparer.DefaultInvariant.Compare(y.ValueDateTime, Value) == 1 :
                                                Operation == ">=" ? (Comparer.DefaultInvariant.Compare(y.ValueDateTime, Value) == 1 ||
                                                    y.ValueDateTime.ToString().ToLower() == Value.ToString().ToLower()) :
                                                Operation == "<" ? Comparer.DefaultInvariant.Compare(y.ValueDateTime, Value) == -1 :
                                                Operation == "<=" ? (Comparer.DefaultInvariant.Compare(y.ValueDateTime, Value) == -1 ||
                                                    y.ValueDateTime.ToString().ToLower() == Value.ToString().ToLower()) :
                                                Operation == "!=" ? y.ValueDateTime.ToString().ToLower() != Value.ToString().ToLower() : false
                                            ) : false) ||
                                            (y.ValueDouble != null ? (
                                                Operation == "==" ? y.ValueDouble.ToString().ToLower() == Value.ToString().ToLower() :
                                                Operation == ">" ? Comparer.DefaultInvariant.Compare(y.ValueDouble, Value) == 1 :
                                                Operation == ">=" ? (Comparer.DefaultInvariant.Compare(y.ValueDouble, Value) == 1 ||
                                                    y.ValueDouble.ToString().ToLower() == Value.ToString().ToLower()) :
                                                Operation == "<" ? Comparer.DefaultInvariant.Compare(y.ValueDouble, Value) == -1 :
                                                Operation == "<=" ? (Comparer.DefaultInvariant.Compare(y.ValueDouble, Value) == -1 ||
                                                    y.ValueDouble.ToString().ToLower() == Value.ToString().ToLower()) :
                                                Operation == "!=" ? y.ValueDouble.ToString().ToLower() != Value.ToString().ToLower() : false
                                            ) : false) ||
                                            (y.ValueString != null ? (
                                                Operation == "==" ? y.ValueString.ToLower() == Value.ToString().ToLower() :
                                                Operation == "!=" ? y.ValueString.ToLower() != Value.ToString().ToLower() : false
                                            ) : false)
                                        ) : false) != null).ToList();

                            foreach (object Record in TableRecords)
                            {
                                object PrimaryKeyValue = Record.GetType().GetProperty(Path[2]).GetValue(Record, null);

                                LoopForPath(Path, 3, _dbContext, PrimaryKeyValue, OutPutIds);
                            }
                        }
                    }
                    else
                    {
                        List<TLIdynamicAttLibValue> DynamicAttValues = new List<TLIdynamicAttLibValue>();

                        if (Rule.OperationValueBoolean != null)
                        {
                            DynamicAttValues = _unitOfWork.DynamicAttLibRepository
                                .GetWhere(x => (x.DynamicAttId == Rule.dynamicAttId && !x.disable) &&
                                    (x.ValueBoolean != null ? x.ValueBoolean.ToString().ToLower() == Rule.OperationValueBoolean.ToString().ToLower() : false)).ToList();
                        }
                        else if (Rule.OperationValueDateTime != null)
                        {
                            DynamicAttValues = _unitOfWork.DynamicAttLibRepository
                                .GetWhere(x => (x.DynamicAttId == Rule.dynamicAttId && !x.disable) &&
                                    (x.ValueDateTime != null ? x.ValueDateTime.ToString().ToLower() == Rule.OperationValueDateTime.ToString().ToLower() : false)).ToList();
                        }
                        else if (Rule.OperationValueDouble != null)
                        {
                            DynamicAttValues = _unitOfWork.DynamicAttLibRepository
                                .GetWhere(x => (x.DynamicAttId == Rule.dynamicAttId && !x.disable) &&
                                    (x.ValueDouble != null ? x.ValueDouble == Rule.OperationValueDouble : false)).ToList();
                        }
                        else if (!string.IsNullOrEmpty(Rule.OperationValueString))
                        {
                            DynamicAttValues = _unitOfWork.DynamicAttLibRepository
                               .GetWhere(x => (x.DynamicAttId == Rule.dynamicAttId && !x.disable) &&
                                   (!string.IsNullOrEmpty(x.ValueString) ? x.ValueString.ToLower() == Rule.OperationValueString.ToLower() : false)).ToList();
                        }
                        if (DynamicAttValues != null ? DynamicAttValues.Count() > 0 : false)
                        {
                            TableRecords = _mapper.Map<List<object>>(_dbContext.GetType()
                                .GetProperty(Path[1]).GetValue(_dbContext, null))
                                    .Where(x => DynamicAttValues.FirstOrDefault(y =>
                                        y.InventoryId.ToString() == x.GetType().GetProperty("Id").GetValue(x, null).ToString() ? (
                                            (y.ValueBoolean != null ? (
                                                Operation == "==" ? y.ValueBoolean.ToString().ToLower() == Value.ToString().ToLower() :
                                                Operation == "!=" ? y.ValueBoolean.ToString().ToLower() != Value.ToString().ToLower() : false
                                            ) : false) ||
                                            (y.ValueDateTime != null ? (
                                                Operation == "==" ? y.ValueDateTime.ToString().ToLower() == Value.ToString().ToLower() :
                                                Operation == ">" ? Comparer.DefaultInvariant.Compare(y.ValueDateTime, Value) == 1 :
                                                Operation == ">=" ? (Comparer.DefaultInvariant.Compare(y.ValueDateTime, Value) == 1 ||
                                                    y.ValueDateTime.ToString().ToLower() == Value.ToString().ToLower()) :
                                                Operation == "<" ? Comparer.DefaultInvariant.Compare(y.ValueDateTime, Value) == -1 :
                                                Operation == "<=" ? (Comparer.DefaultInvariant.Compare(y.ValueDateTime, Value) == -1 ||
                                                    y.ValueDateTime.ToString().ToLower() == Value.ToString().ToLower()) :
                                                Operation == "!=" ? y.ValueDateTime.ToString().ToLower() != Value.ToString().ToLower() : false
                                            ) : false) ||
                                            (y.ValueDouble != null ? (
                                                Operation == "==" ? y.ValueDouble.ToString().ToLower() == Value.ToString().ToLower() :
                                                Operation == ">" ? Comparer.DefaultInvariant.Compare(y.ValueDouble, Value) == 1 :
                                                Operation == ">=" ? (Comparer.DefaultInvariant.Compare(y.ValueDouble, Value) == 1 ||
                                                    y.ValueDouble.ToString().ToLower() == Value.ToString().ToLower()) :
                                                Operation == "<" ? Comparer.DefaultInvariant.Compare(y.ValueDouble, Value) == -1 :
                                                Operation == "<=" ? (Comparer.DefaultInvariant.Compare(y.ValueDouble, Value) == -1 ||
                                                    y.ValueDouble.ToString().ToLower() == Value.ToString().ToLower()) :
                                                Operation == "!=" ? y.ValueDouble.ToString().ToLower() != Value.ToString().ToLower() : false
                                            ) : false) ||
                                            (y.ValueString != null ? (
                                                Operation == "==" ? y.ValueString.ToLower() == Value.ToString().ToLower() :
                                                Operation == "!=" ? y.ValueString.ToLower() != Value.ToString().ToLower() : false
                                            ) : false)
                                        ) : false) != null).ToList();

                            foreach (object Record in TableRecords)
                            {
                                object PrimaryKeyValue = Record.GetType().GetProperty(Path[2]).GetValue(Record, null);

                                LoopForPath(Path, 3, _dbContext, PrimaryKeyValue, OutPutIds);
                            }
                        }
                    }
                }
            }
            OutPutIds = OutPutIds.Distinct().ToList();
            return OutPutIds;
        }
        public string CheckDependencyValidationForMWTypes(object Input, string MWType, string SiteCode)
        {
            if (MWType.ToLower() == TablesNames.TLImwDish.ToString().ToLower())
            {
                string MainTableName = TablesNames.TLImwDish.ToString();
                AddMW_DishViewModel AddInstallationViewModel = _mapper.Map<AddMW_DishViewModel>(Input);

                List<DynamicAttViewModel> DynamicAttributes = _mapper.Map<List<DynamicAttViewModel>>(_unitOfWork.DynamicAttRepository
                    .GetIncludeWhere(x => x.tablesNames.TableName.ToLower() == MainTableName.ToLower() && !x.disable
                        , x => x.tablesNames).ToList());

                foreach (DynamicAttViewModel DynamicAttribute in DynamicAttributes)
                {
                    TLIdependency DynamicAttributeMainDependency = _unitOfWork.DependencieRepository.GetIncludeWhereFirst(x => x.DynamicAttId == DynamicAttribute.Id &&
                        (x.ValueBoolean != null || x.ValueDateTime != null || x.ValueDouble != null || !string.IsNullOrEmpty(x.ValueString)) &&
                            x.OperationId != null, x => x.Operation);

                    if (DynamicAttributeMainDependency == null)
                        continue;

                    List<int> DependencyRows = _unitOfWork.DependencyRowRepository.GetWhere(x => x.DependencyId == DynamicAttributeMainDependency.Id)
                        .Select(x => x.RowId.Value).Distinct().ToList();

                    foreach (int RowId in DependencyRows)
                    {
                        List<TLIrule> Rules = _unitOfWork.RowRuleRepository.GetIncludeWhere(x => x.RowId == RowId && x.Rule.OperationId != null, x => x.Rule, x => x.Rule.tablesNames,
                            x => x.Rule.Operation, x => x.Rule.dynamicAtt, x => x.Rule.attributeActivated).Select(x => x.Rule).ToList();

                        int CheckIfSuccessAllRules = 0;

                        foreach (TLIrule Rule in Rules)
                        {
                            string SDTableName = Rule.tablesNames.TableName;

                            string DataType = "";

                            string Operation = Rule.Operation.Name;
                            object OperationValue = new object();

                            if (Rule.OperationValueBoolean != null)
                            {
                                DataType = "Bool";
                                OperationValue = Rule.OperationValueBoolean;
                            }
                            else if (Rule.OperationValueDateTime != null)
                            {
                                DataType = "DateTime";
                                OperationValue = Rule.OperationValueDateTime;
                            }
                            else if (Rule.OperationValueDouble != null)
                            {
                                DataType = "Double";
                                OperationValue = Rule.OperationValueDouble;
                            }
                            else if (!string.IsNullOrEmpty(Rule.OperationValueString))
                            {
                                DataType = "String";
                                OperationValue = Rule.OperationValueString;
                            }

                            if (MainTableName.ToLower() == SDTableName.ToLower())
                            {
                                object InsertedValue = new object();

                                if (Rule.attributeActivatedId != null)
                                {
                                    string AttributeName = Rule.attributeActivated.Key;

                                    object TestValue = AddInstallationViewModel.GetType().GetProperties()
                                        .FirstOrDefault(x => x.Name.ToLower() == AttributeName.ToLower()).GetValue(AddInstallationViewModel, null);

                                    if (TestValue == null)
                                        break;

                                    if (Rule.OperationValueBoolean != null)
                                        InsertedValue = bool.Parse(TestValue.ToString());

                                    else if (Rule.OperationValueDateTime != null)
                                        InsertedValue = DateTime.Parse(TestValue.ToString());

                                    else if (Rule.OperationValueDouble != null)
                                        InsertedValue = double.Parse(TestValue.ToString());

                                    else if (!string.IsNullOrEmpty(Rule.OperationValueString))
                                        InsertedValue = TestValue.ToString();
                                }
                                else if (Rule.dynamicAttId != null)
                                {
                                    AddDynamicAttInstValueViewModel DynamicObject = AddInstallationViewModel.TLIdynamicAttInstValue
                                        .FirstOrDefault(x => x.DynamicAttId == Rule.dynamicAttId.Value);

                                    if (DynamicObject == null)
                                        break;

                                    if (DynamicObject.ValueBoolean != null)
                                        InsertedValue = DynamicObject.ValueBoolean;

                                    else if (DynamicObject.ValueDateTime != null)
                                        InsertedValue = DynamicObject.ValueDateTime;

                                    else if (DynamicObject.ValueDouble != null)
                                        InsertedValue = DynamicObject.ValueDouble;

                                    else if (!string.IsNullOrEmpty(DynamicObject.ValueString))
                                        InsertedValue = DynamicObject.ValueString;
                                }

                                if (Operation == "==" ? InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower() :
                                    Operation == "!=" ? InsertedValue.ToString().ToLower() != OperationValue.ToString().ToLower() :
                                    Operation == ">" ? Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == 1 :
                                    Operation == ">=" ? (Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == 1 ||
                                        InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower()) :
                                    Operation == "<" ? Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == -1 :
                                    Operation == "<=" ? (Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == -1 ||
                                        InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower()) : false)
                                {
                                    CheckIfSuccessAllRules++;
                                }
                            }
                            else
                            {
                                List<object> TableRecords = new List<object>();
                                if (Rule.attributeActivatedId != null)
                                {
                                    string AttributeName = Rule.attributeActivated.Key;

                                    if (OperationValue != null)
                                        TableRecords = _mapper.Map<List<object>>(_dbContext.GetType().GetProperty(SDTableName)
                                            .GetValue(_dbContext, null)).Where(x => x.GetType().GetProperty(AttributeName).GetValue(x, null) != null ? (Operation == ">" ?
                                               (DataType.ToLower() == "DateTime".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 : false) :
                                            Operation == ">=" ?
                                                (DataType.ToLower() == "DateTime".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 ||
                                                     x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 ||
                                                     x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) : false) :
                                            Operation == "<" ?
                                               (DataType.ToLower() == "DateTime".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 : false) :
                                            Operation == "<=" ?
                                                (DataType.ToLower() == "DateTime".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 ||
                                                     x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 ||
                                                     x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) : false) :
                                            Operation == "==" ?
                                                x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower() :
                                            Operation == "!=" ?
                                                x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() != OperationValue.ToString().ToLower() : false) : false).ToList();
                                }
                                else if (Rule.dynamicAttId != null)
                                {
                                    List<int> DynamicAttValuesInventoryIds = new List<int>();

                                    if (!DynamicAttribute.LibraryAtt)
                                    {
                                        DynamicAttValuesInventoryIds = _unitOfWork.DynamicAttInstValueRepository
                                            .GetWhere(x => (x.DynamicAttId == Rule.dynamicAttId.Value && !x.disable) &&
                                                (Operation == "==" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() == Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() == Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble == Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() == Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == "!=" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() != Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() != Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble != Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() != Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == ">" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime > Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble > Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == ">=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime >= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble >= Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime < Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble < Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime <= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble <= Rule.OperationValueDouble : false)) : false)

                                                ).Select(x => x.InventoryId).ToList();
                                    }
                                    else
                                    {
                                        DynamicAttValuesInventoryIds = _unitOfWork.DynamicAttLibRepository
                                            .GetWhere(x => (x.DynamicAttId == Rule.dynamicAttId && !x.disable) &&
                                                (Operation == "==" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() == Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() == Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble == Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() == Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == "!=" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() != Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() != Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble != Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() != Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == ">" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime > Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble > Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == ">=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime >= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble >= Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime < Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble < Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime <= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble <= Rule.OperationValueDouble : false)) : false)

                                                ).Select(x => x.InventoryId).ToList();
                                    }
                                    if (DynamicAttValuesInventoryIds != null ? DynamicAttValuesInventoryIds.Count() != 0 : false)
                                    {
                                        TableRecords = _mapper.Map<List<object>>(_dbContext.GetType()
                                            .GetProperty(SDTableName).GetValue(_dbContext, null))
                                                .Where(x => DynamicAttValuesInventoryIds.Contains(Convert.ToInt32(x.GetType().GetProperty("Id").GetValue(x, null)))).ToList();
                                    }
                                }

                                AddInstRuleViewModel AddInstRuleViewModel = new AddInstRuleViewModel();
                                if (Rule.dynamicAttId != null)
                                {
                                    AddInstRuleViewModel = new AddInstRuleViewModel
                                    {
                                        dynamicAttId = Rule.dynamicAttId,
                                        IsDynamic = true,
                                        OperationId = Rule.OperationId,
                                        OperationValueBoolean = Rule.OperationValueBoolean,
                                        OperationValueDateTime = Rule.OperationValueDateTime,
                                        OperationValueDouble = Rule.OperationValueDouble,
                                        OperationValueString = Rule.OperationValueString,
                                        TableName = Rule.tablesNames.TableName
                                    };
                                }
                                else if (Rule.attributeActivatedId != null)
                                {
                                    AddInstRuleViewModel = new AddInstRuleViewModel
                                    {
                                        attributeActivatedId = Rule.attributeActivatedId,
                                        IsDynamic = false,
                                        OperationId = Rule.OperationId,
                                        OperationValueBoolean = Rule.OperationValueBoolean,
                                        OperationValueDateTime = Rule.OperationValueDateTime,
                                        OperationValueDouble = Rule.OperationValueDouble,
                                        OperationValueString = Rule.OperationValueString,
                                        TableName = Rule.tablesNames.TableName
                                    };
                                }
                                List<object> RecordsIds = _mapper.Map<List<object>>(GetRecordsIds(MainTableName, AddInstRuleViewModel));

                                PathToCheckDependencyValidation Item = (PathToCheckDependencyValidation)Enum.Parse(typeof(PathToCheckDependencyValidation),
                                    MainTableName + SDTableName + "Goal");

                                List<string> Path = GetEnumDescription(Item).Split(" ").ToList();

                                object CheckId = new object();

                                if (Path.Count() > 1)
                                {
                                    object CivilLoads = AddInstallationViewModel.GetType().GetProperty(Path[0])
                                        .GetValue(AddInstallationViewModel, null);

                                    CheckId = CivilLoads.GetType().GetProperty(Path[1]).GetValue(CivilLoads, null) != null ?
                                        (int)CivilLoads.GetType().GetProperty(Path[1]).GetValue(CivilLoads, null) : new object();
                                }
                                else if (Path.Count() == 1 && Path[0].ToLower() == "sitecode")
                                {
                                    CheckId = SiteCode;
                                }
                                else if (Path.Count() == 1)
                                {
                                    if (AddInstallationViewModel.GetType().GetProperty(Path[0]).GetValue(AddInstallationViewModel, null) != null)
                                        CheckId = (int)AddInstallationViewModel.GetType().GetProperty(Path[0])
                                            .GetValue(AddInstallationViewModel, null);
                                }

                                if (RecordsIds.Exists(x => x.ToString().ToLower() == CheckId.ToString().ToLower()))
                                {
                                    CheckIfSuccessAllRules++;
                                }
                            }
                        }

                        if (Rules.Count() == CheckIfSuccessAllRules)
                        {
                            string DynamicAttributeName = "";
                            int DynamicAttributeId = _unitOfWork.DependencyRowRepository
                                .GetIncludeWhereFirst(x => x.RowId == RowId, x => x.Dependency).Dependency.DynamicAttId.Value;

                            AddDynamicAttInstValueViewModel InputDynamicAttribute = AddInstallationViewModel.TLIdynamicAttInstValue
                                .FirstOrDefault(x => x.DynamicAttId == DynamicAttributeId);

                            if (InputDynamicAttribute == null)
                            {
                                DynamicAttributeName = _unitOfWork.DynamicAttRepository
                                    .GetWhereFirst(x => x.Id == DynamicAttributeId).Key;

                                return $"({DynamicAttributeName}) value can't be null";
                            }
                            else
                            {
                                string DependencyValidationOperation = DynamicAttributeMainDependency.Operation.Name;

                                object DependencyValidationValue = new object();

                                if (DynamicAttributeMainDependency.ValueBoolean != null)
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueBoolean;

                                else if (DynamicAttributeMainDependency.ValueDateTime != null)
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueDateTime;

                                else if (DynamicAttributeMainDependency.ValueDouble != null)
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueDouble;

                                else if (!string.IsNullOrEmpty(DynamicAttributeMainDependency.ValueString))
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueString;

                                object InputDynamicValue = new object();

                                if (InputDynamicAttribute.ValueBoolean != null)
                                    InputDynamicValue = InputDynamicAttribute.ValueBoolean;

                                else if (InputDynamicAttribute.ValueDateTime != null)
                                    InputDynamicValue = InputDynamicAttribute.ValueDateTime;

                                else if (InputDynamicAttribute.ValueDouble != null)
                                    InputDynamicValue = InputDynamicAttribute.ValueDouble;

                                else if (!string.IsNullOrEmpty(InputDynamicAttribute.ValueString))
                                    InputDynamicValue = InputDynamicAttribute.ValueString;

                                if (!(DependencyValidationOperation == "==" ? InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower() :
                                    DependencyValidationOperation == "!=" ? InputDynamicValue.ToString().ToLower() != DependencyValidationValue.ToString().ToLower() :
                                    DependencyValidationOperation == ">" ? Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == 1 :
                                    DependencyValidationOperation == ">=" ? (Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == 1 ||
                                        InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower()) :
                                    DependencyValidationOperation == "<" ? Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == -1 :
                                    DependencyValidationOperation == "<=" ? (Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == -1 ||
                                        InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower()) : false))
                                {
                                    DynamicAttributeName = _unitOfWork.DynamicAttRepository
                                        .GetWhereFirst(x => x.Id == DynamicAttributeId).Key;

                                    string ReturnOperation = (DependencyValidationOperation == "==" ? "equal to" :
                                        (DependencyValidationOperation == "!=" ? "not equal to" :
                                        (DependencyValidationOperation == ">" ? "bigger than" :
                                        (DependencyValidationOperation == ">=" ? "bigger than or equal to" :
                                        (DependencyValidationOperation == "<" ? "smaller than" :
                                        (DependencyValidationOperation == "<=" ? "smaller than or equal to" : ""))))));

                                    return $"({DynamicAttributeName}) value must be {ReturnOperation} {DependencyValidationValue}";
                                }
                            }
                        }
                    }
                }
            }
            else if (MWType.ToLower() == TablesNames.TLImwBU.ToString().ToLower())
            {
                string MainTableName = TablesNames.TLImwBU.ToString();
                AddMW_BUViewModel AddInstallationViewModel = _mapper.Map<AddMW_BUViewModel>(Input);

                List<DynamicAttViewModel> DynamicAttributes = _mapper.Map<List<DynamicAttViewModel>>(_unitOfWork.DynamicAttRepository
                    .GetIncludeWhere(x => x.tablesNames.TableName.ToLower() == MainTableName.ToLower() && !x.disable
                        , x => x.tablesNames).ToList());

                foreach (DynamicAttViewModel DynamicAttribute in DynamicAttributes)
                {
                    TLIdependency DynamicAttributeMainDependency = _unitOfWork.DependencieRepository.GetIncludeWhereFirst(x => x.DynamicAttId == DynamicAttribute.Id &&
                        (x.ValueBoolean != null || x.ValueDateTime != null || x.ValueDouble != null || !string.IsNullOrEmpty(x.ValueString)) &&
                            x.OperationId != null, x => x.Operation);

                    if (DynamicAttributeMainDependency == null)
                        continue;

                    List<int> DependencyRows = _unitOfWork.DependencyRowRepository.GetWhere(x => x.DependencyId == DynamicAttributeMainDependency.Id)
                        .Select(x => x.RowId.Value).Distinct().ToList();

                    foreach (int RowId in DependencyRows)
                    {
                        List<TLIrule> Rules = _unitOfWork.RowRuleRepository.GetIncludeWhere(x => x.RowId == RowId && x.Rule.OperationId != null, x => x.Rule, x => x.Rule.tablesNames,
                            x => x.Rule.Operation, x => x.Rule.dynamicAtt, x => x.Rule.attributeActivated).Select(x => x.Rule).ToList();

                        int CheckIfSuccessAllRules = 0;

                        foreach (TLIrule Rule in Rules)
                        {
                            string SDTableName = Rule.tablesNames.TableName;

                            string DataType = "";

                            string Operation = Rule.Operation.Name;
                            object OperationValue = new object();

                            if (Rule.OperationValueBoolean != null)
                            {
                                DataType = "Bool";
                                OperationValue = Rule.OperationValueBoolean;
                            }
                            else if (Rule.OperationValueDateTime != null)
                            {
                                DataType = "DateTime";
                                OperationValue = Rule.OperationValueDateTime;
                            }
                            else if (Rule.OperationValueDouble != null)
                            {
                                DataType = "Double";
                                OperationValue = Rule.OperationValueDouble;
                            }
                            else if (!string.IsNullOrEmpty(Rule.OperationValueString))
                            {
                                DataType = "String";
                                OperationValue = Rule.OperationValueString;
                            }

                            if (MainTableName.ToLower() == SDTableName.ToLower())
                            {
                                object InsertedValue = new object();

                                if (Rule.attributeActivatedId != null)
                                {
                                    string AttributeName = Rule.attributeActivated.Key;

                                    object TestValue = AddInstallationViewModel.GetType().GetProperties()
                                        .FirstOrDefault(x => x.Name.ToLower() == AttributeName.ToLower()).GetValue(AddInstallationViewModel, null);

                                    if (TestValue == null)
                                        break;

                                    if (Rule.OperationValueBoolean != null)
                                        InsertedValue = bool.Parse(TestValue.ToString());

                                    else if (Rule.OperationValueDateTime != null)
                                        InsertedValue = DateTime.Parse(TestValue.ToString());

                                    else if (Rule.OperationValueDouble != null)
                                        InsertedValue = double.Parse(TestValue.ToString());

                                    else if (!string.IsNullOrEmpty(Rule.OperationValueString))
                                        InsertedValue = TestValue.ToString();
                                }
                                else if (Rule.dynamicAttId != null)
                                {
                                    AddDynamicAttInstValueViewModel DynamicObject = AddInstallationViewModel.TLIdynamicAttInstValue
                                        .FirstOrDefault(x => x.DynamicAttId == Rule.dynamicAttId.Value);

                                    if (DynamicObject == null)
                                        break;

                                    if (DynamicObject.ValueBoolean != null)
                                        InsertedValue = DynamicObject.ValueBoolean;

                                    else if (DynamicObject.ValueDateTime != null)
                                        InsertedValue = DynamicObject.ValueDateTime;

                                    else if (DynamicObject.ValueDouble != null)
                                        InsertedValue = DynamicObject.ValueDouble;

                                    else if (!string.IsNullOrEmpty(DynamicObject.ValueString))
                                        InsertedValue = DynamicObject.ValueString;
                                }

                                if (Operation == "==" ? InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower() :
                                    Operation == "!=" ? InsertedValue.ToString().ToLower() != OperationValue.ToString().ToLower() :
                                    Operation == ">" ? Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == 1 :
                                    Operation == ">=" ? (Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == 1 ||
                                        InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower()) :
                                    Operation == "<" ? Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == -1 :
                                    Operation == "<=" ? (Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == -1 ||
                                        InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower()) : false)
                                {
                                    CheckIfSuccessAllRules++;
                                }
                            }
                            else
                            {
                                List<object> TableRecords = new List<object>();
                                if (Rule.attributeActivatedId != null)
                                {
                                    string AttributeName = Rule.attributeActivated.Key;

                                    if (OperationValue != null)
                                        TableRecords = _mapper.Map<List<object>>(_dbContext.GetType().GetProperty(SDTableName)
                                            .GetValue(_dbContext, null)).Where(x => x.GetType().GetProperty(AttributeName).GetValue(x, null) != null ? (Operation == ">" ?
                                               (DataType.ToLower() == "DateTime".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 : false) :
                                            Operation == ">=" ?
                                                (DataType.ToLower() == "DateTime".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 ||
                                                     x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 ||
                                                     x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) : false) :
                                            Operation == "<" ?
                                               (DataType.ToLower() == "DateTime".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 : false) :
                                            Operation == "<=" ?
                                                (DataType.ToLower() == "DateTime".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 ||
                                                     x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 ||
                                                     x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) : false) :
                                            Operation == "==" ?
                                                x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower() :
                                            Operation == "!=" ?
                                                x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() != OperationValue.ToString().ToLower() : false) : false).ToList();
                                }
                                else if (Rule.dynamicAttId != null)
                                {
                                    List<int> DynamicAttValuesInventoryIds = new List<int>();

                                    if (!DynamicAttribute.LibraryAtt)
                                    {
                                        DynamicAttValuesInventoryIds = _unitOfWork.DynamicAttInstValueRepository
                                            .GetWhere(x => (x.DynamicAttId == Rule.dynamicAttId.Value && !x.disable) &&
                                                (Operation == "==" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() == Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() == Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble == Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() == Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == "!=" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() != Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() != Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble != Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() != Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == ">" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime > Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble > Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == ">=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime >= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble >= Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime < Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble < Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime <= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble <= Rule.OperationValueDouble : false)) : false)

                                                ).Select(x => x.InventoryId).ToList();
                                    }
                                    else
                                    {
                                        DynamicAttValuesInventoryIds = _unitOfWork.DynamicAttLibRepository
                                            .GetWhere(x => (x.DynamicAttId == Rule.dynamicAttId && !x.disable) &&
                                                (Operation == "==" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() == Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() == Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble == Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() == Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == "!=" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() != Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() != Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble != Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() != Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == ">" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime > Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble > Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == ">=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime >= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble >= Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime < Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble < Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime <= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble <= Rule.OperationValueDouble : false)) : false)

                                                ).Select(x => x.InventoryId).ToList();
                                    }
                                    if (DynamicAttValuesInventoryIds != null ? DynamicAttValuesInventoryIds.Count() != 0 : false)
                                    {
                                        TableRecords = _mapper.Map<List<object>>(_dbContext.GetType()
                                            .GetProperty(SDTableName).GetValue(_dbContext, null))
                                                .Where(x => DynamicAttValuesInventoryIds.Contains(Convert.ToInt32(x.GetType().GetProperty("Id").GetValue(x, null)))).ToList();
                                    }
                                }

                                AddInstRuleViewModel AddInstRuleViewModel = new AddInstRuleViewModel();
                                if (Rule.dynamicAttId != null)
                                {
                                    AddInstRuleViewModel = new AddInstRuleViewModel
                                    {
                                        dynamicAttId = Rule.dynamicAttId,
                                        IsDynamic = true,
                                        OperationId = Rule.OperationId,
                                        OperationValueBoolean = Rule.OperationValueBoolean,
                                        OperationValueDateTime = Rule.OperationValueDateTime,
                                        OperationValueDouble = Rule.OperationValueDouble,
                                        OperationValueString = Rule.OperationValueString,
                                        TableName = Rule.tablesNames.TableName
                                    };
                                }
                                else if (Rule.attributeActivatedId != null)
                                {
                                    AddInstRuleViewModel = new AddInstRuleViewModel
                                    {
                                        attributeActivatedId = Rule.attributeActivatedId,
                                        IsDynamic = false,
                                        OperationId = Rule.OperationId,
                                        OperationValueBoolean = Rule.OperationValueBoolean,
                                        OperationValueDateTime = Rule.OperationValueDateTime,
                                        OperationValueDouble = Rule.OperationValueDouble,
                                        OperationValueString = Rule.OperationValueString,
                                        TableName = Rule.tablesNames.TableName
                                    };
                                }
                                List<object> RecordsIds = _mapper.Map<List<object>>(GetRecordsIds(MainTableName, AddInstRuleViewModel));

                                PathToCheckDependencyValidation Item = (PathToCheckDependencyValidation)Enum.Parse(typeof(PathToCheckDependencyValidation),
                                    MainTableName + SDTableName + "Goal");

                                List<string> Path = GetEnumDescription(Item).Split(" ").ToList();

                                object CheckId = new object();

                                if (Path.Count() > 1)
                                {
                                    object CivilLoads = AddInstallationViewModel.GetType().GetProperty(Path[0])
                                        .GetValue(AddInstallationViewModel, null);
                                    if (CivilLoads.GetType().GetProperty(Path[1]).GetValue(CivilLoads, null) != null)
                                    {
                                        CheckId = CivilLoads.GetType().GetProperty(Path[1]).GetValue(CivilLoads, null) != null ?
                                            (int)CivilLoads.GetType().GetProperty(Path[1]).GetValue(CivilLoads, null) : new object();
                                    }

                                }
                                else if (Path.Count() == 1 && Path[0].ToLower() == "sitecode")
                                {
                                    CheckId = SiteCode;
                                }
                                else if (Path.Count() == 1)
                                {
                                    if (AddInstallationViewModel.GetType().GetProperty(Path[0]).GetValue(AddInstallationViewModel, null) != null)
                                        CheckId = (int)AddInstallationViewModel.GetType().GetProperty(Path[0])
                                            .GetValue(AddInstallationViewModel, null);
                                }

                                if (RecordsIds.Exists(x => x.ToString().ToLower() == CheckId.ToString().ToLower()))
                                {
                                    CheckIfSuccessAllRules++;
                                }
                            }
                        }

                        if (Rules.Count() == CheckIfSuccessAllRules)
                        {
                            string DynamicAttributeName = "";
                            int DynamicAttributeId = _unitOfWork.DependencyRowRepository
                                .GetIncludeWhereFirst(x => x.RowId == RowId, x => x.Dependency).Dependency.DynamicAttId.Value;

                            AddDynamicAttInstValueViewModel InputDynamicAttribute = AddInstallationViewModel.TLIdynamicAttInstValue
                                .FirstOrDefault(x => x.DynamicAttId == DynamicAttributeId);

                            if (InputDynamicAttribute == null)
                            {
                                DynamicAttributeName = _unitOfWork.DynamicAttRepository
                                    .GetWhereFirst(x => x.Id == DynamicAttributeId).Key;

                                return $"({DynamicAttributeName}) value can't be null";
                            }
                            else
                            {
                                string DependencyValidationOperation = DynamicAttributeMainDependency.Operation.Name;

                                object DependencyValidationValue = new object();

                                if (DynamicAttributeMainDependency.ValueBoolean != null)
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueBoolean;

                                else if (DynamicAttributeMainDependency.ValueDateTime != null)
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueDateTime;

                                else if (DynamicAttributeMainDependency.ValueDouble != null)
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueDouble;

                                else if (!string.IsNullOrEmpty(DynamicAttributeMainDependency.ValueString))
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueString;

                                object InputDynamicValue = new object();

                                if (InputDynamicAttribute.ValueBoolean != null)
                                    InputDynamicValue = InputDynamicAttribute.ValueBoolean;

                                else if (InputDynamicAttribute.ValueDateTime != null)
                                    InputDynamicValue = InputDynamicAttribute.ValueDateTime;

                                else if (InputDynamicAttribute.ValueDouble != null)
                                    InputDynamicValue = InputDynamicAttribute.ValueDouble;

                                else if (!string.IsNullOrEmpty(InputDynamicAttribute.ValueString))
                                    InputDynamicValue = InputDynamicAttribute.ValueString;

                                if (!(DependencyValidationOperation == "==" ? InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower() :
                                    DependencyValidationOperation == "!=" ? InputDynamicValue.ToString().ToLower() != DependencyValidationValue.ToString().ToLower() :
                                    DependencyValidationOperation == ">" ? Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == 1 :
                                    DependencyValidationOperation == ">=" ? (Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == 1 ||
                                        InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower()) :
                                    DependencyValidationOperation == "<" ? Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == -1 :
                                    DependencyValidationOperation == "<=" ? (Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == -1 ||
                                        InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower()) : false))
                                {
                                    DynamicAttributeName = _unitOfWork.DynamicAttRepository
                                        .GetWhereFirst(x => x.Id == DynamicAttributeId).Key;

                                    string ReturnOperation = (DependencyValidationOperation == "==" ? "equal to" :
                                        (DependencyValidationOperation == "!=" ? "not equal to" :
                                        (DependencyValidationOperation == ">" ? "bigger than" :
                                        (DependencyValidationOperation == ">=" ? "bigger than or equal to" :
                                        (DependencyValidationOperation == "<" ? "smaller than" :
                                        (DependencyValidationOperation == "<=" ? "smaller than or equal to" : ""))))));

                                    return $"({DynamicAttributeName}) value must be {ReturnOperation} {DependencyValidationValue}";
                                }
                            }
                        }
                    }
                }
            }
            else if (MWType.ToLower() == TablesNames.TLImwRFU.ToString().ToLower())
            {
                string MainTableName = TablesNames.TLImwRFU.ToString();
                AddMW_RFUViewModel AddInstallationViewModel = _mapper.Map<AddMW_RFUViewModel>(Input);

                List<DynamicAttViewModel> DynamicAttributes = _mapper.Map<List<DynamicAttViewModel>>(_unitOfWork.DynamicAttRepository
                    .GetIncludeWhere(x => x.tablesNames.TableName.ToLower() == MainTableName.ToLower() && !x.disable
                        , x => x.tablesNames).ToList());

                foreach (DynamicAttViewModel DynamicAttribute in DynamicAttributes)
                {
                    TLIdependency DynamicAttributeMainDependency = _unitOfWork.DependencieRepository.GetIncludeWhereFirst(x => x.DynamicAttId == DynamicAttribute.Id &&
                        (x.ValueBoolean != null || x.ValueDateTime != null || x.ValueDouble != null || !string.IsNullOrEmpty(x.ValueString)) &&
                            x.OperationId != null, x => x.Operation);

                    if (DynamicAttributeMainDependency == null)
                        continue;

                    List<int> DependencyRows = _unitOfWork.DependencyRowRepository.GetWhere(x => x.DependencyId == DynamicAttributeMainDependency.Id)
                        .Select(x => x.RowId.Value).Distinct().ToList();

                    foreach (int RowId in DependencyRows)
                    {
                        List<TLIrule> Rules = _unitOfWork.RowRuleRepository.GetIncludeWhere(x => x.RowId == RowId && x.Rule.OperationId != null, x => x.Rule, x => x.Rule.tablesNames,
                            x => x.Rule.Operation, x => x.Rule.dynamicAtt, x => x.Rule.attributeActivated).Select(x => x.Rule).ToList();

                        int CheckIfSuccessAllRules = 0;

                        foreach (TLIrule Rule in Rules)
                        {
                            string SDTableName = Rule.tablesNames.TableName;

                            string DataType = "";

                            string Operation = Rule.Operation.Name;
                            object OperationValue = new object();

                            if (Rule.OperationValueBoolean != null)
                            {
                                DataType = "Bool";
                                OperationValue = Rule.OperationValueBoolean;
                            }
                            else if (Rule.OperationValueDateTime != null)
                            {
                                DataType = "DateTime";
                                OperationValue = Rule.OperationValueDateTime;
                            }
                            else if (Rule.OperationValueDouble != null)
                            {
                                DataType = "Double";
                                OperationValue = Rule.OperationValueDouble;
                            }
                            else if (!string.IsNullOrEmpty(Rule.OperationValueString))
                            {
                                DataType = "String";
                                OperationValue = Rule.OperationValueString;
                            }

                            if (MainTableName.ToLower() == SDTableName.ToLower())
                            {
                                object InsertedValue = new object();

                                if (Rule.attributeActivatedId != null)
                                {
                                    string AttributeName = Rule.attributeActivated.Key;

                                    object TestValue = AddInstallationViewModel.GetType().GetProperties()
                                        .FirstOrDefault(x => x.Name.ToLower() == AttributeName.ToLower()).GetValue(AddInstallationViewModel, null);

                                    if (TestValue == null)
                                        break;

                                    if (Rule.OperationValueBoolean != null)
                                        InsertedValue = bool.Parse(TestValue.ToString());

                                    else if (Rule.OperationValueDateTime != null)
                                        InsertedValue = DateTime.Parse(TestValue.ToString());

                                    else if (Rule.OperationValueDouble != null)
                                        InsertedValue = double.Parse(TestValue.ToString());

                                    else if (!string.IsNullOrEmpty(Rule.OperationValueString))
                                        InsertedValue = TestValue.ToString();
                                }
                                else if (Rule.dynamicAttId != null)
                                {
                                    AddDynamicAttInstValueViewModel DynamicObject = AddInstallationViewModel.TLIdynamicAttInstValue
                                        .FirstOrDefault(x => x.DynamicAttId == Rule.dynamicAttId.Value);

                                    if (DynamicObject == null)
                                        break;

                                    if (DynamicObject.ValueBoolean != null)
                                        InsertedValue = DynamicObject.ValueBoolean;

                                    else if (DynamicObject.ValueDateTime != null)
                                        InsertedValue = DynamicObject.ValueDateTime;

                                    else if (DynamicObject.ValueDouble != null)
                                        InsertedValue = DynamicObject.ValueDouble;

                                    else if (!string.IsNullOrEmpty(DynamicObject.ValueString))
                                        InsertedValue = DynamicObject.ValueString;
                                }

                                if (Operation == "==" ? InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower() :
                                    Operation == "!=" ? InsertedValue.ToString().ToLower() != OperationValue.ToString().ToLower() :
                                    Operation == ">" ? Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == 1 :
                                    Operation == ">=" ? (Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == 1 ||
                                        InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower()) :
                                    Operation == "<" ? Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == -1 :
                                    Operation == "<=" ? (Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == -1 ||
                                        InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower()) : false)
                                {
                                    CheckIfSuccessAllRules++;
                                }
                            }
                            else
                            {
                                List<object> TableRecords = new List<object>();
                                if (Rule.attributeActivatedId != null)
                                {
                                    string AttributeName = Rule.attributeActivated.Key;

                                    if (OperationValue != null)
                                        TableRecords = _mapper.Map<List<object>>(_dbContext.GetType().GetProperty(SDTableName)
                                            .GetValue(_dbContext, null)).Where(x => x.GetType().GetProperty(AttributeName).GetValue(x, null) != null ? (Operation == ">" ?
                                               (DataType.ToLower() == "DateTime".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 : false) :
                                            Operation == ">=" ?
                                                (DataType.ToLower() == "DateTime".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 ||
                                                     x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 ||
                                                     x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) : false) :
                                            Operation == "<" ?
                                               (DataType.ToLower() == "DateTime".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 : false) :
                                            Operation == "<=" ?
                                                (DataType.ToLower() == "DateTime".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 ||
                                                     x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 ||
                                                     x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) : false) :
                                            Operation == "==" ?
                                                x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower() :
                                            Operation == "!=" ?
                                                x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() != OperationValue.ToString().ToLower() : false) : false).ToList();
                                }
                                else if (Rule.dynamicAttId != null)
                                {
                                    List<int> DynamicAttValuesInventoryIds = new List<int>();

                                    if (!DynamicAttribute.LibraryAtt)
                                    {
                                        DynamicAttValuesInventoryIds = _unitOfWork.DynamicAttInstValueRepository
                                            .GetWhere(x => (x.DynamicAttId == Rule.dynamicAttId.Value && !x.disable) &&
                                                (Operation == "==" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() == Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() == Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble == Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() == Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == "!=" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() != Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() != Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble != Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() != Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == ">" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime > Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble > Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == ">=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime >= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble >= Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime < Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble < Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime <= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble <= Rule.OperationValueDouble : false)) : false)

                                                ).Select(x => x.InventoryId).ToList();
                                    }
                                    else
                                    {
                                        DynamicAttValuesInventoryIds = _unitOfWork.DynamicAttLibRepository
                                            .GetWhere(x => (x.DynamicAttId == Rule.dynamicAttId && !x.disable) &&
                                                (Operation == "==" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() == Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() == Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble == Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() == Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == "!=" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() != Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() != Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble != Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() != Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == ">" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime > Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble > Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == ">=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime >= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble >= Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime < Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble < Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime <= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble <= Rule.OperationValueDouble : false)) : false)

                                                ).Select(x => x.InventoryId).ToList();
                                    }
                                    if (DynamicAttValuesInventoryIds != null ? DynamicAttValuesInventoryIds.Count() != 0 : false)
                                    {
                                        TableRecords = _mapper.Map<List<object>>(_dbContext.GetType()
                                            .GetProperty(SDTableName).GetValue(_dbContext, null))
                                                .Where(x => DynamicAttValuesInventoryIds.Contains(Convert.ToInt32(x.GetType().GetProperty("Id").GetValue(x, null)))).ToList();
                                    }
                                }

                                AddInstRuleViewModel AddInstRuleViewModel = new AddInstRuleViewModel();
                                if (Rule.dynamicAttId != null)
                                {
                                    AddInstRuleViewModel = new AddInstRuleViewModel
                                    {
                                        dynamicAttId = Rule.dynamicAttId,
                                        IsDynamic = true,
                                        OperationId = Rule.OperationId,
                                        OperationValueBoolean = Rule.OperationValueBoolean,
                                        OperationValueDateTime = Rule.OperationValueDateTime,
                                        OperationValueDouble = Rule.OperationValueDouble,
                                        OperationValueString = Rule.OperationValueString,
                                        TableName = Rule.tablesNames.TableName
                                    };
                                }
                                else if (Rule.attributeActivatedId != null)
                                {
                                    AddInstRuleViewModel = new AddInstRuleViewModel
                                    {
                                        attributeActivatedId = Rule.attributeActivatedId,
                                        IsDynamic = false,
                                        OperationId = Rule.OperationId,
                                        OperationValueBoolean = Rule.OperationValueBoolean,
                                        OperationValueDateTime = Rule.OperationValueDateTime,
                                        OperationValueDouble = Rule.OperationValueDouble,
                                        OperationValueString = Rule.OperationValueString,
                                        TableName = Rule.tablesNames.TableName
                                    };
                                }
                                List<object> RecordsIds = _mapper.Map<List<object>>(GetRecordsIds(MainTableName, AddInstRuleViewModel));

                                PathToCheckDependencyValidation Item = (PathToCheckDependencyValidation)Enum.Parse(typeof(PathToCheckDependencyValidation),
                                    MainTableName + SDTableName + "Goal");

                                List<string> Path = GetEnumDescription(Item).Split(" ").ToList();

                                object CheckId = new object();

                                if (Path.Count() > 1)
                                {
                                    if (Path[1].ToLower() == "allLoadInstId".ToLower())
                                    {
                                        int MW_PortId = (int)AddInstallationViewModel.GetType().GetProperty("MwPortId")
                                            .GetValue(AddInstallationViewModel, null);

                                        int MW_BUId = _unitOfWork.MW_PortRepository.GetWhereFirst(x => x.Id == MW_PortId).MwBUId;

                                        CheckId = _unitOfWork.AllLoadInstRepository.GetWhereFirst(x => !x.Draft && x.mwBUId == MW_BUId).Id;
                                    }
                                    else
                                    {
                                        object CivilLoads = AddInstallationViewModel.GetType().GetProperty(Path[0])
                                            .GetValue(AddInstallationViewModel, null);

                                        CheckId = CivilLoads.GetType().GetProperty(Path[1]).GetValue(CivilLoads, null) != null ?
                                            (int)CivilLoads.GetType().GetProperty(Path[1]).GetValue(CivilLoads, null) : new object();
                                    }
                                }
                                else if (Path.Count() == 1 && Path[0].ToLower() == "sitecode")
                                {
                                    CheckId = SiteCode;
                                }
                                else if (Path.Count() == 1)
                                {
                                    if (AddInstallationViewModel.GetType().GetProperty(Path[0]).GetValue(AddInstallationViewModel, null) != null)
                                        CheckId = (int)AddInstallationViewModel.GetType().GetProperty(Path[0])
                                            .GetValue(AddInstallationViewModel, null);
                                }

                                if (RecordsIds.Exists(x => x.ToString().ToLower() == CheckId.ToString().ToLower()))
                                {
                                    CheckIfSuccessAllRules++;
                                }
                            }
                        }

                        if (Rules.Count() == CheckIfSuccessAllRules)
                        {
                            string DynamicAttributeName = "";
                            int DynamicAttributeId = _unitOfWork.DependencyRowRepository
                                .GetIncludeWhereFirst(x => x.RowId == RowId, x => x.Dependency).Dependency.DynamicAttId.Value;

                            AddDynamicAttInstValueViewModel InputDynamicAttribute = AddInstallationViewModel.TLIdynamicAttInstValue
                                .FirstOrDefault(x => x.DynamicAttId == DynamicAttributeId);

                            if (InputDynamicAttribute == null)
                            {
                                DynamicAttributeName = _unitOfWork.DynamicAttRepository
                                    .GetWhereFirst(x => x.Id == DynamicAttributeId).Key;

                                return $"({DynamicAttributeName}) value can't be null";
                            }
                            else
                            {
                                string DependencyValidationOperation = DynamicAttributeMainDependency.Operation.Name;

                                object DependencyValidationValue = new object();

                                if (DynamicAttributeMainDependency.ValueBoolean != null)
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueBoolean;

                                else if (DynamicAttributeMainDependency.ValueDateTime != null)
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueDateTime;

                                else if (DynamicAttributeMainDependency.ValueDouble != null)
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueDouble;

                                else if (!string.IsNullOrEmpty(DynamicAttributeMainDependency.ValueString))
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueString;

                                object InputDynamicValue = new object();

                                if (InputDynamicAttribute.ValueBoolean != null)
                                    InputDynamicValue = InputDynamicAttribute.ValueBoolean;

                                else if (InputDynamicAttribute.ValueDateTime != null)
                                    InputDynamicValue = InputDynamicAttribute.ValueDateTime;

                                else if (InputDynamicAttribute.ValueDouble != null)
                                    InputDynamicValue = InputDynamicAttribute.ValueDouble;

                                else if (!string.IsNullOrEmpty(InputDynamicAttribute.ValueString))
                                    InputDynamicValue = InputDynamicAttribute.ValueString;

                                if (!(DependencyValidationOperation == "==" ? InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower() :
                                    DependencyValidationOperation == "!=" ? InputDynamicValue.ToString().ToLower() != DependencyValidationValue.ToString().ToLower() :
                                    DependencyValidationOperation == ">" ? Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == 1 :
                                    DependencyValidationOperation == ">=" ? (Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == 1 ||
                                        InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower()) :
                                    DependencyValidationOperation == "<" ? Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == -1 :
                                    DependencyValidationOperation == "<=" ? (Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == -1 ||
                                        InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower()) : false))
                                {
                                    DynamicAttributeName = _unitOfWork.DynamicAttRepository
                                        .GetWhereFirst(x => x.Id == DynamicAttributeId).Key;

                                    string ReturnOperation = (DependencyValidationOperation == "==" ? "equal to" :
                                        (DependencyValidationOperation == "!=" ? "not equal to" :
                                        (DependencyValidationOperation == ">" ? "bigger than" :
                                        (DependencyValidationOperation == ">=" ? "bigger than or equal to" :
                                        (DependencyValidationOperation == "<" ? "smaller than" :
                                        (DependencyValidationOperation == "<=" ? "smaller than or equal to" : ""))))));

                                    return $"({DynamicAttributeName}) value must be {ReturnOperation} {DependencyValidationValue}";
                                }
                            }
                        }
                    }
                }
            }
            else if (MWType.ToLower() == TablesNames.TLImwODU.ToString().ToLower())
            {
                string MainTableName = TablesNames.TLImwODU.ToString();
                AddMW_ODUViewModel AddInstallationViewModel = _mapper.Map<AddMW_ODUViewModel>(Input);

                List<DynamicAttViewModel> DynamicAttributes = _mapper.Map<List<DynamicAttViewModel>>(_unitOfWork.DynamicAttRepository
                    .GetIncludeWhere(x => x.tablesNames.TableName.ToLower() == MainTableName.ToLower() && !x.disable
                        , x => x.tablesNames).ToList());

                foreach (DynamicAttViewModel DynamicAttribute in DynamicAttributes)
                {
                    TLIdependency DynamicAttributeMainDependency = _unitOfWork.DependencieRepository.GetIncludeWhereFirst(x => x.DynamicAttId == DynamicAttribute.Id &&
                        (x.ValueBoolean != null || x.ValueDateTime != null || x.ValueDouble != null || !string.IsNullOrEmpty(x.ValueString)) &&
                            x.OperationId != null, x => x.Operation);

                    if (DynamicAttributeMainDependency == null)
                        continue;

                    List<int> DependencyRows = _unitOfWork.DependencyRowRepository.GetWhere(x => x.DependencyId == DynamicAttributeMainDependency.Id)
                        .Select(x => x.RowId.Value).Distinct().ToList();

                    foreach (int RowId in DependencyRows)
                    {
                        List<TLIrule> Rules = _unitOfWork.RowRuleRepository.GetIncludeWhere(x => x.RowId == RowId && x.Rule.OperationId != null, x => x.Rule, x => x.Rule.tablesNames,
                            x => x.Rule.Operation, x => x.Rule.dynamicAtt, x => x.Rule.attributeActivated).Select(x => x.Rule).ToList();

                        int CheckIfSuccessAllRules = 0;

                        foreach (TLIrule Rule in Rules)
                        {
                            string SDTableName = Rule.tablesNames.TableName;

                            string DataType = "";

                            string Operation = Rule.Operation.Name;
                            object OperationValue = new object();

                            if (Rule.OperationValueBoolean != null)
                            {
                                DataType = "Bool";
                                OperationValue = Rule.OperationValueBoolean;
                            }
                            else if (Rule.OperationValueDateTime != null)
                            {
                                DataType = "DateTime";
                                OperationValue = Rule.OperationValueDateTime;
                            }
                            else if (Rule.OperationValueDouble != null)
                            {
                                DataType = "Double";
                                OperationValue = Rule.OperationValueDouble;
                            }
                            else if (!string.IsNullOrEmpty(Rule.OperationValueString))
                            {
                                DataType = "String";
                                OperationValue = Rule.OperationValueString;
                            }

                            if (MainTableName.ToLower() == SDTableName.ToLower())
                            {
                                object InsertedValue = new object();

                                if (Rule.attributeActivatedId != null)
                                {
                                    string AttributeName = Rule.attributeActivated.Key;

                                    object TestValue = AddInstallationViewModel.GetType().GetProperties()
                                        .FirstOrDefault(x => x.Name.ToLower() == AttributeName.ToLower()).GetValue(AddInstallationViewModel, null);

                                    if (TestValue == null)
                                        break;

                                    if (Rule.OperationValueBoolean != null)
                                        InsertedValue = bool.Parse(TestValue.ToString());

                                    else if (Rule.OperationValueDateTime != null)
                                        InsertedValue = DateTime.Parse(TestValue.ToString());

                                    else if (Rule.OperationValueDouble != null)
                                        InsertedValue = double.Parse(TestValue.ToString());

                                    else if (!string.IsNullOrEmpty(Rule.OperationValueString))
                                        InsertedValue = TestValue.ToString();
                                }
                                else if (Rule.dynamicAttId != null)
                                {
                                    AddDynamicAttInstValueViewModel DynamicObject = AddInstallationViewModel.TLIdynamicAttInstValue
                                        .FirstOrDefault(x => x.DynamicAttId == Rule.dynamicAttId.Value);

                                    if (DynamicObject == null)
                                        break;

                                    if (DynamicObject.ValueBoolean != null)
                                        InsertedValue = DynamicObject.ValueBoolean;

                                    else if (DynamicObject.ValueDateTime != null)
                                        InsertedValue = DynamicObject.ValueDateTime;

                                    else if (DynamicObject.ValueDouble != null)
                                        InsertedValue = DynamicObject.ValueDouble;

                                    else if (!string.IsNullOrEmpty(DynamicObject.ValueString))
                                        InsertedValue = DynamicObject.ValueString;
                                }

                                if (Operation == "==" ? InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower() :
                                    Operation == "!=" ? InsertedValue.ToString().ToLower() != OperationValue.ToString().ToLower() :
                                    Operation == ">" ? Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == 1 :
                                    Operation == ">=" ? (Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == 1 ||
                                        InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower()) :
                                    Operation == "<" ? Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == -1 :
                                    Operation == "<=" ? (Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == -1 ||
                                        InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower()) : false)
                                {
                                    CheckIfSuccessAllRules++;
                                }
                            }
                            else
                            {
                                List<object> TableRecords = new List<object>();
                                if (Rule.attributeActivatedId != null)
                                {
                                    string AttributeName = Rule.attributeActivated.Key;

                                    if (OperationValue != null)
                                        TableRecords = _mapper.Map<List<object>>(_dbContext.GetType().GetProperty(SDTableName)
                                            .GetValue(_dbContext, null)).Where(x => x.GetType().GetProperty(AttributeName).GetValue(x, null) != null ? (Operation == ">" ?
                                               (DataType.ToLower() == "DateTime".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 : false) :
                                            Operation == ">=" ?
                                                (DataType.ToLower() == "DateTime".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 ||
                                                     x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 ||
                                                     x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) : false) :
                                            Operation == "<" ?
                                               (DataType.ToLower() == "DateTime".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 : false) :
                                            Operation == "<=" ?
                                                (DataType.ToLower() == "DateTime".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 ||
                                                     x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 ||
                                                     x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) : false) :
                                            Operation == "==" ?
                                                x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower() :
                                            Operation == "!=" ?
                                                x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() != OperationValue.ToString().ToLower() : false) : false).ToList();
                                }
                                else if (Rule.dynamicAttId != null)
                                {
                                    List<int> DynamicAttValuesInventoryIds = new List<int>();

                                    if (!DynamicAttribute.LibraryAtt)
                                    {
                                        DynamicAttValuesInventoryIds = _unitOfWork.DynamicAttInstValueRepository
                                            .GetWhere(x => (x.DynamicAttId == Rule.dynamicAttId.Value && !x.disable) &&
                                                (Operation == "==" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() == Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() == Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble == Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() == Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == "!=" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() != Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() != Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble != Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() != Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == ">" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime > Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble > Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == ">=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime >= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble >= Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime < Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble < Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime <= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble <= Rule.OperationValueDouble : false)) : false)

                                                ).Select(x => x.InventoryId).ToList();
                                    }
                                    else
                                    {
                                        DynamicAttValuesInventoryIds = _unitOfWork.DynamicAttLibRepository
                                            .GetWhere(x => (x.DynamicAttId == Rule.dynamicAttId && !x.disable) &&
                                                (Operation == "==" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() == Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() == Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble == Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() == Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == "!=" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() != Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() != Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble != Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() != Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == ">" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime > Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble > Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == ">=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime >= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble >= Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime < Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble < Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime <= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble <= Rule.OperationValueDouble : false)) : false)

                                                ).Select(x => x.InventoryId).ToList();
                                    }
                                    if (DynamicAttValuesInventoryIds != null ? DynamicAttValuesInventoryIds.Count() != 0 : false)
                                    {
                                        TableRecords = _mapper.Map<List<object>>(_dbContext.GetType()
                                            .GetProperty(SDTableName).GetValue(_dbContext, null))
                                                .Where(x => DynamicAttValuesInventoryIds.Contains(Convert.ToInt32(x.GetType().GetProperty("Id").GetValue(x, null)))).ToList();
                                    }
                                }

                                AddInstRuleViewModel AddInstRuleViewModel = new AddInstRuleViewModel();
                                if (Rule.dynamicAttId != null)
                                {
                                    AddInstRuleViewModel = new AddInstRuleViewModel
                                    {
                                        dynamicAttId = Rule.dynamicAttId,
                                        IsDynamic = true,
                                        OperationId = Rule.OperationId,
                                        OperationValueBoolean = Rule.OperationValueBoolean,
                                        OperationValueDateTime = Rule.OperationValueDateTime,
                                        OperationValueDouble = Rule.OperationValueDouble,
                                        OperationValueString = Rule.OperationValueString,
                                        TableName = Rule.tablesNames.TableName
                                    };
                                }
                                else if (Rule.attributeActivatedId != null)
                                {
                                    AddInstRuleViewModel = new AddInstRuleViewModel
                                    {
                                        attributeActivatedId = Rule.attributeActivatedId,
                                        IsDynamic = false,
                                        OperationId = Rule.OperationId,
                                        OperationValueBoolean = Rule.OperationValueBoolean,
                                        OperationValueDateTime = Rule.OperationValueDateTime,
                                        OperationValueDouble = Rule.OperationValueDouble,
                                        OperationValueString = Rule.OperationValueString,
                                        TableName = Rule.tablesNames.TableName
                                    };
                                }
                                List<object> RecordsIds = _mapper.Map<List<object>>(GetRecordsIds(MainTableName, AddInstRuleViewModel));

                                PathToCheckDependencyValidation Item = (PathToCheckDependencyValidation)Enum.Parse(typeof(PathToCheckDependencyValidation),
                                    MainTableName + SDTableName + "Goal");

                                List<string> Path = GetEnumDescription(Item).Split(" ").ToList();

                                object CheckId = new object();

                                if (Path.Count() > 1)
                                {
                                    object CivilLoads = AddInstallationViewModel.GetType().GetProperty(Path[0])
                                        .GetValue(AddInstallationViewModel, null);

                                    CheckId = CivilLoads.GetType().GetProperty(Path[1]).GetValue(CivilLoads, null) != null ?
                                        (int)CivilLoads.GetType().GetProperty(Path[1]).GetValue(CivilLoads, null) : new object();
                                }
                                else if (Path.Count() == 1 && Path[0].ToLower() == "sitecode")
                                {
                                    CheckId = SiteCode;
                                }
                                else if (Path.Count() == 1)
                                {
                                    if (AddInstallationViewModel.GetType().GetProperty(Path[0]).GetValue(AddInstallationViewModel, null) != null)
                                        CheckId = (int)AddInstallationViewModel.GetType().GetProperty(Path[0])
                                            .GetValue(AddInstallationViewModel, null);
                                }

                                if (RecordsIds.Exists(x => x.ToString().ToLower() == CheckId.ToString().ToLower()))
                                {
                                    CheckIfSuccessAllRules++;
                                }
                            }
                        }

                        if (Rules.Count() == CheckIfSuccessAllRules)
                        {
                            string DynamicAttributeName = "";
                            int DynamicAttributeId = _unitOfWork.DependencyRowRepository
                                .GetIncludeWhereFirst(x => x.RowId == RowId, x => x.Dependency).Dependency.DynamicAttId.Value;

                            AddDynamicAttInstValueViewModel InputDynamicAttribute = AddInstallationViewModel.TLIdynamicAttInstValue
                                .FirstOrDefault(x => x.DynamicAttId == DynamicAttributeId);

                            if (InputDynamicAttribute == null)
                            {
                                DynamicAttributeName = _unitOfWork.DynamicAttRepository
                                    .GetWhereFirst(x => x.Id == DynamicAttributeId).Key;

                                return $"({DynamicAttributeName}) value can't be null";
                            }
                            else
                            {
                                string DependencyValidationOperation = DynamicAttributeMainDependency.Operation.Name;

                                object DependencyValidationValue = new object();

                                if (DynamicAttributeMainDependency.ValueBoolean != null)
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueBoolean;

                                else if (DynamicAttributeMainDependency.ValueDateTime != null)
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueDateTime;

                                else if (DynamicAttributeMainDependency.ValueDouble != null)
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueDouble;

                                else if (!string.IsNullOrEmpty(DynamicAttributeMainDependency.ValueString))
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueString;

                                object InputDynamicValue = new object();

                                if (InputDynamicAttribute.ValueBoolean != null)
                                    InputDynamicValue = InputDynamicAttribute.ValueBoolean;

                                else if (InputDynamicAttribute.ValueDateTime != null)
                                    InputDynamicValue = InputDynamicAttribute.ValueDateTime;

                                else if (InputDynamicAttribute.ValueDouble != null)
                                    InputDynamicValue = InputDynamicAttribute.ValueDouble;

                                else if (!string.IsNullOrEmpty(InputDynamicAttribute.ValueString))
                                    InputDynamicValue = InputDynamicAttribute.ValueString;

                                if (!(DependencyValidationOperation == "==" ? InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower() :
                                    DependencyValidationOperation == "!=" ? InputDynamicValue.ToString().ToLower() != DependencyValidationValue.ToString().ToLower() :
                                    DependencyValidationOperation == ">" ? Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == 1 :
                                    DependencyValidationOperation == ">=" ? (Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == 1 ||
                                        InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower()) :
                                    DependencyValidationOperation == "<" ? Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == -1 :
                                    DependencyValidationOperation == "<=" ? (Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == -1 ||
                                        InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower()) : false))
                                {
                                    DynamicAttributeName = _unitOfWork.DynamicAttRepository
                                        .GetWhereFirst(x => x.Id == DynamicAttributeId).Key;

                                    string ReturnOperation = (DependencyValidationOperation == "==" ? "equal to" :
                                        (DependencyValidationOperation == "!=" ? "not equal to" :
                                        (DependencyValidationOperation == ">" ? "bigger than" :
                                        (DependencyValidationOperation == ">=" ? "bigger than or equal to" :
                                        (DependencyValidationOperation == "<" ? "smaller than" :
                                        (DependencyValidationOperation == "<=" ? "smaller than or equal to" : ""))))));

                                    return $"({DynamicAttributeName}) value must be {ReturnOperation} {DependencyValidationValue}";
                                }
                            }
                        }
                    }
                }
            }
            else if (MWType.ToLower() == TablesNames.TLImwOther.ToString().ToLower())
            {
                string MainTableName = TablesNames.TLImwOther.ToString();
                AddMw_OtherViewModel AddInstallationViewModel = _mapper.Map<AddMw_OtherViewModel>(Input);

                List<DynamicAttViewModel> DynamicAttributes = _mapper.Map<List<DynamicAttViewModel>>(_unitOfWork.DynamicAttRepository
                    .GetIncludeWhere(x => x.tablesNames.TableName.ToLower() == MainTableName.ToLower() && !x.disable
                        , x => x.tablesNames).ToList());

                foreach (DynamicAttViewModel DynamicAttribute in DynamicAttributes)
                {
                    TLIdependency DynamicAttributeMainDependency = _unitOfWork.DependencieRepository.GetIncludeWhereFirst(x => x.DynamicAttId == DynamicAttribute.Id &&
                        (x.ValueBoolean != null || x.ValueDateTime != null || x.ValueDouble != null || !string.IsNullOrEmpty(x.ValueString)) &&
                            x.OperationId != null, x => x.Operation);

                    if (DynamicAttributeMainDependency == null)
                        continue;

                    List<int> DependencyRows = _unitOfWork.DependencyRowRepository.GetWhere(x => x.DependencyId == DynamicAttributeMainDependency.Id)
                        .Select(x => x.RowId.Value).Distinct().ToList();

                    foreach (int RowId in DependencyRows)
                    {
                        List<TLIrule> Rules = _unitOfWork.RowRuleRepository.GetIncludeWhere(x => x.RowId == RowId && x.Rule.OperationId != null, x => x.Rule, x => x.Rule.tablesNames,
                            x => x.Rule.Operation, x => x.Rule.dynamicAtt, x => x.Rule.attributeActivated).Select(x => x.Rule).ToList();

                        int CheckIfSuccessAllRules = 0;

                        foreach (TLIrule Rule in Rules)
                        {
                            string SDTableName = Rule.tablesNames.TableName;

                            string DataType = "";

                            string Operation = Rule.Operation.Name;
                            object OperationValue = new object();

                            if (Rule.OperationValueBoolean != null)
                            {
                                DataType = "Bool";
                                OperationValue = Rule.OperationValueBoolean;
                            }
                            else if (Rule.OperationValueDateTime != null)
                            {
                                DataType = "DateTime";
                                OperationValue = Rule.OperationValueDateTime;
                            }
                            else if (Rule.OperationValueDouble != null)
                            {
                                DataType = "Double";
                                OperationValue = Rule.OperationValueDouble;
                            }
                            else if (!string.IsNullOrEmpty(Rule.OperationValueString))
                            {
                                DataType = "String";
                                OperationValue = Rule.OperationValueString;
                            }

                            if (MainTableName.ToLower() == SDTableName.ToLower())
                            {
                                object InsertedValue = new object();

                                if (Rule.attributeActivatedId != null)
                                {
                                    string AttributeName = Rule.attributeActivated.Key;

                                    object TestValue = AddInstallationViewModel.GetType().GetProperties()
                                        .FirstOrDefault(x => x.Name.ToLower() == AttributeName.ToLower()).GetValue(AddInstallationViewModel, null);

                                    if (TestValue == null)
                                        break;

                                    if (Rule.OperationValueBoolean != null)
                                        InsertedValue = bool.Parse(TestValue.ToString());

                                    else if (Rule.OperationValueDateTime != null)
                                        InsertedValue = DateTime.Parse(TestValue.ToString());

                                    else if (Rule.OperationValueDouble != null)
                                        InsertedValue = double.Parse(TestValue.ToString());

                                    else if (!string.IsNullOrEmpty(Rule.OperationValueString))
                                        InsertedValue = TestValue.ToString();
                                }
                                else if (Rule.dynamicAttId != null)
                                {
                                    AddDynamicAttInstValueViewModel DynamicObject = AddInstallationViewModel.TLIdynamicAttInstValue
                                        .FirstOrDefault(x => x.DynamicAttId == Rule.dynamicAttId.Value);

                                    if (DynamicObject == null)
                                        break;

                                    if (DynamicObject.ValueBoolean != null)
                                        InsertedValue = DynamicObject.ValueBoolean;

                                    else if (DynamicObject.ValueDateTime != null)
                                        InsertedValue = DynamicObject.ValueDateTime;

                                    else if (DynamicObject.ValueDouble != null)
                                        InsertedValue = DynamicObject.ValueDouble;

                                    else if (!string.IsNullOrEmpty(DynamicObject.ValueString))
                                        InsertedValue = DynamicObject.ValueString;
                                }

                                if (Operation == "==" ? InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower() :
                                    Operation == "!=" ? InsertedValue.ToString().ToLower() != OperationValue.ToString().ToLower() :
                                    Operation == ">" ? Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == 1 :
                                    Operation == ">=" ? (Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == 1 ||
                                        InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower()) :
                                    Operation == "<" ? Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == -1 :
                                    Operation == "<=" ? (Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == -1 ||
                                        InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower()) : false)
                                {
                                    CheckIfSuccessAllRules++;
                                }
                            }
                            else
                            {
                                List<object> TableRecords = new List<object>();
                                if (Rule.attributeActivatedId != null)
                                {
                                    string AttributeName = Rule.attributeActivated.Key;

                                    if (OperationValue != null)
                                        TableRecords = _mapper.Map<List<object>>(_dbContext.GetType().GetProperty(SDTableName)
                                            .GetValue(_dbContext, null)).Where(x => x.GetType().GetProperty(AttributeName).GetValue(x, null) != null ? (Operation == ">" ?
                                               (DataType.ToLower() == "DateTime".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 : false) :
                                            Operation == ">=" ?
                                                (DataType.ToLower() == "DateTime".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 ||
                                                     x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 ||
                                                     x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) : false) :
                                            Operation == "<" ?
                                               (DataType.ToLower() == "DateTime".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 : false) :
                                            Operation == "<=" ?
                                                (DataType.ToLower() == "DateTime".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 ||
                                                     x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 ||
                                                     x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) : false) :
                                            Operation == "==" ?
                                                x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower() :
                                            Operation == "!=" ?
                                                x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() != OperationValue.ToString().ToLower() : false) : false).ToList();
                                }
                                else if (Rule.dynamicAttId != null)
                                {
                                    List<int> DynamicAttValuesInventoryIds = new List<int>();

                                    if (!DynamicAttribute.LibraryAtt)
                                    {
                                        DynamicAttValuesInventoryIds = _unitOfWork.DynamicAttInstValueRepository
                                            .GetWhere(x => (x.DynamicAttId == Rule.dynamicAttId.Value && !x.disable) &&
                                                (Operation == "==" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() == Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() == Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble == Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() == Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == "!=" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() != Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() != Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble != Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() != Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == ">" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime > Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble > Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == ">=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime >= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble >= Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime < Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble < Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime <= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble <= Rule.OperationValueDouble : false)) : false)

                                                ).Select(x => x.InventoryId).ToList();
                                    }
                                    else
                                    {
                                        DynamicAttValuesInventoryIds = _unitOfWork.DynamicAttLibRepository
                                            .GetWhere(x => (x.DynamicAttId == Rule.dynamicAttId && !x.disable) &&
                                                (Operation == "==" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() == Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() == Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble == Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() == Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == "!=" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() != Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() != Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble != Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() != Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == ">" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime > Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble > Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == ">=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime >= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble >= Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime < Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble < Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime <= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble <= Rule.OperationValueDouble : false)) : false)

                                                ).Select(x => x.InventoryId).ToList();
                                    }
                                    if (DynamicAttValuesInventoryIds != null ? DynamicAttValuesInventoryIds.Count() != 0 : false)
                                    {
                                        TableRecords = _mapper.Map<List<object>>(_dbContext.GetType()
                                            .GetProperty(SDTableName).GetValue(_dbContext, null))
                                                .Where(x => DynamicAttValuesInventoryIds.Contains(Convert.ToInt32(x.GetType().GetProperty("Id").GetValue(x, null)))).ToList();
                                    }
                                }

                                AddInstRuleViewModel AddInstRuleViewModel = new AddInstRuleViewModel();
                                if (Rule.dynamicAttId != null)
                                {
                                    AddInstRuleViewModel = new AddInstRuleViewModel
                                    {
                                        dynamicAttId = Rule.dynamicAttId,
                                        IsDynamic = true,
                                        OperationId = Rule.OperationId,
                                        OperationValueBoolean = Rule.OperationValueBoolean,
                                        OperationValueDateTime = Rule.OperationValueDateTime,
                                        OperationValueDouble = Rule.OperationValueDouble,
                                        OperationValueString = Rule.OperationValueString,
                                        TableName = Rule.tablesNames.TableName
                                    };
                                }
                                else if (Rule.attributeActivatedId != null)
                                {
                                    AddInstRuleViewModel = new AddInstRuleViewModel
                                    {
                                        attributeActivatedId = Rule.attributeActivatedId,
                                        IsDynamic = false,
                                        OperationId = Rule.OperationId,
                                        OperationValueBoolean = Rule.OperationValueBoolean,
                                        OperationValueDateTime = Rule.OperationValueDateTime,
                                        OperationValueDouble = Rule.OperationValueDouble,
                                        OperationValueString = Rule.OperationValueString,
                                        TableName = Rule.tablesNames.TableName
                                    };
                                }
                                List<object> RecordsIds = _mapper.Map<List<object>>(GetRecordsIds(MainTableName, AddInstRuleViewModel));

                                PathToCheckDependencyValidation Item = (PathToCheckDependencyValidation)Enum.Parse(typeof(PathToCheckDependencyValidation),
                                    MainTableName + SDTableName + "Goal");

                                List<string> Path = GetEnumDescription(Item).Split(" ").ToList();

                                object CheckId = new object();

                                if (Path.Count() > 1)
                                {
                                    object CivilLoads = AddInstallationViewModel.GetType().GetProperty(Path[0])
                                        .GetValue(AddInstallationViewModel, null);

                                    CheckId = CivilLoads.GetType().GetProperty(Path[1]).GetValue(CivilLoads, null) != null ?
                                        (int)CivilLoads.GetType().GetProperty(Path[1]).GetValue(CivilLoads, null) : new object();
                                }
                                else if (Path.Count() == 1 && Path[0].ToLower() == "sitecode")
                                {
                                    CheckId = SiteCode;
                                }
                                else if (Path.Count() == 1)
                                {
                                    if (AddInstallationViewModel.GetType().GetProperty(Path[0]).GetValue(AddInstallationViewModel, null) != null)
                                        CheckId = (int)AddInstallationViewModel.GetType().GetProperty(Path[0])
                                            .GetValue(AddInstallationViewModel, null);
                                }

                                if (RecordsIds.Exists(x => x.ToString().ToLower() == CheckId.ToString().ToLower()))
                                {
                                    CheckIfSuccessAllRules++;
                                }
                            }
                        }

                        if (Rules.Count() == CheckIfSuccessAllRules)
                        {
                            string DynamicAttributeName = "";
                            int DynamicAttributeId = _unitOfWork.DependencyRowRepository
                                .GetIncludeWhereFirst(x => x.RowId == RowId, x => x.Dependency).Dependency.DynamicAttId.Value;

                            AddDynamicAttInstValueViewModel InputDynamicAttribute = AddInstallationViewModel.TLIdynamicAttInstValue
                                .FirstOrDefault(x => x.DynamicAttId == DynamicAttributeId);

                            if (InputDynamicAttribute == null)
                            {
                                DynamicAttributeName = _unitOfWork.DynamicAttRepository
                                    .GetWhereFirst(x => x.Id == DynamicAttributeId).Key;

                                return $"({DynamicAttributeName}) value can't be null";
                            }
                            else
                            {
                                string DependencyValidationOperation = DynamicAttributeMainDependency.Operation.Name;

                                object DependencyValidationValue = new object();

                                if (DynamicAttributeMainDependency.ValueBoolean != null)
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueBoolean;

                                else if (DynamicAttributeMainDependency.ValueDateTime != null)
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueDateTime;

                                else if (DynamicAttributeMainDependency.ValueDouble != null)
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueDouble;

                                else if (!string.IsNullOrEmpty(DynamicAttributeMainDependency.ValueString))
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueString;

                                object InputDynamicValue = new object();

                                if (InputDynamicAttribute.ValueBoolean != null)
                                    InputDynamicValue = InputDynamicAttribute.ValueBoolean;

                                else if (InputDynamicAttribute.ValueDateTime != null)
                                    InputDynamicValue = InputDynamicAttribute.ValueDateTime;

                                else if (InputDynamicAttribute.ValueDouble != null)
                                    InputDynamicValue = InputDynamicAttribute.ValueDouble;

                                else if (!string.IsNullOrEmpty(InputDynamicAttribute.ValueString))
                                    InputDynamicValue = InputDynamicAttribute.ValueString;

                                if (!(DependencyValidationOperation == "==" ? InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower() :
                                    DependencyValidationOperation == "!=" ? InputDynamicValue.ToString().ToLower() != DependencyValidationValue.ToString().ToLower() :
                                    DependencyValidationOperation == ">" ? Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == 1 :
                                    DependencyValidationOperation == ">=" ? (Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == 1 ||
                                        InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower()) :
                                    DependencyValidationOperation == "<" ? Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == -1 :
                                    DependencyValidationOperation == "<=" ? (Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == -1 ||
                                        InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower()) : false))
                                {
                                    DynamicAttributeName = _unitOfWork.DynamicAttRepository
                                        .GetWhereFirst(x => x.Id == DynamicAttributeId).Key;

                                    string ReturnOperation = (DependencyValidationOperation == "==" ? "equal to" :
                                        (DependencyValidationOperation == "!=" ? "not equal to" :
                                        (DependencyValidationOperation == ">" ? "bigger than" :
                                        (DependencyValidationOperation == ">=" ? "bigger than or equal to" :
                                        (DependencyValidationOperation == "<" ? "smaller than" :
                                        (DependencyValidationOperation == "<=" ? "smaller than or equal to" : ""))))));

                                    return $"({DynamicAttributeName}) value must be {ReturnOperation} {DependencyValidationValue}";
                                }
                            }
                        }
                    }
                }
            }
            return string.Empty;
        }
        public string CheckGeneralValidationFunction(List<AddDynamicAttInstValueViewModel> TLIdynamicAttInstValue, string TableName)
        {
            List<DynamicAttViewModel> DynamicAttributes = _mapper.Map<List<DynamicAttViewModel>>(_unitOfWork.DynamicAttRepository
                .GetIncludeWhere(x => x.tablesNames.TableName.ToLower() == TableName.ToLower() && !x.disable
                    , x => x.tablesNames).ToList());

            foreach (DynamicAttViewModel DynamicAttributeEntity in DynamicAttributes)
            {
                TLIvalidation Validation = _unitOfWork.ValidationRepository
                    .GetIncludeWhereFirst(x => x.DynamicAttId == DynamicAttributeEntity.Id, x => x.Operation, x => x.DynamicAtt);

                if (Validation != null)
                {
                    AddDynamicAttInstValueViewModel DynmaicAttributeValue = TLIdynamicAttInstValue.FirstOrDefault(x => x.DynamicAttId == DynamicAttributeEntity.Id);

                    if (DynmaicAttributeValue == null)
                        return $"({Validation.DynamicAtt.Key}) value can't be null and must be inserted";

                    string OperationName = Validation.Operation.Name;

                    object InputDynamicValue = new object();

                    if (DynmaicAttributeValue.ValueBoolean != null)
                        InputDynamicValue = DynmaicAttributeValue.ValueBoolean;

                    else if (DynmaicAttributeValue.ValueDateTime != null)
                        InputDynamicValue = DynmaicAttributeValue.ValueDateTime;

                    else if (DynmaicAttributeValue.ValueDouble != null)
                        InputDynamicValue = DynmaicAttributeValue.ValueDouble;

                    else if (!string.IsNullOrEmpty(DynmaicAttributeValue.ValueString))
                        InputDynamicValue = DynmaicAttributeValue.ValueString;

                    object ValidationValue = new object();

                    if (Validation.ValueBoolean != null)
                        ValidationValue = Validation.ValueBoolean;

                    else if (Validation.ValueDateTime != null)
                        ValidationValue = Validation.ValueDateTime;

                    else if (Validation.ValueDouble != null)
                        ValidationValue = Validation.ValueDouble;

                    else if (!string.IsNullOrEmpty(Validation.ValueString))
                        ValidationValue = Validation.ValueString;

                    if (!(OperationName == "==" ? InputDynamicValue.ToString().ToLower() == ValidationValue.ToString().ToLower() :
                        OperationName == "!=" ? InputDynamicValue.ToString().ToLower() != ValidationValue.ToString().ToLower() :
                        OperationName == ">" ? Comparer.DefaultInvariant.Compare(InputDynamicValue, ValidationValue) == 1 :
                        OperationName == ">=" ? (Comparer.DefaultInvariant.Compare(InputDynamicValue, ValidationValue) == 1 ||
                            InputDynamicValue.ToString().ToLower() == ValidationValue.ToString().ToLower()) :
                        OperationName == "<" ? Comparer.DefaultInvariant.Compare(InputDynamicValue, ValidationValue) == -1 :
                        OperationName == "<=" ? (Comparer.DefaultInvariant.Compare(InputDynamicValue, ValidationValue) == -1 ||
                            InputDynamicValue.ToString().ToLower() == ValidationValue.ToString().ToLower()) : false))
                    {
                        string DynamicAttributeName = _unitOfWork.DynamicAttRepository
                            .GetWhereFirst(x => x.Id == Validation.DynamicAttId).Key;

                        string ReturnOperation = (OperationName == "==" ? "equal to" :
                            (OperationName == "!=" ? "not equal to" :
                            (OperationName == ">" ? "bigger than" :
                            (OperationName == ">=" ? "bigger than or equal to" :
                            (OperationName == "<" ? "smaller than" :
                            (OperationName == "<=" ? "smaller than or equal to" : ""))))));

                        return $"({DynamicAttributeName}) value must be {ReturnOperation} {ValidationValue}";
                    }
                }
            }

            return string.Empty;
        }
        #endregion    
        public Response<GetEnableAttribute> GetMWDishInstallationWithEnableAtt(string SiteCode, string ConnectionString)
        {
            using (var connection = new OracleConnection(ConnectionString))
            {
                try
                {
                    GetEnableAttribute getEnableAttribute = new GetEnableAttribute();
                    connection.Open();
                    //string storedProcedureName = "CREATE_DYNAMIC_PIVOT_MWDISH";
                    //using (OracleCommand procedureCommand = new OracleCommand(storedProcedureName, connection))
                    //{
                    //    procedureCommand.CommandType = CommandType.StoredProcedure;
                    //    procedureCommand.ExecuteNonQuery();
                    //}
                    var attActivated = _dbContext.TLIattributeViewManagment.Include(x => x.EditableManagmentView).Include(x => x.AttributeActivated)
                        .Include(x => x.DynamicAtt).Where(x => x.Enable && x.EditableManagmentView.View == "MW_DishInstallation" &&
                        ((x.AttributeActivatedId != null && x.AttributeActivated.enable) || (x.DynamicAttId != null && !x.DynamicAtt.disable)))
                        .Select(x => new { attribute = x.AttributeActivated.Key, dynamic = x.DynamicAtt.Key, dataType = x.DynamicAtt != null ? x.DynamicAtt.DataType.Name.ToString() : x.AttributeActivated.DataType.ToString() })
                      .OrderByDescending(x => x.attribute.ToLower().StartsWith("dishname"))
                            .ThenBy(x => x.attribute == null)
                            .ThenBy(x => x.attribute)
                            .ToList();
                    getEnableAttribute.Type = attActivated;
                    List<string> propertyNamesStatic = new List<string>();
                    Dictionary<string, string> propertyNamesDynamic = new Dictionary<string, string>();
                    foreach (var key in attActivated)
                    {
                        if (key.attribute != null)
                        {
                            string name = key.attribute;
                            if (name != "Id" && name.EndsWith("Id"))
                            {
                                string fk = name.Remove(name.Length - 2);
                                propertyNamesStatic.Add(fk);
                            }
                            else
                            {
                                propertyNamesStatic.Add(name);
                            }

                        }
                        else
                        {
                            string name = key.dynamic;
                            string datatype = key.dataType;
                            propertyNamesDynamic.Add(name, datatype);
                        }

                    }
                    propertyNamesStatic.Add("LEG_NAME");
                    propertyNamesStatic.Add("CIVILNAME");
                    propertyNamesStatic.Add("CIVIL_ID");
                    propertyNamesStatic.Add("SIDEARMNAME");
                    propertyNamesStatic.Add("SIDEARM_ID");
                    propertyNamesStatic.Add("ALLCIVILINST_ID");
                    propertyNamesStatic.Add("LEG_ID");
                    propertyNamesStatic.Add("ODU_COUNT");
                    propertyNamesStatic.Add("POLARITYTYPE");
                    propertyNamesStatic.Add("SideArmSec_Name");
                    propertyNamesStatic.Add("SideArmSec_Id");
                    if (propertyNamesDynamic.Count == 0)
                    {
                        var query = _dbContext.MV_MWDISH_VIEW.Where(x => x.SiteCode.ToLower() == SiteCode.ToLower() && !x.Dismantle).AsEnumerable()
                        .Select(item => _unitOfWork.CivilWithLegsRepository.BuildDynamicSelect(item, null, propertyNamesStatic, propertyNamesDynamic));
                        int count = query.Count();
                        getEnableAttribute.Model = query;
                        return new Response<GetEnableAttribute>(true, getEnableAttribute, null, "Success", (int)Helpers.Constants.ApiReturnCode.success, count);
                    }
                    else
                    {
                        var query = _dbContext.MV_MWDISH_VIEW.Where(x => x.SiteCode.ToLower() == SiteCode.ToLower() && !x.Dismantle).AsEnumerable()
                       .GroupBy(x => new
                       {
                           SiteCode = x.SiteCode,
                           Id = x.Id,
                           DishName = x.DishName,
                           Azimuth = x.Azimuth,
                           Notes = x.Notes,
                           Far_End_Site_Code = x.Far_End_Site_Code,
                           HBA_Surface = x.HBA_Surface,
                           Serial_Number = x.Serial_Number,
                           MW_LINK = x.MW_LINK,
                           Visiable_Status = x.Visiable_Status,
                           SpaceInstallation = x.SpaceInstallation,
                           HeightBase = x.HeightBase,
                           HeightLand = x.HeightLand,
                           Temp = x.Temp,
                           OWNER = x.OWNER,
                           REPEATERTYPE = x.REPEATERTYPE,
                           POLARITYONLOCATION = x.POLARITYONLOCATION,
                           ITEMCONNECTTO = x.ITEMCONNECTTO,
                           MWDISHLIBRARY = x.MWDISHLIBRARY,
                           INSTALLATIONPLACE = x.INSTALLATIONPLACE,
                           CenterHigh = x.CenterHigh,
                           HBA = x.HBA,
                           HieghFromLand = x.HieghFromLand,
                           EquivalentSpace = x.EquivalentSpace,
                           Dismantle = x.Dismantle,
                           LEG_NAME = x.LEG_NAME,
                           CIVILNAME = x.CIVILNAME,
                           CIVIL_ID = x.CIVIL_ID,
                           SIDEARMNAME = x.SIDEARMNAME,
                           SIDEARM_ID = x.SIDEARM_ID,
                           ALLCIVILINST_ID = x.ALLCIVILINST_ID,
                           LEG_ID = x.LEG_ID,
                           ODU_COUNT = x.ODU_COUNT,
                           POLARITYTYPE = x.POLARITYTYPE,
                           SideArmSec_Name = x.SideArmSec_Name,
                           SideArmSec_Id = x.SideArmSec_Id

                       })
                       .Select(x => new { key = x.Key, value = x.ToDictionary(z => z.Key, z => z.INPUTVALUE) })
                       .Select(item => _unitOfWork.CivilWithLegsRepository.BuildDynamicSelect(item.key, item.value, propertyNamesStatic, propertyNamesDynamic));

                        int count = query.Count();

                        getEnableAttribute.Model = query;
                        return new Response<GetEnableAttribute>(true, getEnableAttribute, null, "Success", (int)Helpers.Constants.ApiReturnCode.success, count);
                    }
                }
                catch (Exception err)
                {
                    return new Response<GetEnableAttribute>(false, null, null, err.Message, (int)Helpers.Constants.ApiReturnCode.fail);
                }
            }

        }
        public Response<GetEnableAttribute> GetMWODUInstallationWithEnableAtt(string SiteCode, string ConnectionString)
        {
            using (var connection = new OracleConnection(ConnectionString))
            {
                try
                {
                    GetEnableAttribute getEnableAttribute = new GetEnableAttribute();
                    connection.Open();
                    //string storedProcedureName = "CREATE_DYNAMIC_PIVOT_MWODU";
                    //using (OracleCommand procedureCommand = new OracleCommand(storedProcedureName, connection))
                    //{
                    //    procedureCommand.CommandType = CommandType.StoredProcedure;
                    //    procedureCommand.ExecuteNonQuery();
                    //}
                    var attActivated = _dbContext.TLIattributeViewManagment.Include(x => x.EditableManagmentView).Include(x => x.AttributeActivated)
                        .Include(x => x.DynamicAtt).Where(x => x.Enable && x.EditableManagmentView.View == "MW_ODUInstallation" &&
                        ((x.AttributeActivatedId != null && x.AttributeActivated.enable) || (x.DynamicAttId != null && !x.DynamicAtt.disable)))
                        .Select(x => new { attribute = x.AttributeActivated.Key, dynamic = x.DynamicAtt.Key, dataType = x.DynamicAtt != null ? x.DynamicAtt.DataType.Name.ToString() : x.AttributeActivated.DataType.ToString() })
                      .OrderByDescending(x => x.attribute.ToLower().StartsWith("name"))
                            .ThenBy(x => x.attribute == null)
                            .ThenBy(x => x.attribute)
                            .ToList();
                    getEnableAttribute.Type = attActivated;
                    List<string> propertyNamesStatic = new List<string>();
                    Dictionary<string, string> propertyNamesDynamic = new Dictionary<string, string>();
                    foreach (var key in attActivated)
                    {
                        if (key.attribute != null)
                        {
                            string name = key.attribute;
                            if (name != "Id" && name.EndsWith("Id"))
                            {
                                string fk = name.Remove(name.Length - 2);
                                propertyNamesStatic.Add(fk);
                            }
                            else
                            {
                                propertyNamesStatic.Add(name);
                            }

                        }
                        else
                        {
                            string name = key.dynamic;
                            string datatype = key.dataType;
                            propertyNamesDynamic.Add(name, datatype);
                        }

                    }
                    propertyNamesStatic.Add("SIDEARMNAME");
                    propertyNamesStatic.Add("CIVILNAME");
                    propertyNamesStatic.Add("SIDEARMID");
                    propertyNamesStatic.Add("CIVIL_ID");
                    propertyNamesStatic.Add("ALLCIVILID");

                    if (propertyNamesDynamic.Count == 0)
                    {
                        var query = _dbContext.MV_MWODU_VIEW.Where(x => x.SiteCode.ToLower() == SiteCode.ToLower() && !x.Dismantle).AsEnumerable()
                        .Select(item => _unitOfWork.CivilWithLegsRepository.BuildDynamicSelect(item, null, propertyNamesStatic, propertyNamesDynamic));
                        int count = query.Count();
                        getEnableAttribute.Model = query;
                        return new Response<GetEnableAttribute>(true, getEnableAttribute, null, "Success", (int)Helpers.Constants.ApiReturnCode.success, count);
                    }
                    else
                    {
                        var query = _dbContext.MV_MWODU_VIEW.Where(x => x.SiteCode.ToLower() == SiteCode.ToLower() && !x.Dismantle).AsEnumerable()
                       .GroupBy(x => new
                       {
                           SiteCode = x.SiteCode,
                           Id = x.Id,
                           Name = x.Name,
                           Serial_Number = x.Serial_Number,
                           Notes = x.Notes,
                           Height = x.Height,
                           ODUConnections = x.ODUConnections,
                           Visiable_Status = x.Visiable_Status,
                           SpaceInstallation = x.SpaceInstallation,
                           OWNER = x.OWNER,
                           MW_DISH = x.MW_DISH,
                           ODUINSTALLATIONTYPE = x.ODUINSTALLATIONTYPE,
                           MWODULIBRARY = x.MWODULIBRARY,
                           CenterHigh = x.CenterHigh,
                           HBA = x.HBA,
                           HieghFromLand = x.HieghFromLand,
                           EquivalentSpace = x.EquivalentSpace,
                           Azimuth = x.Azimuth,
                           SIDEARMID = x.SIDEARMID,
                           CIVILNAME = x.CIVILNAME,
                           CIVIL_ID = x.CIVIL_ID,
                           SIDEARMNAME = x.SIDEARMNAME,
                           Dismantle = x.Dismantle,
                           ALLCIVILID = x.ALLCIVILID,

                       })
                       .Select(x => new { key = x.Key, value = x.ToDictionary(z => z.Key, z => z.INPUTVALUE) })
                       .Select(item => _unitOfWork.CivilWithLegsRepository.BuildDynamicSelect(item.key, item.value, propertyNamesStatic, propertyNamesDynamic));

                        int count = query.Count();

                        getEnableAttribute.Model = query;
                        return new Response<GetEnableAttribute>(true, getEnableAttribute, null, "Success", (int)Helpers.Constants.ApiReturnCode.success, count);
                    }
                }
                catch (Exception err)
                {
                    return new Response<GetEnableAttribute>(false, null, null, err.Message, (int)Helpers.Constants.ApiReturnCode.fail);
                }
            }

        }
        public Response<GetForAddMWDishInstallationObject> AddMWInstallation(int UserId, object MWInstallationViewModel, string TableName, string SiteCode, string ConnectionString, int? TaskId)
        {
            using (var con = new OracleConnection(ConnectionString))
            {
                con.Open();
                using (var tran = con.BeginTransaction())
                {
                    using (TransactionScope transaction = new TransactionScope())
                    {
                        try
                        {
                            string ErrorMessage = string.Empty;
                            var TableNameEntity = _unitOfWork.TablesNamesRepository.GetWhereFirst(x => x.TableName == TableName);

                            if (LoadSubType.TLImwODU.ToString() == TableName)
                            {
                                AddMwODUinstallationObject AddMW_ODU = _mapper.Map<AddMwODUinstallationObject>(MWInstallationViewModel);
                                TLImwODU mwODU = _mapper.Map<TLImwODU>(AddMW_ODU.installationAttributes);
                                var MWODULibrary = _unitOfWork.MW_ODULibraryRepository.GetWhereFirst(x => x.Id == AddMW_ODU.installationConfig.MwODULibraryId
                                && !x.Deleted && x.Active);
                                if (MWODULibrary == null)
                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "MWDishLibrary is not found", (int)ApiReturnCode.fail);

                                if (AddMW_ODU.installationConfig.InstallationPlaceId == 1)
                                {
                                    if (AddMW_ODU.installationConfig?.civilSteelType == 0)
                                    {
                                        if (AddMW_ODU.installationConfig?.civilWithLegId != null)
                                        {
                                            TLIcivilLoads tLImwDish = null;
                                            TLIcivilSiteDate CivilFound = _unitOfWork.CivilSiteDateRepository.GetWhereFirst(x => x.allCivilInst.civilWithLegsId
                                            == AddMW_ODU.installationConfig.civilWithLegId && !x.Dismantle && x.SiteCode.ToLower() ==
                                            SiteCode.ToLower());
                                            if (CivilFound == null)
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Civil is not found", (int)ApiReturnCode.fail);

                                            if (AddMW_ODU.installationConfig?.mwDishId != null)
                                            {
                                                if (AddMW_ODU.installationConfig?.LegId != null)
                                                {
                                                     tLImwDish = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => x.allLoadInstId != null
                                                    && !x.Dismantle && x.allLoadInst.mwDishId == AddMW_ODU.installationConfig.mwDishId && x.allCivilInst.civilWithLegsId ==
                                                    AddMW_ODU.installationConfig.civilWithLegId && x.legId == AddMW_ODU.installationConfig.LegId && x.SiteCode.ToLower() == SiteCode.ToLower(),
                                                    x => x.allLoadInst, x => x.allLoadInst.mwDish, x => x.allLoadInst.mwDish.MwDishLibrary,
                                                    x => x.allLoadInst.mwDish.MwDishLibrary.polarityType, x => x.allCivilInst, x => x.allCivilInst.civilWithLegs);
                                                    if (tLImwDish == null)
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "MWDish is not found", (int)ApiReturnCode.fail);

                                                }
                                                else
                                                {
                                                     tLImwDish = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => x.allLoadInstId != null
                                                    && !x.Dismantle && x.allLoadInst.mwDishId == AddMW_ODU.installationConfig.mwDishId && x.allCivilInst.civilWithLegsId ==
                                                    AddMW_ODU.installationConfig.civilWithLegId && x.SiteCode.ToLower() == SiteCode.ToLower(),
                                                    x => x.allLoadInst, x => x.allLoadInst.mwDish, x => x.allLoadInst.mwDish.MwDishLibrary,
                                                    x => x.allLoadInst.mwDish.MwDishLibrary.polarityType, x => x.allCivilInst, x => x.allCivilInst.civilWithLegs);
                                                    if (tLImwDish == null)
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "MWDish is not found", (int)ApiReturnCode.fail);
                                                }
                                                List<TLIcivilLoads> tLImwDishCount = _unitOfWork.CivilLoadsRepository.GetIncludeWhere(x => x.allLoadInstId != null
                                                && !x.Dismantle && x.allLoadInst.mwODU.Mw_DishId == AddMW_ODU.installationConfig.mwDishId && x.allCivilInst.civilWithLegsId ==
                                                AddMW_ODU.installationConfig.civilWithLegId && x.SiteCode.ToLower() == SiteCode.ToLower(),
                                                x => x.allLoadInst, x => x.allLoadInst.mwODU, x => x.allLoadInst.mwODU.Mw_Dish, x => x.allLoadInst.mwODU.Mw_Dish.MwDishLibrary
                                                , x => x.allCivilInst, x => x.allCivilInst.civilWithLegs).ToList();

                                                if (tLImwDishCount != null && tLImwDishCount.Count == 1 && tLImwDish.allLoadInst.mwDish.MwDishLibrary.polarityType.Name.ToLower() == "single")
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"can not selected this MWDish because found other MWODU installed directly and polarityType to MWDish is single ", (int)ApiReturnCode.fail);
                                                else if (tLImwDishCount != null && tLImwDishCount.Count == 2 && tLImwDish.allLoadInst.mwDish.MwDishLibrary.polarityType.Name.ToLower() == "dual")
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"can not selected this MWDish because found tow MWODU installed directly and polarityType to MWDish is dual ", (int)ApiReturnCode.fail);

                                                if (tLImwDish.allLoadInst.mwDish != null && MWODULibrary != null)
                                                {
                                                    mwODU.Name = tLImwDish.allLoadInst.mwDish.DishName + ' ' + tLImwDish.allLoadInst.mwDish.MwDishLibrary.Model + ' ' + tLImwDish.allLoadInst.
                                                       mwDish.MwDishLibrary.polarityType.Name;
                                                }
                                                var CheckName = _dbContext.MV_MWODU_VIEW.FirstOrDefault(x => !x.Dismantle &&
                                                                                 (x.Id != null ? x.Name.ToLower() == mwODU.Name.ToLower() : false
                                                                                    && x.SiteCode.ToLower() == SiteCode.ToLower()));
                                                if (CheckName != null)
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The name {mwODU.Name} is already exists", (int)Helpers.Constants.ApiReturnCode.fail);

                                                if (!string.IsNullOrEmpty(mwODU.Serial_Number))
                                                {
                                                    bool CheckSerialNumber = _dbContext.MV_MWODU_VIEW.Any(x => x.Serial_Number == mwODU.Serial_Number && !x.Dismantle);
                                                    if (CheckSerialNumber)
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The Serial Number {mwODU.Serial_Number} is already exists", (int)ApiReturnCode.fail);
                                                }
                                                mwODU.MwODULibraryId = AddMW_ODU.installationConfig.MwODULibraryId;
                                                mwODU.Mw_DishId = AddMW_ODU.installationConfig.mwDishId;
                                                mwODU.OduInstallationTypeId = AddMW_ODU.installationConfig.InstallationPlaceId;
                                                _unitOfWork.MW_ODURepository.AddWithHistory(UserId, mwODU);
                                                _unitOfWork.SaveChanges();
                                                int Id = _unitOfWork.AllLoadInstRepository.AddAllLoadInst(LoadSubType.TLImwODU.ToString(), mwODU.Id);
                                                if (AddMW_ODU.civilLoads != null && Id != 0)
                                                {
                                                    TLIcivilLoads tLIcivilLoads = new TLIcivilLoads()
                                                    {
                                                        InstallationDate = AddMW_ODU.civilLoads.InstallationDate,
                                                        allLoadInstId = Id,
                                                        allCivilInstId = tLImwDish.allCivilInstId,
                                                        ItemOnCivilStatus = AddMW_ODU.civilLoads.ItemOnCivilStatus,
                                                        ItemStatus = AddMW_ODU.civilLoads?.ItemStatus,
                                                        Dismantle = false,
                                                        ReservedSpace = false,
                                                        SiteCode = SiteCode,
                                                        sideArmId = tLImwDish?.sideArmId,
                                                        legId = tLImwDish?.legId,
                                                        sideArm2Id = tLImwDish?.sideArm2Id,
                                                        Leg2Id = tLImwDish?.Leg2Id,

                                                    };
                                                    _unitOfWork.CivilLoadsRepository.AddWithHistory(UserId, tLIcivilLoads);
                                                    _unitOfWork.SaveChanges();

                                                }
                                                if (AddMW_ODU.dynamicAttribute != null ? AddMW_ODU.dynamicAttribute.Count > 0 : false)
                                                {
                                                    foreach (var DynamicAttInstValue in AddMW_ODU.dynamicAttribute)
                                                    {
                                                        _unitOfWork.DynamicAttInstValueRepository.AddDdynamicAttributeInstallation(UserId, DynamicAttInstValue, TableNameEntity.Id, mwODU.Id, ConnectionString);
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "must selected MWDish to installed this MWODU", (int)ApiReturnCode.fail);
                                            }
                                        }
                                        else
                                        {
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "must selected civilwithlegs to installed this MWODU", (int)ApiReturnCode.fail);
                                        }
                                    }
                                    else if (AddMW_ODU.installationConfig?.civilSteelType == 1)
                                    {
                                        if (AddMW_ODU.installationConfig?.civilWithoutLegId != null)
                                        {
                                            TLIcivilSiteDate CivilFound = _unitOfWork.CivilSiteDateRepository.GetWhereFirst(x => x.allCivilInst.civilWithoutLegId == AddMW_ODU.installationConfig.civilWithoutLegId
                                            && !x.Dismantle && x.SiteCode.ToLower() == SiteCode.ToLower());
                                            if (CivilFound == null)
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Civil is not found", (int)ApiReturnCode.fail);

                                            if (AddMW_ODU.installationConfig?.mwDishId != null)
                                            {
                                                TLIcivilLoads tLImwDish = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => x.allLoadInstId != null
                                                && !x.Dismantle && x.allLoadInst.mwDishId == AddMW_ODU.installationConfig.mwDishId && x.allCivilInst.civilWithoutLegId ==
                                                AddMW_ODU.installationConfig.civilWithoutLegId && x.SiteCode.ToLower() == SiteCode.ToLower(),
                                                x => x.allLoadInst, x => x.allLoadInst.mwDish, x => x.allLoadInst.mwDish.MwDishLibrary,
                                                x => x.allLoadInst.mwDish.MwDishLibrary.polarityType, x => x.allCivilInst, x => x.allCivilInst.civilWithoutLeg);
                                                if (tLImwDish == null)
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "MWDish is not found", (int)ApiReturnCode.fail);
                                                List<TLIcivilLoads> tLImwDishCount = _unitOfWork.CivilLoadsRepository.GetIncludeWhere(x => x.allLoadInstId != null
                                                && !x.Dismantle && x.allLoadInst.mwODU.Mw_DishId == AddMW_ODU.installationConfig.mwDishId && x.allCivilInst.civilWithoutLegId ==
                                                AddMW_ODU.installationConfig.civilWithoutLegId && x.SiteCode.ToLower() == SiteCode.ToLower(),
                                                x => x.allLoadInst, x => x.allLoadInst.mwODU, x => x.allLoadInst.mwODU.Mw_Dish, x => x.allLoadInst.mwODU.Mw_Dish.MwDishLibrary
                                                , x => x.allCivilInst, x => x.allCivilInst.civilWithoutLeg).ToList();

                                                if (tLImwDishCount != null && tLImwDishCount.Count == 1 && tLImwDish.allLoadInst.mwDish.MwDishLibrary.polarityType.Name.ToLower() == "single")
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"can not selected this MWDish because found other MWODU installed directly and polarityType to MWDish is single ", (int)ApiReturnCode.fail);
                                                else if (tLImwDishCount != null && tLImwDishCount.Count == 2 && tLImwDish.allLoadInst.mwDish.MwDishLibrary.polarityType.Name.ToLower() == "dual")
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"can not selected this MWDish because found tow MWODU installed directly and polarityType to MWDish is dual ", (int)ApiReturnCode.fail);

                                                if (tLImwDish.allLoadInst.mwDish != null && MWODULibrary != null)
                                                {
                                                    mwODU.Name = tLImwDish.allLoadInst.mwDish.DishName + ' ' + tLImwDish.allLoadInst.mwDish.MwDishLibrary.Model + ' ' + tLImwDish.allLoadInst.
                                                       mwDish.MwDishLibrary.polarityType.Name;
                                                }
                                                var CheckName = _dbContext.MV_MWODU_VIEW.FirstOrDefault(x => !x.Dismantle &&
                                                                                 (x.Id != null ? x.Name.ToLower() == mwODU.Name.ToLower() : false
                                                                                    && x.SiteCode.ToLower() == SiteCode.ToLower()));
                                                if (CheckName != null)
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The name {mwODU.Name} is already exists", (int)Helpers.Constants.ApiReturnCode.fail);

                                                if (!string.IsNullOrEmpty(mwODU.Serial_Number))
                                                {
                                                    bool CheckSerialNumber = _dbContext.MV_MWODU_VIEW.Any(x => x.Serial_Number == mwODU.Serial_Number && !x.Dismantle);
                                                    if (CheckSerialNumber)
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The Serial Number {mwODU.Serial_Number} is already exists", (int)ApiReturnCode.fail);
                                                }
                                                mwODU.MwODULibraryId = AddMW_ODU.installationConfig.MwODULibraryId;
                                                mwODU.Mw_DishId = AddMW_ODU.installationConfig.mwDishId;
                                                mwODU.OduInstallationTypeId = AddMW_ODU.installationConfig.InstallationPlaceId;
                                                _unitOfWork.MW_ODURepository.AddWithHistory(UserId, mwODU);
                                                _unitOfWork.SaveChanges();
                                                int Id = _unitOfWork.AllLoadInstRepository.AddAllLoadInst(LoadSubType.TLImwODU.ToString(), mwODU.Id);
                                                if (AddMW_ODU.civilLoads != null && Id != 0)
                                                {
                                                    TLIcivilLoads tLIcivilLoads = new TLIcivilLoads()
                                                    {
                                                        InstallationDate = AddMW_ODU.civilLoads.InstallationDate,
                                                        allLoadInstId = Id,
                                                        allCivilInstId = tLImwDish.allCivilInstId,
                                                        ItemOnCivilStatus = AddMW_ODU.civilLoads.ItemOnCivilStatus,
                                                        ItemStatus = AddMW_ODU.civilLoads?.ItemStatus,
                                                        Dismantle = false,
                                                        ReservedSpace = false,
                                                        SiteCode = SiteCode,
                                                        sideArmId = tLImwDish?.sideArmId,
                                                        legId = tLImwDish?.legId,
                                                        sideArm2Id = tLImwDish?.sideArm2Id,
                                                        Leg2Id = tLImwDish?.Leg2Id,

                                                    };
                                                    _unitOfWork.CivilLoadsRepository.AddWithHistory(UserId, tLIcivilLoads);
                                                    _unitOfWork.SaveChanges();

                                                }

                                                if (AddMW_ODU.dynamicAttribute != null ? AddMW_ODU.dynamicAttribute.Count > 0 : false)
                                                {
                                                    foreach (var DynamicAttInstValue in AddMW_ODU.dynamicAttribute)
                                                    {
                                                        _unitOfWork.DynamicAttInstValueRepository.AddDdynamicAttributeInstallation(UserId, DynamicAttInstValue, TableNameEntity.Id, mwODU.Id, ConnectionString);
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "must selected MWDish to installed this MWODU", (int)ApiReturnCode.fail);
                                            }
                                        }
                                        else
                                        {
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "must selected civilwithoutlegs to installed this MWODU", (int)ApiReturnCode.fail);
                                        }
                                    }
                                    else if (AddMW_ODU.installationConfig?.civilSteelType == 2)
                                    {
                                        if (AddMW_ODU.installationConfig?.civilNonSteelId != null)
                                        {
                                            TLIcivilSiteDate CivilFound = _unitOfWork.CivilSiteDateRepository.GetWhereFirst(x => x.allCivilInst.civilNonSteelId == AddMW_ODU.installationConfig.civilNonSteelId
                                            && !x.Dismantle && x.SiteCode.ToLower() == SiteCode.ToLower());
                                            if (CivilFound == null)
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Civil is not found", (int)ApiReturnCode.fail);

                                            if (AddMW_ODU.installationConfig?.mwDishId != null)
                                            {
                                                TLIcivilLoads tLImwDish = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => x.allLoadInstId != null
                                                && !x.Dismantle && x.allLoadInst.mwDishId == AddMW_ODU.installationConfig.mwDishId && x.allCivilInst.civilNonSteelId ==
                                                AddMW_ODU.installationConfig.civilNonSteelId && x.SiteCode.ToLower() == SiteCode.ToLower(),
                                                x => x.allLoadInst, x => x.allLoadInst.mwDish, x => x.allLoadInst.mwDish.MwDishLibrary,
                                                x => x.allLoadInst.mwDish.MwDishLibrary.polarityType, x => x.allCivilInst, x => x.allCivilInst.civilNonSteel);
                                                if (tLImwDish == null)
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "MWDish is not found", (int)ApiReturnCode.fail);
                                                List<TLIcivilLoads> tLImwDishCount = _unitOfWork.CivilLoadsRepository.GetIncludeWhere(x => x.allLoadInstId != null
                                                && !x.Dismantle && x.allLoadInst.mwODU.Mw_DishId == AddMW_ODU.installationConfig.mwDishId && x.allCivilInst.civilNonSteelId ==
                                                AddMW_ODU.installationConfig.civilNonSteelId && x.SiteCode.ToLower() == SiteCode.ToLower(),
                                                x => x.allLoadInst, x => x.allLoadInst.mwODU, x => x.allLoadInst.mwODU.Mw_Dish, x => x.allLoadInst.mwODU.Mw_Dish.MwDishLibrary
                                                , x => x.allCivilInst, x => x.allCivilInst.civilNonSteel).ToList();

                                                if (tLImwDishCount != null && tLImwDishCount.Count == 1 && tLImwDish.allLoadInst.mwDish.MwDishLibrary.polarityType.Name.ToLower() == "single")
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"can not selected this MWDish because found other MWODU installed directly and polarityType to MWDish is single ", (int)ApiReturnCode.fail);
                                                else if (tLImwDishCount != null && tLImwDishCount.Count == 2 && tLImwDish.allLoadInst.mwDish.MwDishLibrary.polarityType.Name.ToLower() == "dual")
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"can not selected this MWDish because found tow MWODU installed directly and polarityType to MWDish is dual ", (int)ApiReturnCode.fail);

                                                if (tLImwDish.allLoadInst.mwDish != null && MWODULibrary != null)
                                                {
                                                    mwODU.Name = tLImwDish.allLoadInst.mwDish.DishName + ' ' + tLImwDish.allLoadInst.mwDish.MwDishLibrary.Model + ' ' + tLImwDish.allLoadInst.
                                                       mwDish.MwDishLibrary.polarityType.Name;
                                                }
                                                var CheckName = _dbContext.MV_MWODU_VIEW.FirstOrDefault(x => !x.Dismantle &&
                                                                                 (x.Id != null ? x.Name.ToLower() == mwODU.Name.ToLower() : false
                                                                                    && x.SiteCode.ToLower() == SiteCode.ToLower()));
                                                if (CheckName != null)
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The name {mwODU.Name} is already exists", (int)Helpers.Constants.ApiReturnCode.fail);

                                                if (!string.IsNullOrEmpty(mwODU.Serial_Number))
                                                {
                                                    bool CheckSerialNumber = _dbContext.MV_MWODU_VIEW.Any(x => x.Serial_Number == mwODU.Serial_Number && !x.Dismantle);
                                                    if (CheckSerialNumber)
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The Serial Number {mwODU.Serial_Number} is already exists", (int)ApiReturnCode.fail);
                                                }
                                                mwODU.MwODULibraryId = AddMW_ODU.installationConfig.MwODULibraryId;
                                                mwODU.Mw_DishId = AddMW_ODU.installationConfig.mwDishId;
                                                mwODU.OduInstallationTypeId = AddMW_ODU.installationConfig.InstallationPlaceId;
                                                _unitOfWork.MW_ODURepository.AddWithHistory(UserId, mwODU);
                                                _unitOfWork.SaveChanges();
                                                int Id = _unitOfWork.AllLoadInstRepository.AddAllLoadInst(LoadSubType.TLImwODU.ToString(), mwODU.Id);
                                                if (AddMW_ODU.civilLoads != null && Id != 0)
                                                {
                                                    TLIcivilLoads tLIcivilLoads = new TLIcivilLoads()
                                                    {
                                                        InstallationDate = AddMW_ODU.civilLoads.InstallationDate,
                                                        allLoadInstId = Id,
                                                        allCivilInstId = tLImwDish.allCivilInstId,
                                                        ItemOnCivilStatus = AddMW_ODU.civilLoads.ItemOnCivilStatus,
                                                        ItemStatus = AddMW_ODU.civilLoads?.ItemStatus,
                                                        Dismantle = false,
                                                        ReservedSpace = false,
                                                        SiteCode = SiteCode,
                                                        sideArmId = tLImwDish?.sideArmId,
                                                        legId = tLImwDish?.legId,
                                                        sideArm2Id = tLImwDish?.sideArm2Id,
                                                        Leg2Id = tLImwDish?.Leg2Id,

                                                    };
                                                    _unitOfWork.CivilLoadsRepository.AddWithHistory(UserId, tLIcivilLoads);
                                                    _unitOfWork.SaveChanges();

                                                }

                                                if (AddMW_ODU.dynamicAttribute != null ? AddMW_ODU.dynamicAttribute.Count > 0 : false)
                                                {
                                                    foreach (var DynamicAttInstValue in AddMW_ODU.dynamicAttribute)
                                                    {
                                                        _unitOfWork.DynamicAttInstValueRepository.AddDdynamicAttributeInstallation(UserId, DynamicAttInstValue, TableNameEntity.Id, mwODU.Id, ConnectionString);
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "must selected civilnonsteel to installed this MWODU", (int)ApiReturnCode.fail);
                                        }
                                    }

                                }
                                else if (AddMW_ODU.installationConfig.InstallationPlaceId == 2)
                                {
                                    if (AddMW_ODU.installationConfig?.civilSteelType == 0)
                                    {
                                        if (AddMW_ODU.installationConfig?.civilWithLegId != null)
                                        {
                                            TLIcivilSiteDate CivilFound = _unitOfWork.CivilSiteDateRepository.GetWhereFirst(x => x.allCivilInst.civilWithLegsId ==
                                            AddMW_ODU.installationConfig.civilWithLegId && !x.Dismantle && x.SiteCode.ToLower() == SiteCode.ToLower());
                                            if (CivilFound == null)
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Civil is not found", (int)ApiReturnCode.fail);

                                            if (AddMW_ODU.installationConfig?.sideArmId != null)
                                            {
                                                TLIcivilLoads tLImwDish = null;
                                                TLIcivilLoads SideARmFound = _unitOfWork.CivilLoadsRepository.GetWhereFirst(x => !x.Dismantle && x.sideArmId != null &&
                                                x.allCivilInstId != null && x.allCivilInstId == CivilFound.allCivilInstId && x.SiteCode.ToLower() == SiteCode.ToLower());
                                                if (SideARmFound == null)
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "sidearm is not found on civil", (int)ApiReturnCode.fail);

                                                if (AddMW_ODU.installationConfig?.mwDishId != null)
                                                {
                                                    if (AddMW_ODU.installationConfig?.LegId != null)
                                                    {

                                                        tLImwDish = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => x.allLoadInstId != null
                                                        && !x.Dismantle && x.sideArmId != null && x.allCivilInstId != null && x.allCivilInstId == CivilFound.allCivilInstId
                                                        && x.allLoadInst.mwDishId == AddMW_ODU.installationConfig.mwDishId && x.legId == AddMW_ODU.installationConfig.LegId && x.SiteCode.ToLower() == SiteCode.ToLower(),
                                                        x => x.allLoadInst, x => x.allLoadInst.mwDish, x => x.allLoadInst.mwDish.MwDishLibrary, x => x.allCivilInst, x => x.sideArm);
                                                        if (tLImwDish == null)
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "MWDish is not found", (int)ApiReturnCode.fail);

                                                    }
                                                    else
                                                    {

                                                        tLImwDish = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => x.allLoadInstId != null
                                                        && !x.Dismantle && x.sideArmId != null && x.allCivilInstId != null && x.allCivilInstId == CivilFound.allCivilInstId
                                                        && x.allLoadInst.mwDishId == AddMW_ODU.installationConfig.mwDishId && x.SiteCode.ToLower() == SiteCode.ToLower(),
                                                        x => x.allLoadInst, x => x.allLoadInst.mwDish, x => x.allLoadInst.mwDish.MwDishLibrary, x => x.allCivilInst, x => x.sideArm);
                                                        if (tLImwDish == null)
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "MWDish is not found", (int)ApiReturnCode.fail);

                                                    }
                                                    List<TLIcivilLoads> tLImwDishCount = _unitOfWork.CivilLoadsRepository.GetIncludeWhere(x => x.allLoadInstId != null
                                                    && !x.Dismantle && x.allLoadInst.mwODU.Mw_DishId == AddMW_ODU.installationConfig.mwDishId && x.SiteCode.ToLower() == SiteCode.ToLower(),
                                                    x => x.allLoadInst, x => x.allLoadInst.mwODU, x => x.allLoadInst.mwODU.Mw_Dish, x => x.allLoadInst.mwODU.Mw_Dish.MwDishLibrary).ToList();

                                                    if (tLImwDishCount != null && tLImwDishCount.Count == 1 && tLImwDish.allLoadInst.mwDish.MwDishLibrary.polarityType.Name.ToLower() == "single")
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"can not selected this MWDish because found other MWODU installed directly and polarityType to MWDish is single ", (int)ApiReturnCode.fail);
                                                    else if (tLImwDishCount != null && tLImwDishCount.Count == 2 && tLImwDish.allLoadInst.mwDish.MwDishLibrary.polarityType.Name.ToLower() == "dual")
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"can not selected this MWDish because found tow MWODU installed directly and polarityType to MWDish is dual ", (int)ApiReturnCode.fail);
                                                    if (!string.IsNullOrEmpty(mwODU.Serial_Number))
                                                    {
                                                        bool CheckSerialNumber = _dbContext.MV_MWODU_VIEW.Any(x => x.Serial_Number == mwODU.Serial_Number && !x.Dismantle);
                                                        if (CheckSerialNumber)
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The Serial Number {mwODU.Serial_Number} is already exists", (int)ApiReturnCode.fail);
                                                    }
                                                    if (AddMW_ODU.civilLoads.ReservedSpace == true)
                                                    {
                                                        var Message = _unitOfWork.CivilWithLegsRepository.CheckAvailableSpaceOnCivils(CivilFound.allCivilInst).Message;

                                                        if (Message != "Success")
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(true, null, null, Message, (int)ApiReturnCode.fail);
                                                        }
                                                        if (mwODU.CenterHigh <= 0)
                                                        {
                                                            if (mwODU.HBA <= 0)
                                                            {
                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HBA_Surface must bigger from zero", (int)ApiReturnCode.fail);
                                                            }
                                                            else if (MWODULibrary.Height <= 0)
                                                            {
                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "CenterHigh must bigger from zero", (int)ApiReturnCode.fail);
                                                            }
                                                            else
                                                            {
                                                                mwODU.CenterHigh = mwODU.HBA + MWODULibrary.Height / 2;
                                                            }
                                                        }
                                                        if (mwODU.SpaceInstallation == 0)
                                                        {
                                                            if (MWODULibrary.SpaceLibrary == 0)
                                                            {
                                                                if (MWODULibrary.Height == 0)
                                                                {
                                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "SpaceInstallation must bigger from zero", (int)ApiReturnCode.fail);
                                                                }
                                                                mwODU.SpaceInstallation = MWODULibrary.Height * MWODULibrary.Width;
                                                            }
                                                            else
                                                            {
                                                                mwODU.SpaceInstallation = MWODULibrary.SpaceLibrary;
                                                            }
                                                        }

                                                        if (mwODU.Azimuth <= 0)
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Azimuth must bigger from zero", (int)ApiReturnCode.fail);
                                                        }
                                                        if (mwODU.Height <= 0)
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HeightBase must bigger from zero", (int)ApiReturnCode.fail);
                                                        }
                                                        var CheckAzimuthAndHeightBase = _dbContext.MV_MWODU_VIEW.Where(
                                                        x => x.ALLCIVILID == CivilFound.allCivilInst.Id &&
                                                        x.SIDEARMID == AddMW_ODU.installationConfig.sideArmId && x.Azimuth ==
                                                        mwODU.Azimuth && x.Height == mwODU.Height).ToList();

                                                        if (CheckAzimuthAndHeightBase != null)
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the ODU on same azimuth and height because found other ODU in same angle", (int)ApiReturnCode.fail);
                                                        }

                                                        if (tLImwDish.allLoadInst.mwDish != null && MWODULibrary != null)
                                                        {
                                                            mwODU.Name = tLImwDish.allLoadInst.mwDish.DishName + ' ' + MWODULibrary.Model + ' ' + tLImwDish.allLoadInst.
                                                               mwDish.MwDishLibrary.polarityType.Name;
                                                        }
                                                        var CheckName = _dbContext.MV_MWODU_VIEW.FirstOrDefault(x => !x.Dismantle &&
                                                                        (x.Id != null ? x.Name.ToLower() == mwODU.Name.ToLower() : false
                                                                           && x.SiteCode.ToLower() == SiteCode.ToLower()));
                                                        if (CheckName != null)
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The name {mwODU.Name} is already exists", (int)Helpers.Constants.ApiReturnCode.fail);

                                                        if (CivilFound.allCivilInst.civilWithLegs?.CurrentLoads == null)
                                                        {
                                                            CivilFound.allCivilInst.civilWithLegs.CurrentLoads = 0;
                                                        }
                                                        var OldVcivilinfo = _dbContext.TLIcivilWithLegs.AsNoTracking().FirstOrDefault(x => x.Id == CivilFound.allCivilInst.civilWithLegsId);

                                                        if (OldVcivilinfo != null)
                                                        {
                                                            if (mwODU.SpaceInstallation != 0 && mwODU.CenterHigh != 0 && CivilFound.allCivilInst.civilWithLegs.HeightBase != 0)
                                                            {
                                                                var EquivalentSpace = mwODU.SpaceInstallation * (mwODU.CenterHigh / CivilFound.allCivilInst.civilWithLegs.HeightBase);

                                                                CivilFound.allCivilInst.civilWithLegs.CurrentLoads += EquivalentSpace;
                                                                mwODU.EquivalentSpace = EquivalentSpace;
                                                                _unitOfWork.CivilWithLegsRepository.UpdateWithHistory(UserId, OldVcivilinfo, CivilFound.allCivilInst.civilWithLegs);
                                                                _unitOfWork.SaveChanges();
                                                            }
                                                        }

                                                        mwODU.MwODULibraryId = AddMW_ODU.installationConfig.MwODULibraryId;
                                                        mwODU.Mw_DishId = AddMW_ODU.installationConfig.mwDishId;
                                                        mwODU.OduInstallationTypeId = AddMW_ODU.installationConfig.InstallationPlaceId;
                                                        _unitOfWork.MW_ODURepository.AddWithHistory(UserId, mwODU);
                                                        _unitOfWork.SaveChanges();
                                                        int Id = _unitOfWork.AllLoadInstRepository.AddAllLoadInst(LoadSubType.TLImwODU.ToString(), mwODU.Id);
                                                        if (AddMW_ODU.civilLoads != null && Id != 0)
                                                        {
                                                            TLIcivilLoads tLIcivilLoads = new TLIcivilLoads()
                                                            {
                                                                InstallationDate = AddMW_ODU.civilLoads.InstallationDate,
                                                                allLoadInstId = Id,
                                                                allCivilInstId = CivilFound.allCivilInstId,
                                                                sideArmId = AddMW_ODU.installationConfig?.sideArmId,
                                                                ItemOnCivilStatus = AddMW_ODU.civilLoads.ItemOnCivilStatus,
                                                                ItemStatus = AddMW_ODU.civilLoads?.ItemStatus,
                                                                Dismantle = false,
                                                                ReservedSpace = AddMW_ODU.civilLoads.ReservedSpace,
                                                                SiteCode = SiteCode

                                                            };
                                                            _unitOfWork.CivilLoadsRepository.AddWithHistory(UserId, tLIcivilLoads);
                                                            _unitOfWork.SaveChanges();

                                                        }

                                                        if (AddMW_ODU.dynamicAttribute != null ? AddMW_ODU.dynamicAttribute.Count > 0 : false)
                                                        {
                                                            foreach (var DynamicAttInstValue in AddMW_ODU.dynamicAttribute)
                                                            {
                                                                _unitOfWork.DynamicAttInstValueRepository.AddDdynamicAttributeInstallation(UserId, DynamicAttInstValue, TableNameEntity.Id, mwODU.Id, ConnectionString);
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (mwODU.CenterHigh <= 0)
                                                        {
                                                            if (mwODU.HBA <= 0)
                                                            {
                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HBA_Surface must bigger from zero", (int)ApiReturnCode.fail);
                                                            }
                                                            else if (MWODULibrary.Height <= 0)
                                                            {
                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "CenterHigh must bigger from zero", (int)ApiReturnCode.fail);
                                                            }
                                                            else
                                                            {
                                                                mwODU.CenterHigh = mwODU.HBA + MWODULibrary.Height / 2;
                                                            }
                                                        }
                                                        if (mwODU.SpaceInstallation == 0)
                                                        {
                                                            if (MWODULibrary.SpaceLibrary == 0)
                                                            {
                                                                if (MWODULibrary.Height == 0)
                                                                {
                                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "SpaceInstallation must bigger from zero", (int)ApiReturnCode.fail);
                                                                }
                                                                mwODU.SpaceInstallation = MWODULibrary.Height * MWODULibrary.Width;
                                                            }
                                                            else
                                                            {
                                                                mwODU.SpaceInstallation = MWODULibrary.SpaceLibrary;
                                                            }
                                                        }

                                                        if (mwODU.Azimuth <= 0)
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Azimuth must bigger from zero", (int)ApiReturnCode.fail);
                                                        }
                                                        if (mwODU.Height <= 0)
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HeightBase must bigger from zero", (int)ApiReturnCode.fail);
                                                        }

                                                        var CheckAzimuthAndHeightBase = _dbContext.MV_MWODU_VIEW.Where(
                                                       x => x.ALLCIVILID == CivilFound.allCivilInst.Id &&
                                                       x.SIDEARMID == AddMW_ODU.installationConfig.sideArmId && x.Azimuth ==
                                                       mwODU.Azimuth && x.Height == mwODU.Height).ToList();

                                                        if (CheckAzimuthAndHeightBase != null)
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the ODU on same azimuth and height because found other ODU in same angle", (int)ApiReturnCode.fail);
                                                        }

                                                        if (tLImwDish.allLoadInst.mwDish != null && MWODULibrary != null)
                                                        {
                                                            mwODU.Name = tLImwDish.allLoadInst.mwDish.DishName + ' ' + MWODULibrary.Model + ' ' + tLImwDish.allLoadInst.
                                                               mwDish.MwDishLibrary.polarityType.Name;
                                                        }
                                                        var CheckName = _dbContext.MV_MWODU_VIEW.FirstOrDefault(x => !x.Dismantle &&
                                                                        (x.Id != null ? x.Name.ToLower() == mwODU.Name.ToLower() : false
                                                                           && x.SiteCode.ToLower() == SiteCode.ToLower()));
                                                        if (CheckName != null)
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The name {mwODU.Name} is already exists", (int)Helpers.Constants.ApiReturnCode.fail);

                                                        mwODU.MwODULibraryId = AddMW_ODU.installationConfig.MwODULibraryId;
                                                        mwODU.Mw_DishId = AddMW_ODU.installationConfig.mwDishId;
                                                        mwODU.OduInstallationTypeId = AddMW_ODU.installationConfig.InstallationPlaceId;
                                                        _unitOfWork.MW_ODURepository.AddWithHistory(UserId, mwODU);
                                                        _unitOfWork.SaveChanges();
                                                        int Id = _unitOfWork.AllLoadInstRepository.AddAllLoadInst(LoadSubType.TLImwODU.ToString(), mwODU.Id);
                                                        if (AddMW_ODU.civilLoads != null && Id != 0)
                                                        {
                                                            TLIcivilLoads tLIcivilLoads = new TLIcivilLoads()
                                                            {
                                                                InstallationDate = AddMW_ODU.civilLoads.InstallationDate,
                                                                allLoadInstId = Id,
                                                                allCivilInstId = CivilFound.allCivilInstId,
                                                                sideArmId = AddMW_ODU.installationConfig?.sideArmId,
                                                                ItemOnCivilStatus = AddMW_ODU.civilLoads.ItemOnCivilStatus,
                                                                ItemStatus = AddMW_ODU.civilLoads?.ItemStatus,
                                                                Dismantle = false,
                                                                ReservedSpace = AddMW_ODU.civilLoads.ReservedSpace,
                                                                SiteCode = SiteCode

                                                            };
                                                            _unitOfWork.CivilLoadsRepository.AddWithHistory(UserId, tLIcivilLoads);
                                                            _unitOfWork.SaveChanges();

                                                        }

                                                        if (AddMW_ODU.dynamicAttribute != null ? AddMW_ODU.dynamicAttribute.Count > 0 : false)
                                                        {
                                                            foreach (var DynamicAttInstValue in AddMW_ODU.dynamicAttribute)
                                                            {
                                                                _unitOfWork.DynamicAttInstValueRepository.AddDdynamicAttributeInstallation(UserId, DynamicAttInstValue, TableNameEntity.Id, mwODU.Id, ConnectionString);
                                                            }
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "must selected MWDish to installed this MWODU", (int)ApiReturnCode.fail);
                                                }
                                            }
                                            else
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "must selected sidearm to installed this MWODU", (int)ApiReturnCode.fail);
                                            }
                                        }
                                        else
                                        {
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "must selected civilwithlegs to installed this MWODU", (int)ApiReturnCode.fail);
                                        }
                                    }
                                    if (AddMW_ODU.installationConfig?.civilSteelType == 1)
                                    {
                                        if (AddMW_ODU.installationConfig?.civilWithoutLegId != null)
                                        {
                                            TLIcivilSiteDate CivilFound = _unitOfWork.CivilSiteDateRepository.GetWhereFirst(x => x.allCivilInst.civilWithoutLegId
                                            == AddMW_ODU.installationConfig.civilWithoutLegId && !x.Dismantle && x.SiteCode.ToLower() == SiteCode.ToLower());
                                            if (CivilFound == null)
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Civil is not found", (int)ApiReturnCode.fail);

                                            if (AddMW_ODU.installationConfig?.sideArmId != null)
                                            {
                                                TLIcivilLoads SideARmFound = _unitOfWork.CivilLoadsRepository.GetWhereFirst(x => !x.Dismantle && x.sideArmId != null &&
                                                x.allCivilInstId != null && x.allCivilInstId == CivilFound.allCivilInstId
                                                && x.SiteCode.ToLower() == SiteCode.ToLower());
                                                if (SideARmFound == null)
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "sidearm is not found on civil", (int)ApiReturnCode.fail);

                                                if (AddMW_ODU.installationConfig?.mwDishId != null)
                                                {
                                                    TLIcivilLoads tLImwDish = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => x.allLoadInstId != null
                                                    && !x.Dismantle && x.sideArmId != null && x.allCivilInstId == CivilFound.allCivilInstId
                                                    && x.allLoadInst.mwDishId == AddMW_ODU.installationConfig.mwDishId && x.SiteCode.ToLower() == SiteCode.ToLower(),
                                                    x => x.allLoadInst, x => x.allLoadInst.mwDish, x => x.allLoadInst.mwDish.MwDishLibrary, x => x.allCivilInst, x => x.sideArm);
                                                    if (tLImwDish == null)
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "MWDish is not found", (int)ApiReturnCode.fail);
                                                    List<TLIcivilLoads> tLImwDishCount = _unitOfWork.CivilLoadsRepository.GetIncludeWhere(x => x.allLoadInstId != null
                                                    && !x.Dismantle && x.allLoadInst.mwODU.Mw_DishId == AddMW_ODU.installationConfig.mwDishId && x.SiteCode.ToLower() == SiteCode.ToLower(),
                                                    x => x.allLoadInst, x => x.allLoadInst.mwODU, x => x.allLoadInst.mwODU.Mw_Dish, x => x.allLoadInst.mwODU.Mw_Dish.MwDishLibrary).ToList();

                                                    if (tLImwDishCount != null && tLImwDishCount.Count == 1 && tLImwDish.allLoadInst.mwDish.MwDishLibrary.polarityType.Name.ToLower() == "single")
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"can not selected this MWDish because found other MWODU installed directly and polarityType to MWDish is single ", (int)ApiReturnCode.fail);
                                                    else if (tLImwDishCount != null && tLImwDishCount.Count == 2 && tLImwDish.allLoadInst.mwDish.MwDishLibrary.polarityType.Name.ToLower() == "dual")
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"can not selected this MWDish because found tow MWODU installed directly and polarityType to MWDish is dual ", (int)ApiReturnCode.fail);
                                                    if (!string.IsNullOrEmpty(mwODU.Serial_Number))
                                                    {
                                                        bool CheckSerialNumber = _dbContext.MV_MWODU_VIEW.Any(x => x.Serial_Number == mwODU.Serial_Number && !x.Dismantle);
                                                        if (CheckSerialNumber)
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The Serial Number {mwODU.Serial_Number} is already exists", (int)ApiReturnCode.fail);
                                                    }
                                                    if (AddMW_ODU.civilLoads.ReservedSpace == true)
                                                    {
                                                        var Message = _unitOfWork.CivilWithLegsRepository.CheckAvailableSpaceOnCivils(CivilFound.allCivilInst).Message;

                                                        if (Message != "Success")
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(true, null, null, Message, (int)ApiReturnCode.fail);
                                                        }
                                                        if (mwODU.CenterHigh <= 0)
                                                        {
                                                            if (mwODU.HBA <= 0)
                                                            {
                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HBA_Surface must bigger from zero", (int)ApiReturnCode.fail);
                                                            }
                                                            else if (MWODULibrary.Height <= 0)
                                                            {
                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "CenterHigh must bigger from zero", (int)ApiReturnCode.fail);
                                                            }
                                                            else
                                                            {
                                                                mwODU.CenterHigh = mwODU.HBA + MWODULibrary.Height / 2;
                                                            }
                                                        }
                                                        if (mwODU.SpaceInstallation == 0)
                                                        {
                                                            if (MWODULibrary.SpaceLibrary == 0)
                                                            {
                                                                if (MWODULibrary.Height == 0)
                                                                {
                                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "SpaceInstallation must bigger from zero", (int)ApiReturnCode.fail);
                                                                }
                                                                mwODU.SpaceInstallation = MWODULibrary.Height * MWODULibrary.Width;
                                                            }
                                                            else
                                                            {
                                                                mwODU.SpaceInstallation = MWODULibrary.SpaceLibrary;
                                                            }
                                                        }

                                                        if (mwODU.Azimuth <= 0)
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Azimuth must bigger from zero", (int)ApiReturnCode.fail);
                                                        }
                                                        if (mwODU.Height <= 0)
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HeightBase must bigger from zero", (int)ApiReturnCode.fail);
                                                        }
                                                        var CheckAzimuthAndHeightBase = _dbContext.MV_MWODU_VIEW.Where(
                                                        x => x.ALLCIVILID == CivilFound.allCivilInst.Id &&
                                                        x.SIDEARMID == AddMW_ODU.installationConfig.sideArmId && x.Azimuth ==
                                                        mwODU.Azimuth && x.Height == mwODU.Height).ToList();

                                                        if (CheckAzimuthAndHeightBase != null)
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the ODU on same azimuth and height because found other ODU in same angle", (int)ApiReturnCode.fail);
                                                        }

                                                        if (tLImwDish.allLoadInst.mwDish != null && MWODULibrary != null)
                                                        {
                                                            mwODU.Name = tLImwDish.allLoadInst.mwDish.DishName + ' ' + MWODULibrary.Model + ' ' + tLImwDish.allLoadInst.
                                                               mwDish.MwDishLibrary.polarityType.Name;
                                                        }
                                                        var CheckName = _dbContext.MV_MWODU_VIEW.FirstOrDefault(x => !x.Dismantle &&
                                                                        (x.Id != null ? x.Name.ToLower() == mwODU.Name.ToLower() : false
                                                                           && x.SiteCode.ToLower() == SiteCode.ToLower()));
                                                        if (CheckName != null)
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The name {mwODU.Name} is already exists", (int)Helpers.Constants.ApiReturnCode.fail);

                                                        if (CivilFound.allCivilInst.civilWithoutLeg?.CurrentLoads == null)
                                                        {
                                                            CivilFound.allCivilInst.civilWithoutLeg.CurrentLoads = 0;
                                                        }
                                                        var OldVcivilinfo = _dbContext.TLIcivilWithoutLeg.AsNoTracking().FirstOrDefault(x => x.Id == CivilFound.allCivilInst.civilWithoutLegId);

                                                        if (OldVcivilinfo != null)
                                                        {
                                                            if (mwODU.SpaceInstallation != 0 && mwODU.CenterHigh != 0 && CivilFound.allCivilInst.civilWithoutLeg.HeightBase != 0)
                                                            {
                                                                var EquivalentSpace = mwODU.SpaceInstallation * (mwODU.CenterHigh / CivilFound.allCivilInst.civilWithoutLeg.HeightBase);

                                                                CivilFound.allCivilInst.civilWithoutLeg.CurrentLoads += EquivalentSpace;
                                                                mwODU.EquivalentSpace = EquivalentSpace;
                                                                _unitOfWork.CivilWithoutLegRepository.UpdateWithHistory(UserId, OldVcivilinfo, CivilFound.allCivilInst.civilWithoutLeg);
                                                                _unitOfWork.SaveChanges();
                                                            }
                                                        }

                                                        mwODU.MwODULibraryId = AddMW_ODU.installationConfig.MwODULibraryId;
                                                        mwODU.Mw_DishId = AddMW_ODU.installationConfig.mwDishId;
                                                        mwODU.OduInstallationTypeId = AddMW_ODU.installationConfig.InstallationPlaceId;
                                                        _unitOfWork.MW_ODURepository.AddWithHistory(UserId, mwODU);
                                                        _unitOfWork.SaveChanges();
                                                        int Id = _unitOfWork.AllLoadInstRepository.AddAllLoadInst(LoadSubType.TLImwODU.ToString(), mwODU.Id);
                                                        if (AddMW_ODU.civilLoads != null && Id != 0)
                                                        {
                                                            TLIcivilLoads tLIcivilLoads = new TLIcivilLoads()
                                                            {
                                                                InstallationDate = AddMW_ODU.civilLoads.InstallationDate,
                                                                allLoadInstId = Id,
                                                                allCivilInstId = CivilFound.allCivilInstId,
                                                                sideArmId = AddMW_ODU.installationConfig?.sideArmId,
                                                                ItemOnCivilStatus = AddMW_ODU.civilLoads.ItemOnCivilStatus,
                                                                ItemStatus = AddMW_ODU.civilLoads?.ItemStatus,
                                                                Dismantle = false,
                                                                ReservedSpace = AddMW_ODU.civilLoads.ReservedSpace,
                                                                SiteCode = SiteCode

                                                            };
                                                            _unitOfWork.CivilLoadsRepository.AddWithHistory(UserId, tLIcivilLoads);
                                                            _unitOfWork.SaveChanges();

                                                        }

                                                        if (AddMW_ODU.dynamicAttribute != null ? AddMW_ODU.dynamicAttribute.Count > 0 : false)
                                                        {
                                                            foreach (var DynamicAttInstValue in AddMW_ODU.dynamicAttribute)
                                                            {
                                                                _unitOfWork.DynamicAttInstValueRepository.AddDdynamicAttributeInstallation(UserId, DynamicAttInstValue, TableNameEntity.Id, mwODU.Id, ConnectionString);
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (mwODU.CenterHigh <= 0)
                                                        {
                                                            if (mwODU.HBA <= 0)
                                                            {
                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HBA_Surface must bigger from zero", (int)ApiReturnCode.fail);
                                                            }
                                                            else if (MWODULibrary.Height <= 0)
                                                            {
                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "CenterHigh must bigger from zero", (int)ApiReturnCode.fail);
                                                            }
                                                            else
                                                            {
                                                                mwODU.CenterHigh = mwODU.HBA + MWODULibrary.Height / 2;
                                                            }
                                                        }
                                                        if (mwODU.SpaceInstallation == 0)
                                                        {
                                                            if (MWODULibrary.SpaceLibrary == 0)
                                                            {
                                                                if (MWODULibrary.Height == 0)
                                                                {
                                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "SpaceInstallation must bigger from zero", (int)ApiReturnCode.fail);
                                                                }
                                                                mwODU.SpaceInstallation = MWODULibrary.Height * MWODULibrary.Width;
                                                            }
                                                            else
                                                            {
                                                                mwODU.SpaceInstallation = MWODULibrary.SpaceLibrary;
                                                            }
                                                        }

                                                        if (mwODU.Azimuth <= 0)
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Azimuth must bigger from zero", (int)ApiReturnCode.fail);
                                                        }
                                                        if (mwODU.Height <= 0)
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HeightBase must bigger from zero", (int)ApiReturnCode.fail);
                                                        }

                                                        var CheckAzimuthAndHeightBase = _dbContext.MV_MWODU_VIEW.Where(
                                                       x => x.ALLCIVILID == CivilFound.allCivilInst.Id &&
                                                       x.SIDEARMID == AddMW_ODU.installationConfig.sideArmId && x.Azimuth ==
                                                       mwODU.Azimuth && x.Height == mwODU.Height).ToList();

                                                        if (CheckAzimuthAndHeightBase != null)
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the ODU on same azimuth and height because found other ODU in same angle", (int)ApiReturnCode.fail);
                                                        }

                                                        if (tLImwDish.allLoadInst.mwDish != null && MWODULibrary != null)
                                                        {
                                                            mwODU.Name = tLImwDish.allLoadInst.mwDish.DishName + ' ' + MWODULibrary.Model + ' ' + tLImwDish.allLoadInst.
                                                               mwDish.MwDishLibrary.polarityType.Name;
                                                        }
                                                        var CheckName = _dbContext.MV_MWODU_VIEW.FirstOrDefault(x => !x.Dismantle &&
                                                                        (x.Id != null ? x.Name.ToLower() == mwODU.Name.ToLower() : false
                                                                           && x.SiteCode.ToLower() == SiteCode.ToLower()));
                                                        if (CheckName != null)
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The name {mwODU.Name} is already exists", (int)Helpers.Constants.ApiReturnCode.fail);

                                                        mwODU.MwODULibraryId = AddMW_ODU.installationConfig.MwODULibraryId;
                                                        mwODU.Mw_DishId = AddMW_ODU.installationConfig.mwDishId;
                                                        mwODU.OduInstallationTypeId = AddMW_ODU.installationConfig.InstallationPlaceId;
                                                        _unitOfWork.MW_ODURepository.AddWithHistory(UserId, mwODU);
                                                        _unitOfWork.SaveChanges();
                                                        int Id = _unitOfWork.AllLoadInstRepository.AddAllLoadInst(LoadSubType.TLImwODU.ToString(), mwODU.Id);
                                                        if (AddMW_ODU.civilLoads != null && Id != 0)
                                                        {
                                                            TLIcivilLoads tLIcivilLoads = new TLIcivilLoads()
                                                            {
                                                                InstallationDate = AddMW_ODU.civilLoads.InstallationDate,
                                                                allLoadInstId = Id,
                                                                allCivilInstId = CivilFound.allCivilInstId,
                                                                sideArmId = AddMW_ODU.installationConfig?.sideArmId,
                                                                ItemOnCivilStatus = AddMW_ODU.civilLoads.ItemOnCivilStatus,
                                                                ItemStatus = AddMW_ODU.civilLoads?.ItemStatus,
                                                                Dismantle = false,
                                                                ReservedSpace = AddMW_ODU.civilLoads.ReservedSpace,
                                                                SiteCode = SiteCode

                                                            };
                                                            _unitOfWork.CivilLoadsRepository.AddWithHistory(UserId, tLIcivilLoads);
                                                            _unitOfWork.SaveChanges();

                                                        }

                                                        if (AddMW_ODU.dynamicAttribute != null ? AddMW_ODU.dynamicAttribute.Count > 0 : false)
                                                        {
                                                            foreach (var DynamicAttInstValue in AddMW_ODU.dynamicAttribute)
                                                            {
                                                                _unitOfWork.DynamicAttInstValueRepository.AddDdynamicAttributeInstallation(UserId, DynamicAttInstValue, TableNameEntity.Id, mwODU.Id, ConnectionString);
                                                            }
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "must selected MWDish to installed this MWODU", (int)ApiReturnCode.fail);
                                                }
                                            }
                                            else
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "must selected sidearm to installed this MWODU", (int)ApiReturnCode.fail);
                                            }

                                        }
                                        else
                                        {
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "must selected civilwithoutlegs to installed this MWODU", (int)ApiReturnCode.fail);
                                        }
                                    }
                                    if (AddMW_ODU.installationConfig?.civilSteelType == 2)
                                    {
                                        if (AddMW_ODU.installationConfig?.civilNonSteelId != null)
                                        {
                                            TLIcivilSiteDate CivilFound = _unitOfWork.CivilSiteDateRepository.GetWhereFirst(x => x.allCivilInst.civilNonSteelId
                                            == AddMW_ODU.installationConfig.civilNonSteelId && !x.Dismantle && x.SiteCode.ToLower() == SiteCode.ToLower());
                                            if (CivilFound == null)
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Civil is not found", (int)ApiReturnCode.fail);

                                            if (AddMW_ODU.installationConfig?.sideArmId != null)
                                            {
                                                TLIcivilLoads SideARmFound = _unitOfWork.CivilLoadsRepository.GetWhereFirst(x => !x.Dismantle && x.sideArmId != null &&
                                                x.allCivilInstId != null && x.allCivilInstId == CivilFound.allCivilInstId
                                                && x.SiteCode.ToLower() == SiteCode.ToLower());
                                                if (SideARmFound == null)
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "sidearm is not found on civil", (int)ApiReturnCode.fail);

                                                if (AddMW_ODU.installationConfig?.mwDishId != null)
                                                {
                                                    TLIcivilLoads tLImwDish = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => x.allLoadInstId != null
                                                    && !x.Dismantle && x.sideArmId != null && x.allCivilInstId == CivilFound.allCivilInstId
                                                    && x.allLoadInst.mwDishId == AddMW_ODU.installationConfig.mwDishId && x.SiteCode.ToLower() == SiteCode.ToLower(),
                                                    x => x.allLoadInst, x => x.allLoadInst.mwDish, x => x.allLoadInst.mwDish.MwDishLibrary, x => x.allCivilInst, x => x.sideArm);
                                                    if (tLImwDish == null)
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "MWDish is not found", (int)ApiReturnCode.fail);
                                                    List<TLIcivilLoads> tLImwDishCount = _unitOfWork.CivilLoadsRepository.GetIncludeWhere(x => x.allLoadInstId != null
                                                    && !x.Dismantle && x.allLoadInst.mwODU.Mw_DishId == AddMW_ODU.installationConfig.mwDishId && x.SiteCode.ToLower() == SiteCode.ToLower(),
                                                    x => x.allLoadInst, x => x.allLoadInst.mwODU, x => x.allLoadInst.mwODU.Mw_Dish, x => x.allLoadInst.mwODU.Mw_Dish.MwDishLibrary).ToList();

                                                    if (tLImwDishCount != null && tLImwDishCount.Count == 1 && tLImwDish.allLoadInst.mwDish.MwDishLibrary.polarityType.Name.ToLower() == "single")
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"can not selected this MWDish because found other MWODU installed directly and polarityType to MWDish is single ", (int)ApiReturnCode.fail);
                                                    else if (tLImwDishCount != null && tLImwDishCount.Count == 2 && tLImwDish.allLoadInst.mwDish.MwDishLibrary.polarityType.Name.ToLower() == "dual")
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"can not selected this MWDish because found tow MWODU installed directly and polarityType to MWDish is dual ", (int)ApiReturnCode.fail);
                                                    if (!string.IsNullOrEmpty(mwODU.Serial_Number))
                                                    {
                                                        bool CheckSerialNumber = _dbContext.MV_MWODU_VIEW.Any(x => x.Serial_Number == mwODU.Serial_Number && !x.Dismantle);
                                                        if (CheckSerialNumber)
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The Serial Number {mwODU.Serial_Number} is already exists", (int)ApiReturnCode.fail);
                                                    }
                                                    if (mwODU.CenterHigh <= 0)
                                                    {
                                                        if (mwODU.HBA <= 0)
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HBA_Surface must bigger from zero", (int)ApiReturnCode.fail);
                                                        }
                                                        else if (MWODULibrary.Height <= 0)
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "CenterHigh must bigger from zero", (int)ApiReturnCode.fail);
                                                        }
                                                        else
                                                        {
                                                            mwODU.CenterHigh = mwODU.HBA + MWODULibrary.Height / 2;
                                                        }
                                                    }
                                                    if (mwODU.SpaceInstallation == 0)
                                                    {
                                                        if (MWODULibrary.SpaceLibrary == 0)
                                                        {
                                                            if (MWODULibrary.Height == 0)
                                                            {
                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "SpaceInstallation must bigger from zero", (int)ApiReturnCode.fail);
                                                            }
                                                            mwODU.SpaceInstallation = MWODULibrary.Height * MWODULibrary.Width;
                                                        }
                                                        else
                                                        {
                                                            mwODU.SpaceInstallation = MWODULibrary.SpaceLibrary;
                                                        }
                                                    }

                                                    if (mwODU.Azimuth <= 0)
                                                    {
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Azimuth must bigger from zero", (int)ApiReturnCode.fail);
                                                    }
                                                    if (mwODU.Height <= 0)
                                                    {
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HeightBase must bigger from zero", (int)ApiReturnCode.fail);
                                                    }

                                                    var CheckAzimuthAndHeightBase = _dbContext.MV_MWODU_VIEW.Where(
                                                    x => x.ALLCIVILID == CivilFound.allCivilInst.Id &&
                                                    x.SIDEARMID == AddMW_ODU.installationConfig.sideArmId && x.Azimuth ==
                                                    mwODU.Azimuth && x.Height == mwODU.Height).ToList();

                                                    if (CheckAzimuthAndHeightBase != null)
                                                    {
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the ODU on same azimuth and height because found other ODU in same angle", (int)ApiReturnCode.fail);
                                                    }

                                                    if (tLImwDish.allLoadInst.mwDish != null && MWODULibrary != null)
                                                    {
                                                        mwODU.Name = tLImwDish.allLoadInst.mwDish.DishName + ' ' + MWODULibrary.Model + ' ' + tLImwDish.allLoadInst.
                                                            mwDish.MwDishLibrary.polarityType.Name;
                                                    }
                                                    var CheckName = _dbContext.MV_MWODU_VIEW.FirstOrDefault(x => !x.Dismantle &&
                                                                    (x.Id != null ? x.Name.ToLower() == mwODU.Name.ToLower() : false
                                                                        && x.SiteCode.ToLower() == SiteCode.ToLower()));
                                                    if (CheckName != null)
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The name {mwODU.Name} is already exists", (int)Helpers.Constants.ApiReturnCode.fail);

                                                    mwODU.MwODULibraryId = AddMW_ODU.installationConfig.MwODULibraryId;
                                                    mwODU.Mw_DishId = AddMW_ODU.installationConfig.mwDishId;
                                                    mwODU.OduInstallationTypeId = AddMW_ODU.installationConfig.InstallationPlaceId;
                                                    _unitOfWork.MW_ODURepository.AddWithHistory(UserId, mwODU);
                                                    _unitOfWork.SaveChanges();
                                                    int Id = _unitOfWork.AllLoadInstRepository.AddAllLoadInst(LoadSubType.TLImwODU.ToString(), mwODU.Id);
                                                    if (AddMW_ODU.civilLoads != null && Id != 0)
                                                    {
                                                        TLIcivilLoads tLIcivilLoads = new TLIcivilLoads()
                                                        {
                                                            InstallationDate = AddMW_ODU.civilLoads.InstallationDate,
                                                            allLoadInstId = Id,
                                                            allCivilInstId = CivilFound.allCivilInstId,
                                                            sideArmId = AddMW_ODU.installationConfig?.sideArmId,
                                                            ItemOnCivilStatus = AddMW_ODU.civilLoads.ItemOnCivilStatus,
                                                            ItemStatus = AddMW_ODU.civilLoads?.ItemStatus,
                                                            Dismantle = false,
                                                            ReservedSpace = AddMW_ODU.civilLoads.ReservedSpace,
                                                            SiteCode = SiteCode

                                                        };
                                                        _unitOfWork.CivilLoadsRepository.AddWithHistory(UserId, tLIcivilLoads);
                                                        _unitOfWork.SaveChanges();

                                                    }

                                                    if (AddMW_ODU.dynamicAttribute != null ? AddMW_ODU.dynamicAttribute.Count > 0 : false)
                                                    {
                                                        foreach (var DynamicAttInstValue in AddMW_ODU.dynamicAttribute)
                                                        {
                                                            _unitOfWork.DynamicAttInstValueRepository.AddDdynamicAttributeInstallation(UserId, DynamicAttInstValue, TableNameEntity.Id, mwODU.Id, ConnectionString);
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "must selected MWDish to installed this MWODU", (int)ApiReturnCode.fail);
                                                }
                                            }
                                            else
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "must selected sidearm to installed this MWODU", (int)ApiReturnCode.fail);
                                            }
                                        }
                                        else
                                        {
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "must selected civilnonsteel to installed this MWODU", (int)ApiReturnCode.fail);
                                        }
                                    }
                                }
                            }
                            else if (LoadSubType.TLImwBU.ToString() == TableName)
                            {
                                AddMW_BUViewModel addMW_BU = _mapper.Map<AddMW_BUViewModel>(MWInstallationViewModel);
                                TLImwBU mwBU = _mapper.Map<TLImwBU>(addMW_BU);
                                //if (addMW_BU.TLIcivilLoads.ReservedSpace == true)
                                //{
                                //    var Message = _unitOfWork.CivilWithLegsRepository.CheckAvailableSpaceOnCivils(addMW_BU.TLIcivilLoads.allCivilInstId).Message;
                                //    if (Message != "Success")
                                //    {
                                //        return new Response<GetForAddMWDishInstallationObject>(true, null, null, Message, (int)ApiReturnCode.fail);
                                //    }
                                //}
                                var mwBULibrary = _dbContext.TLImwBULibrary.Where(x => x.Id == addMW_BU.MwBULibraryId).AsNoTracking().FirstOrDefault();
                                if (mwBU.CenterHigh == 0)
                                {
                                    mwBU.CenterHigh = mwBU.HBA + mwBULibrary.Length / 2;
                                }
                                var message = _unitOfWork.CivilWithLegsRepository.CheckloadsOnCivil(addMW_BU.TLIcivilLoads.allCivilInstId, 0, mwBU.Azimuth, mwBU.CenterHigh).Message;
                                if (message != "Success")
                                {
                                    return new Response<GetForAddMWDishInstallationObject>(true, null, null, message, (int)ApiReturnCode.fail);
                                }

                                bool test = true;
                                string CheckDependencyValidation = CheckDependencyValidationForMWTypes(MWInstallationViewModel, TableName, SiteCode);

                                if (!string.IsNullOrEmpty(CheckDependencyValidation))
                                    return new Response<GetForAddMWDishInstallationObject>(true, null, null, CheckDependencyValidation, (int)ApiReturnCode.fail);

                                string CheckGeneralValidation = CheckGeneralValidationFunction(addMW_BU.TLIdynamicAttInstValue, TableName);

                                if (!string.IsNullOrEmpty(CheckGeneralValidation))
                                    return new Response<GetForAddMWDishInstallationObject>(true, null, null, CheckGeneralValidation, (int)ApiReturnCode.fail);

                                if (test == true)
                                {
                                    //TLIcivilLoads CheckName = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => !x.Dismantle && (x.allLoadInstId != null ?
                                    //    !x.allLoadInst.Draft && (x.allLoadInst.mwBUId != null ? x.allLoadInst.mwBU.Name.ToLower() == mwBU.Name.ToLower() : false) : false),
                                    //        x => x.allLoadInst, x => x.allLoadInst.mwBU);
                                    //if (CheckName != null)
                                    //    return new Response<GetForAddMWDishInstallationObject>(true, null, null, $"This name {mwBU.Name} is already exists", (int)ApiReturnCode.fail);

                                    var CheckSerialNumber = _unitOfWork.MW_BURepository.GetWhereFirst(x => x.Serial_Number == mwBU.Serial_Number);
                                    if (CheckSerialNumber != null)
                                    {
                                        return new Response<GetForAddMWDishInstallationObject>(true, null, null, $"The SerialNumber {mwBU.Serial_Number} is already exists", (int)ApiReturnCode.fail);
                                    }
                                    mwBU.Name = "";
                                    TLIsideArm SideArmEntity = null;
                                    if (addMW_BU.TLIcivilLoads.sideArmId != null)
                                    {
                                        //  SideArmEntity = _unitOfWork.SideArmRepository.GetByID((int)addMW_BU.TLIcivilLoads.sideArmId);
                                        SideArmEntity = _dbContext.TLIsideArm.Where(x => x.Id == (int)addMW_BU.TLIcivilLoads.sideArmId).AsNoTracking().FirstOrDefault();

                                        mwBU.Name = SideArmEntity.Name;
                                    }
                                    TLImwBULibrary BULibrary = null;
                                    if (mwBU.MwBULibraryId != null)
                                    {
                                        // BULibrary = _unitOfWork.MW_BULibraryRepository.GetByID((int)mwBU.MwBULibraryId);
                                        BULibrary = _dbContext.TLImwBULibrary.Where(x => x.Id == (int)mwBU.MwBULibraryId).AsNoTracking().FirstOrDefault();
                                        if (String.IsNullOrEmpty(mwBU.Name) == true)
                                        {
                                            mwBU.Name = BULibrary.Model + " " + mwBU.Height;
                                        }
                                        else
                                        {
                                            mwBU.Name += " " + BULibrary.Model + " " + mwBU.Height;
                                        }
                                    }
                                    TLIcivilLoads CheckName = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => !x.Dismantle && (x.allLoadInstId != null ?
                                       !x.allLoadInst.Draft && (x.allLoadInst.mwBUId != null ? x.allLoadInst.mwBU.Name.ToLower() == mwBU.Name.ToLower() : false) : false) &&
                                       x.SiteCode.ToLower() == SiteCode.ToLower(),
                                           x => x.allLoadInst, x => x.allLoadInst.mwBU);
                                    if (CheckName != null)
                                        return new Response<GetForAddMWDishInstallationObject>(true, null, null, $"This name {mwBU.Name} is already exists", (int)ApiReturnCode.fail);

                                    _unitOfWork.MW_BURepository.AddWithHistory(Helpers.LogFilterAttribute.UserId, mwBU);
                                    _unitOfWork.SaveChanges();
                                    int Id = _unitOfWork.AllLoadInstRepository.AddAllLoadInst(LoadSubType.TLImwBU.ToString(), mwBU.Id);
                                    _unitOfWork.CivilLoadsRepository.AddCivilLoad(addMW_BU.TLIcivilLoads, Id, SiteCode);
                                    if (addMW_BU.TLIdynamicAttInstValue.Count > 0)
                                    {
                                        foreach (var DynamicAttInstValue in addMW_BU.TLIdynamicAttInstValue)
                                        {
                                            _unitOfWork.DynamicAttInstValueRepository.AddDynamicInstAtts(DynamicAttInstValue, TableNameEntity.Id, mwBU.Id);
                                        }
                                    }
                                    //add ports to BU

                                    for (int i = 0; i <= 4; i++)
                                    {
                                        if (i != 4)
                                        {
                                            TLImwPort item = new TLImwPort();
                                            item.Port_Name = mwBU.Name + "_Port" + (i + 1);
                                            item.TX_Frequency = "100";
                                            item.MwBUId = mwBU.Id;
                                            item.MwBULibraryId = mwBU.MwBULibraryId;
                                            item.Port_Type = 1;
                                            _dbContext.TLImwPort.Add(item);
                                            _dbContext.SaveChanges();
                                        }
                                        else
                                        {
                                            TLImwPort item = new TLImwPort();
                                            item.Port_Name = mwBU.Name + "_Port" + (i + 1);
                                            item.TX_Frequency = "100";
                                            item.MwBUId = mwBU.Id;
                                            item.MwBULibraryId = mwBU.MwBULibraryId;
                                            item.Port_Type = 2;
                                            _dbContext.TLImwPort.Add(item);
                                            _dbContext.SaveChanges();
                                        }

                                    }
                                    //AddHistory(addMW_BU.ticketAtt, Id, "Insert");

                                }
                                else
                                {
                                    return new Response<GetForAddMWDishInstallationObject>(true, null, null, ErrorMessage, (int)ApiReturnCode.fail);
                                }

                            }
                            else if (LoadSubType.TLImwDish.ToString() == TableName)
                            {
                                AddMWDishInstallationObject AddMW_Dish = _mapper.Map<AddMWDishInstallationObject>(MWInstallationViewModel);
                                TLImwDish mwDish = _mapper.Map<TLImwDish>(AddMW_Dish.installationAttributes);
                                var MWDishLibrary = _unitOfWork.MW_DishLibraryRepository.GetWhereFirst(x => x.Id == AddMW_Dish.installationConfig.MwDishLibraryId
                                && !x.Deleted && x.Active);
                                if (MWDishLibrary == null)
                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "MWDishLibrary is not found", (int)ApiReturnCode.fail);

                                if (AddMW_Dish.installationConfig.InstallationPlaceId == 1)
                                {

                                    if (AddMW_Dish.installationConfig.civilWithLegId != null)
                                    {
                                        TLIcivilSiteDate AllcivilinstId = _unitOfWork.CivilSiteDateRepository.GetIncludeWhereFirst(x => x.allCivilInst.civilWithLegsId ==
                                         AddMW_Dish.installationConfig.civilWithLegId && !x.Dismantle, x => x.allCivilInst, x => x.allCivilInst.civilWithLegs, x => x.allCivilInst.civilWithoutLeg,
                                         x => x.allCivilInst.civilWithLegs.CivilWithLegsLib, x => x.allCivilInst.civilWithoutLeg.CivilWithoutlegsLib);
                                        if (AllcivilinstId != null)
                                        {
                                            if (AddMW_Dish.installationConfig.legId != null)
                                            {
                                                if(AddMW_Dish.installationConfig.sideArmId !=null)
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"can not selected sidearm because installation place is leg", (int)ApiReturnCode.fail);

                                                var Leg = _unitOfWork.LegRepository.GetIncludeWhereFirst(x => x.CivilWithLegInstId ==
                                                 AddMW_Dish.installationConfig.civilWithLegId && x.Id == AddMW_Dish.installationConfig.legId
                                                 , x => x.CivilWithLegInst);
                                                if (Leg != null)
                                                {
                                                    if (!string.IsNullOrEmpty(mwDish.Serial_Number))
                                                    {
                                                        bool CheckSerialNumber = _dbContext.MV_MWDISH_VIEW.Any(x => x.Serial_Number == mwDish.Serial_Number && !x.Dismantle);
                                                        if (CheckSerialNumber)
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The Serial Number {mwDish.Serial_Number} is already exists", (int)ApiReturnCode.fail);
                                                    }

                                                    if (AddMW_Dish.civilLoads.ReservedSpace == true)
                                                    {
                                                        var Message = _unitOfWork.CivilWithLegsRepository.CheckAvailableSpaceOnCivils(AllcivilinstId.allCivilInst).Message;

                                                        if (Message != "Success")
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(true, null, null, Message, (int)ApiReturnCode.fail);
                                                        }
                                                        if (mwDish.CenterHigh <= 0)
                                                        {
                                                            if (mwDish.HBA_Surface <= 0)
                                                            {
                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HBA_Surface must bigger from zero", (int)ApiReturnCode.fail);
                                                            }
                                                            else if (MWDishLibrary.diameter <= 0)
                                                            {
                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "CenterHigh must bigger from zero", (int)ApiReturnCode.fail);
                                                            }
                                                            else
                                                            {
                                                                mwDish.CenterHigh = mwDish.HBA + MWDishLibrary.diameter / 2;
                                                            }
                                                        }
                                                        if (mwDish.SpaceInstallation == 0)
                                                        {
                                                            if (MWDishLibrary.SpaceLibrary == 0)
                                                            {
                                                                if (MWDishLibrary.diameter == 0)
                                                                {
                                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "SpaceInstallation must bigger from zero", (int)ApiReturnCode.fail);
                                                                }
                                                                mwDish.SpaceInstallation = Convert.ToSingle(3.14) * (float)Math.Pow(MWDishLibrary.diameter / 2, 2);
                                                            }
                                                            else
                                                            {
                                                                mwDish.SpaceInstallation = MWDishLibrary.SpaceLibrary;
                                                            }
                                                        }

                                                        if (AddMW_Dish.installationAttributes.Azimuth <= 0)
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Azimuth must bigger from zero", (int)ApiReturnCode.fail);
                                                        }
                                                        if (AddMW_Dish.installationAttributes.HeightBase <= 0)
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HeightBase must bigger from zero", (int)ApiReturnCode.fail);
                                                        }

                                                        var Checkinstallationplace = _dbContext.MV_MWDISH_VIEW.Where(
                                                            x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id &&
                                                            x.LEG_ID == AddMW_Dish.installationConfig.legId).ToList();
                                                        var CheckAzimuthAndHeightBase = Checkinstallationplace.FirstOrDefault(x => x.Azimuth ==
                                                        mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                                                        if (CheckAzimuthAndHeightBase != null)
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                                                        }
                                                        else if (Checkinstallationplace != null && Checkinstallationplace.Count >= 3)
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                                                        }
                                                        else
                                                        {
                                                            TLIleg legname = _dbContext.TLIleg.FirstOrDefault(x => x.Id == AddMW_Dish.installationConfig.legId);
                                                            if (legname != null && mwDish.Azimuth > 0 && mwDish.HeightBase > 0)
                                                            {
                                                                mwDish.DishName = legname?.CiviLegName + " " + mwDish.Azimuth + " " + mwDish.HeightBase;

                                                            }

                                                            var CheckName = _dbContext.MV_MWDISH_VIEW.FirstOrDefault(x => !x.Dismantle &&
                                                            (x.Id != null ? x.DishName.ToLower() == mwDish.DishName.ToLower() : false
                                                               && x.SiteCode.ToLower() == SiteCode.ToLower()));

                                                            if (CheckName != null)
                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The name {mwDish.DishName} is already exists", (int)Helpers.Constants.ApiReturnCode.fail);
                                                        }
                                                        if (AllcivilinstId.allCivilInst.civilWithLegs?.CurrentLoads == null)
                                                        {
                                                            AllcivilinstId.allCivilInst.civilWithLegs.CurrentLoads = 0;
                                                        }
                                                        var OldVcivilinfo = _dbContext.TLIcivilWithLegs.AsNoTracking().FirstOrDefault(x => x.Id == AllcivilinstId.allCivilInst.civilWithLegsId);

                                                        if (OldVcivilinfo != null)
                                                        {
                                                            if (mwDish.SpaceInstallation != 0 && mwDish.CenterHigh != 0 && AllcivilinstId.allCivilInst.civilWithLegs.HeightBase != 0)
                                                            {
                                                                var EquivalentSpace = mwDish.SpaceInstallation * (mwDish.CenterHigh / (float)AllcivilinstId.allCivilInst.civilWithLegs.HeightBase);

                                                                AllcivilinstId.allCivilInst.civilWithLegs.CurrentLoads += EquivalentSpace;
                                                                mwDish.EquivalentSpace = EquivalentSpace;
                                                                _unitOfWork.CivilWithLegsRepository.UpdateWithHistory(UserId, OldVcivilinfo, AllcivilinstId.allCivilInst.civilWithLegs);

                                                                _unitOfWork.SaveChanges();
                                                            }
                                                        }

                                                        if (mwDish?.ItemConnectToId != null)
                                                        {
                                                            TLIitemConnectTo ConnectedToEntity = _unitOfWork.ItemConnectToRepository.GetByID(mwDish.ItemConnectToId);
                                                            if (ConnectedToEntity.Name.ToLower() == "farsitedish")
                                                                if (string.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if dish connected to FarSiteDish", (int)ApiReturnCode.fail);
                                                            if (ConnectedToEntity.Name.ToLower() == "farsitedish" && mwDish.RepeaterTypeId != null)
                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not selected RepeaterType because selected itemconecctedto is farsitedish", (int)ApiReturnCode.fail);

                                                            else if (ConnectedToEntity.Name.ToLower() == "repeater")
                                                            {
                                                                if (mwDish.RepeaterTypeId == null)
                                                                {
                                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type shouldn't be null", (int)ApiReturnCode.fail);
                                                                }
                                                                else
                                                                {
                                                                    TLIrepeaterType RepeaterTypeEntity = null;
                                                                    if (mwDish.RepeaterTypeId != null)
                                                                    {
                                                                        RepeaterTypeEntity = _unitOfWork.RepeaterTypeRepository.GetWhereFirst(x => x.Id == mwDish.RepeaterTypeId);
                                                                        if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() != "active" && RepeaterTypeEntity.Name.ToLower() != "passive")
                                                                        {
                                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type should be active or passive", (int)ApiReturnCode.fail);
                                                                        }
                                                                        if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() == "active")
                                                                        {
                                                                            if (String.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                                                                            {
                                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if repeater type is active", (int)ApiReturnCode.fail);
                                                                            }
                                                                        }
                                                                        else if (RepeaterTypeEntity.Name.ToLower() == "passive")
                                                                        {
                                                                            if (ConnectedToEntity.Name.ToLower() != "repeater" || RepeaterTypeEntity.Name.ToLower() != "passive")
                                                                            {
                                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "The dish should be connected to repeater and repeater type is passive", (int)ApiReturnCode.fail);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        mwDish.MwDishLibraryId = AddMW_Dish.installationConfig.MwDishLibraryId;
                                                        mwDish.InstallationPlaceId = AddMW_Dish.installationConfig.InstallationPlaceId;
                                                        _unitOfWork.MW_DishRepository.AddWithHistory(UserId, mwDish);
                                                        _unitOfWork.SaveChanges();
                                                        int Id = _unitOfWork.AllLoadInstRepository.AddAllLoadInst(LoadSubType.TLImwDish.ToString(), mwDish.Id);
                                                        if (AddMW_Dish.civilLoads != null && Id != 0)
                                                        {
                                                            TLIcivilLoads tLIcivilLoads = new TLIcivilLoads()
                                                            {
                                                                InstallationDate = AddMW_Dish.civilLoads.InstallationDate,
                                                                allLoadInstId = Id,
                                                                legId = AddMW_Dish.installationConfig?.legId,
                                                                allCivilInstId = AllcivilinstId.allCivilInst.Id,
                                                                sideArmId = null,
                                                                ItemOnCivilStatus = AddMW_Dish.civilLoads.ItemOnCivilStatus,
                                                                ItemStatus = AddMW_Dish.civilLoads?.ItemStatus,
                                                                Dismantle = false,
                                                                ReservedSpace = AddMW_Dish.civilLoads.ReservedSpace,
                                                                SiteCode = SiteCode,


                                                            };
                                                            _unitOfWork.CivilLoadsRepository.AddWithHistory(UserId, tLIcivilLoads);
                                                            _unitOfWork.SaveChanges();

                                                        }

                                                        if (AddMW_Dish.dynamicAttribute != null ? AddMW_Dish.dynamicAttribute.Count > 0 : false)
                                                        {
                                                            foreach (var DynamicAttInstValue in AddMW_Dish.dynamicAttribute)
                                                            {
                                                                _unitOfWork.DynamicAttInstValueRepository.AddDdynamicAttributeInstallation(UserId, DynamicAttInstValue, TableNameEntity.Id, mwDish.Id, ConnectionString);
                                                            }
                                                        }

                                                    }
                                                    else
                                                    {
                                                        if (mwDish.CenterHigh <= 0)
                                                        {
                                                            if (mwDish.HBA_Surface <= 0)
                                                            {
                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HBA_Surface must bigger from zero", (int)ApiReturnCode.fail);
                                                            }
                                                            else if (MWDishLibrary.diameter <= 0)
                                                            {
                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "CenterHigh must bigger from zero", (int)ApiReturnCode.fail);
                                                            }
                                                            else
                                                            {
                                                                mwDish.CenterHigh = mwDish.HBA + MWDishLibrary.diameter / 2;
                                                            }
                                                        }
                                                        if (mwDish.SpaceInstallation == 0)
                                                        {


                                                            if (MWDishLibrary.SpaceLibrary == 0)
                                                            {
                                                                if (MWDishLibrary.diameter == 0)
                                                                {
                                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "SpaceInstallation must bigger from zero", (int)ApiReturnCode.fail);
                                                                }
                                                                mwDish.SpaceInstallation = Convert.ToSingle(3.14) * (float)Math.Pow(MWDishLibrary.diameter / 2, 2);
                                                            }
                                                            else
                                                            {
                                                                mwDish.SpaceInstallation = MWDishLibrary.SpaceLibrary;
                                                            }
                                                        }
                                                        if (AddMW_Dish.installationAttributes.Azimuth <= 0)
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Azimuth must bigger from zero", (int)ApiReturnCode.fail);
                                                        }
                                                        if (AddMW_Dish.installationAttributes.HeightBase <= 0)
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HeightBase must bigger from zero", (int)ApiReturnCode.fail);
                                                        }

                                                        var Checkinstallationplace = _dbContext.MV_MWDISH_VIEW.Where(
                                                            x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id &&
                                                            x.LEG_ID == AddMW_Dish.installationConfig.legId).ToList();
                                                        var CheckAzimuthAndHeightBase = Checkinstallationplace.FirstOrDefault(x => x.Azimuth ==
                                                        mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                                                        if (CheckAzimuthAndHeightBase != null)
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                                                        }
                                                        else if (Checkinstallationplace != null && Checkinstallationplace.Count >= 3)
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                                                        }
                                                        else
                                                        {
                                                            TLIleg legname = _dbContext.TLIleg.FirstOrDefault(x => x.Id == AddMW_Dish.installationConfig.legId);
                                                            if (legname != null && AddMW_Dish.installationAttributes.Azimuth > 0 && AddMW_Dish.installationAttributes.HeightBase > 0)
                                                            {
                                                                mwDish.DishName = legname?.CiviLegName + " " + mwDish.Azimuth + " " + mwDish.HeightBase;

                                                            }
                                                            var CheckName = _dbContext.MV_MWDISH_VIEW.FirstOrDefault(x => !x.Dismantle &&
                                                           (x.Id != null ? x.DishName.ToLower() == mwDish.DishName.ToLower() : false
                                                              && x.SiteCode.ToLower() == SiteCode.ToLower()));

                                                            if (CheckName != null)
                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The name {mwDish.DishName} is already exists", (int)Helpers.Constants.ApiReturnCode.fail);
                                                        }

                                                        if (mwDish?.ItemConnectToId != null)
                                                        {
                                                            TLIitemConnectTo ConnectedToEntity = _unitOfWork.ItemConnectToRepository.GetByID(mwDish.ItemConnectToId);
                                                            if (ConnectedToEntity.Name.ToLower() == "farsitedish")
                                                                if (string.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if dish connected to FarSiteDish", (int)ApiReturnCode.fail);
                                                            if (ConnectedToEntity.Name.ToLower() == "farsitedish" && mwDish.RepeaterTypeId != null)
                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not selected RepeaterType because selected itemconecctedto is farsitedish", (int)ApiReturnCode.fail);

                                                            else if (ConnectedToEntity.Name.ToLower() == "repeater")
                                                            {
                                                                if (mwDish.RepeaterTypeId == null)
                                                                {
                                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type shouldn't be null", (int)ApiReturnCode.fail);
                                                                }
                                                                else
                                                                {
                                                                    TLIrepeaterType RepeaterTypeEntity = null;
                                                                    if (mwDish.RepeaterTypeId != null)
                                                                    {
                                                                        RepeaterTypeEntity = _unitOfWork.RepeaterTypeRepository.GetWhereFirst(x => x.Id == mwDish.RepeaterTypeId);
                                                                        if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() != "active" && RepeaterTypeEntity.Name.ToLower() != "passive")
                                                                        {
                                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type should be active or passive", (int)ApiReturnCode.fail);
                                                                        }
                                                                        if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() == "active")
                                                                        {
                                                                            if (String.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                                                                            {
                                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if repeater type is active", (int)ApiReturnCode.fail);
                                                                            }
                                                                        }
                                                                        else if (RepeaterTypeEntity.Name.ToLower() == "passive")
                                                                        {
                                                                            if (ConnectedToEntity.Name.ToLower() != "repeater" || RepeaterTypeEntity.Name.ToLower() != "passive")
                                                                            {
                                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "The dish should be connected to repeater and repeater type is passive", (int)ApiReturnCode.fail);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        mwDish.MwDishLibraryId = AddMW_Dish.installationConfig.MwDishLibraryId;
                                                        mwDish.InstallationPlaceId = AddMW_Dish.installationConfig.InstallationPlaceId;
                                                        _unitOfWork.MW_DishRepository.AddWithHistory(UserId, mwDish);
                                                        _unitOfWork.SaveChanges();
                                                        int Id = _unitOfWork.AllLoadInstRepository.AddAllLoadInst(LoadSubType.TLImwDish.ToString(), mwDish.Id);
                                                        if (AddMW_Dish.civilLoads != null && Id != 0)
                                                        {
                                                            TLIcivilLoads tLIcivilLoads = new TLIcivilLoads()
                                                            {
                                                                InstallationDate = AddMW_Dish.civilLoads.InstallationDate,
                                                                allLoadInstId = Id,
                                                                legId = AddMW_Dish.installationConfig?.legId,
                                                                allCivilInstId = AllcivilinstId.allCivilInst.Id,
                                                                sideArmId = null,
                                                                ItemOnCivilStatus = AddMW_Dish.civilLoads.ItemOnCivilStatus,
                                                                ItemStatus = AddMW_Dish.civilLoads?.ItemStatus,
                                                                Dismantle = false,
                                                                ReservedSpace = AddMW_Dish.civilLoads.ReservedSpace,
                                                                SiteCode = SiteCode,


                                                            };
                                                            _unitOfWork.CivilLoadsRepository.AddWithHistory(UserId, tLIcivilLoads);
                                                            _unitOfWork.SaveChanges();

                                                        }
                                                        if (AddMW_Dish.dynamicAttribute != null ? AddMW_Dish.dynamicAttribute.Count > 0 : false)
                                                        {
                                                            foreach (var DynamicAttInstValue in AddMW_Dish.dynamicAttribute)
                                                            {
                                                                _unitOfWork.DynamicAttInstValueRepository.AddDdynamicAttributeInstallation(UserId, DynamicAttInstValue, TableNameEntity.Id, mwDish.Id, ConnectionString);
                                                            }
                                                        }

                                                    }

                                                }
                                                else
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "this leg is not found", (int)ApiReturnCode.fail);
                                                }
                                            }
                                            else
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "must selected leg ", (int)ApiReturnCode.fail);
                                            }
                                        }
                                        else
                                        {
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "this civil is not found ", (int)ApiReturnCode.fail);
                                        }

                                    }
                                    else
                                    {
                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "must selected civilwithlegs item ", (int)ApiReturnCode.fail);
                                    }

                                }

                                if (AddMW_Dish.installationConfig.InstallationPlaceId == 2)
                                {
                                    if (AddMW_Dish.installationConfig.civilSteelType == 0)
                                    {
                                        if (AddMW_Dish.installationConfig.civilWithLegId != null)
                                        {
                                            var AllcivilinstId = _unitOfWork.CivilSiteDateRepository.GetIncludeWhereFirst(x => x.allCivilInst.civilWithLegsId ==
                                                 AddMW_Dish.installationConfig.civilWithLegId && !x.Dismantle, x => x.allCivilInst, x => x.allCivilInst.civilWithLegs,
                                                 x => x.allCivilInst.civilWithoutLeg, x => x.allCivilInst.civilWithLegs.CivilWithLegsLib, x => x.allCivilInst.civilWithoutLeg.CivilWithoutlegsLib);
                                            if (AllcivilinstId == null)
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The civil is not found", (int)ApiReturnCode.fail);
 
                                            if (AddMW_Dish.installationConfig.sideArmId != null)
                                            {
                                                var SideArm1 = _unitOfWork.CivilLoadsRepository.GetWhereFirst(x => x.allCivilInst.civilWithLegsId
                                                == AddMW_Dish.installationConfig.civilWithLegId && x.sideArmId == AddMW_Dish.installationConfig.sideArmId[0]
                                                && (x.legId == AddMW_Dish.installationConfig.legId || x.Leg2Id == AddMW_Dish.installationConfig.legId));
                                                if (SideArm1 == null)
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The one SideArm is not found on civil", (int)ApiReturnCode.fail);
                                                var SideArm2 = _unitOfWork.CivilLoadsRepository.GetWhereFirst(x => x.allCivilInst.civilWithLegsId
                                                == AddMW_Dish.installationConfig.civilWithLegId && x.sideArmId == AddMW_Dish.installationConfig.sideArmId[1]
                                                && (x.legId == AddMW_Dish.installationConfig.legId || x.Leg2Id == AddMW_Dish.installationConfig.legId));
                                                if (SideArm2 == null)
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The tow SideArm is not found on civil", (int)ApiReturnCode.fail);

                                                if (!string.IsNullOrEmpty(mwDish.Serial_Number))
                                                {
                                                    bool CheckSerialNumber = _dbContext.MV_MWDISH_VIEW.Any(x => x.Serial_Number == mwDish.Serial_Number && !x.Dismantle);
                                                    if (CheckSerialNumber)
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The Serial Number {mwDish.Serial_Number} is already exists", (int)ApiReturnCode.fail);
                                                }

                                                if (AddMW_Dish.civilLoads.ReservedSpace == true)
                                                {
                                                    var Message = _unitOfWork.CivilWithLegsRepository.CheckAvailableSpaceOnCivils(AllcivilinstId.allCivilInst).Message;

                                                    if (Message != "Success")
                                                    {
                                                        return new Response<GetForAddMWDishInstallationObject>(true, null, null, Message, (int)ApiReturnCode.fail);
                                                    }

                                                    if (mwDish.CenterHigh <= 0)
                                                    {
                                                        if (mwDish.HBA_Surface <= 0)
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HBA_Surface must bigger from zero", (int)ApiReturnCode.fail);
                                                        }
                                                        else if (MWDishLibrary.diameter <= 0)
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "CenterHigh must bigger from zero", (int)ApiReturnCode.fail);
                                                        }
                                                        else
                                                        {
                                                            mwDish.CenterHigh = mwDish.HBA + MWDishLibrary.diameter / 2;
                                                        }
                                                    }
                                                    if (mwDish.SpaceInstallation == 0)
                                                    {

                                                        if (MWDishLibrary.SpaceLibrary == 0)
                                                        {
                                                            if (MWDishLibrary.diameter == 0)
                                                            {
                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "SpaceInstallation must bigger from zero", (int)ApiReturnCode.fail);
                                                            }
                                                            mwDish.SpaceInstallation = Convert.ToSingle(3.14) * (float)Math.Pow(MWDishLibrary.diameter / 2, 2);
                                                        }
                                                        else
                                                        {
                                                            mwDish.SpaceInstallation = MWDishLibrary.SpaceLibrary;
                                                        }
                                                    }
                                                    if (AddMW_Dish.installationAttributes.Azimuth <= 0)
                                                    {
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Azimuth must bigger from zero", (int)ApiReturnCode.fail);
                                                    }
                                                    if (AddMW_Dish.installationAttributes.HeightBase <= 0)
                                                    {
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HeightBase must bigger from zero", (int)ApiReturnCode.fail);
                                                    }


                                                    if (AddMW_Dish.installationConfig.sideArmId.Count == 1)
                                                    {
                                                        List<MV_MWDISH_VIEW> Checkinstallationplace = _dbContext.MV_MWDISH_VIEW.Where(
                                                           x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id &&
                                                           x.SIDEARM_ID == AddMW_Dish.installationConfig.sideArmId[0]).ToList();
                                                        MV_MWDISH_VIEW CheckAzimuthAndHeightBase = Checkinstallationplace.FirstOrDefault(x => x.Azimuth == mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                                                        if (CheckAzimuthAndHeightBase != null)
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                                                        }
                                                        else if (Checkinstallationplace != null && Checkinstallationplace.Count >= 3)
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                                                        }
                                                        else
                                                        {
                                                            var SideArmName1 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == AddMW_Dish.installationConfig.sideArmId[0]);
                                                            if (SideArmName1 != null && mwDish.Azimuth > 0 && mwDish.HeightBase > 0)
                                                            {
                                                                mwDish.DishName = SideArmName1?.Name + " " + mwDish.Azimuth + " " + mwDish.HeightBase;
                                                            }
                                                        }
                                                    }
                                                    if (AddMW_Dish.installationConfig.sideArmId.Count == 2)
                                                    {
                                                        List<MV_MWDISH_VIEW> Checkinstallationplace2 = _dbContext.MV_MWDISH_VIEW.Where(
                                                          x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id &&
                                                          x.SIDEARM_ID == AddMW_Dish.installationConfig.sideArmId[1]).ToList();
                                                        MV_MWDISH_VIEW CheckAzimuthAndHeightBase = Checkinstallationplace2.FirstOrDefault(x => x.Azimuth == mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                                                        if (CheckAzimuthAndHeightBase != null)
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                                                        }
                                                        else if (Checkinstallationplace2 != null && Checkinstallationplace2.Count >= 3)
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                                                        }
                                                        else
                                                        {
                                                            var SideArmName1 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == AddMW_Dish.installationConfig.sideArmId[0]);
                                                            var SideArmName2 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == AddMW_Dish.installationConfig.sideArmId[1]);
                                                            if (SideArmName1 != null && SideArmName2 != null && mwDish.Azimuth > 0 && mwDish.HeightBase > 0)
                                                            {
                                                                mwDish.DishName = SideArmName1?.Name + " " + SideArmName2?.Name + " " + mwDish.Azimuth + " " + mwDish.HeightBase;
                                                            }
                                                        }
                                                    }
                                                    var CheckName = _dbContext.MV_MWDISH_VIEW.FirstOrDefault(x => !x.Dismantle &&
                                                            (x.Id != null ? x.DishName.ToLower() == mwDish.DishName.ToLower() : false
                                                               && x.SiteCode.ToLower() == SiteCode.ToLower()));

                                                    if (CheckName != null)
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The name {mwDish.DishName} is already exists", (int)Helpers.Constants.ApiReturnCode.fail);

                                                    if (AllcivilinstId.allCivilInst.civilWithLegs?.CurrentLoads == null)
                                                    {
                                                        AllcivilinstId.allCivilInst.civilWithLegs.CurrentLoads = 0;
                                                    }
                                                    var OldVcivilinfo = _dbContext.TLIcivilWithLegs.AsNoTracking().FirstOrDefault(x => x.Id == AllcivilinstId.allCivilInst.civilWithLegsId);

                                                    if (OldVcivilinfo != null)
                                                    {

                                                        var EquivalentSpace = mwDish.SpaceInstallation * (mwDish.CenterHigh / (float)AllcivilinstId.allCivilInst.civilWithLegs.HeightBase);

                                                        AllcivilinstId.allCivilInst.civilWithLegs.CurrentLoads += EquivalentSpace;
                                                        mwDish.EquivalentSpace = EquivalentSpace;
                                                        _unitOfWork.CivilWithLegsRepository.UpdateWithHistory(UserId, OldVcivilinfo, AllcivilinstId.allCivilInst.civilWithLegs);

                                                        _unitOfWork.SaveChanges();
                                                    }

                                                    if (mwDish?.ItemConnectToId != null)
                                                    {
                                                        TLIitemConnectTo ConnectedToEntity = _unitOfWork.ItemConnectToRepository.GetByID(mwDish.ItemConnectToId);
                                                        if (ConnectedToEntity.Name.ToLower() == "farsitedish")
                                                            if (string.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if dish connected to FarSiteDish", (int)ApiReturnCode.fail);
                                                        if (ConnectedToEntity.Name.ToLower() == "farsitedish" && mwDish.RepeaterTypeId != null)
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not selected RepeaterType because selected itemconecctedto is farsitedish", (int)ApiReturnCode.fail);

                                                        else if (ConnectedToEntity.Name.ToLower() == "repeater")
                                                        {
                                                            if (mwDish.RepeaterTypeId == null)
                                                            {
                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type shouldn't be null", (int)ApiReturnCode.fail);
                                                            }
                                                            else
                                                            {
                                                                TLIrepeaterType RepeaterTypeEntity = null;
                                                                if (mwDish.RepeaterTypeId != null)
                                                                {
                                                                    RepeaterTypeEntity = _unitOfWork.RepeaterTypeRepository.GetWhereFirst(x => x.Id == mwDish.RepeaterTypeId);
                                                                    if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() != "active" && RepeaterTypeEntity.Name.ToLower() != "passive")
                                                                    {
                                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type should be active or passive", (int)ApiReturnCode.fail);
                                                                    }
                                                                    if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() == "active")
                                                                    {
                                                                        if (String.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                                                                        {
                                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if repeater type is active", (int)ApiReturnCode.fail);
                                                                        }
                                                                    }
                                                                    else if (RepeaterTypeEntity.Name.ToLower() == "passive")
                                                                    {
                                                                        if (ConnectedToEntity.Name.ToLower() != "repeater" || RepeaterTypeEntity.Name.ToLower() != "passive")
                                                                        {
                                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "The dish should be connected to repeater and repeater type is passive", (int)ApiReturnCode.fail);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    mwDish.MwDishLibraryId = AddMW_Dish.installationConfig.MwDishLibraryId;
                                                    mwDish.InstallationPlaceId = AddMW_Dish.installationConfig.InstallationPlaceId;
                                                    _unitOfWork.MW_DishRepository.AddWithHistory(UserId, mwDish);
                                                    _unitOfWork.SaveChanges();
                                                    int Id = _unitOfWork.AllLoadInstRepository.AddAllLoadInst(LoadSubType.TLImwDish.ToString(), mwDish.Id);
                                                    if (AddMW_Dish.civilLoads != null && Id != 0)
                                                    {
                                                        TLIcivilLoads tLIcivilLoads = new TLIcivilLoads()
                                                        {
                                                            InstallationDate = AddMW_Dish.civilLoads.InstallationDate,
                                                            allLoadInstId = Id,
                                                            legId = AddMW_Dish.installationConfig?.legId,
                                                            allCivilInstId = AllcivilinstId.allCivilInst.Id,
                                                            sideArmId = AddMW_Dish.installationConfig?.sideArmId?.FirstOrDefault(),
                                                            sideArm2Id = AddMW_Dish.installationConfig?.sideArmId != null && AddMW_Dish.installationConfig.sideArmId.Count > 2 ? AddMW_Dish.installationConfig.sideArmId[2] : (int?)null,
                                                            ItemOnCivilStatus = AddMW_Dish.civilLoads.ItemOnCivilStatus,
                                                            ItemStatus = AddMW_Dish.civilLoads?.ItemStatus,
                                                            Dismantle = false,
                                                            ReservedSpace = AddMW_Dish.civilLoads.ReservedSpace,
                                                            SiteCode = SiteCode,
                                                        };

                                                        _unitOfWork.CivilLoadsRepository.AddWithHistory(UserId, tLIcivilLoads);
                                                        _unitOfWork.SaveChanges();
                                                    }
                                                    if (AddMW_Dish.dynamicAttribute != null ? AddMW_Dish.dynamicAttribute.Count > 0 : false)
                                                    {
                                                        foreach (var DynamicAttInstValue in AddMW_Dish.dynamicAttribute)
                                                        {
                                                            _unitOfWork.DynamicAttInstValueRepository.AddDdynamicAttributeInstallation(UserId, DynamicAttInstValue, TableNameEntity.Id, mwDish.Id, ConnectionString);
                                                        }
                                                    }


                                                }
                                                else
                                                {
                                                    if (mwDish.CenterHigh <= 0)
                                                    {
                                                        if (mwDish.HBA_Surface <= 0)
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HBA_Surface must bigger from zero", (int)ApiReturnCode.fail);
                                                        }
                                                        else if (MWDishLibrary.diameter <= 0)
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "CenterHigh must bigger from zero", (int)ApiReturnCode.fail);
                                                        }
                                                        else
                                                        {
                                                            mwDish.CenterHigh = mwDish.HBA + MWDishLibrary.diameter / 2;
                                                        }
                                                    }
                                                    if (mwDish.SpaceInstallation == 0)
                                                    {


                                                        if (MWDishLibrary.SpaceLibrary == 0)
                                                        {
                                                            if (MWDishLibrary.diameter == 0)
                                                            {
                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "SpaceInstallation must bigger from zero", (int)ApiReturnCode.fail);
                                                            }
                                                            mwDish.SpaceInstallation = Convert.ToSingle(3.14) * (float)Math.Pow(MWDishLibrary.diameter / 2, 2);
                                                        }
                                                        else
                                                        {
                                                            mwDish.SpaceInstallation = MWDishLibrary.SpaceLibrary;
                                                        }
                                                    }

                                                    if (AddMW_Dish.installationAttributes.Azimuth <= 0)
                                                    {
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Azimuth must bigger from zero", (int)ApiReturnCode.fail);
                                                    }
                                                    if (AddMW_Dish.installationAttributes.HeightBase <= 0)
                                                    {
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HeightBase must bigger from zero", (int)ApiReturnCode.fail);
                                                    }


                                                    if (AddMW_Dish.installationConfig.sideArmId.Count == 1)
                                                    {
                                                        List<MV_MWDISH_VIEW> Checkinstallationplace = _dbContext.MV_MWDISH_VIEW.Where(
                                                           x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id &&
                                                           x.SIDEARM_ID == AddMW_Dish.installationConfig.sideArmId[0]).ToList();
                                                        MV_MWDISH_VIEW CheckAzimuthAndHeightBase = Checkinstallationplace.FirstOrDefault(x => x.Azimuth == mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                                                        if (CheckAzimuthAndHeightBase != null)
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                                                        }
                                                        else if (Checkinstallationplace != null && Checkinstallationplace.Count >= 3)
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                                                        }
                                                        else
                                                        {
                                                            var SideArmName1 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == AddMW_Dish.installationConfig.sideArmId[0]);
                                                            if (SideArmName1 != null && mwDish.Azimuth > 0 && mwDish.HeightBase > 0)
                                                            {
                                                                mwDish.DishName = SideArmName1?.Name + " " + mwDish.Azimuth + " " + mwDish.HeightBase;
                                                            }
                                                        }
                                                    }
                                                    if (AddMW_Dish.installationConfig.sideArmId.Count == 2)
                                                    {
                                                        List<MV_MWDISH_VIEW> Checkinstallationplace2 = _dbContext.MV_MWDISH_VIEW.Where(
                                                          x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id &&
                                                          x.SIDEARM_ID == AddMW_Dish.installationConfig.sideArmId[1]).ToList();
                                                        MV_MWDISH_VIEW CheckAzimuthAndHeightBase = Checkinstallationplace2.FirstOrDefault(x => x.Azimuth == mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                                                        if (CheckAzimuthAndHeightBase != null)
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                                                        }
                                                        else if (Checkinstallationplace2 != null && Checkinstallationplace2.Count >= 3)
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                                                        }
                                                        else
                                                        {
                                                            var SideArmName1 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == AddMW_Dish.installationConfig.sideArmId[0]);
                                                            var SideArmName2 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == AddMW_Dish.installationConfig.sideArmId[1]);
                                                            if (SideArmName1 != null && SideArmName2 != null && mwDish.Azimuth > 0 && mwDish.HeightBase > 0)
                                                            {
                                                                mwDish.DishName = SideArmName1?.Name + " " + SideArmName2?.Name + " " + mwDish.Azimuth + " " + mwDish.HeightBase;
                                                            }
                                                        }
                                                    }
                                                    var CheckName = _dbContext.MV_MWDISH_VIEW.FirstOrDefault(x => !x.Dismantle &&
                                                     (x.Id != null ? x.DishName.ToLower() == mwDish.DishName.ToLower() : false
                                                        && x.SiteCode.ToLower() == SiteCode.ToLower()));

                                                    if (CheckName != null)
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The name {mwDish.DishName} is already exists", (int)Helpers.Constants.ApiReturnCode.fail);

                                                    if (mwDish?.ItemConnectToId != null)
                                                    {
                                                        TLIitemConnectTo ConnectedToEntity = _unitOfWork.ItemConnectToRepository.GetByID(mwDish.ItemConnectToId);
                                                        if (ConnectedToEntity.Name.ToLower() == "farsitedish")
                                                            if (string.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if dish connected to FarSiteDish", (int)ApiReturnCode.fail);
                                                        if (ConnectedToEntity.Name.ToLower() == "farsitedish" && mwDish.RepeaterTypeId != null)
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not selected RepeaterType because selected itemconecctedto is farsitedish", (int)ApiReturnCode.fail);

                                                        else if (ConnectedToEntity.Name.ToLower() == "repeater")
                                                        {
                                                            if (mwDish.RepeaterTypeId == null)
                                                            {
                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type shouldn't be null", (int)ApiReturnCode.fail);
                                                            }
                                                            else
                                                            {
                                                                TLIrepeaterType RepeaterTypeEntity = null;
                                                                if (mwDish.RepeaterTypeId != null)
                                                                {
                                                                    RepeaterTypeEntity = _unitOfWork.RepeaterTypeRepository.GetWhereFirst(x => x.Id == mwDish.RepeaterTypeId);
                                                                    if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() != "active" && RepeaterTypeEntity.Name.ToLower() != "passive")
                                                                    {
                                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type should be active or passive", (int)ApiReturnCode.fail);
                                                                    }
                                                                    if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() == "active")
                                                                    {
                                                                        if (String.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                                                                        {
                                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if repeater type is active", (int)ApiReturnCode.fail);
                                                                        }
                                                                    }
                                                                    else if (RepeaterTypeEntity.Name.ToLower() == "passive")
                                                                    {
                                                                        if (ConnectedToEntity.Name.ToLower() != "repeater" || RepeaterTypeEntity.Name.ToLower() != "passive")
                                                                        {
                                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "The dish should be connected to repeater and repeater type is passive", (int)ApiReturnCode.fail);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    mwDish.MwDishLibraryId = AddMW_Dish.installationConfig.MwDishLibraryId;
                                                    mwDish.InstallationPlaceId = AddMW_Dish.installationConfig.InstallationPlaceId;
                                                    _unitOfWork.MW_DishRepository.AddWithHistory(UserId, mwDish);
                                                    _unitOfWork.SaveChanges();
                                                    int Id = _unitOfWork.AllLoadInstRepository.AddAllLoadInst(LoadSubType.TLImwDish.ToString(), mwDish.Id);
                                                    if (AddMW_Dish.civilLoads != null && Id != 0)
                                                    {
                                                        TLIcivilLoads tLIcivilLoads = new TLIcivilLoads()
                                                        {
                                                            InstallationDate = AddMW_Dish.civilLoads.InstallationDate,
                                                            allLoadInstId = Id,
                                                            legId = AddMW_Dish.installationConfig?.legId,
                                                            allCivilInstId = AllcivilinstId.allCivilInst.Id,
                                                            sideArmId = AddMW_Dish.installationConfig?.sideArmId?.FirstOrDefault(),
                                                            sideArm2Id = AddMW_Dish.installationConfig?.sideArmId != null && AddMW_Dish.installationConfig.sideArmId.Count > 2 ? AddMW_Dish.installationConfig.sideArmId[2] : (int?)null,
                                                            ItemOnCivilStatus = AddMW_Dish.civilLoads.ItemOnCivilStatus,
                                                            ItemStatus = AddMW_Dish.civilLoads?.ItemStatus,
                                                            Dismantle = false,
                                                            ReservedSpace = AddMW_Dish.civilLoads.ReservedSpace,
                                                            SiteCode = SiteCode,
                                                        };

                                                        _unitOfWork.CivilLoadsRepository.AddWithHistory(UserId, tLIcivilLoads);
                                                        _unitOfWork.SaveChanges();
                                                    }

                                                    if (AddMW_Dish.dynamicAttribute != null ? AddMW_Dish.dynamicAttribute.Count > 0 : false)
                                                    {
                                                        foreach (var DynamicAttInstValue in AddMW_Dish.dynamicAttribute)
                                                        {
                                                            _unitOfWork.DynamicAttInstValueRepository.AddDdynamicAttributeInstallation(UserId, DynamicAttInstValue, TableNameEntity.Id, mwDish.Id, ConnectionString);
                                                        }
                                                    }

                                                }



                                            }
                                            else
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "must selected sideArm ", (int)ApiReturnCode.fail);
                                            }


                                        }
                                        else
                                        {
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "must selected civilwithlegs item ", (int)ApiReturnCode.fail);
                                        }
                                    }
                                    if (AddMW_Dish.installationConfig.civilSteelType == 1)
                                    {
                                        if (AddMW_Dish.installationConfig.civilWithoutLegId != null)
                                        {

                                            var AllcivilinstId = _unitOfWork.CivilSiteDateRepository.GetIncludeWhereFirst(x => x.allCivilInst.civilWithoutLegId ==
                                           AddMW_Dish.installationConfig.civilWithoutLegId && !x.Dismantle, x => x.allCivilInst, x => x.allCivilInst.civilWithLegs, x => x.allCivilInst.civilWithoutLeg,
                                           x => x.allCivilInst.civilWithLegs.CivilWithLegsLib, x => x.allCivilInst.civilWithoutLeg.CivilWithoutlegsLib);
                                            if (AllcivilinstId == null)
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The civil is not found", (int)ApiReturnCode.fail);

                                            if (AddMW_Dish.installationConfig.sideArmId != null)
                                            {    
                                                var SideArm1 = _unitOfWork.CivilLoadsRepository.GetWhereFirst(x => x.allCivilInst.civilWithoutLegId
                                                  == AddMW_Dish.installationConfig.civilWithoutLegId && x.sideArmId == AddMW_Dish.installationConfig.sideArmId[0]);
                                                if (SideArm1 == null)
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The one SideArm is not found on civil", (int)ApiReturnCode.fail);
                                                var SideArm2 = _unitOfWork.CivilLoadsRepository.GetWhereFirst(x => x.allCivilInst.civilWithoutLegId
                                               == AddMW_Dish.installationConfig.civilWithoutLegId && x.sideArmId == AddMW_Dish.installationConfig.sideArmId[1]);
                                                if (SideArm2 == null)
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The tow SideArm is not found on civil", (int)ApiReturnCode.fail);


                                                if (AddMW_Dish.civilLoads.ReservedSpace == true)
                                                {
                                                    var Message = _unitOfWork.CivilWithLegsRepository.CheckAvailableSpaceOnCivils(AllcivilinstId.allCivilInst).Message;

                                                    if (Message != "Success")
                                                    {
                                                        return new Response<GetForAddMWDishInstallationObject>(true, null, null, Message, (int)ApiReturnCode.fail);
                                                    }
                                                    if (mwDish.CenterHigh <= 0)
                                                    {
                                                        if (mwDish.HBA_Surface <= 0)
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HBA_Surface must bigger from zero", (int)ApiReturnCode.fail);
                                                        }
                                                        else if (MWDishLibrary.diameter <= 0)
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "CenterHigh must bigger from zero", (int)ApiReturnCode.fail);
                                                        }
                                                        else
                                                        {
                                                            mwDish.CenterHigh = mwDish.HBA + MWDishLibrary.diameter / 2;
                                                        }
                                                    }
                                                    if (mwDish.SpaceInstallation == 0)
                                                    {


                                                        if (MWDishLibrary.SpaceLibrary == 0)
                                                        {
                                                            if (MWDishLibrary.diameter == 0)
                                                            {
                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "SpaceInstallation must bigger from zero", (int)ApiReturnCode.fail);
                                                            }
                                                            mwDish.SpaceInstallation = Convert.ToSingle(3.14) * (float)Math.Pow(MWDishLibrary.diameter / 2, 2);
                                                        }
                                                        else
                                                        {
                                                            mwDish.SpaceInstallation = MWDishLibrary.SpaceLibrary;
                                                        }
                                                    }
                                                    if (mwDish.Azimuth <= 0)
                                                    {
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Azimuth must bigger from zero", (int)ApiReturnCode.fail);
                                                    }
                                                    if (mwDish.HeightBase <= 0)
                                                    {
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HeightBase must bigger from zero", (int)ApiReturnCode.fail);
                                                    }
                                                    if (AddMW_Dish.installationConfig.sideArmId.Count == 1)
                                                    {
                                                        List<MV_MWDISH_VIEW> Checkinstallationplace = _dbContext.MV_MWDISH_VIEW.Where(
                                                           x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id &&
                                                           x.SIDEARM_ID == AddMW_Dish.installationConfig.sideArmId[0]).ToList();
                                                        MV_MWDISH_VIEW CheckAzimuthAndHeightBase = Checkinstallationplace.FirstOrDefault(x => x.Azimuth == mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                                                        if (CheckAzimuthAndHeightBase != null)
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                                                        }
                                                        else if (Checkinstallationplace != null && Checkinstallationplace.Count >= 3)
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                                                        }
                                                        else
                                                        {
                                                            var SideArmName1 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == AddMW_Dish.installationConfig.sideArmId[0]);
                                                            if (SideArmName1 != null && mwDish.Azimuth > 0 && mwDish.HeightBase > 0)
                                                            {
                                                                mwDish.DishName = SideArmName1?.Name + " " + mwDish.Azimuth + " " + mwDish.HeightBase;
                                                            }
                                                        }
                                                    }
                                                    if (AddMW_Dish.installationConfig.sideArmId.Count == 2)
                                                    {
                                                        List<MV_MWDISH_VIEW> Checkinstallationplace2 = _dbContext.MV_MWDISH_VIEW.Where(
                                                           x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id &&
                                                           x.SIDEARM_ID == AddMW_Dish.installationConfig.sideArmId[1]).ToList();
                                                        MV_MWDISH_VIEW CheckAzimuthAndHeightBase = Checkinstallationplace2.FirstOrDefault(x => x.Azimuth == mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                                                        if (CheckAzimuthAndHeightBase != null)
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                                                        }
                                                        else if (Checkinstallationplace2 != null && Checkinstallationplace2.Count >= 3)
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                                                        }
                                                        else
                                                        {
                                                            var SideArmName1 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == AddMW_Dish.installationConfig.sideArmId[0]);

                                                            var SideArmName2 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == AddMW_Dish.installationConfig.sideArmId[1]);
                                                            if (SideArmName1 != null && SideArmName2 != null && mwDish.Azimuth > 0 && mwDish.HeightBase > 0)
                                                            {
                                                                mwDish.DishName = SideArmName1?.Name + " " + SideArmName2?.Name + " " + mwDish.Azimuth + " " + mwDish.HeightBase;
                                                            }
                                                        }
                                                    }
                                                    var CheckName = _dbContext.MV_MWDISH_VIEW.FirstOrDefault(x => !x.Dismantle &&
                                                     (x.Id != null ? x.DishName.ToLower() == mwDish.DishName.ToLower() : false
                                                        && x.SiteCode.ToLower() == SiteCode.ToLower()));

                                                    if (CheckName != null)
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The name {mwDish.DishName} is already exists", (int)Helpers.Constants.ApiReturnCode.fail);

                                                    if (AllcivilinstId.allCivilInst.civilWithoutLeg?.CurrentLoads == null)
                                                    {
                                                        AllcivilinstId.allCivilInst.civilWithoutLeg.CurrentLoads = 0;
                                                    }
                                                    var OldVcivilinfo = _dbContext.TLIcivilWithoutLeg.AsNoTracking().FirstOrDefault(x => x.Id == AllcivilinstId.allCivilInst.civilWithoutLegId);

                                                    if (OldVcivilinfo != null)
                                                    {

                                                        var EquivalentSpace = mwDish.SpaceInstallation * (mwDish.CenterHigh / (float)AllcivilinstId.allCivilInst.civilWithoutLeg.HeightBase);

                                                        AllcivilinstId.allCivilInst.civilWithoutLeg.CurrentLoads += EquivalentSpace;
                                                        mwDish.EquivalentSpace = EquivalentSpace;
                                                        _unitOfWork.CivilWithoutLegRepository.UpdateWithHistory(UserId, OldVcivilinfo, AllcivilinstId.allCivilInst.civilWithoutLeg);
                                                        _unitOfWork.SaveChanges();
                                                    }

                                                    if (mwDish?.ItemConnectToId != null)
                                                    {
                                                        TLIitemConnectTo ConnectedToEntity = _unitOfWork.ItemConnectToRepository.GetByID(mwDish.ItemConnectToId);
                                                        if (ConnectedToEntity.Name.ToLower() == "farsitedish")
                                                            if (string.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if dish connected to FarSiteDish", (int)ApiReturnCode.fail);
                                                        if (ConnectedToEntity.Name.ToLower() == "farsitedish" && mwDish.RepeaterTypeId != null)
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not selected RepeaterType because selected itemconecctedto is farsitedish", (int)ApiReturnCode.fail);

                                                        else if (ConnectedToEntity.Name.ToLower() == "repeater")
                                                        {
                                                            if (mwDish.RepeaterTypeId == null)
                                                            {
                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type shouldn't be null", (int)ApiReturnCode.fail);
                                                            }
                                                            else
                                                            {
                                                                TLIrepeaterType RepeaterTypeEntity = null;
                                                                if (mwDish.RepeaterTypeId != null)
                                                                {
                                                                    RepeaterTypeEntity = _unitOfWork.RepeaterTypeRepository.GetWhereFirst(x => x.Id == mwDish.RepeaterTypeId);
                                                                    if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() != "active" && RepeaterTypeEntity.Name.ToLower() != "passive")
                                                                    {
                                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type should be active or passive", (int)ApiReturnCode.fail);
                                                                    }
                                                                    if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() == "active")
                                                                    {
                                                                        if (String.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                                                                        {
                                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if repeater type is active", (int)ApiReturnCode.fail);
                                                                        }
                                                                    }
                                                                    else if (RepeaterTypeEntity.Name.ToLower() == "passive")
                                                                    {
                                                                        if (ConnectedToEntity.Name.ToLower() != "repeater" || RepeaterTypeEntity.Name.ToLower() != "passive")
                                                                        {
                                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "The dish should be connected to repeater and repeater type is passive", (int)ApiReturnCode.fail);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    mwDish.MwDishLibraryId = AddMW_Dish.installationConfig.MwDishLibraryId;
                                                    mwDish.InstallationPlaceId = AddMW_Dish.installationConfig.InstallationPlaceId;
                                                    _unitOfWork.MW_DishRepository.AddWithHistory(UserId, mwDish);
                                                    _unitOfWork.SaveChanges();
                                                    int Id = _unitOfWork.AllLoadInstRepository.AddAllLoadInst(LoadSubType.TLImwDish.ToString(), mwDish.Id);
                                                    if (AddMW_Dish.civilLoads != null && Id != 0)
                                                    {
                                                        TLIcivilLoads tLIcivilLoads = new TLIcivilLoads()
                                                        {
                                                            InstallationDate = AddMW_Dish.civilLoads.InstallationDate,
                                                            allLoadInstId = Id,
                                                            legId = AddMW_Dish.installationConfig?.legId,
                                                            allCivilInstId = AllcivilinstId.allCivilInst.Id,
                                                            sideArmId = AddMW_Dish.installationConfig?.sideArmId?.FirstOrDefault(),
                                                            sideArm2Id = AddMW_Dish.installationConfig?.sideArmId != null && AddMW_Dish.installationConfig.sideArmId.Count > 2 ? AddMW_Dish.installationConfig.sideArmId[2] : (int?)null,
                                                            ItemOnCivilStatus = AddMW_Dish.civilLoads.ItemOnCivilStatus,
                                                            ItemStatus = AddMW_Dish.civilLoads?.ItemStatus,
                                                            Dismantle = false,
                                                            ReservedSpace = AddMW_Dish.civilLoads.ReservedSpace,
                                                            SiteCode = SiteCode,
                                                        };

                                                        _unitOfWork.CivilLoadsRepository.AddWithHistory(UserId, tLIcivilLoads);
                                                        _unitOfWork.SaveChanges();
                                                    }

                                                    if (AddMW_Dish.dynamicAttribute != null ? AddMW_Dish.dynamicAttribute.Count > 0 : false)
                                                    {
                                                        foreach (var DynamicAttInstValue in AddMW_Dish.dynamicAttribute)
                                                        {
                                                            _unitOfWork.DynamicAttInstValueRepository.AddDdynamicAttributeInstallation(UserId, DynamicAttInstValue, TableNameEntity.Id, mwDish.Id, ConnectionString);
                                                        }
                                                    }


                                                }
                                                else
                                                {
                                                    if (mwDish.CenterHigh <= 0)
                                                    {
                                                        if (mwDish.HBA_Surface <= 0)
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HBA_Surface must bigger from zero", (int)ApiReturnCode.fail);
                                                        }
                                                        else if (MWDishLibrary.diameter <= 0)
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "CenterHigh must bigger from zero", (int)ApiReturnCode.fail);
                                                        }
                                                        else
                                                        {
                                                            mwDish.CenterHigh = mwDish.HBA + MWDishLibrary.diameter / 2;
                                                        }
                                                    }
                                                    if (mwDish.SpaceInstallation == 0)
                                                    {


                                                        if (MWDishLibrary.SpaceLibrary == 0)
                                                        {
                                                            if (MWDishLibrary.diameter == 0)
                                                            {
                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "SpaceInstallation must bigger from zero", (int)ApiReturnCode.fail);
                                                            }
                                                            mwDish.SpaceInstallation = Convert.ToSingle(3.14) * (float)Math.Pow(MWDishLibrary.diameter / 2, 2);
                                                        }
                                                        else
                                                        {
                                                            mwDish.SpaceInstallation = MWDishLibrary.SpaceLibrary;
                                                        }
                                                    }
                                                    if (mwDish.Azimuth <= 0)
                                                    {
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Azimuth must bigger from zero", (int)ApiReturnCode.fail);
                                                    }
                                                    if (mwDish.HeightBase <= 0)
                                                    {
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HeightBase must bigger from zero", (int)ApiReturnCode.fail);
                                                    }
                                                    if (AddMW_Dish.installationConfig.sideArmId.Count == 1)
                                                    {
                                                        List<MV_MWDISH_VIEW> Checkinstallationplace = _dbContext.MV_MWDISH_VIEW.Where(
                                                           x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id &&
                                                           x.SIDEARM_ID == AddMW_Dish.installationConfig.sideArmId[0]).ToList();
                                                        MV_MWDISH_VIEW CheckAzimuthAndHeightBase = Checkinstallationplace.FirstOrDefault(x => x.Azimuth == mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                                                        if (CheckAzimuthAndHeightBase != null)
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                                                        }
                                                        else if (Checkinstallationplace != null && Checkinstallationplace.Count >= 3)
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                                                        }
                                                        else
                                                        {
                                                            var SideArmName1 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == AddMW_Dish.installationConfig.sideArmId[0]);
                                                            if (SideArmName1 != null && mwDish.Azimuth > 0 && mwDish.HeightBase > 0)
                                                            {
                                                                mwDish.DishName = SideArmName1?.Name + " " + mwDish.Azimuth + " " + mwDish.HeightBase;
                                                            }
                                                        }
                                                    }
                                                    if (AddMW_Dish.installationConfig.sideArmId.Count == 2)
                                                    {
                                                        List<MV_MWDISH_VIEW> Checkinstallationplace2 = _dbContext.MV_MWDISH_VIEW.Where(
                                                           x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id &&
                                                           x.SIDEARM_ID == AddMW_Dish.installationConfig.sideArmId[1]).ToList();
                                                        MV_MWDISH_VIEW CheckAzimuthAndHeightBase = Checkinstallationplace2.FirstOrDefault(x => x.Azimuth == mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                                                        if (CheckAzimuthAndHeightBase != null)
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                                                        }
                                                        else if (Checkinstallationplace2 != null && Checkinstallationplace2.Count >= 3)
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                                                        }
                                                        else
                                                        {
                                                            var SideArmName1 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == AddMW_Dish.installationConfig.sideArmId[0]);

                                                            var SideArmName2 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == AddMW_Dish.installationConfig.sideArmId[1]);
                                                            if (SideArmName1 != null && SideArmName2 != null && mwDish.Azimuth > 0 && mwDish.HeightBase > 0)
                                                            {
                                                                mwDish.DishName = SideArmName1?.Name + " " + SideArmName2?.Name + " " + mwDish.Azimuth + " " + mwDish.HeightBase;
                                                            }
                                                        }
                                                    }
                                                    var CheckName = _dbContext.MV_MWDISH_VIEW.FirstOrDefault(x => !x.Dismantle &&
                                                    (x.Id != null ? x.DishName.ToLower() == mwDish.DishName.ToLower() : false
                                                     && x.SiteCode.ToLower() == SiteCode.ToLower()));

                                                    if (CheckName != null)
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The name {mwDish.DishName} is already exists", (int)Helpers.Constants.ApiReturnCode.fail);
                                                    if (mwDish?.ItemConnectToId != null)
                                                    {
                                                        TLIitemConnectTo ConnectedToEntity = _unitOfWork.ItemConnectToRepository.GetByID(mwDish.ItemConnectToId);
                                                        if (ConnectedToEntity.Name.ToLower() == "farsitedish")
                                                            if (string.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if dish connected to FarSiteDish", (int)ApiReturnCode.fail);
                                                        if (ConnectedToEntity.Name.ToLower() == "farsitedish" && mwDish.RepeaterTypeId != null)
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not selected RepeaterType because selected itemconecctedto is farsitedish", (int)ApiReturnCode.fail);

                                                        else if (ConnectedToEntity.Name.ToLower() == "repeater")
                                                        {
                                                            if (mwDish.RepeaterTypeId == null)
                                                            {
                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type shouldn't be null", (int)ApiReturnCode.fail);
                                                            }
                                                            else
                                                            {
                                                                TLIrepeaterType RepeaterTypeEntity = null;
                                                                if (mwDish.RepeaterTypeId != null)
                                                                {
                                                                    RepeaterTypeEntity = _unitOfWork.RepeaterTypeRepository.GetWhereFirst(x => x.Id == mwDish.RepeaterTypeId);
                                                                    if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() != "active" && RepeaterTypeEntity.Name.ToLower() != "passive")
                                                                    {
                                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type should be active or passive", (int)ApiReturnCode.fail);
                                                                    }
                                                                    if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() == "active")
                                                                    {
                                                                        if (String.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                                                                        {
                                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if repeater type is active", (int)ApiReturnCode.fail);
                                                                        }
                                                                    }
                                                                    else if (RepeaterTypeEntity.Name.ToLower() == "passive")
                                                                    {
                                                                        if (ConnectedToEntity.Name.ToLower() != "repeater" || RepeaterTypeEntity.Name.ToLower() != "passive")
                                                                        {
                                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "The dish should be connected to repeater and repeater type is passive", (int)ApiReturnCode.fail);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    mwDish.MwDishLibraryId = AddMW_Dish.installationConfig.MwDishLibraryId;
                                                    mwDish.InstallationPlaceId = AddMW_Dish.installationConfig.InstallationPlaceId;
                                                    _unitOfWork.MW_DishRepository.AddWithHistory(UserId, mwDish);
                                                    _unitOfWork.SaveChanges();
                                                    int Id = _unitOfWork.AllLoadInstRepository.AddAllLoadInst(LoadSubType.TLImwDish.ToString(), mwDish.Id);
                                                    if (AddMW_Dish.civilLoads != null && Id != 0)
                                                    {
                                                        TLIcivilLoads tLIcivilLoads = new TLIcivilLoads()
                                                        {
                                                            InstallationDate = AddMW_Dish.civilLoads.InstallationDate,
                                                            allLoadInstId = Id,
                                                            legId = AddMW_Dish.installationConfig?.legId,
                                                            allCivilInstId = AllcivilinstId.allCivilInst.Id,
                                                            sideArmId = AddMW_Dish.installationConfig?.sideArmId?.FirstOrDefault(),
                                                            sideArm2Id = AddMW_Dish.installationConfig?.sideArmId != null && AddMW_Dish.installationConfig.sideArmId.Count > 2 ? AddMW_Dish.installationConfig.sideArmId[2] : (int?)null,
                                                            ItemOnCivilStatus = AddMW_Dish.civilLoads.ItemOnCivilStatus,
                                                            ItemStatus = AddMW_Dish.civilLoads?.ItemStatus,
                                                            Dismantle = false,
                                                            ReservedSpace = AddMW_Dish.civilLoads.ReservedSpace,
                                                            SiteCode = SiteCode,
                                                        };

                                                        _unitOfWork.CivilLoadsRepository.AddWithHistory(UserId, tLIcivilLoads);
                                                        _unitOfWork.SaveChanges();
                                                    }

                                                    if (AddMW_Dish.dynamicAttribute != null ? AddMW_Dish.dynamicAttribute.Count > 0 : false)
                                                    {
                                                        foreach (var DynamicAttInstValue in AddMW_Dish.dynamicAttribute)
                                                        {
                                                            _unitOfWork.DynamicAttInstValueRepository.AddDdynamicAttributeInstallation(UserId, DynamicAttInstValue, TableNameEntity.Id, mwDish.Id, ConnectionString);
                                                        }
                                                    }



                                                }


                                            }
                                            else
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "must selected sideArm ", (int)ApiReturnCode.fail);
                                            }

                                        }

                                        else
                                        {
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "must selected civilwithoutlegs item ", (int)ApiReturnCode.fail);
                                        }
                                    }
                                    if (AddMW_Dish.installationConfig.civilSteelType == 2)
                                    {
                                        if (AddMW_Dish.installationConfig.civilNonSteelId != null)
                                        {
                                            var AllcivilinstId = _unitOfWork.CivilSiteDateRepository.GetIncludeWhereFirst(x => x.allCivilInst.civilNonSteelId ==
                                                AddMW_Dish.installationConfig.civilNonSteelId && !x.Dismantle, x => x.allCivilInst, x => x.allCivilInst.civilWithLegs, x => x.allCivilInst.civilWithoutLeg,
                                                x => x.allCivilInst.civilNonSteel, x => x.allCivilInst.civilWithLegs.CivilWithLegsLib, x => x.allCivilInst.civilWithoutLeg.CivilWithoutlegsLib, x => x.allCivilInst.civilNonSteel.CivilNonsteelLibrary);
                                            if (AllcivilinstId == null)
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The civil is not found", (int)ApiReturnCode.fail);

                                            if (AddMW_Dish.installationConfig.sideArmId != null)
                                            {
                                                var SideArm1 = _unitOfWork.CivilLoadsRepository.GetWhereFirst(x => x.allCivilInst.civilNonSteelId
                                                 == AddMW_Dish.installationConfig.civilNonSteelId && x.sideArmId == AddMW_Dish.installationConfig.sideArmId[0]);
                                                if (SideArm1 == null)
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The one SideArm is not found on civil", (int)ApiReturnCode.fail);
                                                var SideArm2 = _unitOfWork.CivilLoadsRepository.GetWhereFirst(x => x.allCivilInst.civilNonSteelId
                                               == AddMW_Dish.installationConfig.civilNonSteelId && x.sideArmId == AddMW_Dish.installationConfig.sideArmId[1]);
                                                if (SideArm2 == null)
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The tow SideArm is not found on civil", (int)ApiReturnCode.fail);

                                                if (mwDish.CenterHigh <= 0)
                                                {
                                                    if (mwDish.HBA_Surface <= 0)
                                                    {
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HBA_Surface must bigger from zero", (int)ApiReturnCode.fail);
                                                    }
                                                    else if (MWDishLibrary.diameter <= 0)
                                                    {
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "CenterHigh must bigger from zero", (int)ApiReturnCode.fail);
                                                    }
                                                    else
                                                    {
                                                        mwDish.CenterHigh = mwDish.HBA + MWDishLibrary.diameter / 2;
                                                    }
                                                }
                                                if (mwDish.SpaceInstallation == 0)
                                                {

                                                    if (MWDishLibrary.SpaceLibrary == 0)
                                                    {
                                                        if (MWDishLibrary.diameter == 0)
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "SpaceInstallation must bigger from zero", (int)ApiReturnCode.fail);
                                                        }
                                                        mwDish.SpaceInstallation = Convert.ToSingle(3.14) * (float)Math.Pow(MWDishLibrary.diameter / 2, 2);
                                                    }
                                                    else
                                                    {
                                                        mwDish.SpaceInstallation = MWDishLibrary.SpaceLibrary;
                                                    }
                                                }

                                                if (mwDish.Azimuth <= 0)
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Azimuth must bigger from zero", (int)ApiReturnCode.fail);
                                                }
                                                if (mwDish.HeightBase <= 0)
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HeightBase must bigger from zero", (int)ApiReturnCode.fail);
                                                }

                                                if (!string.IsNullOrEmpty(mwDish.Serial_Number))
                                                {
                                                    bool CheckSerialNumber = _dbContext.MV_MWDISH_VIEW.Any(x => x.Serial_Number == mwDish.Serial_Number && !x.Dismantle);
                                                    if (CheckSerialNumber)
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The Serial Number {mwDish.Serial_Number} is already exists", (int)ApiReturnCode.fail);
                                                }
                                                if (AddMW_Dish.installationConfig.sideArmId.Count == 1)
                                                {
                                                    List<MV_MWDISH_VIEW> Checkinstallationplace = _dbContext.MV_MWDISH_VIEW.Where(
                                                           x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id &&
                                                           x.SIDEARM_ID == AddMW_Dish.installationConfig.sideArmId[0]).ToList();
                                                    MV_MWDISH_VIEW CheckAzimuthAndHeightBase = Checkinstallationplace.FirstOrDefault(x => x.Azimuth == mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                                                    if (CheckAzimuthAndHeightBase != null)
                                                    {
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                                                    }
                                                    else if (Checkinstallationplace != null && Checkinstallationplace.Count >= 3)
                                                    {
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                                                    }
                                                    else
                                                    {
                                                        var SideArmName1 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == AddMW_Dish.installationConfig.sideArmId[0]);
                                                        if (SideArmName1 != null && mwDish.Azimuth > 0 && mwDish.HeightBase > 0)
                                                        {
                                                            mwDish.DishName = SideArmName1?.Name + " " + mwDish.Azimuth + " " + mwDish.HeightBase;
                                                        }
                                                    }
                                                }
                                                if (AddMW_Dish.installationConfig.sideArmId.Count == 2)
                                                {
                                                    List<MV_MWDISH_VIEW> Checkinstallationplace2 = _dbContext.MV_MWDISH_VIEW.Where(
                                                            x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id &&
                                                            x.SIDEARM_ID == AddMW_Dish.installationConfig.sideArmId[1]).ToList();
                                                    MV_MWDISH_VIEW CheckAzimuthAndHeightBase = Checkinstallationplace2.FirstOrDefault(x => x.Azimuth == mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                                                    if (CheckAzimuthAndHeightBase != null)
                                                    {
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                                                    }
                                                    else if (Checkinstallationplace2 != null && Checkinstallationplace2.Count >= 3)
                                                    {
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                                                    }
                                                    else
                                                    {
                                                        var SideArmName1 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == AddMW_Dish.installationConfig.sideArmId[0]);

                                                        var SideArmName2 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == AddMW_Dish.installationConfig.sideArmId[1]);
                                                        if (SideArmName1 != null && SideArmName2 != null && mwDish.Azimuth > 0 && mwDish.HeightBase > 0)
                                                        {
                                                            mwDish.DishName = SideArmName1?.Name + " " + SideArmName2?.Name + " " + mwDish.Azimuth + " " + mwDish.HeightBase;
                                                        }
                                                    }
                                                }
                                                var CheckName = _dbContext.MV_MWDISH_VIEW.FirstOrDefault(x => !x.Dismantle &&
                                                                            (x.Id != null ? x.DishName.ToLower() == mwDish.DishName.ToLower() : false
                                                                               && x.SiteCode.ToLower() == SiteCode.ToLower()));

                                                if (CheckName != null)
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The name {mwDish.DishName} is already exists", (int)Helpers.Constants.ApiReturnCode.fail);

                                                if (mwDish?.ItemConnectToId != null)
                                                {
                                                    TLIitemConnectTo ConnectedToEntity = _unitOfWork.ItemConnectToRepository.GetByID(mwDish.ItemConnectToId);
                                                    if (ConnectedToEntity.Name.ToLower() == "farsitedish")
                                                        if (string.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if dish connected to FarSiteDish", (int)ApiReturnCode.fail);
                                                    if (ConnectedToEntity.Name.ToLower() == "farsitedish" && mwDish.RepeaterTypeId != null)
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not selected RepeaterType because selected itemconecctedto is farsitedish", (int)ApiReturnCode.fail);

                                                    else if (ConnectedToEntity.Name.ToLower() == "repeater")
                                                    {
                                                        if (mwDish.RepeaterTypeId == null)
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type shouldn't be null", (int)ApiReturnCode.fail);
                                                        }
                                                        else
                                                        {
                                                            TLIrepeaterType RepeaterTypeEntity = null;
                                                            if (mwDish.RepeaterTypeId != null)
                                                            {
                                                                RepeaterTypeEntity = _unitOfWork.RepeaterTypeRepository.GetWhereFirst(x => x.Id == mwDish.RepeaterTypeId);
                                                                if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() != "active" && RepeaterTypeEntity.Name.ToLower() != "passive")
                                                                {
                                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type should be active or passive", (int)ApiReturnCode.fail);
                                                                }
                                                                if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() == "active")
                                                                {
                                                                    if (String.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                                                                    {
                                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if repeater type is active", (int)ApiReturnCode.fail);
                                                                    }
                                                                }
                                                                else if (RepeaterTypeEntity.Name.ToLower() == "passive")
                                                                {
                                                                    if (ConnectedToEntity.Name.ToLower() != "repeater" || RepeaterTypeEntity.Name.ToLower() != "passive")
                                                                    {
                                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "The dish should be connected to repeater and repeater type is passive", (int)ApiReturnCode.fail);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                mwDish.MwDishLibraryId = AddMW_Dish.installationConfig.MwDishLibraryId;
                                                mwDish.InstallationPlaceId = AddMW_Dish.installationConfig.InstallationPlaceId;
                                                _unitOfWork.MW_DishRepository.AddWithHistory(UserId, mwDish);
                                                _unitOfWork.SaveChanges();
                                                int Id = _unitOfWork.AllLoadInstRepository.AddAllLoadInst(LoadSubType.TLImwDish.ToString(), mwDish.Id);
                                                if (AddMW_Dish.civilLoads != null && Id != 0)
                                                {
                                                    TLIcivilLoads tLIcivilLoads = new TLIcivilLoads()
                                                    {
                                                        InstallationDate = AddMW_Dish.civilLoads.InstallationDate,
                                                        allLoadInstId = Id,
                                                        legId = AddMW_Dish.installationConfig?.legId,
                                                        allCivilInstId = AllcivilinstId.allCivilInst.Id,
                                                        sideArmId = AddMW_Dish.installationConfig?.sideArmId?.FirstOrDefault(),
                                                        sideArm2Id = AddMW_Dish.installationConfig?.sideArmId != null && AddMW_Dish.installationConfig.sideArmId.Count > 2 ? AddMW_Dish.installationConfig.sideArmId[2] : (int?)null,
                                                        ItemOnCivilStatus = AddMW_Dish.civilLoads.ItemOnCivilStatus,
                                                        ItemStatus = AddMW_Dish.civilLoads?.ItemStatus,
                                                        Dismantle = false,
                                                        ReservedSpace = AddMW_Dish.civilLoads.ReservedSpace,
                                                        SiteCode = SiteCode,
                                                    };

                                                    _unitOfWork.CivilLoadsRepository.AddWithHistory(UserId, tLIcivilLoads);
                                                    _unitOfWork.SaveChanges();
                                                }
                                                if (AddMW_Dish.dynamicAttribute != null ? AddMW_Dish.dynamicAttribute.Count > 0 : false)
                                                {
                                                    foreach (var DynamicAttInstValue in AddMW_Dish.dynamicAttribute)
                                                    {
                                                        _unitOfWork.DynamicAttInstValueRepository.AddDdynamicAttributeInstallation(UserId, DynamicAttInstValue, TableNameEntity.Id, mwDish.Id, ConnectionString);
                                                    }
                                                }



                                            }
                                            else
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "must selected sideArm ", (int)ApiReturnCode.fail);
                                            }
                                        }
                                        else
                                        {
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "must selected civilnonsteel item ", (int)ApiReturnCode.fail);
                                        }
                                    }

                                }

                            }
                            else if (LoadSubType.TLImwRFU.ToString() == TableName)
                            {
                                AddMW_RFUViewModel AddMW_RFU = _mapper.Map<AddMW_RFUViewModel>(MWInstallationViewModel);
                                TLImwRFU mwRFU = _mapper.Map<TLImwRFU>(AddMW_RFU);
                                bool test = false;
                                if (AddMW_RFU.TLIdynamicAttInstValue != null ? AddMW_RFU.TLIdynamicAttInstValue.Count > 0 : false)
                                {
                                    string CheckDependencyValidation = CheckDependencyValidationForMWTypes(MWInstallationViewModel, TableName, SiteCode);

                                    if (!string.IsNullOrEmpty(CheckDependencyValidation))
                                        return new Response<GetForAddMWDishInstallationObject>(true, null, null, CheckDependencyValidation, (int)ApiReturnCode.fail);

                                    string CheckGeneralValidation = CheckGeneralValidationFunction(AddMW_RFU.TLIdynamicAttInstValue, TableName);

                                    if (!string.IsNullOrEmpty(CheckGeneralValidation))
                                        return new Response<GetForAddMWDishInstallationObject>(true, null, null, CheckGeneralValidation, (int)ApiReturnCode.fail);

                                    test = true;
                                }
                                else
                                {
                                    test = true;
                                }
                                if (test == true)
                                {
                                    TLIcivilLoads CheckName = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => !x.Dismantle && (x.allLoadInstId != null ?
                                        !x.allLoadInst.Draft && (x.allLoadInst.mwRFUId != null ? x.allLoadInst.mwRFU.Name.ToLower() == mwRFU.Name.ToLower() : false) : false) &&
                                        x.SiteCode.ToLower() == SiteCode.ToLower(),
                                            x => x.allLoadInst, x => x.allLoadInst.mwRFU);
                                    if (CheckName != null)
                                        return new Response<GetForAddMWDishInstallationObject>(true, null, null, $"This name {mwRFU.Name} is already exists", (int)ApiReturnCode.fail);

                                    var CheckSerialNumber = _unitOfWork.MW_RFURepository.GetWhereFirst(x => x.SerialNumber == mwRFU.SerialNumber);
                                    if (CheckSerialNumber != null)
                                    {
                                        return new Response<GetForAddMWDishInstallationObject>(true, null, null, $"The SerialNumber {mwRFU.SerialNumber} is already exists", (int)ApiReturnCode.fail);
                                    }

                                    _unitOfWork.MW_RFURepository.AddWithHistory(Helpers.LogFilterAttribute.UserId, mwRFU);
                                    _unitOfWork.SaveChanges();
                                    int Id = _unitOfWork.AllLoadInstRepository.AddAllLoadInst(LoadSubType.TLImwRFU.ToString(), mwRFU.Id);
                                    _unitOfWork.CivilLoadsRepository.AddCivilLoad(AddMW_RFU.TLIcivilLoads, Id, SiteCode);
                                    if (AddMW_RFU.TLIdynamicAttInstValue.Count > 0)
                                    {
                                        foreach (var DynamicAttInstValue in AddMW_RFU.TLIdynamicAttInstValue)
                                        {
                                            _unitOfWork.DynamicAttInstValueRepository.AddDynamicInstAtts(DynamicAttInstValue, TableNameEntity.Id, mwRFU.Id);
                                        }
                                    }
                                }    //AddHistory(AddMW_RFU.ticketAtt, Id, "Insert");

                                else
                                {
                                    return new Response<GetForAddMWDishInstallationObject>(true, null, null, ErrorMessage, (int)ApiReturnCode.fail);
                                }
                            }
                            else if (LoadSubType.TLImwOther.ToString() == TableName)
                            {
                                AddMw_OtherViewModel AddMW_Other = _mapper.Map<AddMw_OtherViewModel>(MWInstallationViewModel);
                                TLImwOther mwOther = _mapper.Map<TLImwOther>(AddMW_Other);
                                //if (AddMW_Other.TLIcivilLoads.ReservedSpace == true)
                                //{
                                //    var Message = _unitOfWork.CivilWithLegsRepository.CheckAvailableSpaceOnCivils(AddMW_Other.TLIcivilLoads.allCivilInstId).Message;
                                //    if (Message != "Success")
                                //    {
                                //        return new Response<GetForAddMWDishInstallationObject>(true, null, null, Message, (int)ApiReturnCode.fail);
                                //    }
                                //}
                                var mwOtherLibrary = _dbContext.TLImwOtherLibrary.Where(x => x.Id == AddMW_Other.mwOtherLibraryId).FirstOrDefault();
                                if (mwOther.CenterHigh == 0)
                                {
                                    mwOther.CenterHigh = mwOther.HBA + mwOtherLibrary.Length / 2;
                                }
                                bool test = false;
                                if (AddMW_Other.TLIdynamicAttInstValue != null ? AddMW_Other.TLIdynamicAttInstValue.Count > 0 : false)
                                {
                                    string CheckDependencyValidation = CheckDependencyValidationForMWTypes(MWInstallationViewModel, TableName, SiteCode);

                                    if (!string.IsNullOrEmpty(CheckDependencyValidation))
                                        return new Response<GetForAddMWDishInstallationObject>(true, null, null, CheckDependencyValidation, (int)ApiReturnCode.fail);

                                    string CheckGeneralValidation = CheckGeneralValidationFunction(AddMW_Other.TLIdynamicAttInstValue, TableName);

                                    if (!string.IsNullOrEmpty(CheckGeneralValidation))
                                        return new Response<GetForAddMWDishInstallationObject>(true, null, null, CheckGeneralValidation, (int)ApiReturnCode.fail);

                                    test = true;
                                }
                                else
                                {
                                    test = true;
                                }
                                if (test == true)
                                {
                                    TLIcivilLoads CheckName = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => !x.Dismantle && (x.allLoadInstId != null ?
                                        !x.allLoadInst.Draft && (x.allLoadInst.mwOtherId != null ? x.allLoadInst.mwOther.Name.ToLower() == mwOther.Name.ToLower() : false) : false) &&
                                        x.SiteCode.ToLower() == SiteCode.ToLower(),
                                            x => x.allLoadInst, x => x.allLoadInst.mwOther);
                                    if (CheckName != null)
                                        return new Response<GetForAddMWDishInstallationObject>(true, null, null, $"This name {mwOther.Name} is already exists", (int)ApiReturnCode.fail);

                                    var CheckSerialNumber = _unitOfWork.Mw_OtherRepository.GetWhereFirst(x => x.SerialNumber == mwOther.SerialNumber);
                                    if (CheckSerialNumber != null)
                                    {
                                        return new Response<GetForAddMWDishInstallationObject>(true, null, null, $"The SerialNumber {mwOther.SerialNumber} is already exists", (int)ApiReturnCode.fail);
                                    }

                                    _unitOfWork.Mw_OtherRepository.AddWithHistory(Helpers.LogFilterAttribute.UserId, mwOther);
                                    _unitOfWork.SaveChanges();
                                    int Id = _unitOfWork.AllLoadInstRepository.AddAllLoadInst(LoadSubType.TLImwOther.ToString(), mwOther.Id);
                                    _unitOfWork.CivilLoadsRepository.AddCivilLoad(AddMW_Other.TLIcivilLoads, Id, SiteCode);
                                    if (AddMW_Other.TLIdynamicAttInstValue.Count > 0)
                                    {
                                        foreach (var DynamicAttInstValue in AddMW_Other.TLIdynamicAttInstValue)
                                        {
                                            _unitOfWork.DynamicAttInstValueRepository.AddDynamicInstAtts(DynamicAttInstValue, TableNameEntity.Id, mwOther.Id);
                                        }
                                    }

                                }
                                else
                                {
                                    return new Response<GetForAddMWDishInstallationObject>(true, null, null, ErrorMessage, (int)ApiReturnCode.fail);
                                }

                            }

                            if (TaskId != null)
                            {
                                var Submit = _unitOfWork.SiteRepository.SubmitTaskByTLI(TaskId);
                                var result = Submit.Result;
                                if (result.result == true && result.errorMessage == null)
                                {
                                    _unitOfWork.SaveChanges();
                                    transaction.Complete();
                                }
                                else
                                {
                                    transaction.Dispose();
                                    return new Response<GetForAddMWDishInstallationObject>(true, null, null, result.errorMessage.ToString(), (int)ApiReturnCode.fail);
                                }
                            }
                            else
                            {
                                _unitOfWork.SaveChanges();
                                transaction.Complete();
                            }
                            if (LoadSubType.TLImwODU.ToString() == TableName)
                            {
                                Task.Run(() => _unitOfWork.CivilWithLegsRepository.RefreshView(ConnectionString, "MV_MWODU_VIEW"));
                            }
                            else if (LoadSubType.TLImwDish.ToString() == TableName)
                            {
                                Task.Run(() => _unitOfWork.CivilWithLegsRepository.RefreshView(ConnectionString, "MV_MWDISH_VIEW"));
                            }
                            return new Response<GetForAddMWDishInstallationObject>();
                        }

                        catch (Exception err)
                        {

                            tran.Rollback();
                            return new Response<GetForAddMWDishInstallationObject>(true, null, null, err.Message, (int)ApiReturnCode.fail);
                        }
                    }
                }
            }

        }
        public void DetachEntity<TEntity>(TEntity entity) where TEntity : class
        {
            var entry = _dbContext.Entry(entity);
            if (entry.State != EntityState.Detached)
            {
                entry.State = EntityState.Detached;
            }
        }
        public async Task<Response<GetForAddMWDishInstallationObject>> EditMWDishInstallation(int UserId, EditMWDishInstallationObject MWInstallationViewModel, string TableName, int? TaskId, string ConnectionString)
        {
            using (TransactionScope transactionScope = new TransactionScope())
            {
                try
                {
                    int TableNameId = 0;

                    TableNameId = _unitOfWork.TablesNamesRepository.GetWhereFirst(x => x.TableName.ToLower() == TablesNames.TLImwDish.ToString().ToLower()).Id;
                    TLImwDish mwDish = _mapper.Map<TLImwDish>(MWInstallationViewModel.installationAttributes);
                    TLIcivilLoads MWDishInst = _dbContext.TLIcivilLoads.AsNoTracking()
                        .Include(x => x.allLoadInst).Include(x => x.allLoadInst.mwDish).Include(x => x.allLoadInst.mwDish.MwDishLibrary).Include(x => x.allCivilInst)
                        .Include(x => x.allCivilInst.civilNonSteel).Include(x => x.allCivilInst.civilWithLegs).Include(x => x.allCivilInst.civilWithoutLeg)
                        .FirstOrDefault(x => x.allLoadInstId != null && x.allLoadInst.mwDishId == mwDish.Id && !x.Dismantle);

                    if (MWDishInst == null)
                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "MWDish is not found", (int)ApiReturnCode.fail);

                    if (MWInstallationViewModel.installationConfig.InstallationPlaceId == 1)
                    {

                        if (MWInstallationViewModel.installationConfig.civilWithLegId != null)
                        {
                            TLIcivilSiteDate AllcivilinstId = _unitOfWork.CivilSiteDateRepository.GetIncludeWhereFirst(x => x.allCivilInst.civilWithLegsId ==
                                         MWInstallationViewModel.installationConfig.civilWithLegId && !x.Dismantle, x => x.allCivilInst, x => x.allCivilInst.civilWithLegs, x => x.allCivilInst.civilWithoutLeg,
                                         x => x.allCivilInst.civilWithLegs.CivilWithLegsLib, x => x.allCivilInst.civilWithoutLeg.CivilWithoutlegsLib);
                            if (AllcivilinstId != null)
                            {
                                if (MWInstallationViewModel.installationConfig.legId != null)
                                {
                                    if(MWInstallationViewModel.installationConfig.sideArmId !=null)
                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"can not selected sidearm because installation place is leg", (int)ApiReturnCode.fail);

                                    var Leg = _unitOfWork.LegRepository.GetIncludeWhereFirst(x => x.CivilWithLegInstId ==
                                     MWInstallationViewModel.installationConfig.civilWithLegId && x.Id == MWInstallationViewModel.installationConfig.legId
                                     , x => x.CivilWithLegInst);
                                    if (Leg != null)
                                    {
                                        if (!string.IsNullOrEmpty(mwDish.Serial_Number))
                                        {
                                            bool CheckSerialNumber = _dbContext.MV_MWDISH_VIEW.Any(x => x.Serial_Number == mwDish.Serial_Number && x.Id != mwDish.Id && !x.Dismantle);
                                            if (CheckSerialNumber)
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The Serial Number {mwDish.Serial_Number} is already exists", (int)ApiReturnCode.fail);
                                        }

                                        if (MWDishInst.ReservedSpace == true && MWInstallationViewModel.civilLoads.ReservedSpace == true)
                                        {

                                            if (mwDish.CenterHigh <= 0)
                                            {
                                                if (mwDish.HBA_Surface <= 0)
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HBA_Surface must bigger from zero", (int)ApiReturnCode.fail);
                                                }
                                                else if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter <= 0)
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "CenterHigh must bigger from zero", (int)ApiReturnCode.fail);
                                                }
                                                else
                                                {
                                                    mwDish.CenterHigh = mwDish.HBA + MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter / 2;
                                                }
                                            }
                                            if (mwDish.SpaceInstallation == 0)
                                            {
                                                if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.SpaceLibrary == 0)
                                                {
                                                    if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter == 0)
                                                    {
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "SpaceInstallation must bigger from zero", (int)ApiReturnCode.fail);
                                                    }
                                                    mwDish.SpaceInstallation = Convert.ToSingle(3.14) * (float)Math.Pow(MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter / 2, 2);
                                                }
                                                else
                                                {
                                                    mwDish.SpaceInstallation = MWDishInst.allLoadInst.mwDish.MwDishLibrary.SpaceLibrary;
                                                }
                                            }

                                            if (mwDish.Azimuth <= 0)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Azimuth must bigger from zero", (int)ApiReturnCode.fail);
                                            }
                                            if (mwDish.HeightBase <= 0)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HeightBase must bigger from zero", (int)ApiReturnCode.fail);
                                            }

                                            var Checkinstallationplace = _dbContext.MV_MWDISH_VIEW.Where(
                                                x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id && x.Id != mwDish.Id &&
                                                x.LEG_ID == MWDishInst.legId).ToList();
                                            var CheckAzimuthAndHeightBase = Checkinstallationplace.FirstOrDefault(x => x.Azimuth ==
                                            mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                                            if (CheckAzimuthAndHeightBase != null)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                                            }
                                            else if (Checkinstallationplace != null && Checkinstallationplace.Count >= 3)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                                            }
                                            else
                                            {
                                                TLIleg legname = _dbContext.TLIleg.FirstOrDefault(x => x.Id == MWDishInst.legId);
                                                if (legname != null && mwDish.Azimuth > 0 && mwDish.HeightBase > 0)
                                                {
                                                    mwDish.DishName = legname?.CiviLegName + " " + mwDish.Azimuth + " " + mwDish.HeightBase;

                                                }
                                                var CheckName = _dbContext.MV_MWDISH_VIEW.FirstOrDefault(x => !x.Dismantle &&
                                                (x.Id != null ? x.DishName.ToLower() == mwDish.DishName.ToLower() : false
                                                  && x.Id != mwDish.Id && x.SiteCode.ToLower() == MWDishInst.SiteCode.ToLower()));

                                                if (CheckName != null)
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The name {mwDish.DishName} is already exists", (int)Helpers.Constants.ApiReturnCode.fail);
                                            }
                                            if (AllcivilinstId.allCivilInst.civilWithLegs?.CurrentLoads == null)
                                            {
                                                AllcivilinstId.allCivilInst.civilWithLegs.CurrentLoads = 0;
                                            }
                                            var OldVcivilinfo = _dbContext.TLIcivilWithLegs.AsNoTracking().FirstOrDefault(x => x.Id == AllcivilinstId.allCivilInst.civilWithLegsId);

                                            if (OldVcivilinfo != null)
                                            {
                                                if (mwDish.SpaceInstallation != 0 && mwDish.CenterHigh != 0 && AllcivilinstId.allCivilInst.civilWithLegs.HeightBase != 0)
                                                {
                                                    AllcivilinstId.allCivilInst.civilWithLegs.CurrentLoads -= MWDishInst.allLoadInst.mwDish.EquivalentSpace;
                                                    var EquivalentSpace = mwDish.SpaceInstallation * (mwDish.CenterHigh / (float)AllcivilinstId.allCivilInst.civilWithLegs.HeightBase);
                                                    AllcivilinstId.allCivilInst.civilWithLegs.CurrentLoads += EquivalentSpace;
                                                    mwDish.EquivalentSpace = EquivalentSpace;
                                                    _unitOfWork.CivilWithLegsRepository.UpdateWithHistory(UserId, OldVcivilinfo, AllcivilinstId.allCivilInst.civilWithLegs);

                                                    _unitOfWork.SaveChanges();
                                                }
                                            }
                                            if (mwDish?.ItemConnectToId != null)
                                            {
                                                TLIitemConnectTo ConnectedToEntity = _unitOfWork.ItemConnectToRepository.GetByID(mwDish.ItemConnectToId);
                                                if (ConnectedToEntity.Name.ToLower() == "farsitedish")
                                                    if (string.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if dish connected to FarSiteDish", (int)ApiReturnCode.fail);
                                                if (ConnectedToEntity.Name.ToLower() == "farsitedish" && mwDish.RepeaterTypeId != null)
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not selected RepeaterType because selected itemconecctedto is farsitedish", (int)ApiReturnCode.fail);

                                                else if (ConnectedToEntity.Name.ToLower() == "repeater")
                                                {
                                                    if (mwDish.RepeaterTypeId == null)
                                                    {
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type shouldn't be null", (int)ApiReturnCode.fail);
                                                    }
                                                    else
                                                    {
                                                        TLIrepeaterType RepeaterTypeEntity = null;
                                                        if (mwDish.RepeaterTypeId != null)
                                                        {
                                                            RepeaterTypeEntity = _unitOfWork.RepeaterTypeRepository.GetWhereFirst(x => x.Id == mwDish.RepeaterTypeId);
                                                            if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() != "active" && RepeaterTypeEntity.Name.ToLower() != "passive")
                                                            {
                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type should be active or passive", (int)ApiReturnCode.fail);
                                                            }
                                                            if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() == "active")
                                                            {
                                                                if (String.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                                                                {
                                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if repeater type is active", (int)ApiReturnCode.fail);
                                                                }
                                                            }
                                                            else if (RepeaterTypeEntity.Name.ToLower() == "passive")
                                                            {
                                                                if (ConnectedToEntity.Name.ToLower() != "repeater" || RepeaterTypeEntity.Name.ToLower() != "passive")
                                                                {
                                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "The dish should be connected to repeater and repeater type is passive", (int)ApiReturnCode.fail);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }

                                            mwDish.MwDishLibraryId = MWInstallationViewModel.civilType.MwDishLibraryId;
                                            mwDish.InstallationPlaceId = MWInstallationViewModel.installationConfig.InstallationPlaceId;
                                            _unitOfWork.MW_DishRepository.UpdateWithHistory(UserId, MWDishInst.allLoadInst.mwDish, mwDish);
                                            _unitOfWork.SaveChanges();
                                            if (MWInstallationViewModel.civilLoads != null)
                                            {

                                                var existingEntity = _unitOfWork.CivilLoadsRepository
                                                    .GetAllAsQueryable()
                                                    .AsNoTracking()
                                                    .FirstOrDefault(x => x.allLoadInstId != null && x.allLoadInst.mwDishId == mwDish.Id && !x.Dismantle);


                                                TLIcivilLoads TLIMWDish = _dbContext.TLIcivilLoads.Include(x => x.allLoadInst).ThenInclude(x => x.mwDish).ThenInclude(x => x.MwDishLibrary)
                                              .FirstOrDefault(x => x.allLoadInstId != null && !x.Dismantle && x.allLoadInst.mwDishId
                                                  == MWInstallationViewModel.installationAttributes.Id);



                                                TLIMWDish.allCivilInstId = AllcivilinstId.allCivilInst.Id;
                                                TLIMWDish.InstallationDate = MWInstallationViewModel.civilLoads.InstallationDate;
                                                TLIMWDish.legId = MWInstallationViewModel.installationConfig?.legId;
                                                TLIMWDish.ItemOnCivilStatus = MWInstallationViewModel.civilLoads.ItemOnCivilStatus;
                                                TLIMWDish.ItemStatus = MWInstallationViewModel.civilLoads?.ItemStatus;
                                                TLIMWDish.ReservedSpace = MWInstallationViewModel.civilLoads.ReservedSpace;
                                                _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, existingEntity, TLIMWDish);
                                                _unitOfWork.SaveChanges();
                                            }
                                            if (MWInstallationViewModel.dynamicAttribute != null ? MWInstallationViewModel.dynamicAttribute.Count() > 0 : false)
                                                _unitOfWork.DynamicAttInstValueRepository.UpdateDynamicValues(UserId, MWInstallationViewModel.dynamicAttribute, TableNameId, mwDish.Id, ConnectionString);


                                        }
                                        else if (MWDishInst.ReservedSpace == true && MWInstallationViewModel.civilLoads.ReservedSpace == false)
                                        {

                                            if (mwDish.CenterHigh <= 0)
                                            {
                                                if (mwDish.HBA_Surface <= 0)
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HBA_Surface must bigger from zero", (int)ApiReturnCode.fail);
                                                }
                                                else if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter <= 0)
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "CenterHigh must bigger from zero", (int)ApiReturnCode.fail);
                                                }
                                                else
                                                {
                                                    mwDish.CenterHigh = mwDish.HBA + MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter / 2;
                                                }
                                            }
                                            if (mwDish.SpaceInstallation == 0)
                                            {
                                                if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.SpaceLibrary == 0)
                                                {
                                                    if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter == 0)
                                                    {
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "SpaceInstallation must bigger from zero", (int)ApiReturnCode.fail);
                                                    }
                                                    mwDish.SpaceInstallation = Convert.ToSingle(3.14) * (float)Math.Pow(MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter / 2, 2);
                                                }
                                                else
                                                {
                                                    mwDish.SpaceInstallation = MWDishInst.allLoadInst.mwDish.MwDishLibrary.SpaceLibrary;
                                                }
                                            }

                                            if (mwDish.Azimuth <= 0)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Azimuth must bigger from zero", (int)ApiReturnCode.fail);
                                            }
                                            if (mwDish.HeightBase <= 0)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HeightBase must bigger from zero", (int)ApiReturnCode.fail);
                                            }
                                            var Checkinstallationplace = _dbContext.MV_MWDISH_VIEW.Where(
                                                x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id && x.Id != mwDish.Id &&
                                                x.LEG_ID == MWDishInst.legId).ToList();
                                            var CheckAzimuthAndHeightBase = Checkinstallationplace.FirstOrDefault(x => x.Azimuth ==
                                            mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                                            if (CheckAzimuthAndHeightBase != null)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                                            }
                                            else if (Checkinstallationplace != null && Checkinstallationplace.Count >= 3)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                                            }
                                            else
                                            {
                                                TLIleg legname = _dbContext.TLIleg.FirstOrDefault(x => x.Id == MWDishInst.legId);
                                                if (legname != null && mwDish.Azimuth > 0 && mwDish.HeightBase > 0)
                                                {
                                                    mwDish.DishName = legname?.CiviLegName + " " + mwDish.Azimuth + " " + mwDish.HeightBase;

                                                }
                                                var CheckName = _dbContext.MV_MWDISH_VIEW.FirstOrDefault(x => !x.Dismantle &&
                                                (x.Id != null ? x.DishName.ToLower() == mwDish.DishName.ToLower() : false
                                                  && x.Id != mwDish.Id && x.SiteCode.ToLower() == MWDishInst.SiteCode.ToLower()));

                                                if (CheckName != null)
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The name {mwDish.DishName} is already exists", (int)Helpers.Constants.ApiReturnCode.fail);
                                            }

                                            var OldVcivilinfo = _dbContext.TLIcivilWithLegs.AsNoTracking().FirstOrDefault(x => x.Id == AllcivilinstId.allCivilInst.civilWithLegsId);

                                            if (OldVcivilinfo != null)
                                            {

                                                AllcivilinstId.allCivilInst.civilWithLegs.CurrentLoads = AllcivilinstId.allCivilInst.civilWithLegs.CurrentLoads - MWDishInst.allLoadInst.mwDish.EquivalentSpace;
                                                _unitOfWork.CivilWithLegsRepository.UpdateWithHistory(UserId, OldVcivilinfo, AllcivilinstId.allCivilInst.civilWithLegs);

                                                _unitOfWork.SaveChanges();

                                            }

                                            if (mwDish?.ItemConnectToId != null)
                                            {
                                                TLIitemConnectTo ConnectedToEntity = _unitOfWork.ItemConnectToRepository.GetByID(mwDish.ItemConnectToId);
                                                if (ConnectedToEntity.Name.ToLower() == "farsitedish")
                                                    if (string.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if dish connected to FarSiteDish", (int)ApiReturnCode.fail);
                                                if (ConnectedToEntity.Name.ToLower() == "farsitedish" && mwDish.RepeaterTypeId != null)
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not selected RepeaterType because selected itemconecctedto is farsitedish", (int)ApiReturnCode.fail);

                                                else if (ConnectedToEntity.Name.ToLower() == "repeater")
                                                {
                                                    if (mwDish.RepeaterTypeId == null)
                                                    {
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type shouldn't be null", (int)ApiReturnCode.fail);
                                                    }
                                                    else
                                                    {
                                                        TLIrepeaterType RepeaterTypeEntity = null;
                                                        if (mwDish.RepeaterTypeId != null)
                                                        {
                                                            RepeaterTypeEntity = _unitOfWork.RepeaterTypeRepository.GetWhereFirst(x => x.Id == mwDish.RepeaterTypeId);
                                                            if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() != "active" && RepeaterTypeEntity.Name.ToLower() != "passive")
                                                            {
                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type should be active or passive", (int)ApiReturnCode.fail);
                                                            }
                                                            if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() == "active")
                                                            {
                                                                if (String.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                                                                {
                                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if repeater type is active", (int)ApiReturnCode.fail);
                                                                }
                                                            }
                                                            else if (RepeaterTypeEntity.Name.ToLower() == "passive")
                                                            {
                                                                if (ConnectedToEntity.Name.ToLower() != "repeater" || RepeaterTypeEntity.Name.ToLower() != "passive")
                                                                {
                                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "The dish should be connected to repeater and repeater type is passive", (int)ApiReturnCode.fail);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            mwDish.MwDishLibraryId = MWInstallationViewModel.civilType.MwDishLibraryId;
                                            mwDish.InstallationPlaceId = MWInstallationViewModel.installationConfig.InstallationPlaceId;
                                            _unitOfWork.MW_DishRepository.UpdateWithHistory(UserId, MWDishInst.allLoadInst.mwDish, mwDish);
                                            _unitOfWork.SaveChanges();
                                            if (MWInstallationViewModel.civilLoads != null)
                                            {

                                                var existingEntity = _unitOfWork.CivilLoadsRepository
                                                    .GetAllAsQueryable()
                                                    .AsNoTracking()
                                                    .FirstOrDefault(x => x.allLoadInstId != null && x.allLoadInst.mwDishId == mwDish.Id && !x.Dismantle);


                                                TLIcivilLoads TLIMWDish = _dbContext.TLIcivilLoads.Include(x => x.allLoadInst).ThenInclude(x => x.mwDish).ThenInclude(x => x.MwDishLibrary)
                                              .FirstOrDefault(x => x.allLoadInstId != null && !x.Dismantle && x.allLoadInst.mwDishId
                                                  == MWInstallationViewModel.installationAttributes.Id);



                                                TLIMWDish.allCivilInstId = AllcivilinstId.allCivilInst.Id;
                                                TLIMWDish.InstallationDate = MWInstallationViewModel.civilLoads.InstallationDate;
                                                TLIMWDish.legId = MWInstallationViewModel.installationConfig?.legId;
                                                TLIMWDish.ItemOnCivilStatus = MWInstallationViewModel.civilLoads.ItemOnCivilStatus;
                                                TLIMWDish.ItemStatus = MWInstallationViewModel.civilLoads?.ItemStatus;
                                                TLIMWDish.ReservedSpace = MWInstallationViewModel.civilLoads.ReservedSpace;
                                                _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, existingEntity, TLIMWDish);
                                                _unitOfWork.SaveChanges();
                                            }
                                            if (MWInstallationViewModel.dynamicAttribute != null ? MWInstallationViewModel.dynamicAttribute.Count() > 0 : false)
                                                _unitOfWork.DynamicAttInstValueRepository.UpdateDynamicValues(UserId, MWInstallationViewModel.dynamicAttribute, TableNameId, mwDish.Id, ConnectionString);


                                        }
                                        else if (MWDishInst.ReservedSpace == false && MWInstallationViewModel.civilLoads.ReservedSpace == true)
                                        {

                                            if (mwDish.CenterHigh <= 0)
                                            {
                                                if (mwDish.HBA_Surface <= 0)
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HBA_Surface must bigger from zero", (int)ApiReturnCode.fail);
                                                }
                                                else if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter <= 0)
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "CenterHigh must bigger from zero", (int)ApiReturnCode.fail);
                                                }
                                                else
                                                {
                                                    mwDish.CenterHigh = mwDish.HBA + MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter / 2;
                                                }
                                            }
                                            if (mwDish.SpaceInstallation == 0)
                                            {
                                                if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.SpaceLibrary == 0)
                                                {
                                                    if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter == 0)
                                                    {
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "SpaceInstallation must bigger from zero", (int)ApiReturnCode.fail);
                                                    }
                                                    mwDish.SpaceInstallation = Convert.ToSingle(3.14) * (float)Math.Pow(MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter / 2, 2);
                                                }
                                                else
                                                {
                                                    mwDish.SpaceInstallation = MWDishInst.allLoadInst.mwDish.MwDishLibrary.SpaceLibrary;
                                                }
                                            }

                                            if (mwDish.Azimuth <= 0)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Azimuth must bigger from zero", (int)ApiReturnCode.fail);
                                            }
                                            if (mwDish.HeightBase <= 0)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HeightBase must bigger from zero", (int)ApiReturnCode.fail);
                                            }

                                            var Checkinstallationplace = _dbContext.MV_MWDISH_VIEW.Where(
                                                x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id && x.Id != mwDish.Id &&
                                                x.LEG_ID == MWDishInst.legId).ToList();
                                            var CheckAzimuthAndHeightBase = Checkinstallationplace.FirstOrDefault(x => x.Azimuth ==
                                            mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                                            if (CheckAzimuthAndHeightBase != null)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                                            }
                                            else if (Checkinstallationplace != null && Checkinstallationplace.Count >= 3)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                                            }
                                            else
                                            {
                                                TLIleg legname = _dbContext.TLIleg.FirstOrDefault(x => x.Id == MWDishInst.legId);
                                                if (legname != null && mwDish.Azimuth > 0 && mwDish.HeightBase > 0)
                                                {
                                                    mwDish.DishName = legname?.CiviLegName + " " + mwDish.Azimuth + " " + mwDish.HeightBase;

                                                }
                                                var CheckName = _dbContext.MV_MWDISH_VIEW.FirstOrDefault(x => !x.Dismantle &&
                                                (x.Id != null ? x.DishName.ToLower() == mwDish.DishName.ToLower() : false
                                                  && x.Id != mwDish.Id && x.SiteCode.ToLower() == MWDishInst.SiteCode.ToLower()));

                                                if (CheckName != null)
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The name {mwDish.DishName} is already exists", (int)Helpers.Constants.ApiReturnCode.fail);
                                            }
                                            if (AllcivilinstId.allCivilInst.civilWithLegs?.CurrentLoads == null)
                                            {
                                                AllcivilinstId.allCivilInst.civilWithLegs.CurrentLoads = 0;
                                            }
                                            var OldVcivilinfo = _dbContext.TLIcivilWithLegs.AsNoTracking().FirstOrDefault(x => x.Id == AllcivilinstId.allCivilInst.civilWithLegsId);

                                            if (OldVcivilinfo != null)
                                            {
                                                if (mwDish.SpaceInstallation != 0 && mwDish.CenterHigh != 0 && AllcivilinstId.allCivilInst.civilWithLegs.HeightBase != 0)
                                                {
                                                    var EquivalentSpace = mwDish.SpaceInstallation * (mwDish.CenterHigh / (float)AllcivilinstId.allCivilInst.civilWithLegs.HeightBase);

                                                    AllcivilinstId.allCivilInst.civilWithLegs.CurrentLoads += EquivalentSpace;
                                                    mwDish.EquivalentSpace = EquivalentSpace;
                                                    _unitOfWork.CivilWithLegsRepository.UpdateWithHistory(UserId, OldVcivilinfo, AllcivilinstId.allCivilInst.civilWithLegs);

                                                    _unitOfWork.SaveChanges();
                                                }
                                            }

                                            if (mwDish?.ItemConnectToId != null)
                                            {
                                                TLIitemConnectTo ConnectedToEntity = _unitOfWork.ItemConnectToRepository.GetByID(mwDish.ItemConnectToId);
                                                if (ConnectedToEntity.Name.ToLower() == "farsitedish")
                                                    if (string.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if dish connected to FarSiteDish", (int)ApiReturnCode.fail);
                                                if (ConnectedToEntity.Name.ToLower() == "farsitedish" && mwDish.RepeaterTypeId != null)
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not selected RepeaterType because selected itemconecctedto is farsitedish", (int)ApiReturnCode.fail);
                                                else if (ConnectedToEntity.Name.ToLower() == "repeater")
                                                {
                                                    if (mwDish.RepeaterTypeId == null)
                                                    {
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type shouldn't be null", (int)ApiReturnCode.fail);
                                                    }
                                                    else
                                                    {
                                                        TLIrepeaterType RepeaterTypeEntity = null;
                                                        if (mwDish.RepeaterTypeId != null)
                                                        {
                                                            RepeaterTypeEntity = _unitOfWork.RepeaterTypeRepository.GetWhereFirst(x => x.Id == mwDish.RepeaterTypeId);
                                                            if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() != "active" && RepeaterTypeEntity.Name.ToLower() != "passive")
                                                            {
                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type should be active or passive", (int)ApiReturnCode.fail);
                                                            }
                                                            if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() == "active")
                                                            {
                                                                if (String.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                                                                {
                                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if repeater type is active", (int)ApiReturnCode.fail);
                                                                }
                                                            }
                                                            else if (RepeaterTypeEntity.Name.ToLower() == "passive")
                                                            {
                                                                if (ConnectedToEntity.Name.ToLower() != "repeater" || RepeaterTypeEntity.Name.ToLower() != "passive")
                                                                {
                                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "The dish should be connected to repeater and repeater type is passive", (int)ApiReturnCode.fail);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            mwDish.MwDishLibraryId = MWInstallationViewModel.civilType.MwDishLibraryId;
                                            mwDish.InstallationPlaceId = MWInstallationViewModel.installationConfig.InstallationPlaceId;
                                            _unitOfWork.MW_DishRepository.UpdateWithHistory(UserId, MWDishInst.allLoadInst.mwDish, mwDish);
                                            _unitOfWork.SaveChanges();
                                            if (MWInstallationViewModel.civilLoads != null)
                                            {

                                                var existingEntity = _unitOfWork.CivilLoadsRepository
                                                    .GetAllAsQueryable()
                                                    .AsNoTracking()
                                                    .FirstOrDefault(x => x.allLoadInstId != null && x.allLoadInst.mwDishId == mwDish.Id && !x.Dismantle);


                                                TLIcivilLoads TLIMWDish = _dbContext.TLIcivilLoads.Include(x => x.allLoadInst).ThenInclude(x => x.mwDish).ThenInclude(x => x.MwDishLibrary)
                                              .FirstOrDefault(x => x.allLoadInstId != null && !x.Dismantle && x.allLoadInst.mwDishId
                                                  == MWInstallationViewModel.installationAttributes.Id);



                                                TLIMWDish.allCivilInstId = AllcivilinstId.allCivilInst.Id;
                                                TLIMWDish.InstallationDate = MWInstallationViewModel.civilLoads.InstallationDate;
                                                TLIMWDish.legId = MWInstallationViewModel.installationConfig?.legId;
                                                TLIMWDish.ItemOnCivilStatus = MWInstallationViewModel.civilLoads.ItemOnCivilStatus;
                                                TLIMWDish.ItemStatus = MWInstallationViewModel.civilLoads?.ItemStatus;
                                                TLIMWDish.ReservedSpace = MWInstallationViewModel.civilLoads.ReservedSpace;
                                                _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, existingEntity, TLIMWDish);
                                                _unitOfWork.SaveChanges();
                                            }
                                            if (MWInstallationViewModel.dynamicAttribute != null ? MWInstallationViewModel.dynamicAttribute.Count() > 0 : false)
                                                _unitOfWork.DynamicAttInstValueRepository.UpdateDynamicValues(UserId, MWInstallationViewModel.dynamicAttribute, TableNameId, mwDish.Id, ConnectionString);


                                        }
                                        else if (MWDishInst.ReservedSpace == false && MWInstallationViewModel.civilLoads.ReservedSpace == false)
                                        {
                                            if (mwDish.CenterHigh <= 0)
                                            {
                                                if (mwDish.HBA_Surface <= 0)
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HBA_Surface must bigger from zero", (int)ApiReturnCode.fail);
                                                }
                                                else if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter <= 0)
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "CenterHigh must bigger from zero", (int)ApiReturnCode.fail);
                                                }
                                                else
                                                {
                                                    mwDish.CenterHigh = mwDish.HBA + MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter / 2;
                                                }
                                            }
                                            if (mwDish.SpaceInstallation == 0)
                                            {
                                                if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.SpaceLibrary == 0)
                                                {
                                                    if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter == 0)
                                                    {
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "SpaceInstallation must bigger from zero", (int)ApiReturnCode.fail);
                                                    }
                                                    mwDish.SpaceInstallation = Convert.ToSingle(3.14) * (float)Math.Pow(MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter / 2, 2);
                                                }
                                                else
                                                {
                                                    mwDish.SpaceInstallation = MWDishInst.allLoadInst.mwDish.MwDishLibrary.SpaceLibrary;
                                                }
                                            }

                                            if (mwDish.Azimuth <= 0)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Azimuth must bigger from zero", (int)ApiReturnCode.fail);
                                            }
                                            if (mwDish.HeightBase <= 0)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HeightBase must bigger from zero", (int)ApiReturnCode.fail);
                                            }
                                            var Checkinstallationplace = _dbContext.MV_MWDISH_VIEW.Where(
                                                x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id && x.Id != mwDish.Id &&
                                                x.LEG_ID == MWDishInst.legId).ToList();
                                            var CheckAzimuthAndHeightBase = Checkinstallationplace.FirstOrDefault(x => x.Azimuth ==
                                            mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                                            if (CheckAzimuthAndHeightBase != null)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                                            }
                                            else if (Checkinstallationplace != null && Checkinstallationplace.Count >= 3)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                                            }
                                            else
                                            {
                                                TLIleg legname = _dbContext.TLIleg.FirstOrDefault(x => x.Id == MWDishInst.legId);
                                                if (legname != null && mwDish.Azimuth > 0 && mwDish.HeightBase > 0)
                                                {
                                                    mwDish.DishName = legname?.CiviLegName + " " + mwDish.Azimuth + " " + mwDish.HeightBase;

                                                }
                                                var CheckName = _dbContext.MV_MWDISH_VIEW.FirstOrDefault(x => !x.Dismantle &&
                                                (x.Id != null ? x.DishName.ToLower() == mwDish.DishName.ToLower() : false
                                                  && x.Id != mwDish.Id && x.SiteCode.ToLower() == MWDishInst.SiteCode.ToLower()));

                                                if (CheckName != null)
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The name {mwDish.DishName} is already exists", (int)Helpers.Constants.ApiReturnCode.fail);
                                            }
                                            if (mwDish?.ItemConnectToId != null)
                                            {
                                                TLIitemConnectTo ConnectedToEntity = _unitOfWork.ItemConnectToRepository.GetByID(mwDish.ItemConnectToId);
                                                if (ConnectedToEntity.Name.ToLower() == "farsitedish")
                                                    if (string.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if dish connected to FarSiteDish", (int)ApiReturnCode.fail);
                                                if (ConnectedToEntity.Name.ToLower() == "farsitedish" && mwDish.RepeaterTypeId != null)
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not selected RepeaterType because selected itemconecctedto is farsitedish", (int)ApiReturnCode.fail);

                                                else if (ConnectedToEntity.Name.ToLower() == "repeater")
                                                {
                                                    if (mwDish.RepeaterTypeId == null)
                                                    {
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type shouldn't be null", (int)ApiReturnCode.fail);
                                                    }
                                                    else
                                                    {
                                                        TLIrepeaterType RepeaterTypeEntity = null;
                                                        if (mwDish.RepeaterTypeId != null)
                                                        {
                                                            RepeaterTypeEntity = _unitOfWork.RepeaterTypeRepository.GetWhereFirst(x => x.Id == mwDish.RepeaterTypeId);
                                                            if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() != "active" && RepeaterTypeEntity.Name.ToLower() != "passive")
                                                            {
                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type should be active or passive", (int)ApiReturnCode.fail);
                                                            }
                                                            if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() == "active")
                                                            {
                                                                if (String.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                                                                {
                                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if repeater type is active", (int)ApiReturnCode.fail);
                                                                }
                                                            }
                                                            else if (RepeaterTypeEntity.Name.ToLower() == "passive")
                                                            {
                                                                if (ConnectedToEntity.Name.ToLower() != "repeater" || RepeaterTypeEntity.Name.ToLower() != "passive")
                                                                {
                                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "The dish should be connected to repeater and repeater type is passive", (int)ApiReturnCode.fail);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            mwDish.MwDishLibraryId = MWInstallationViewModel.civilType.MwDishLibraryId;
                                            mwDish.InstallationPlaceId = MWInstallationViewModel.installationConfig.InstallationPlaceId;
                                            _unitOfWork.MW_DishRepository.UpdateWithHistory(UserId, MWDishInst.allLoadInst.mwDish, mwDish);
                                            _unitOfWork.SaveChanges();
                                            if (MWInstallationViewModel.civilLoads != null)
                                            {

                                                var existingEntity = _unitOfWork.CivilLoadsRepository
                                                    .GetAllAsQueryable()
                                                    .AsNoTracking()
                                                    .FirstOrDefault(x => x.allLoadInstId != null && x.allLoadInst.mwDishId == mwDish.Id && !x.Dismantle);


                                                TLIcivilLoads TLIMWDish = _dbContext.TLIcivilLoads.Include(x => x.allLoadInst).ThenInclude(x => x.mwDish).ThenInclude(x => x.MwDishLibrary)
                                              .FirstOrDefault(x => x.allLoadInstId != null && !x.Dismantle && x.allLoadInst.mwDishId
                                                  == MWInstallationViewModel.installationAttributes.Id);



                                                TLIMWDish.allCivilInstId = AllcivilinstId.allCivilInst.Id;
                                                TLIMWDish.InstallationDate = MWInstallationViewModel.civilLoads.InstallationDate;
                                                TLIMWDish.legId = MWInstallationViewModel.installationConfig?.legId;
                                                TLIMWDish.ItemOnCivilStatus = MWInstallationViewModel.civilLoads.ItemOnCivilStatus;
                                                TLIMWDish.ItemStatus = MWInstallationViewModel.civilLoads?.ItemStatus;
                                                TLIMWDish.ReservedSpace = MWInstallationViewModel.civilLoads.ReservedSpace;
                                                _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, existingEntity, TLIMWDish);
                                                _unitOfWork.SaveChanges();
                                            }
                                            if (MWInstallationViewModel.dynamicAttribute != null ? MWInstallationViewModel.dynamicAttribute.Count() > 0 : false)
                                                _unitOfWork.DynamicAttInstValueRepository.UpdateDynamicValues(UserId, MWInstallationViewModel.dynamicAttribute, TableNameId, mwDish.Id, ConnectionString);


                                        }
                                    }
                                    else
                                    {
                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "must selected leg ", (int)ApiReturnCode.fail);
                                    }
                                }
                                else
                                {
                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "must selected leg ", (int)ApiReturnCode.fail);
                                }

                            }
                            else
                            {
                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "this civil is not found ", (int)ApiReturnCode.fail);
                            }

                        }
                        else
                        {
                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "must selected civilwithlegs item ", (int)ApiReturnCode.fail);
                        }

                    }

                    if (MWInstallationViewModel.installationConfig.InstallationPlaceId == 2)
                    {

                        if (MWInstallationViewModel.installationConfig.civilWithLegId != null)
                        {
                            TLIcivilSiteDate AllcivilinstId = _unitOfWork.CivilSiteDateRepository.GetAllAsQueryable().AsNoTracking().
                                 Include(x => x.allCivilInst).Include(x => x.allCivilInst.civilWithLegs).Include(x => x.allCivilInst.civilWithoutLeg)
                                 .Include(x => x.allCivilInst.civilNonSteel).Include(x => x.allCivilInst.civilWithoutLeg.CivilWithoutlegsLib)
                                .Include(x => x.allCivilInst.civilWithLegs.CivilWithLegsLib).Include(x => x.allCivilInst.civilNonSteel.CivilNonsteelLibrary)
                                .FirstOrDefault(x => x.allCivilInst.civilWithLegsId == MWInstallationViewModel.installationConfig.civilWithLegId && !x.Dismantle);

                            if (AllcivilinstId != null)
                            {
                               
                                if (MWInstallationViewModel.installationConfig.sideArmId != null)
                                {
                                    if (!string.IsNullOrEmpty(mwDish.Serial_Number))
                                    {
                                        bool CheckSerialNumber = _dbContext.MV_MWDISH_VIEW.Any(x => x.Serial_Number == mwDish.Serial_Number && x.Id != mwDish.Id && !x.Dismantle);
                                        if (CheckSerialNumber)
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The Serial Number {mwDish.Serial_Number} is already exists", (int)ApiReturnCode.fail);
                                    }
                                    var SideArm1 = _unitOfWork.CivilLoadsRepository.GetWhereFirst(x => x.allCivilInst.civilWithLegsId
                                                    == MWInstallationViewModel.installationConfig.civilWithLegId && x.sideArmId == MWInstallationViewModel.installationConfig.sideArmId[0]
                                                    && (x.legId == MWInstallationViewModel.installationConfig.legId || x.Leg2Id == MWInstallationViewModel.installationConfig.legId));
                                    if (SideArm1 == null)
                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The one SideArm is not found on civil", (int)ApiReturnCode.fail);
                                    var SideArm2 = _unitOfWork.CivilLoadsRepository.GetWhereFirst(x => x.allCivilInst.civilWithLegsId
                                    == MWInstallationViewModel.installationConfig.civilWithLegId && x.sideArmId == MWInstallationViewModel.installationConfig.sideArmId[1]
                                    && (x.legId == MWInstallationViewModel.installationConfig.legId || x.Leg2Id == MWInstallationViewModel.installationConfig.legId));
                                    if (SideArm2 == null)
                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The tow SideArm is not found on civil", (int)ApiReturnCode.fail);

                                    if (MWInstallationViewModel.civilLoads.ReservedSpace == true && MWInstallationViewModel.civilLoads.ReservedSpace == true)
                                    {
                                        if (mwDish.CenterHigh <= 0)
                                        {
                                            if (mwDish.HBA_Surface <= 0)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HBA_Surface must bigger from zero", (int)ApiReturnCode.fail);
                                            }
                                            else if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter <= 0)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "CenterHigh must bigger from zero", (int)ApiReturnCode.fail);
                                            }
                                            else
                                            {
                                                mwDish.CenterHigh = mwDish.HBA + MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter / 2;
                                            }
                                        }
                                        if (mwDish.SpaceInstallation == 0)
                                        {

                                            if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.SpaceLibrary == 0)
                                            {
                                                if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter == 0)
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "SpaceInstallation must bigger from zero", (int)ApiReturnCode.fail);
                                                }
                                                mwDish.SpaceInstallation = Convert.ToSingle(3.14) * (float)Math.Pow(MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter / 2, 2);
                                            }
                                            else
                                            {
                                                mwDish.SpaceInstallation = MWDishInst.allLoadInst.mwDish.MwDishLibrary.SpaceLibrary;
                                            }
                                        }
                                        if (mwDish.Azimuth <= 0)
                                        {
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Azimuth must bigger from zero", (int)ApiReturnCode.fail);
                                        }
                                        if (mwDish.HeightBase <= 0)
                                        {
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HeightBase must bigger from zero", (int)ApiReturnCode.fail);
                                        }

                                        if (MWInstallationViewModel.installationConfig.sideArmId.Count() != 0 &&
                                            MWInstallationViewModel.installationConfig.sideArmId.Count() == 1)
                                        {
                                            List<MV_MWDISH_VIEW> Checkinstallationplace = _dbContext.MV_MWDISH_VIEW.Where(
                                                x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id
                                                && x.Id != mwDish.Id && (x.SideArmSec_Id == MWInstallationViewModel.installationConfig.sideArmId[0]
                                                || x.SideArmSec_Id == MWInstallationViewModel.installationConfig.sideArmId[0])).ToList();
                                            MV_MWDISH_VIEW CheckAzimuthAndHeightBase = Checkinstallationplace.FirstOrDefault(x => x.Azimuth == mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                                            if (CheckAzimuthAndHeightBase != null)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                                            }
                                            else if (Checkinstallationplace != null && Checkinstallationplace.Count >= 3)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                                            }
                                            else
                                            {
                                                var SideArmName1 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWInstallationViewModel.installationConfig.sideArmId[0]);
                                                if (SideArmName1 != null && mwDish.Azimuth > 0 && mwDish.HeightBase > 0)
                                                {
                                                    mwDish.DishName = SideArmName1?.Name + " " + mwDish.Azimuth + " " + mwDish.HeightBase;
                                                }
                                            }
                                        }
                                        if (MWInstallationViewModel.installationConfig.sideArmId.Count() != 0 &&
                                            MWInstallationViewModel.installationConfig.sideArmId.Count() == 2)
                                        {
                                            List<MV_MWDISH_VIEW> Checkinstallationplace2 = _dbContext.MV_MWDISH_VIEW.Where(
                                            x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id &&
                                            (x.SIDEARM_ID == MWInstallationViewModel.installationConfig.sideArmId[0] && x.SideArmSec_Id == MWInstallationViewModel.installationConfig.sideArmId[1])
                                            || (x.SIDEARM_ID == MWInstallationViewModel.installationConfig.sideArmId[1] && x.SideArmSec_Id == MWInstallationViewModel.installationConfig.sideArmId[0])).ToList();
                                            MV_MWDISH_VIEW CheckAzimuthAndHeightBase = Checkinstallationplace2.FirstOrDefault(x => x.Azimuth == mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                                            if (CheckAzimuthAndHeightBase != null)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                                            }
                                            else if (Checkinstallationplace2 != null && Checkinstallationplace2.Count >= 3)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                                            }
                                            else
                                            {
                                                var SideArmName1 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWInstallationViewModel.installationConfig.sideArmId[0]);
                                                var SideArmName2 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWInstallationViewModel.installationConfig.sideArmId[1]);
                                                if (SideArmName1 != null && SideArmName2 != null && mwDish.Azimuth > 0 && mwDish.HeightBase > 0)
                                                {
                                                    mwDish.DishName = SideArmName1?.Name + " " + SideArmName2?.Name + " " + mwDish.Azimuth + " " + mwDish.HeightBase;
                                                }
                                            }
                                        }

                                        var CheckName = _dbContext.MV_MWDISH_VIEW.FirstOrDefault(x => !x.Dismantle &&
                                                 (x.Id != null ? x.DishName.ToLower() == mwDish.DishName.ToLower() : false
                                                   && x.Id != mwDish.Id && x.SiteCode.ToLower() == MWDishInst.SiteCode.ToLower()));

                                        if (CheckName != null)
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The name {mwDish.DishName} is already exists", (int)Helpers.Constants.ApiReturnCode.fail);
                                        if (AllcivilinstId.allCivilInst.civilWithLegs?.CurrentLoads == null)
                                        {
                                            AllcivilinstId.allCivilInst.civilWithLegs.CurrentLoads = 0;
                                        }
                                        var OldVcivilinfo = _dbContext.TLIcivilWithLegs.AsNoTracking().FirstOrDefault(x => x.Id == AllcivilinstId.allCivilInst.civilWithLegsId);

                                        if (OldVcivilinfo != null)
                                        {
                                            AllcivilinstId.allCivilInst.civilWithLegs.CurrentLoads -= MWDishInst.allLoadInst.mwDish.EquivalentSpace;
                                            var EquivalentSpace = mwDish.SpaceInstallation * (mwDish.CenterHigh / (float)AllcivilinstId.allCivilInst.civilWithLegs.HeightBase);
                                            AllcivilinstId.allCivilInst.civilWithLegs.CurrentLoads += EquivalentSpace;
                                            mwDish.EquivalentSpace = EquivalentSpace;
                                            _unitOfWork.CivilWithLegsRepository.UpdateWithHistory(UserId, OldVcivilinfo, AllcivilinstId.allCivilInst.civilWithLegs);

                                            _unitOfWork.SaveChanges();
                                        }
                                        if (mwDish?.ItemConnectToId != null)
                                        {
                                            TLIitemConnectTo ConnectedToEntity = _unitOfWork.ItemConnectToRepository.GetByID(mwDish.ItemConnectToId);
                                            if (ConnectedToEntity.Name.ToLower() == "farsitedish")
                                                if (string.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if dish connected to FarSiteDish", (int)ApiReturnCode.fail);
                                            if (ConnectedToEntity.Name.ToLower() == "farsitedish" && mwDish.RepeaterTypeId != null)
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not selected RepeaterType because selected itemconecctedto is farsitedish", (int)ApiReturnCode.fail);

                                            else if (ConnectedToEntity.Name.ToLower() == "repeater")
                                            {
                                                if (mwDish.RepeaterTypeId == null)
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type shouldn't be null", (int)ApiReturnCode.fail);
                                                }
                                                else
                                                {
                                                    TLIrepeaterType RepeaterTypeEntity = null;
                                                    if (mwDish.RepeaterTypeId != null)
                                                    {
                                                        RepeaterTypeEntity = _unitOfWork.RepeaterTypeRepository.GetWhereFirst(x => x.Id == mwDish.RepeaterTypeId);
                                                        if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() != "active" && RepeaterTypeEntity.Name.ToLower() != "passive")
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type should be active or passive", (int)ApiReturnCode.fail);
                                                        }
                                                        if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() == "active")
                                                        {
                                                            if (String.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                                                            {
                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if repeater type is active", (int)ApiReturnCode.fail);
                                                            }
                                                        }
                                                        else if (RepeaterTypeEntity.Name.ToLower() == "passive")
                                                        {
                                                            if (ConnectedToEntity.Name.ToLower() != "repeater" || RepeaterTypeEntity.Name.ToLower() != "passive")
                                                            {
                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "The dish should be connected to repeater and repeater type is passive", (int)ApiReturnCode.fail);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        mwDish.MwDishLibraryId = MWInstallationViewModel.civilType.MwDishLibraryId;
                                        mwDish.InstallationPlaceId = MWInstallationViewModel.installationConfig.InstallationPlaceId;
                                        _unitOfWork.MW_DishRepository.UpdateWithHistory(UserId, MWDishInst.allLoadInst.mwDish, mwDish);
                                        _unitOfWork.SaveChanges();
                                        if (MWInstallationViewModel.civilLoads != null)
                                        {

                                            var existingEntity = _unitOfWork.CivilLoadsRepository
                                                .GetAllAsQueryable()
                                                .AsNoTracking()
                                                .FirstOrDefault(x => x.allLoadInstId != null && x.allLoadInst.mwDishId == mwDish.Id && !x.Dismantle);


                                            TLIcivilLoads TLIMWDish = _dbContext.TLIcivilLoads.Include(x => x.allLoadInst).ThenInclude(x => x.mwDish).ThenInclude(x => x.MwDishLibrary)
                                          .FirstOrDefault(x => x.allLoadInstId != null && !x.Dismantle && x.allLoadInst.mwDishId
                                              == MWInstallationViewModel.installationAttributes.Id);



                                            TLIMWDish.allCivilInstId = AllcivilinstId.allCivilInst.Id;
                                            TLIMWDish.InstallationDate = MWInstallationViewModel.civilLoads.InstallationDate;
                                            TLIMWDish.legId = MWInstallationViewModel.installationConfig?.legId;
                                            TLIMWDish.ItemOnCivilStatus = MWInstallationViewModel.civilLoads.ItemOnCivilStatus;
                                            TLIMWDish.ItemStatus = MWInstallationViewModel.civilLoads?.ItemStatus;
                                            TLIMWDish.ReservedSpace = MWInstallationViewModel.civilLoads.ReservedSpace;
                                            _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, existingEntity, TLIMWDish);
                                            _unitOfWork.SaveChanges();
                                        }

                                        if (MWInstallationViewModel.dynamicAttribute != null ? MWInstallationViewModel.dynamicAttribute.Count() > 0 : false)
                                            _unitOfWork.DynamicAttInstValueRepository.UpdateDynamicValues(UserId, MWInstallationViewModel.dynamicAttribute, TableNameId, mwDish.Id, ConnectionString);

                                    }
                                    else if (MWInstallationViewModel.civilLoads.ReservedSpace == true && MWInstallationViewModel.civilLoads.ReservedSpace == false)
                                    {
                                        if (mwDish.CenterHigh <= 0)
                                        {
                                            if (mwDish.HBA_Surface <= 0)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HBA_Surface must bigger from zero", (int)ApiReturnCode.fail);
                                            }
                                            else if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter <= 0)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "CenterHigh must bigger from zero", (int)ApiReturnCode.fail);
                                            }
                                            else
                                            {
                                                mwDish.CenterHigh = mwDish.HBA + MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter / 2;
                                            }
                                        }
                                        if (mwDish.SpaceInstallation == 0)
                                        {

                                            if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.SpaceLibrary == 0)
                                            {
                                                if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter == 0)
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "SpaceInstallation must bigger from zero", (int)ApiReturnCode.fail);
                                                }
                                                mwDish.SpaceInstallation = Convert.ToSingle(3.14) * (float)Math.Pow(MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter / 2, 2);
                                            }
                                            else
                                            {
                                                mwDish.SpaceInstallation = MWDishInst.allLoadInst.mwDish.MwDishLibrary.SpaceLibrary;
                                            }
                                        }
                                        if (mwDish.Azimuth <= 0)
                                        {
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Azimuth must bigger from zero", (int)ApiReturnCode.fail);
                                        }
                                        if (mwDish.HeightBase <= 0)
                                        {
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HeightBase must bigger from zero", (int)ApiReturnCode.fail);
                                        }

                                        if (MWInstallationViewModel.installationConfig.sideArmId.Count() != 0 &&
                                            MWInstallationViewModel.installationConfig.sideArmId.Count() == 1)
                                        {
                                            List<MV_MWDISH_VIEW> Checkinstallationplace = _dbContext.MV_MWDISH_VIEW.Where(
                                                x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id
                                                && x.Id != mwDish.Id && (x.SideArmSec_Id == MWInstallationViewModel.installationConfig.sideArmId[0]
                                                || x.SideArmSec_Id == MWInstallationViewModel.installationConfig.sideArmId[0])).ToList();
                                            MV_MWDISH_VIEW CheckAzimuthAndHeightBase = Checkinstallationplace.FirstOrDefault(x => x.Azimuth == mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                                            if (CheckAzimuthAndHeightBase != null)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                                            }
                                            else if (Checkinstallationplace != null && Checkinstallationplace.Count >= 3)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                                            }
                                            else
                                            {
                                                var SideArmName1 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWInstallationViewModel.installationConfig.sideArmId[0]);
                                                if (SideArmName1 != null && mwDish.Azimuth > 0 && mwDish.HeightBase > 0)
                                                {
                                                    mwDish.DishName = SideArmName1?.Name + " " + mwDish.Azimuth + " " + mwDish.HeightBase;
                                                }
                                            }
                                        }
                                        if (MWInstallationViewModel.installationConfig.sideArmId.Count() != 0 &&
                                            MWInstallationViewModel.installationConfig.sideArmId.Count() == 2)
                                        {
                                            List<MV_MWDISH_VIEW> Checkinstallationplace2 = _dbContext.MV_MWDISH_VIEW.Where(
                                            x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id &&
                                            (x.SIDEARM_ID == MWInstallationViewModel.installationConfig.sideArmId[0] && x.SideArmSec_Id == MWInstallationViewModel.installationConfig.sideArmId[1])
                                            || (x.SIDEARM_ID == MWInstallationViewModel.installationConfig.sideArmId[1] && x.SideArmSec_Id == MWInstallationViewModel.installationConfig.sideArmId[0])).ToList();
                                            MV_MWDISH_VIEW CheckAzimuthAndHeightBase = Checkinstallationplace2.FirstOrDefault(x => x.Azimuth == mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                                            if (CheckAzimuthAndHeightBase != null)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                                            }
                                            else if (Checkinstallationplace2 != null && Checkinstallationplace2.Count >= 3)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                                            }
                                            else
                                            {
                                                var SideArmName1 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWInstallationViewModel.installationConfig.sideArmId[0]);
                                                var SideArmName2 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWInstallationViewModel.installationConfig.sideArmId[1]);
                                                if (SideArmName1 != null && SideArmName2 != null && mwDish.Azimuth > 0 && mwDish.HeightBase > 0)
                                                {
                                                    mwDish.DishName = SideArmName1?.Name + " " + SideArmName2?.Name + " " + mwDish.Azimuth + " " + mwDish.HeightBase;
                                                }
                                            }
                                        }

                                        var CheckName = _dbContext.MV_MWDISH_VIEW.FirstOrDefault(x => !x.Dismantle &&
                                                 (x.Id != null ? x.DishName.ToLower() == mwDish.DishName.ToLower() : false
                                                   && x.Id != mwDish.Id && x.SiteCode.ToLower() == MWDishInst.SiteCode.ToLower()));

                                        if (CheckName != null)
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The name {mwDish.DishName} is already exists", (int)Helpers.Constants.ApiReturnCode.fail);
                                        var OldVcivilinfo = _dbContext.TLIcivilWithLegs.AsNoTracking().FirstOrDefault(x => x.Id == AllcivilinstId.allCivilInst.civilWithLegsId);
                                        if (OldVcivilinfo != null)
                                        {
                                            AllcivilinstId.allCivilInst.civilWithLegs.CurrentLoads = AllcivilinstId.allCivilInst.civilWithLegs.CurrentLoads - MWDishInst.allLoadInst.mwDish.EquivalentSpace;
                                            _unitOfWork.CivilWithLegsRepository.UpdateWithHistory(UserId, OldVcivilinfo, AllcivilinstId.allCivilInst.civilWithLegs);
                                            _unitOfWork.SaveChanges();
                                        }

                                        if (mwDish?.ItemConnectToId != null)
                                        {
                                            TLIitemConnectTo ConnectedToEntity = _unitOfWork.ItemConnectToRepository.GetByID(mwDish.ItemConnectToId);
                                            if (ConnectedToEntity.Name.ToLower() == "farsitedish")
                                                if (string.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if dish connected to FarSiteDish", (int)ApiReturnCode.fail);
                                            if (ConnectedToEntity.Name.ToLower() == "farsitedish" && mwDish.RepeaterTypeId != null)
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not selected RepeaterType because selected itemconecctedto is farsitedish", (int)ApiReturnCode.fail);

                                            else if (ConnectedToEntity.Name.ToLower() == "repeater")
                                            {
                                                if (mwDish.RepeaterTypeId == null)
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type shouldn't be null", (int)ApiReturnCode.fail);
                                                }
                                                else
                                                {
                                                    TLIrepeaterType RepeaterTypeEntity = null;
                                                    if (mwDish.RepeaterTypeId != null)
                                                    {
                                                        RepeaterTypeEntity = _unitOfWork.RepeaterTypeRepository.GetWhereFirst(x => x.Id == mwDish.RepeaterTypeId);
                                                        if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() != "active" && RepeaterTypeEntity.Name.ToLower() != "passive")
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type should be active or passive", (int)ApiReturnCode.fail);
                                                        }
                                                        if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() == "active")
                                                        {
                                                            if (String.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                                                            {
                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if repeater type is active", (int)ApiReturnCode.fail);
                                                            }
                                                        }
                                                        else if (RepeaterTypeEntity.Name.ToLower() == "passive")
                                                        {
                                                            if (ConnectedToEntity.Name.ToLower() != "repeater" || RepeaterTypeEntity.Name.ToLower() != "passive")
                                                            {
                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "The dish should be connected to repeater and repeater type is passive", (int)ApiReturnCode.fail);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        mwDish.MwDishLibraryId = MWInstallationViewModel.civilType.MwDishLibraryId;
                                        mwDish.InstallationPlaceId = MWInstallationViewModel.installationConfig.InstallationPlaceId;
                                        _unitOfWork.MW_DishRepository.UpdateWithHistory(UserId, MWDishInst.allLoadInst.mwDish, mwDish);
                                        _unitOfWork.SaveChanges();
                                        if (MWInstallationViewModel.civilLoads != null)
                                        {

                                            var existingEntity = _unitOfWork.CivilLoadsRepository
                                                .GetAllAsQueryable()
                                                .AsNoTracking()
                                                .FirstOrDefault(x => x.allLoadInstId != null && x.allLoadInst.mwDishId == mwDish.Id && !x.Dismantle);


                                            TLIcivilLoads TLIMWDish = _dbContext.TLIcivilLoads.Include(x => x.allLoadInst).ThenInclude(x => x.mwDish).ThenInclude(x => x.MwDishLibrary)
                                          .FirstOrDefault(x => x.allLoadInstId != null && !x.Dismantle && x.allLoadInst.mwDishId
                                              == MWInstallationViewModel.installationAttributes.Id);



                                            TLIMWDish.allCivilInstId = AllcivilinstId.allCivilInst.Id;
                                            TLIMWDish.InstallationDate = MWInstallationViewModel.civilLoads.InstallationDate;
                                            TLIMWDish.legId = MWInstallationViewModel.installationConfig?.legId;
                                            TLIMWDish.ItemOnCivilStatus = MWInstallationViewModel.civilLoads.ItemOnCivilStatus;
                                            TLIMWDish.ItemStatus = MWInstallationViewModel.civilLoads?.ItemStatus;
                                            TLIMWDish.ReservedSpace = MWInstallationViewModel.civilLoads.ReservedSpace;
                                            _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, existingEntity, TLIMWDish);
                                            _unitOfWork.SaveChanges();
                                        }
                                        if (MWInstallationViewModel.dynamicAttribute != null ? MWInstallationViewModel.dynamicAttribute.Count() > 0 : false)
                                            _unitOfWork.DynamicAttInstValueRepository.UpdateDynamicValues(UserId, MWInstallationViewModel.dynamicAttribute, TableNameId, mwDish.Id, ConnectionString);


                                    }
                                    else if (MWInstallationViewModel.civilLoads.ReservedSpace == false && MWInstallationViewModel.civilLoads.ReservedSpace == true)
                                    {
                                        if (mwDish.CenterHigh <= 0)
                                        {
                                            if (mwDish.HBA_Surface <= 0)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HBA_Surface must bigger from zero", (int)ApiReturnCode.fail);
                                            }
                                            else if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter <= 0)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "CenterHigh must bigger from zero", (int)ApiReturnCode.fail);
                                            }
                                            else
                                            {
                                                mwDish.CenterHigh = mwDish.HBA + MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter / 2;
                                            }
                                        }
                                        if (mwDish.SpaceInstallation == 0)
                                        {

                                            if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.SpaceLibrary == 0)
                                            {
                                                if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter == 0)
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "SpaceInstallation must bigger from zero", (int)ApiReturnCode.fail);
                                                }
                                                mwDish.SpaceInstallation = Convert.ToSingle(3.14) * (float)Math.Pow(MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter / 2, 2);
                                            }
                                            else
                                            {
                                                mwDish.SpaceInstallation = MWDishInst.allLoadInst.mwDish.MwDishLibrary.SpaceLibrary;
                                            }
                                        }
                                        if (mwDish.Azimuth <= 0)
                                        {
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Azimuth must bigger from zero", (int)ApiReturnCode.fail);
                                        }
                                        if (mwDish.HeightBase <= 0)
                                        {
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HeightBase must bigger from zero", (int)ApiReturnCode.fail);
                                        }

                                        if (MWInstallationViewModel.installationConfig.sideArmId.Count() != 0 &&
                                            MWInstallationViewModel.installationConfig.sideArmId.Count() == 1)
                                        {
                                            List<MV_MWDISH_VIEW> Checkinstallationplace = _dbContext.MV_MWDISH_VIEW.Where(
                                                x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id
                                                && x.Id != mwDish.Id && (x.SideArmSec_Id == MWInstallationViewModel.installationConfig.sideArmId[0]
                                                || x.SideArmSec_Id == MWInstallationViewModel.installationConfig.sideArmId[0])).ToList();
                                            MV_MWDISH_VIEW CheckAzimuthAndHeightBase = Checkinstallationplace.FirstOrDefault(x => x.Azimuth == mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                                            if (CheckAzimuthAndHeightBase != null)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                                            }
                                            else if (Checkinstallationplace != null && Checkinstallationplace.Count >= 3)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                                            }
                                            else
                                            {
                                                var SideArmName1 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWInstallationViewModel.installationConfig.sideArmId[0]);
                                                if (SideArmName1 != null && mwDish.Azimuth > 0 && mwDish.HeightBase > 0)
                                                {
                                                    mwDish.DishName = SideArmName1?.Name + " " + mwDish.Azimuth + " " + mwDish.HeightBase;
                                                }
                                            }
                                        }
                                        if (MWInstallationViewModel.installationConfig.sideArmId.Count() != 0 &&
                                            MWInstallationViewModel.installationConfig.sideArmId.Count() == 2)
                                        {
                                            List<MV_MWDISH_VIEW> Checkinstallationplace2 = _dbContext.MV_MWDISH_VIEW.Where(
                                            x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id &&
                                            (x.SIDEARM_ID == MWInstallationViewModel.installationConfig.sideArmId[0] && x.SideArmSec_Id == MWInstallationViewModel.installationConfig.sideArmId[1])
                                            || (x.SIDEARM_ID == MWInstallationViewModel.installationConfig.sideArmId[1] && x.SideArmSec_Id == MWInstallationViewModel.installationConfig.sideArmId[0])).ToList();
                                            MV_MWDISH_VIEW CheckAzimuthAndHeightBase = Checkinstallationplace2.FirstOrDefault(x => x.Azimuth == mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                                            if (CheckAzimuthAndHeightBase != null)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                                            }
                                            else if (Checkinstallationplace2 != null && Checkinstallationplace2.Count >= 3)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                                            }
                                            else
                                            {
                                                var SideArmName1 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWInstallationViewModel.installationConfig.sideArmId[0]);
                                                var SideArmName2 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWInstallationViewModel.installationConfig.sideArmId[1]);
                                                if (SideArmName1 != null && SideArmName2 != null && mwDish.Azimuth > 0 && mwDish.HeightBase > 0)
                                                {
                                                    mwDish.DishName = SideArmName1?.Name + " " + SideArmName2?.Name + " " + mwDish.Azimuth + " " + mwDish.HeightBase;
                                                }
                                            }
                                        }

                                        var CheckName = _dbContext.MV_MWDISH_VIEW.FirstOrDefault(x => !x.Dismantle &&
                                                 (x.Id != null ? x.DishName.ToLower() == mwDish.DishName.ToLower() : false
                                                   && x.Id != mwDish.Id && x.SiteCode.ToLower() == MWDishInst.SiteCode.ToLower()));

                                        if (CheckName != null)
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The name {mwDish.DishName} is already exists", (int)Helpers.Constants.ApiReturnCode.fail);
                                        if (AllcivilinstId.allCivilInst.civilWithLegs?.CurrentLoads == null)
                                        {
                                            AllcivilinstId.allCivilInst.civilWithLegs.CurrentLoads = 0;
                                        }
                                        var OldVcivilinfo = _dbContext.TLIcivilWithLegs.AsNoTracking().FirstOrDefault(x => x.Id == AllcivilinstId.allCivilInst.civilWithLegsId);

                                        if (OldVcivilinfo != null)
                                        {

                                            var EquivalentSpace = mwDish.SpaceInstallation * (mwDish.CenterHigh / (float)AllcivilinstId.allCivilInst.civilWithLegs.HeightBase);
                                            AllcivilinstId.allCivilInst.civilWithLegs.CurrentLoads += EquivalentSpace;
                                            mwDish.EquivalentSpace = EquivalentSpace;
                                            _unitOfWork.CivilWithLegsRepository.UpdateWithHistory(UserId, OldVcivilinfo, AllcivilinstId.allCivilInst.civilWithLegs);

                                            _unitOfWork.SaveChanges();
                                        }

                                        if (mwDish?.ItemConnectToId != null)
                                        {
                                            TLIitemConnectTo ConnectedToEntity = _unitOfWork.ItemConnectToRepository.GetByID(mwDish.ItemConnectToId);
                                            if (ConnectedToEntity.Name.ToLower() == "farsitedish")
                                                if (string.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if dish connected to FarSiteDish", (int)ApiReturnCode.fail);
                                            if (ConnectedToEntity.Name.ToLower() == "farsitedish" && mwDish.RepeaterTypeId != null)
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not selected RepeaterType because selected itemconecctedto is farsitedish", (int)ApiReturnCode.fail);

                                            else if (ConnectedToEntity.Name.ToLower() == "repeater")
                                            {
                                                if (mwDish.RepeaterTypeId == null)
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type shouldn't be null", (int)ApiReturnCode.fail);
                                                }
                                                else
                                                {
                                                    TLIrepeaterType RepeaterTypeEntity = null;
                                                    if (mwDish.RepeaterTypeId != null)
                                                    {
                                                        RepeaterTypeEntity = _unitOfWork.RepeaterTypeRepository.GetWhereFirst(x => x.Id == mwDish.RepeaterTypeId);
                                                        if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() != "active" && RepeaterTypeEntity.Name.ToLower() != "passive")
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type should be active or passive", (int)ApiReturnCode.fail);
                                                        }
                                                        if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() == "active")
                                                        {
                                                            if (String.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                                                            {
                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if repeater type is active", (int)ApiReturnCode.fail);
                                                            }
                                                        }
                                                        else if (RepeaterTypeEntity.Name.ToLower() == "passive")
                                                        {
                                                            if (ConnectedToEntity.Name.ToLower() != "repeater" || RepeaterTypeEntity.Name.ToLower() != "passive")
                                                            {
                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "The dish should be connected to repeater and repeater type is passive", (int)ApiReturnCode.fail);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        mwDish.MwDishLibraryId = MWInstallationViewModel.civilType.MwDishLibraryId;
                                        mwDish.InstallationPlaceId = MWInstallationViewModel.installationConfig.InstallationPlaceId;
                                        _unitOfWork.MW_DishRepository.UpdateWithHistory(UserId, MWDishInst.allLoadInst.mwDish, mwDish);
                                        _unitOfWork.SaveChanges();
                                        if (MWInstallationViewModel.civilLoads != null)
                                        {

                                            var existingEntity = _unitOfWork.CivilLoadsRepository
                                                .GetAllAsQueryable()
                                                .AsNoTracking()
                                                .FirstOrDefault(x => x.allLoadInstId != null && x.allLoadInst.mwDishId == mwDish.Id && !x.Dismantle);


                                            TLIcivilLoads TLIMWDish = _dbContext.TLIcivilLoads.Include(x => x.allLoadInst).ThenInclude(x => x.mwDish).ThenInclude(x => x.MwDishLibrary)
                                          .FirstOrDefault(x => x.allLoadInstId != null && !x.Dismantle && x.allLoadInst.mwDishId
                                              == MWInstallationViewModel.installationAttributes.Id);



                                            TLIMWDish.allCivilInstId = AllcivilinstId.allCivilInst.Id;
                                            TLIMWDish.InstallationDate = MWInstallationViewModel.civilLoads.InstallationDate;
                                            TLIMWDish.legId = MWInstallationViewModel.installationConfig?.legId;
                                            TLIMWDish.ItemOnCivilStatus = MWInstallationViewModel.civilLoads.ItemOnCivilStatus;
                                            TLIMWDish.ItemStatus = MWInstallationViewModel.civilLoads?.ItemStatus;
                                            TLIMWDish.ReservedSpace = MWInstallationViewModel.civilLoads.ReservedSpace;
                                            _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, existingEntity, TLIMWDish);
                                            _unitOfWork.SaveChanges();
                                        }
                                        if (MWInstallationViewModel.dynamicAttribute != null ? MWInstallationViewModel.dynamicAttribute.Count() > 0 : false)
                                            _unitOfWork.DynamicAttInstValueRepository.UpdateDynamicValues(UserId, MWInstallationViewModel.dynamicAttribute, TableNameId, mwDish.Id, ConnectionString);


                                    }
                                    else if (MWInstallationViewModel.civilLoads.ReservedSpace == false && MWInstallationViewModel.civilLoads.ReservedSpace == false)
                                    {
                                        if (mwDish.CenterHigh <= 0)
                                        {
                                            if (mwDish.HBA_Surface <= 0)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HBA_Surface must bigger from zero", (int)ApiReturnCode.fail);
                                            }
                                            else if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter <= 0)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "CenterHigh must bigger from zero", (int)ApiReturnCode.fail);
                                            }
                                            else
                                            {
                                                mwDish.CenterHigh = mwDish.HBA + MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter / 2;
                                            }
                                        }
                                        if (mwDish.SpaceInstallation == 0)
                                        {

                                            if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.SpaceLibrary == 0)
                                            {
                                                if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter == 0)
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "SpaceInstallation must bigger from zero", (int)ApiReturnCode.fail);
                                                }
                                                mwDish.SpaceInstallation = Convert.ToSingle(3.14) * (float)Math.Pow(MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter / 2, 2);
                                            }
                                            else
                                            {
                                                mwDish.SpaceInstallation = MWDishInst.allLoadInst.mwDish.MwDishLibrary.SpaceLibrary;
                                            }
                                        }
                                        if (mwDish.Azimuth <= 0)
                                        {
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Azimuth must bigger from zero", (int)ApiReturnCode.fail);
                                        }
                                        if (mwDish.HeightBase <= 0)
                                        {
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HeightBase must bigger from zero", (int)ApiReturnCode.fail);
                                        }

                                        if (MWInstallationViewModel.installationConfig.sideArmId.Count() != 0 &&
                                            MWInstallationViewModel.installationConfig.sideArmId.Count() == 1)
                                        {
                                            List<MV_MWDISH_VIEW> Checkinstallationplace = _dbContext.MV_MWDISH_VIEW.Where(
                                                x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id
                                                && x.Id != mwDish.Id && (x.SideArmSec_Id == MWInstallationViewModel.installationConfig.sideArmId[0]
                                                || x.SideArmSec_Id == MWInstallationViewModel.installationConfig.sideArmId[0])).ToList();
                                            MV_MWDISH_VIEW CheckAzimuthAndHeightBase = Checkinstallationplace.FirstOrDefault(x => x.Azimuth == mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                                            if (CheckAzimuthAndHeightBase != null)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                                            }
                                            else if (Checkinstallationplace != null && Checkinstallationplace.Count >= 3)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                                            }
                                            else
                                            {
                                                var SideArmName1 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWInstallationViewModel.installationConfig.sideArmId[0]);
                                                if (SideArmName1 != null && mwDish.Azimuth > 0 && mwDish.HeightBase > 0)
                                                {
                                                    mwDish.DishName = SideArmName1?.Name + " " + mwDish.Azimuth + " " + mwDish.HeightBase;
                                                }
                                            }
                                        }
                                        if (MWInstallationViewModel.installationConfig.sideArmId.Count() != 0 &&
                                            MWInstallationViewModel.installationConfig.sideArmId.Count() == 2)
                                        {
                                            List<MV_MWDISH_VIEW> Checkinstallationplace2 = _dbContext.MV_MWDISH_VIEW.Where(
                                            x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id &&
                                            (x.SIDEARM_ID == MWInstallationViewModel.installationConfig.sideArmId[0] && x.SideArmSec_Id == MWInstallationViewModel.installationConfig.sideArmId[1])
                                            || (x.SIDEARM_ID == MWInstallationViewModel.installationConfig.sideArmId[1] && x.SideArmSec_Id == MWInstallationViewModel.installationConfig.sideArmId[0])).ToList();
                                            MV_MWDISH_VIEW CheckAzimuthAndHeightBase = Checkinstallationplace2.FirstOrDefault(x => x.Azimuth == mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                                            if (CheckAzimuthAndHeightBase != null)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                                            }
                                            else if (Checkinstallationplace2 != null && Checkinstallationplace2.Count >= 3)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                                            }
                                            else
                                            {
                                                var SideArmName1 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWInstallationViewModel.installationConfig.sideArmId[0]);
                                                var SideArmName2 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWInstallationViewModel.installationConfig.sideArmId[1]);
                                                if (SideArmName1 != null && SideArmName2 != null && mwDish.Azimuth > 0 && mwDish.HeightBase > 0)
                                                {
                                                    mwDish.DishName = SideArmName1?.Name + " " + SideArmName2?.Name + " " + mwDish.Azimuth + " " + mwDish.HeightBase;
                                                }
                                            }
                                        }

                                        var CheckName = _dbContext.MV_MWDISH_VIEW.FirstOrDefault(x => !x.Dismantle &&
                                                 (x.Id != null ? x.DishName.ToLower() == mwDish.DishName.ToLower() : false
                                                   && x.Id != mwDish.Id && x.SiteCode.ToLower() == MWDishInst.SiteCode.ToLower()));

                                        if (CheckName != null)
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The name {mwDish.DishName} is already exists", (int)Helpers.Constants.ApiReturnCode.fail);

                                        if (mwDish?.ItemConnectToId != null)
                                        {
                                            TLIitemConnectTo ConnectedToEntity = _unitOfWork.ItemConnectToRepository.GetByID(mwDish.ItemConnectToId);
                                            if (ConnectedToEntity.Name.ToLower() == "farsitedish")
                                                if (string.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if dish connected to FarSiteDish", (int)ApiReturnCode.fail);
                                            if (ConnectedToEntity.Name.ToLower() == "farsitedish" && mwDish.RepeaterTypeId != null)
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not selected RepeaterType because selected itemconecctedto is farsitedish", (int)ApiReturnCode.fail);

                                            else if (ConnectedToEntity.Name.ToLower() == "repeater")
                                            {
                                                if (mwDish.RepeaterTypeId == null)
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type shouldn't be null", (int)ApiReturnCode.fail);
                                                }
                                                else
                                                {
                                                    TLIrepeaterType RepeaterTypeEntity = null;
                                                    if (mwDish.RepeaterTypeId != null)
                                                    {
                                                        RepeaterTypeEntity = _unitOfWork.RepeaterTypeRepository.GetWhereFirst(x => x.Id == mwDish.RepeaterTypeId);
                                                        if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() != "active" && RepeaterTypeEntity.Name.ToLower() != "passive")
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type should be active or passive", (int)ApiReturnCode.fail);
                                                        }
                                                        if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() == "active")
                                                        {
                                                            if (String.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                                                            {
                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if repeater type is active", (int)ApiReturnCode.fail);
                                                            }
                                                        }
                                                        else if (RepeaterTypeEntity.Name.ToLower() == "passive")
                                                        {
                                                            if (ConnectedToEntity.Name.ToLower() != "repeater" || RepeaterTypeEntity.Name.ToLower() != "passive")
                                                            {
                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "The dish should be connected to repeater and repeater type is passive", (int)ApiReturnCode.fail);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        mwDish.MwDishLibraryId = MWInstallationViewModel.civilType.MwDishLibraryId;
                                        mwDish.InstallationPlaceId = MWInstallationViewModel.installationConfig.InstallationPlaceId;
                                        _unitOfWork.MW_DishRepository.UpdateWithHistory(UserId, MWDishInst.allLoadInst.mwDish, mwDish);
                                        _unitOfWork.SaveChanges();
                                        if (MWInstallationViewModel.civilLoads != null)
                                        {

                                            var existingEntity = _unitOfWork.CivilLoadsRepository
                                                .GetAllAsQueryable()
                                                .AsNoTracking()
                                                .FirstOrDefault(x => x.allLoadInstId != null && x.allLoadInst.mwDishId == mwDish.Id && !x.Dismantle);


                                            TLIcivilLoads TLIMWDish = _dbContext.TLIcivilLoads.Include(x => x.allLoadInst).ThenInclude(x => x.mwDish).ThenInclude(x => x.MwDishLibrary)
                                          .FirstOrDefault(x => x.allLoadInstId != null && !x.Dismantle && x.allLoadInst.mwDishId
                                              == MWInstallationViewModel.installationAttributes.Id);



                                            TLIMWDish.allCivilInstId = AllcivilinstId.allCivilInst.Id;
                                            TLIMWDish.InstallationDate = MWInstallationViewModel.civilLoads.InstallationDate;
                                            TLIMWDish.legId = MWInstallationViewModel.installationConfig?.legId;
                                            TLIMWDish.ItemOnCivilStatus = MWInstallationViewModel.civilLoads.ItemOnCivilStatus;
                                            TLIMWDish.ItemStatus = MWInstallationViewModel.civilLoads?.ItemStatus;
                                            TLIMWDish.ReservedSpace = MWInstallationViewModel.civilLoads.ReservedSpace;
                                            _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, existingEntity, TLIMWDish);
                                            _unitOfWork.SaveChanges();
                                        }
                                        if (MWInstallationViewModel.dynamicAttribute != null ? MWInstallationViewModel.dynamicAttribute.Count() > 0 : false)
                                            _unitOfWork.DynamicAttInstValueRepository.UpdateDynamicValues(UserId, MWInstallationViewModel.dynamicAttribute, TableNameId, mwDish.Id, ConnectionString);


                                    }
                                }
                                else
                                {
                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "must selected sideArm ", (int)ApiReturnCode.fail);
                                }
                            }
                            else
                            {
                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "this civil is not found ", (int)ApiReturnCode.fail);
                            }

                        }
                        else if (MWInstallationViewModel.installationConfig.civilWithoutLegId != null)
                        {
                          
                            if (MWInstallationViewModel.installationConfig.sideArmId != null)
                            {
                                if (!string.IsNullOrEmpty(mwDish.Serial_Number))
                                {
                                    bool CheckSerialNumber = _dbContext.MV_MWDISH_VIEW.Any(x => x.Serial_Number == mwDish.Serial_Number && x.Id != mwDish.Id && !x.Dismantle);
                                    if (CheckSerialNumber)
                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The Serial Number {mwDish.Serial_Number} is already exists", (int)ApiReturnCode.fail);
                                }
                                TLIcivilSiteDate AllcivilinstId = _unitOfWork.CivilSiteDateRepository.GetAllAsQueryable().AsNoTracking().
                                   Include(x => x.allCivilInst).Include(x => x.allCivilInst.civilWithLegs).Include(x => x.allCivilInst.civilWithoutLeg)
                                   .Include(x => x.allCivilInst.civilNonSteel).Include(x => x.allCivilInst.civilWithoutLeg.CivilWithoutlegsLib)
                                  .Include(x => x.allCivilInst.civilWithLegs.CivilWithLegsLib).Include(x => x.allCivilInst.civilNonSteel.CivilNonsteelLibrary)
                                  .FirstOrDefault(x => x.allCivilInst.civilWithoutLegId ==
                                MWInstallationViewModel.installationConfig.civilWithoutLegId && !x.Dismantle);
                                if (AllcivilinstId != null)
                                {
                                    if (MWInstallationViewModel.civilLoads.ReservedSpace == true && MWInstallationViewModel.civilLoads.ReservedSpace == true)
                                    {
                                        if (mwDish.CenterHigh <= 0)
                                        {
                                            if (mwDish.HBA_Surface <= 0)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HBA_Surface must bigger from zero", (int)ApiReturnCode.fail);
                                            }
                                            else if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter <= 0)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "CenterHigh must bigger from zero", (int)ApiReturnCode.fail);
                                            }
                                            else
                                            {
                                                mwDish.CenterHigh = mwDish.HBA + MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter / 2;
                                            }
                                        }
                                        if (mwDish.SpaceInstallation == 0)
                                        {

                                            if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.SpaceLibrary == 0)
                                            {
                                                if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter == 0)
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "SpaceInstallation must bigger from zero", (int)ApiReturnCode.fail);
                                                }
                                                mwDish.SpaceInstallation = Convert.ToSingle(3.14) * (float)Math.Pow(MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter / 2, 2);
                                            }
                                            else
                                            {
                                                mwDish.SpaceInstallation = MWDishInst.allLoadInst.mwDish.MwDishLibrary.SpaceLibrary;
                                            }
                                        }
                                        if (mwDish.Azimuth <= 0)
                                        {
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Azimuth must bigger from zero", (int)ApiReturnCode.fail);
                                        }
                                        if (mwDish.HeightBase <= 0)
                                        {
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HeightBase must bigger from zero", (int)ApiReturnCode.fail);
                                        }

                                        if (MWInstallationViewModel.installationConfig.sideArmId.Count() != 0 &&
                                            MWInstallationViewModel.installationConfig.sideArmId.Count() == 1)
                                        {
                                            List<MV_MWDISH_VIEW> Checkinstallationplace = _dbContext.MV_MWDISH_VIEW.Where(
                                                x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id
                                                && x.Id != mwDish.Id && (x.SideArmSec_Id == MWInstallationViewModel.installationConfig.sideArmId[0]
                                                || x.SideArmSec_Id == MWInstallationViewModel.installationConfig.sideArmId[0])).ToList();
                                            MV_MWDISH_VIEW CheckAzimuthAndHeightBase = Checkinstallationplace.FirstOrDefault(x => x.Azimuth == mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                                            if (CheckAzimuthAndHeightBase != null)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                                            }
                                            else if (Checkinstallationplace != null && Checkinstallationplace.Count >= 3)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                                            }
                                            else
                                            {
                                                var SideArmName1 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWInstallationViewModel.installationConfig.sideArmId[0]);
                                                if (SideArmName1 != null && mwDish.Azimuth > 0 && mwDish.HeightBase > 0)
                                                {
                                                    mwDish.DishName = SideArmName1?.Name + " " + mwDish.Azimuth + " " + mwDish.HeightBase;
                                                }
                                            }
                                        }
                                        if (MWInstallationViewModel.installationConfig.sideArmId.Count() != 0 &&
                                            MWInstallationViewModel.installationConfig.sideArmId.Count() == 2)
                                        {
                                            List<MV_MWDISH_VIEW> Checkinstallationplace2 = _dbContext.MV_MWDISH_VIEW.Where(
                                            x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id &&
                                            (x.SIDEARM_ID == MWInstallationViewModel.installationConfig.sideArmId[0] && x.SideArmSec_Id == MWInstallationViewModel.installationConfig.sideArmId[1])
                                            || (x.SIDEARM_ID == MWInstallationViewModel.installationConfig.sideArmId[1] && x.SideArmSec_Id == MWInstallationViewModel.installationConfig.sideArmId[0])).ToList();
                                            MV_MWDISH_VIEW CheckAzimuthAndHeightBase = Checkinstallationplace2.FirstOrDefault(x => x.Azimuth == mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                                            if (CheckAzimuthAndHeightBase != null)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                                            }
                                            else if (Checkinstallationplace2 != null && Checkinstallationplace2.Count >= 3)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                                            }
                                            else
                                            {
                                                var SideArmName1 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWInstallationViewModel.installationConfig.sideArmId[0]);
                                                var SideArmName2 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWInstallationViewModel.installationConfig.sideArmId[1]);
                                                if (SideArmName1 != null && SideArmName2 != null && mwDish.Azimuth > 0 && mwDish.HeightBase > 0)
                                                {
                                                    mwDish.DishName = SideArmName1?.Name + " " + SideArmName2?.Name + " " + mwDish.Azimuth + " " + mwDish.HeightBase;
                                                }
                                            }
                                        }

                                        var CheckName = _dbContext.MV_MWDISH_VIEW.FirstOrDefault(x => !x.Dismantle &&
                                                 (x.Id != null ? x.DishName.ToLower() == mwDish.DishName.ToLower() : false
                                                   && x.Id != mwDish.Id && x.SiteCode.ToLower() == MWDishInst.SiteCode.ToLower()));

                                        if (CheckName != null)
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The name {mwDish.DishName} is already exists", (int)Helpers.Constants.ApiReturnCode.fail);

                                        if (AllcivilinstId.allCivilInst.civilWithoutLeg?.CurrentLoads == null)
                                        {
                                            AllcivilinstId.allCivilInst.civilWithoutLeg.CurrentLoads = 0;
                                        }
                                        var OldVcivilinfo = _dbContext.TLIcivilWithoutLeg.AsNoTracking().FirstOrDefault(x => x.Id == AllcivilinstId.allCivilInst.civilWithoutLegId);
                                        if (OldVcivilinfo != null)
                                        {
                                            AllcivilinstId.allCivilInst.civilWithLegs.CurrentLoads -= MWDishInst.allLoadInst.mwDish.EquivalentSpace;
                                            var EquivalentSpace = mwDish.SpaceInstallation * (mwDish.CenterHigh / (float)AllcivilinstId.allCivilInst.civilWithoutLeg.HeightBase);
                                            AllcivilinstId.allCivilInst.civilWithoutLeg.CurrentLoads += EquivalentSpace;
                                            mwDish.EquivalentSpace = EquivalentSpace;
                                            _unitOfWork.CivilWithoutLegRepository.UpdateWithHistory(UserId, OldVcivilinfo, AllcivilinstId.allCivilInst.civilWithoutLeg);
                                            _unitOfWork.SaveChanges();
                                        }
                                        if (mwDish?.ItemConnectToId != null)
                                        {
                                            TLIitemConnectTo ConnectedToEntity = _unitOfWork.ItemConnectToRepository.GetByID(mwDish.ItemConnectToId);
                                            if (ConnectedToEntity.Name.ToLower() == "farsitedish")
                                                if (string.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if dish connected to FarSiteDish", (int)ApiReturnCode.fail);
                                            if (ConnectedToEntity.Name.ToLower() == "farsitedish" && mwDish.RepeaterTypeId != null)
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not selected RepeaterType because selected itemconecctedto is farsitedish", (int)ApiReturnCode.fail);

                                            else if (ConnectedToEntity.Name.ToLower() == "repeater")
                                            {
                                                if (mwDish.RepeaterTypeId == null)
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type shouldn't be null", (int)ApiReturnCode.fail);
                                                }
                                                else
                                                {
                                                    TLIrepeaterType RepeaterTypeEntity = null;
                                                    if (mwDish.RepeaterTypeId != null)
                                                    {
                                                        RepeaterTypeEntity = _unitOfWork.RepeaterTypeRepository.GetWhereFirst(x => x.Id == mwDish.RepeaterTypeId);
                                                        if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() != "active" && RepeaterTypeEntity.Name.ToLower() != "passive")
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type should be active or passive", (int)ApiReturnCode.fail);
                                                        }
                                                        if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() == "active")
                                                        {
                                                            if (String.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                                                            {
                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if repeater type is active", (int)ApiReturnCode.fail);
                                                            }
                                                        }
                                                        else if (RepeaterTypeEntity.Name.ToLower() == "passive")
                                                        {
                                                            if (ConnectedToEntity.Name.ToLower() != "repeater" || RepeaterTypeEntity.Name.ToLower() != "passive")
                                                            {
                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "The dish should be connected to repeater and repeater type is passive", (int)ApiReturnCode.fail);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        mwDish.MwDishLibraryId = MWInstallationViewModel.civilType.MwDishLibraryId;
                                        mwDish.InstallationPlaceId = MWInstallationViewModel.installationConfig.InstallationPlaceId;
                                        _unitOfWork.MW_DishRepository.UpdateWithHistory(UserId, MWDishInst.allLoadInst.mwDish, mwDish);
                                        _unitOfWork.SaveChanges();
                                        if (MWInstallationViewModel.civilLoads != null)
                                        {

                                            var existingEntity = _unitOfWork.CivilLoadsRepository
                                                .GetAllAsQueryable()
                                                .AsNoTracking()
                                                .FirstOrDefault(x => x.allLoadInstId != null && x.allLoadInst.mwDishId == mwDish.Id && !x.Dismantle);


                                            TLIcivilLoads TLIMWDish = _dbContext.TLIcivilLoads.Include(x => x.allLoadInst).ThenInclude(x => x.mwDish).ThenInclude(x => x.MwDishLibrary)
                                          .FirstOrDefault(x => x.allLoadInstId != null && !x.Dismantle && x.allLoadInst.mwDishId
                                              == MWInstallationViewModel.installationAttributes.Id);



                                            TLIMWDish.allCivilInstId = AllcivilinstId.allCivilInst.Id;
                                            TLIMWDish.InstallationDate = MWInstallationViewModel.civilLoads.InstallationDate;
                                            TLIMWDish.legId = MWInstallationViewModel.installationConfig?.legId;
                                            TLIMWDish.ItemOnCivilStatus = MWInstallationViewModel.civilLoads.ItemOnCivilStatus;
                                            TLIMWDish.ItemStatus = MWInstallationViewModel.civilLoads?.ItemStatus;
                                            TLIMWDish.ReservedSpace = MWInstallationViewModel.civilLoads.ReservedSpace;
                                            _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, existingEntity, TLIMWDish);
                                            _unitOfWork.SaveChanges();
                                        }
                                        if (MWInstallationViewModel.dynamicAttribute != null ? MWInstallationViewModel.dynamicAttribute.Count() > 0 : false)
                                            _unitOfWork.DynamicAttInstValueRepository.UpdateDynamicValues(UserId, MWInstallationViewModel.dynamicAttribute, TableNameId, mwDish.Id, ConnectionString);



                                    }
                                    else if (MWInstallationViewModel.civilLoads.ReservedSpace == true && MWInstallationViewModel.civilLoads.ReservedSpace == false)
                                    {
                                        if (mwDish.CenterHigh <= 0)
                                        {
                                            if (mwDish.HBA_Surface <= 0)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HBA_Surface must bigger from zero", (int)ApiReturnCode.fail);
                                            }
                                            else if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter <= 0)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "CenterHigh must bigger from zero", (int)ApiReturnCode.fail);
                                            }
                                            else
                                            {
                                                mwDish.CenterHigh = mwDish.HBA + MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter / 2;
                                            }
                                        }
                                        if (mwDish.SpaceInstallation == 0)
                                        {

                                            if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.SpaceLibrary == 0)
                                            {
                                                if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter == 0)
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "SpaceInstallation must bigger from zero", (int)ApiReturnCode.fail);
                                                }
                                                mwDish.SpaceInstallation = Convert.ToSingle(3.14) * (float)Math.Pow(MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter / 2, 2);
                                            }
                                            else
                                            {
                                                mwDish.SpaceInstallation = MWDishInst.allLoadInst.mwDish.MwDishLibrary.SpaceLibrary;
                                            }
                                        }
                                        if (mwDish.Azimuth <= 0)
                                        {
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Azimuth must bigger from zero", (int)ApiReturnCode.fail);
                                        }
                                        if (mwDish.HeightBase <= 0)
                                        {
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HeightBase must bigger from zero", (int)ApiReturnCode.fail);
                                        }

                                        if (MWInstallationViewModel.installationConfig.sideArmId.Count() != 0 &&
                                            MWInstallationViewModel.installationConfig.sideArmId.Count() == 1)
                                        {
                                            List<MV_MWDISH_VIEW> Checkinstallationplace = _dbContext.MV_MWDISH_VIEW.Where(
                                                x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id
                                                && x.Id != mwDish.Id && (x.SideArmSec_Id == MWInstallationViewModel.installationConfig.sideArmId[0]
                                                || x.SideArmSec_Id == MWInstallationViewModel.installationConfig.sideArmId[0])).ToList();
                                            MV_MWDISH_VIEW CheckAzimuthAndHeightBase = Checkinstallationplace.FirstOrDefault(x => x.Azimuth == mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                                            if (CheckAzimuthAndHeightBase != null)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                                            }
                                            else if (Checkinstallationplace != null && Checkinstallationplace.Count >= 3)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                                            }
                                            else
                                            {
                                                var SideArmName1 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWInstallationViewModel.installationConfig.sideArmId[0]);
                                                if (SideArmName1 != null && mwDish.Azimuth > 0 && mwDish.HeightBase > 0)
                                                {
                                                    mwDish.DishName = SideArmName1?.Name + " " + mwDish.Azimuth + " " + mwDish.HeightBase;
                                                }
                                            }
                                        }
                                        if (MWInstallationViewModel.installationConfig.sideArmId.Count() != 0 &&
                                            MWInstallationViewModel.installationConfig.sideArmId.Count() == 2)
                                        {
                                            List<MV_MWDISH_VIEW> Checkinstallationplace2 = _dbContext.MV_MWDISH_VIEW.Where(
                                            x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id &&
                                            (x.SIDEARM_ID == MWInstallationViewModel.installationConfig.sideArmId[0] && x.SideArmSec_Id == MWInstallationViewModel.installationConfig.sideArmId[1])
                                            || (x.SIDEARM_ID == MWInstallationViewModel.installationConfig.sideArmId[1] && x.SideArmSec_Id == MWInstallationViewModel.installationConfig.sideArmId[0])).ToList();
                                            MV_MWDISH_VIEW CheckAzimuthAndHeightBase = Checkinstallationplace2.FirstOrDefault(x => x.Azimuth == mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                                            if (CheckAzimuthAndHeightBase != null)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                                            }
                                            else if (Checkinstallationplace2 != null && Checkinstallationplace2.Count >= 3)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                                            }
                                            else
                                            {
                                                var SideArmName1 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWInstallationViewModel.installationConfig.sideArmId[0]);
                                                var SideArmName2 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWInstallationViewModel.installationConfig.sideArmId[1]);
                                                if (SideArmName1 != null && SideArmName2 != null && mwDish.Azimuth > 0 && mwDish.HeightBase > 0)
                                                {
                                                    mwDish.DishName = SideArmName1?.Name + " " + SideArmName2?.Name + " " + mwDish.Azimuth + " " + mwDish.HeightBase;
                                                }
                                            }
                                        }

                                        var CheckName = _dbContext.MV_MWDISH_VIEW.FirstOrDefault(x => !x.Dismantle &&
                                                 (x.Id != null ? x.DishName.ToLower() == mwDish.DishName.ToLower() : false
                                                   && x.Id != mwDish.Id && x.SiteCode.ToLower() == MWDishInst.SiteCode.ToLower()));

                                        if (CheckName != null)
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The name {mwDish.DishName} is already exists", (int)Helpers.Constants.ApiReturnCode.fail);

                                        if (AllcivilinstId.allCivilInst.civilWithoutLeg?.CurrentLoads == null)
                                        {
                                            AllcivilinstId.allCivilInst.civilWithoutLeg.CurrentLoads = 0;
                                        }
                                        var OldVcivilinfo = _dbContext.TLIcivilWithoutLeg.AsNoTracking().FirstOrDefault(x => x.Id == AllcivilinstId.allCivilInst.civilWithoutLegId);
                                        if (OldVcivilinfo != null)
                                        {

                                            AllcivilinstId.allCivilInst.civilWithoutLeg.CurrentLoads = AllcivilinstId.allCivilInst.civilWithoutLeg.CurrentLoads - MWDishInst.allLoadInst.mwDish.EquivalentSpace;
                                            _unitOfWork.CivilWithoutLegRepository.UpdateWithHistory(UserId, OldVcivilinfo, AllcivilinstId.allCivilInst.civilWithoutLeg);
                                            _unitOfWork.SaveChanges();

                                        }
                                        if (mwDish?.ItemConnectToId != null)
                                        {
                                            TLIitemConnectTo ConnectedToEntity = _unitOfWork.ItemConnectToRepository.GetByID(mwDish.ItemConnectToId);
                                            if (ConnectedToEntity.Name.ToLower() == "farsitedish")
                                                if (string.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if dish connected to FarSiteDish", (int)ApiReturnCode.fail);
                                            if (ConnectedToEntity.Name.ToLower() == "farsitedish" && mwDish.RepeaterTypeId != null)
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not selected RepeaterType because selected itemconecctedto is farsitedish", (int)ApiReturnCode.fail);

                                            else if (ConnectedToEntity.Name.ToLower() == "repeater")
                                            {
                                                if (mwDish.RepeaterTypeId == null)
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type shouldn't be null", (int)ApiReturnCode.fail);
                                                }
                                                else
                                                {
                                                    TLIrepeaterType RepeaterTypeEntity = null;
                                                    if (mwDish.RepeaterTypeId != null)
                                                    {
                                                        RepeaterTypeEntity = _unitOfWork.RepeaterTypeRepository.GetWhereFirst(x => x.Id == mwDish.RepeaterTypeId);
                                                        if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() != "active" && RepeaterTypeEntity.Name.ToLower() != "passive")
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type should be active or passive", (int)ApiReturnCode.fail);
                                                        }
                                                        if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() == "active")
                                                        {
                                                            if (String.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                                                            {
                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if repeater type is active", (int)ApiReturnCode.fail);
                                                            }
                                                        }
                                                        else if (RepeaterTypeEntity.Name.ToLower() == "passive")
                                                        {
                                                            if (ConnectedToEntity.Name.ToLower() != "repeater" || RepeaterTypeEntity.Name.ToLower() != "passive")
                                                            {
                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "The dish should be connected to repeater and repeater type is passive", (int)ApiReturnCode.fail);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        mwDish.MwDishLibraryId = MWInstallationViewModel.civilType.MwDishLibraryId;
                                        mwDish.InstallationPlaceId = MWInstallationViewModel.installationConfig.InstallationPlaceId;
                                        _unitOfWork.MW_DishRepository.UpdateWithHistory(UserId, MWDishInst.allLoadInst.mwDish, mwDish);
                                        _unitOfWork.SaveChanges();
                                        if (MWInstallationViewModel.civilLoads != null)
                                        {

                                            var existingEntity = _unitOfWork.CivilLoadsRepository
                                                .GetAllAsQueryable()
                                                .AsNoTracking()
                                                .FirstOrDefault(x => x.allLoadInstId != null && x.allLoadInst.mwDishId == mwDish.Id && !x.Dismantle);


                                            TLIcivilLoads TLIMWDish = _dbContext.TLIcivilLoads.Include(x => x.allLoadInst).ThenInclude(x => x.mwDish).ThenInclude(x => x.MwDishLibrary)
                                          .FirstOrDefault(x => x.allLoadInstId != null && !x.Dismantle && x.allLoadInst.mwDishId
                                              == MWInstallationViewModel.installationAttributes.Id);



                                            TLIMWDish.allCivilInstId = AllcivilinstId.allCivilInst.Id;
                                            TLIMWDish.InstallationDate = MWInstallationViewModel.civilLoads.InstallationDate;
                                            TLIMWDish.legId = MWInstallationViewModel.installationConfig?.legId;
                                            TLIMWDish.ItemOnCivilStatus = MWInstallationViewModel.civilLoads.ItemOnCivilStatus;
                                            TLIMWDish.ItemStatus = MWInstallationViewModel.civilLoads?.ItemStatus;
                                            TLIMWDish.ReservedSpace = MWInstallationViewModel.civilLoads.ReservedSpace;
                                            _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, existingEntity, TLIMWDish);
                                            _unitOfWork.SaveChanges();
                                        }
                                        if (MWInstallationViewModel.dynamicAttribute != null ? MWInstallationViewModel.dynamicAttribute.Count() > 0 : false)
                                            _unitOfWork.DynamicAttInstValueRepository.UpdateDynamicValues(UserId, MWInstallationViewModel.dynamicAttribute, TableNameId, mwDish.Id, ConnectionString);


                                    }
                                    else if (MWInstallationViewModel.civilLoads.ReservedSpace == false && MWInstallationViewModel.civilLoads.ReservedSpace == true)
                                    {

                                        if (mwDish.CenterHigh <= 0)
                                        {
                                            if (mwDish.HBA_Surface <= 0)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HBA_Surface must bigger from zero", (int)ApiReturnCode.fail);
                                            }
                                            else if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter <= 0)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "CenterHigh must bigger from zero", (int)ApiReturnCode.fail);
                                            }
                                            else
                                            {
                                                mwDish.CenterHigh = mwDish.HBA + MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter / 2;
                                            }
                                        }
                                        if (mwDish.SpaceInstallation == 0)
                                        {

                                            if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.SpaceLibrary == 0)
                                            {
                                                if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter == 0)
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "SpaceInstallation must bigger from zero", (int)ApiReturnCode.fail);
                                                }
                                                mwDish.SpaceInstallation = Convert.ToSingle(3.14) * (float)Math.Pow(MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter / 2, 2);
                                            }
                                            else
                                            {
                                                mwDish.SpaceInstallation = MWDishInst.allLoadInst.mwDish.MwDishLibrary.SpaceLibrary;
                                            }
                                        }
                                        if (mwDish.Azimuth <= 0)
                                        {
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Azimuth must bigger from zero", (int)ApiReturnCode.fail);
                                        }
                                        if (mwDish.HeightBase <= 0)
                                        {
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HeightBase must bigger from zero", (int)ApiReturnCode.fail);
                                        }

                                        if (MWInstallationViewModel.installationConfig.sideArmId.Count() != 0 &&
                                            MWInstallationViewModel.installationConfig.sideArmId.Count() == 1)
                                        {
                                            List<MV_MWDISH_VIEW> Checkinstallationplace = _dbContext.MV_MWDISH_VIEW.Where(
                                                x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id
                                                && x.Id != mwDish.Id && (x.SideArmSec_Id == MWInstallationViewModel.installationConfig.sideArmId[0]
                                                || x.SideArmSec_Id == MWInstallationViewModel.installationConfig.sideArmId[0])).ToList();
                                            MV_MWDISH_VIEW CheckAzimuthAndHeightBase = Checkinstallationplace.FirstOrDefault(x => x.Azimuth == mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                                            if (CheckAzimuthAndHeightBase != null)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                                            }
                                            else if (Checkinstallationplace != null && Checkinstallationplace.Count >= 3)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                                            }
                                            else
                                            {
                                                var SideArmName1 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWInstallationViewModel.installationConfig.sideArmId[0]);
                                                if (SideArmName1 != null && mwDish.Azimuth > 0 && mwDish.HeightBase > 0)
                                                {
                                                    mwDish.DishName = SideArmName1?.Name + " " + mwDish.Azimuth + " " + mwDish.HeightBase;
                                                }
                                            }
                                        }
                                        if (MWInstallationViewModel.installationConfig.sideArmId.Count() != 0 &&
                                            MWInstallationViewModel.installationConfig.sideArmId.Count() == 2)
                                        {
                                            List<MV_MWDISH_VIEW> Checkinstallationplace2 = _dbContext.MV_MWDISH_VIEW.Where(
                                            x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id &&
                                            (x.SIDEARM_ID == MWInstallationViewModel.installationConfig.sideArmId[0] && x.SideArmSec_Id == MWInstallationViewModel.installationConfig.sideArmId[1])
                                            || (x.SIDEARM_ID == MWInstallationViewModel.installationConfig.sideArmId[1] && x.SideArmSec_Id == MWInstallationViewModel.installationConfig.sideArmId[0])).ToList();
                                            MV_MWDISH_VIEW CheckAzimuthAndHeightBase = Checkinstallationplace2.FirstOrDefault(x => x.Azimuth == mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                                            if (CheckAzimuthAndHeightBase != null)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                                            }
                                            else if (Checkinstallationplace2 != null && Checkinstallationplace2.Count >= 3)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                                            }
                                            else
                                            {
                                                var SideArmName1 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWInstallationViewModel.installationConfig.sideArmId[0]);
                                                var SideArmName2 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWInstallationViewModel.installationConfig.sideArmId[1]);
                                                if (SideArmName1 != null && SideArmName2 != null && mwDish.Azimuth > 0 && mwDish.HeightBase > 0)
                                                {
                                                    mwDish.DishName = SideArmName1?.Name + " " + SideArmName2?.Name + " " + mwDish.Azimuth + " " + mwDish.HeightBase;
                                                }
                                            }
                                        }

                                        var CheckName = _dbContext.MV_MWDISH_VIEW.FirstOrDefault(x => !x.Dismantle &&
                                                 (x.Id != null ? x.DishName.ToLower() == mwDish.DishName.ToLower() : false
                                                   && x.Id != mwDish.Id && x.SiteCode.ToLower() == MWDishInst.SiteCode.ToLower()));

                                        if (CheckName != null)
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The name {mwDish.DishName} is already exists", (int)Helpers.Constants.ApiReturnCode.fail);

                                        if (AllcivilinstId.allCivilInst.civilWithoutLeg?.CurrentLoads == null)
                                        {
                                            AllcivilinstId.allCivilInst.civilWithoutLeg.CurrentLoads = 0;
                                        }
                                        var OldVcivilinfo = _dbContext.TLIcivilWithoutLeg.AsNoTracking().FirstOrDefault(x => x.Id == AllcivilinstId.allCivilInst.civilWithoutLegId);
                                        if (OldVcivilinfo != null)
                                        {
                                            var EquivalentSpace = mwDish.SpaceInstallation * (mwDish.CenterHigh / (float)AllcivilinstId.allCivilInst.civilWithoutLeg.HeightBase);
                                            AllcivilinstId.allCivilInst.civilWithoutLeg.CurrentLoads += EquivalentSpace;
                                            mwDish.EquivalentSpace = EquivalentSpace;
                                            _unitOfWork.CivilWithoutLegRepository.UpdateWithHistory(UserId, OldVcivilinfo, AllcivilinstId.allCivilInst.civilWithoutLeg);
                                            _unitOfWork.SaveChanges();
                                        }
                                        if (mwDish?.ItemConnectToId != null)
                                        {
                                            TLIitemConnectTo ConnectedToEntity = _unitOfWork.ItemConnectToRepository.GetByID(mwDish.ItemConnectToId);
                                            if (ConnectedToEntity.Name.ToLower() == "farsitedish")
                                                if (string.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if dish connected to FarSiteDish", (int)ApiReturnCode.fail);
                                            if (ConnectedToEntity.Name.ToLower() == "farsitedish" && mwDish.RepeaterTypeId != null)
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not selected RepeaterType because selected itemconecctedto is farsitedish", (int)ApiReturnCode.fail);

                                            else if (ConnectedToEntity.Name.ToLower() == "repeater")
                                            {
                                                if (mwDish.RepeaterTypeId == null)
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type shouldn't be null", (int)ApiReturnCode.fail);
                                                }
                                                else
                                                {
                                                    TLIrepeaterType RepeaterTypeEntity = null;
                                                    if (mwDish.RepeaterTypeId != null)
                                                    {
                                                        RepeaterTypeEntity = _unitOfWork.RepeaterTypeRepository.GetWhereFirst(x => x.Id == mwDish.RepeaterTypeId);
                                                        if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() != "active" && RepeaterTypeEntity.Name.ToLower() != "passive")
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type should be active or passive", (int)ApiReturnCode.fail);
                                                        }
                                                        if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() == "active")
                                                        {
                                                            if (String.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                                                            {
                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if repeater type is active", (int)ApiReturnCode.fail);
                                                            }
                                                        }
                                                        else if (RepeaterTypeEntity.Name.ToLower() == "passive")
                                                        {
                                                            if (ConnectedToEntity.Name.ToLower() != "repeater" || RepeaterTypeEntity.Name.ToLower() != "passive")
                                                            {
                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "The dish should be connected to repeater and repeater type is passive", (int)ApiReturnCode.fail);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        mwDish.MwDishLibraryId = MWInstallationViewModel.civilType.MwDishLibraryId;
                                        mwDish.InstallationPlaceId = MWInstallationViewModel.installationConfig.InstallationPlaceId;
                                        _unitOfWork.MW_DishRepository.UpdateWithHistory(UserId, MWDishInst.allLoadInst.mwDish, mwDish);
                                        _unitOfWork.SaveChanges();
                                        if (MWInstallationViewModel.civilLoads != null)
                                        {

                                            var existingEntity = _unitOfWork.CivilLoadsRepository
                                                .GetAllAsQueryable()
                                                .AsNoTracking()
                                                .FirstOrDefault(x => x.allLoadInstId != null && x.allLoadInst.mwDishId == mwDish.Id && !x.Dismantle);


                                            TLIcivilLoads TLIMWDish = _dbContext.TLIcivilLoads.Include(x => x.allLoadInst).ThenInclude(x => x.mwDish).ThenInclude(x => x.MwDishLibrary)
                                          .FirstOrDefault(x => x.allLoadInstId != null && !x.Dismantle && x.allLoadInst.mwDishId
                                              == MWInstallationViewModel.installationAttributes.Id);



                                            TLIMWDish.allCivilInstId = AllcivilinstId.allCivilInst.Id;
                                            TLIMWDish.InstallationDate = MWInstallationViewModel.civilLoads.InstallationDate;
                                            TLIMWDish.legId = MWInstallationViewModel.installationConfig?.legId;
                                            TLIMWDish.ItemOnCivilStatus = MWInstallationViewModel.civilLoads.ItemOnCivilStatus;
                                            TLIMWDish.ItemStatus = MWInstallationViewModel.civilLoads?.ItemStatus;
                                            TLIMWDish.ReservedSpace = MWInstallationViewModel.civilLoads.ReservedSpace;
                                            _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, existingEntity, TLIMWDish);
                                            _unitOfWork.SaveChanges();
                                        }
                                        if (MWInstallationViewModel.dynamicAttribute != null ? MWInstallationViewModel.dynamicAttribute.Count() > 0 : false)
                                            _unitOfWork.DynamicAttInstValueRepository.UpdateDynamicValues(UserId, MWInstallationViewModel.dynamicAttribute, TableNameId, mwDish.Id, ConnectionString);



                                    }
                                    else if (MWInstallationViewModel.civilLoads.ReservedSpace == false && MWInstallationViewModel.civilLoads.ReservedSpace == false)
                                    {

                                        if (mwDish.CenterHigh <= 0)
                                        {
                                            if (mwDish.HBA_Surface <= 0)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HBA_Surface must bigger from zero", (int)ApiReturnCode.fail);
                                            }
                                            else if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter <= 0)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "CenterHigh must bigger from zero", (int)ApiReturnCode.fail);
                                            }
                                            else
                                            {
                                                mwDish.CenterHigh = mwDish.HBA + MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter / 2;
                                            }
                                        }
                                        if (mwDish.SpaceInstallation == 0)
                                        {

                                            if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.SpaceLibrary == 0)
                                            {
                                                if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter == 0)
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "SpaceInstallation must bigger from zero", (int)ApiReturnCode.fail);
                                                }
                                                mwDish.SpaceInstallation = Convert.ToSingle(3.14) * (float)Math.Pow(MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter / 2, 2);
                                            }
                                            else
                                            {
                                                mwDish.SpaceInstallation = MWDishInst.allLoadInst.mwDish.MwDishLibrary.SpaceLibrary;
                                            }
                                        }
                                        if (mwDish.Azimuth <= 0)
                                        {
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Azimuth must bigger from zero", (int)ApiReturnCode.fail);
                                        }
                                        if (mwDish.HeightBase <= 0)
                                        {
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HeightBase must bigger from zero", (int)ApiReturnCode.fail);
                                        }

                                        if (MWInstallationViewModel.installationConfig.sideArmId.Count() != 0 &&
                                            MWInstallationViewModel.installationConfig.sideArmId.Count() == 1)
                                        {
                                            List<MV_MWDISH_VIEW> Checkinstallationplace = _dbContext.MV_MWDISH_VIEW.Where(
                                                x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id
                                                && x.Id != mwDish.Id && (x.SideArmSec_Id == MWInstallationViewModel.installationConfig.sideArmId[0]
                                                || x.SideArmSec_Id == MWInstallationViewModel.installationConfig.sideArmId[0])).ToList();
                                            MV_MWDISH_VIEW CheckAzimuthAndHeightBase = Checkinstallationplace.FirstOrDefault(x => x.Azimuth == mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                                            if (CheckAzimuthAndHeightBase != null)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                                            }
                                            else if (Checkinstallationplace != null && Checkinstallationplace.Count >= 3)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                                            }
                                            else
                                            {
                                                var SideArmName1 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWInstallationViewModel.installationConfig.sideArmId[0]);
                                                if (SideArmName1 != null && mwDish.Azimuth > 0 && mwDish.HeightBase > 0)
                                                {
                                                    mwDish.DishName = SideArmName1?.Name + " " + mwDish.Azimuth + " " + mwDish.HeightBase;
                                                }
                                            }
                                        }
                                        if (MWInstallationViewModel.installationConfig.sideArmId.Count() != 0 &&
                                            MWInstallationViewModel.installationConfig.sideArmId.Count() == 2)
                                        {
                                            List<MV_MWDISH_VIEW> Checkinstallationplace2 = _dbContext.MV_MWDISH_VIEW.Where(
                                            x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id &&
                                            (x.SIDEARM_ID == MWInstallationViewModel.installationConfig.sideArmId[0] && x.SideArmSec_Id == MWInstallationViewModel.installationConfig.sideArmId[1])
                                            || (x.SIDEARM_ID == MWInstallationViewModel.installationConfig.sideArmId[1] && x.SideArmSec_Id == MWInstallationViewModel.installationConfig.sideArmId[0])).ToList();
                                            MV_MWDISH_VIEW CheckAzimuthAndHeightBase = Checkinstallationplace2.FirstOrDefault(x => x.Azimuth == mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                                            if (CheckAzimuthAndHeightBase != null)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                                            }
                                            else if (Checkinstallationplace2 != null && Checkinstallationplace2.Count >= 3)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                                            }
                                            else
                                            {
                                                var SideArmName1 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWInstallationViewModel.installationConfig.sideArmId[0]);
                                                var SideArmName2 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWInstallationViewModel.installationConfig.sideArmId[1]);
                                                if (SideArmName1 != null && SideArmName2 != null && mwDish.Azimuth > 0 && mwDish.HeightBase > 0)
                                                {
                                                    mwDish.DishName = SideArmName1?.Name + " " + SideArmName2?.Name + " " + mwDish.Azimuth + " " + mwDish.HeightBase;
                                                }
                                            }
                                        }

                                        var CheckName = _dbContext.MV_MWDISH_VIEW.FirstOrDefault(x => !x.Dismantle &&
                                                 (x.Id != null ? x.DishName.ToLower() == mwDish.DishName.ToLower() : false
                                                   && x.Id != mwDish.Id && x.SiteCode.ToLower() == MWDishInst.SiteCode.ToLower()));

                                        if (CheckName != null)
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The name {mwDish.DishName} is already exists", (int)Helpers.Constants.ApiReturnCode.fail);
                                        if (mwDish?.ItemConnectToId != null)
                                        {
                                            TLIitemConnectTo ConnectedToEntity = _unitOfWork.ItemConnectToRepository.GetByID(mwDish.ItemConnectToId);
                                            if (ConnectedToEntity.Name.ToLower() == "farsitedish")
                                                if (string.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if dish connected to FarSiteDish", (int)ApiReturnCode.fail);
                                            if (ConnectedToEntity.Name.ToLower() == "farsitedish" && mwDish.RepeaterTypeId != null)
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not selected RepeaterType because selected itemconecctedto is farsitedish", (int)ApiReturnCode.fail);

                                            else if (ConnectedToEntity.Name.ToLower() == "repeater")
                                            {
                                                if (mwDish.RepeaterTypeId == null)
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type shouldn't be null", (int)ApiReturnCode.fail);
                                                }
                                                else
                                                {
                                                    TLIrepeaterType RepeaterTypeEntity = null;
                                                    if (mwDish.RepeaterTypeId != null)
                                                    {
                                                        RepeaterTypeEntity = _unitOfWork.RepeaterTypeRepository.GetWhereFirst(x => x.Id == mwDish.RepeaterTypeId);
                                                        if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() != "active" && RepeaterTypeEntity.Name.ToLower() != "passive")
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type should be active or passive", (int)ApiReturnCode.fail);
                                                        }
                                                        if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() == "active")
                                                        {
                                                            if (String.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                                                            {
                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if repeater type is active", (int)ApiReturnCode.fail);
                                                            }
                                                        }
                                                        else if (RepeaterTypeEntity.Name.ToLower() == "passive")
                                                        {
                                                            if (ConnectedToEntity.Name.ToLower() != "repeater" || RepeaterTypeEntity.Name.ToLower() != "passive")
                                                            {
                                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "The dish should be connected to repeater and repeater type is passive", (int)ApiReturnCode.fail);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        mwDish.MwDishLibraryId = MWInstallationViewModel.civilType.MwDishLibraryId;
                                        mwDish.InstallationPlaceId = MWInstallationViewModel.installationConfig.InstallationPlaceId;
                                        _unitOfWork.MW_DishRepository.UpdateWithHistory(UserId, MWDishInst.allLoadInst.mwDish, mwDish);
                                        _unitOfWork.SaveChanges();
                                        if (MWInstallationViewModel.civilLoads != null)
                                        {

                                            var existingEntity = _unitOfWork.CivilLoadsRepository
                                                .GetAllAsQueryable()
                                                .AsNoTracking()
                                                .FirstOrDefault(x => x.allLoadInstId != null && x.allLoadInst.mwDishId == mwDish.Id && !x.Dismantle);


                                            TLIcivilLoads TLIMWDish = _dbContext.TLIcivilLoads.Include(x => x.allLoadInst).ThenInclude(x => x.mwDish).ThenInclude(x => x.MwDishLibrary)
                                          .FirstOrDefault(x => x.allLoadInstId != null && !x.Dismantle && x.allLoadInst.mwDishId
                                              == MWInstallationViewModel.installationAttributes.Id);



                                            TLIMWDish.allCivilInstId = AllcivilinstId.allCivilInst.Id;
                                            TLIMWDish.InstallationDate = MWInstallationViewModel.civilLoads.InstallationDate;
                                            TLIMWDish.legId = MWInstallationViewModel.installationConfig?.legId;
                                            TLIMWDish.ItemOnCivilStatus = MWInstallationViewModel.civilLoads.ItemOnCivilStatus;
                                            TLIMWDish.ItemStatus = MWInstallationViewModel.civilLoads?.ItemStatus;
                                            TLIMWDish.ReservedSpace = MWInstallationViewModel.civilLoads.ReservedSpace;
                                            _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, existingEntity, TLIMWDish);
                                            _unitOfWork.SaveChanges();
                                        }
                                        if (MWInstallationViewModel.dynamicAttribute != null ? MWInstallationViewModel.dynamicAttribute.Count() > 0 : false)
                                            _unitOfWork.DynamicAttInstValueRepository.UpdateDynamicValues(UserId, MWInstallationViewModel.dynamicAttribute, TableNameId, mwDish.Id, ConnectionString);
                                    }
                                    else
                                    {
                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "this civil is not found ", (int)ApiReturnCode.fail);
                                    }
                                }
                                else
                                {
                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "this civil is not found ", (int)ApiReturnCode.fail);
                                }

                            }
                            else
                            {
                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "must selected sideArm ", (int)ApiReturnCode.fail);
                            }
                        }
                        if (MWInstallationViewModel.installationConfig.civilNonSteelId != null)
                        { 
                            if (MWInstallationViewModel.installationConfig.sideArmId != null)
                            {
                                if (!string.IsNullOrEmpty(mwDish.Serial_Number))
                                {
                                    bool CheckSerialNumber = _dbContext.MV_MWDISH_VIEW.Any(x => x.Serial_Number == mwDish.Serial_Number && x.Id != mwDish.Id && !x.Dismantle);
                                    if (CheckSerialNumber)
                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The Serial Number {mwDish.Serial_Number} is already exists", (int)ApiReturnCode.fail);
                                }
                                TLIcivilSiteDate AllcivilinstId = _unitOfWork.CivilSiteDateRepository.GetAllAsQueryable().AsNoTracking().
                                Include(x => x.allCivilInst).Include(x => x.allCivilInst.civilWithLegs).Include(x => x.allCivilInst.civilWithoutLeg)
                                .Include(x => x.allCivilInst.civilNonSteel).Include(x => x.allCivilInst.civilWithoutLeg.CivilWithoutlegsLib)
                               .Include(x => x.allCivilInst.civilWithLegs.CivilWithLegsLib).Include(x => x.allCivilInst.civilNonSteel.CivilNonsteelLibrary)
                               .FirstOrDefault(x => x.allCivilInst.civilNonSteelId ==
                                MWInstallationViewModel.installationConfig.civilNonSteelId && !x.Dismantle);
                                if (AllcivilinstId != null)
                                {
                                    if (mwDish.CenterHigh <= 0)
                                    {
                                        if (mwDish.HBA_Surface <= 0)
                                        {
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HBA_Surface must bigger from zero", (int)ApiReturnCode.fail);
                                        }
                                        else if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter <= 0)
                                        {
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "CenterHigh must bigger from zero", (int)ApiReturnCode.fail);
                                        }
                                        else
                                        {
                                            mwDish.CenterHigh = mwDish.HBA + MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter / 2;
                                        }
                                    }
                                    if (mwDish.SpaceInstallation == 0)
                                    {

                                        if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.SpaceLibrary == 0)
                                        {
                                            if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter == 0)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "SpaceInstallation must bigger from zero", (int)ApiReturnCode.fail);
                                            }
                                            mwDish.SpaceInstallation = Convert.ToSingle(3.14) * (float)Math.Pow(MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter / 2, 2);
                                        }
                                        else
                                        {
                                            mwDish.SpaceInstallation = MWDishInst.allLoadInst.mwDish.MwDishLibrary.SpaceLibrary;
                                        }
                                    }
                                    if (mwDish.Azimuth <= 0)
                                    {
                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Azimuth must bigger from zero", (int)ApiReturnCode.fail);
                                    }
                                    if (mwDish.HeightBase <= 0)
                                    {
                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HeightBase must bigger from zero", (int)ApiReturnCode.fail);
                                    }
                                    if (MWInstallationViewModel.installationConfig.sideArmId.Count() != 0 &&
                                        MWInstallationViewModel.installationConfig.sideArmId.Count() == 1)
                                    {
                                        List<MV_MWDISH_VIEW> Checkinstallationplace = _dbContext.MV_MWDISH_VIEW.Where(
                                            x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id
                                            && x.Id != mwDish.Id && (x.SideArmSec_Id == MWInstallationViewModel.installationConfig.sideArmId[0]
                                            || x.SideArmSec_Id == MWInstallationViewModel.installationConfig.sideArmId[0])).ToList();
                                        MV_MWDISH_VIEW CheckAzimuthAndHeightBase = Checkinstallationplace.FirstOrDefault(x => x.Azimuth == mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                                        if (CheckAzimuthAndHeightBase != null)
                                        {
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                                        }
                                        else if (Checkinstallationplace != null && Checkinstallationplace.Count >= 3)
                                        {
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                                        }
                                        else
                                        {
                                            var SideArmName1 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWInstallationViewModel.installationConfig.sideArmId[0]);
                                            if (SideArmName1 != null && mwDish.Azimuth > 0 && mwDish.HeightBase > 0)
                                            {
                                                mwDish.DishName = SideArmName1?.Name + " " + mwDish.Azimuth + " " + mwDish.HeightBase;
                                            }
                                        }
                                    }
                                    if (MWInstallationViewModel.installationConfig.sideArmId.Count() != 0 &&
                                        MWInstallationViewModel.installationConfig.sideArmId.Count() == 2)
                                    {
                                        List<MV_MWDISH_VIEW> Checkinstallationplace2 = _dbContext.MV_MWDISH_VIEW.Where(
                                        x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id &&
                                        (x.SIDEARM_ID == MWInstallationViewModel.installationConfig.sideArmId[0] && x.SideArmSec_Id == MWInstallationViewModel.installationConfig.sideArmId[1])
                                        || (x.SIDEARM_ID == MWInstallationViewModel.installationConfig.sideArmId[1] && x.SideArmSec_Id == MWInstallationViewModel.installationConfig.sideArmId[0])).ToList();
                                        MV_MWDISH_VIEW CheckAzimuthAndHeightBase = Checkinstallationplace2.FirstOrDefault(x => x.Azimuth == mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                                        if (CheckAzimuthAndHeightBase != null)
                                        {
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                                        }
                                        else if (Checkinstallationplace2 != null && Checkinstallationplace2.Count >= 3)
                                        {
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                                        }
                                        else
                                        {
                                            var SideArmName1 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWInstallationViewModel.installationConfig.sideArmId[0]);
                                            var SideArmName2 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWInstallationViewModel.installationConfig.sideArmId[1]);
                                            if (SideArmName1 != null && SideArmName2 != null && mwDish.Azimuth > 0 && mwDish.HeightBase > 0)
                                            {
                                                mwDish.DishName = SideArmName1?.Name + " " + SideArmName2?.Name + " " + mwDish.Azimuth + " " + mwDish.HeightBase;
                                            }
                                        }
                                    }

                                    var CheckName = _dbContext.MV_MWDISH_VIEW.FirstOrDefault(x => !x.Dismantle &&
                                             (x.Id != null ? x.DishName.ToLower() == mwDish.DishName.ToLower() : false
                                               && x.Id != mwDish.Id && x.SiteCode.ToLower() == MWDishInst.SiteCode.ToLower()));

                                    if (CheckName != null)
                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The name {mwDish.DishName} is already exists", (int)Helpers.Constants.ApiReturnCode.fail);
                                    if (mwDish?.ItemConnectToId != null)
                                    {
                                        TLIitemConnectTo ConnectedToEntity = _unitOfWork.ItemConnectToRepository.GetByID(mwDish.ItemConnectToId);
                                        if (ConnectedToEntity.Name.ToLower() == "farsitedish")
                                            if (string.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if dish connected to FarSiteDish", (int)ApiReturnCode.fail);
                                        if (ConnectedToEntity.Name.ToLower() == "farsitedish" && mwDish.RepeaterTypeId != null)
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not selected RepeaterType because selected itemconecctedto is farsitedish", (int)ApiReturnCode.fail);

                                        else if (ConnectedToEntity.Name.ToLower() == "repeater")
                                        {
                                            if (mwDish.RepeaterTypeId == null)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type shouldn't be null", (int)ApiReturnCode.fail);
                                            }
                                            else
                                            {
                                                TLIrepeaterType RepeaterTypeEntity = null;
                                                if (mwDish.RepeaterTypeId != null)
                                                {
                                                    RepeaterTypeEntity = _unitOfWork.RepeaterTypeRepository.GetWhereFirst(x => x.Id == mwDish.RepeaterTypeId);
                                                    if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() != "active" && RepeaterTypeEntity.Name.ToLower() != "passive")
                                                    {
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type should be active or passive", (int)ApiReturnCode.fail);
                                                    }
                                                    if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() == "active")
                                                    {
                                                        if (String.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if repeater type is active", (int)ApiReturnCode.fail);
                                                        }
                                                    }
                                                    else if (RepeaterTypeEntity.Name.ToLower() == "passive")
                                                    {
                                                        if (ConnectedToEntity.Name.ToLower() != "repeater" || RepeaterTypeEntity.Name.ToLower() != "passive")
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "The dish should be connected to repeater and repeater type is passive", (int)ApiReturnCode.fail);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    mwDish.MwDishLibraryId = MWInstallationViewModel.civilType.MwDishLibraryId;
                                    mwDish.InstallationPlaceId = MWInstallationViewModel.installationConfig.InstallationPlaceId;
                                    _unitOfWork.MW_DishRepository.UpdateWithHistory(UserId, MWDishInst.allLoadInst.mwDish, mwDish);
                                    _unitOfWork.SaveChanges();
                                    if (MWInstallationViewModel.civilLoads != null)
                                    {

                                        var existingEntity = _unitOfWork.CivilLoadsRepository
                                            .GetAllAsQueryable()
                                            .AsNoTracking()
                                            .FirstOrDefault(x => x.allLoadInstId != null && x.allLoadInst.mwDishId == mwDish.Id && !x.Dismantle);


                                        TLIcivilLoads TLIMWDish = _dbContext.TLIcivilLoads.Include(x => x.allLoadInst).ThenInclude(x => x.mwDish).ThenInclude(x => x.MwDishLibrary)
                                      .FirstOrDefault(x => x.allLoadInstId != null && !x.Dismantle && x.allLoadInst.mwDishId
                                          == MWInstallationViewModel.installationAttributes.Id);



                                        TLIMWDish.allCivilInstId = AllcivilinstId.allCivilInst.Id;
                                        TLIMWDish.InstallationDate = MWInstallationViewModel.civilLoads.InstallationDate;
                                        TLIMWDish.legId = MWInstallationViewModel.installationConfig?.legId;
                                        TLIMWDish.ItemOnCivilStatus = MWInstallationViewModel.civilLoads.ItemOnCivilStatus;
                                        TLIMWDish.ItemStatus = MWInstallationViewModel.civilLoads?.ItemStatus;
                                        TLIMWDish.ReservedSpace = MWInstallationViewModel.civilLoads.ReservedSpace;
                                        _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, existingEntity, TLIMWDish);
                                        _unitOfWork.SaveChanges();
                                    }
                                    if (MWInstallationViewModel.dynamicAttribute != null ? MWInstallationViewModel.dynamicAttribute.Count() > 0 : false)
                                        _unitOfWork.DynamicAttInstValueRepository.UpdateDynamicValues(UserId, MWInstallationViewModel.dynamicAttribute, TableNameId, mwDish.Id, ConnectionString);

                                }
                                else
                                {
                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "this civil is not found ", (int)ApiReturnCode.fail);
                                }
                            }
                            else
                            {
                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "must selected sideArm ", (int)ApiReturnCode.fail);
                            }
                        }
                    }
                    if (TaskId != null)
                    {
                        var Submit = _unitOfWork.SiteRepository.SubmitTaskByTLI(TaskId);
                        var result = Submit.Result;
                        if (result.result == true && result.errorMessage == null)
                        {
                            _unitOfWork.SaveChanges();
                            transactionScope.Complete();
                        }
                        else
                        {
                            transactionScope.Dispose();
                            return new Response<GetForAddMWDishInstallationObject>(true, null, null, result.errorMessage.ToString(), (int)ApiReturnCode.fail);
                        }
                    }
                    else
                    {
                        _unitOfWork.SaveChanges();
                        transactionScope.Complete();
                    }
                    Task.Run(() => _unitOfWork.CivilWithLegsRepository.RefreshView(ConnectionString, "MV_MWDISH_VIEW"));
                    return new Response<GetForAddMWDishInstallationObject>();
                }
                catch (Exception err)
                {
                    return new Response<GetForAddMWDishInstallationObject>(true, null, null, err.Message, (int)ApiReturnCode.fail);
                }
            }
        }

        public async Task<Response<GetForAddMWDishInstallationObject>> EditMWODUInstallation(int UserId, EditMWODUInstallationObject MWInstallationViewModel, string TableName, int? TaskId, string ConnectionString)
        {
            using (var transactionScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
            {
                try
                {
                    int TableNameId = 0;

                    TableNameId = _unitOfWork.TablesNamesRepository.GetWhereFirst(x => x.TableName.ToLower() == TablesNames.TLImwDish.ToString().ToLower()).Id;
                    TLIcivilLoads TLIMWODU = _dbContext.TLIcivilLoads.AsNoTracking()
                    .Include(x => x.allLoadInst).ThenInclude(x => x.mwODU).ThenInclude(x => x.MwODULibrary)
                    .FirstOrDefault(x => x.allLoadInstId != null && !x.Dismantle && x.allLoadInst.mwODUId
                        == MWInstallationViewModel.installationAttributes.Id);
                    if (TLIMWODU == null)
                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"This item is not found", (int)ApiReturnCode.fail);

                    TLImwODU mwODU = _mapper.Map<TLImwODU>(MWInstallationViewModel.installationAttributes);
                    if (MWInstallationViewModel.installationConfig.InstallationPlaceId == 1)
                    {
                        if (MWInstallationViewModel.installationConfig.civilSteelType == 0)
                        {
                            if (MWInstallationViewModel.installationConfig.civilWithLegId != null)
                            {
                                TLIcivilLoads CivilFound = _unitOfWork.CivilLoadsRepository.GetWhereFirst(x => !x.Dismantle
                                && x.allCivilInst.civilWithLegsId == MWInstallationViewModel.installationConfig.civilWithLegId && x.SiteCode.ToLower() == TLIMWODU.SiteCode.ToLower());
                                if (CivilFound == null)
                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Civil is not found", (int)ApiReturnCode.fail);
                                     
                                if(MWInstallationViewModel.installationConfig.sideArmId !=null)
                                      return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"can not selected sidearm because installation place is direct", (int)ApiReturnCode.fail);

                                if (MWInstallationViewModel.installationConfig?.mwDishId != null)
                                {
                                    if (!string.IsNullOrEmpty(mwODU.Serial_Number))
                                    {
                                        bool CheckSerialNumber = _dbContext.MV_MWODU_VIEW.Any(x => x.Serial_Number == mwODU.Serial_Number && x.Id != mwODU.Id && !x.Dismantle);
                                        if (CheckSerialNumber)
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The Serial Number {mwODU.Serial_Number} is already exists", (int)ApiReturnCode.fail);
                                    }
                                    if (MWInstallationViewModel.installationConfig?.LegId != null)
                                    {
                                        TLIcivilLoads tLImwDishLeg = _unitOfWork.CivilLoadsRepository.GetAllAsQueryable().AsNoTracking()
                                       .Include(x => x.allLoadInst).ThenInclude(x => x.mwDish).ThenInclude(x => x.MwDishLibrary)
                                       .ThenInclude(x => x.polarityType).Include(x => x.allCivilInst).ThenInclude(x => x.civilWithLegs).FirstOrDefault(x => x.allLoadInstId != null
                                       && !x.Dismantle && x.allLoadInst.mwDishId == MWInstallationViewModel.installationConfig.mwDishId
                                       && x.allCivilInst.civilWithLegsId == MWInstallationViewModel.installationConfig.civilWithLegId && x.legId == MWInstallationViewModel.installationConfig.LegId
                                       && x.SiteCode.ToLower() == TLIMWODU.SiteCode.ToLower());
                                        if (tLImwDishLeg == null)
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "MWDish is not found", (int)ApiReturnCode.fail);

                                    }
                                    TLIcivilLoads tLImwDish = _unitOfWork.CivilLoadsRepository.GetAllAsQueryable().AsNoTracking()
                                    .Include(x => x.allLoadInst).ThenInclude(x => x.mwDish).ThenInclude(x => x.MwDishLibrary)
                                    .ThenInclude(x => x.polarityType).Include(x => x.allCivilInst).ThenInclude(x => x.civilWithLegs).FirstOrDefault(x => x.allLoadInstId != null
                                    && !x.Dismantle && x.allLoadInst.mwDishId == MWInstallationViewModel.installationConfig.mwDishId
                                    && x.allCivilInst.civilWithLegsId == MWInstallationViewModel.installationConfig.civilWithLegId &&
                                    x.SiteCode.ToLower() == TLIMWODU.SiteCode.ToLower());

                                    if (tLImwDish == null)
                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "MWDish is not found", (int)ApiReturnCode.fail);
                                    List<TLIcivilLoads> tLImwDishCount = _unitOfWork.CivilLoadsRepository.GetAllAsQueryable().AsNoTracking()
                                    .Where(x => x.allLoadInstId != null && !x.Dismantle && x.allLoadInst.mwODU.Id != mwODU.Id && x.allLoadInst.mwODU.Mw_DishId == MWInstallationViewModel.installationConfig.mwDishId
                                       && x.allCivilInst.civilWithLegsId == MWInstallationViewModel.installationConfig.civilWithLegId && x.SiteCode.ToLower() == tLImwDish.SiteCode.ToLower()).Include(x => x.allLoadInst).ThenInclude(x => x.mwODU).ThenInclude(x => x.Mw_Dish)
                                    .ThenInclude(x => x.MwDishLibrary).Include(x => x.allCivilInst).ThenInclude(x => x.civilWithLegs).ToList();

                                    if (tLImwDishCount != null && tLImwDishCount.Count == 1 && tLImwDish.allLoadInst.mwDish.MwDishLibrary.polarityType.Name.ToLower() == "single")
                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"can not selected this MWDish because found other MWODU installed directly and polarityType to MWDish is single ", (int)ApiReturnCode.fail);
                                    else if (tLImwDishCount != null && tLImwDishCount.Count == 2 && tLImwDish.allLoadInst.mwDish.MwDishLibrary.polarityType.Name.ToLower() == "dual")
                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"can not selected this MWDish because found tow MWODU installed directly and polarityType to MWDish is dual ", (int)ApiReturnCode.fail);

                                    if (tLImwDish.allLoadInst.mwDish != null && TLIMWODU.allLoadInst.mwODU.MwODULibrary.Model != null)
                                    {
                                        mwODU.Name = tLImwDish.allLoadInst.mwDish.DishName + ' ' + TLIMWODU.allLoadInst.mwODU.MwODULibrary.Model + ' ' + tLImwDish.allLoadInst.
                                            mwDish.MwDishLibrary.polarityType.Name;
                                    }
                                    var CheckName = _dbContext.MV_MWODU_VIEW.AsNoTracking().FirstOrDefault(x => !x.Dismantle &&
                                                                        (x.Id != null ? x.Name.ToLower() == mwODU.Name.ToLower() : false
                                                                        && x.Id != mwODU.Id && x.SiteCode.ToLower() == tLImwDish.SiteCode.ToLower()));
                                    if (CheckName != null)
                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The name {mwODU.Name} is already exists", (int)Helpers.Constants.ApiReturnCode.fail);


                                    mwODU.MwODULibraryId = MWInstallationViewModel.civilType.MwODULibraryId;
                                    mwODU.Mw_DishId = MWInstallationViewModel.installationConfig.mwDishId;
                                    mwODU.OduInstallationTypeId = MWInstallationViewModel.installationConfig.InstallationPlaceId;
                                    _unitOfWork.MW_ODURepository.UpdateWithHistory(UserId, TLIMWODU.allLoadInst.mwODU, mwODU);
                                    await _unitOfWork.SaveChangesAsync();

                                    if (MWInstallationViewModel.civilLoads != null)
                                    {
                                        TLIcivilLoads TLIMWODUs = _dbContext.TLIcivilLoads.Include(x => x.allLoadInst).ThenInclude(x => x.mwODU).ThenInclude(x => x.MwODULibrary)
                                        .FirstOrDefault(x => x.allLoadInstId != null && !x.Dismantle && x.allLoadInst.mwODUId
                                            == MWInstallationViewModel.installationAttributes.Id);

                                        TLIcivilLoads existingEntity = _unitOfWork.CivilLoadsRepository.GetAllAsQueryable().AsNoTracking().
                                          Include(x => x.allLoadInst).ThenInclude(x => x.mwODU).ThenInclude(x => x.MwODULibrary).
                                          FirstOrDefault(x => x.allLoadInstId != null && !x.Dismantle && x.allLoadInst.mwODUId
                                           == MWInstallationViewModel.installationAttributes.Id);

                                        TLIMWODUs.allCivilInstId = CivilFound.allCivilInstId;
                                        TLIMWODUs.InstallationDate = MWInstallationViewModel.civilLoads.InstallationDate;
                                        TLIMWODUs.ItemOnCivilStatus = MWInstallationViewModel.civilLoads.ItemOnCivilStatus;
                                        TLIMWODUs.ItemStatus = MWInstallationViewModel.civilLoads?.ItemStatus;
                                        TLIMWODUs.ReservedSpace = false;
                                        TLIMWODUs.SiteCode = tLImwDish.SiteCode;
                                        _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, existingEntity, TLIMWODUs);
                                        await _unitOfWork.SaveChangesAsync();
                                    }

                                    if (MWInstallationViewModel.dynamicAttribute != null ? MWInstallationViewModel.dynamicAttribute.Count() > 0 : false)
                                        _unitOfWork.DynamicAttInstValueRepository.UpdateDynamicValues(UserId, MWInstallationViewModel.dynamicAttribute, TableNameId, mwODU.Id, ConnectionString);


                                }
                                else
                                {
                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "must selected MWDish to installed this MWODU", (int)ApiReturnCode.fail);
                                }
                            }
                            else
                            {
                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "must selected civilwithlegs to installed this MWODU", (int)ApiReturnCode.fail);
                            }
                        }
                        else if (MWInstallationViewModel.installationConfig.civilSteelType == 1)
                        {
                            if (MWInstallationViewModel.installationConfig.civilWithoutLegId != null)
                            {
                                TLIcivilLoads CivilFound = _unitOfWork.CivilLoadsRepository.GetWhereFirst(x => !x.Dismantle
                                 && x.allCivilInst.civilWithoutLegId == MWInstallationViewModel.installationConfig.civilWithoutLegId && x.SiteCode.ToLower() == TLIMWODU.SiteCode.ToLower());
                                if (CivilFound == null)
                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Civil is not found", (int)ApiReturnCode.fail);

                                if (MWInstallationViewModel.installationConfig.sideArmId != null)
                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"can not selected sidearm because installation place is direct", (int)ApiReturnCode.fail);

                                if (MWInstallationViewModel.installationConfig?.mwDishId != null)
                                {
                                    if (!string.IsNullOrEmpty(mwODU.Serial_Number))
                                    {
                                        bool CheckSerialNumber = _dbContext.MV_MWODU_VIEW.Any(x => x.Serial_Number == mwODU.Serial_Number && x.Id != mwODU.Id && !x.Dismantle);
                                        if (CheckSerialNumber)
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The Serial Number {mwODU.Serial_Number} is already exists", (int)ApiReturnCode.fail);
                                    }
                                    TLIcivilLoads tLImwDish = _unitOfWork.CivilLoadsRepository.GetAllAsQueryable().AsNoTracking()
                                    .Include(x => x.allLoadInst).ThenInclude(x => x.mwDish).ThenInclude(x => x.MwDishLibrary)
                                    .ThenInclude(x => x.polarityType).Include(x => x.allCivilInst).ThenInclude(x => x.civilWithoutLeg).FirstOrDefault(x => x.allLoadInstId != null
                                    && !x.Dismantle && x.allLoadInst.mwDishId == MWInstallationViewModel.installationConfig.mwDishId
                                    && x.allCivilInst.civilWithoutLegId == MWInstallationViewModel.installationConfig.civilWithoutLegId && x.SiteCode.ToLower() == TLIMWODU.SiteCode.ToLower());

                                    if (tLImwDish == null)
                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "MWDish is not found", (int)ApiReturnCode.fail);
                                    List<TLIcivilLoads> tLImwDishCount = _unitOfWork.CivilLoadsRepository.GetAllAsQueryable().AsNoTracking()
                                    .Where(x => x.allLoadInstId != null && !x.Dismantle && x.allLoadInst.mwODU.Id != mwODU.Id && x.allLoadInst.mwODU.Mw_DishId == MWInstallationViewModel.installationConfig.mwDishId
                                       && x.allCivilInst.civilWithoutLegId == MWInstallationViewModel.installationConfig.civilWithoutLegId && x.SiteCode.ToLower() == tLImwDish.SiteCode.ToLower()).Include(x => x.allLoadInst).ThenInclude(x => x.mwODU).ThenInclude(x => x.Mw_Dish)
                                    .ThenInclude(x => x.MwDishLibrary).Include(x => x.allCivilInst).ThenInclude(x => x.civilWithoutLeg).ToList();

                                    if (tLImwDishCount != null && tLImwDishCount.Count == 1 && tLImwDish.allLoadInst.mwDish.MwDishLibrary.polarityType.Name.ToLower() == "single")
                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"can not selected this MWDish because found other MWODU installed directly and polarityType to MWDish is single ", (int)ApiReturnCode.fail);
                                    else if (tLImwDishCount != null && tLImwDishCount.Count == 2 && tLImwDish.allLoadInst.mwDish.MwDishLibrary.polarityType.Name.ToLower() == "dual")
                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"can not selected this MWDish because found tow MWODU installed directly and polarityType to MWDish is dual ", (int)ApiReturnCode.fail);

                                    if (tLImwDish.allLoadInst.mwDish != null && TLIMWODU.allLoadInst.mwODU.MwODULibrary.Model != null)
                                    {
                                        mwODU.Name = tLImwDish.allLoadInst.mwDish.DishName + ' ' + TLIMWODU.allLoadInst.mwODU.MwODULibrary.Model + ' ' + tLImwDish.allLoadInst.
                                            mwDish.MwDishLibrary.polarityType.Name;
                                    }
                                    var CheckName = _dbContext.MV_MWODU_VIEW.AsNoTracking().FirstOrDefault(x => !x.Dismantle &&
                                                                        (x.Id != null ? x.Name.ToLower() == mwODU.Name.ToLower() : false
                                                                        && x.Id != mwODU.Id && x.SiteCode.ToLower() == tLImwDish.SiteCode.ToLower()));
                                    if (CheckName != null)
                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The name {mwODU.Name} is already exists", (int)Helpers.Constants.ApiReturnCode.fail);


                                    mwODU.MwODULibraryId = MWInstallationViewModel.civilType.MwODULibraryId;
                                    mwODU.Mw_DishId = MWInstallationViewModel.installationConfig.mwDishId;
                                    mwODU.OduInstallationTypeId = MWInstallationViewModel.installationConfig.InstallationPlaceId;
                                    _unitOfWork.MW_ODURepository.UpdateWithHistory(UserId, TLIMWODU.allLoadInst.mwODU, mwODU);
                                    await _unitOfWork.SaveChangesAsync();

                                    if (MWInstallationViewModel.civilLoads != null)
                                    {
                                        TLIcivilLoads TLIMWODUs = _dbContext.TLIcivilLoads.Include(x => x.allLoadInst).ThenInclude(x => x.mwODU).ThenInclude(x => x.MwODULibrary)
                                        .FirstOrDefault(x => x.allLoadInstId != null && !x.Dismantle && x.allLoadInst.mwODUId
                                            == MWInstallationViewModel.installationAttributes.Id);

                                        TLIcivilLoads existingEntity = _unitOfWork.CivilLoadsRepository.GetAllAsQueryable().AsNoTracking().
                                          Include(x => x.allLoadInst).ThenInclude(x => x.mwODU).ThenInclude(x => x.MwODULibrary).
                                          FirstOrDefault(x => x.allLoadInstId != null && !x.Dismantle && x.allLoadInst.mwODUId
                                           == MWInstallationViewModel.installationAttributes.Id);

                                        TLIMWODUs.allCivilInstId = CivilFound.allCivilInstId;
                                        TLIMWODUs.InstallationDate = MWInstallationViewModel.civilLoads.InstallationDate;
                                        TLIMWODUs.ItemOnCivilStatus = MWInstallationViewModel.civilLoads.ItemOnCivilStatus;
                                        TLIMWODUs.ItemStatus = MWInstallationViewModel.civilLoads?.ItemStatus;
                                        TLIMWODUs.ReservedSpace = false;
                                        TLIMWODUs.SiteCode = tLImwDish.SiteCode;
                                        _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, existingEntity, TLIMWODUs);
                                        await _unitOfWork.SaveChangesAsync();
                                    }

                                    if (MWInstallationViewModel.dynamicAttribute != null ? MWInstallationViewModel.dynamicAttribute.Count() > 0 : false)
                                        _unitOfWork.DynamicAttInstValueRepository.UpdateDynamicValues(UserId, MWInstallationViewModel.dynamicAttribute, TableNameId, mwODU.Id, ConnectionString);
                                }
                                else
                                {
                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "must selected MWDish to installed this MWODU", (int)ApiReturnCode.fail);
                                }
                            }
                            else
                            {
                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "must selected civilwithlegs to installed this MWODU", (int)ApiReturnCode.fail);
                            }
                        }
                        else if (MWInstallationViewModel.installationConfig.civilSteelType == 2)
                        {
                            if (MWInstallationViewModel.installationConfig.civilNonSteelId != null)
                            {
                                TLIcivilLoads CivilFound = _unitOfWork.CivilLoadsRepository.GetWhereFirst(x => !x.Dismantle
                                && x.allCivilInst.civilNonSteelId == MWInstallationViewModel.installationConfig.civilNonSteelId && x.SiteCode.ToLower() == TLIMWODU.SiteCode.ToLower());
                                if (CivilFound == null)
                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Civil is not found", (int)ApiReturnCode.fail);

                                if (MWInstallationViewModel.installationConfig.sideArmId != null)
                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"can not selected sidearm because installation place is direct", (int)ApiReturnCode.fail);

                                if (MWInstallationViewModel.installationConfig?.mwDishId != null)
                                {
                                    if (!string.IsNullOrEmpty(mwODU.Serial_Number))
                                    {
                                        bool CheckSerialNumber = _dbContext.MV_MWODU_VIEW.Any(x => x.Serial_Number == mwODU.Serial_Number && x.Id != mwODU.Id && !x.Dismantle);
                                        if (CheckSerialNumber)
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The Serial Number {mwODU.Serial_Number} is already exists", (int)ApiReturnCode.fail);
                                    }
                                    TLIcivilLoads tLImwDish = _unitOfWork.CivilLoadsRepository.GetAllAsQueryable().AsNoTracking()
                                    .Include(x => x.allLoadInst).ThenInclude(x => x.mwDish).ThenInclude(x => x.MwDishLibrary)
                                    .ThenInclude(x => x.polarityType).Include(x => x.allCivilInst).ThenInclude(x => x.civilNonSteel).FirstOrDefault(x => x.allLoadInstId != null
                                    && !x.Dismantle && x.allLoadInst.mwDishId == MWInstallationViewModel.installationConfig.mwDishId
                                    && x.allCivilInst.civilNonSteelId == MWInstallationViewModel.installationConfig.civilNonSteelId && x.SiteCode.ToLower() == TLIMWODU.SiteCode.ToLower());

                                    if (tLImwDish == null)
                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "MWDish is not found", (int)ApiReturnCode.fail);
                                    List<TLIcivilLoads> tLImwDishCount = _unitOfWork.CivilLoadsRepository.GetAllAsQueryable().AsNoTracking()
                                    .Where(x => x.allLoadInstId != null && !x.Dismantle && x.allLoadInst.mwODU.Id != mwODU.Id && x.allLoadInst.mwODU.Mw_DishId == MWInstallationViewModel.installationConfig.mwDishId
                                       && x.allCivilInst.civilNonSteelId == MWInstallationViewModel.installationConfig.civilNonSteelId && x.SiteCode.ToLower() == tLImwDish.SiteCode.ToLower()).Include(x => x.allLoadInst).ThenInclude(x => x.mwODU).ThenInclude(x => x.Mw_Dish)
                                    .ThenInclude(x => x.MwDishLibrary).Include(x => x.allCivilInst).ThenInclude(x => x.civilNonSteel).ToList();

                                    if (tLImwDishCount != null && tLImwDishCount.Count == 1 && tLImwDish.allLoadInst.mwDish.MwDishLibrary.polarityType.Name.ToLower() == "single")
                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"can not selected this MWDish because found other MWODU installed directly and polarityType to MWDish is single ", (int)ApiReturnCode.fail);
                                    else if (tLImwDishCount != null && tLImwDishCount.Count == 2 && tLImwDish.allLoadInst.mwDish.MwDishLibrary.polarityType.Name.ToLower() == "dual")
                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"can not selected this MWDish because found tow MWODU installed directly and polarityType to MWDish is dual ", (int)ApiReturnCode.fail);

                                    if (tLImwDish.allLoadInst.mwDish != null && TLIMWODU.allLoadInst.mwODU.MwODULibrary.Model != null)
                                    {
                                        mwODU.Name = tLImwDish.allLoadInst.mwDish.DishName + ' ' + TLIMWODU.allLoadInst.mwODU.MwODULibrary.Model + ' ' + tLImwDish.allLoadInst.
                                            mwDish.MwDishLibrary.polarityType.Name;
                                    }
                                    var CheckName = _dbContext.MV_MWODU_VIEW.AsNoTracking().FirstOrDefault(x => !x.Dismantle &&
                                                                        (x.Id != null ? x.Name.ToLower() == mwODU.Name.ToLower() : false
                                                                        && x.Id != mwODU.Id && x.SiteCode.ToLower() == tLImwDish.SiteCode.ToLower()));
                                    if (CheckName != null)
                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The name {mwODU.Name} is already exists", (int)Helpers.Constants.ApiReturnCode.fail);


                                    mwODU.MwODULibraryId = MWInstallationViewModel.civilType.MwODULibraryId;
                                    mwODU.Mw_DishId = MWInstallationViewModel.installationConfig.mwDishId;
                                    mwODU.OduInstallationTypeId = MWInstallationViewModel.installationConfig.InstallationPlaceId;
                                    _unitOfWork.MW_ODURepository.UpdateWithHistory(UserId, TLIMWODU.allLoadInst.mwODU, mwODU);
                                    await _unitOfWork.SaveChangesAsync();

                                    if (MWInstallationViewModel.civilLoads != null)
                                    {
                                        TLIcivilLoads TLIMWODUs = _dbContext.TLIcivilLoads.Include(x => x.allLoadInst).ThenInclude(x => x.mwODU).ThenInclude(x => x.MwODULibrary)
                                        .FirstOrDefault(x => x.allLoadInstId != null && !x.Dismantle && x.allLoadInst.mwODUId
                                            == MWInstallationViewModel.installationAttributes.Id);

                                        TLIcivilLoads existingEntity = _unitOfWork.CivilLoadsRepository.GetAllAsQueryable().AsNoTracking().
                                          Include(x => x.allLoadInst).ThenInclude(x => x.mwODU).ThenInclude(x => x.MwODULibrary).
                                          FirstOrDefault(x => x.allLoadInstId != null && !x.Dismantle && x.allLoadInst.mwODUId
                                           == MWInstallationViewModel.installationAttributes.Id);

                                        TLIMWODUs.allCivilInstId = CivilFound.allCivilInstId;
                                        TLIMWODUs.InstallationDate = MWInstallationViewModel.civilLoads.InstallationDate;
                                        TLIMWODUs.ItemOnCivilStatus = MWInstallationViewModel.civilLoads.ItemOnCivilStatus;
                                        TLIMWODUs.ItemStatus = MWInstallationViewModel.civilLoads?.ItemStatus;
                                        TLIMWODUs.ReservedSpace = false;
                                        TLIMWODUs.SiteCode = tLImwDish.SiteCode;
                                        _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, existingEntity, TLIMWODUs);
                                        await _unitOfWork.SaveChangesAsync();
                                    }

                                    if (MWInstallationViewModel.dynamicAttribute != null ? MWInstallationViewModel.dynamicAttribute.Count() > 0 : false)
                                        _unitOfWork.DynamicAttInstValueRepository.UpdateDynamicValues(UserId, MWInstallationViewModel.dynamicAttribute, TableNameId, mwODU.Id, ConnectionString);

                                }
                                else
                                {
                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "must selected MWDish to installed this MWODU", (int)ApiReturnCode.fail);
                                }
                            }
                            else
                            {
                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "must selected civilwithlegs to installed this MWODU", (int)ApiReturnCode.fail);
                            }
                        }
                    }
                    else if (MWInstallationViewModel.installationConfig.InstallationPlaceId == 2)
                    {
                        if (MWInstallationViewModel.installationConfig?.civilSteelType == 0)
                        {
                            if (MWInstallationViewModel.installationConfig?.civilWithLegId != null)
                            {
                                TLIcivilLoads CivilFound = _unitOfWork.CivilLoadsRepository.GetWhereFirst(x => !x.Dismantle
                                && x.allCivilInst.civilWithLegsId == MWInstallationViewModel.installationConfig.civilWithLegId && x.SiteCode.ToLower() == TLIMWODU.SiteCode.ToLower());
                                if (CivilFound == null)
                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Civil is not found", (int)ApiReturnCode.fail);

                                if (MWInstallationViewModel.installationConfig?.sideArmId != null)
                                {
                                    if (MWInstallationViewModel.installationConfig?.mwDishId != null)
                                    {
                                        TLIcivilLoads SideARmFound = _unitOfWork.CivilLoadsRepository.GetWhereFirst(x => !x.Dismantle && x.sideArmId != null &&
                                    x.allCivilInstId != null && x.allCivilInstId == CivilFound.allCivilInstId
                                    && x.sideArmId == MWInstallationViewModel.installationConfig.sideArmId && x.SiteCode.ToLower() == CivilFound.SiteCode.ToLower());
                                        if (SideARmFound == null)
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "sidearm is not found on civil", (int)ApiReturnCode.fail);

                                        if (MWInstallationViewModel.installationConfig?.mwDishId != null)
                                        {
                                            if (!string.IsNullOrEmpty(mwODU.Serial_Number))
                                            {
                                                bool CheckSerialNumber = _dbContext.MV_MWODU_VIEW.Any(x => x.Serial_Number == mwODU.Serial_Number && x.Id != mwODU.Id && !x.Dismantle);
                                                if (CheckSerialNumber)
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The Serial Number {mwODU.Serial_Number} is already exists", (int)ApiReturnCode.fail);
                                            }
                                            TLIcivilLoads tLImwDish = _unitOfWork.CivilLoadsRepository.GetAllAsQueryable().AsNoTracking()
                                            .Include(x => x.allLoadInst).ThenInclude(x => x.mwDish).ThenInclude(x => x.MwDishLibrary).Include(x => x.allCivilInst)
                                            .Include(x => x.sideArm).FirstOrDefault(x => x.allLoadInstId != null
                                            && !x.Dismantle && x.sideArmId != null && x.allCivilInstId != null && x.allCivilInstId == CivilFound.allCivilInstId
                                            && x.sideArmId == MWInstallationViewModel.installationConfig.sideArmId && x.allLoadInst.mwDishId == MWInstallationViewModel.installationConfig.mwDishId
                                            && x.SiteCode.ToLower() == CivilFound.SiteCode.ToLower());
                                            if (tLImwDish == null)
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "MWDish is not found", (int)ApiReturnCode.fail);
                                            if (MWInstallationViewModel.installationConfig?.LegId != null)
                                            {

                                                TLIcivilLoads tLImwDishLeg = _unitOfWork.CivilLoadsRepository.GetAllAsQueryable().AsNoTracking()
                                         .Include(x => x.allLoadInst).ThenInclude(x => x.mwDish).ThenInclude(x => x.MwDishLibrary).Include(x => x.allCivilInst)
                                         .Include(x => x.sideArm).FirstOrDefault(x => x.allLoadInstId != null
                                         && !x.Dismantle && x.sideArmId != null && x.allCivilInstId != null && x.allCivilInstId == CivilFound.allCivilInstId
                                         && x.sideArmId == MWInstallationViewModel.installationConfig.sideArmId && x.allLoadInst.mwDishId ==
                                         MWInstallationViewModel.installationConfig.mwDishId && x.legId == MWInstallationViewModel.installationConfig.LegId
                                         && x.SiteCode.ToLower() == CivilFound.SiteCode.ToLower());
                                                if (tLImwDishLeg == null)
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "MWDish is not found", (int)ApiReturnCode.fail);

                                            }
                                            List<TLIcivilLoads> tLImwDishCount = _unitOfWork.CivilLoadsRepository.GetAllAsQueryable().AsNoTracking()
                                             .Where(x => x.allLoadInstId != null && !x.Dismantle && x.allLoadInst.mwODU.Id != mwODU.Id && x.allLoadInst.mwODU.Mw_DishId == MWInstallationViewModel.installationConfig.mwDishId
                                              && x.SiteCode.ToLower() == tLImwDish.SiteCode.ToLower()).Include(x => x.allLoadInst).ThenInclude(x => x.mwODU).ThenInclude(x => x.Mw_Dish)
                                             .ThenInclude(x => x.MwDishLibrary).ToList();

                                            if (tLImwDishCount != null && tLImwDishCount.Count == 1 && tLImwDish.allLoadInst.mwDish.MwDishLibrary.polarityType.Name.ToLower() == "single")
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"can not selected this MWDish because found other MWODU installed directly and polarityType to MWDish is single ", (int)ApiReturnCode.fail);
                                            else if (tLImwDishCount != null && tLImwDishCount.Count == 2 && tLImwDish.allLoadInst.mwDish.MwDishLibrary.polarityType.Name.ToLower() == "dual")
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"can not selected this MWDish because found tow MWODU installed directly and polarityType to MWDish is dual ", (int)ApiReturnCode.fail);

                                            if (TLIMWODU.ReservedSpace == true && MWInstallationViewModel.civilLoads.ReservedSpace == true)
                                            {
                                                var Message = _unitOfWork.CivilWithLegsRepository.CheckAvailableSpaceOnCivils(CivilFound.allCivilInst).Message;

                                                if (Message != "Success")
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(true, null, null, Message, (int)ApiReturnCode.fail);
                                                }
                                                if (mwODU.CenterHigh <= 0)
                                                {
                                                    if (mwODU.HBA <= 0)
                                                    {
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HBA_Surface must bigger from zero", (int)ApiReturnCode.fail);
                                                    }
                                                    else if (TLIMWODU.allLoadInst.mwODU.MwODULibrary.Height <= 0)
                                                    {
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "CenterHigh must bigger from zero", (int)ApiReturnCode.fail);
                                                    }
                                                    else
                                                    {
                                                        mwODU.CenterHigh = mwODU.HBA + TLIMWODU.allLoadInst.mwODU.MwODULibrary.Height / 2;
                                                    }
                                                }
                                                if (mwODU.SpaceInstallation == 0)
                                                {
                                                    if (TLIMWODU.allLoadInst.mwODU.MwODULibrary.SpaceLibrary == 0)
                                                    {
                                                        if (TLIMWODU.allLoadInst.mwODU.MwODULibrary.Height == 0)
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "SpaceInstallation must bigger from zero", (int)ApiReturnCode.fail);
                                                        }
                                                        mwODU.SpaceInstallation = TLIMWODU.allLoadInst.mwODU.MwODULibrary.Height * TLIMWODU.allLoadInst.mwODU.MwODULibrary.Width;
                                                    }
                                                    else
                                                    {
                                                        mwODU.SpaceInstallation = TLIMWODU.allLoadInst.mwODU.MwODULibrary.SpaceLibrary;
                                                    }
                                                }

                                                if (mwODU.Azimuth <= 0)
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Azimuth must bigger from zero", (int)ApiReturnCode.fail);
                                                }
                                                if (mwODU.Height <= 0)
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HeightBase must bigger from zero", (int)ApiReturnCode.fail);
                                                }
                                                var CheckAzimuthAndHeightBase = _dbContext.MV_MWODU_VIEW.Where(
                                                x => x.ALLCIVILID == CivilFound.allCivilInst.Id && x.Id != mwODU.Id &&
                                                x.SIDEARMID == MWInstallationViewModel.installationConfig.sideArmId && x.Azimuth ==
                                                mwODU.Azimuth && x.Height == mwODU.Height).ToList();

                                                if (CheckAzimuthAndHeightBase != null)
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the ODU on same azimuth and height because found other ODU in same angle", (int)ApiReturnCode.fail);
                                                }

                                                if (tLImwDish.allLoadInst.mwDish != null && TLIMWODU.allLoadInst.mwODU.MwODULibrary.Model != null)
                                                {
                                                    mwODU.Name = tLImwDish.allLoadInst.mwDish.DishName + ' ' + TLIMWODU.allLoadInst.mwODU.MwODULibrary.Model + ' ' + tLImwDish.allLoadInst.
                                                        mwDish.MwDishLibrary.polarityType.Name;
                                                }
                                                var CheckName = _dbContext.MV_MWODU_VIEW.FirstOrDefault(x => !x.Dismantle &&
                                                                (x.Id != null ? x.Name.ToLower() == mwODU.Name.ToLower() : false
                                                                    && x.Id != mwODU.Id && x.SiteCode.ToLower() == CivilFound.SiteCode.ToLower()));
                                                if (CheckName != null)
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The name {mwODU.Name} is already exists", (int)Helpers.Constants.ApiReturnCode.fail);

                                                if (CivilFound.allCivilInst.civilWithLegs?.CurrentLoads == null)
                                                {
                                                    CivilFound.allCivilInst.civilWithLegs.CurrentLoads = 0;
                                                }
                                                var OldVcivilinfo = _dbContext.TLIcivilWithLegs.AsNoTracking().FirstOrDefault(x => x.Id == CivilFound.allCivilInst.civilWithLegsId);

                                                if (OldVcivilinfo != null)
                                                {
                                                    if (mwODU.SpaceInstallation != 0 && mwODU.CenterHigh != 0 && CivilFound.allCivilInst.civilWithLegs.HeightBase != 0)
                                                    {
                                                        CivilFound.allCivilInst.civilWithLegs.CurrentLoads -= TLIMWODU.allLoadInst.mwODU.EquivalentSpace;
                                                        var EquivalentSpace = mwODU.SpaceInstallation * (mwODU.CenterHigh / CivilFound.allCivilInst.civilWithLegs.HeightBase);
                                                        CivilFound.allCivilInst.civilWithLegs.CurrentLoads += EquivalentSpace;
                                                        mwODU.EquivalentSpace = EquivalentSpace;
                                                        _unitOfWork.CivilWithLegsRepository.UpdateWithHistory(UserId, OldVcivilinfo, CivilFound.allCivilInst.civilWithLegs);
                                                        _unitOfWork.SaveChanges();
                                                    }
                                                }
                                                mwODU.MwODULibraryId = MWInstallationViewModel.civilType.MwODULibraryId;
                                                mwODU.MwODULibraryId = MWInstallationViewModel.civilType.MwODULibraryId;
                                                mwODU.Mw_DishId = MWInstallationViewModel.installationConfig.mwDishId;
                                                mwODU.OduInstallationTypeId = MWInstallationViewModel.installationConfig.InstallationPlaceId;
                                                _unitOfWork.MW_ODURepository.UpdateWithHistory(UserId, TLIMWODU.allLoadInst.mwODU, mwODU);
                                                await _unitOfWork.SaveChangesAsync();

                                                if (MWInstallationViewModel.civilLoads != null)
                                                {
                                                    TLIcivilLoads TLIMWODUs = _dbContext.TLIcivilLoads.Include(x => x.allLoadInst).ThenInclude(x => x.mwODU).ThenInclude(x => x.MwODULibrary)
                                                    .FirstOrDefault(x => x.allLoadInstId != null && !x.Dismantle && x.allLoadInst.mwODUId
                                                        == MWInstallationViewModel.installationAttributes.Id);

                                                    TLIcivilLoads existingEntity = _unitOfWork.CivilLoadsRepository.GetAllAsQueryable().AsNoTracking().
                                                      Include(x => x.allLoadInst).ThenInclude(x => x.mwODU).ThenInclude(x => x.MwODULibrary).
                                                      FirstOrDefault(x => x.allLoadInstId != null && !x.Dismantle && x.allLoadInst.mwODUId
                                                       == MWInstallationViewModel.installationAttributes.Id);

                                                    TLIMWODUs.allCivilInstId = CivilFound.allCivilInstId;
                                                    TLIMWODUs.InstallationDate = MWInstallationViewModel.civilLoads.InstallationDate;
                                                    TLIMWODUs.ItemOnCivilStatus = MWInstallationViewModel.civilLoads.ItemOnCivilStatus;
                                                    TLIMWODUs.ItemStatus = MWInstallationViewModel.civilLoads?.ItemStatus;
                                                    TLIMWODUs.ReservedSpace = MWInstallationViewModel.civilLoads.ReservedSpace;
                                                    TLIMWODUs.SiteCode = tLImwDish.SiteCode;
                                                    _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, existingEntity, TLIMWODUs);
                                                    await _unitOfWork.SaveChangesAsync();
                                                }

                                                if (MWInstallationViewModel.dynamicAttribute != null ? MWInstallationViewModel.dynamicAttribute.Count() > 0 : false)
                                                    _unitOfWork.DynamicAttInstValueRepository.UpdateDynamicValues(UserId, MWInstallationViewModel.dynamicAttribute, TableNameId, mwODU.Id, ConnectionString);
                                            }
                                            else if (TLIMWODU.ReservedSpace == false && MWInstallationViewModel.civilLoads.ReservedSpace == true)
                                            {
                                                var Message = _unitOfWork.CivilWithLegsRepository.CheckAvailableSpaceOnCivils(CivilFound.allCivilInst).Message;

                                                if (Message != "Success")
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(true, null, null, Message, (int)ApiReturnCode.fail);
                                                }
                                                if (mwODU.CenterHigh <= 0)
                                                {
                                                    if (mwODU.HBA <= 0)
                                                    {
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HBA_Surface must bigger from zero", (int)ApiReturnCode.fail);
                                                    }
                                                    else if (TLIMWODU.allLoadInst.mwODU.MwODULibrary.Height <= 0)
                                                    {
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "CenterHigh must bigger from zero", (int)ApiReturnCode.fail);
                                                    }
                                                    else
                                                    {
                                                        mwODU.CenterHigh = mwODU.HBA + TLIMWODU.allLoadInst.mwODU.MwODULibrary.Height / 2;
                                                    }
                                                }
                                                if (mwODU.SpaceInstallation == 0)
                                                {
                                                    if (TLIMWODU.allLoadInst.mwODU.MwODULibrary.SpaceLibrary == 0)
                                                    {
                                                        if (TLIMWODU.allLoadInst.mwODU.MwODULibrary.Height == 0)
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "SpaceInstallation must bigger from zero", (int)ApiReturnCode.fail);
                                                        }
                                                        mwODU.SpaceInstallation = TLIMWODU.allLoadInst.mwODU.MwODULibrary.Height * TLIMWODU.allLoadInst.mwODU.MwODULibrary.Width;
                                                    }
                                                    else
                                                    {
                                                        mwODU.SpaceInstallation = TLIMWODU.allLoadInst.mwODU.MwODULibrary.SpaceLibrary;
                                                    }
                                                }

                                                if (mwODU.Azimuth <= 0)
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Azimuth must bigger from zero", (int)ApiReturnCode.fail);
                                                }
                                                if (mwODU.Height <= 0)
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HeightBase must bigger from zero", (int)ApiReturnCode.fail);
                                                }
                                                var CheckAzimuthAndHeightBase = _dbContext.MV_MWODU_VIEW.Where(
                                                x => x.ALLCIVILID == CivilFound.allCivilInst.Id && x.Id != mwODU.Id &&
                                                x.SIDEARMID == MWInstallationViewModel.installationConfig.sideArmId && x.Azimuth ==
                                                mwODU.Azimuth && x.Height == mwODU.Height).ToList();

                                                if (CheckAzimuthAndHeightBase != null)
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the ODU on same azimuth and height because found other ODU in same angle", (int)ApiReturnCode.fail);
                                                }

                                                if (tLImwDish.allLoadInst.mwDish != null && TLIMWODU.allLoadInst.mwODU.MwODULibrary.Model != null)
                                                {
                                                    mwODU.Name = tLImwDish.allLoadInst.mwDish.DishName + ' ' + TLIMWODU.allLoadInst.mwODU.MwODULibrary.Model + ' ' + tLImwDish.allLoadInst.
                                                        mwDish.MwDishLibrary.polarityType.Name;
                                                }
                                                var CheckName = _dbContext.MV_MWODU_VIEW.FirstOrDefault(x => !x.Dismantle &&
                                                            (x.Id != null ? x.Name.ToLower() == mwODU.Name.ToLower() : false
                                                                && x.Id != mwODU.Id && x.SiteCode.ToLower() == CivilFound.SiteCode.ToLower()));
                                                if (CheckName != null)
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The name {mwODU.Name} is already exists", (int)Helpers.Constants.ApiReturnCode.fail);

                                                if (CivilFound.allCivilInst.civilWithLegs?.CurrentLoads == null)
                                                {
                                                    CivilFound.allCivilInst.civilWithLegs.CurrentLoads = 0;
                                                }
                                                var OldVcivilinfo = _dbContext.TLIcivilWithLegs.AsNoTracking().FirstOrDefault(x => x.Id == CivilFound.allCivilInst.civilWithLegsId);

                                                if (OldVcivilinfo != null)
                                                {
                                                    if (mwODU.SpaceInstallation != 0 && mwODU.CenterHigh != 0 && CivilFound.allCivilInst.civilWithLegs.HeightBase != 0)
                                                    {
                                                        var EquivalentSpace = mwODU.SpaceInstallation * (mwODU.CenterHigh / CivilFound.allCivilInst.civilWithLegs.HeightBase);

                                                        CivilFound.allCivilInst.civilWithLegs.CurrentLoads += EquivalentSpace;
                                                        mwODU.EquivalentSpace = EquivalentSpace;
                                                        _unitOfWork.CivilWithLegsRepository.UpdateWithHistory(UserId, OldVcivilinfo, CivilFound.allCivilInst.civilWithLegs);
                                                        _unitOfWork.SaveChanges();
                                                    }
                                                }
                                                mwODU.MwODULibraryId = MWInstallationViewModel.civilType.MwODULibraryId;
                                                mwODU.Mw_DishId = MWInstallationViewModel.installationConfig.mwDishId;
                                                mwODU.OduInstallationTypeId = MWInstallationViewModel.installationConfig.InstallationPlaceId;
                                                _unitOfWork.MW_ODURepository.UpdateWithHistory(UserId, TLIMWODU.allLoadInst.mwODU, mwODU);
                                                await _unitOfWork.SaveChangesAsync();

                                                if (MWInstallationViewModel.civilLoads != null)
                                                {
                                                    TLIcivilLoads TLIMWODUs = _dbContext.TLIcivilLoads.Include(x => x.allLoadInst).ThenInclude(x => x.mwODU).ThenInclude(x => x.MwODULibrary)
                                                    .FirstOrDefault(x => x.allLoadInstId != null && !x.Dismantle && x.allLoadInst.mwODUId
                                                        == MWInstallationViewModel.installationAttributes.Id);

                                                    TLIcivilLoads existingEntity = _unitOfWork.CivilLoadsRepository.GetAllAsQueryable().AsNoTracking().
                                                      Include(x => x.allLoadInst).ThenInclude(x => x.mwODU).ThenInclude(x => x.MwODULibrary).
                                                      FirstOrDefault(x => x.allLoadInstId != null && !x.Dismantle && x.allLoadInst.mwODUId
                                                       == MWInstallationViewModel.installationAttributes.Id);

                                                    TLIMWODUs.allCivilInstId = CivilFound.allCivilInstId;
                                                    TLIMWODUs.InstallationDate = MWInstallationViewModel.civilLoads.InstallationDate;
                                                    TLIMWODUs.ItemOnCivilStatus = MWInstallationViewModel.civilLoads.ItemOnCivilStatus;
                                                    TLIMWODUs.ItemStatus = MWInstallationViewModel.civilLoads?.ItemStatus;
                                                    TLIMWODUs.ReservedSpace = MWInstallationViewModel.civilLoads.ReservedSpace;
                                                    TLIMWODUs.SiteCode = tLImwDish.SiteCode;
                                                    _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, existingEntity, TLIMWODUs);
                                                    await _unitOfWork.SaveChangesAsync();
                                                }

                                                if (MWInstallationViewModel.dynamicAttribute != null ? MWInstallationViewModel.dynamicAttribute.Count() > 0 : false)
                                                    _unitOfWork.DynamicAttInstValueRepository.UpdateDynamicValues(UserId, MWInstallationViewModel.dynamicAttribute, TableNameId, mwODU.Id, ConnectionString);
                                            }
                                            else if (TLIMWODU.ReservedSpace == true && MWInstallationViewModel.civilLoads.ReservedSpace == false)
                                            {
                                                var Message = _unitOfWork.CivilWithLegsRepository.CheckAvailableSpaceOnCivils(CivilFound.allCivilInst).Message;

                                                if (Message != "Success")
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(true, null, null, Message, (int)ApiReturnCode.fail);
                                                }
                                                if (mwODU.CenterHigh <= 0)
                                                {
                                                    if (mwODU.HBA <= 0)
                                                    {
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HBA_Surface must bigger from zero", (int)ApiReturnCode.fail);
                                                    }
                                                    else if (TLIMWODU.allLoadInst.mwODU.MwODULibrary.Height <= 0)
                                                    {
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "CenterHigh must bigger from zero", (int)ApiReturnCode.fail);
                                                    }
                                                    else
                                                    {
                                                        mwODU.CenterHigh = mwODU.HBA + TLIMWODU.allLoadInst.mwODU.MwODULibrary.Height / 2;
                                                    }
                                                }
                                                if (mwODU.SpaceInstallation == 0)
                                                {
                                                    if (TLIMWODU.allLoadInst.mwODU.MwODULibrary.SpaceLibrary == 0)
                                                    {
                                                        if (TLIMWODU.allLoadInst.mwODU.MwODULibrary.Height == 0)
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "SpaceInstallation must bigger from zero", (int)ApiReturnCode.fail);
                                                        }
                                                        mwODU.SpaceInstallation = TLIMWODU.allLoadInst.mwODU.MwODULibrary.Height * TLIMWODU.allLoadInst.mwODU.MwODULibrary.Width;
                                                    }
                                                    else
                                                    {
                                                        mwODU.SpaceInstallation = TLIMWODU.allLoadInst.mwODU.MwODULibrary.SpaceLibrary;
                                                    }
                                                }

                                                if (mwODU.Azimuth <= 0)
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Azimuth must bigger from zero", (int)ApiReturnCode.fail);
                                                }
                                                if (mwODU.Height <= 0)
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HeightBase must bigger from zero", (int)ApiReturnCode.fail);
                                                }
                                                var CheckAzimuthAndHeightBase = _dbContext.MV_MWODU_VIEW.Where(
                                                x => x.ALLCIVILID == CivilFound.allCivilInst.Id && x.Id != mwODU.Id &&
                                                x.SIDEARMID == MWInstallationViewModel.installationConfig.sideArmId && x.Azimuth ==
                                                mwODU.Azimuth && x.Height == mwODU.Height).ToList();

                                                if (CheckAzimuthAndHeightBase != null)
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the ODU on same azimuth and height because found other ODU in same angle", (int)ApiReturnCode.fail);
                                                }

                                                if (tLImwDish.allLoadInst.mwDish != null && TLIMWODU.allLoadInst.mwODU.MwODULibrary.Model != null)
                                                {
                                                    mwODU.Name = tLImwDish.allLoadInst.mwDish.DishName + ' ' + TLIMWODU.allLoadInst.mwODU.MwODULibrary.Model + ' ' + tLImwDish.allLoadInst.
                                                        mwDish.MwDishLibrary.polarityType.Name;
                                                }
                                                var CheckName = _dbContext.MV_MWODU_VIEW.FirstOrDefault(x => !x.Dismantle &&
                                                            (x.Id != null ? x.Name.ToLower() == mwODU.Name.ToLower() : false
                                                                && x.Id != mwODU.Id && x.SiteCode.ToLower() == CivilFound.SiteCode.ToLower()));
                                                if (CheckName != null)
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The name {mwODU.Name} is already exists", (int)Helpers.Constants.ApiReturnCode.fail);

                                                if (CivilFound.allCivilInst.civilWithLegs?.CurrentLoads == null)
                                                {
                                                    CivilFound.allCivilInst.civilWithLegs.CurrentLoads = 0;
                                                }
                                                var OldVcivilinfo = _dbContext.TLIcivilWithLegs.AsNoTracking().FirstOrDefault(x => x.Id == CivilFound.allCivilInst.civilWithLegsId);

                                                if (OldVcivilinfo != null)
                                                {
                                                    CivilFound.allCivilInst.civilWithLegs.CurrentLoads = CivilFound.allCivilInst.civilWithLegs.CurrentLoads - TLIMWODU.allLoadInst.mwODU.EquivalentSpace;
                                                    _unitOfWork.CivilWithLegsRepository.UpdateWithHistory(UserId, OldVcivilinfo, CivilFound.allCivilInst.civilWithLegs);
                                                    _unitOfWork.SaveChanges();

                                                }
                                                mwODU.MwODULibraryId = MWInstallationViewModel.civilType.MwODULibraryId;
                                                mwODU.Mw_DishId = MWInstallationViewModel.installationConfig.mwDishId;
                                                mwODU.OduInstallationTypeId = MWInstallationViewModel.installationConfig.InstallationPlaceId;
                                                _unitOfWork.MW_ODURepository.UpdateWithHistory(UserId, TLIMWODU.allLoadInst.mwODU, mwODU);
                                                await _unitOfWork.SaveChangesAsync();

                                                if (MWInstallationViewModel.civilLoads != null)
                                                {
                                                    TLIcivilLoads TLIMWODUs = _dbContext.TLIcivilLoads.Include(x => x.allLoadInst).ThenInclude(x => x.mwODU).ThenInclude(x => x.MwODULibrary)
                                                    .FirstOrDefault(x => x.allLoadInstId != null && !x.Dismantle && x.allLoadInst.mwODUId
                                                        == MWInstallationViewModel.installationAttributes.Id);

                                                    TLIcivilLoads existingEntity = _unitOfWork.CivilLoadsRepository.GetAllAsQueryable().AsNoTracking().
                                                      Include(x => x.allLoadInst).ThenInclude(x => x.mwODU).ThenInclude(x => x.MwODULibrary).
                                                      FirstOrDefault(x => x.allLoadInstId != null && !x.Dismantle && x.allLoadInst.mwODUId
                                                       == MWInstallationViewModel.installationAttributes.Id);

                                                    TLIMWODUs.allCivilInstId = CivilFound.allCivilInstId;
                                                    TLIMWODUs.InstallationDate = MWInstallationViewModel.civilLoads.InstallationDate;
                                                    TLIMWODUs.ItemOnCivilStatus = MWInstallationViewModel.civilLoads.ItemOnCivilStatus;
                                                    TLIMWODUs.ItemStatus = MWInstallationViewModel.civilLoads?.ItemStatus;
                                                    TLIMWODUs.ReservedSpace = MWInstallationViewModel.civilLoads.ReservedSpace;
                                                    TLIMWODUs.SiteCode = tLImwDish.SiteCode;
                                                    _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, existingEntity, TLIMWODUs);
                                                    await _unitOfWork.SaveChangesAsync();
                                                }

                                                if (MWInstallationViewModel.dynamicAttribute != null ? MWInstallationViewModel.dynamicAttribute.Count() > 0 : false)
                                                    _unitOfWork.DynamicAttInstValueRepository.UpdateDynamicValues(UserId, MWInstallationViewModel.dynamicAttribute, TableNameId, mwODU.Id, ConnectionString);

                                            }
                                            else if (TLIMWODU.ReservedSpace == false && MWInstallationViewModel.civilLoads.ReservedSpace == false)
                                            {
                                                var Message = _unitOfWork.CivilWithLegsRepository.CheckAvailableSpaceOnCivils(CivilFound.allCivilInst).Message;

                                                if (Message != "Success")
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(true, null, null, Message, (int)ApiReturnCode.fail);
                                                }
                                                if (mwODU.CenterHigh <= 0)
                                                {
                                                    if (mwODU.HBA <= 0)
                                                    {
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HBA_Surface must bigger from zero", (int)ApiReturnCode.fail);
                                                    }
                                                    else if (TLIMWODU.allLoadInst.mwODU.MwODULibrary.Height <= 0)
                                                    {
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "CenterHigh must bigger from zero", (int)ApiReturnCode.fail);
                                                    }
                                                    else
                                                    {
                                                        mwODU.CenterHigh = mwODU.HBA + TLIMWODU.allLoadInst.mwODU.MwODULibrary.Height / 2;
                                                    }
                                                }
                                                if (mwODU.SpaceInstallation == 0)
                                                {
                                                    if (TLIMWODU.allLoadInst.mwODU.MwODULibrary.SpaceLibrary == 0)
                                                    {
                                                        if (TLIMWODU.allLoadInst.mwODU.MwODULibrary.Height == 0)
                                                        {
                                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "SpaceInstallation must bigger from zero", (int)ApiReturnCode.fail);
                                                        }
                                                        mwODU.SpaceInstallation = TLIMWODU.allLoadInst.mwODU.MwODULibrary.Height * TLIMWODU.allLoadInst.mwODU.MwODULibrary.Width;
                                                    }
                                                    else
                                                    {
                                                        mwODU.SpaceInstallation = TLIMWODU.allLoadInst.mwODU.MwODULibrary.SpaceLibrary;
                                                    }
                                                }

                                                if (mwODU.Azimuth <= 0)
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Azimuth must bigger from zero", (int)ApiReturnCode.fail);
                                                }
                                                if (mwODU.Height <= 0)
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HeightBase must bigger from zero", (int)ApiReturnCode.fail);
                                                }
                                                var CheckAzimuthAndHeightBase = _dbContext.MV_MWODU_VIEW.Where(
                                                x => x.ALLCIVILID == CivilFound.allCivilInst.Id && x.Id != mwODU.Id &&
                                                x.SIDEARMID == MWInstallationViewModel.installationConfig.sideArmId && x.Azimuth ==
                                                mwODU.Azimuth && x.Height == mwODU.Height).ToList();

                                                if (CheckAzimuthAndHeightBase != null)
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the ODU on same azimuth and height because found other ODU in same angle", (int)ApiReturnCode.fail);
                                                }

                                                if (tLImwDish.allLoadInst.mwDish != null && TLIMWODU.allLoadInst.mwODU.MwODULibrary.Model != null)
                                                {
                                                    mwODU.Name = tLImwDish.allLoadInst.mwDish.DishName + ' ' + TLIMWODU.allLoadInst.mwODU.MwODULibrary.Model + ' ' + tLImwDish.allLoadInst.
                                                        mwDish.MwDishLibrary.polarityType.Name;
                                                }
                                                var CheckName = _dbContext.MV_MWODU_VIEW.FirstOrDefault(x => !x.Dismantle &&
                                                            (x.Id != null ? x.Name.ToLower() == mwODU.Name.ToLower() : false
                                                                && x.Id != mwODU.Id && x.SiteCode.ToLower() == CivilFound.SiteCode.ToLower()));
                                                if (CheckName != null)
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The name {mwODU.Name} is already exists", (int)Helpers.Constants.ApiReturnCode.fail);

                                                mwODU.MwODULibraryId = MWInstallationViewModel.civilType.MwODULibraryId;
                                                mwODU.Mw_DishId = MWInstallationViewModel.installationConfig.mwDishId;
                                                mwODU.OduInstallationTypeId = MWInstallationViewModel.installationConfig.InstallationPlaceId;
                                                _unitOfWork.MW_ODURepository.UpdateWithHistory(UserId, TLIMWODU.allLoadInst.mwODU, mwODU);
                                                await _unitOfWork.SaveChangesAsync();
                                                if (MWInstallationViewModel.civilLoads != null)
                                                {
                                                    TLIcivilLoads TLIMWODUs = _dbContext.TLIcivilLoads.Include(x => x.allLoadInst).ThenInclude(x => x.mwODU).ThenInclude(x => x.MwODULibrary)
                                                    .FirstOrDefault(x => x.allLoadInstId != null && !x.Dismantle && x.allLoadInst.mwODUId
                                                        == MWInstallationViewModel.installationAttributes.Id);

                                                    TLIcivilLoads existingEntity = _unitOfWork.CivilLoadsRepository.GetAllAsQueryable().AsNoTracking().
                                                      Include(x => x.allLoadInst).ThenInclude(x => x.mwODU).ThenInclude(x => x.MwODULibrary).
                                                      FirstOrDefault(x => x.allLoadInstId != null && !x.Dismantle && x.allLoadInst.mwODUId
                                                       == MWInstallationViewModel.installationAttributes.Id);

                                                    TLIMWODUs.allCivilInstId = CivilFound.allCivilInstId;
                                                    TLIMWODUs.InstallationDate = MWInstallationViewModel.civilLoads.InstallationDate;
                                                    TLIMWODUs.ItemOnCivilStatus = MWInstallationViewModel.civilLoads.ItemOnCivilStatus;
                                                    TLIMWODUs.ItemStatus = MWInstallationViewModel.civilLoads?.ItemStatus;
                                                    TLIMWODUs.ReservedSpace = MWInstallationViewModel.civilLoads.ReservedSpace;
                                                    TLIMWODUs.SiteCode = tLImwDish.SiteCode;
                                                    _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, existingEntity, TLIMWODUs);
                                                    await _unitOfWork.SaveChangesAsync();
                                                }
                                                if (MWInstallationViewModel.dynamicAttribute != null ? MWInstallationViewModel.dynamicAttribute.Count() > 0 : false)
                                                    _unitOfWork.DynamicAttInstValueRepository.UpdateDynamicValues(UserId, MWInstallationViewModel.dynamicAttribute, TableNameId, mwODU.Id, ConnectionString);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "must selected MWDish to installed this MWODU", (int)ApiReturnCode.fail);
                                    }
                                }
                                else
                                {
                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "must selected sidearm to installed this MWODU", (int)ApiReturnCode.fail);
                                }
                            }
                            else
                            {
                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "must selected civilwithlegs to installed this MWODU", (int)ApiReturnCode.fail);
                            }
                        }
                        if (MWInstallationViewModel.installationConfig?.civilSteelType == 1)
                        {
                            if (MWInstallationViewModel.installationConfig?.civilWithoutLegId != null)
                            {
                                TLIcivilLoads CivilFound = _unitOfWork.CivilLoadsRepository.GetWhereFirst(x => !x.Dismantle
                                && x.allCivilInst.civilWithoutLegId == MWInstallationViewModel.installationConfig.civilWithoutLegId &&
                                x.SiteCode.ToLower() == TLIMWODU.SiteCode.ToLower());
                                if (CivilFound == null)
                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Civil is not found", (int)ApiReturnCode.fail);

                                if (MWInstallationViewModel.installationConfig?.sideArmId != null)
                                {
                                    if (MWInstallationViewModel.installationConfig?.mwDishId != null)
                                    {
                                        if (!string.IsNullOrEmpty(mwODU.Serial_Number))
                                        {
                                            bool CheckSerialNumber = _dbContext.MV_MWODU_VIEW.Any(x => x.Serial_Number == mwODU.Serial_Number && x.Id != mwODU.Id && !x.Dismantle);
                                            if (CheckSerialNumber)
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The Serial Number {mwODU.Serial_Number} is already exists", (int)ApiReturnCode.fail);
                                        }
                                        TLIcivilLoads SideArm = _unitOfWork.CivilLoadsRepository.GetWhereFirst(x => !x.Dismantle && x.sideArmId != null
                                        && x.allCivilInstId == CivilFound.allCivilInstId && x.sideArmId == MWInstallationViewModel.installationConfig.sideArmId
                                        && x.SiteCode.ToLower() == TLIMWODU.SiteCode.ToLower());
                                        if (SideArm == null)
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "SideArm is not found", (int)ApiReturnCode.fail);

                                        TLIcivilLoads tLImwDish = _unitOfWork.CivilLoadsRepository.GetAllAsQueryable().AsNoTracking()
                                        .Include(x => x.allLoadInst).ThenInclude(x => x.mwDish).ThenInclude(x => x.MwDishLibrary).Include(x => x.allCivilInst)
                                        .Include(x => x.sideArm).FirstOrDefault(x => x.allLoadInstId != null
                                         && !x.Dismantle && x.sideArmId != null && x.allCivilInstId != null && x.allCivilInstId == CivilFound.allCivilInstId
                                         && x.sideArmId == MWInstallationViewModel.installationConfig.sideArmId && x.allLoadInst.mwDishId == MWInstallationViewModel.installationConfig.mwDishId
                                         && x.SiteCode.ToLower() == CivilFound.SiteCode.ToLower());
                                        if (tLImwDish == null)
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "MWDish is not found", (int)ApiReturnCode.fail);

                                        List<TLIcivilLoads> tLImwDishCount = _unitOfWork.CivilLoadsRepository.GetAllAsQueryable().AsNoTracking()
                                         .Where(x => x.allLoadInstId != null && !x.Dismantle && x.allLoadInst.mwODU.Id != mwODU.Id && x.allLoadInst.mwODU.Mw_DishId == MWInstallationViewModel.installationConfig.mwDishId
                                          && x.SiteCode.ToLower() == tLImwDish.SiteCode.ToLower()).Include(x => x.allLoadInst).ThenInclude(x => x.mwODU).ThenInclude(x => x.Mw_Dish)
                                         .ThenInclude(x => x.MwDishLibrary).ToList();

                                        if (tLImwDishCount != null && tLImwDishCount.Count == 1 && tLImwDish.allLoadInst.mwDish.MwDishLibrary.polarityType.Name.ToLower() == "single")
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"can not selected this MWDish because found other MWODU installed directly and polarityType to MWDish is single ", (int)ApiReturnCode.fail);
                                        else if (tLImwDishCount != null && tLImwDishCount.Count == 2 && tLImwDish.allLoadInst.mwDish.MwDishLibrary.polarityType.Name.ToLower() == "dual")
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"can not selected this MWDish because found tow MWODU installed directly and polarityType to MWDish is dual ", (int)ApiReturnCode.fail);

                                        if (TLIMWODU.ReservedSpace == true && MWInstallationViewModel.civilLoads.ReservedSpace == true)
                                        {
                                            var Message = _unitOfWork.CivilWithLegsRepository.CheckAvailableSpaceOnCivils(CivilFound.allCivilInst).Message;

                                            if (Message != "Success")
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(true, null, null, Message, (int)ApiReturnCode.fail);
                                            }
                                            if (mwODU.CenterHigh <= 0)
                                            {
                                                if (mwODU.HBA <= 0)
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HBA_Surface must bigger from zero", (int)ApiReturnCode.fail);
                                                }
                                                else if (TLIMWODU.allLoadInst.mwODU.MwODULibrary.Height <= 0)
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "CenterHigh must bigger from zero", (int)ApiReturnCode.fail);
                                                }
                                                else
                                                {
                                                    mwODU.CenterHigh = mwODU.HBA + TLIMWODU.allLoadInst.mwODU.MwODULibrary.Height / 2;
                                                }
                                            }
                                            if (mwODU.SpaceInstallation == 0)
                                            {
                                                if (TLIMWODU.allLoadInst.mwODU.MwODULibrary.SpaceLibrary == 0)
                                                {
                                                    if (TLIMWODU.allLoadInst.mwODU.MwODULibrary.Height == 0)
                                                    {
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "SpaceInstallation must bigger from zero", (int)ApiReturnCode.fail);
                                                    }
                                                    mwODU.SpaceInstallation = TLIMWODU.allLoadInst.mwODU.MwODULibrary.Height * TLIMWODU.allLoadInst.mwODU.MwODULibrary.Width;
                                                }
                                                else
                                                {
                                                    mwODU.SpaceInstallation = TLIMWODU.allLoadInst.mwODU.MwODULibrary.SpaceLibrary;
                                                }
                                            }

                                            if (mwODU.Azimuth <= 0)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Azimuth must bigger from zero", (int)ApiReturnCode.fail);
                                            }
                                            if (mwODU.Height <= 0)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HeightBase must bigger from zero", (int)ApiReturnCode.fail);
                                            }
                                            var CheckAzimuthAndHeightBase = _dbContext.MV_MWODU_VIEW.Where(
                                            x => x.ALLCIVILID == CivilFound.allCivilInst.Id && x.Id != mwODU.Id &&
                                            x.SIDEARMID == MWInstallationViewModel.installationConfig.sideArmId && x.Azimuth ==
                                            mwODU.Azimuth && x.Height == mwODU.Height).ToList();

                                            if (CheckAzimuthAndHeightBase != null)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the ODU on same azimuth and height because found other ODU in same angle", (int)ApiReturnCode.fail);
                                            }
                                            if (tLImwDish.allLoadInst.mwDish != null && TLIMWODU.allLoadInst.mwODU.MwODULibrary.Model != null)
                                            {
                                                mwODU.Name = tLImwDish.allLoadInst.mwDish.DishName + ' ' + TLIMWODU.allLoadInst.mwODU.MwODULibrary.Model + ' ' + tLImwDish.allLoadInst.
                                                    mwDish.MwDishLibrary.polarityType.Name;
                                            }
                                            var CheckName = _dbContext.MV_MWODU_VIEW.FirstOrDefault(x => !x.Dismantle &&
                                                        (x.Id != null ? x.Name.ToLower() == mwODU.Name.ToLower() : false
                                                            && x.Id != mwODU.Id && x.SiteCode.ToLower() == CivilFound.SiteCode.ToLower()));
                                            if (CheckName != null)
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The name {mwODU.Name} is already exists", (int)Helpers.Constants.ApiReturnCode.fail);

                                            if (CivilFound.allCivilInst.civilWithoutLeg?.CurrentLoads == null)
                                            {
                                                CivilFound.allCivilInst.civilWithoutLeg.CurrentLoads = 0;
                                            }
                                            var OldVcivilinfo = _dbContext.TLIcivilWithoutLeg.AsNoTracking().FirstOrDefault(x => x.Id == CivilFound.allCivilInst.civilWithoutLegId);

                                            if (OldVcivilinfo != null)
                                            {
                                                if (mwODU.SpaceInstallation != 0 && mwODU.CenterHigh != 0 && CivilFound.allCivilInst.civilWithoutLeg.HeightBase != 0)
                                                {
                                                    CivilFound.allCivilInst.civilWithLegs.CurrentLoads -= TLIMWODU.allLoadInst.mwODU.EquivalentSpace;
                                                    var EquivalentSpace = mwODU.SpaceInstallation * (mwODU.CenterHigh / CivilFound.allCivilInst.civilWithoutLeg.HeightBase);
                                                    CivilFound.allCivilInst.civilWithLegs.CurrentLoads += EquivalentSpace;
                                                    mwODU.EquivalentSpace = EquivalentSpace;
                                                    _unitOfWork.CivilWithoutLegRepository.UpdateWithHistory(UserId, OldVcivilinfo, CivilFound.allCivilInst.civilWithoutLeg);
                                                    _unitOfWork.SaveChanges();
                                                }
                                            }
                                            mwODU.MwODULibraryId = MWInstallationViewModel.civilType.MwODULibraryId;
                                            mwODU.Mw_DishId = MWInstallationViewModel.installationConfig.mwDishId;
                                            mwODU.OduInstallationTypeId = MWInstallationViewModel.installationConfig.InstallationPlaceId;
                                            _unitOfWork.MW_ODURepository.UpdateWithHistory(UserId, TLIMWODU.allLoadInst.mwODU, mwODU);
                                            await _unitOfWork.SaveChangesAsync();

                                            if (MWInstallationViewModel.civilLoads != null)
                                            {
                                                TLIcivilLoads TLIMWODUs = _dbContext.TLIcivilLoads.Include(x => x.allLoadInst).ThenInclude(x => x.mwODU).ThenInclude(x => x.MwODULibrary)
                                                .FirstOrDefault(x => x.allLoadInstId != null && !x.Dismantle && x.allLoadInst.mwODUId
                                                    == MWInstallationViewModel.installationAttributes.Id);

                                                TLIcivilLoads existingEntity = _unitOfWork.CivilLoadsRepository.GetAllAsQueryable().AsNoTracking().
                                                  Include(x => x.allLoadInst).ThenInclude(x => x.mwODU).ThenInclude(x => x.MwODULibrary).
                                                  FirstOrDefault(x => x.allLoadInstId != null && !x.Dismantle && x.allLoadInst.mwODUId
                                                   == MWInstallationViewModel.installationAttributes.Id);

                                                TLIMWODUs.allCivilInstId = CivilFound.allCivilInstId;
                                                TLIMWODUs.InstallationDate = MWInstallationViewModel.civilLoads.InstallationDate;
                                                TLIMWODUs.ItemOnCivilStatus = MWInstallationViewModel.civilLoads.ItemOnCivilStatus;
                                                TLIMWODUs.ItemStatus = MWInstallationViewModel.civilLoads?.ItemStatus;
                                                TLIMWODUs.ReservedSpace = MWInstallationViewModel.civilLoads.ReservedSpace;
                                                TLIMWODUs.SiteCode = tLImwDish.SiteCode;
                                                _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, existingEntity, TLIMWODUs);
                                                await _unitOfWork.SaveChangesAsync();
                                            }
                                            if (MWInstallationViewModel.dynamicAttribute != null ? MWInstallationViewModel.dynamicAttribute.Count() > 0 : false)
                                                _unitOfWork.DynamicAttInstValueRepository.UpdateDynamicValues(UserId, MWInstallationViewModel.dynamicAttribute, TableNameId, mwODU.Id, ConnectionString);
                                        }
                                        else if (TLIMWODU.ReservedSpace == false && MWInstallationViewModel.civilLoads.ReservedSpace == true)
                                        {
                                            var Message = _unitOfWork.CivilWithLegsRepository.CheckAvailableSpaceOnCivils(CivilFound.allCivilInst).Message;

                                            if (Message != "Success")
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(true, null, null, Message, (int)ApiReturnCode.fail);
                                            }
                                            if (mwODU.CenterHigh <= 0)
                                            {
                                                if (mwODU.HBA <= 0)
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HBA_Surface must bigger from zero", (int)ApiReturnCode.fail);
                                                }
                                                else if (TLIMWODU.allLoadInst.mwODU.MwODULibrary.Height <= 0)
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "CenterHigh must bigger from zero", (int)ApiReturnCode.fail);
                                                }
                                                else
                                                {
                                                    mwODU.CenterHigh = mwODU.HBA + TLIMWODU.allLoadInst.mwODU.MwODULibrary.Height / 2;
                                                }
                                            }
                                            if (mwODU.SpaceInstallation == 0)
                                            {
                                                if (TLIMWODU.allLoadInst.mwODU.MwODULibrary.SpaceLibrary == 0)
                                                {
                                                    if (TLIMWODU.allLoadInst.mwODU.MwODULibrary.Height == 0)
                                                    {
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "SpaceInstallation must bigger from zero", (int)ApiReturnCode.fail);
                                                    }
                                                    mwODU.SpaceInstallation = TLIMWODU.allLoadInst.mwODU.MwODULibrary.Height * TLIMWODU.allLoadInst.mwODU.MwODULibrary.Width;
                                                }
                                                else
                                                {
                                                    mwODU.SpaceInstallation = TLIMWODU.allLoadInst.mwODU.MwODULibrary.SpaceLibrary;
                                                }
                                            }

                                            if (mwODU.Azimuth <= 0)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Azimuth must bigger from zero", (int)ApiReturnCode.fail);
                                            }
                                            if (mwODU.Height <= 0)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HeightBase must bigger from zero", (int)ApiReturnCode.fail);
                                            }
                                            var CheckAzimuthAndHeightBase = _dbContext.MV_MWODU_VIEW.Where(
                                            x => x.ALLCIVILID == CivilFound.allCivilInst.Id && x.Id != mwODU.Id &&
                                            x.SIDEARMID == MWInstallationViewModel.installationConfig.sideArmId && x.Azimuth ==
                                            mwODU.Azimuth && x.Height == mwODU.Height).ToList();

                                            if (CheckAzimuthAndHeightBase != null)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the ODU on same azimuth and height because found other ODU in same angle", (int)ApiReturnCode.fail);
                                            }

                                            if (tLImwDish.allLoadInst.mwDish != null && TLIMWODU.allLoadInst.mwODU.MwODULibrary.Model != null)
                                            {
                                                mwODU.Name = tLImwDish.allLoadInst.mwDish.DishName + ' ' + TLIMWODU.allLoadInst.mwODU.MwODULibrary.Model + ' ' + tLImwDish.allLoadInst.
                                                    mwDish.MwDishLibrary.polarityType.Name;
                                            }
                                            var CheckName = _dbContext.MV_MWODU_VIEW.FirstOrDefault(x => !x.Dismantle &&
                                                        (x.Id != null ? x.Name.ToLower() == mwODU.Name.ToLower() : false
                                                            && x.Id != mwODU.Id && x.SiteCode.ToLower() == CivilFound.SiteCode.ToLower()));
                                            if (CheckName != null)
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The name {mwODU.Name} is already exists", (int)Helpers.Constants.ApiReturnCode.fail);

                                            if (CivilFound.allCivilInst.civilWithoutLeg?.CurrentLoads == null)
                                            {
                                                CivilFound.allCivilInst.civilWithoutLeg.CurrentLoads = 0;
                                            }
                                            var OldVcivilinfo = _dbContext.TLIcivilWithoutLeg.AsNoTracking().FirstOrDefault(x => x.Id == CivilFound.allCivilInst.civilWithoutLegId);

                                            if (OldVcivilinfo != null)
                                            {
                                                if (mwODU.SpaceInstallation != 0 && mwODU.CenterHigh != 0 && CivilFound.allCivilInst.civilWithoutLeg.HeightBase != 0)
                                                {
                                                    var EquivalentSpace = mwODU.SpaceInstallation * (mwODU.CenterHigh / CivilFound.allCivilInst.civilWithoutLeg.HeightBase);

                                                    CivilFound.allCivilInst.civilWithLegs.CurrentLoads += EquivalentSpace;
                                                    mwODU.EquivalentSpace = EquivalentSpace;
                                                    _unitOfWork.CivilWithoutLegRepository.UpdateWithHistory(UserId, OldVcivilinfo, CivilFound.allCivilInst.civilWithoutLeg);
                                                    _unitOfWork.SaveChanges();
                                                }
                                            }
                                            mwODU.MwODULibraryId = MWInstallationViewModel.civilType.MwODULibraryId;
                                            mwODU.Mw_DishId = MWInstallationViewModel.installationConfig.mwDishId;
                                            mwODU.OduInstallationTypeId = MWInstallationViewModel.installationConfig.InstallationPlaceId;
                                            _unitOfWork.MW_ODURepository.UpdateWithHistory(UserId, TLIMWODU.allLoadInst.mwODU, mwODU);
                                            await _unitOfWork.SaveChangesAsync();

                                            if (MWInstallationViewModel.civilLoads != null)
                                            {
                                                TLIcivilLoads TLIMWODUs = _dbContext.TLIcivilLoads.Include(x => x.allLoadInst).ThenInclude(x => x.mwODU).ThenInclude(x => x.MwODULibrary)
                                                .FirstOrDefault(x => x.allLoadInstId != null && !x.Dismantle && x.allLoadInst.mwODUId
                                                    == MWInstallationViewModel.installationAttributes.Id);

                                                TLIcivilLoads existingEntity = _unitOfWork.CivilLoadsRepository.GetAllAsQueryable().AsNoTracking().
                                                  Include(x => x.allLoadInst).ThenInclude(x => x.mwODU).ThenInclude(x => x.MwODULibrary).
                                                  FirstOrDefault(x => x.allLoadInstId != null && !x.Dismantle && x.allLoadInst.mwODUId
                                                   == MWInstallationViewModel.installationAttributes.Id);

                                                TLIMWODUs.allCivilInstId = CivilFound.allCivilInstId;
                                                TLIMWODUs.InstallationDate = MWInstallationViewModel.civilLoads.InstallationDate;
                                                TLIMWODUs.ItemOnCivilStatus = MWInstallationViewModel.civilLoads.ItemOnCivilStatus;
                                                TLIMWODUs.ItemStatus = MWInstallationViewModel.civilLoads?.ItemStatus;
                                                TLIMWODUs.ReservedSpace = MWInstallationViewModel.civilLoads.ReservedSpace;
                                                TLIMWODUs.SiteCode = tLImwDish.SiteCode;
                                                _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, existingEntity, TLIMWODUs);
                                                await _unitOfWork.SaveChangesAsync();
                                            }

                                            if (MWInstallationViewModel.dynamicAttribute != null ? MWInstallationViewModel.dynamicAttribute.Count() > 0 : false)
                                                _unitOfWork.DynamicAttInstValueRepository.UpdateDynamicValues(UserId, MWInstallationViewModel.dynamicAttribute, TableNameId, mwODU.Id, ConnectionString);
                                        }
                                        else if (TLIMWODU.ReservedSpace == true && MWInstallationViewModel.civilLoads.ReservedSpace == false)
                                        {
                                            var Message = _unitOfWork.CivilWithLegsRepository.CheckAvailableSpaceOnCivils(CivilFound.allCivilInst).Message;

                                            if (Message != "Success")
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(true, null, null, Message, (int)ApiReturnCode.fail);
                                            }
                                            if (mwODU.CenterHigh <= 0)
                                            {
                                                if (mwODU.HBA <= 0)
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HBA_Surface must bigger from zero", (int)ApiReturnCode.fail);
                                                }
                                                else if (TLIMWODU.allLoadInst.mwODU.MwODULibrary.Height <= 0)
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "CenterHigh must bigger from zero", (int)ApiReturnCode.fail);
                                                }
                                                else
                                                {
                                                    mwODU.CenterHigh = mwODU.HBA + TLIMWODU.allLoadInst.mwODU.MwODULibrary.Height / 2;
                                                }
                                            }
                                            if (mwODU.SpaceInstallation == 0)
                                            {
                                                if (TLIMWODU.allLoadInst.mwODU.MwODULibrary.SpaceLibrary == 0)
                                                {
                                                    if (TLIMWODU.allLoadInst.mwODU.MwODULibrary.Height == 0)
                                                    {
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "SpaceInstallation must bigger from zero", (int)ApiReturnCode.fail);
                                                    }
                                                    mwODU.SpaceInstallation = TLIMWODU.allLoadInst.mwODU.MwODULibrary.Height * TLIMWODU.allLoadInst.mwODU.MwODULibrary.Width;
                                                }
                                                else
                                                {
                                                    mwODU.SpaceInstallation = TLIMWODU.allLoadInst.mwODU.MwODULibrary.SpaceLibrary;
                                                }
                                            }

                                            if (mwODU.Azimuth <= 0)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Azimuth must bigger from zero", (int)ApiReturnCode.fail);
                                            }
                                            if (mwODU.Height <= 0)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HeightBase must bigger from zero", (int)ApiReturnCode.fail);
                                            }
                                            var CheckAzimuthAndHeightBase = _dbContext.MV_MWODU_VIEW.Where(
                                            x => x.ALLCIVILID == CivilFound.allCivilInst.Id && x.Id != mwODU.Id &&
                                            x.SIDEARMID == MWInstallationViewModel.installationConfig.sideArmId && x.Azimuth ==
                                            mwODU.Azimuth && x.Height == mwODU.Height).ToList();

                                            if (CheckAzimuthAndHeightBase != null)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the ODU on same azimuth and height because found other ODU in same angle", (int)ApiReturnCode.fail);
                                            }

                                            if (tLImwDish.allLoadInst.mwDish != null && TLIMWODU.allLoadInst.mwODU.MwODULibrary.Model != null)
                                            {
                                                mwODU.Name = tLImwDish.allLoadInst.mwDish.DishName + ' ' + TLIMWODU.allLoadInst.mwODU.MwODULibrary.Model + ' ' + tLImwDish.allLoadInst.
                                                    mwDish.MwDishLibrary.polarityType.Name;
                                            }
                                            var CheckName = _dbContext.MV_MWODU_VIEW.FirstOrDefault(x => !x.Dismantle &&
                                                        (x.Id != null ? x.Name.ToLower() == mwODU.Name.ToLower() : false
                                                            && x.Id != mwODU.Id && x.SiteCode.ToLower() == CivilFound.SiteCode.ToLower()));
                                            if (CheckName != null)
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The name {mwODU.Name} is already exists", (int)Helpers.Constants.ApiReturnCode.fail);

                                            if (CivilFound.allCivilInst.civilWithoutLeg?.CurrentLoads == null)
                                            {
                                                CivilFound.allCivilInst.civilWithoutLeg.CurrentLoads = 0;
                                            }
                                            var OldVcivilinfo = _dbContext.TLIcivilWithoutLeg.AsNoTracking().FirstOrDefault(x => x.Id == CivilFound.allCivilInst.civilWithoutLegId);

                                            if (OldVcivilinfo != null)
                                            {
                                                CivilFound.allCivilInst.civilWithoutLeg.CurrentLoads = CivilFound.allCivilInst.civilWithoutLeg.CurrentLoads - TLIMWODU.allLoadInst.mwODU.EquivalentSpace;
                                                _unitOfWork.CivilWithoutLegRepository.UpdateWithHistory(UserId, OldVcivilinfo, CivilFound.allCivilInst.civilWithoutLeg);
                                                _unitOfWork.SaveChanges();

                                            }
                                            mwODU.MwODULibraryId = MWInstallationViewModel.civilType.MwODULibraryId;
                                            mwODU.Mw_DishId = MWInstallationViewModel.installationConfig.mwDishId;
                                            mwODU.OduInstallationTypeId = MWInstallationViewModel.installationConfig.InstallationPlaceId;
                                            _unitOfWork.MW_ODURepository.UpdateWithHistory(UserId, TLIMWODU.allLoadInst.mwODU, mwODU);
                                            await _unitOfWork.SaveChangesAsync();

                                            if (MWInstallationViewModel.civilLoads != null)
                                            {
                                                TLIcivilLoads TLIMWODUs = _dbContext.TLIcivilLoads.Include(x => x.allLoadInst).ThenInclude(x => x.mwODU).ThenInclude(x => x.MwODULibrary)
                                                .FirstOrDefault(x => x.allLoadInstId != null && !x.Dismantle && x.allLoadInst.mwODUId
                                                    == MWInstallationViewModel.installationAttributes.Id);

                                                TLIcivilLoads existingEntity = _unitOfWork.CivilLoadsRepository.GetAllAsQueryable().AsNoTracking().
                                                  Include(x => x.allLoadInst).ThenInclude(x => x.mwODU).ThenInclude(x => x.MwODULibrary).
                                                  FirstOrDefault(x => x.allLoadInstId != null && !x.Dismantle && x.allLoadInst.mwODUId
                                                   == MWInstallationViewModel.installationAttributes.Id);

                                                TLIMWODUs.allCivilInstId = CivilFound.allCivilInstId;
                                                TLIMWODUs.InstallationDate = MWInstallationViewModel.civilLoads.InstallationDate;
                                                TLIMWODUs.ItemOnCivilStatus = MWInstallationViewModel.civilLoads.ItemOnCivilStatus;
                                                TLIMWODUs.ItemStatus = MWInstallationViewModel.civilLoads?.ItemStatus;
                                                TLIMWODUs.ReservedSpace = MWInstallationViewModel.civilLoads.ReservedSpace;
                                                TLIMWODUs.SiteCode = tLImwDish.SiteCode;
                                                _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, existingEntity, TLIMWODUs);
                                                await _unitOfWork.SaveChangesAsync();
                                            }
                                            if (MWInstallationViewModel.dynamicAttribute != null ? MWInstallationViewModel.dynamicAttribute.Count() > 0 : false)
                                                _unitOfWork.DynamicAttInstValueRepository.UpdateDynamicValues(UserId, MWInstallationViewModel.dynamicAttribute, TableNameId, mwODU.Id, ConnectionString);
                                        }
                                        else if (TLIMWODU.ReservedSpace == false && MWInstallationViewModel.civilLoads.ReservedSpace == false)
                                        {
                                            var Message = _unitOfWork.CivilWithLegsRepository.CheckAvailableSpaceOnCivils(CivilFound.allCivilInst).Message;

                                            if (Message != "Success")
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(true, null, null, Message, (int)ApiReturnCode.fail);
                                            }
                                            if (mwODU.CenterHigh <= 0)
                                            {
                                                if (mwODU.HBA <= 0)
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HBA_Surface must bigger from zero", (int)ApiReturnCode.fail);
                                                }
                                                else if (TLIMWODU.allLoadInst.mwODU.MwODULibrary.Height <= 0)
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "CenterHigh must bigger from zero", (int)ApiReturnCode.fail);
                                                }
                                                else
                                                {
                                                    mwODU.CenterHigh = mwODU.HBA + TLIMWODU.allLoadInst.mwODU.MwODULibrary.Height / 2;
                                                }
                                            }
                                            if (mwODU.SpaceInstallation == 0)
                                            {
                                                if (TLIMWODU.allLoadInst.mwODU.MwODULibrary.SpaceLibrary == 0)
                                                {
                                                    if (TLIMWODU.allLoadInst.mwODU.MwODULibrary.Height == 0)
                                                    {
                                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "SpaceInstallation must bigger from zero", (int)ApiReturnCode.fail);
                                                    }
                                                    mwODU.SpaceInstallation = TLIMWODU.allLoadInst.mwODU.MwODULibrary.Height * TLIMWODU.allLoadInst.mwODU.MwODULibrary.Width;
                                                }
                                                else
                                                {
                                                    mwODU.SpaceInstallation = TLIMWODU.allLoadInst.mwODU.MwODULibrary.SpaceLibrary;
                                                }
                                            }

                                            if (mwODU.Azimuth <= 0)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Azimuth must bigger from zero", (int)ApiReturnCode.fail);
                                            }
                                            if (mwODU.Height <= 0)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HeightBase must bigger from zero", (int)ApiReturnCode.fail);
                                            }
                                            var CheckAzimuthAndHeightBase = _dbContext.MV_MWODU_VIEW.Where(
                                            x => x.ALLCIVILID == CivilFound.allCivilInst.Id && x.Id != mwODU.Id &&
                                            x.SIDEARMID == MWInstallationViewModel.installationConfig.sideArmId && x.Azimuth ==
                                            mwODU.Azimuth && x.Height == mwODU.Height).ToList();

                                            if (CheckAzimuthAndHeightBase != null)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the ODU on same azimuth and height because found other ODU in same angle", (int)ApiReturnCode.fail);
                                            }

                                            if (tLImwDish.allLoadInst.mwDish != null && TLIMWODU.allLoadInst.mwODU.MwODULibrary.Model != null)
                                            {
                                                mwODU.Name = tLImwDish.allLoadInst.mwDish.DishName + ' ' + TLIMWODU.allLoadInst.mwODU.MwODULibrary.Model + ' ' + tLImwDish.allLoadInst.
                                                    mwDish.MwDishLibrary.polarityType.Name;
                                            }
                                            var CheckName = _dbContext.MV_MWODU_VIEW.FirstOrDefault(x => !x.Dismantle &&
                                                        (x.Id != null ? x.Name.ToLower() == mwODU.Name.ToLower() : false
                                                            && x.Id != mwODU.Id && x.SiteCode.ToLower() == CivilFound.SiteCode.ToLower()));
                                            if (CheckName != null)
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The name {mwODU.Name} is already exists", (int)Helpers.Constants.ApiReturnCode.fail);

                                            mwODU.MwODULibraryId = MWInstallationViewModel.civilType.MwODULibraryId;
                                            mwODU.Mw_DishId = MWInstallationViewModel.installationConfig.mwDishId;
                                            mwODU.OduInstallationTypeId = MWInstallationViewModel.installationConfig.InstallationPlaceId;
                                            _unitOfWork.MW_ODURepository.UpdateWithHistory(UserId, TLIMWODU.allLoadInst.mwODU, mwODU);
                                            await _unitOfWork.SaveChangesAsync();

                                            if (MWInstallationViewModel.civilLoads != null)
                                            {
                                                TLIcivilLoads TLIMWODUs = _dbContext.TLIcivilLoads.Include(x => x.allLoadInst).ThenInclude(x => x.mwODU).ThenInclude(x => x.MwODULibrary)
                                                .FirstOrDefault(x => x.allLoadInstId != null && !x.Dismantle && x.allLoadInst.mwODUId
                                                    == MWInstallationViewModel.installationAttributes.Id);

                                                TLIcivilLoads existingEntity = _unitOfWork.CivilLoadsRepository.GetAllAsQueryable().AsNoTracking().
                                                  Include(x => x.allLoadInst).ThenInclude(x => x.mwODU).ThenInclude(x => x.MwODULibrary).
                                                  FirstOrDefault(x => x.allLoadInstId != null && !x.Dismantle && x.allLoadInst.mwODUId
                                                   == MWInstallationViewModel.installationAttributes.Id);

                                                TLIMWODUs.allCivilInstId = CivilFound.allCivilInstId;
                                                TLIMWODUs.InstallationDate = MWInstallationViewModel.civilLoads.InstallationDate;
                                                TLIMWODUs.ItemOnCivilStatus = MWInstallationViewModel.civilLoads.ItemOnCivilStatus;
                                                TLIMWODUs.ItemStatus = MWInstallationViewModel.civilLoads?.ItemStatus;
                                                TLIMWODUs.ReservedSpace = MWInstallationViewModel.civilLoads.ReservedSpace;
                                                TLIMWODUs.SiteCode = tLImwDish.SiteCode;
                                                _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, existingEntity, TLIMWODUs);
                                                await _unitOfWork.SaveChangesAsync();
                                            }

                                            if (MWInstallationViewModel.dynamicAttribute != null ? MWInstallationViewModel.dynamicAttribute.Count() > 0 : false)
                                                _unitOfWork.DynamicAttInstValueRepository.UpdateDynamicValues(UserId, MWInstallationViewModel.dynamicAttribute, TableNameId, mwODU.Id, ConnectionString);
                                        }
                                    }
                                    else
                                    {
                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "must selected MWDish to installed this MWODU", (int)ApiReturnCode.fail);
                                    }
                                }
                                else
                                {
                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "must selected sidearm to installed this MWODU", (int)ApiReturnCode.fail);
                                }

                            }
                            else
                            {
                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "must selected civilwithoutlegs to installed this MWODU", (int)ApiReturnCode.fail);
                            }
                        }
                        if (MWInstallationViewModel.installationConfig?.civilSteelType == 2)
                        {
                            if (MWInstallationViewModel.installationConfig?.civilNonSteelId != null)
                            {
                                TLIcivilLoads CivilFound = _unitOfWork.CivilLoadsRepository.GetWhereFirst(x => !x.Dismantle
                                && x.allCivilInst.civilNonSteelId == MWInstallationViewModel.installationConfig.civilNonSteelId && x.SiteCode.ToLower() == TLIMWODU.SiteCode.ToLower());
                                if (CivilFound == null)
                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Civil is not found", (int)ApiReturnCode.fail);

                                if (MWInstallationViewModel.installationConfig?.sideArmId != null)
                                {
                                    if (MWInstallationViewModel.installationConfig?.mwDishId != null)
                                    {
                                        if (!string.IsNullOrEmpty(mwODU.Serial_Number))
                                        {
                                            bool CheckSerialNumber = _dbContext.MV_MWODU_VIEW.Any(x => x.Serial_Number == mwODU.Serial_Number && x.Id != mwODU.Id && !x.Dismantle);
                                            if (CheckSerialNumber)
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The Serial Number {mwODU.Serial_Number} is already exists", (int)ApiReturnCode.fail);
                                        }
                                        TLIcivilLoads SideArm = _unitOfWork.CivilLoadsRepository.GetWhereFirst(x => !x.Dismantle && x.sideArmId != null
                                        && x.allCivilInstId == CivilFound.allCivilInstId && x.sideArmId == MWInstallationViewModel.installationConfig.sideArmId
                                        && x.SiteCode.ToLower() == TLIMWODU.SiteCode.ToLower());
                                        if (SideArm == null)
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "SideArm is not found", (int)ApiReturnCode.fail);

                                        TLIcivilLoads tLImwDish = _unitOfWork.CivilLoadsRepository.GetAllAsQueryable().AsNoTracking()
                                        .Include(x => x.allLoadInst).ThenInclude(x => x.mwDish).ThenInclude(x => x.MwDishLibrary).Include(x => x.allCivilInst)
                                        .Include(x => x.sideArm).FirstOrDefault(x => x.allLoadInstId != null
                                        && !x.Dismantle && x.sideArmId != null && x.allCivilInstId != null && x.allCivilInstId == CivilFound.allCivilInstId
                                        && x.sideArmId == MWInstallationViewModel.installationConfig.sideArmId && x.allLoadInst.mwDishId == MWInstallationViewModel.installationConfig.mwDishId
                                        && x.SiteCode.ToLower() == CivilFound.SiteCode.ToLower());
                                        if (tLImwDish == null)
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "MWDish is not found", (int)ApiReturnCode.fail);
                                        List<TLIcivilLoads> tLImwDishCount = _unitOfWork.CivilLoadsRepository.GetAllAsQueryable().AsNoTracking()
                                        .Where(x => x.allLoadInstId != null && !x.Dismantle && x.allLoadInst.mwODU.Id != mwODU.Id && x.allLoadInst.mwODU.Mw_DishId == MWInstallationViewModel.installationConfig.mwDishId
                                         && x.SiteCode.ToLower() == tLImwDish.SiteCode.ToLower()).Include(x => x.allLoadInst).ThenInclude(x => x.mwODU).ThenInclude(x => x.Mw_Dish)
                                        .ThenInclude(x => x.MwDishLibrary).ToList();

                                        if (tLImwDishCount != null && tLImwDishCount.Count == 1 && tLImwDish.allLoadInst.mwDish.MwDishLibrary.polarityType.Name.ToLower() == "single")
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"can not selected this MWDish because found other MWODU installed directly and polarityType to MWDish is single ", (int)ApiReturnCode.fail);
                                        else if (tLImwDishCount != null && tLImwDishCount.Count == 2 && tLImwDish.allLoadInst.mwDish.MwDishLibrary.polarityType.Name.ToLower() == "dual")
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"can not selected this MWDish because found tow MWODU installed directly and polarityType to MWDish is dual ", (int)ApiReturnCode.fail);


                                        var Message = _unitOfWork.CivilWithLegsRepository.CheckAvailableSpaceOnCivils(CivilFound.allCivilInst).Message;

                                        if (Message != "Success")
                                        {
                                            return new Response<GetForAddMWDishInstallationObject>(true, null, null, Message, (int)ApiReturnCode.fail);
                                        }
                                        if (mwODU.CenterHigh <= 0)
                                        {
                                            if (mwODU.HBA <= 0)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HBA_Surface must bigger from zero", (int)ApiReturnCode.fail);
                                            }
                                            else if (TLIMWODU.allLoadInst.mwODU.MwODULibrary.Height <= 0)
                                            {
                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "CenterHigh must bigger from zero", (int)ApiReturnCode.fail);
                                            }
                                            else
                                            {
                                                mwODU.CenterHigh = mwODU.HBA + TLIMWODU.allLoadInst.mwODU.MwODULibrary.Height / 2;
                                            }
                                        }
                                        if (mwODU.SpaceInstallation == 0)
                                        {
                                            if (TLIMWODU.allLoadInst.mwODU.MwODULibrary.SpaceLibrary == 0)
                                            {
                                                if (TLIMWODU.allLoadInst.mwODU.MwODULibrary.Height == 0)
                                                {
                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "SpaceInstallation must bigger from zero", (int)ApiReturnCode.fail);
                                                }
                                                mwODU.SpaceInstallation = TLIMWODU.allLoadInst.mwODU.MwODULibrary.Height * TLIMWODU.allLoadInst.mwODU.MwODULibrary.Width;
                                            }
                                            else
                                            {
                                                mwODU.SpaceInstallation = TLIMWODU.allLoadInst.mwODU.MwODULibrary.SpaceLibrary;
                                            }
                                        }

                                        if (mwODU.Azimuth <= 0)
                                        {
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Azimuth must bigger from zero", (int)ApiReturnCode.fail);
                                        }
                                        if (mwODU.Height <= 0)
                                        {
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HeightBase must bigger from zero", (int)ApiReturnCode.fail);
                                        }
                                        var CheckAzimuthAndHeightBase = _dbContext.MV_MWODU_VIEW.Where(
                                        x => x.ALLCIVILID == CivilFound.allCivilInst.Id && x.Id != mwODU.Id &&
                                        x.SIDEARMID == MWInstallationViewModel.installationConfig.sideArmId && x.Azimuth ==
                                        mwODU.Azimuth && x.Height == mwODU.Height).ToList();

                                        if (CheckAzimuthAndHeightBase != null)
                                        {
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the ODU on same azimuth and height because found other ODU in same angle", (int)ApiReturnCode.fail);
                                        }

                                        if (tLImwDish.allLoadInst.mwDish != null && TLIMWODU.allLoadInst.mwODU.MwODULibrary.Model != null)
                                        {
                                            mwODU.Name = tLImwDish.allLoadInst.mwDish.DishName + ' ' + TLIMWODU.allLoadInst.mwODU.MwODULibrary.Model + ' ' + tLImwDish.allLoadInst.
                                                mwDish.MwDishLibrary.polarityType.Name;
                                        }
                                        var CheckName = _dbContext.MV_MWODU_VIEW.FirstOrDefault(x => !x.Dismantle &&
                                                        (x.Id != null ? x.Name.ToLower() == mwODU.Name.ToLower() : false
                                                            && x.Id != mwODU.Id && x.SiteCode.ToLower() == CivilFound.SiteCode.ToLower()));
                                        if (CheckName != null)
                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The name {mwODU.Name} is already exists", (int)Helpers.Constants.ApiReturnCode.fail);

                                        mwODU.MwODULibraryId = MWInstallationViewModel.civilType.MwODULibraryId;
                                        mwODU.Mw_DishId = MWInstallationViewModel.installationConfig.mwDishId;
                                        mwODU.OduInstallationTypeId = MWInstallationViewModel.installationConfig.InstallationPlaceId;
                                        _unitOfWork.MW_ODURepository.UpdateWithHistory(UserId, TLIMWODU.allLoadInst.mwODU, mwODU);
                                        await _unitOfWork.SaveChangesAsync();

                                        if (MWInstallationViewModel.civilLoads != null)
                                        {
                                            TLIcivilLoads TLIMWODUs = _dbContext.TLIcivilLoads.Include(x => x.allLoadInst).ThenInclude(x => x.mwODU).ThenInclude(x => x.MwODULibrary)
                                            .FirstOrDefault(x => x.allLoadInstId != null && !x.Dismantle && x.allLoadInst.mwODUId
                                                == MWInstallationViewModel.installationAttributes.Id);

                                            TLIcivilLoads existingEntity = _unitOfWork.CivilLoadsRepository.GetAllAsQueryable().AsNoTracking().
                                              Include(x => x.allLoadInst).ThenInclude(x => x.mwODU).ThenInclude(x => x.MwODULibrary).
                                              FirstOrDefault(x => x.allLoadInstId != null && !x.Dismantle && x.allLoadInst.mwODUId
                                               == MWInstallationViewModel.installationAttributes.Id);

                                            TLIMWODUs.allCivilInstId = CivilFound.allCivilInstId;
                                            TLIMWODUs.InstallationDate = MWInstallationViewModel.civilLoads.InstallationDate;
                                            TLIMWODUs.ItemOnCivilStatus = MWInstallationViewModel.civilLoads.ItemOnCivilStatus;
                                            TLIMWODUs.ItemStatus = MWInstallationViewModel.civilLoads?.ItemStatus;
                                            TLIMWODUs.ReservedSpace = MWInstallationViewModel.civilLoads.ReservedSpace;
                                            TLIMWODUs.SiteCode = tLImwDish.SiteCode;
                                            _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, existingEntity, TLIMWODUs);
                                            await _unitOfWork.SaveChangesAsync();
                                        }

                                        if (MWInstallationViewModel.dynamicAttribute != null ? MWInstallationViewModel.dynamicAttribute.Count() > 0 : false)
                                            _unitOfWork.DynamicAttInstValueRepository.UpdateDynamicValues(UserId, MWInstallationViewModel.dynamicAttribute, TableNameId, mwODU.Id, ConnectionString);
                                        
                                    }
                                    else
                                    {
                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "must selected MWDish to installed this MWODU", (int)ApiReturnCode.fail);
                                    }
                                }
                                else
                                {
                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "must selected sidearm to installed this MWODU", (int)ApiReturnCode.fail);
                                }
                                
                            }
                            else
                            {
                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "must selected civilnonsteel to installed this MWODU", (int)ApiReturnCode.fail);
                            }
                        }
                    }
                    if (TaskId != null)
                    {
                        var Submit = _unitOfWork.SiteRepository.SubmitTaskByTLI(TaskId);
                        var result = Submit.Result;
                        if (result.result == true && result.errorMessage == null)
                        {
                            _unitOfWork.SaveChanges();
                            transactionScope.Complete();
                        }
                        else
                        {
                            transactionScope.Dispose();
                            return new Response<GetForAddMWDishInstallationObject>(true, null, null, result.errorMessage.ToString(), (int)ApiReturnCode.fail);
                        }
                    }
                    else
                    {
                        _unitOfWork.SaveChanges();
                        transactionScope.Complete();
                    }
                    Task.Run(() => _unitOfWork.CivilWithLegsRepository.RefreshView(ConnectionString, "MV_MWODU_VIEW"));
                    return new Response<GetForAddMWDishInstallationObject>();
                }
                catch (Exception err)
                {
                    return new Response<GetForAddMWDishInstallationObject>(true, null, null, err.Message, (int)ApiReturnCode.fail);
                }
            }
        }
        public async Task<Response<GetForAddMWDishInstallationObject>> EditMWInstallation(int UserId, object MWInstallationViewModel, string TableName, int? TaskId)
        {
            using (TransactionScope transactionScope = new TransactionScope())
            {
                try
                {
                    int TableNameId = 0;
                    //if (LoadSubType.TLImwODU.ToString() == TableName)
                    //{
                    //    TableNameId = _unitOfWork.TablesNamesRepository.GetWhereFirst(x => x.TableName.ToLower() == TablesNames.TLImwODU.ToString().ToLower()).Id;
                    //    EditMW_ODUViewModel MW_ODUViewModel = _mapper.Map<EditMW_ODUViewModel>(MWInstallationViewModel);

                    //    TLIcivilLoads CivilLoads = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => !x.Dismantle && (x.allLoadInstId != null ?
                    //        x.allLoadInst.mwODUId == MW_ODUViewModel.Id : false), x => x.allLoadInst);

                    //    string SiteCode = "";

                    //    if (CivilLoads != null)
                    //        SiteCode = CivilLoads.SiteCode;

                    //    else
                    //        SiteCode = null;

                    //    TLIcivilLoads CheckName = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => !x.Dismantle && x.allLoadInst.mwODUId != MW_ODUViewModel.Id && (x.allLoadInstId != null ?
                    //        !x.allLoadInst.Draft && (x.allLoadInst.mwODUId != null ? x.allLoadInst.mwODU.Name.ToLower() == MW_ODUViewModel.Name.ToLower() : false) : false) &&
                    //        x.SiteCode.ToLower() == SiteCode.ToLower(),
                    //            x => x.allLoadInst, x => x.allLoadInst.mwODU);

                    //    if (CheckName != null)
                    //        return new Response<ObjectInstAtts>(true, null, null, $"This name [{MW_ODUViewModel.Name}] is already exists", (int)ApiReturnCode.fail);

                    //    string CheckGeneralValidation = CheckGeneralValidationFunctionEditVersion(MW_ODUViewModel.DynamicInstAttsValue, TableName);

                    //    if (!string.IsNullOrEmpty(CheckGeneralValidation))
                    //        return new Response<ObjectInstAtts>(true, null, null, CheckGeneralValidation, (int)ApiReturnCode.fail);

                    //    string CheckDependencyValidation = CheckDependencyValidationEditVersion(MWInstallationViewModel, SiteCode, TableName);

                    //    if (!string.IsNullOrEmpty(CheckDependencyValidation))
                    //        return new Response<ObjectInstAtts>(true, null, null, CheckDependencyValidation, (int)ApiReturnCode.fail);

                    //    TLImwODU mwODU = _mapper.Map<TLImwODU>(MW_ODUViewModel);
                    //    TLImwODU OldMW_ODUViewModel = _unitOfWork.MW_ODURepository.GetAllAsQueryable().AsNoTracking().FirstOrDefault(x => x.Id == MW_ODUViewModel.Id);

                    //    _unitOfWork.MW_ODURepository.UpdateWithHistory(Helpers.LogFilterAttribute.UserId, OldMW_ODUViewModel, mwODU);
                    //    var allloads = _unitOfWork.AllLoadInstRepository.GetWhereFirst(x => x.mwODUId == MW_ODUViewModel.Id).Id;
                    //    var civilloads = _unitOfWork.CivilLoadsRepository.GetWhereFirst(x => x.allLoadInstId == allloads);
                    //    CivilLoads.InstallationDate = MW_ODUViewModel.TLIcivilLoads.InstallationDate;
                    //    CivilLoads.ItemOnCivilStatus = MW_ODUViewModel.TLIcivilLoads.ItemOnCivilStatus;
                    //    CivilLoads.ItemStatus = MW_ODUViewModel.TLIcivilLoads.ItemStatus;
                    //    CivilLoads.ReservedSpace = MW_ODUViewModel.TLIcivilLoads.ReservedSpace;
                    //    CivilLoads.sideArmId = MW_ODUViewModel.TLIcivilLoads.sideArmId;
                    //    CivilLoads.allCivilInstId = MW_ODUViewModel.TLIcivilLoads.allCivilInstId;
                    //    CivilLoads.legId = MW_ODUViewModel.TLIcivilLoads.legId;
                    //    CivilLoads.Leg2Id = MW_ODUViewModel.TLIcivilLoads.Leg2Id;

                    //    _unitOfWork.SaveChanges();
                    //    if (MW_ODUViewModel.DynamicInstAttsValue != null ? MW_ODUViewModel.DynamicInstAttsValue.Count() > 0 : false)
                    //        _unitOfWork.DynamicAttInstValueRepository.UpdateDynamicValue(MW_ODUViewModel.DynamicInstAttsValue, TableNameId, mwODU.Id);

                    //    await _unitOfWork.SaveChangesAsync();

                    //}
                    //else if (LoadSubType.TLImwBU.ToString() == TableName)
                    //{
                    //    TableNameId = _unitOfWork.TablesNamesRepository.GetWhereFirst(x => x.TableName.ToLower() == TablesNames.TLImwBU.ToString().ToLower()).Id;
                    //    EditMW_BUViewModel MW_BUViewModel = _mapper.Map<EditMW_BUViewModel>(MWInstallationViewModel);

                    //    TLIcivilLoads CivilLoads = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => !x.Dismantle && (x.allLoadInstId != null ?
                    //        x.allLoadInst.mwBUId == MW_BUViewModel.Id : false), x => x.allLoadInst);

                    //    string SiteCode = "";

                    //    if (CivilLoads != null)
                    //        SiteCode = CivilLoads.SiteCode;

                    //    else
                    //        SiteCode = null;

                    //    TLIcivilLoads CheckName = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => !x.Dismantle && x.allLoadInst.mwBUId != MW_BUViewModel.Id && (x.allLoadInstId != null ?
                    //        !x.allLoadInst.Draft && (x.allLoadInst.mwBUId != null ? x.allLoadInst.mwBU.Name.ToLower() == MW_BUViewModel.Name.ToLower() : false) : false) &&
                    //        x.SiteCode.ToLower() == SiteCode.ToLower(),
                    //            x => x.allLoadInst, x => x.allLoadInst.mwBU);

                    //    if (CheckName != null)
                    //        return new Response<ObjectInstAtts>(true, null, null, $"This name [{MW_BUViewModel.Name}] is already exists", (int)ApiReturnCode.fail);

                    //    string CheckGeneralValidation = CheckGeneralValidationFunctionEditVersion(MW_BUViewModel.DynamicInstAttsValue, TableName);

                    //    if (!string.IsNullOrEmpty(CheckGeneralValidation))
                    //        return new Response<ObjectInstAtts>(true, null, null, CheckGeneralValidation, (int)ApiReturnCode.fail);

                    //    string CheckDependencyValidation = CheckDependencyValidationEditVersion(MWInstallationViewModel, SiteCode, TableName);

                    //    if (!string.IsNullOrEmpty(CheckDependencyValidation))
                    //        return new Response<ObjectInstAtts>(true, null, null, CheckDependencyValidation, (int)ApiReturnCode.fail);

                    //    TLImwBU mwBU = _mapper.Map<TLImwBU>(MW_BUViewModel);
                    //    var mw_BUInst = _unitOfWork.MW_BURepository.GetAllAsQueryable().AsNoTracking().FirstOrDefault(x => x.Id == MW_BUViewModel.Id);
                    //    if (mwBU.HBA == mw_BUInst.HBA && mwBU.CenterHigh == mw_BUInst.CenterHigh && mwBU.SpaceInstallation == mw_BUInst.SpaceInstallation && mwBU.Azimuth != mw_BUInst.Azimuth && MW_BUViewModel.TLIcivilLoads.ReservedSpace == true)
                    //    {
                    //        var message = _unitOfWork.CivilWithLegsRepository.CheckloadsOnCivil(MW_BUViewModel.TLIcivilLoads.allCivilInstId, 0, mwBU.Azimuth, mwBU.CenterHigh).Message;
                    //        if (message != "Success")
                    //        {
                    //            return new Response<ObjectInstAtts>(true, null, null, message, (int)ApiReturnCode.fail);
                    //        }
                    //    }
                    //    if (mwBU.HBA != mw_BUInst.HBA || mwBU.CenterHigh != mw_BUInst.CenterHigh || mwBU.SpaceInstallation != mw_BUInst.SpaceInstallation && MW_BUViewModel.TLIcivilLoads.ReservedSpace == true)
                    //    {
                    //        var mwBULibrary = _dbContext.TLImwBULibrary.Where(x => x.Id == mwBU.MwBULibraryId).FirstOrDefault();
                    //        if (mwBU.CenterHigh == 0 || mwBU.CenterHigh == null)
                    //        {
                    //            mwBU.CenterHigh = mwBU.HBA + mwBULibrary.Length / 2;
                    //        }
                    //        var message = _unitOfWork.CivilWithLegsRepository.CheckloadsOnCivil(MW_BUViewModel.TLIcivilLoads.allCivilInstId, 0, mwBU.Azimuth, mwBU.CenterHigh).Message;
                    //        if (message != "Success")
                    //        {
                    //            return new Response<ObjectInstAtts>(true, null, null, message, (int)ApiReturnCode.fail);
                    //        }
                    //        if (MW_BUViewModel.TLIcivilLoads.ReservedSpace == true && (MW_BUViewModel.TLIcivilLoads.sideArmId == null || MW_BUViewModel.TLIcivilLoads.sideArmId == 0))
                    //        {
                    //            mwBU.EquivalentSpace = _unitOfWork.CivilWithLegsRepository.Checkspaceload(MW_BUViewModel.TLIcivilLoads.allCivilInstId, TableName, mwBU.SpaceInstallation, mwBU.CenterHigh, mwBU.MwBULibraryId, mwBU.HBA).Data;
                    //        }
                    //    }
                    //    _unitOfWork.MW_BURepository.UpdateWithHistory(Helpers.LogFilterAttribute.UserId, mw_BUInst, mwBU);
                    //    var allloads = _unitOfWork.AllLoadInstRepository.GetWhereFirst(x => x.mwBUId == MW_BUViewModel.Id).Id;
                    //    var civilloads = _unitOfWork.CivilLoadsRepository.GetWhereFirst(x => x.allLoadInstId == allloads);
                    //    CivilLoads.InstallationDate = MW_BUViewModel.TLIcivilLoads.InstallationDate;
                    //    CivilLoads.ItemOnCivilStatus = MW_BUViewModel.TLIcivilLoads.ItemOnCivilStatus;
                    //    CivilLoads.ItemStatus = MW_BUViewModel.TLIcivilLoads.ItemStatus;
                    //    CivilLoads.ReservedSpace = MW_BUViewModel.TLIcivilLoads.ReservedSpace;
                    //    CivilLoads.sideArmId = MW_BUViewModel.TLIcivilLoads.sideArmId;
                    //    CivilLoads.allCivilInstId = MW_BUViewModel.TLIcivilLoads.allCivilInstId;
                    //    CivilLoads.legId = MW_BUViewModel.TLIcivilLoads.legId;
                    //    CivilLoads.Leg2Id = MW_BUViewModel.TLIcivilLoads.Leg2Id;

                    //    _unitOfWork.SaveChanges();
                    //    if (MW_BUViewModel.DynamicInstAttsValue != null ? MW_BUViewModel.DynamicInstAttsValue.Count > 0 : false)
                    //        _unitOfWork.DynamicAttInstValueRepository.UpdateDynamicValue(MW_BUViewModel.DynamicInstAttsValue, TableNameId, mwBU.Id);

                    //    await _unitOfWork.SaveChangesAsync();

                    //}
                    //if (LoadSubType.TLImwDish.ToString() == TableName)
                    //{
                    //    TableNameId = _unitOfWork.TablesNamesRepository.GetWhereFirst(x => x.TableName.ToLower() == TablesNames.TLImwDish.ToString().ToLower()).Id;
                    //    EditMWDishInstallationObject AddMW_Dish = _mapper.Map<EditMWDishInstallationObject>(MWInstallationViewModel);
                    //    TLImwDish mwDish = _mapper.Map<TLImwDish>(AddMW_Dish.installationAttributes);
                    //    TLIcivilLoads MWDishInst = _unitOfWork.CivilLoadsRepository.GetAllAsQueryable().AsNoTracking()
                    //       .Include(x=>x.allLoadInst).Include(x=>x.allLoadInst.mwDish).Include(x=>x.allLoadInst.mwDish.MwDishLibrary).Include(x=>x.allCivilInst)
                    //       .Include(x=>x.allCivilInst.civilNonSteel).Include(x => x.allCivilInst.civilWithLegs).Include(x => x.allCivilInst.civilWithoutLeg)
                    //       .FirstOrDefault(x => x.allLoadInstId !=null && x.allLoadInst.mwDishId == mwDish.Id && !x.Dismantle);


                    //    if (MWDishInst == null)
                    //        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "MWDish is not found", (int)ApiReturnCode.fail);

                    //    if (MWDishInst.allLoadInst.mwDish.InstallationPlaceId == 1)
                    //    {

                    //        if (MWDishInst.allCivilInst.civilWithLegsId != null)
                    //        {
                    //            if (MWDishInst.legId != null)
                    //            {

                    //                TLIcivilSiteDate AllcivilinstId = _unitOfWork.CivilSiteDateRepository.GetIncludeWhereFirst(x => x.allCivilInst.civilWithLegsId ==
                    //                MWDishInst.allCivilInst.civilWithLegsId && !x.Dismantle, x => x.allCivilInst, x => x.allCivilInst.civilWithLegs, x => x.allCivilInst.civilWithoutLeg,
                    //                x => x.allCivilInst.civilWithLegs.CivilWithLegsLib, x => x.allCivilInst.civilWithoutLeg.CivilWithoutlegsLib);
                    //                if (AllcivilinstId != null)
                    //                {
                    //                    if (MWDishInst.ReservedSpace==true && AddMW_Dish.civilLoads.ReservedSpace == true)
                    //                    {

                    //                        if (mwDish.CenterHigh <= 0)
                    //                        {
                    //                            if (mwDish.HBA_Surface <= 0)
                    //                            {
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HBA_Surface must bigger from zero", (int)ApiReturnCode.fail);
                    //                            }
                    //                            else if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter <= 0)
                    //                            {
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "CenterHigh must bigger from zero", (int)ApiReturnCode.fail);
                    //                            }
                    //                            else
                    //                            {
                    //                                mwDish.CenterHigh = mwDish.HBA + MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter / 2;
                    //                            }
                    //                        }
                    //                        if (mwDish.SpaceInstallation == 0)
                    //                        {
                    //                            if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.SpaceLibrary == 0)
                    //                            {
                    //                                if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter == 0)
                    //                                {
                    //                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "SpaceInstallation must bigger from zero", (int)ApiReturnCode.fail);
                    //                                }
                    //                                mwDish.SpaceInstallation = Convert.ToSingle(3.14) * (float)Math.Pow(MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter / 2, 2);
                    //                            }
                    //                            else
                    //                            {
                    //                                mwDish.SpaceInstallation = MWDishInst.allLoadInst.mwDish.MwDishLibrary.SpaceLibrary;
                    //                            }
                    //                        }

                    //                        if (mwDish.Azimuth <= 0)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Azimuth must bigger from zero", (int)ApiReturnCode.fail);
                    //                        }
                    //                        if (mwDish.HeightBase <= 0)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HeightBase must bigger from zero", (int)ApiReturnCode.fail);
                    //                        }
                    //                        if (!string.IsNullOrEmpty(mwDish.Serial_Number))
                    //                        {
                    //                            bool CheckSerialNumber = _unitOfWork.MW_DishRepository.Any(x => x.Serial_Number == mwDish.Serial_Number);
                    //                            if (CheckSerialNumber)
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The Serial Number {mwDish.Serial_Number} is already exists", (int)ApiReturnCode.fail);
                    //                        }
                    //                        var Checkinstallationplace = _dbContext.MV_MWDISH_VIEW.Where(
                    //                            x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id && x.INSTALLATIONPLACE.ToLower() == "steel" &&
                    //                            x.LEG_ID == MWDishInst.legId).ToList();
                    //                        var CheckAzimuthAndHeightBase = Checkinstallationplace.FirstOrDefault(x => x.Azimuth ==
                    //                        mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                    //                        if (CheckAzimuthAndHeightBase != null)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                    //                        }
                    //                        else if (Checkinstallationplace != null && Checkinstallationplace.Count >= 3)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                    //                        }
                    //                        else
                    //                        {
                    //                            TLIleg legname = _dbContext.TLIleg.FirstOrDefault(x => x.Id == MWDishInst.legId);
                    //                            if (legname != null && AddMW_Dish.installationAttributes.Azimuth > 0 && AddMW_Dish.installationAttributes.HeightBase > 0)
                    //                            {
                    //                                mwDish.DishName = legname?.CiviLegName + " " + AddMW_Dish.installationAttributes.Azimuth + " " + AddMW_Dish.installationAttributes.HeightBase;

                    //                            }

                    //                            TLIcivilLoads CheckName = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => !x.Dismantle && (x.allLoadInstId != null ?
                    //                                !x.allLoadInst.Draft && (x.allLoadInst.mwDishId != null ? x.allLoadInst.mwDish.DishName.ToLower() == mwDish.DishName.ToLower() : false) : false),
                    //                                    x => x.allLoadInst, x => x.allLoadInst.mwDish);
                    //                            if (CheckName != null)
                    //                                return new Response<GetForAddMWDishInstallationObject>(true, null, null, $"This name {mwDish.DishName} is already exists", (int)ApiReturnCode.fail);
                    //                        }
                    //                        if (AllcivilinstId.allCivilInst.civilWithLegs?.CurrentLoads == null)
                    //                        {
                    //                            AllcivilinstId.allCivilInst.civilWithLegs.CurrentLoads = 0;
                    //                        }
                    //                        var OldVcivilinfo = _dbContext.TLIcivilWithLegs.AsNoTracking().FirstOrDefault(x => x.Id == AllcivilinstId.allCivilInst.civilWithLegsId);

                    //                        if (OldVcivilinfo != null)
                    //                        {
                    //                            if (mwDish.SpaceInstallation != 0 && mwDish.CenterHigh != 0 && AllcivilinstId.allCivilInst.civilWithLegs.HeightBase != 0)
                    //                            {
                    //                                var EquivalentSpace = mwDish.SpaceInstallation * (mwDish.CenterHigh / (float)AllcivilinstId.allCivilInst.civilWithLegs.HeightBase);

                    //                                AllcivilinstId.allCivilInst.civilWithLegs.CurrentLoads += EquivalentSpace;
                    //                                mwDish.EquivalentSpace = EquivalentSpace;
                    //                                _unitOfWork.CivilWithLegsRepository.UpdateWithHistory(UserId, OldVcivilinfo, AllcivilinstId.allCivilInst.civilWithLegs);

                    //                                _unitOfWork.SaveChanges();
                    //                            }
                    //                        }
                    //                        if (mwDish?.ItemConnectToId != null)
                    //                        {
                    //                            TLIitemConnectTo ConnectedToEntity = _unitOfWork.ItemConnectToRepository.GetByID(mwDish.ItemConnectToId);
                    //                            if (ConnectedToEntity.Name.ToLower() == "farsitedish")
                    //                                if (string.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                    //                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if dish connected to FarSiteDish", (int)ApiReturnCode.fail);
                    //                            if (ConnectedToEntity.Name.ToLower() == "farsitedish" && mwDish.RepeaterTypeId != null)
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not selected RepeaterType because selected itemconecctedto is farsitedish", (int)ApiReturnCode.fail);

                    //                            else if (ConnectedToEntity.Name.ToLower() == "repeater")
                    //                            {
                    //                                if (mwDish.RepeaterTypeId == null)
                    //                                {
                    //                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type shouldn't be null", (int)ApiReturnCode.fail);
                    //                                }
                    //                                else
                    //                                {
                    //                                    TLIrepeaterType RepeaterTypeEntity = null;
                    //                                    if (mwDish.RepeaterTypeId != null)
                    //                                    {
                    //                                        RepeaterTypeEntity = _unitOfWork.RepeaterTypeRepository.GetWhereFirst(x => x.Id == mwDish.RepeaterTypeId);
                    //                                        if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() != "active" && RepeaterTypeEntity.Name.ToLower() != "passive")
                    //                                        {
                    //                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type should be active or passive", (int)ApiReturnCode.fail);
                    //                                        }
                    //                                        if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() == "active")
                    //                                        {
                    //                                            if (String.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                    //                                            {
                    //                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if repeater type is active", (int)ApiReturnCode.fail);
                    //                                            }
                    //                                        }
                    //                                        else if (RepeaterTypeEntity.Name.ToLower() == "passive")
                    //                                        {
                    //                                            if (ConnectedToEntity.Name.ToLower() != "repeater" || RepeaterTypeEntity.Name.ToLower() != "passive")
                    //                                            {
                    //                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "The dish should be connected to repeater and repeater type is passive", (int)ApiReturnCode.fail);
                    //                                            }
                    //                                        }
                    //                                    }
                    //                                }
                    //                            }
                    //                        }
                    //                        mwDish.MwDishLibraryId = AddMW_Dish.civilType.MwDishLibraryId;
                    //                        _unitOfWork.MW_DishRepository.UpdateWithHistory(UserId, MWDishInst.allLoadInst.mwDish, mwDish);
                    //                        _unitOfWork.SaveChanges();     
                    //                        if (AddMW_Dish.civilLoads != null)
                    //                        {
                    //                            TLIcivilLoads tLIcivilLoads = new TLIcivilLoads()
                    //                            {
                    //                                InstallationDate = AddMW_Dish.civilLoads.InstallationDate,
                    //                                ItemOnCivilStatus = AddMW_Dish.civilLoads.ItemOnCivilStatus,
                    //                                ItemStatus = AddMW_Dish.civilLoads?.ItemStatus,
                    //                                Dismantle = false,
                    //                                ReservedSpace = AddMW_Dish.civilLoads.ReservedSpace,

                    //                            };
                    //                            _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, MWDishInst, tLIcivilLoads);
                    //                            _unitOfWork.SaveChanges();

                    //                        }

                    //                        if (AddMW_Dish.dynamicAttribute != null ? AddMW_Dish.dynamicAttribute.Count() > 0 : false)
                    //                            _unitOfWork.DynamicAttInstValueRepository.UpdateDynamicValues(UserId, AddMW_Dish.dynamicAttribute, TableNameId, mwDish.Id);


                    //                    }
                    //                    else if (MWDishInst.ReservedSpace==true && AddMW_Dish.civilLoads.ReservedSpace == false)
                    //                    {

                    //                        if (mwDish.CenterHigh <= 0)
                    //                        {
                    //                            if (mwDish.HBA_Surface <= 0)
                    //                            {
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HBA_Surface must bigger from zero", (int)ApiReturnCode.fail);
                    //                            }
                    //                            else if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter <= 0)
                    //                            {
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "CenterHigh must bigger from zero", (int)ApiReturnCode.fail);
                    //                            }
                    //                            else
                    //                            {
                    //                                mwDish.CenterHigh = mwDish.HBA + MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter / 2;
                    //                            }
                    //                        }
                    //                        if (mwDish.SpaceInstallation == 0)
                    //                        {
                    //                            if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.SpaceLibrary == 0)
                    //                            {
                    //                                if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter == 0)
                    //                                {
                    //                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "SpaceInstallation must bigger from zero", (int)ApiReturnCode.fail);
                    //                                }
                    //                                mwDish.SpaceInstallation = Convert.ToSingle(3.14) * (float)Math.Pow(MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter / 2, 2);
                    //                            }
                    //                            else
                    //                            {
                    //                                mwDish.SpaceInstallation = MWDishInst.allLoadInst.mwDish.MwDishLibrary.SpaceLibrary;
                    //                            }
                    //                        }

                    //                        if (mwDish.Azimuth <= 0)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Azimuth must bigger from zero", (int)ApiReturnCode.fail);
                    //                        }
                    //                        if (mwDish.HeightBase <= 0)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HeightBase must bigger from zero", (int)ApiReturnCode.fail);
                    //                        }
                    //                        if (!string.IsNullOrEmpty(mwDish.Serial_Number))
                    //                        {
                    //                            bool CheckSerialNumber = _unitOfWork.MW_DishRepository.Any(x => x.Serial_Number == mwDish.Serial_Number);
                    //                            if (CheckSerialNumber)
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The Serial Number {mwDish.Serial_Number} is already exists", (int)ApiReturnCode.fail);
                    //                        }
                    //                        var Checkinstallationplace = _dbContext.MV_MWDISH_VIEW.Where(
                    //                            x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id && x.INSTALLATIONPLACE.ToLower() == "steel" &&
                    //                            x.LEG_ID == MWDishInst.legId).ToList();
                    //                        var CheckAzimuthAndHeightBase = Checkinstallationplace.FirstOrDefault(x => x.Azimuth ==
                    //                        mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                    //                        if (CheckAzimuthAndHeightBase != null)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                    //                        }
                    //                        else if (Checkinstallationplace != null && Checkinstallationplace.Count >= 3)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                    //                        }
                    //                        else
                    //                        {
                    //                            TLIleg legname = _dbContext.TLIleg.FirstOrDefault(x => x.Id == MWDishInst.legId);
                    //                            if (legname != null && AddMW_Dish.installationAttributes.Azimuth > 0 && AddMW_Dish.installationAttributes.HeightBase > 0)
                    //                            {
                    //                                mwDish.DishName = legname?.CiviLegName + " " + AddMW_Dish.installationAttributes.Azimuth + " " + AddMW_Dish.installationAttributes.HeightBase;

                    //                            }

                    //                            TLIcivilLoads CheckName = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => !x.Dismantle && (x.allLoadInstId != null ?
                    //                                !x.allLoadInst.Draft && (x.allLoadInst.mwDishId != null ? x.allLoadInst.mwDish.DishName.ToLower() == mwDish.DishName.ToLower() : false) : false),
                    //                                    x => x.allLoadInst, x => x.allLoadInst.mwDish);
                    //                            if (CheckName != null)
                    //                                return new Response<GetForAddMWDishInstallationObject>(true, null, null, $"This name {mwDish.DishName} is already exists", (int)ApiReturnCode.fail);
                    //                        }

                    //                        var OldVcivilinfo = _dbContext.TLIcivilWithLegs.AsNoTracking().FirstOrDefault(x => x.Id == AllcivilinstId.allCivilInst.civilWithLegsId);

                    //                        if (OldVcivilinfo != null)
                    //                        {

                    //                            AllcivilinstId.allCivilInst.civilWithLegs.CurrentLoads = AllcivilinstId.allCivilInst.civilWithLegs.CurrentLoads - MWDishInst.allLoadInst.mwDish.EquivalentSpace;  
                    //                            _unitOfWork.CivilWithLegsRepository.UpdateWithHistory(UserId, OldVcivilinfo, AllcivilinstId.allCivilInst.civilWithLegs);

                    //                            _unitOfWork.SaveChanges();

                    //                        }

                    //                        if (mwDish?.ItemConnectToId != null)
                    //                        {
                    //                            TLIitemConnectTo ConnectedToEntity = _unitOfWork.ItemConnectToRepository.GetByID(mwDish.ItemConnectToId);
                    //                            if (ConnectedToEntity.Name.ToLower() == "farsitedish")
                    //                                if (string.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                    //                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if dish connected to FarSiteDish", (int)ApiReturnCode.fail);
                    //                            if (ConnectedToEntity.Name.ToLower() == "farsitedish" && mwDish.RepeaterTypeId != null)
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not selected RepeaterType because selected itemconecctedto is farsitedish", (int)ApiReturnCode.fail);

                    //                            else if (ConnectedToEntity.Name.ToLower() == "repeater")
                    //                                {
                    //                                    if (mwDish.RepeaterTypeId == null)
                    //                                    {
                    //                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type shouldn't be null", (int)ApiReturnCode.fail);
                    //                                    }
                    //                                    else
                    //                                    {
                    //                                        TLIrepeaterType RepeaterTypeEntity = null;
                    //                                        if (mwDish.RepeaterTypeId != null)
                    //                                        {
                    //                                            RepeaterTypeEntity = _unitOfWork.RepeaterTypeRepository.GetWhereFirst(x => x.Id == mwDish.RepeaterTypeId);
                    //                                            if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() != "active" && RepeaterTypeEntity.Name.ToLower() != "passive")
                    //                                            {
                    //                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type should be active or passive", (int)ApiReturnCode.fail);
                    //                                            }
                    //                                            if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() == "active")
                    //                                            {
                    //                                                if (String.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                    //                                                {
                    //                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if repeater type is active", (int)ApiReturnCode.fail);
                    //                                                }
                    //                                            }
                    //                                            else if (RepeaterTypeEntity.Name.ToLower() == "passive")
                    //                                            {
                    //                                                if (ConnectedToEntity.Name.ToLower() != "repeater" || RepeaterTypeEntity.Name.ToLower() != "passive")
                    //                                                {
                    //                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "The dish should be connected to repeater and repeater type is passive", (int)ApiReturnCode.fail);
                    //                                                }
                    //                                            }
                    //                                        }
                    //                                    }
                    //                                }
                    //                        }
                    //                        mwDish.MwDishLibraryId = AddMW_Dish.civilType.MwDishLibraryId;
                    //                        _unitOfWork.MW_DishRepository.UpdateWithHistory(UserId, MWDishInst.allLoadInst.mwDish, mwDish);
                    //                        _unitOfWork.SaveChanges();     
                    //                        if (AddMW_Dish.civilLoads != null)
                    //                        {
                    //                            TLIcivilLoads tLIcivilLoads = new TLIcivilLoads()
                    //                            {
                    //                                InstallationDate = AddMW_Dish.civilLoads.InstallationDate,
                    //                                ItemOnCivilStatus = AddMW_Dish.civilLoads.ItemOnCivilStatus,
                    //                                ItemStatus = AddMW_Dish.civilLoads?.ItemStatus,
                    //                                Dismantle = false,
                    //                                ReservedSpace = AddMW_Dish.civilLoads.ReservedSpace,

                    //                            };
                    //                            _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, MWDishInst, tLIcivilLoads);
                    //                            _unitOfWork.SaveChanges();

                    //                        }

                    //                        if (AddMW_Dish.dynamicAttribute != null ? AddMW_Dish.dynamicAttribute.Count() > 0 : false)
                    //                            _unitOfWork.DynamicAttInstValueRepository.UpdateDynamicValues(UserId, AddMW_Dish.dynamicAttribute, TableNameId, mwDish.Id);


                    //                    }
                    //                    else if (MWDishInst.ReservedSpace == false && AddMW_Dish.civilLoads.ReservedSpace == true)
                    //                    {

                    //                        if (mwDish.CenterHigh <= 0)
                    //                        {
                    //                            if (mwDish.HBA_Surface <= 0)
                    //                            {
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HBA_Surface must bigger from zero", (int)ApiReturnCode.fail);
                    //                            }
                    //                            else if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter <= 0)
                    //                            {
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "CenterHigh must bigger from zero", (int)ApiReturnCode.fail);
                    //                            }
                    //                            else
                    //                            {
                    //                                mwDish.CenterHigh = mwDish.HBA + MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter / 2;
                    //                            }
                    //                        }
                    //                        if (mwDish.SpaceInstallation == 0)
                    //                        {
                    //                            if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.SpaceLibrary == 0)
                    //                            {
                    //                                if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter == 0)
                    //                                {
                    //                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "SpaceInstallation must bigger from zero", (int)ApiReturnCode.fail);
                    //                                }
                    //                                mwDish.SpaceInstallation = Convert.ToSingle(3.14) * (float)Math.Pow(MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter / 2, 2);
                    //                            }
                    //                            else
                    //                            {
                    //                                mwDish.SpaceInstallation = MWDishInst.allLoadInst.mwDish.MwDishLibrary.SpaceLibrary;
                    //                            }
                    //                        }

                    //                        if (mwDish.Azimuth <= 0)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Azimuth must bigger from zero", (int)ApiReturnCode.fail);
                    //                        }
                    //                        if (mwDish.HeightBase <= 0)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HeightBase must bigger from zero", (int)ApiReturnCode.fail);
                    //                        }
                    //                        if (!string.IsNullOrEmpty(mwDish.Serial_Number))
                    //                        {
                    //                            bool CheckSerialNumber = _unitOfWork.MW_DishRepository.Any(x => x.Serial_Number == mwDish.Serial_Number);
                    //                            if (CheckSerialNumber)
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The Serial Number {mwDish.Serial_Number} is already exists", (int)ApiReturnCode.fail);
                    //                        }
                    //                        var Checkinstallationplace = _dbContext.MV_MWDISH_VIEW.Where(
                    //                            x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id && x.INSTALLATIONPLACE.ToLower() == "steel" &&
                    //                            x.LEG_ID == MWDishInst.legId).ToList();
                    //                        var CheckAzimuthAndHeightBase = Checkinstallationplace.FirstOrDefault(x => x.Azimuth ==
                    //                        mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                    //                        if (CheckAzimuthAndHeightBase != null)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                    //                        }
                    //                        else if (Checkinstallationplace != null && Checkinstallationplace.Count >= 3)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                    //                        }
                    //                        else
                    //                        {
                    //                            TLIleg legname = _dbContext.TLIleg.FirstOrDefault(x => x.Id == MWDishInst.legId);
                    //                            if (legname != null && AddMW_Dish.installationAttributes.Azimuth > 0 && AddMW_Dish.installationAttributes.HeightBase > 0)
                    //                            {
                    //                                mwDish.DishName = legname?.CiviLegName + " " + AddMW_Dish.installationAttributes.Azimuth + " " + AddMW_Dish.installationAttributes.HeightBase;

                    //                            }

                    //                            TLIcivilLoads CheckName = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => !x.Dismantle && (x.allLoadInstId != null ?
                    //                                !x.allLoadInst.Draft && (x.allLoadInst.mwDishId != null ? x.allLoadInst.mwDish.DishName.ToLower() == mwDish.DishName.ToLower() : false) : false),
                    //                                    x => x.allLoadInst, x => x.allLoadInst.mwDish);
                    //                            if (CheckName != null)
                    //                                return new Response<GetForAddMWDishInstallationObject>(true, null, null, $"This name {mwDish.DishName} is already exists", (int)ApiReturnCode.fail);
                    //                        }
                    //                        if (AllcivilinstId.allCivilInst.civilWithLegs?.CurrentLoads == null)
                    //                        {
                    //                            AllcivilinstId.allCivilInst.civilWithLegs.CurrentLoads = 0;
                    //                        }
                    //                        var OldVcivilinfo = _dbContext.TLIcivilWithLegs.AsNoTracking().FirstOrDefault(x => x.Id == AllcivilinstId.allCivilInst.civilWithLegsId);

                    //                        if (OldVcivilinfo != null)
                    //                        {
                    //                            if (mwDish.SpaceInstallation != 0 && mwDish.CenterHigh != 0 && AllcivilinstId.allCivilInst.civilWithLegs.HeightBase != 0)
                    //                            {
                    //                                var EquivalentSpace = mwDish.SpaceInstallation * (mwDish.CenterHigh / (float)AllcivilinstId.allCivilInst.civilWithLegs.HeightBase);

                    //                                AllcivilinstId.allCivilInst.civilWithLegs.CurrentLoads += EquivalentSpace;
                    //                                mwDish.EquivalentSpace = EquivalentSpace;
                    //                                _unitOfWork.CivilWithLegsRepository.UpdateWithHistory(UserId, OldVcivilinfo, AllcivilinstId.allCivilInst.civilWithLegs);

                    //                                _unitOfWork.SaveChanges();
                    //                            }
                    //                        }

                    //                        if (mwDish?.ItemConnectToId != null)
                    //                        {
                    //                            TLIitemConnectTo ConnectedToEntity = _unitOfWork.ItemConnectToRepository.GetByID(mwDish.ItemConnectToId);
                    //                            if (ConnectedToEntity.Name.ToLower() == "farsitedish")
                    //                                if (string.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                    //                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if dish connected to FarSiteDish", (int)ApiReturnCode.fail);
                    //                            if (ConnectedToEntity.Name.ToLower() == "farsitedish" && mwDish.RepeaterTypeId != null)
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not selected RepeaterType because selected itemconecctedto is farsitedish", (int)ApiReturnCode.fail);
                    //                            else if (ConnectedToEntity.Name.ToLower() == "repeater")
                    //                                {
                    //                                    if (mwDish.RepeaterTypeId == null)
                    //                                    {
                    //                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type shouldn't be null", (int)ApiReturnCode.fail);
                    //                                    }
                    //                                    else
                    //                                    {
                    //                                        TLIrepeaterType RepeaterTypeEntity = null;
                    //                                        if (mwDish.RepeaterTypeId != null)
                    //                                        {
                    //                                            RepeaterTypeEntity = _unitOfWork.RepeaterTypeRepository.GetWhereFirst(x => x.Id == mwDish.RepeaterTypeId);
                    //                                            if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() != "active" && RepeaterTypeEntity.Name.ToLower() != "passive")
                    //                                            {
                    //                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type should be active or passive", (int)ApiReturnCode.fail);
                    //                                            }
                    //                                            if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() == "active")
                    //                                            {
                    //                                                if (String.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                    //                                                {
                    //                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if repeater type is active", (int)ApiReturnCode.fail);
                    //                                                }
                    //                                            }
                    //                                            else if (RepeaterTypeEntity.Name.ToLower() == "passive")
                    //                                            {
                    //                                                if (ConnectedToEntity.Name.ToLower() != "repeater" || RepeaterTypeEntity.Name.ToLower() != "passive")
                    //                                                {
                    //                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "The dish should be connected to repeater and repeater type is passive", (int)ApiReturnCode.fail);
                    //                                                }
                    //                                            }
                    //                                        }
                    //                                    }
                    //                                }
                    //                        }
                    //                        mwDish.MwDishLibraryId = AddMW_Dish.civilType.MwDishLibraryId;
                    //                        _unitOfWork.MW_DishRepository.UpdateWithHistory(UserId, MWDishInst.allLoadInst.mwDish, mwDish);
                    //                        _unitOfWork.SaveChanges();
                    //                        if (AddMW_Dish.civilLoads != null)
                    //                        {
                    //                            TLIcivilLoads tLIcivilLoads = new TLIcivilLoads()
                    //                            {
                    //                                InstallationDate = AddMW_Dish.civilLoads.InstallationDate,
                    //                                ItemOnCivilStatus = AddMW_Dish.civilLoads.ItemOnCivilStatus,
                    //                                ItemStatus = AddMW_Dish.civilLoads?.ItemStatus,
                    //                                Dismantle = false,
                    //                                ReservedSpace = AddMW_Dish.civilLoads.ReservedSpace,

                    //                            };
                    //                            _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, MWDishInst, tLIcivilLoads);
                    //                            _unitOfWork.SaveChanges();

                    //                        }

                    //                        if (AddMW_Dish.dynamicAttribute != null ? AddMW_Dish.dynamicAttribute.Count() > 0 : false)
                    //                            _unitOfWork.DynamicAttInstValueRepository.UpdateDynamicValues(UserId, AddMW_Dish.dynamicAttribute, TableNameId, mwDish.Id);


                    //                    }
                    //                    else if (MWDishInst.ReservedSpace == false && AddMW_Dish.civilLoads.ReservedSpace == false)
                    //                    {

                    //                        if (mwDish.CenterHigh <= 0)
                    //                        {
                    //                            if (mwDish.HBA_Surface <= 0)
                    //                            {
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HBA_Surface must bigger from zero", (int)ApiReturnCode.fail);
                    //                            }
                    //                            else if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter <= 0)
                    //                            {
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "CenterHigh must bigger from zero", (int)ApiReturnCode.fail);
                    //                            }
                    //                            else
                    //                            {
                    //                                mwDish.CenterHigh = mwDish.HBA + MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter / 2;
                    //                            }
                    //                        }
                    //                        if (mwDish.SpaceInstallation == 0)
                    //                        {
                    //                            if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.SpaceLibrary == 0)
                    //                            {
                    //                                if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter == 0)
                    //                                {
                    //                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "SpaceInstallation must bigger from zero", (int)ApiReturnCode.fail);
                    //                                }
                    //                                mwDish.SpaceInstallation = Convert.ToSingle(3.14) * (float)Math.Pow(MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter / 2, 2);
                    //                            }
                    //                            else
                    //                            {
                    //                                mwDish.SpaceInstallation = MWDishInst.allLoadInst.mwDish.MwDishLibrary.SpaceLibrary;
                    //                            }
                    //                        }

                    //                        if (mwDish.Azimuth <= 0)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Azimuth must bigger from zero", (int)ApiReturnCode.fail);
                    //                        }
                    //                        if (mwDish.HeightBase <= 0)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HeightBase must bigger from zero", (int)ApiReturnCode.fail);
                    //                        }
                    //                        if (!string.IsNullOrEmpty(mwDish.Serial_Number))
                    //                        {
                    //                            bool CheckSerialNumber = _unitOfWork.MW_DishRepository.Any(x => x.Serial_Number == mwDish.Serial_Number);
                    //                            if (CheckSerialNumber)
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The Serial Number {mwDish.Serial_Number} is already exists", (int)ApiReturnCode.fail);
                    //                        }
                    //                        var Checkinstallationplace = _dbContext.MV_MWDISH_VIEW.Where(
                    //                            x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id && x.INSTALLATIONPLACE.ToLower() == "steel" &&
                    //                            x.LEG_ID == MWDishInst.legId).ToList();
                    //                        var CheckAzimuthAndHeightBase = Checkinstallationplace.FirstOrDefault(x => x.Azimuth ==
                    //                        mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                    //                        if (CheckAzimuthAndHeightBase != null)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                    //                        }
                    //                        else if (Checkinstallationplace != null && Checkinstallationplace.Count >= 3)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                    //                        }
                    //                        else
                    //                        {
                    //                            TLIleg legname = _dbContext.TLIleg.FirstOrDefault(x => x.Id == MWDishInst.legId);
                    //                            if (legname != null && AddMW_Dish.installationAttributes.Azimuth > 0 && AddMW_Dish.installationAttributes.HeightBase > 0)
                    //                            {
                    //                                mwDish.DishName = legname?.CiviLegName + " " + AddMW_Dish.installationAttributes.Azimuth + " " + AddMW_Dish.installationAttributes.HeightBase;

                    //                            }

                    //                            TLIcivilLoads CheckName = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => !x.Dismantle && (x.allLoadInstId != null ?
                    //                                !x.allLoadInst.Draft && (x.allLoadInst.mwDishId != null ? x.allLoadInst.mwDish.DishName.ToLower() == mwDish.DishName.ToLower() : false) : false),
                    //                                    x => x.allLoadInst, x => x.allLoadInst.mwDish);
                    //                            if (CheckName != null)
                    //                                return new Response<GetForAddMWDishInstallationObject>(true, null, null, $"This name {mwDish.DishName} is already exists", (int)ApiReturnCode.fail);
                    //                        }
                    //                        if (mwDish?.ItemConnectToId != null)
                    //                        {
                    //                            TLIitemConnectTo ConnectedToEntity = _unitOfWork.ItemConnectToRepository.GetByID(mwDish.ItemConnectToId);
                    //                            if (ConnectedToEntity.Name.ToLower() == "farsitedish")
                    //                                if (string.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                    //                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if dish connected to FarSiteDish", (int)ApiReturnCode.fail);
                    //                            if (ConnectedToEntity.Name.ToLower() == "farsitedish" && mwDish.RepeaterTypeId != null)
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not selected RepeaterType because selected itemconecctedto is farsitedish", (int)ApiReturnCode.fail);

                    //                            else if (ConnectedToEntity.Name.ToLower() == "repeater")
                    //                                {
                    //                                    if (mwDish.RepeaterTypeId == null)
                    //                                    {
                    //                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type shouldn't be null", (int)ApiReturnCode.fail);
                    //                                    }
                    //                                    else
                    //                                    {
                    //                                        TLIrepeaterType RepeaterTypeEntity = null;
                    //                                        if (mwDish.RepeaterTypeId != null)
                    //                                        {
                    //                                            RepeaterTypeEntity = _unitOfWork.RepeaterTypeRepository.GetWhereFirst(x => x.Id == mwDish.RepeaterTypeId);
                    //                                            if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() != "active" && RepeaterTypeEntity.Name.ToLower() != "passive")
                    //                                            {
                    //                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type should be active or passive", (int)ApiReturnCode.fail);
                    //                                            }
                    //                                            if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() == "active")
                    //                                            {
                    //                                                if (String.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                    //                                                {
                    //                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if repeater type is active", (int)ApiReturnCode.fail);
                    //                                                }
                    //                                            }
                    //                                            else if (RepeaterTypeEntity.Name.ToLower() == "passive")
                    //                                            {
                    //                                                if (ConnectedToEntity.Name.ToLower() != "repeater" || RepeaterTypeEntity.Name.ToLower() != "passive")
                    //                                                {
                    //                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "The dish should be connected to repeater and repeater type is passive", (int)ApiReturnCode.fail);
                    //                                                }
                    //                                            }
                    //                                        }
                    //                                    }
                    //                                }
                    //                        }
                    //                        mwDish.MwDishLibraryId = AddMW_Dish.civilType.MwDishLibraryId;
                    //                        _unitOfWork.MW_DishRepository.UpdateWithHistory(UserId, MWDishInst.allLoadInst.mwDish, mwDish);
                    //                        _unitOfWork.SaveChanges();
                    //                        if (AddMW_Dish.civilLoads != null)
                    //                        {
                    //                            TLIcivilLoads tLIcivilLoads = new TLIcivilLoads()
                    //                            {
                    //                                InstallationDate = AddMW_Dish.civilLoads.InstallationDate,
                    //                                ItemOnCivilStatus = AddMW_Dish.civilLoads.ItemOnCivilStatus,
                    //                                ItemStatus = AddMW_Dish.civilLoads?.ItemStatus,
                    //                                Dismantle = false,
                    //                                ReservedSpace = AddMW_Dish.civilLoads.ReservedSpace,

                    //                            };
                    //                            _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, MWDishInst, tLIcivilLoads);
                    //                            _unitOfWork.SaveChanges();

                    //                        }

                    //                        if (AddMW_Dish.dynamicAttribute != null ? AddMW_Dish.dynamicAttribute.Count() > 0 : false)
                    //                            _unitOfWork.DynamicAttInstValueRepository.UpdateDynamicValues(UserId, AddMW_Dish.dynamicAttribute, TableNameId, mwDish.Id);


                    //                    }
                    //                }
                    //                else
                    //                {
                    //                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "this civil is not found ", (int)ApiReturnCode.fail);
                    //                }

                    //            }
                    //            else
                    //            {
                    //                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "must selected leg ", (int)ApiReturnCode.fail);
                    //            }
                    //        }
                    //        else
                    //        {
                    //            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "must selected civilwithlegs item ", (int)ApiReturnCode.fail);
                    //        }

                    //    }

                    //    if (MWDishInst.allLoadInst.mwDish.InstallationPlaceId == 2)
                    //    {

                    //        if (MWDishInst.allCivilInst.civilWithLegsId != null)
                    //        {

                    //            var AllcivilinstId = _unitOfWork.CivilSiteDateRepository.GetIncludeWhereFirst(x => x.allCivilInst.civilWithLegsId ==
                    //            MWDishInst.allCivilInst.civilWithLegsId && !x.Dismantle, x => x.allCivilInst, x => x.allCivilInst.civilWithLegs,
                    //            x => x.allCivilInst.civilWithoutLeg, x => x.allCivilInst.civilWithLegs.CivilWithLegsLib, x => x.allCivilInst.civilWithoutLeg.CivilWithoutlegsLib);
                    //            if (AllcivilinstId != null)
                    //            {
                    //                if (AddMW_Dish.civilLoads.ReservedSpace == true && AddMW_Dish.civilLoads.ReservedSpace==true)
                    //                {


                    //                    if (mwDish.CenterHigh <= 0)
                    //                    {
                    //                        if (mwDish.HBA_Surface <= 0)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HBA_Surface must bigger from zero", (int)ApiReturnCode.fail);
                    //                        }
                    //                        else if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter <= 0)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "CenterHigh must bigger from zero", (int)ApiReturnCode.fail);
                    //                        }
                    //                        else
                    //                        {
                    //                            mwDish.CenterHigh = mwDish.HBA + MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter / 2;
                    //                        }
                    //                    }
                    //                    if (mwDish.SpaceInstallation == 0)
                    //                    {

                    //                        if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.SpaceLibrary == 0)
                    //                        {
                    //                            if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter == 0)
                    //                            {
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "SpaceInstallation must bigger from zero", (int)ApiReturnCode.fail);
                    //                            }
                    //                            mwDish.SpaceInstallation = Convert.ToSingle(3.14) * (float)Math.Pow(MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter / 2, 2);
                    //                        }
                    //                        else
                    //                        {
                    //                            mwDish.SpaceInstallation = MWDishInst.allLoadInst.mwDish.MwDishLibrary.SpaceLibrary;
                    //                        }
                    //                    }
                    //                    if (AddMW_Dish.installationAttributes.Azimuth <= 0)
                    //                    {
                    //                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Azimuth must bigger from zero", (int)ApiReturnCode.fail);
                    //                    }
                    //                    if (AddMW_Dish.installationAttributes.HeightBase <= 0)
                    //                    {
                    //                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HeightBase must bigger from zero", (int)ApiReturnCode.fail);
                    //                    }
                    //                    if (!string.IsNullOrEmpty(mwDish.Serial_Number))
                    //                    {
                    //                        bool CheckSerialNumber = _unitOfWork.MW_DishRepository.Any(x => x.Serial_Number == mwDish.Serial_Number);
                    //                        if (CheckSerialNumber)
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The Serial Number {mwDish.Serial_Number} is already exists", (int)ApiReturnCode.fail);
                    //                    }
                    //                    if (MWDishInst.sideArmId != null)
                    //                    {
                    //                        List<MV_MWDISH_VIEW> Checkinstallationplace = _dbContext.MV_MWDISH_VIEW.Where(
                    //                           x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id && x.INSTALLATIONPLACE.ToLower() == "sideArm" &&
                    //                           x.SIDEARM_ID == MWDishInst.sideArmId).ToList();
                    //                        MV_MWDISH_VIEW CheckAzimuthAndHeightBase = Checkinstallationplace.FirstOrDefault(x => x.Azimuth == mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                    //                        if (CheckAzimuthAndHeightBase != null)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                    //                        }
                    //                        else if (Checkinstallationplace != null && Checkinstallationplace.Count >= 3)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                    //                        }
                    //                        else
                    //                        {
                    //                            var SideArmName1 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWDishInst.sideArmId);
                    //                            if (SideArmName1 != null && AddMW_Dish.installationAttributes.Azimuth > 0 && AddMW_Dish.installationAttributes.HeightBase > 0)
                    //                            {
                    //                                mwDish.DishName = SideArmName1?.Name + " " + AddMW_Dish.installationAttributes.Azimuth + " " + AddMW_Dish.installationAttributes.HeightBase;
                    //                            }
                    //                        }
                    //                    }
                    //                    if (MWDishInst.BranchingSideArmId != null)
                    //                    {
                    //                        List<MV_MWDISH_VIEW> Checkinstallationplace2 = _dbContext.MV_MWDISH_VIEW.Where(
                    //                          x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id && x.INSTALLATIONPLACE.ToLower() == "sideArm" &&
                    //                          x.SIDEARM_ID == MWDishInst.BranchingSideArmId).ToList();
                    //                        MV_MWDISH_VIEW CheckAzimuthAndHeightBase = Checkinstallationplace2.FirstOrDefault(x => x.Azimuth == mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                    //                        if (CheckAzimuthAndHeightBase != null)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                    //                        }
                    //                        else if (Checkinstallationplace2 != null && Checkinstallationplace2.Count >= 3)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                    //                        }
                    //                        else
                    //                        {
                    //                            var SideArmName1 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWDishInst.sideArmId);
                    //                            var SideArmName2 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWDishInst.BranchingSideArmId);
                    //                            if (SideArmName1 != null && SideArmName2 != null && AddMW_Dish.installationAttributes.Azimuth > 0 && AddMW_Dish.installationAttributes.HeightBase > 0)
                    //                            {
                    //                                mwDish.DishName = SideArmName1?.Name + " " + SideArmName2?.Name + " " + AddMW_Dish.installationAttributes.Azimuth + " " + AddMW_Dish.installationAttributes.HeightBase;
                    //                            }
                    //                        }
                    //                    }

                    //                    TLIcivilLoads CheckName = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => !x.Dismantle && (x.allLoadInstId != null ?
                    //                       !x.allLoadInst.Draft && (x.allLoadInst.mwDishId != null ? x.allLoadInst.mwDish.DishName.ToLower() == mwDish.DishName.ToLower() : false) : false),
                    //                           x => x.allLoadInst, x => x.allLoadInst.mwDish);
                    //                    if (CheckName != null)
                    //                        return new Response<GetForAddMWDishInstallationObject>(true, null, null, $"This name {mwDish.DishName} is already exists", (int)ApiReturnCode.fail);

                    //                    if (AllcivilinstId.allCivilInst.civilWithLegs?.CurrentLoads == null)
                    //                    {
                    //                        AllcivilinstId.allCivilInst.civilWithLegs.CurrentLoads = 0;
                    //                    }
                    //                    var OldVcivilinfo = _dbContext.TLIcivilWithLegs.AsNoTracking().FirstOrDefault(x => x.Id == AllcivilinstId.allCivilInst.civilWithLegsId);

                    //                    if (OldVcivilinfo != null)
                    //                    {

                    //                        var EquivalentSpace = mwDish.SpaceInstallation * (mwDish.CenterHigh / (float)AllcivilinstId.allCivilInst.civilWithLegs.HeightBase);

                    //                        AllcivilinstId.allCivilInst.civilWithLegs.CurrentLoads += EquivalentSpace;
                    //                        mwDish.EquivalentSpace = EquivalentSpace;
                    //                        _unitOfWork.CivilWithLegsRepository.UpdateWithHistory(UserId, OldVcivilinfo, AllcivilinstId.allCivilInst.civilWithLegs);

                    //                        _unitOfWork.SaveChanges();
                    //                    }                                      
                    //                    if (mwDish?.ItemConnectToId != null)
                    //                    {
                    //                        TLIitemConnectTo ConnectedToEntity = _unitOfWork.ItemConnectToRepository.GetByID(mwDish.ItemConnectToId);
                    //                        if (ConnectedToEntity.Name.ToLower() == "farsitedish")
                    //                            if (string.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if dish connected to FarSiteDish", (int)ApiReturnCode.fail);
                    //                        if (ConnectedToEntity.Name.ToLower() == "farsitedish" && mwDish.RepeaterTypeId != null)
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not selected RepeaterType because selected itemconecctedto is farsitedish", (int)ApiReturnCode.fail);

                    //                        else if (ConnectedToEntity.Name.ToLower() == "repeater")
                    //                            {
                    //                                if (mwDish.RepeaterTypeId == null)
                    //                                {
                    //                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type shouldn't be null", (int)ApiReturnCode.fail);
                    //                                }
                    //                                else
                    //                                {
                    //                                    TLIrepeaterType RepeaterTypeEntity = null;
                    //                                    if (mwDish.RepeaterTypeId != null)
                    //                                    {
                    //                                        RepeaterTypeEntity = _unitOfWork.RepeaterTypeRepository.GetWhereFirst(x => x.Id == mwDish.RepeaterTypeId);
                    //                                        if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() != "active" && RepeaterTypeEntity.Name.ToLower() != "passive")
                    //                                        {
                    //                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type should be active or passive", (int)ApiReturnCode.fail);
                    //                                        }
                    //                                        if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() == "active")
                    //                                        {
                    //                                            if (String.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                    //                                            {
                    //                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if repeater type is active", (int)ApiReturnCode.fail);
                    //                                            }
                    //                                        }
                    //                                        else if (RepeaterTypeEntity.Name.ToLower() == "passive")
                    //                                        {
                    //                                            if (ConnectedToEntity.Name.ToLower() != "repeater" || RepeaterTypeEntity.Name.ToLower() != "passive")
                    //                                            {
                    //                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "The dish should be connected to repeater and repeater type is passive", (int)ApiReturnCode.fail);
                    //                                            }
                    //                                        }
                    //                                    }
                    //                                }
                    //                            }
                    //                    }
                    //                    mwDish.MwDishLibraryId = AddMW_Dish.civilType.MwDishLibraryId;
                    //                    _unitOfWork.MW_DishRepository.UpdateWithHistory(UserId, MWDishInst.allLoadInst.mwDish, mwDish);
                    //                    _unitOfWork.SaveChanges();
                    //                    if (AddMW_Dish.civilLoads != null)
                    //                    {
                    //                        TLIcivilLoads tLIcivilLoads = new TLIcivilLoads()
                    //                        {
                    //                            InstallationDate = AddMW_Dish.civilLoads.InstallationDate,
                    //                            ItemOnCivilStatus = AddMW_Dish.civilLoads.ItemOnCivilStatus,
                    //                            ItemStatus = AddMW_Dish.civilLoads?.ItemStatus,
                    //                            Dismantle = false,
                    //                            ReservedSpace = AddMW_Dish.civilLoads.ReservedSpace,

                    //                        };
                    //                        _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, MWDishInst, tLIcivilLoads);
                    //                        _unitOfWork.SaveChanges();

                    //                    }

                    //                    if (AddMW_Dish.dynamicAttribute != null ? AddMW_Dish.dynamicAttribute.Count() > 0 : false)
                    //                        _unitOfWork.DynamicAttInstValueRepository.UpdateDynamicValues(UserId, AddMW_Dish.dynamicAttribute, TableNameId, mwDish.Id);


                    //                }
                    //                else if (AddMW_Dish.civilLoads.ReservedSpace == true && AddMW_Dish.civilLoads.ReservedSpace == false)
                    //                {

                    //                    if (mwDish.CenterHigh <= 0)
                    //                    {
                    //                        if (mwDish.HBA_Surface <= 0)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HBA_Surface must bigger from zero", (int)ApiReturnCode.fail);
                    //                        }
                    //                        else if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter <= 0)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "CenterHigh must bigger from zero", (int)ApiReturnCode.fail);
                    //                        }
                    //                        else
                    //                        {
                    //                            mwDish.CenterHigh = mwDish.HBA + MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter / 2;
                    //                        }
                    //                    }
                    //                    if (mwDish.SpaceInstallation == 0)
                    //                    {

                    //                        if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.SpaceLibrary == 0)
                    //                        {
                    //                            if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter == 0)
                    //                            {
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "SpaceInstallation must bigger from zero", (int)ApiReturnCode.fail);
                    //                            }
                    //                            mwDish.SpaceInstallation = Convert.ToSingle(3.14) * (float)Math.Pow(MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter / 2, 2);
                    //                        }
                    //                        else
                    //                        {
                    //                            mwDish.SpaceInstallation = MWDishInst.allLoadInst.mwDish.MwDishLibrary.SpaceLibrary;
                    //                        }
                    //                    }
                    //                    if (AddMW_Dish.installationAttributes.Azimuth <= 0)
                    //                    {
                    //                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Azimuth must bigger from zero", (int)ApiReturnCode.fail);
                    //                    }
                    //                    if (AddMW_Dish.installationAttributes.HeightBase <= 0)
                    //                    {
                    //                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HeightBase must bigger from zero", (int)ApiReturnCode.fail);
                    //                    }
                    //                    if (!string.IsNullOrEmpty(mwDish.Serial_Number))
                    //                    {
                    //                        bool CheckSerialNumber = _unitOfWork.MW_DishRepository.Any(x => x.Serial_Number == mwDish.Serial_Number);
                    //                        if (CheckSerialNumber)
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The Serial Number {mwDish.Serial_Number} is already exists", (int)ApiReturnCode.fail);
                    //                    }
                    //                    if (MWDishInst.sideArmId != null)
                    //                    {
                    //                        List<MV_MWDISH_VIEW> Checkinstallationplace = _dbContext.MV_MWDISH_VIEW.Where(
                    //                           x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id && x.INSTALLATIONPLACE.ToLower() == "sideArm" &&
                    //                           x.SIDEARM_ID == MWDishInst.sideArmId).ToList();
                    //                        MV_MWDISH_VIEW CheckAzimuthAndHeightBase = Checkinstallationplace.FirstOrDefault(x => x.Azimuth == mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                    //                        if (CheckAzimuthAndHeightBase != null)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                    //                        }
                    //                        else if (Checkinstallationplace != null && Checkinstallationplace.Count >= 3)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                    //                        }
                    //                        else
                    //                        {
                    //                            var SideArmName1 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWDishInst.sideArmId);
                    //                            if (SideArmName1 != null && AddMW_Dish.installationAttributes.Azimuth > 0 && AddMW_Dish.installationAttributes.HeightBase > 0)
                    //                            {
                    //                                mwDish.DishName = SideArmName1?.Name + " " + AddMW_Dish.installationAttributes.Azimuth + " " + AddMW_Dish.installationAttributes.HeightBase;
                    //                            }
                    //                        }
                    //                    }
                    //                    if (MWDishInst.BranchingSideArmId != null)
                    //                    {
                    //                        List<MV_MWDISH_VIEW> Checkinstallationplace2 = _dbContext.MV_MWDISH_VIEW.Where(
                    //                          x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id && x.INSTALLATIONPLACE.ToLower() == "sideArm" &&
                    //                          x.SIDEARM_ID == MWDishInst.BranchingSideArmId).ToList();
                    //                        MV_MWDISH_VIEW CheckAzimuthAndHeightBase = Checkinstallationplace2.FirstOrDefault(x => x.Azimuth == mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                    //                        if (CheckAzimuthAndHeightBase != null)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                    //                        }
                    //                        else if (Checkinstallationplace2 != null && Checkinstallationplace2.Count >= 3)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                    //                        }
                    //                        else
                    //                        {
                    //                            var SideArmName1 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWDishInst.sideArmId);
                    //                            var SideArmName2 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWDishInst.BranchingSideArmId);
                    //                            if (SideArmName1 != null && SideArmName2 != null && AddMW_Dish.installationAttributes.Azimuth > 0 && AddMW_Dish.installationAttributes.HeightBase > 0)
                    //                            {
                    //                                mwDish.DishName = SideArmName1?.Name + " " + SideArmName2?.Name + " " + AddMW_Dish.installationAttributes.Azimuth + " " + AddMW_Dish.installationAttributes.HeightBase;
                    //                            }
                    //                        }
                    //                    }

                    //                    TLIcivilLoads CheckName = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => !x.Dismantle && (x.allLoadInstId != null ?
                    //                       !x.allLoadInst.Draft && (x.allLoadInst.mwDishId != null ? x.allLoadInst.mwDish.DishName.ToLower() == mwDish.DishName.ToLower() : false) : false),
                    //                           x => x.allLoadInst, x => x.allLoadInst.mwDish);
                    //                    if (CheckName != null)
                    //                        return new Response<GetForAddMWDishInstallationObject>(true, null, null, $"This name {mwDish.DishName} is already exists", (int)ApiReturnCode.fail);
                    //                    var OldVcivilinfo = _dbContext.TLIcivilWithLegs.AsNoTracking().FirstOrDefault(x => x.Id == AllcivilinstId.allCivilInst.civilWithLegsId);

                    //                    if (OldVcivilinfo != null)
                    //                    {

                    //                        AllcivilinstId.allCivilInst.civilWithLegs.CurrentLoads = AllcivilinstId.allCivilInst.civilWithLegs.CurrentLoads - MWDishInst.allLoadInst.mwDish.EquivalentSpace;
                    //                        _unitOfWork.CivilWithLegsRepository.UpdateWithHistory(UserId, OldVcivilinfo, AllcivilinstId.allCivilInst.civilWithLegs);

                    //                        _unitOfWork.SaveChanges();
                    //                    }

                    //                    if (mwDish?.ItemConnectToId != null)
                    //                    {
                    //                        TLIitemConnectTo ConnectedToEntity = _unitOfWork.ItemConnectToRepository.GetByID(mwDish.ItemConnectToId);
                    //                        if (ConnectedToEntity.Name.ToLower() == "farsitedish")
                    //                            if (string.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if dish connected to FarSiteDish", (int)ApiReturnCode.fail);
                    //                        if (ConnectedToEntity.Name.ToLower() == "farsitedish" && mwDish.RepeaterTypeId != null)
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not selected RepeaterType because selected itemconecctedto is farsitedish", (int)ApiReturnCode.fail);

                    //                        else if (ConnectedToEntity.Name.ToLower() == "repeater")
                    //                            {
                    //                                if (mwDish.RepeaterTypeId == null)
                    //                                {
                    //                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type shouldn't be null", (int)ApiReturnCode.fail);
                    //                                }
                    //                                else
                    //                                {
                    //                                    TLIrepeaterType RepeaterTypeEntity = null;
                    //                                    if (mwDish.RepeaterTypeId != null)
                    //                                    {
                    //                                        RepeaterTypeEntity = _unitOfWork.RepeaterTypeRepository.GetWhereFirst(x => x.Id == mwDish.RepeaterTypeId);
                    //                                        if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() != "active" && RepeaterTypeEntity.Name.ToLower() != "passive")
                    //                                        {
                    //                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type should be active or passive", (int)ApiReturnCode.fail);
                    //                                        }
                    //                                        if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() == "active")
                    //                                        {
                    //                                            if (String.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                    //                                            {
                    //                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if repeater type is active", (int)ApiReturnCode.fail);
                    //                                            }
                    //                                        }
                    //                                        else if (RepeaterTypeEntity.Name.ToLower() == "passive")
                    //                                        {
                    //                                            if (ConnectedToEntity.Name.ToLower() != "repeater" || RepeaterTypeEntity.Name.ToLower() != "passive")
                    //                                            {
                    //                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "The dish should be connected to repeater and repeater type is passive", (int)ApiReturnCode.fail);
                    //                                            }
                    //                                        }
                    //                                    }
                    //                                }
                    //                            }
                    //                    }
                    //                    mwDish.MwDishLibraryId = AddMW_Dish.civilType.MwDishLibraryId;
                    //                    _unitOfWork.MW_DishRepository.UpdateWithHistory(UserId, MWDishInst.allLoadInst.mwDish, mwDish);
                    //                    _unitOfWork.SaveChanges();
                    //                    if (AddMW_Dish.civilLoads != null)
                    //                    {
                    //                        TLIcivilLoads tLIcivilLoads = new TLIcivilLoads()
                    //                        {
                    //                            InstallationDate = AddMW_Dish.civilLoads.InstallationDate,
                    //                            ItemOnCivilStatus = AddMW_Dish.civilLoads.ItemOnCivilStatus,
                    //                            ItemStatus = AddMW_Dish.civilLoads?.ItemStatus,
                    //                            Dismantle = false,
                    //                            ReservedSpace = AddMW_Dish.civilLoads.ReservedSpace,

                    //                        };
                    //                        _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, MWDishInst, tLIcivilLoads);
                    //                        _unitOfWork.SaveChanges();

                    //                    }

                    //                    if (AddMW_Dish.dynamicAttribute != null ? AddMW_Dish.dynamicAttribute.Count() > 0 : false)
                    //                        _unitOfWork.DynamicAttInstValueRepository.UpdateDynamicValues(UserId, AddMW_Dish.dynamicAttribute, TableNameId, mwDish.Id);


                    //                }
                    //                else if (AddMW_Dish.civilLoads.ReservedSpace == false && AddMW_Dish.civilLoads.ReservedSpace == true)
                    //                {


                    //                    if (mwDish.CenterHigh <= 0)
                    //                    {
                    //                        if (mwDish.HBA_Surface <= 0)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HBA_Surface must bigger from zero", (int)ApiReturnCode.fail);
                    //                        }
                    //                        else if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter <= 0)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "CenterHigh must bigger from zero", (int)ApiReturnCode.fail);
                    //                        }
                    //                        else
                    //                        {
                    //                            mwDish.CenterHigh = mwDish.HBA + MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter / 2;
                    //                        }
                    //                    }
                    //                    if (mwDish.SpaceInstallation == 0)
                    //                    {

                    //                        if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.SpaceLibrary == 0)
                    //                        {
                    //                            if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter == 0)
                    //                            {
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "SpaceInstallation must bigger from zero", (int)ApiReturnCode.fail);
                    //                            }
                    //                            mwDish.SpaceInstallation = Convert.ToSingle(3.14) * (float)Math.Pow(MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter / 2, 2);
                    //                        }
                    //                        else
                    //                        {
                    //                            mwDish.SpaceInstallation = MWDishInst.allLoadInst.mwDish.MwDishLibrary.SpaceLibrary;
                    //                        }
                    //                    }
                    //                    if (AddMW_Dish.installationAttributes.Azimuth <= 0)
                    //                    {
                    //                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Azimuth must bigger from zero", (int)ApiReturnCode.fail);
                    //                    }
                    //                    if (AddMW_Dish.installationAttributes.HeightBase <= 0)
                    //                    {
                    //                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HeightBase must bigger from zero", (int)ApiReturnCode.fail);
                    //                    }
                    //                    if (!string.IsNullOrEmpty(mwDish.Serial_Number))
                    //                    {
                    //                        bool CheckSerialNumber = _unitOfWork.MW_DishRepository.Any(x => x.Serial_Number == mwDish.Serial_Number);
                    //                        if (CheckSerialNumber)
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The Serial Number {mwDish.Serial_Number} is already exists", (int)ApiReturnCode.fail);
                    //                    }
                    //                    if (MWDishInst.sideArmId != null)
                    //                    {
                    //                        List<MV_MWDISH_VIEW> Checkinstallationplace = _dbContext.MV_MWDISH_VIEW.Where(
                    //                           x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id && x.INSTALLATIONPLACE.ToLower() == "sideArm" &&
                    //                           x.SIDEARM_ID == MWDishInst.sideArmId).ToList();
                    //                        MV_MWDISH_VIEW CheckAzimuthAndHeightBase = Checkinstallationplace.FirstOrDefault(x => x.Azimuth == mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                    //                        if (CheckAzimuthAndHeightBase != null)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                    //                        }
                    //                        else if (Checkinstallationplace != null && Checkinstallationplace.Count >= 3)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                    //                        }
                    //                        else
                    //                        {
                    //                            var SideArmName1 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWDishInst.sideArmId);
                    //                            if (SideArmName1 != null && AddMW_Dish.installationAttributes.Azimuth > 0 && AddMW_Dish.installationAttributes.HeightBase > 0)
                    //                            {
                    //                                mwDish.DishName = SideArmName1?.Name + " " + AddMW_Dish.installationAttributes.Azimuth + " " + AddMW_Dish.installationAttributes.HeightBase;
                    //                            }
                    //                        }
                    //                    }
                    //                    if (MWDishInst.BranchingSideArmId != null)
                    //                    {
                    //                        List<MV_MWDISH_VIEW> Checkinstallationplace2 = _dbContext.MV_MWDISH_VIEW.Where(
                    //                          x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id && x.INSTALLATIONPLACE.ToLower() == "sideArm" &&
                    //                          x.SIDEARM_ID == MWDishInst.BranchingSideArmId).ToList();
                    //                        MV_MWDISH_VIEW CheckAzimuthAndHeightBase = Checkinstallationplace2.FirstOrDefault(x => x.Azimuth == mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                    //                        if (CheckAzimuthAndHeightBase != null)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                    //                        }
                    //                        else if (Checkinstallationplace2 != null && Checkinstallationplace2.Count >= 3)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                    //                        }
                    //                        else
                    //                        {
                    //                            var SideArmName1 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWDishInst.sideArmId);
                    //                            var SideArmName2 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWDishInst.BranchingSideArmId);
                    //                            if (SideArmName1 != null && SideArmName2 != null && AddMW_Dish.installationAttributes.Azimuth > 0 && AddMW_Dish.installationAttributes.HeightBase > 0)
                    //                            {
                    //                                mwDish.DishName = SideArmName1?.Name + " " + SideArmName2?.Name + " " + AddMW_Dish.installationAttributes.Azimuth + " " + AddMW_Dish.installationAttributes.HeightBase;
                    //                            }
                    //                        }
                    //                    }

                    //                    TLIcivilLoads CheckName = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => !x.Dismantle && (x.allLoadInstId != null ?
                    //                       !x.allLoadInst.Draft && (x.allLoadInst.mwDishId != null ? x.allLoadInst.mwDish.DishName.ToLower() == mwDish.DishName.ToLower() : false) : false),
                    //                           x => x.allLoadInst, x => x.allLoadInst.mwDish);
                    //                    if (CheckName != null)
                    //                        return new Response<GetForAddMWDishInstallationObject>(true, null, null, $"This name {mwDish.DishName} is already exists", (int)ApiReturnCode.fail);
                    //                    if (AllcivilinstId.allCivilInst.civilWithLegs?.CurrentLoads == null)
                    //                    {
                    //                        AllcivilinstId.allCivilInst.civilWithLegs.CurrentLoads = 0;
                    //                    }
                    //                    var OldVcivilinfo = _dbContext.TLIcivilWithLegs.AsNoTracking().FirstOrDefault(x => x.Id == AllcivilinstId.allCivilInst.civilWithLegsId);

                    //                    if (OldVcivilinfo != null)
                    //                    {

                    //                        var EquivalentSpace = mwDish.SpaceInstallation * (mwDish.CenterHigh / (float)AllcivilinstId.allCivilInst.civilWithLegs.HeightBase);

                    //                        AllcivilinstId.allCivilInst.civilWithLegs.CurrentLoads += EquivalentSpace;
                    //                        mwDish.EquivalentSpace = EquivalentSpace;
                    //                        _unitOfWork.CivilWithLegsRepository.UpdateWithHistory(UserId, OldVcivilinfo, AllcivilinstId.allCivilInst.civilWithLegs);

                    //                        _unitOfWork.SaveChanges();
                    //                    }

                    //                    if (mwDish?.ItemConnectToId != null)
                    //                    {
                    //                        TLIitemConnectTo ConnectedToEntity = _unitOfWork.ItemConnectToRepository.GetByID(mwDish.ItemConnectToId);
                    //                        if (ConnectedToEntity.Name.ToLower() == "farsitedish")
                    //                            if (string.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if dish connected to FarSiteDish", (int)ApiReturnCode.fail);
                    //                        if (ConnectedToEntity.Name.ToLower() == "farsitedish" && mwDish.RepeaterTypeId != null)
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not selected RepeaterType because selected itemconecctedto is farsitedish", (int)ApiReturnCode.fail);

                    //                        else if (ConnectedToEntity.Name.ToLower() == "repeater")
                    //                            {
                    //                                if (mwDish.RepeaterTypeId == null)
                    //                                {
                    //                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type shouldn't be null", (int)ApiReturnCode.fail);
                    //                                }
                    //                                else
                    //                                {
                    //                                    TLIrepeaterType RepeaterTypeEntity = null;
                    //                                    if (mwDish.RepeaterTypeId != null)
                    //                                    {
                    //                                        RepeaterTypeEntity = _unitOfWork.RepeaterTypeRepository.GetWhereFirst(x => x.Id == mwDish.RepeaterTypeId);
                    //                                        if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() != "active" && RepeaterTypeEntity.Name.ToLower() != "passive")
                    //                                        {
                    //                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type should be active or passive", (int)ApiReturnCode.fail);
                    //                                        }
                    //                                        if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() == "active")
                    //                                        {
                    //                                            if (String.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                    //                                            {
                    //                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if repeater type is active", (int)ApiReturnCode.fail);
                    //                                            }
                    //                                        }
                    //                                        else if (RepeaterTypeEntity.Name.ToLower() == "passive")
                    //                                        {
                    //                                            if (ConnectedToEntity.Name.ToLower() != "repeater" || RepeaterTypeEntity.Name.ToLower() != "passive")
                    //                                            {
                    //                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "The dish should be connected to repeater and repeater type is passive", (int)ApiReturnCode.fail);
                    //                                            }
                    //                                        }
                    //                                    }
                    //                                }
                    //                            }
                    //                    }
                    //                    mwDish.MwDishLibraryId = AddMW_Dish.civilType.MwDishLibraryId;
                    //                    _unitOfWork.MW_DishRepository.UpdateWithHistory(UserId, MWDishInst.allLoadInst.mwDish, mwDish);
                    //                    _unitOfWork.SaveChanges();
                    //                    if (AddMW_Dish.civilLoads != null)
                    //                    {
                    //                        TLIcivilLoads tLIcivilLoads = new TLIcivilLoads()
                    //                        {
                    //                            InstallationDate = AddMW_Dish.civilLoads.InstallationDate,
                    //                            ItemOnCivilStatus = AddMW_Dish.civilLoads.ItemOnCivilStatus,
                    //                            ItemStatus = AddMW_Dish.civilLoads?.ItemStatus,
                    //                            Dismantle = false,
                    //                            ReservedSpace = AddMW_Dish.civilLoads.ReservedSpace,

                    //                        };
                    //                        _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, MWDishInst, tLIcivilLoads);
                    //                        _unitOfWork.SaveChanges();

                    //                    }

                    //                    if (AddMW_Dish.dynamicAttribute != null ? AddMW_Dish.dynamicAttribute.Count() > 0 : false)
                    //                        _unitOfWork.DynamicAttInstValueRepository.UpdateDynamicValues(UserId, AddMW_Dish.dynamicAttribute, TableNameId, mwDish.Id);


                    //                }
                    //                else if (AddMW_Dish.civilLoads.ReservedSpace == false && AddMW_Dish.civilLoads.ReservedSpace == false)
                    //                {


                    //                    if (mwDish.CenterHigh <= 0)
                    //                    {
                    //                        if (mwDish.HBA_Surface <= 0)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HBA_Surface must bigger from zero", (int)ApiReturnCode.fail);
                    //                        }
                    //                        else if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter <= 0)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "CenterHigh must bigger from zero", (int)ApiReturnCode.fail);
                    //                        }
                    //                        else
                    //                        {
                    //                            mwDish.CenterHigh = mwDish.HBA + MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter / 2;
                    //                        }
                    //                    }
                    //                    if (mwDish.SpaceInstallation == 0)
                    //                    {

                    //                        if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.SpaceLibrary == 0)
                    //                        {
                    //                            if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter == 0)
                    //                            {
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "SpaceInstallation must bigger from zero", (int)ApiReturnCode.fail);
                    //                            }
                    //                            mwDish.SpaceInstallation = Convert.ToSingle(3.14) * (float)Math.Pow(MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter / 2, 2);
                    //                        }
                    //                        else
                    //                        {
                    //                            mwDish.SpaceInstallation = MWDishInst.allLoadInst.mwDish.MwDishLibrary.SpaceLibrary;
                    //                        }
                    //                    }
                    //                    if (AddMW_Dish.installationAttributes.Azimuth <= 0)
                    //                    {
                    //                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Azimuth must bigger from zero", (int)ApiReturnCode.fail);
                    //                    }
                    //                    if (AddMW_Dish.installationAttributes.HeightBase <= 0)
                    //                    {
                    //                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HeightBase must bigger from zero", (int)ApiReturnCode.fail);
                    //                    }
                    //                    if (!string.IsNullOrEmpty(mwDish.Serial_Number))
                    //                    {
                    //                        bool CheckSerialNumber = _unitOfWork.MW_DishRepository.Any(x => x.Serial_Number == mwDish.Serial_Number);
                    //                        if (CheckSerialNumber)
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The Serial Number {mwDish.Serial_Number} is already exists", (int)ApiReturnCode.fail);
                    //                    }
                    //                    if (MWDishInst.sideArmId != null)
                    //                    {
                    //                        List<MV_MWDISH_VIEW> Checkinstallationplace = _dbContext.MV_MWDISH_VIEW.Where(
                    //                           x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id && x.INSTALLATIONPLACE.ToLower() == "sideArm" &&
                    //                           x.SIDEARM_ID == MWDishInst.sideArmId).ToList();
                    //                        MV_MWDISH_VIEW CheckAzimuthAndHeightBase = Checkinstallationplace.FirstOrDefault(x => x.Azimuth == mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                    //                        if (CheckAzimuthAndHeightBase != null)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                    //                        }
                    //                        else if (Checkinstallationplace != null && Checkinstallationplace.Count >= 3)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                    //                        }
                    //                        else
                    //                        {
                    //                            var SideArmName1 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWDishInst.sideArmId);
                    //                            if (SideArmName1 != null && AddMW_Dish.installationAttributes.Azimuth > 0 && AddMW_Dish.installationAttributes.HeightBase > 0)
                    //                            {
                    //                                mwDish.DishName = SideArmName1?.Name + " " + AddMW_Dish.installationAttributes.Azimuth + " " + AddMW_Dish.installationAttributes.HeightBase;
                    //                            }
                    //                        }
                    //                    }
                    //                    if (MWDishInst.BranchingSideArmId != null)
                    //                    {
                    //                        List<MV_MWDISH_VIEW> Checkinstallationplace2 = _dbContext.MV_MWDISH_VIEW.Where(
                    //                          x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id && x.INSTALLATIONPLACE.ToLower() == "sideArm" &&
                    //                          x.SIDEARM_ID == MWDishInst.BranchingSideArmId).ToList();
                    //                        MV_MWDISH_VIEW CheckAzimuthAndHeightBase = Checkinstallationplace2.FirstOrDefault(x => x.Azimuth == mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                    //                        if (CheckAzimuthAndHeightBase != null)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                    //                        }
                    //                        else if (Checkinstallationplace2 != null && Checkinstallationplace2.Count >= 3)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                    //                        }
                    //                        else
                    //                        {
                    //                            var SideArmName1 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWDishInst.sideArmId);
                    //                            var SideArmName2 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWDishInst.BranchingSideArmId);
                    //                            if (SideArmName1 != null && SideArmName2 != null && AddMW_Dish.installationAttributes.Azimuth > 0 && AddMW_Dish.installationAttributes.HeightBase > 0)
                    //                            {
                    //                                mwDish.DishName = SideArmName1?.Name + " " + SideArmName2?.Name + " " + AddMW_Dish.installationAttributes.Azimuth + " " + AddMW_Dish.installationAttributes.HeightBase;
                    //                            }
                    //                        }
                    //                    }

                    //                    TLIcivilLoads CheckName = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => !x.Dismantle && (x.allLoadInstId != null ?
                    //                       !x.allLoadInst.Draft && (x.allLoadInst.mwDishId != null ? x.allLoadInst.mwDish.DishName.ToLower() == mwDish.DishName.ToLower() : false) : false),
                    //                           x => x.allLoadInst, x => x.allLoadInst.mwDish);
                    //                    if (CheckName != null)
                    //                        return new Response<GetForAddMWDishInstallationObject>(true, null, null, $"This name {mwDish.DishName} is already exists", (int)ApiReturnCode.fail);


                    //                    if (mwDish?.ItemConnectToId != null)
                    //                    {
                    //                        TLIitemConnectTo ConnectedToEntity = _unitOfWork.ItemConnectToRepository.GetByID(mwDish.ItemConnectToId);
                    //                        if (ConnectedToEntity.Name.ToLower() == "farsitedish")
                    //                            if (string.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if dish connected to FarSiteDish", (int)ApiReturnCode.fail);
                    //                        if (ConnectedToEntity.Name.ToLower() == "farsitedish" && mwDish.RepeaterTypeId != null)
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not selected RepeaterType because selected itemconecctedto is farsitedish", (int)ApiReturnCode.fail);

                    //                        else if (ConnectedToEntity.Name.ToLower() == "repeater")
                    //                            {
                    //                                if (mwDish.RepeaterTypeId == null)
                    //                                {
                    //                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type shouldn't be null", (int)ApiReturnCode.fail);
                    //                                }
                    //                                else
                    //                                {
                    //                                    TLIrepeaterType RepeaterTypeEntity = null;
                    //                                    if (mwDish.RepeaterTypeId != null)
                    //                                    {
                    //                                        RepeaterTypeEntity = _unitOfWork.RepeaterTypeRepository.GetWhereFirst(x => x.Id == mwDish.RepeaterTypeId);
                    //                                        if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() != "active" && RepeaterTypeEntity.Name.ToLower() != "passive")
                    //                                        {
                    //                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type should be active or passive", (int)ApiReturnCode.fail);
                    //                                        }
                    //                                        if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() == "active")
                    //                                        {
                    //                                            if (String.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                    //                                            {
                    //                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if repeater type is active", (int)ApiReturnCode.fail);
                    //                                            }
                    //                                        }
                    //                                        else if (RepeaterTypeEntity.Name.ToLower() == "passive")
                    //                                        {
                    //                                            if (ConnectedToEntity.Name.ToLower() != "repeater" || RepeaterTypeEntity.Name.ToLower() != "passive")
                    //                                            {
                    //                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "The dish should be connected to repeater and repeater type is passive", (int)ApiReturnCode.fail);
                    //                                            }
                    //                                        }
                    //                                    }
                    //                                }
                    //                            }
                    //                    }
                    //                    mwDish.MwDishLibraryId = AddMW_Dish.civilType.MwDishLibraryId;
                    //                    _unitOfWork.MW_DishRepository.UpdateWithHistory(UserId, MWDishInst.allLoadInst.mwDish, mwDish);
                    //                    _unitOfWork.SaveChanges();
                    //                    if (AddMW_Dish.civilLoads != null)
                    //                    {
                    //                        TLIcivilLoads tLIcivilLoads = new TLIcivilLoads()
                    //                        {
                    //                            InstallationDate = AddMW_Dish.civilLoads.InstallationDate,
                    //                            ItemOnCivilStatus = AddMW_Dish.civilLoads.ItemOnCivilStatus,
                    //                            ItemStatus = AddMW_Dish.civilLoads?.ItemStatus,
                    //                            Dismantle = false,
                    //                            ReservedSpace = AddMW_Dish.civilLoads.ReservedSpace,

                    //                        };
                    //                        _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, MWDishInst, tLIcivilLoads);
                    //                        _unitOfWork.SaveChanges();

                    //                    }

                    //                    if (AddMW_Dish.dynamicAttribute != null ? AddMW_Dish.dynamicAttribute.Count() > 0 : false)
                    //                        _unitOfWork.DynamicAttInstValueRepository.UpdateDynamicValues(UserId, AddMW_Dish.dynamicAttribute, TableNameId, mwDish.Id);


                    //                }


                    //            }
                    //            else
                    //            {
                    //                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "this civil is not found ", (int)ApiReturnCode.fail);
                    //            }


                    //        }

                    //        if (MWDishInst.allCivilInst.civilWithoutLegId != null)
                    //        {

                    //            if (MWDishInst.sideArmId != null)

                    //            {
                    //                var AllcivilinstId = _unitOfWork.CivilSiteDateRepository.GetIncludeWhereFirst(x => x.allCivilInst.civilWithoutLegId ==
                    //                MWDishInst.allCivilInst.civilWithoutLegId && !x.Dismantle, x => x.allCivilInst, x => x.allCivilInst.civilWithLegs, x => x.allCivilInst.civilWithoutLeg,
                    //                x => x.allCivilInst.civilWithLegs.CivilWithLegsLib, x => x.allCivilInst.civilWithoutLeg.CivilWithoutlegsLib);
                    //                if (AllcivilinstId != null)
                    //                {
                    //                    if (AddMW_Dish.civilLoads.ReservedSpace == true && AddMW_Dish.civilLoads.ReservedSpace == true)
                    //                    {

                    //                        if (mwDish.CenterHigh <= 0)
                    //                        {
                    //                            if (mwDish.HBA_Surface <= 0)
                    //                            {
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HBA_Surface must bigger from zero", (int)ApiReturnCode.fail);
                    //                            }
                    //                            else if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter <= 0)
                    //                            {
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "CenterHigh must bigger from zero", (int)ApiReturnCode.fail);
                    //                            }
                    //                            else
                    //                            {
                    //                                mwDish.CenterHigh = mwDish.HBA + MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter / 2;
                    //                            }
                    //                        }
                    //                        if (mwDish.SpaceInstallation == 0)
                    //                        {


                    //                            if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.SpaceLibrary == 0)
                    //                            {
                    //                                if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter == 0)
                    //                                {
                    //                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "SpaceInstallation must bigger from zero", (int)ApiReturnCode.fail);
                    //                                }
                    //                                mwDish.SpaceInstallation = Convert.ToSingle(3.14) * (float)Math.Pow(MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter / 2, 2);
                    //                            }
                    //                            else
                    //                            {
                    //                                mwDish.SpaceInstallation = MWDishInst.allLoadInst.mwDish.MwDishLibrary.SpaceLibrary;
                    //                            }
                    //                        }
                    //                        if (AddMW_Dish.installationAttributes.Azimuth <= 0)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Azimuth must bigger from zero", (int)ApiReturnCode.fail);
                    //                        }
                    //                        if (AddMW_Dish.installationAttributes.HeightBase <= 0)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HeightBase must bigger from zero", (int)ApiReturnCode.fail);
                    //                        }
                    //                        if (!string.IsNullOrEmpty(mwDish.Serial_Number))
                    //                        {
                    //                            bool CheckSerialNumber = _unitOfWork.MW_DishRepository.Any(x => x.Serial_Number == mwDish.Serial_Number);
                    //                            if (CheckSerialNumber)
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The Serial Number {mwDish.Serial_Number} is already exists", (int)ApiReturnCode.fail);
                    //                        }
                    //                        if (MWDishInst.sideArmId != null)
                    //                        {
                    //                            List<MV_MWDISH_VIEW> Checkinstallationplace = _dbContext.MV_MWDISH_VIEW.Where(
                    //                               x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id && x.INSTALLATIONPLACE.ToLower() == "sideArm" &&
                    //                               x.SIDEARM_ID == MWDishInst.sideArmId).ToList();
                    //                            MV_MWDISH_VIEW CheckAzimuthAndHeightBase = Checkinstallationplace.FirstOrDefault(x => x.Azimuth == mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                    //                            if (CheckAzimuthAndHeightBase != null)
                    //                            {
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                    //                            }
                    //                            else if (Checkinstallationplace != null && Checkinstallationplace.Count >= 3)
                    //                            {
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                    //                            }
                    //                            else
                    //                            {
                    //                                var SideArmName1 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWDishInst.sideArmId);
                    //                                if (SideArmName1 != null && AddMW_Dish.installationAttributes.Azimuth > 0 && AddMW_Dish.installationAttributes.HeightBase > 0)
                    //                                {
                    //                                    mwDish.DishName = SideArmName1?.Name + " " + AddMW_Dish.installationAttributes.Azimuth + " " + AddMW_Dish.installationAttributes.HeightBase;
                    //                                }
                    //                            }
                    //                        }
                    //                        if (MWDishInst.BranchingSideArmId != null)
                    //                        {
                    //                            List<MV_MWDISH_VIEW> Checkinstallationplace2 = _dbContext.MV_MWDISH_VIEW.Where(
                    //                               x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id && x.INSTALLATIONPLACE.ToLower() == "sideArm" &&
                    //                               x.SIDEARM_ID == MWDishInst.BranchingSideArmId).ToList();
                    //                            MV_MWDISH_VIEW CheckAzimuthAndHeightBase = Checkinstallationplace2.FirstOrDefault(x => x.Azimuth == mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                    //                            if (CheckAzimuthAndHeightBase != null)
                    //                            {
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                    //                            }
                    //                            else if (Checkinstallationplace2 != null && Checkinstallationplace2.Count >= 3)
                    //                            {
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                    //                            }
                    //                            else
                    //                            {
                    //                                var SideArmName1 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWDishInst.sideArmId);

                    //                                var SideArmName2 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWDishInst.BranchingSideArmId);
                    //                                if (SideArmName1 != null && SideArmName2 != null && AddMW_Dish.installationAttributes.Azimuth > 0 && AddMW_Dish.installationAttributes.HeightBase > 0)
                    //                                {
                    //                                    mwDish.DishName = SideArmName1?.Name + " " + SideArmName2?.Name + " " + AddMW_Dish.installationAttributes.Azimuth + " " + AddMW_Dish.installationAttributes.HeightBase;
                    //                                }
                    //                            }
                    //                        }
                    //                        TLIcivilLoads CheckName = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => !x.Dismantle && (x.allLoadInstId != null ?
                    //                           !x.allLoadInst.Draft && (x.allLoadInst.mwDishId != null ? x.allLoadInst.mwDish.DishName.ToLower() == mwDish.DishName.ToLower() : false) : false),
                    //                               x => x.allLoadInst, x => x.allLoadInst.mwDish);
                    //                        if (CheckName != null)
                    //                            return new Response<GetForAddMWDishInstallationObject>(true, null, null, $"This name {mwDish.DishName} is already exists", (int)ApiReturnCode.fail);

                    //                        if (AllcivilinstId.allCivilInst.civilWithLegs?.CurrentLoads == null)
                    //                        {
                    //                            AllcivilinstId.allCivilInst.civilWithLegs.CurrentLoads = 0;
                    //                        }
                    //                        var OldVcivilinfo = _dbContext.TLIcivilWithLegs.AsNoTracking().FirstOrDefault(x => x.Id == AllcivilinstId.allCivilInst.civilWithLegsId);

                    //                        if (OldVcivilinfo != null)
                    //                        {

                    //                            var EquivalentSpace = mwDish.SpaceInstallation * (mwDish.CenterHigh / (float)AllcivilinstId.allCivilInst.civilWithLegs.HeightBase);

                    //                            AllcivilinstId.allCivilInst.civilWithLegs.CurrentLoads += EquivalentSpace;
                    //                            mwDish.EquivalentSpace = EquivalentSpace;
                    //                            _unitOfWork.CivilWithLegsRepository.UpdateWithHistory(UserId, OldVcivilinfo, AllcivilinstId.allCivilInst.civilWithLegs);

                    //                            _unitOfWork.SaveChanges();
                    //                        }
                    //                        if (mwDish?.ItemConnectToId != null)
                    //                        {
                    //                            TLIitemConnectTo ConnectedToEntity = _unitOfWork.ItemConnectToRepository.GetByID(mwDish.ItemConnectToId);
                    //                            if (ConnectedToEntity.Name.ToLower() == "farsitedish")
                    //                                if (string.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                    //                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if dish connected to FarSiteDish", (int)ApiReturnCode.fail);
                    //                            if (ConnectedToEntity.Name.ToLower() == "farsitedish" && mwDish.RepeaterTypeId != null)
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not selected RepeaterType because selected itemconecctedto is farsitedish", (int)ApiReturnCode.fail);

                    //                            else if (ConnectedToEntity.Name.ToLower() == "repeater")
                    //                                {
                    //                                    if (mwDish.RepeaterTypeId == null)
                    //                                    {
                    //                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type shouldn't be null", (int)ApiReturnCode.fail);
                    //                                    }
                    //                                    else
                    //                                    {
                    //                                        TLIrepeaterType RepeaterTypeEntity = null;
                    //                                        if (mwDish.RepeaterTypeId != null)
                    //                                        {
                    //                                            RepeaterTypeEntity = _unitOfWork.RepeaterTypeRepository.GetWhereFirst(x => x.Id == mwDish.RepeaterTypeId);
                    //                                            if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() != "active" && RepeaterTypeEntity.Name.ToLower() != "passive")
                    //                                            {
                    //                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type should be active or passive", (int)ApiReturnCode.fail);
                    //                                            }
                    //                                            if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() == "active")
                    //                                            {
                    //                                                if (String.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                    //                                                {
                    //                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if repeater type is active", (int)ApiReturnCode.fail);
                    //                                                }
                    //                                            }
                    //                                            else if (RepeaterTypeEntity.Name.ToLower() == "passive")
                    //                                            {
                    //                                                if (ConnectedToEntity.Name.ToLower() != "repeater" || RepeaterTypeEntity.Name.ToLower() != "passive")
                    //                                                {
                    //                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "The dish should be connected to repeater and repeater type is passive", (int)ApiReturnCode.fail);
                    //                                                }
                    //                                            }
                    //                                        }
                    //                                    }
                    //                                }
                    //                        }
                    //                        mwDish.MwDishLibraryId = AddMW_Dish.civilType.MwDishLibraryId;
                    //                        _unitOfWork.MW_DishRepository.UpdateWithHistory(UserId, MWDishInst.allLoadInst.mwDish, mwDish);
                    //                        _unitOfWork.SaveChanges();
                    //                        if (AddMW_Dish.civilLoads != null)
                    //                        {
                    //                            TLIcivilLoads tLIcivilLoads = new TLIcivilLoads()
                    //                            {
                    //                                InstallationDate = AddMW_Dish.civilLoads.InstallationDate,
                    //                                ItemOnCivilStatus = AddMW_Dish.civilLoads.ItemOnCivilStatus,
                    //                                ItemStatus = AddMW_Dish.civilLoads?.ItemStatus,
                    //                                Dismantle = false,
                    //                                ReservedSpace = AddMW_Dish.civilLoads.ReservedSpace,

                    //                            };
                    //                            _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, MWDishInst, tLIcivilLoads);
                    //                            _unitOfWork.SaveChanges();

                    //                        }

                    //                        if (AddMW_Dish.dynamicAttribute != null ? AddMW_Dish.dynamicAttribute.Count() > 0 : false)
                    //                            _unitOfWork.DynamicAttInstValueRepository.UpdateDynamicValues(UserId, AddMW_Dish.dynamicAttribute, TableNameId, mwDish.Id);



                    //                    }
                    //                    else if (AddMW_Dish.civilLoads.ReservedSpace == true && AddMW_Dish.civilLoads.ReservedSpace == false)
                    //                    {

                    //                        if (mwDish.CenterHigh <= 0)
                    //                        {
                    //                            if (mwDish.HBA_Surface <= 0)
                    //                            {
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HBA_Surface must bigger from zero", (int)ApiReturnCode.fail);
                    //                            }
                    //                            else if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter <= 0)
                    //                            {
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "CenterHigh must bigger from zero", (int)ApiReturnCode.fail);
                    //                            }
                    //                            else
                    //                            {
                    //                                mwDish.CenterHigh = mwDish.HBA + MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter / 2;
                    //                            }
                    //                        }
                    //                        if (mwDish.SpaceInstallation == 0)
                    //                        {


                    //                            if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.SpaceLibrary == 0)
                    //                            {
                    //                                if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter == 0)
                    //                                {
                    //                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "SpaceInstallation must bigger from zero", (int)ApiReturnCode.fail);
                    //                                }
                    //                                mwDish.SpaceInstallation = Convert.ToSingle(3.14) * (float)Math.Pow(MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter / 2, 2);
                    //                            }
                    //                            else
                    //                            {
                    //                                mwDish.SpaceInstallation = MWDishInst.allLoadInst.mwDish.MwDishLibrary.SpaceLibrary;
                    //                            }
                    //                        }
                    //                        if (AddMW_Dish.installationAttributes.Azimuth <= 0)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Azimuth must bigger from zero", (int)ApiReturnCode.fail);
                    //                        }
                    //                        if (AddMW_Dish.installationAttributes.HeightBase <= 0)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HeightBase must bigger from zero", (int)ApiReturnCode.fail);
                    //                        }
                    //                        if (!string.IsNullOrEmpty(mwDish.Serial_Number))
                    //                        {
                    //                            bool CheckSerialNumber = _unitOfWork.MW_DishRepository.Any(x => x.Serial_Number == mwDish.Serial_Number);
                    //                            if (CheckSerialNumber)
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The Serial Number {mwDish.Serial_Number} is already exists", (int)ApiReturnCode.fail);
                    //                        }
                    //                        if (MWDishInst.sideArmId != null)
                    //                        {
                    //                            List<MV_MWDISH_VIEW> Checkinstallationplace = _dbContext.MV_MWDISH_VIEW.Where(
                    //                               x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id && x.INSTALLATIONPLACE.ToLower() == "sideArm" &&
                    //                               x.SIDEARM_ID == MWDishInst.sideArmId).ToList();
                    //                            MV_MWDISH_VIEW CheckAzimuthAndHeightBase = Checkinstallationplace.FirstOrDefault(x => x.Azimuth == mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                    //                            if (CheckAzimuthAndHeightBase != null)
                    //                            {
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                    //                            }
                    //                            else if (Checkinstallationplace != null && Checkinstallationplace.Count >= 3)
                    //                            {
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                    //                            }
                    //                            else
                    //                            {
                    //                                var SideArmName1 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWDishInst.sideArmId);
                    //                                if (SideArmName1 != null && AddMW_Dish.installationAttributes.Azimuth > 0 && AddMW_Dish.installationAttributes.HeightBase > 0)
                    //                                {
                    //                                    mwDish.DishName = SideArmName1?.Name + " " + AddMW_Dish.installationAttributes.Azimuth + " " + AddMW_Dish.installationAttributes.HeightBase;
                    //                                }
                    //                            }
                    //                        }
                    //                        if (MWDishInst.BranchingSideArmId != null)
                    //                        {
                    //                            List<MV_MWDISH_VIEW> Checkinstallationplace2 = _dbContext.MV_MWDISH_VIEW.Where(
                    //                               x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id && x.INSTALLATIONPLACE.ToLower() == "sideArm" &&
                    //                               x.SIDEARM_ID == MWDishInst.BranchingSideArmId).ToList();
                    //                            MV_MWDISH_VIEW CheckAzimuthAndHeightBase = Checkinstallationplace2.FirstOrDefault(x => x.Azimuth == mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                    //                            if (CheckAzimuthAndHeightBase != null)
                    //                            {
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                    //                            }
                    //                            else if (Checkinstallationplace2 != null && Checkinstallationplace2.Count >= 3)
                    //                            {
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                    //                            }
                    //                            else
                    //                            {
                    //                                var SideArmName1 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWDishInst.sideArmId);

                    //                                var SideArmName2 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWDishInst.BranchingSideArmId);
                    //                                if (SideArmName1 != null && SideArmName2 != null && AddMW_Dish.installationAttributes.Azimuth > 0 && AddMW_Dish.installationAttributes.HeightBase > 0)
                    //                                {
                    //                                    mwDish.DishName = SideArmName1?.Name + " " + SideArmName2?.Name + " " + AddMW_Dish.installationAttributes.Azimuth + " " + AddMW_Dish.installationAttributes.HeightBase;
                    //                                }
                    //                            }
                    //                        }
                    //                        TLIcivilLoads CheckName = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => !x.Dismantle && (x.allLoadInstId != null ?
                    //                           !x.allLoadInst.Draft && (x.allLoadInst.mwDishId != null ? x.allLoadInst.mwDish.DishName.ToLower() == mwDish.DishName.ToLower() : false) : false),
                    //                               x => x.allLoadInst, x => x.allLoadInst.mwDish);
                    //                        if (CheckName != null)
                    //                            return new Response<GetForAddMWDishInstallationObject>(true, null, null, $"This name {mwDish.DishName} is already exists", (int)ApiReturnCode.fail);
                    //                        var OldVcivilinfo = _dbContext.TLIcivilWithLegs.AsNoTracking().FirstOrDefault(x => x.Id == AllcivilinstId.allCivilInst.civilWithLegsId);

                    //                        if (OldVcivilinfo != null)
                    //                        {

                    //                            AllcivilinstId.allCivilInst.civilWithLegs.CurrentLoads = AllcivilinstId.allCivilInst.civilWithLegs.CurrentLoads - MWDishInst.allLoadInst.mwDish.EquivalentSpace;
                    //                            _unitOfWork.CivilWithLegsRepository.UpdateWithHistory(UserId, OldVcivilinfo, AllcivilinstId.allCivilInst.civilWithLegs);

                    //                            _unitOfWork.SaveChanges();

                    //                        }
                    //                        if (mwDish?.ItemConnectToId != null)
                    //                        {
                    //                            TLIitemConnectTo ConnectedToEntity = _unitOfWork.ItemConnectToRepository.GetByID(mwDish.ItemConnectToId);
                    //                            if (ConnectedToEntity.Name.ToLower() == "farsitedish")
                    //                                if (string.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                    //                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if dish connected to FarSiteDish", (int)ApiReturnCode.fail);
                    //                            if (ConnectedToEntity.Name.ToLower() == "farsitedish" && mwDish.RepeaterTypeId != null)
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not selected RepeaterType because selected itemconecctedto is farsitedish", (int)ApiReturnCode.fail);

                    //                            else if (ConnectedToEntity.Name.ToLower() == "repeater")
                    //                                {
                    //                                    if (mwDish.RepeaterTypeId == null)
                    //                                    {
                    //                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type shouldn't be null", (int)ApiReturnCode.fail);
                    //                                    }
                    //                                    else
                    //                                    {
                    //                                        TLIrepeaterType RepeaterTypeEntity = null;
                    //                                        if (mwDish.RepeaterTypeId != null)
                    //                                        {
                    //                                            RepeaterTypeEntity = _unitOfWork.RepeaterTypeRepository.GetWhereFirst(x => x.Id == mwDish.RepeaterTypeId);
                    //                                            if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() != "active" && RepeaterTypeEntity.Name.ToLower() != "passive")
                    //                                            {
                    //                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type should be active or passive", (int)ApiReturnCode.fail);
                    //                                            }
                    //                                            if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() == "active")
                    //                                            {
                    //                                                if (String.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                    //                                                {
                    //                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if repeater type is active", (int)ApiReturnCode.fail);
                    //                                                }
                    //                                            }
                    //                                            else if (RepeaterTypeEntity.Name.ToLower() == "passive")
                    //                                            {
                    //                                                if (ConnectedToEntity.Name.ToLower() != "repeater" || RepeaterTypeEntity.Name.ToLower() != "passive")
                    //                                                {
                    //                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "The dish should be connected to repeater and repeater type is passive", (int)ApiReturnCode.fail);
                    //                                                }
                    //                                            }
                    //                                        }
                    //                                    }
                    //                                }
                    //                        }
                    //                        mwDish.MwDishLibraryId = AddMW_Dish.civilType.MwDishLibraryId;
                    //                        _unitOfWork.MW_DishRepository.UpdateWithHistory(UserId, MWDishInst.allLoadInst.mwDish, mwDish);
                    //                        _unitOfWork.SaveChanges();
                    //                        if (AddMW_Dish.civilLoads != null)
                    //                        {
                    //                            TLIcivilLoads tLIcivilLoads = new TLIcivilLoads()
                    //                            {
                    //                                InstallationDate = AddMW_Dish.civilLoads.InstallationDate,
                    //                                ItemOnCivilStatus = AddMW_Dish.civilLoads.ItemOnCivilStatus,
                    //                                ItemStatus = AddMW_Dish.civilLoads?.ItemStatus,
                    //                                Dismantle = false,
                    //                                ReservedSpace = AddMW_Dish.civilLoads.ReservedSpace,

                    //                            };
                    //                            _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, MWDishInst, tLIcivilLoads);
                    //                            _unitOfWork.SaveChanges();

                    //                        }

                    //                        if (AddMW_Dish.dynamicAttribute != null ? AddMW_Dish.dynamicAttribute.Count() > 0 : false)
                    //                            _unitOfWork.DynamicAttInstValueRepository.UpdateDynamicValues(UserId, AddMW_Dish.dynamicAttribute, TableNameId, mwDish.Id);



                    //                    }
                    //                    else if (AddMW_Dish.civilLoads.ReservedSpace == false && AddMW_Dish.civilLoads.ReservedSpace == true)
                    //                    {

                    //                        if (mwDish.CenterHigh <= 0)
                    //                        {
                    //                            if (mwDish.HBA_Surface <= 0)
                    //                            {
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HBA_Surface must bigger from zero", (int)ApiReturnCode.fail);
                    //                            }
                    //                            else if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter <= 0)
                    //                            {
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "CenterHigh must bigger from zero", (int)ApiReturnCode.fail);
                    //                            }
                    //                            else
                    //                            {
                    //                                mwDish.CenterHigh = mwDish.HBA + MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter / 2;
                    //                            }
                    //                        }
                    //                        if (mwDish.SpaceInstallation == 0)
                    //                        {


                    //                            if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.SpaceLibrary == 0)
                    //                            {
                    //                                if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter == 0)
                    //                                {
                    //                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "SpaceInstallation must bigger from zero", (int)ApiReturnCode.fail);
                    //                                }
                    //                                mwDish.SpaceInstallation = Convert.ToSingle(3.14) * (float)Math.Pow(MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter / 2, 2);
                    //                            }
                    //                            else
                    //                            {
                    //                                mwDish.SpaceInstallation = MWDishInst.allLoadInst.mwDish.MwDishLibrary.SpaceLibrary;
                    //                            }
                    //                        }
                    //                        if (AddMW_Dish.installationAttributes.Azimuth <= 0)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Azimuth must bigger from zero", (int)ApiReturnCode.fail);
                    //                        }
                    //                        if (AddMW_Dish.installationAttributes.HeightBase <= 0)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HeightBase must bigger from zero", (int)ApiReturnCode.fail);
                    //                        }
                    //                        if (!string.IsNullOrEmpty(mwDish.Serial_Number))
                    //                        {
                    //                            bool CheckSerialNumber = _unitOfWork.MW_DishRepository.Any(x => x.Serial_Number == mwDish.Serial_Number);
                    //                            if (CheckSerialNumber)
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The Serial Number {mwDish.Serial_Number} is already exists", (int)ApiReturnCode.fail);
                    //                        }
                    //                        if (MWDishInst.sideArmId != null)
                    //                        {
                    //                            List<MV_MWDISH_VIEW> Checkinstallationplace = _dbContext.MV_MWDISH_VIEW.Where(
                    //                               x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id && x.INSTALLATIONPLACE.ToLower() == "sideArm" &&
                    //                               x.SIDEARM_ID == MWDishInst.sideArmId).ToList();
                    //                            MV_MWDISH_VIEW CheckAzimuthAndHeightBase = Checkinstallationplace.FirstOrDefault(x => x.Azimuth == mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                    //                            if (CheckAzimuthAndHeightBase != null)
                    //                            {
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                    //                            }
                    //                            else if (Checkinstallationplace != null && Checkinstallationplace.Count >= 3)
                    //                            {
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                    //                            }
                    //                            else
                    //                            {
                    //                                var SideArmName1 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWDishInst.sideArmId);
                    //                                if (SideArmName1 != null && AddMW_Dish.installationAttributes.Azimuth > 0 && AddMW_Dish.installationAttributes.HeightBase > 0)
                    //                                {
                    //                                    mwDish.DishName = SideArmName1?.Name + " " + AddMW_Dish.installationAttributes.Azimuth + " " + AddMW_Dish.installationAttributes.HeightBase;
                    //                                }
                    //                            }
                    //                        }
                    //                        if (MWDishInst.BranchingSideArmId != null)
                    //                        {
                    //                            List<MV_MWDISH_VIEW> Checkinstallationplace2 = _dbContext.MV_MWDISH_VIEW.Where(
                    //                               x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id && x.INSTALLATIONPLACE.ToLower() == "sideArm" &&
                    //                               x.SIDEARM_ID == MWDishInst.BranchingSideArmId).ToList();
                    //                            MV_MWDISH_VIEW CheckAzimuthAndHeightBase = Checkinstallationplace2.FirstOrDefault(x => x.Azimuth == mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                    //                            if (CheckAzimuthAndHeightBase != null)
                    //                            {
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                    //                            }
                    //                            else if (Checkinstallationplace2 != null && Checkinstallationplace2.Count >= 3)
                    //                            {
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                    //                            }
                    //                            else
                    //                            {
                    //                                var SideArmName1 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWDishInst.sideArmId);

                    //                                var SideArmName2 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWDishInst.BranchingSideArmId);
                    //                                if (SideArmName1 != null && SideArmName2 != null && AddMW_Dish.installationAttributes.Azimuth > 0 && AddMW_Dish.installationAttributes.HeightBase > 0)
                    //                                {
                    //                                    mwDish.DishName = SideArmName1?.Name + " " + SideArmName2?.Name + " " + AddMW_Dish.installationAttributes.Azimuth + " " + AddMW_Dish.installationAttributes.HeightBase;
                    //                                }
                    //                            }
                    //                        }
                    //                        TLIcivilLoads CheckName = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => !x.Dismantle && (x.allLoadInstId != null ?
                    //                           !x.allLoadInst.Draft && (x.allLoadInst.mwDishId != null ? x.allLoadInst.mwDish.DishName.ToLower() == mwDish.DishName.ToLower() : false) : false),
                    //                               x => x.allLoadInst, x => x.allLoadInst.mwDish);
                    //                        if (CheckName != null)
                    //                            return new Response<GetForAddMWDishInstallationObject>(true, null, null, $"This name {mwDish.DishName} is already exists", (int)ApiReturnCode.fail);

                    //                        if (AllcivilinstId.allCivilInst.civilWithLegs?.CurrentLoads == null)
                    //                        {
                    //                            AllcivilinstId.allCivilInst.civilWithLegs.CurrentLoads = 0;
                    //                        }
                    //                        var OldVcivilinfo = _dbContext.TLIcivilWithLegs.AsNoTracking().FirstOrDefault(x => x.Id == AllcivilinstId.allCivilInst.civilWithLegsId);

                    //                        if (OldVcivilinfo != null)
                    //                        {

                    //                            var EquivalentSpace = mwDish.SpaceInstallation * (mwDish.CenterHigh / (float)AllcivilinstId.allCivilInst.civilWithLegs.HeightBase);

                    //                            AllcivilinstId.allCivilInst.civilWithLegs.CurrentLoads += EquivalentSpace;
                    //                            mwDish.EquivalentSpace = EquivalentSpace;
                    //                            _unitOfWork.CivilWithLegsRepository.UpdateWithHistory(UserId, OldVcivilinfo, AllcivilinstId.allCivilInst.civilWithLegs);

                    //                            _unitOfWork.SaveChanges();
                    //                        }
                    //                        if (mwDish?.ItemConnectToId != null)
                    //                        {
                    //                            TLIitemConnectTo ConnectedToEntity = _unitOfWork.ItemConnectToRepository.GetByID(mwDish.ItemConnectToId);
                    //                            if (ConnectedToEntity.Name.ToLower() == "farsitedish")
                    //                                if (string.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                    //                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if dish connected to FarSiteDish", (int)ApiReturnCode.fail);
                    //                            if (ConnectedToEntity.Name.ToLower() == "farsitedish" && mwDish.RepeaterTypeId != null)
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not selected RepeaterType because selected itemconecctedto is farsitedish", (int)ApiReturnCode.fail);

                    //                            else if (ConnectedToEntity.Name.ToLower() == "repeater")
                    //                                {
                    //                                    if (mwDish.RepeaterTypeId == null)
                    //                                    {
                    //                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type shouldn't be null", (int)ApiReturnCode.fail);
                    //                                    }
                    //                                    else
                    //                                    {
                    //                                        TLIrepeaterType RepeaterTypeEntity = null;
                    //                                        if (mwDish.RepeaterTypeId != null)
                    //                                        {
                    //                                            RepeaterTypeEntity = _unitOfWork.RepeaterTypeRepository.GetWhereFirst(x => x.Id == mwDish.RepeaterTypeId);
                    //                                            if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() != "active" && RepeaterTypeEntity.Name.ToLower() != "passive")
                    //                                            {
                    //                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type should be active or passive", (int)ApiReturnCode.fail);
                    //                                            }
                    //                                            if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() == "active")
                    //                                            {
                    //                                                if (String.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                    //                                                {
                    //                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if repeater type is active", (int)ApiReturnCode.fail);
                    //                                                }
                    //                                            }
                    //                                            else if (RepeaterTypeEntity.Name.ToLower() == "passive")
                    //                                            {
                    //                                                if (ConnectedToEntity.Name.ToLower() != "repeater" || RepeaterTypeEntity.Name.ToLower() != "passive")
                    //                                                {
                    //                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "The dish should be connected to repeater and repeater type is passive", (int)ApiReturnCode.fail);
                    //                                                }
                    //                                            }
                    //                                        }
                    //                                    }
                    //                                }
                    //                        }
                    //                        mwDish.MwDishLibraryId = AddMW_Dish.civilType.MwDishLibraryId;
                    //                        _unitOfWork.MW_DishRepository.UpdateWithHistory(UserId, MWDishInst.allLoadInst.mwDish, mwDish);
                    //                        _unitOfWork.SaveChanges();
                    //                        if (AddMW_Dish.civilLoads != null)
                    //                        {
                    //                            TLIcivilLoads tLIcivilLoads = new TLIcivilLoads()
                    //                            {
                    //                                InstallationDate = AddMW_Dish.civilLoads.InstallationDate,
                    //                                ItemOnCivilStatus = AddMW_Dish.civilLoads.ItemOnCivilStatus,
                    //                                ItemStatus = AddMW_Dish.civilLoads?.ItemStatus,
                    //                                Dismantle = false,
                    //                                ReservedSpace = AddMW_Dish.civilLoads.ReservedSpace,

                    //                            };
                    //                            _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, MWDishInst, tLIcivilLoads);
                    //                            _unitOfWork.SaveChanges();

                    //                        }

                    //                        if (AddMW_Dish.dynamicAttribute != null ? AddMW_Dish.dynamicAttribute.Count() > 0 : false)
                    //                            _unitOfWork.DynamicAttInstValueRepository.UpdateDynamicValues(UserId, AddMW_Dish.dynamicAttribute, TableNameId, mwDish.Id);



                    //                    }
                    //                    else if (AddMW_Dish.civilLoads.ReservedSpace == false && AddMW_Dish.civilLoads.ReservedSpace == false)
                    //                    {

                    //                        if (mwDish.CenterHigh <= 0)
                    //                        {
                    //                            if (mwDish.HBA_Surface <= 0)
                    //                            {
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HBA_Surface must bigger from zero", (int)ApiReturnCode.fail);
                    //                            }
                    //                            else if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter <= 0)
                    //                            {
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "CenterHigh must bigger from zero", (int)ApiReturnCode.fail);
                    //                            }
                    //                            else
                    //                            {
                    //                                mwDish.CenterHigh = mwDish.HBA + MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter / 2;
                    //                            }
                    //                        }
                    //                        if (mwDish.SpaceInstallation == 0)
                    //                        {


                    //                            if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.SpaceLibrary == 0)
                    //                            {
                    //                                if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter == 0)
                    //                                {
                    //                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "SpaceInstallation must bigger from zero", (int)ApiReturnCode.fail);
                    //                                }
                    //                                mwDish.SpaceInstallation = Convert.ToSingle(3.14) * (float)Math.Pow(MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter / 2, 2);
                    //                            }
                    //                            else
                    //                            {
                    //                                mwDish.SpaceInstallation = MWDishInst.allLoadInst.mwDish.MwDishLibrary.SpaceLibrary;
                    //                            }
                    //                        }
                    //                        if (AddMW_Dish.installationAttributes.Azimuth <= 0)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Azimuth must bigger from zero", (int)ApiReturnCode.fail);
                    //                        }
                    //                        if (AddMW_Dish.installationAttributes.HeightBase <= 0)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HeightBase must bigger from zero", (int)ApiReturnCode.fail);
                    //                        }
                    //                        if (!string.IsNullOrEmpty(mwDish.Serial_Number))
                    //                        {
                    //                            bool CheckSerialNumber = _unitOfWork.MW_DishRepository.Any(x => x.Serial_Number == mwDish.Serial_Number);
                    //                            if (CheckSerialNumber)
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The Serial Number {mwDish.Serial_Number} is already exists", (int)ApiReturnCode.fail);
                    //                        }
                    //                        if (MWDishInst.sideArmId != null)
                    //                        {
                    //                            List<MV_MWDISH_VIEW> Checkinstallationplace = _dbContext.MV_MWDISH_VIEW.Where(
                    //                               x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id && x.INSTALLATIONPLACE.ToLower() == "sideArm" &&
                    //                               x.SIDEARM_ID == MWDishInst.sideArmId).ToList();
                    //                            MV_MWDISH_VIEW CheckAzimuthAndHeightBase = Checkinstallationplace.FirstOrDefault(x => x.Azimuth == mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                    //                            if (CheckAzimuthAndHeightBase != null)
                    //                            {
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                    //                            }
                    //                            else if (Checkinstallationplace != null && Checkinstallationplace.Count >= 3)
                    //                            {
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                    //                            }
                    //                            else
                    //                            {
                    //                                var SideArmName1 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWDishInst.sideArmId);
                    //                                if (SideArmName1 != null && AddMW_Dish.installationAttributes.Azimuth > 0 && AddMW_Dish.installationAttributes.HeightBase > 0)
                    //                                {
                    //                                    mwDish.DishName = SideArmName1?.Name + " " + AddMW_Dish.installationAttributes.Azimuth + " " + AddMW_Dish.installationAttributes.HeightBase;
                    //                                }
                    //                            }
                    //                        }
                    //                        if (MWDishInst.BranchingSideArmId != null)
                    //                        {
                    //                            List<MV_MWDISH_VIEW> Checkinstallationplace2 = _dbContext.MV_MWDISH_VIEW.Where(
                    //                               x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id && x.INSTALLATIONPLACE.ToLower() == "sideArm" &&
                    //                               x.SIDEARM_ID == MWDishInst.BranchingSideArmId).ToList();
                    //                            MV_MWDISH_VIEW CheckAzimuthAndHeightBase = Checkinstallationplace2.FirstOrDefault(x => x.Azimuth == mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                    //                            if (CheckAzimuthAndHeightBase != null)
                    //                            {
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                    //                            }
                    //                            else if (Checkinstallationplace2 != null && Checkinstallationplace2.Count >= 3)
                    //                            {
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                    //                            }
                    //                            else
                    //                            {
                    //                                var SideArmName1 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWDishInst.sideArmId);

                    //                                var SideArmName2 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWDishInst.BranchingSideArmId);
                    //                                if (SideArmName1 != null && SideArmName2 != null && AddMW_Dish.installationAttributes.Azimuth > 0 && AddMW_Dish.installationAttributes.HeightBase > 0)
                    //                                {
                    //                                    mwDish.DishName = SideArmName1?.Name + " " + SideArmName2?.Name + " " + AddMW_Dish.installationAttributes.Azimuth + " " + AddMW_Dish.installationAttributes.HeightBase;
                    //                                }
                    //                            }
                    //                        }
                    //                        TLIcivilLoads CheckName = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => !x.Dismantle && (x.allLoadInstId != null ?
                    //                           !x.allLoadInst.Draft && (x.allLoadInst.mwDishId != null ? x.allLoadInst.mwDish.DishName.ToLower() == mwDish.DishName.ToLower() : false) : false),
                    //                               x => x.allLoadInst, x => x.allLoadInst.mwDish);
                    //                        if (CheckName != null)
                    //                            return new Response<GetForAddMWDishInstallationObject>(true, null, null, $"This name {mwDish.DishName} is already exists", (int)ApiReturnCode.fail);

                    //                        if (mwDish?.ItemConnectToId != null)
                    //                        {
                    //                            TLIitemConnectTo ConnectedToEntity = _unitOfWork.ItemConnectToRepository.GetByID(mwDish.ItemConnectToId);
                    //                            if (ConnectedToEntity.Name.ToLower() == "farsitedish")
                    //                                if (string.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                    //                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if dish connected to FarSiteDish", (int)ApiReturnCode.fail);
                    //                            if (ConnectedToEntity.Name.ToLower() == "farsitedish" && mwDish.RepeaterTypeId != null)
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not selected RepeaterType because selected itemconecctedto is farsitedish", (int)ApiReturnCode.fail);

                    //                            else if (ConnectedToEntity.Name.ToLower() == "repeater")
                    //                                {
                    //                                    if (mwDish.RepeaterTypeId == null)
                    //                                    {
                    //                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type shouldn't be null", (int)ApiReturnCode.fail);
                    //                                    }
                    //                                    else
                    //                                    {
                    //                                        TLIrepeaterType RepeaterTypeEntity = null;
                    //                                        if (mwDish.RepeaterTypeId != null)
                    //                                        {
                    //                                            RepeaterTypeEntity = _unitOfWork.RepeaterTypeRepository.GetWhereFirst(x => x.Id == mwDish.RepeaterTypeId);
                    //                                            if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() != "active" && RepeaterTypeEntity.Name.ToLower() != "passive")
                    //                                            {
                    //                                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type should be active or passive", (int)ApiReturnCode.fail);
                    //                                            }
                    //                                            if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() == "active")
                    //                                            {
                    //                                                if (String.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                    //                                                {
                    //                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if repeater type is active", (int)ApiReturnCode.fail);
                    //                                                }
                    //                                            }
                    //                                            else if (RepeaterTypeEntity.Name.ToLower() == "passive")
                    //                                            {
                    //                                                if (ConnectedToEntity.Name.ToLower() != "repeater" || RepeaterTypeEntity.Name.ToLower() != "passive")
                    //                                                {
                    //                                                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "The dish should be connected to repeater and repeater type is passive", (int)ApiReturnCode.fail);
                    //                                                }
                    //                                            }
                    //                                        }
                    //                                    }
                    //                                }
                    //                        }
                    //                        mwDish.MwDishLibraryId = AddMW_Dish.civilType.MwDishLibraryId;
                    //                        _unitOfWork.MW_DishRepository.UpdateWithHistory(UserId, MWDishInst.allLoadInst.mwDish, mwDish);
                    //                        _unitOfWork.SaveChanges();
                    //                        if (AddMW_Dish.civilLoads != null)
                    //                        {
                    //                            TLIcivilLoads tLIcivilLoads = new TLIcivilLoads()
                    //                            {
                    //                                InstallationDate = AddMW_Dish.civilLoads.InstallationDate,
                    //                                ItemOnCivilStatus = AddMW_Dish.civilLoads.ItemOnCivilStatus,
                    //                                ItemStatus = AddMW_Dish.civilLoads?.ItemStatus,
                    //                                Dismantle = false,
                    //                                ReservedSpace = AddMW_Dish.civilLoads.ReservedSpace,

                    //                            };
                    //                            _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, MWDishInst, tLIcivilLoads);
                    //                            _unitOfWork.SaveChanges();

                    //                        }

                    //                        if (AddMW_Dish.dynamicAttribute != null ? AddMW_Dish.dynamicAttribute.Count() > 0 : false)
                    //                            _unitOfWork.DynamicAttInstValueRepository.UpdateDynamicValues(UserId, AddMW_Dish.dynamicAttribute, TableNameId, mwDish.Id);
                    //                    }
                    //                    else
                    //                    {
                    //                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "this civil is not found ", (int)ApiReturnCode.fail);
                    //                    }
                    //                }
                    //                else
                    //                {
                    //                    return new Response<GetForAddMWDishInstallationObject>(false, null, null, "must selected sideArm ", (int)ApiReturnCode.fail);
                    //                }

                    //            }
                    //        }

                    //        else
                    //        {
                    //            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "must selected civilwithoutlegs item ", (int)ApiReturnCode.fail);
                    //        }

                    //        if (MWDishInst.allCivilInst.civilNonSteelId != null)
                    //        { 
                    //             if (MWDishInst.sideArmId != null)
                    //             {
                    //                var AllcivilinstId = _unitOfWork.CivilSiteDateRepository.GetIncludeWhereFirst(x => x.allCivilInst.civilNonSteelId ==
                    //                MWDishInst.allCivilInst.civilNonSteelId && !x.Dismantle, x => x.allCivilInst, x => x.allCivilInst.civilWithLegs, x => x.allCivilInst.civilWithoutLeg,
                    //                x => x.allCivilInst.civilWithLegs.CivilWithLegsLib, x => x.allCivilInst.civilWithoutLeg.CivilWithoutlegsLib);
                    //                if (AllcivilinstId != null)
                    //                {                  
                    //                    if (mwDish.CenterHigh <= 0)
                    //                    {
                    //                        if (mwDish.HBA_Surface <= 0)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HBA_Surface must bigger from zero", (int)ApiReturnCode.fail);
                    //                        }
                    //                        else if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter <= 0)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "CenterHigh must bigger from zero", (int)ApiReturnCode.fail);
                    //                        }
                    //                        else
                    //                        {
                    //                            mwDish.CenterHigh = mwDish.HBA + MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter / 2;
                    //                        }
                    //                    }
                    //                    if (mwDish.SpaceInstallation == 0)
                    //                    {


                    //                        if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.SpaceLibrary == 0)
                    //                        {
                    //                            if (MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter == 0)
                    //                            {
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "SpaceInstallation must bigger from zero", (int)ApiReturnCode.fail);
                    //                            }
                    //                            mwDish.SpaceInstallation = Convert.ToSingle(3.14) * (float)Math.Pow(MWDishInst.allLoadInst.mwDish.MwDishLibrary.diameter / 2, 2);
                    //                        }
                    //                        else
                    //                        {
                    //                            mwDish.SpaceInstallation = MWDishInst.allLoadInst.mwDish.MwDishLibrary.SpaceLibrary;
                    //                        }
                    //                    }
                    //                    if (AddMW_Dish.installationAttributes.Azimuth <= 0)
                    //                    {
                    //                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Azimuth must bigger from zero", (int)ApiReturnCode.fail);
                    //                    }
                    //                    if (AddMW_Dish.installationAttributes.HeightBase <= 0)
                    //                    {
                    //                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "HeightBase must bigger from zero", (int)ApiReturnCode.fail);
                    //                    }
                    //                    if (!string.IsNullOrEmpty(mwDish.Serial_Number))
                    //                    {
                    //                        bool CheckSerialNumber = _unitOfWork.MW_DishRepository.Any(x => x.Serial_Number == mwDish.Serial_Number);
                    //                        if (CheckSerialNumber)
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, $"The Serial Number {mwDish.Serial_Number} is already exists", (int)ApiReturnCode.fail);
                    //                    }
                    //                    if (MWDishInst.sideArmId != null)
                    //                    {
                    //                        List<MV_MWDISH_VIEW> Checkinstallationplace = _dbContext.MV_MWDISH_VIEW.Where(
                    //                            x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id && x.INSTALLATIONPLACE.ToLower() == "sideArm" &&
                    //                            x.SIDEARM_ID == MWDishInst.sideArmId).ToList();
                    //                        MV_MWDISH_VIEW CheckAzimuthAndHeightBase = Checkinstallationplace.FirstOrDefault(x => x.Azimuth == mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                    //                        if (CheckAzimuthAndHeightBase != null)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                    //                        }
                    //                        else if (Checkinstallationplace != null && Checkinstallationplace.Count >= 3)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                    //                        }
                    //                        else
                    //                        {
                    //                            var SideArmName1 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWDishInst.sideArmId);
                    //                            if (SideArmName1 != null && AddMW_Dish.installationAttributes.Azimuth > 0 && AddMW_Dish.installationAttributes.HeightBase > 0)
                    //                            {
                    //                                mwDish.DishName = SideArmName1?.Name + " " + AddMW_Dish.installationAttributes.Azimuth + " " + AddMW_Dish.installationAttributes.HeightBase;
                    //                            }
                    //                        }
                    //                    }
                    //                    if (MWDishInst.BranchingSideArmId != null)
                    //                    {
                    //                        List<MV_MWDISH_VIEW> Checkinstallationplace2 = _dbContext.MV_MWDISH_VIEW.Where(
                    //                            x => x.ALLCIVILINST_ID == AllcivilinstId.allCivilInst.Id && x.INSTALLATIONPLACE.ToLower() == "sideArm" &&
                    //                            x.SIDEARM_ID == MWDishInst.BranchingSideArmId).ToList();
                    //                        MV_MWDISH_VIEW CheckAzimuthAndHeightBase = Checkinstallationplace2.FirstOrDefault(x => x.Azimuth == mwDish.Azimuth && x.HeightBase == mwDish.HeightBase);
                    //                        if (CheckAzimuthAndHeightBase != null)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on same azimuth and height because found other dish in same angle", (int)ApiReturnCode.fail);
                    //                        }
                    //                        else if (Checkinstallationplace2 != null && Checkinstallationplace2.Count >= 3)
                    //                        {
                    //                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not installed the dish on selected installation place because found three dish in same place ", (int)ApiReturnCode.fail);
                    //                        }
                    //                        else
                    //                        {
                    //                            var SideArmName1 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWDishInst.sideArmId);

                    //                            var SideArmName2 = _unitOfWork.SideArmRepository.GetWhereFirst(x => x.Id == MWDishInst.BranchingSideArmId);
                    //                            if (SideArmName1 != null && SideArmName2 != null && AddMW_Dish.installationAttributes.Azimuth > 0 && AddMW_Dish.installationAttributes.HeightBase > 0)
                    //                            {
                    //                                mwDish.DishName = SideArmName1?.Name + " " + SideArmName2?.Name + " " + AddMW_Dish.installationAttributes.Azimuth + " " + AddMW_Dish.installationAttributes.HeightBase;
                    //                            }
                    //                        }
                    //                    }
                    //                    TLIcivilLoads CheckName = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => !x.Dismantle && (x.allLoadInstId != null ?
                    //                        !x.allLoadInst.Draft && (x.allLoadInst.mwDishId != null ? x.allLoadInst.mwDish.DishName.ToLower() == mwDish.DishName.ToLower() : false) : false),
                    //                            x => x.allLoadInst, x => x.allLoadInst.mwDish);
                    //                    if (CheckName != null)
                    //                        return new Response<GetForAddMWDishInstallationObject>(true, null, null, $"This name {mwDish.DishName} is already exists", (int)ApiReturnCode.fail);

                    //                    if (mwDish?.ItemConnectToId != null)
                    //                    {
                    //                        TLIitemConnectTo ConnectedToEntity = _unitOfWork.ItemConnectToRepository.GetByID(mwDish.ItemConnectToId);
                    //                        if (ConnectedToEntity.Name.ToLower() == "farsitedish")
                    //                            if (string.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if dish connected to FarSiteDish", (int)ApiReturnCode.fail);
                    //                         if (ConnectedToEntity.Name.ToLower() == "farsitedish" && mwDish.RepeaterTypeId !=null)
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "can not selected RepeaterType because selected itemconecctedto is farsitedish", (int)ApiReturnCode.fail);

                    //                         else if (ConnectedToEntity.Name.ToLower() == "repeater")
                    //                        {
                    //                            if (mwDish.RepeaterTypeId == null)
                    //                            {
                    //                                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type shouldn't be null", (int)ApiReturnCode.fail);
                    //                            }
                    //                            else
                    //                            {
                    //                                TLIrepeaterType RepeaterTypeEntity = null;
                    //                                if (mwDish.RepeaterTypeId != null)
                    //                                {
                    //                                    RepeaterTypeEntity = _unitOfWork.RepeaterTypeRepository.GetWhereFirst(x => x.Id == mwDish.RepeaterTypeId);
                    //                                    if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() != "active" && RepeaterTypeEntity.Name.ToLower() != "passive")
                    //                                    {
                    //                                        return new Response<GetForAddMWDishInstallationObject>(false, null, null, "if dish connected to repeater then repeater type should be active or passive", (int)ApiReturnCode.fail);
                    //                                    }
                    //                                    if (RepeaterTypeEntity != null && RepeaterTypeEntity.Name.ToLower() == "active")
                    //                                    {
                    //                                        if (String.IsNullOrEmpty(mwDish.Far_End_Site_Code))
                    //                                        {
                    //                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "Far Site Code Shouldn't be null if repeater type is active", (int)ApiReturnCode.fail);
                    //                                        }
                    //                                    }
                    //                                    else if (RepeaterTypeEntity.Name.ToLower() == "passive")
                    //                                    {
                    //                                        if (ConnectedToEntity.Name.ToLower() != "repeater" || RepeaterTypeEntity.Name.ToLower() != "passive")
                    //                                        {
                    //                                            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "The dish should be connected to repeater and repeater type is passive", (int)ApiReturnCode.fail);
                    //                                        }
                    //                                    }
                    //                                }
                    //                            }
                    //                        }
                    //                    }
                    //                    mwDish.MwDishLibraryId = AddMW_Dish.civilType.MwDishLibraryId;
                    //                    _unitOfWork.MW_DishRepository.UpdateWithHistory(UserId, MWDishInst.allLoadInst.mwDish, mwDish);
                    //                    _unitOfWork.SaveChanges();
                    //                    if (AddMW_Dish.civilLoads != null)
                    //                    {
                    //                        TLIcivilLoads tLIcivilLoads = new TLIcivilLoads()
                    //                        {
                    //                            InstallationDate = AddMW_Dish.civilLoads.InstallationDate,
                    //                            ItemOnCivilStatus = AddMW_Dish.civilLoads.ItemOnCivilStatus,
                    //                            ItemStatus = AddMW_Dish.civilLoads?.ItemStatus,
                    //                            Dismantle = false,
                    //                            ReservedSpace = AddMW_Dish.civilLoads.ReservedSpace,

                    //                        };
                    //                        _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, MWDishInst, tLIcivilLoads);
                    //                        _unitOfWork.SaveChanges();

                    //                    }

                    //                    if (AddMW_Dish.dynamicAttribute != null ? AddMW_Dish.dynamicAttribute.Count() > 0 : false)
                    //                        _unitOfWork.DynamicAttInstValueRepository.UpdateDynamicValues(UserId, AddMW_Dish.dynamicAttribute, TableNameId, mwDish.Id);

                    //                }
                    //             }
                    //            else
                    //            {
                    //                return new Response<GetForAddMWDishInstallationObject>(false, null, null, "this civil is not found ", (int)ApiReturnCode.fail);
                    //            }


                    //        }
                    //        else
                    //        {
                    //            return new Response<GetForAddMWDishInstallationObject>(false, null, null, "must selected sideArm ", (int)ApiReturnCode.fail);
                    //        }        

                    //    }

                    //}
                    //else if (LoadSubType.TLImwRFU.ToString() == TableName)
                    //{
                    //    TableNameId = _unitOfWork.TablesNamesRepository.GetWhereFirst(x => x.TableName.ToLower() == TablesNames.TLImwRFU.ToString().ToLower()).Id;
                    //    EditMW_RFUViewModel MW_RFUViewModel = _mapper.Map<EditMW_RFUViewModel>(MWInstallationViewModel);

                    //    TLIcivilLoads CivilLoads = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => !x.Dismantle && (x.allLoadInstId != null ?
                    //        x.allLoadInst.mwRFUId == MW_RFUViewModel.Id : false), x => x.allLoadInst);

                    //    string SiteCode = "";

                    //    if (CivilLoads != null)
                    //        SiteCode = CivilLoads.SiteCode;

                    //    else
                    //        SiteCode = null;

                    //    TLIcivilLoads CheckName = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => !x.Dismantle && x.allLoadInst.mwRFUId != MW_RFUViewModel.Id && (x.allLoadInstId != null ?
                    //        !x.allLoadInst.Draft && (x.allLoadInst.mwRFUId != null ? x.allLoadInst.mwRFU.Name.ToLower() == MW_RFUViewModel.Name.ToLower() : false) : false) &&
                    //        x.SiteCode.ToLower() == SiteCode.ToLower(),
                    //            x => x.allLoadInst, x => x.allLoadInst.mwRFU);

                    //    if (CheckName != null)
                    //        return new Response<ObjectInstAtts>(true, null, null, $"This name [{MW_RFUViewModel.Name}] is already exists", (int)ApiReturnCode.fail);

                    //    string CheckGeneralValidation = CheckGeneralValidationFunctionEditVersion(MW_RFUViewModel.DynamicInstAttsValue, TableName);

                    //    if (!string.IsNullOrEmpty(CheckGeneralValidation))
                    //        return new Response<ObjectInstAtts>(true, null, null, CheckGeneralValidation, (int)ApiReturnCode.fail);

                    //    string CheckDependencyValidation = CheckDependencyValidationEditVersion(MWInstallationViewModel, SiteCode, TableName);

                    //    if (!string.IsNullOrEmpty(CheckDependencyValidation))
                    //        return new Response<ObjectInstAtts>(true, null, null, CheckDependencyValidation, (int)ApiReturnCode.fail);

                    //    TLImwRFU mwRFU = _mapper.Map<TLImwRFU>(MW_RFUViewModel);
                    //    TLImwRFU OldMW_RFUViewModel = _unitOfWork.MW_RFURepository.GetAllAsQueryable().AsNoTracking().FirstOrDefault(x => x.Id == MW_RFUViewModel.Id);
                    //    if (mwRFU.HBA == OldMW_RFUViewModel.HBA && mwRFU.CenterHigh == OldMW_RFUViewModel.CenterHigh && mwRFU.SpaceInstallation == OldMW_RFUViewModel.SpaceInstallation && mwRFU.Azimuth != OldMW_RFUViewModel.Azimuth && MW_RFUViewModel.TLIcivilLoads.ReservedSpace == true)
                    //    {
                    //        var message = _unitOfWork.CivilWithLegsRepository.CheckloadsOnCivil(MW_RFUViewModel.TLIcivilLoads.allCivilInstId, 0, mwRFU.Azimuth, mwRFU.CenterHigh).Message;
                    //        if (message != "Success")
                    //        {
                    //            return new Response<ObjectInstAtts>(true, null, null, message, (int)ApiReturnCode.fail);
                    //        }
                    //    }
                    //    if (mwRFU.HBA != OldMW_RFUViewModel.HBA || mwRFU.CenterHigh != OldMW_RFUViewModel.CenterHigh || mwRFU.SpaceInstallation != OldMW_RFUViewModel.SpaceInstallation && MW_RFUViewModel.TLIcivilLoads.ReservedSpace == true)
                    //    {
                    //        var mwRFULibrary = _dbContext.TLImwRFULibrary.Where(x => x.Id == mwRFU.MwRFULibraryId).FirstOrDefault();
                    //        if (mwRFU.CenterHigh == 0 || mwRFU.CenterHigh == null)
                    //        {
                    //            mwRFU.CenterHigh = mwRFU.HBA + mwRFULibrary.Length / 2;
                    //        }
                    //        var message = _unitOfWork.CivilWithLegsRepository.CheckloadsOnCivil(MW_RFUViewModel.TLIcivilLoads.allCivilInstId, 0, mwRFU.Azimuth, mwRFU.CenterHigh).Message;
                    //        if (message != "Success")
                    //        {
                    //            return new Response<ObjectInstAtts>(true, null, null, message, (int)ApiReturnCode.fail);
                    //        }
                    //        if (MW_RFUViewModel.TLIcivilLoads.ReservedSpace == true && (MW_RFUViewModel.TLIcivilLoads.sideArmId == null || MW_RFUViewModel.TLIcivilLoads.sideArmId == 0))
                    //        {
                    //            mwRFU.EquivalentSpace = _unitOfWork.CivilWithLegsRepository.Checkspaceload(MW_RFUViewModel.TLIcivilLoads.allCivilInstId, TableName, mwRFU.SpaceInstallation, mwRFU.CenterHigh, mwRFU.MwRFULibraryId, mwRFU.HBA).Data;
                    //        }
                    //    }
                    //    _unitOfWork.MW_RFURepository.UpdateWithHistory(Helpers.LogFilterAttribute.UserId, OldMW_RFUViewModel, mwRFU);
                    //    var allloads = _unitOfWork.AllLoadInstRepository.GetWhereFirst(x => x.mwRFUId == MW_RFUViewModel.Id).Id;
                    //    var civilloads = _unitOfWork.CivilLoadsRepository.GetWhereFirst(x => x.allLoadInstId == allloads);
                    //    CivilLoads.InstallationDate = MW_RFUViewModel.TLIcivilLoads.InstallationDate;
                    //    CivilLoads.ItemOnCivilStatus = MW_RFUViewModel.TLIcivilLoads.ItemOnCivilStatus;
                    //    CivilLoads.ItemStatus = MW_RFUViewModel.TLIcivilLoads.ItemStatus;
                    //    CivilLoads.ReservedSpace = MW_RFUViewModel.TLIcivilLoads.ReservedSpace;
                    //    CivilLoads.sideArmId = MW_RFUViewModel.TLIcivilLoads.sideArmId;
                    //    CivilLoads.allCivilInstId = MW_RFUViewModel.TLIcivilLoads.allCivilInstId;
                    //    CivilLoads.legId = MW_RFUViewModel.TLIcivilLoads.legId;
                    //    CivilLoads.Leg2Id = MW_RFUViewModel.TLIcivilLoads.Leg2Id;

                    //    _unitOfWork.SaveChanges();
                    //    if (MW_RFUViewModel.DynamicInstAttsValue.Count > 0)
                    //    {
                    //        _unitOfWork.DynamicAttInstValueRepository.UpdateDynamicValue(MW_RFUViewModel.DynamicInstAttsValue, TableNameId, mwRFU.Id);
                    //    }
                    //    await _unitOfWork.SaveChangesAsync();

                    //}
                    //else if (LoadSubType.TLImwOther.ToString() == TableName)
                    //{
                    //    TableNameId = _unitOfWork.TablesNamesRepository.GetWhereFirst(x => x.TableName.ToLower() == TablesNames.TLImwOther.ToString().ToLower()).Id;
                    //    EditMw_OtherViewModel Mw_OtherViewModel = _mapper.Map<EditMw_OtherViewModel>(MWInstallationViewModel);

                    //    TLIcivilLoads CivilLoads = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => !x.Dismantle && (x.allLoadInstId != null ?
                    //        x.allLoadInst.mwOtherId == Mw_OtherViewModel.Id : false), x => x.allLoadInst);

                    //    string SiteCode = "";

                    //    if (CivilLoads != null)
                    //        SiteCode = CivilLoads.SiteCode;

                    //    else
                    //        SiteCode = null;

                    //    TLIcivilLoads CheckName = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => !x.Dismantle && x.allLoadInst.mwOtherId != Mw_OtherViewModel.Id && (x.allLoadInstId != null ?
                    //        !x.allLoadInst.Draft && (x.allLoadInst.mwOtherId != null ? x.allLoadInst.mwOther.Name.ToLower() == Mw_OtherViewModel.Name.ToLower() : false) : false) &&
                    //        x.SiteCode.ToLower() == SiteCode.ToLower(),
                    //            x => x.allLoadInst, x => x.allLoadInst.mwOther);

                    //    if (CheckName != null)
                    //        return new Response<ObjectInstAtts>(true, null, null, $"This name [{Mw_OtherViewModel.Name}] is already exists", (int)ApiReturnCode.fail);

                    //    string CheckGeneralValidation = CheckGeneralValidationFunctionEditVersion(Mw_OtherViewModel.DynamicInstAttsValue, TableName);

                    //    if (!string.IsNullOrEmpty(CheckGeneralValidation))
                    //        return new Response<ObjectInstAtts>(true, null, null, CheckGeneralValidation, (int)ApiReturnCode.fail);

                    //    string CheckDependencyValidation = CheckDependencyValidationEditVersion(MWInstallationViewModel, SiteCode, TableName);

                    //    if (!string.IsNullOrEmpty(CheckDependencyValidation))
                    //        return new Response<ObjectInstAtts>(true, null, null, CheckDependencyValidation, (int)ApiReturnCode.fail);

                    //    TLImwOther mwOther = _mapper.Map<TLImwOther>(Mw_OtherViewModel);
                    //    TLImwOther OldMw_OtherViewModel = _unitOfWork.Mw_OtherRepository.GetAllAsQueryable().AsNoTracking().FirstOrDefault(x => x.Id == Mw_OtherViewModel.Id);
                    //    if (mwOther.HBA != OldMw_OtherViewModel.HBA || mwOther.CenterHigh != OldMw_OtherViewModel.CenterHigh || mwOther.Spaceinstallation != OldMw_OtherViewModel.Spaceinstallation && Mw_OtherViewModel.TLIcivilLoads.ReservedSpace == true)
                    //    {
                    //        var mwOtherLibrary = _dbContext.TLImwOtherLibrary.Where(x => x.Id == mwOther.mwOtherLibraryId).FirstOrDefault();
                    //        if (mwOther.CenterHigh == 0 || mwOther.CenterHigh == null)
                    //        {
                    //            mwOther.CenterHigh = mwOther.HBA + mwOtherLibrary.Length / 2;
                    //        }
                    //        if (Mw_OtherViewModel.TLIcivilLoads.ReservedSpace == true && (Mw_OtherViewModel.TLIcivilLoads.sideArmId == null || Mw_OtherViewModel.TLIcivilLoads.sideArmId == 0))
                    //        {
                    //            mwOther.EquivalentSpace = _unitOfWork.CivilWithLegsRepository.Checkspaceload(Mw_OtherViewModel.TLIcivilLoads.allCivilInstId, TableName, mwOther.Spaceinstallation, mwOther.CenterHigh, mwOther.mwOtherLibraryId, mwOther.HBA).Data;
                    //        }
                    //    }
                    //    _unitOfWork.Mw_OtherRepository.UpdateWithHistory(Helpers.LogFilterAttribute.UserId, OldMw_OtherViewModel, mwOther);
                    //    var allloads = _unitOfWork.AllLoadInstRepository.GetWhereFirst(x => x.mwOtherId == Mw_OtherViewModel.Id).Id;
                    //    var civilloads = _unitOfWork.CivilLoadsRepository.GetWhereFirst(x => x.allLoadInstId == allloads);
                    //    CivilLoads.InstallationDate = Mw_OtherViewModel.TLIcivilLoads.InstallationDate;
                    //    CivilLoads.ItemOnCivilStatus = Mw_OtherViewModel.TLIcivilLoads.ItemOnCivilStatus;
                    //    CivilLoads.ItemStatus = Mw_OtherViewModel.TLIcivilLoads.ItemStatus;
                    //    CivilLoads.ReservedSpace = Mw_OtherViewModel.TLIcivilLoads.ReservedSpace;
                    //    CivilLoads.sideArmId = Mw_OtherViewModel.TLIcivilLoads.sideArmId;
                    //    CivilLoads.allCivilInstId = Mw_OtherViewModel.TLIcivilLoads.allCivilInstId;
                    //    CivilLoads.legId = Mw_OtherViewModel.TLIcivilLoads.legId;
                    //    CivilLoads.Leg2Id = Mw_OtherViewModel.TLIcivilLoads.Leg2Id;

                    //    _unitOfWork.SaveChanges();
                    //    if (Mw_OtherViewModel.DynamicInstAttsValue.Count > 0)
                    //    {
                    //        _unitOfWork.DynamicAttInstValueRepository.UpdateDynamicValue(Mw_OtherViewModel.DynamicInstAttsValue, TableNameId, mwOther.Id);
                    //    }
                    //    await _unitOfWork.SaveChangesAsync();

                    //}
                    if (TaskId != null)
                    {
                        var Submit = _unitOfWork.SiteRepository.SubmitTaskByTLI(TaskId);
                        var result = Submit.Result;
                        if (result.result == true && result.errorMessage == null)
                        {
                            _unitOfWork.SaveChanges();
                            transactionScope.Complete();
                        }
                        else
                        {
                            transactionScope.Dispose();
                            return new Response<GetForAddMWDishInstallationObject>(true, null, null, result.errorMessage.ToString(), (int)ApiReturnCode.fail);
                        }
                    }
                    else
                    {
                        _unitOfWork.SaveChanges();
                        transactionScope.Complete();
                    }
                    return new Response<GetForAddMWDishInstallationObject>();
                }
                catch (Exception err)
                {
                    return new Response<GetForAddMWDishInstallationObject>(true, null, null, err.Message, (int)ApiReturnCode.fail);
                }
            }
        }
        #region Helper Methods For UpdateSideArm Function..
        public string CheckDependencyValidationEditVersion(object Input, string SiteCode, string MWName)
        {
            if (MWName.ToLower() == TablesNames.TLImwDish.ToString().ToLower())
            {
                string MainTableName = TablesNames.TLImwDish.ToString();
                EditMW_DishViewModel EditInstallationViewModel = _mapper.Map<EditMW_DishViewModel>(Input);
                List<DynamicAttViewModel> DynamicAttributes = _mapper.Map<List<DynamicAttViewModel>>(_unitOfWork.DynamicAttRepository
                    .GetIncludeWhere(x => x.tablesNames.TableName.ToLower() == MainTableName.ToLower() && !x.disable
                        , x => x.tablesNames).ToList());

                foreach (DynamicAttViewModel DynamicAttribute in DynamicAttributes)
                {
                    TLIdependency DynamicAttributeMainDependency = _unitOfWork.DependencieRepository.GetIncludeWhereFirst(x => x.DynamicAttId == DynamicAttribute.Id &&
                        (x.ValueBoolean != null || x.ValueDateTime != null || x.ValueDouble != null || !string.IsNullOrEmpty(x.ValueString)) &&
                            x.OperationId != null, x => x.Operation);

                    if (DynamicAttributeMainDependency == null)
                        continue;

                    List<int> DependencyRows = _unitOfWork.DependencyRowRepository.GetWhere(x => x.DependencyId == DynamicAttributeMainDependency.Id)
                        .Select(x => x.RowId.Value).Distinct().ToList();

                    foreach (int RowId in DependencyRows)
                    {
                        List<TLIrule> Rules = _unitOfWork.RowRuleRepository.GetIncludeWhere(x => x.RowId == RowId && x.Rule.OperationId != null, x => x.Rule, x => x.Rule.tablesNames,
                            x => x.Rule.Operation, x => x.Rule.dynamicAtt, x => x.Rule.attributeActivated).Select(x => x.Rule).ToList();

                        int CheckIfSuccessAllRules = 0;

                        foreach (TLIrule Rule in Rules)
                        {
                            string SDTableName = Rule.tablesNames.TableName;

                            string DataType = "";

                            string Operation = Rule.Operation.Name;
                            object OperationValue = new object();

                            if (Rule.OperationValueBoolean != null)
                            {
                                DataType = "Bool";
                                OperationValue = Rule.OperationValueBoolean;
                            }
                            else if (Rule.OperationValueDateTime != null)
                            {
                                DataType = "DateTime";
                                OperationValue = Rule.OperationValueDateTime;
                            }
                            else if (Rule.OperationValueDouble != null)
                            {
                                DataType = "Double";
                                OperationValue = Rule.OperationValueDouble;
                            }
                            else if (!string.IsNullOrEmpty(Rule.OperationValueString))
                            {
                                DataType = "String";
                                OperationValue = Rule.OperationValueString;
                            }

                            if (MainTableName.ToLower() == SDTableName.ToLower())
                            {
                                object InsertedValue = new object();

                                if (Rule.attributeActivatedId != null)
                                {
                                    string AttributeName = Rule.attributeActivated.Key;

                                    object TestValue = EditInstallationViewModel.GetType().GetProperties()
                                        .FirstOrDefault(x => x.Name.ToLower() == AttributeName.ToLower()).GetValue(EditInstallationViewModel, null);

                                    if (TestValue == null)
                                        break;

                                    if (Rule.OperationValueBoolean != null)
                                        InsertedValue = bool.Parse(TestValue.ToString());

                                    else if (Rule.OperationValueDateTime != null)
                                        InsertedValue = DateTime.Parse(TestValue.ToString());

                                    else if (Rule.OperationValueDouble != null)
                                        InsertedValue = double.Parse(TestValue.ToString());

                                    else if (!string.IsNullOrEmpty(Rule.OperationValueString))
                                        InsertedValue = TestValue.ToString();
                                }
                                else if (Rule.dynamicAttId != null)
                                {
                                    BaseInstAttView DynamicObject = EditInstallationViewModel.DynamicInstAttsValue
                                        .FirstOrDefault(x => x.Id == Rule.dynamicAttId.Value);

                                    if (DynamicObject == null)
                                        break;

                                    string DynamicAttributeDataType = _unitOfWork.DataTypeRepository.GetByID(DynamicObject.DataTypeId.Value).Name;

                                    if (DynamicAttributeDataType.ToLower() == "boolean".ToLower())
                                        InsertedValue = bool.Parse(DynamicObject.Value.ToString());

                                    else if (DynamicAttributeDataType.ToLower() == "string".ToLower())
                                        InsertedValue = DynamicObject.Value.ToString();

                                    else if (DynamicAttributeDataType.ToLower() == "int".ToLower() || DynamicAttributeDataType.ToLower() == "double".ToLower())
                                        InsertedValue = double.Parse(DynamicObject.Value.ToString());

                                    else if (DynamicAttributeDataType.ToLower() == "datetime".ToLower())
                                        InsertedValue = DateTime.Parse(DynamicObject.Value.ToString());
                                }

                                if (Operation == "==" ? InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower() :
                                    Operation == "!=" ? InsertedValue.ToString().ToLower() != OperationValue.ToString().ToLower() :
                                    Operation == ">" ? Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == 1 :
                                    Operation == ">=" ? (Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == 1 ||
                                        InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower()) :
                                    Operation == "<" ? Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == -1 :
                                    Operation == "<=" ? (Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == -1 ||
                                        InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower()) : false)
                                {
                                    CheckIfSuccessAllRules++;
                                }
                            }
                            else
                            {
                                List<object> TableRecords = new List<object>();
                                if (Rule.attributeActivatedId != null)
                                {
                                    string AttributeName = Rule.attributeActivated.Key;

                                    if (OperationValue != null)
                                        TableRecords = _mapper.Map<List<object>>(_dbContext.GetType().GetProperty(SDTableName)
                                            .GetValue(_dbContext, null)).Where(x => x.GetType().GetProperty(AttributeName).GetValue(x, null) != null ? (Operation == ">" ?
                                               (DataType.ToLower() == "DateTime".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 : false) :
                                            Operation == ">=" ?
                                                (DataType.ToLower() == "DateTime".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 ||
                                                     x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 ||
                                                     x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) : false) :
                                            Operation == "<" ?
                                               (DataType.ToLower() == "DateTime".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 : false) :
                                            Operation == "<=" ?
                                                (DataType.ToLower() == "DateTime".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 ||
                                                     x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 ||
                                                     x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) : false) :
                                            Operation == "==" ?
                                                x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower() :
                                            Operation == "!=" ?
                                                x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() != OperationValue.ToString().ToLower() : false) : false).ToList();
                                }
                                else if (Rule.dynamicAttId != null)
                                {
                                    List<int> DynamicAttValuesInventoryIds = new List<int>();

                                    if (!DynamicAttribute.LibraryAtt)
                                    {
                                        DynamicAttValuesInventoryIds = _unitOfWork.DynamicAttInstValueRepository
                                            .GetWhere(x => (x.DynamicAttId == Rule.dynamicAttId.Value && !x.disable) &&
                                                (Operation == "==" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() == Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() == Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble == Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() == Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == "!=" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() != Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() != Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble != Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() != Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == ">" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime > Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble > Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == ">=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime >= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble >= Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime < Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble < Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime <= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble <= Rule.OperationValueDouble : false)) : false)

                                                ).Select(x => x.InventoryId).ToList();
                                    }
                                    else
                                    {
                                        DynamicAttValuesInventoryIds = _unitOfWork.DynamicAttLibRepository
                                            .GetWhere(x => (x.DynamicAttId == Rule.dynamicAttId && !x.disable) &&
                                                (Operation == "==" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() == Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() == Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble == Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() == Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == "!=" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() != Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() != Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble != Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() != Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == ">" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime > Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble > Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == ">=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime >= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble >= Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime < Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble < Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime <= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble <= Rule.OperationValueDouble : false)) : false)

                                                ).Select(x => x.InventoryId).ToList();
                                    }
                                    if (DynamicAttValuesInventoryIds != null ? DynamicAttValuesInventoryIds.Count() != 0 : false)
                                    {
                                        TableRecords = _mapper.Map<List<object>>(_dbContext.GetType()
                                            .GetProperty(SDTableName).GetValue(_dbContext, null))
                                                .Where(x => DynamicAttValuesInventoryIds.Contains(Convert.ToInt32(x.GetType().GetProperty("Id").GetValue(x, null)))).ToList();
                                    }
                                }

                                AddInstRuleViewModel AddInstRuleViewModel = new AddInstRuleViewModel();
                                if (Rule.dynamicAttId != null)
                                {
                                    AddInstRuleViewModel = new AddInstRuleViewModel
                                    {
                                        dynamicAttId = Rule.dynamicAttId,
                                        IsDynamic = true,
                                        OperationId = Rule.OperationId,
                                        OperationValueBoolean = Rule.OperationValueBoolean,
                                        OperationValueDateTime = Rule.OperationValueDateTime,
                                        OperationValueDouble = Rule.OperationValueDouble,
                                        OperationValueString = Rule.OperationValueString,
                                        TableName = Rule.tablesNames.TableName
                                    };
                                }
                                else if (Rule.attributeActivatedId != null)
                                {
                                    AddInstRuleViewModel = new AddInstRuleViewModel
                                    {
                                        attributeActivatedId = Rule.attributeActivatedId,
                                        IsDynamic = false,
                                        OperationId = Rule.OperationId,
                                        OperationValueBoolean = Rule.OperationValueBoolean,
                                        OperationValueDateTime = Rule.OperationValueDateTime,
                                        OperationValueDouble = Rule.OperationValueDouble,
                                        OperationValueString = Rule.OperationValueString,
                                        TableName = Rule.tablesNames.TableName
                                    };
                                }
                                List<object> RecordsIds = _mapper.Map<List<object>>(GetRecordsIds(MainTableName, AddInstRuleViewModel));

                                PathToCheckDependencyValidation Item = (PathToCheckDependencyValidation)Enum.Parse(typeof(PathToCheckDependencyValidation),
                                    MainTableName + SDTableName + "Goal");

                                List<string> Path = GetEnumDescription(Item).Split(" ").ToList();

                                object CheckId = new object();

                                if (Path.Count() > 1)
                                {
                                    object CivilLoads = EditInstallationViewModel.GetType().GetProperty(Path[0])
                                        .GetValue(EditInstallationViewModel, null);

                                    CheckId = CivilLoads.GetType().GetProperty(Path[1]).GetValue(CivilLoads, null) != null ?
                                        (int)CivilLoads.GetType().GetProperty(Path[1]).GetValue(CivilLoads, null) : new object();
                                }
                                else if (Path.Count() == 1 && Path[0].ToLower() == "sitecode")
                                {
                                    CheckId = SiteCode;
                                }
                                else if (Path.Count() == 1)
                                {
                                    if (EditInstallationViewModel.GetType().GetProperty(Path[0]).GetValue(EditInstallationViewModel, null) != null)
                                        CheckId = (int)EditInstallationViewModel.GetType().GetProperty(Path[0])
                                            .GetValue(EditInstallationViewModel, null);
                                }

                                if (RecordsIds.Exists(x => x.ToString().ToLower() == CheckId.ToString().ToLower()))
                                {
                                    CheckIfSuccessAllRules++;
                                }
                            }
                        }

                        if (Rules.Count() == CheckIfSuccessAllRules)
                        {
                            string DynamicAttributeName = "";
                            int DynamicAttributeId = _unitOfWork.DependencyRowRepository
                                .GetIncludeWhereFirst(x => x.RowId == RowId, x => x.Dependency).Dependency.DynamicAttId.Value;

                            BaseInstAttView InputDynamicAttribute = EditInstallationViewModel.DynamicInstAttsValue
                                .FirstOrDefault(x => x.Id == DynamicAttributeId);

                            if (InputDynamicAttribute == null)
                            {
                                DynamicAttributeName = _unitOfWork.DynamicAttRepository
                                    .GetWhereFirst(x => x.Id == DynamicAttributeId).Key;

                                return $"({DynamicAttributeName}) value can't be null";
                            }
                            else
                            {
                                object DependencyValidationValue = new object();
                                object InputDynamicValue = new object();

                                if (DynamicAttributeMainDependency.ValueBoolean != null)
                                {
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueBoolean;
                                    InputDynamicValue = bool.Parse(InputDynamicAttribute.Value.ToString());
                                }
                                else if (DynamicAttributeMainDependency.ValueDateTime != null)
                                {
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueDateTime;
                                    InputDynamicValue = DateTime.Parse(InputDynamicAttribute.Value.ToString());
                                }
                                else if (DynamicAttributeMainDependency.ValueDouble != null)
                                {
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueDouble;
                                    InputDynamicValue = double.Parse(InputDynamicAttribute.Value.ToString());
                                }
                                else if (!string.IsNullOrEmpty(DynamicAttributeMainDependency.ValueString))
                                {
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueString;
                                    InputDynamicValue = InputDynamicAttribute.Value.ToString();
                                }

                                string DependencyValidationOperation = DynamicAttributeMainDependency.Operation.Name;

                                if (!(DependencyValidationOperation == "==" ? InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower() :
                                    DependencyValidationOperation == "!=" ? InputDynamicValue.ToString().ToLower() != DependencyValidationValue.ToString().ToLower() :
                                    DependencyValidationOperation == ">" ? Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == 1 :
                                    DependencyValidationOperation == ">=" ? (Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == 1 ||
                                        InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower()) :
                                    DependencyValidationOperation == "<" ? Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == -1 :
                                    DependencyValidationOperation == "<=" ? (Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == -1 ||
                                        InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower()) : false))
                                {
                                    DynamicAttributeName = _unitOfWork.DynamicAttRepository
                                        .GetWhereFirst(x => x.Id == DynamicAttributeId).Key;

                                    string ReturnOperation = (DependencyValidationOperation == "==" ? "equal to" :
                                        (DependencyValidationOperation == "!=" ? "not equal to" :
                                        (DependencyValidationOperation == ">" ? "bigger than" :
                                        (DependencyValidationOperation == ">=" ? "bigger than or equal to" :
                                        (DependencyValidationOperation == "<" ? "smaller than" :
                                        (DependencyValidationOperation == "<=" ? "smaller than or equal to" : ""))))));

                                    return $"({DynamicAttributeName}) value must be {ReturnOperation} {DependencyValidationValue}";
                                }
                            }
                        }
                    }
                }
            }
            else if (MWName.ToLower() == TablesNames.TLImwBU.ToString().ToLower())
            {
                string MainTableName = TablesNames.TLImwBU.ToString();
                EditMW_BUViewModel EditInstallationViewModel = _mapper.Map<EditMW_BUViewModel>(Input);

                List<DynamicAttViewModel> DynamicAttributes = _mapper.Map<List<DynamicAttViewModel>>(_unitOfWork.DynamicAttRepository
                    .GetIncludeWhere(x => x.tablesNames.TableName.ToLower() == MainTableName.ToLower() && !x.disable
                        , x => x.tablesNames).ToList());

                foreach (DynamicAttViewModel DynamicAttribute in DynamicAttributes)
                {
                    TLIdependency DynamicAttributeMainDependency = _unitOfWork.DependencieRepository.GetIncludeWhereFirst(x => x.DynamicAttId == DynamicAttribute.Id &&
                        (x.ValueBoolean != null || x.ValueDateTime != null || x.ValueDouble != null || !string.IsNullOrEmpty(x.ValueString)) &&
                            x.OperationId != null, x => x.Operation);

                    if (DynamicAttributeMainDependency == null)
                        continue;

                    List<int> DependencyRows = _unitOfWork.DependencyRowRepository.GetWhere(x => x.DependencyId == DynamicAttributeMainDependency.Id)
                        .Select(x => x.RowId.Value).Distinct().ToList();

                    foreach (int RowId in DependencyRows)
                    {
                        List<TLIrule> Rules = _unitOfWork.RowRuleRepository.GetIncludeWhere(x => x.RowId == RowId && x.Rule.OperationId != null, x => x.Rule, x => x.Rule.tablesNames,
                            x => x.Rule.Operation, x => x.Rule.dynamicAtt, x => x.Rule.attributeActivated).Select(x => x.Rule).ToList();

                        int CheckIfSuccessAllRules = 0;

                        foreach (TLIrule Rule in Rules)
                        {
                            string SDTableName = Rule.tablesNames.TableName;

                            string DataType = "";

                            string Operation = Rule.Operation.Name;
                            object OperationValue = new object();

                            if (Rule.OperationValueBoolean != null)
                            {
                                DataType = "Bool";
                                OperationValue = Rule.OperationValueBoolean;
                            }
                            else if (Rule.OperationValueDateTime != null)
                            {
                                DataType = "DateTime";
                                OperationValue = Rule.OperationValueDateTime;
                            }
                            else if (Rule.OperationValueDouble != null)
                            {
                                DataType = "Double";
                                OperationValue = Rule.OperationValueDouble;
                            }
                            else if (!string.IsNullOrEmpty(Rule.OperationValueString))
                            {
                                DataType = "String";
                                OperationValue = Rule.OperationValueString;
                            }

                            if (MainTableName.ToLower() == SDTableName.ToLower())
                            {
                                object InsertedValue = new object();

                                if (Rule.attributeActivatedId != null)
                                {
                                    string AttributeName = Rule.attributeActivated.Key;

                                    object TestValue = EditInstallationViewModel.GetType().GetProperties()
                                        .FirstOrDefault(x => x.Name.ToLower() == AttributeName.ToLower()).GetValue(EditInstallationViewModel, null);

                                    if (TestValue == null)
                                        break;

                                    if (Rule.OperationValueBoolean != null)
                                        InsertedValue = bool.Parse(TestValue.ToString());

                                    else if (Rule.OperationValueDateTime != null)
                                        InsertedValue = DateTime.Parse(TestValue.ToString());

                                    else if (Rule.OperationValueDouble != null)
                                        InsertedValue = double.Parse(TestValue.ToString());

                                    else if (!string.IsNullOrEmpty(Rule.OperationValueString))
                                        InsertedValue = TestValue.ToString();
                                }
                                else if (Rule.dynamicAttId != null)
                                {
                                    BaseInstAttView DynamicObject = EditInstallationViewModel.DynamicInstAttsValue
                                        .FirstOrDefault(x => x.Id == Rule.dynamicAttId.Value);

                                    if (DynamicObject == null)
                                        break;

                                    string DynamicAttributeDataType = _unitOfWork.DataTypeRepository.GetByID(DynamicObject.DataTypeId.Value).Name;

                                    if (DynamicAttributeDataType.ToLower() == "boolean".ToLower())
                                        InsertedValue = bool.Parse(DynamicObject.Value.ToString());

                                    else if (DynamicAttributeDataType.ToLower() == "string".ToLower())
                                        InsertedValue = DynamicObject.Value.ToString();

                                    else if (DynamicAttributeDataType.ToLower() == "int".ToLower() || DynamicAttributeDataType.ToLower() == "double".ToLower())
                                        InsertedValue = double.Parse(DynamicObject.Value.ToString());

                                    else if (DynamicAttributeDataType.ToLower() == "datetime".ToLower())
                                        InsertedValue = DateTime.Parse(DynamicObject.Value.ToString());
                                }

                                if (Operation == "==" ? InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower() :
                                    Operation == "!=" ? InsertedValue.ToString().ToLower() != OperationValue.ToString().ToLower() :
                                    Operation == ">" ? Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == 1 :
                                    Operation == ">=" ? (Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == 1 ||
                                        InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower()) :
                                    Operation == "<" ? Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == -1 :
                                    Operation == "<=" ? (Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == -1 ||
                                        InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower()) : false)
                                {
                                    CheckIfSuccessAllRules++;
                                }
                            }
                            else
                            {
                                List<object> TableRecords = new List<object>();
                                if (Rule.attributeActivatedId != null)
                                {
                                    string AttributeName = Rule.attributeActivated.Key;

                                    if (OperationValue != null)
                                        TableRecords = _mapper.Map<List<object>>(_dbContext.GetType().GetProperty(SDTableName)
                                            .GetValue(_dbContext, null)).Where(x => x.GetType().GetProperty(AttributeName).GetValue(x, null) != null ? (Operation == ">" ?
                                               (DataType.ToLower() == "DateTime".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 : false) :
                                            Operation == ">=" ?
                                                (DataType.ToLower() == "DateTime".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 ||
                                                     x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 ||
                                                     x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) : false) :
                                            Operation == "<" ?
                                               (DataType.ToLower() == "DateTime".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 : false) :
                                            Operation == "<=" ?
                                                (DataType.ToLower() == "DateTime".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 ||
                                                     x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 ||
                                                     x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) : false) :
                                            Operation == "==" ?
                                                x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower() :
                                            Operation == "!=" ?
                                                x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() != OperationValue.ToString().ToLower() : false) : false).ToList();
                                }
                                else if (Rule.dynamicAttId != null)
                                {
                                    List<int> DynamicAttValuesInventoryIds = new List<int>();

                                    if (!DynamicAttribute.LibraryAtt)
                                    {
                                        DynamicAttValuesInventoryIds = _unitOfWork.DynamicAttInstValueRepository
                                            .GetWhere(x => (x.DynamicAttId == Rule.dynamicAttId.Value && !x.disable) &&
                                                (Operation == "==" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() == Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() == Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble == Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() == Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == "!=" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() != Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() != Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble != Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() != Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == ">" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime > Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble > Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == ">=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime >= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble >= Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime < Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble < Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime <= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble <= Rule.OperationValueDouble : false)) : false)

                                                ).Select(x => x.InventoryId).ToList();
                                    }
                                    else
                                    {
                                        DynamicAttValuesInventoryIds = _unitOfWork.DynamicAttLibRepository
                                            .GetWhere(x => (x.DynamicAttId == Rule.dynamicAttId && !x.disable) &&
                                                (Operation == "==" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() == Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() == Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble == Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() == Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == "!=" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() != Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() != Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble != Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() != Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == ">" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime > Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble > Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == ">=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime >= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble >= Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime < Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble < Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime <= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble <= Rule.OperationValueDouble : false)) : false)

                                                ).Select(x => x.InventoryId).ToList();
                                    }
                                    if (DynamicAttValuesInventoryIds != null ? DynamicAttValuesInventoryIds.Count() != 0 : false)
                                    {
                                        TableRecords = _mapper.Map<List<object>>(_dbContext.GetType()
                                            .GetProperty(SDTableName).GetValue(_dbContext, null))
                                                .Where(x => DynamicAttValuesInventoryIds.Contains(Convert.ToInt32(x.GetType().GetProperty("Id").GetValue(x, null)))).ToList();
                                    }
                                }

                                AddInstRuleViewModel AddInstRuleViewModel = new AddInstRuleViewModel();
                                if (Rule.dynamicAttId != null)
                                {
                                    AddInstRuleViewModel = new AddInstRuleViewModel
                                    {
                                        dynamicAttId = Rule.dynamicAttId,
                                        IsDynamic = true,
                                        OperationId = Rule.OperationId,
                                        OperationValueBoolean = Rule.OperationValueBoolean,
                                        OperationValueDateTime = Rule.OperationValueDateTime,
                                        OperationValueDouble = Rule.OperationValueDouble,
                                        OperationValueString = Rule.OperationValueString,
                                        TableName = Rule.tablesNames.TableName
                                    };
                                }
                                else if (Rule.attributeActivatedId != null)
                                {
                                    AddInstRuleViewModel = new AddInstRuleViewModel
                                    {
                                        attributeActivatedId = Rule.attributeActivatedId,
                                        IsDynamic = false,
                                        OperationId = Rule.OperationId,
                                        OperationValueBoolean = Rule.OperationValueBoolean,
                                        OperationValueDateTime = Rule.OperationValueDateTime,
                                        OperationValueDouble = Rule.OperationValueDouble,
                                        OperationValueString = Rule.OperationValueString,
                                        TableName = Rule.tablesNames.TableName
                                    };
                                }
                                List<object> RecordsIds = _mapper.Map<List<object>>(GetRecordsIds(MainTableName, AddInstRuleViewModel));

                                PathToCheckDependencyValidation Item = (PathToCheckDependencyValidation)Enum.Parse(typeof(PathToCheckDependencyValidation),
                                    MainTableName + SDTableName + "Goal");

                                List<string> Path = GetEnumDescription(Item).Split(" ").ToList();

                                object CheckId = new object();

                                if (Path.Count() > 1)
                                {
                                    object CivilLoads = EditInstallationViewModel.GetType().GetProperty(Path[0])
                                        .GetValue(EditInstallationViewModel, null);

                                    CheckId = CivilLoads.GetType().GetProperty(Path[1]).GetValue(CivilLoads, null) != null ?
                                        (int)CivilLoads.GetType().GetProperty(Path[1]).GetValue(CivilLoads, null) : new object();
                                }
                                else if (Path.Count() == 1 && Path[0].ToLower() == "sitecode")
                                {
                                    CheckId = SiteCode;
                                }
                                else if (Path.Count() == 1)
                                {
                                    if (EditInstallationViewModel.GetType().GetProperty(Path[0]).GetValue(EditInstallationViewModel, null) != null)
                                        CheckId = (int)EditInstallationViewModel.GetType().GetProperty(Path[0])
                                            .GetValue(EditInstallationViewModel, null);
                                }

                                if (RecordsIds.Exists(x => x.ToString().ToLower() == CheckId.ToString().ToLower()))
                                {
                                    CheckIfSuccessAllRules++;
                                }
                            }
                        }

                        if (Rules.Count() == CheckIfSuccessAllRules)
                        {
                            string DynamicAttributeName = "";
                            int DynamicAttributeId = _unitOfWork.DependencyRowRepository
                                .GetIncludeWhereFirst(x => x.RowId == RowId, x => x.Dependency).Dependency.DynamicAttId.Value;

                            BaseInstAttView InputDynamicAttribute = EditInstallationViewModel.DynamicInstAttsValue
                                .FirstOrDefault(x => x.Id == DynamicAttributeId);

                            if (InputDynamicAttribute == null)
                            {
                                DynamicAttributeName = _unitOfWork.DynamicAttRepository
                                    .GetWhereFirst(x => x.Id == DynamicAttributeId).Key;

                                return $"({DynamicAttributeName}) value can't be null";
                            }
                            else
                            {
                                object DependencyValidationValue = new object();
                                object InputDynamicValue = new object();

                                if (DynamicAttributeMainDependency.ValueBoolean != null)
                                {
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueBoolean;
                                    InputDynamicValue = bool.Parse(InputDynamicAttribute.Value.ToString());
                                }
                                else if (DynamicAttributeMainDependency.ValueDateTime != null)
                                {
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueDateTime;
                                    InputDynamicValue = DateTime.Parse(InputDynamicAttribute.Value.ToString());
                                }
                                else if (DynamicAttributeMainDependency.ValueDouble != null)
                                {
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueDouble;
                                    InputDynamicValue = double.Parse(InputDynamicAttribute.Value.ToString());
                                }
                                else if (!string.IsNullOrEmpty(DynamicAttributeMainDependency.ValueString))
                                {
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueString;
                                    InputDynamicValue = InputDynamicAttribute.Value.ToString();
                                }

                                string DependencyValidationOperation = DynamicAttributeMainDependency.Operation.Name;

                                if (!(DependencyValidationOperation == "==" ? InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower() :
                                    DependencyValidationOperation == "!=" ? InputDynamicValue.ToString().ToLower() != DependencyValidationValue.ToString().ToLower() :
                                    DependencyValidationOperation == ">" ? Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == 1 :
                                    DependencyValidationOperation == ">=" ? (Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == 1 ||
                                        InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower()) :
                                    DependencyValidationOperation == "<" ? Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == -1 :
                                    DependencyValidationOperation == "<=" ? (Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == -1 ||
                                        InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower()) : false))
                                {
                                    DynamicAttributeName = _unitOfWork.DynamicAttRepository
                                        .GetWhereFirst(x => x.Id == DynamicAttributeId).Key;

                                    string ReturnOperation = (DependencyValidationOperation == "==" ? "equal to" :
                                        (DependencyValidationOperation == "!=" ? "not equal to" :
                                        (DependencyValidationOperation == ">" ? "bigger than" :
                                        (DependencyValidationOperation == ">=" ? "bigger than or equal to" :
                                        (DependencyValidationOperation == "<" ? "smaller than" :
                                        (DependencyValidationOperation == "<=" ? "smaller than or equal to" : ""))))));

                                    return $"({DynamicAttributeName}) value must be {ReturnOperation} {DependencyValidationValue}";
                                }
                            }
                        }
                    }
                }
            }
            else if (MWName.ToLower() == TablesNames.TLImwRFU.ToString().ToLower())
            {
                string MainTableName = TablesNames.TLImwRFU.ToString();
                EditMW_RFUViewModel EditInstallationViewModel = _mapper.Map<EditMW_RFUViewModel>(Input);

                List<DynamicAttViewModel> DynamicAttributes = _mapper.Map<List<DynamicAttViewModel>>(_unitOfWork.DynamicAttRepository
                    .GetIncludeWhere(x => x.tablesNames.TableName.ToLower() == MainTableName.ToLower() && !x.disable
                        , x => x.tablesNames).ToList());

                foreach (DynamicAttViewModel DynamicAttribute in DynamicAttributes)
                {
                    TLIdependency DynamicAttributeMainDependency = _unitOfWork.DependencieRepository.GetIncludeWhereFirst(x => x.DynamicAttId == DynamicAttribute.Id &&
                        (x.ValueBoolean != null || x.ValueDateTime != null || x.ValueDouble != null || !string.IsNullOrEmpty(x.ValueString)) &&
                        x.OperationId != null, x => x.Operation);

                    if (DynamicAttributeMainDependency == null)
                        continue;

                    List<int> DependencyRows = _unitOfWork.DependencyRowRepository.GetWhere(x => x.DependencyId == DynamicAttributeMainDependency.Id)
                        .Select(x => x.RowId.Value).Distinct().ToList();

                    foreach (int RowId in DependencyRows)
                    {
                        List<TLIrule> Rules = _unitOfWork.RowRuleRepository.GetIncludeWhere(x => x.RowId == RowId && x.Rule.OperationId != null, x => x.Rule, x => x.Rule.tablesNames,
                            x => x.Rule.Operation, x => x.Rule.dynamicAtt, x => x.Rule.attributeActivated).Select(x => x.Rule).ToList();

                        int CheckIfSuccessAllRules = 0;

                        foreach (TLIrule Rule in Rules)
                        {
                            string SDTableName = Rule.tablesNames.TableName;

                            string DataType = "";

                            string Operation = Rule.Operation.Name;
                            object OperationValue = new object();

                            if (Rule.OperationValueBoolean != null)
                            {
                                DataType = "Bool";
                                OperationValue = Rule.OperationValueBoolean;
                            }
                            else if (Rule.OperationValueDateTime != null)
                            {
                                DataType = "DateTime";
                                OperationValue = Rule.OperationValueDateTime;
                            }
                            else if (Rule.OperationValueDouble != null)
                            {
                                DataType = "Double";
                                OperationValue = Rule.OperationValueDouble;
                            }
                            else if (!string.IsNullOrEmpty(Rule.OperationValueString))
                            {
                                DataType = "String";
                                OperationValue = Rule.OperationValueString;
                            }

                            if (MainTableName.ToLower() == SDTableName.ToLower())
                            {
                                object InsertedValue = new object();

                                if (Rule.attributeActivatedId != null)
                                {
                                    string AttributeName = Rule.attributeActivated.Key;

                                    object TestValue = EditInstallationViewModel.GetType().GetProperties()
                                        .FirstOrDefault(x => x.Name.ToLower() == AttributeName.ToLower()).GetValue(EditInstallationViewModel, null);

                                    if (TestValue == null)
                                        break;

                                    if (Rule.OperationValueBoolean != null)
                                        InsertedValue = bool.Parse(TestValue.ToString());

                                    else if (Rule.OperationValueDateTime != null)
                                        InsertedValue = DateTime.Parse(TestValue.ToString());

                                    else if (Rule.OperationValueDouble != null)
                                        InsertedValue = double.Parse(TestValue.ToString());

                                    else if (!string.IsNullOrEmpty(Rule.OperationValueString))
                                        InsertedValue = TestValue.ToString();
                                }
                                else if (Rule.dynamicAttId != null)
                                {
                                    BaseInstAttView DynamicObject = EditInstallationViewModel.DynamicInstAttsValue
                                        .FirstOrDefault(x => x.Id == Rule.dynamicAttId.Value);

                                    if (DynamicObject == null)
                                        break;

                                    string DynamicAttributeDataType = _unitOfWork.DataTypeRepository.GetByID(DynamicObject.DataTypeId.Value).Name;

                                    if (DynamicAttributeDataType.ToLower() == "boolean".ToLower())
                                        InsertedValue = bool.Parse(DynamicObject.Value.ToString());

                                    else if (DynamicAttributeDataType.ToLower() == "string".ToLower())
                                        InsertedValue = DynamicObject.Value.ToString();

                                    else if (DynamicAttributeDataType.ToLower() == "int".ToLower() || DynamicAttributeDataType.ToLower() == "double".ToLower())
                                        InsertedValue = double.Parse(DynamicObject.Value.ToString());

                                    else if (DynamicAttributeDataType.ToLower() == "datetime".ToLower())
                                        InsertedValue = DateTime.Parse(DynamicObject.Value.ToString());
                                }

                                if (Operation == "==" ? InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower() :
                                    Operation == "!=" ? InsertedValue.ToString().ToLower() != OperationValue.ToString().ToLower() :
                                    Operation == ">" ? Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == 1 :
                                    Operation == ">=" ? (Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == 1 ||
                                        InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower()) :
                                    Operation == "<" ? Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == -1 :
                                    Operation == "<=" ? (Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == -1 ||
                                        InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower()) : false)
                                {
                                    CheckIfSuccessAllRules++;
                                }
                            }
                            else
                            {
                                List<object> TableRecords = new List<object>();
                                if (Rule.attributeActivatedId != null)
                                {
                                    string AttributeName = Rule.attributeActivated.Key;

                                    if (OperationValue != null)
                                        TableRecords = _mapper.Map<List<object>>(_dbContext.GetType().GetProperty(SDTableName)
                                            .GetValue(_dbContext, null)).Where(x => x.GetType().GetProperty(AttributeName).GetValue(x, null) != null ? (Operation == ">" ?
                                               (DataType.ToLower() == "DateTime".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 : false) :
                                            Operation == ">=" ?
                                                (DataType.ToLower() == "DateTime".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 ||
                                                     x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 ||
                                                     x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) : false) :
                                            Operation == "<" ?
                                               (DataType.ToLower() == "DateTime".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 : false) :
                                            Operation == "<=" ?
                                                (DataType.ToLower() == "DateTime".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 ||
                                                     x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 ||
                                                     x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) : false) :
                                            Operation == "==" ?
                                                x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower() :
                                            Operation == "!=" ?
                                                x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() != OperationValue.ToString().ToLower() : false) : false).ToList();
                                }
                                else if (Rule.dynamicAttId != null)
                                {
                                    List<int> DynamicAttValuesInventoryIds = new List<int>();

                                    if (!DynamicAttribute.LibraryAtt)
                                    {
                                        DynamicAttValuesInventoryIds = _unitOfWork.DynamicAttInstValueRepository
                                            .GetWhere(x => (x.DynamicAttId == Rule.dynamicAttId.Value && !x.disable) &&
                                                (Operation == "==" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() == Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() == Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble == Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() == Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == "!=" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() != Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() != Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble != Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() != Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == ">" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime > Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble > Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == ">=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime >= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble >= Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime < Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble < Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime <= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble <= Rule.OperationValueDouble : false)) : false)

                                                ).Select(x => x.InventoryId).ToList();
                                    }
                                    else
                                    {
                                        DynamicAttValuesInventoryIds = _unitOfWork.DynamicAttLibRepository
                                            .GetWhere(x => (x.DynamicAttId == Rule.dynamicAttId && !x.disable) &&
                                                (Operation == "==" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() == Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() == Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble == Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() == Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == "!=" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() != Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() != Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble != Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() != Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == ">" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime > Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble > Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == ">=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime >= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble >= Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime < Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble < Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime <= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble <= Rule.OperationValueDouble : false)) : false)

                                                ).Select(x => x.InventoryId).ToList();
                                    }
                                    if (DynamicAttValuesInventoryIds != null ? DynamicAttValuesInventoryIds.Count() != 0 : false)
                                    {
                                        TableRecords = _mapper.Map<List<object>>(_dbContext.GetType()
                                            .GetProperty(SDTableName).GetValue(_dbContext, null))
                                                .Where(x => DynamicAttValuesInventoryIds.Contains(Convert.ToInt32(x.GetType().GetProperty("Id").GetValue(x, null)))).ToList();
                                    }
                                }

                                AddInstRuleViewModel AddInstRuleViewModel = new AddInstRuleViewModel();
                                if (Rule.dynamicAttId != null)
                                {
                                    AddInstRuleViewModel = new AddInstRuleViewModel
                                    {
                                        dynamicAttId = Rule.dynamicAttId,
                                        IsDynamic = true,
                                        OperationId = Rule.OperationId,
                                        OperationValueBoolean = Rule.OperationValueBoolean,
                                        OperationValueDateTime = Rule.OperationValueDateTime,
                                        OperationValueDouble = Rule.OperationValueDouble,
                                        OperationValueString = Rule.OperationValueString,
                                        TableName = Rule.tablesNames.TableName
                                    };
                                }
                                else if (Rule.attributeActivatedId != null)
                                {
                                    AddInstRuleViewModel = new AddInstRuleViewModel
                                    {
                                        attributeActivatedId = Rule.attributeActivatedId,
                                        IsDynamic = false,
                                        OperationId = Rule.OperationId,
                                        OperationValueBoolean = Rule.OperationValueBoolean,
                                        OperationValueDateTime = Rule.OperationValueDateTime,
                                        OperationValueDouble = Rule.OperationValueDouble,
                                        OperationValueString = Rule.OperationValueString,
                                        TableName = Rule.tablesNames.TableName
                                    };
                                }
                                List<object> RecordsIds = _mapper.Map<List<object>>(GetRecordsIds(MainTableName, AddInstRuleViewModel));

                                PathToCheckDependencyValidation Item = (PathToCheckDependencyValidation)Enum.Parse(typeof(PathToCheckDependencyValidation),
                                    MainTableName + SDTableName + "Goal");

                                List<string> Path = GetEnumDescription(Item).Split(" ").ToList();

                                object CheckId = new object();

                                if (Path.Count() > 1)
                                {
                                    object CivilLoads = EditInstallationViewModel.GetType().GetProperty(Path[0])
                                        .GetValue(EditInstallationViewModel, null);

                                    CheckId = CivilLoads.GetType().GetProperty(Path[1]).GetValue(CivilLoads, null) != null ?
                                        (int)CivilLoads.GetType().GetProperty(Path[1]).GetValue(CivilLoads, null) : new object();
                                }
                                else if (Path.Count() == 1 && Path[0].ToLower() == "sitecode")
                                {
                                    CheckId = SiteCode;
                                }
                                else if (Path.Count() == 1)
                                {
                                    if (EditInstallationViewModel.GetType().GetProperty(Path[0]).GetValue(EditInstallationViewModel, null) != null)
                                        CheckId = (int)EditInstallationViewModel.GetType().GetProperty(Path[0])
                                            .GetValue(EditInstallationViewModel, null);
                                }

                                if (RecordsIds.Exists(x => x.ToString().ToLower() == CheckId.ToString().ToLower()))
                                {
                                    CheckIfSuccessAllRules++;
                                }
                            }
                        }

                        if (Rules.Count() == CheckIfSuccessAllRules)
                        {
                            string DynamicAttributeName = "";
                            int DynamicAttributeId = _unitOfWork.DependencyRowRepository
                                .GetIncludeWhereFirst(x => x.RowId == RowId, x => x.Dependency).Dependency.DynamicAttId.Value;

                            BaseInstAttView InputDynamicAttribute = EditInstallationViewModel.DynamicInstAttsValue
                                .FirstOrDefault(x => x.Id == DynamicAttributeId);

                            if (InputDynamicAttribute == null)
                            {
                                DynamicAttributeName = _unitOfWork.DynamicAttRepository
                                    .GetWhereFirst(x => x.Id == DynamicAttributeId).Key;

                                return $"({DynamicAttributeName}) value can't be null";
                            }
                            else
                            {
                                object DependencyValidationValue = new object();
                                object InputDynamicValue = new object();

                                if (DynamicAttributeMainDependency.ValueBoolean != null)
                                {
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueBoolean;
                                    InputDynamicValue = bool.Parse(InputDynamicAttribute.Value.ToString());
                                }
                                else if (DynamicAttributeMainDependency.ValueDateTime != null)
                                {
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueDateTime;
                                    InputDynamicValue = DateTime.Parse(InputDynamicAttribute.Value.ToString());
                                }
                                else if (DynamicAttributeMainDependency.ValueDouble != null)
                                {
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueDouble;
                                    InputDynamicValue = double.Parse(InputDynamicAttribute.Value.ToString());
                                }
                                else if (!string.IsNullOrEmpty(DynamicAttributeMainDependency.ValueString))
                                {
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueString;
                                    InputDynamicValue = InputDynamicAttribute.Value.ToString();
                                }

                                string DependencyValidationOperation = DynamicAttributeMainDependency.Operation.Name;

                                if (!(DependencyValidationOperation == "==" ? InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower() :
                                    DependencyValidationOperation == "!=" ? InputDynamicValue.ToString().ToLower() != DependencyValidationValue.ToString().ToLower() :
                                    DependencyValidationOperation == ">" ? Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == 1 :
                                    DependencyValidationOperation == ">=" ? (Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == 1 ||
                                        InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower()) :
                                    DependencyValidationOperation == "<" ? Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == -1 :
                                    DependencyValidationOperation == "<=" ? (Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == -1 ||
                                        InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower()) : false))
                                {
                                    DynamicAttributeName = _unitOfWork.DynamicAttRepository
                                        .GetWhereFirst(x => x.Id == DynamicAttributeId).Key;

                                    string ReturnOperation = (DependencyValidationOperation == "==" ? "equal to" :
                                        (DependencyValidationOperation == "!=" ? "not equal to" :
                                        (DependencyValidationOperation == ">" ? "bigger than" :
                                        (DependencyValidationOperation == ">=" ? "bigger than or equal to" :
                                        (DependencyValidationOperation == "<" ? "smaller than" :
                                        (DependencyValidationOperation == "<=" ? "smaller than or equal to" : ""))))));

                                    return $"({DynamicAttributeName}) value must be {ReturnOperation} {DependencyValidationValue}";
                                }
                            }
                        }
                    }
                }
            }
            else if (MWName.ToLower() == TablesNames.TLImwODU.ToString().ToLower())
            {
                string MainTableName = TablesNames.TLImwODU.ToString();
                EditMW_ODUViewModel EditInstallationViewModel = _mapper.Map<EditMW_ODUViewModel>(Input);

                List<DynamicAttViewModel> DynamicAttributes = _mapper.Map<List<DynamicAttViewModel>>(_unitOfWork.DynamicAttRepository
                    .GetIncludeWhere(x => x.tablesNames.TableName.ToLower() == MainTableName.ToLower() && !x.disable
                        , x => x.tablesNames).ToList());

                foreach (DynamicAttViewModel DynamicAttribute in DynamicAttributes)
                {
                    TLIdependency DynamicAttributeMainDependency = _unitOfWork.DependencieRepository.GetIncludeWhereFirst(x => x.DynamicAttId == DynamicAttribute.Id &&
                        (x.ValueBoolean != null || x.ValueDateTime != null || x.ValueDouble != null || !string.IsNullOrEmpty(x.ValueString)) &&
                        x.OperationId != null, x => x.Operation);

                    if (DynamicAttributeMainDependency == null)
                        continue;

                    List<int> DependencyRows = _unitOfWork.DependencyRowRepository.GetWhere(x => x.DependencyId == DynamicAttributeMainDependency.Id)
                        .Select(x => x.RowId.Value).Distinct().ToList();

                    foreach (int RowId in DependencyRows)
                    {
                        List<TLIrule> Rules = _unitOfWork.RowRuleRepository.GetIncludeWhere(x => x.RowId == RowId && x.Rule.OperationId != null, x => x.Rule, x => x.Rule.tablesNames,
                            x => x.Rule.Operation, x => x.Rule.dynamicAtt, x => x.Rule.attributeActivated).Select(x => x.Rule).ToList();

                        int CheckIfSuccessAllRules = 0;

                        foreach (TLIrule Rule in Rules)
                        {
                            string SDTableName = Rule.tablesNames.TableName;

                            string DataType = "";

                            string Operation = Rule.Operation.Name;
                            object OperationValue = new object();

                            if (Rule.OperationValueBoolean != null)
                            {
                                DataType = "Bool";
                                OperationValue = Rule.OperationValueBoolean;
                            }
                            else if (Rule.OperationValueDateTime != null)
                            {
                                DataType = "DateTime";
                                OperationValue = Rule.OperationValueDateTime;
                            }
                            else if (Rule.OperationValueDouble != null)
                            {
                                DataType = "Double";
                                OperationValue = Rule.OperationValueDouble;
                            }
                            else if (!string.IsNullOrEmpty(Rule.OperationValueString))
                            {
                                DataType = "String";
                                OperationValue = Rule.OperationValueString;
                            }

                            if (MainTableName.ToLower() == SDTableName.ToLower())
                            {
                                object InsertedValue = new object();

                                if (Rule.attributeActivatedId != null)
                                {
                                    string AttributeName = Rule.attributeActivated.Key;

                                    object TestValue = EditInstallationViewModel.GetType().GetProperties()
                                        .FirstOrDefault(x => x.Name.ToLower() == AttributeName.ToLower()).GetValue(EditInstallationViewModel, null);

                                    if (TestValue == null)
                                        break;

                                    if (Rule.OperationValueBoolean != null)
                                        InsertedValue = bool.Parse(TestValue.ToString());

                                    else if (Rule.OperationValueDateTime != null)
                                        InsertedValue = DateTime.Parse(TestValue.ToString());

                                    else if (Rule.OperationValueDouble != null)
                                        InsertedValue = double.Parse(TestValue.ToString());

                                    else if (!string.IsNullOrEmpty(Rule.OperationValueString))
                                        InsertedValue = TestValue.ToString();
                                }
                                else if (Rule.dynamicAttId != null)
                                {
                                    BaseInstAttView DynamicObject = EditInstallationViewModel.DynamicInstAttsValue
                                        .FirstOrDefault(x => x.Id == Rule.dynamicAttId.Value);

                                    if (DynamicObject == null)
                                        break;

                                    string DynamicAttributeDataType = _unitOfWork.DataTypeRepository.GetByID(DynamicObject.DataTypeId.Value).Name;

                                    if (DynamicAttributeDataType.ToLower() == "boolean".ToLower())
                                        InsertedValue = bool.Parse(DynamicObject.Value.ToString());

                                    else if (DynamicAttributeDataType.ToLower() == "string".ToLower())
                                        InsertedValue = DynamicObject.Value.ToString();

                                    else if (DynamicAttributeDataType.ToLower() == "int".ToLower() || DynamicAttributeDataType.ToLower() == "double".ToLower())
                                        InsertedValue = double.Parse(DynamicObject.Value.ToString());

                                    else if (DynamicAttributeDataType.ToLower() == "datetime".ToLower())
                                        InsertedValue = DateTime.Parse(DynamicObject.Value.ToString());
                                }

                                if (Operation == "==" ? InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower() :
                                    Operation == "!=" ? InsertedValue.ToString().ToLower() != OperationValue.ToString().ToLower() :
                                    Operation == ">" ? Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == 1 :
                                    Operation == ">=" ? (Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == 1 ||
                                        InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower()) :
                                    Operation == "<" ? Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == -1 :
                                    Operation == "<=" ? (Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == -1 ||
                                        InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower()) : false)
                                {
                                    CheckIfSuccessAllRules++;
                                }
                            }
                            else
                            {
                                List<object> TableRecords = new List<object>();
                                if (Rule.attributeActivatedId != null)
                                {
                                    string AttributeName = Rule.attributeActivated.Key;

                                    if (OperationValue != null)
                                        TableRecords = _mapper.Map<List<object>>(_dbContext.GetType().GetProperty(SDTableName)
                                            .GetValue(_dbContext, null)).Where(x => x.GetType().GetProperty(AttributeName).GetValue(x, null) != null ? (Operation == ">" ?
                                               (DataType.ToLower() == "DateTime".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 : false) :
                                            Operation == ">=" ?
                                                (DataType.ToLower() == "DateTime".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 ||
                                                     x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 ||
                                                     x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) : false) :
                                            Operation == "<" ?
                                               (DataType.ToLower() == "DateTime".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 : false) :
                                            Operation == "<=" ?
                                                (DataType.ToLower() == "DateTime".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 ||
                                                     x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 ||
                                                     x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) : false) :
                                            Operation == "==" ?
                                                x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower() :
                                            Operation == "!=" ?
                                                x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() != OperationValue.ToString().ToLower() : false) : false).ToList();
                                }
                                else if (Rule.dynamicAttId != null)
                                {
                                    List<int> DynamicAttValuesInventoryIds = new List<int>();

                                    if (!DynamicAttribute.LibraryAtt)
                                    {
                                        DynamicAttValuesInventoryIds = _unitOfWork.DynamicAttInstValueRepository
                                            .GetWhere(x => (x.DynamicAttId == Rule.dynamicAttId.Value && !x.disable) &&
                                                (Operation == "==" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() == Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() == Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble == Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() == Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == "!=" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() != Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() != Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble != Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() != Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == ">" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime > Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble > Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == ">=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime >= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble >= Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime < Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble < Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime <= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble <= Rule.OperationValueDouble : false)) : false)

                                                ).Select(x => x.InventoryId).ToList();
                                    }
                                    else
                                    {
                                        DynamicAttValuesInventoryIds = _unitOfWork.DynamicAttLibRepository
                                            .GetWhere(x => (x.DynamicAttId == Rule.dynamicAttId && !x.disable) &&
                                                (Operation == "==" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() == Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() == Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble == Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() == Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == "!=" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() != Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() != Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble != Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() != Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == ">" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime > Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble > Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == ">=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime >= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble >= Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime < Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble < Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime <= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble <= Rule.OperationValueDouble : false)) : false)

                                                ).Select(x => x.InventoryId).ToList();
                                    }
                                    if (DynamicAttValuesInventoryIds != null ? DynamicAttValuesInventoryIds.Count() != 0 : false)
                                    {
                                        TableRecords = _mapper.Map<List<object>>(_dbContext.GetType()
                                            .GetProperty(SDTableName).GetValue(_dbContext, null))
                                                .Where(x => DynamicAttValuesInventoryIds.Contains(Convert.ToInt32(x.GetType().GetProperty("Id").GetValue(x, null)))).ToList();
                                    }
                                }

                                AddInstRuleViewModel AddInstRuleViewModel = new AddInstRuleViewModel();
                                if (Rule.dynamicAttId != null)
                                {
                                    AddInstRuleViewModel = new AddInstRuleViewModel
                                    {
                                        dynamicAttId = Rule.dynamicAttId,
                                        IsDynamic = true,
                                        OperationId = Rule.OperationId,
                                        OperationValueBoolean = Rule.OperationValueBoolean,
                                        OperationValueDateTime = Rule.OperationValueDateTime,
                                        OperationValueDouble = Rule.OperationValueDouble,
                                        OperationValueString = Rule.OperationValueString,
                                        TableName = Rule.tablesNames.TableName
                                    };
                                }
                                else if (Rule.attributeActivatedId != null)
                                {
                                    AddInstRuleViewModel = new AddInstRuleViewModel
                                    {
                                        attributeActivatedId = Rule.attributeActivatedId,
                                        IsDynamic = false,
                                        OperationId = Rule.OperationId,
                                        OperationValueBoolean = Rule.OperationValueBoolean,
                                        OperationValueDateTime = Rule.OperationValueDateTime,
                                        OperationValueDouble = Rule.OperationValueDouble,
                                        OperationValueString = Rule.OperationValueString,
                                        TableName = Rule.tablesNames.TableName
                                    };
                                }
                                List<object> RecordsIds = _mapper.Map<List<object>>(GetRecordsIds(MainTableName, AddInstRuleViewModel));

                                PathToCheckDependencyValidation Item = (PathToCheckDependencyValidation)Enum.Parse(typeof(PathToCheckDependencyValidation),
                                    MainTableName + SDTableName + "Goal");

                                List<string> Path = GetEnumDescription(Item).Split(" ").ToList();

                                object CheckId = new object();

                                if (Path.Count() > 1)
                                {
                                    object CivilLoads = EditInstallationViewModel.GetType().GetProperty(Path[0])
                                        .GetValue(EditInstallationViewModel, null);

                                    CheckId = CivilLoads.GetType().GetProperty(Path[1]).GetValue(CivilLoads, null) != null ?
                                        (int)CivilLoads.GetType().GetProperty(Path[1]).GetValue(CivilLoads, null) : new object();
                                }
                                else if (Path.Count() == 1 && Path[0].ToLower() == "sitecode")
                                {
                                    CheckId = SiteCode;
                                }
                                else if (Path.Count() == 1)
                                {
                                    if (EditInstallationViewModel.GetType().GetProperty(Path[0]).GetValue(EditInstallationViewModel, null) != null)
                                        CheckId = (int)EditInstallationViewModel.GetType().GetProperty(Path[0])
                                            .GetValue(EditInstallationViewModel, null);
                                }

                                if (RecordsIds.Exists(x => x.ToString().ToLower() == CheckId.ToString().ToLower()))
                                {
                                    CheckIfSuccessAllRules++;
                                }
                            }
                        }

                        if (Rules.Count() == CheckIfSuccessAllRules)
                        {
                            string DynamicAttributeName = "";
                            int DynamicAttributeId = _unitOfWork.DependencyRowRepository
                                .GetIncludeWhereFirst(x => x.RowId == RowId, x => x.Dependency).Dependency.DynamicAttId.Value;

                            BaseInstAttView InputDynamicAttribute = EditInstallationViewModel.DynamicInstAttsValue
                                .FirstOrDefault(x => x.Id == DynamicAttributeId);

                            if (InputDynamicAttribute == null)
                            {
                                DynamicAttributeName = _unitOfWork.DynamicAttRepository
                                    .GetWhereFirst(x => x.Id == DynamicAttributeId).Key;

                                return $"({DynamicAttributeName}) value can't be null";
                            }
                            else
                            {
                                object DependencyValidationValue = new object();
                                object InputDynamicValue = new object();

                                if (DynamicAttributeMainDependency.ValueBoolean != null)
                                {
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueBoolean;
                                    InputDynamicValue = bool.Parse(InputDynamicAttribute.Value.ToString());
                                }
                                else if (DynamicAttributeMainDependency.ValueDateTime != null)
                                {
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueDateTime;
                                    InputDynamicValue = DateTime.Parse(InputDynamicAttribute.Value.ToString());
                                }
                                else if (DynamicAttributeMainDependency.ValueDouble != null)
                                {
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueDouble;
                                    InputDynamicValue = double.Parse(InputDynamicAttribute.Value.ToString());
                                }
                                else if (!string.IsNullOrEmpty(DynamicAttributeMainDependency.ValueString))
                                {
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueString;
                                    InputDynamicValue = InputDynamicAttribute.Value.ToString();
                                }

                                string DependencyValidationOperation = DynamicAttributeMainDependency.Operation.Name;

                                if (!(DependencyValidationOperation == "==" ? InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower() :
                                    DependencyValidationOperation == "!=" ? InputDynamicValue.ToString().ToLower() != DependencyValidationValue.ToString().ToLower() :
                                    DependencyValidationOperation == ">" ? Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == 1 :
                                    DependencyValidationOperation == ">=" ? (Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == 1 ||
                                        InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower()) :
                                    DependencyValidationOperation == "<" ? Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == -1 :
                                    DependencyValidationOperation == "<=" ? (Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == -1 ||
                                        InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower()) : false))
                                {
                                    DynamicAttributeName = _unitOfWork.DynamicAttRepository
                                        .GetWhereFirst(x => x.Id == DynamicAttributeId).Key;

                                    string ReturnOperation = (DependencyValidationOperation == "==" ? "equal to" :
                                        (DependencyValidationOperation == "!=" ? "not equal to" :
                                        (DependencyValidationOperation == ">" ? "bigger than" :
                                        (DependencyValidationOperation == ">=" ? "bigger than or equal to" :
                                        (DependencyValidationOperation == "<" ? "smaller than" :
                                        (DependencyValidationOperation == "<=" ? "smaller than or equal to" : ""))))));

                                    return $"({DynamicAttributeName}) value must be {ReturnOperation} {DependencyValidationValue}";
                                }
                            }
                        }
                    }
                }
            }
            else if (MWName.ToLower() == TablesNames.TLImwOther.ToString().ToLower())
            {
                string MainTableName = TablesNames.TLImwOther.ToString();
                EditMw_OtherViewModel EditInstallationViewModel = _mapper.Map<EditMw_OtherViewModel>(Input);

                List<DynamicAttViewModel> DynamicAttributes = _mapper.Map<List<DynamicAttViewModel>>(_unitOfWork.DynamicAttRepository
                    .GetIncludeWhere(x => x.tablesNames.TableName.ToLower() == MainTableName.ToLower() && !x.disable
                        , x => x.tablesNames).ToList());

                foreach (DynamicAttViewModel DynamicAttribute in DynamicAttributes)
                {
                    TLIdependency DynamicAttributeMainDependency = _unitOfWork.DependencieRepository.GetIncludeWhereFirst(x => x.DynamicAttId == DynamicAttribute.Id &&
                        (x.ValueBoolean != null || x.ValueDateTime != null || x.ValueDouble != null || !string.IsNullOrEmpty(x.ValueString)) &&
                            x.OperationId != null, x => x.Operation);

                    if (DynamicAttributeMainDependency == null)
                        continue;

                    List<int> DependencyRows = _unitOfWork.DependencyRowRepository.GetWhere(x => x.DependencyId == DynamicAttributeMainDependency.Id)
                        .Select(x => x.RowId.Value).Distinct().ToList();

                    foreach (int RowId in DependencyRows)
                    {
                        List<TLIrule> Rules = _unitOfWork.RowRuleRepository.GetIncludeWhere(x => x.RowId == RowId && x.Rule.OperationId != null, x => x.Rule, x => x.Rule.tablesNames,
                            x => x.Rule.Operation, x => x.Rule.dynamicAtt, x => x.Rule.attributeActivated).Select(x => x.Rule).ToList();

                        int CheckIfSuccessAllRules = 0;

                        foreach (TLIrule Rule in Rules)
                        {
                            string SDTableName = Rule.tablesNames.TableName;

                            string DataType = "";

                            string Operation = Rule.Operation.Name;
                            object OperationValue = new object();

                            if (Rule.OperationValueBoolean != null)
                            {
                                DataType = "Bool";
                                OperationValue = Rule.OperationValueBoolean;
                            }
                            else if (Rule.OperationValueDateTime != null)
                            {
                                DataType = "DateTime";
                                OperationValue = Rule.OperationValueDateTime;
                            }
                            else if (Rule.OperationValueDouble != null)
                            {
                                DataType = "Double";
                                OperationValue = Rule.OperationValueDouble;
                            }
                            else if (!string.IsNullOrEmpty(Rule.OperationValueString))
                            {
                                DataType = "String";
                                OperationValue = Rule.OperationValueString;
                            }

                            if (MainTableName.ToLower() == SDTableName.ToLower())
                            {
                                object InsertedValue = new object();

                                if (Rule.attributeActivatedId != null)
                                {
                                    string AttributeName = Rule.attributeActivated.Key;

                                    object TestValue = EditInstallationViewModel.GetType().GetProperties()
                                        .FirstOrDefault(x => x.Name.ToLower() == AttributeName.ToLower()).GetValue(EditInstallationViewModel, null);

                                    if (TestValue == null)
                                        break;

                                    if (Rule.OperationValueBoolean != null)
                                        InsertedValue = bool.Parse(TestValue.ToString());

                                    else if (Rule.OperationValueDateTime != null)
                                        InsertedValue = DateTime.Parse(TestValue.ToString());

                                    else if (Rule.OperationValueDouble != null)
                                        InsertedValue = double.Parse(TestValue.ToString());

                                    else if (!string.IsNullOrEmpty(Rule.OperationValueString))
                                        InsertedValue = TestValue.ToString();
                                }
                                else if (Rule.dynamicAttId != null)
                                {
                                    BaseInstAttView DynamicObject = EditInstallationViewModel.DynamicInstAttsValue
                                        .FirstOrDefault(x => x.Id == Rule.dynamicAttId.Value);

                                    if (DynamicObject == null)
                                        break;

                                    string DynamicAttributeDataType = _unitOfWork.DataTypeRepository.GetByID(DynamicObject.DataTypeId.Value).Name;

                                    if (DynamicAttributeDataType.ToLower() == "boolean".ToLower())
                                        InsertedValue = bool.Parse(DynamicObject.Value.ToString());

                                    else if (DynamicAttributeDataType.ToLower() == "string".ToLower())
                                        InsertedValue = DynamicObject.Value.ToString();

                                    else if (DynamicAttributeDataType.ToLower() == "int".ToLower() || DynamicAttributeDataType.ToLower() == "double".ToLower())
                                        InsertedValue = double.Parse(DynamicObject.Value.ToString());

                                    else if (DynamicAttributeDataType.ToLower() == "datetime".ToLower())
                                        InsertedValue = DateTime.Parse(DynamicObject.Value.ToString());
                                }

                                if (Operation == "==" ? InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower() :
                                    Operation == "!=" ? InsertedValue.ToString().ToLower() != OperationValue.ToString().ToLower() :
                                    Operation == ">" ? Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == 1 :
                                    Operation == ">=" ? (Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == 1 ||
                                        InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower()) :
                                    Operation == "<" ? Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == -1 :
                                    Operation == "<=" ? (Comparer.DefaultInvariant.Compare(InsertedValue, OperationValue) == -1 ||
                                        InsertedValue.ToString().ToLower() == OperationValue.ToString().ToLower()) : false)
                                {
                                    CheckIfSuccessAllRules++;
                                }
                            }
                            else
                            {
                                List<object> TableRecords = new List<object>();
                                if (Rule.attributeActivatedId != null)
                                {
                                    string AttributeName = Rule.attributeActivated.Key;

                                    if (OperationValue != null)
                                        TableRecords = _mapper.Map<List<object>>(_dbContext.GetType().GetProperty(SDTableName)
                                            .GetValue(_dbContext, null)).Where(x => x.GetType().GetProperty(AttributeName).GetValue(x, null) != null ? (Operation == ">" ?
                                               (DataType.ToLower() == "DateTime".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 : false) :
                                            Operation == ">=" ?
                                                (DataType.ToLower() == "DateTime".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 ||
                                                     x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == 1 ||
                                                     x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) : false) :
                                            Operation == "<" ?
                                               (DataType.ToLower() == "DateTime".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 : false) :
                                            Operation == "<=" ?
                                                (DataType.ToLower() == "DateTime".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(DateTime.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 ||
                                                     x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) :
                                                DataType.ToLower() == "Double".ToLower() ?
                                                    (Comparer.DefaultInvariant.Compare(double.Parse(x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString()), OperationValue) == -1 ||
                                                     x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower()) : false) :
                                            Operation == "==" ?
                                                x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() == OperationValue.ToString().ToLower() :
                                            Operation == "!=" ?
                                                x.GetType().GetProperty(AttributeName).GetValue(x, null).ToString().ToLower() != OperationValue.ToString().ToLower() : false) : false).ToList();
                                }
                                else if (Rule.dynamicAttId != null)
                                {
                                    List<int> DynamicAttValuesInventoryIds = new List<int>();

                                    if (!DynamicAttribute.LibraryAtt)
                                    {
                                        DynamicAttValuesInventoryIds = _unitOfWork.DynamicAttInstValueRepository
                                            .GetWhere(x => (x.DynamicAttId == Rule.dynamicAttId.Value && !x.disable) &&
                                                (Operation == "==" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() == Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() == Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble == Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() == Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == "!=" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() != Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() != Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble != Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() != Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == ">" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime > Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble > Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == ">=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime >= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble >= Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime < Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble < Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime <= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble <= Rule.OperationValueDouble : false)) : false)

                                                ).Select(x => x.InventoryId).ToList();
                                    }
                                    else
                                    {
                                        DynamicAttValuesInventoryIds = _unitOfWork.DynamicAttLibRepository
                                            .GetWhere(x => (x.DynamicAttId == Rule.dynamicAttId && !x.disable) &&
                                                (Operation == "==" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() == Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() == Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble == Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() == Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == "!=" ?
                                                    ((Rule.OperationValueBoolean != null ? x.ValueBoolean.ToString().ToLower() != Rule.OperationValueBoolean.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDateTime != null ? x.ValueDateTime.ToString().ToLower() != Rule.OperationValueDateTime.ToString().ToLower() : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble != Rule.OperationValueDouble : false) ||
                                                    (!string.IsNullOrEmpty(Rule.OperationValueString) ? x.ValueString.ToLower() != Rule.OperationValueString.ToLower() : false)) : false) ||

                                                (Operation == ">" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime > Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble > Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == ">=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime >= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble >= Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime < Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble < Rule.OperationValueDouble : false)) : false) ||

                                                (Operation == "<=" ?
                                                    ((Rule.OperationValueDateTime != null ? x.ValueDateTime <= Rule.OperationValueDateTime : false) ||
                                                    (Rule.OperationValueDouble != null ? x.ValueDouble <= Rule.OperationValueDouble : false)) : false)

                                                ).Select(x => x.InventoryId).ToList();
                                    }
                                    if (DynamicAttValuesInventoryIds != null ? DynamicAttValuesInventoryIds.Count() != 0 : false)
                                    {
                                        TableRecords = _mapper.Map<List<object>>(_dbContext.GetType()
                                            .GetProperty(SDTableName).GetValue(_dbContext, null))
                                                .Where(x => DynamicAttValuesInventoryIds.Contains(Convert.ToInt32(x.GetType().GetProperty("Id").GetValue(x, null)))).ToList();
                                    }
                                }

                                AddInstRuleViewModel AddInstRuleViewModel = new AddInstRuleViewModel();
                                if (Rule.dynamicAttId != null)
                                {
                                    AddInstRuleViewModel = new AddInstRuleViewModel
                                    {
                                        dynamicAttId = Rule.dynamicAttId,
                                        IsDynamic = true,
                                        OperationId = Rule.OperationId,
                                        OperationValueBoolean = Rule.OperationValueBoolean,
                                        OperationValueDateTime = Rule.OperationValueDateTime,
                                        OperationValueDouble = Rule.OperationValueDouble,
                                        OperationValueString = Rule.OperationValueString,
                                        TableName = Rule.tablesNames.TableName
                                    };
                                }
                                else if (Rule.attributeActivatedId != null)
                                {
                                    AddInstRuleViewModel = new AddInstRuleViewModel
                                    {
                                        attributeActivatedId = Rule.attributeActivatedId,
                                        IsDynamic = false,
                                        OperationId = Rule.OperationId,
                                        OperationValueBoolean = Rule.OperationValueBoolean,
                                        OperationValueDateTime = Rule.OperationValueDateTime,
                                        OperationValueDouble = Rule.OperationValueDouble,
                                        OperationValueString = Rule.OperationValueString,
                                        TableName = Rule.tablesNames.TableName
                                    };
                                }
                                List<object> RecordsIds = _mapper.Map<List<object>>(GetRecordsIds(MainTableName, AddInstRuleViewModel));

                                PathToCheckDependencyValidation Item = (PathToCheckDependencyValidation)Enum.Parse(typeof(PathToCheckDependencyValidation),
                                    MainTableName + SDTableName + "Goal");

                                List<string> Path = GetEnumDescription(Item).Split(" ").ToList();

                                object CheckId = new object();

                                if (Path.Count() > 1)
                                {
                                    object CivilLoads = EditInstallationViewModel.GetType().GetProperty(Path[0])
                                        .GetValue(EditInstallationViewModel, null);

                                    CheckId = CivilLoads.GetType().GetProperty(Path[1]).GetValue(CivilLoads, null) != null ?
                                        (int)CivilLoads.GetType().GetProperty(Path[1]).GetValue(CivilLoads, null) : new object();
                                }
                                else if (Path.Count() == 1 && Path[0].ToLower() == "sitecode")
                                {
                                    CheckId = SiteCode;
                                }
                                else if (Path.Count() == 1)
                                {
                                    if (EditInstallationViewModel.GetType().GetProperty(Path[0]).GetValue(EditInstallationViewModel, null) != null)
                                        CheckId = (int)EditInstallationViewModel.GetType().GetProperty(Path[0])
                                            .GetValue(EditInstallationViewModel, null);
                                }

                                if (RecordsIds.Exists(x => x.ToString().ToLower() == CheckId.ToString().ToLower()))
                                {
                                    CheckIfSuccessAllRules++;
                                }
                            }
                        }

                        if (Rules.Count() == CheckIfSuccessAllRules)
                        {
                            string DynamicAttributeName = "";
                            int DynamicAttributeId = _unitOfWork.DependencyRowRepository
                                .GetIncludeWhereFirst(x => x.RowId == RowId, x => x.Dependency).Dependency.DynamicAttId.Value;

                            BaseInstAttView InputDynamicAttribute = EditInstallationViewModel.DynamicInstAttsValue
                                .FirstOrDefault(x => x.Id == DynamicAttributeId);

                            if (InputDynamicAttribute == null)
                            {
                                DynamicAttributeName = _unitOfWork.DynamicAttRepository
                                    .GetWhereFirst(x => x.Id == DynamicAttributeId).Key;

                                return $"({DynamicAttributeName}) value can't be null";
                            }
                            else
                            {
                                object DependencyValidationValue = new object();
                                object InputDynamicValue = new object();

                                if (DynamicAttributeMainDependency.ValueBoolean != null)
                                {
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueBoolean;
                                    InputDynamicValue = bool.Parse(InputDynamicAttribute.Value.ToString());
                                }
                                else if (DynamicAttributeMainDependency.ValueDateTime != null)
                                {
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueDateTime;
                                    InputDynamicValue = DateTime.Parse(InputDynamicAttribute.Value.ToString());
                                }
                                else if (DynamicAttributeMainDependency.ValueDouble != null)
                                {
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueDouble;
                                    InputDynamicValue = double.Parse(InputDynamicAttribute.Value.ToString());
                                }
                                else if (!string.IsNullOrEmpty(DynamicAttributeMainDependency.ValueString))
                                {
                                    DependencyValidationValue = DynamicAttributeMainDependency.ValueString;
                                    InputDynamicValue = InputDynamicAttribute.Value.ToString();
                                }

                                string DependencyValidationOperation = DynamicAttributeMainDependency.Operation.Name;

                                if (!(DependencyValidationOperation == "==" ? InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower() :
                                    DependencyValidationOperation == "!=" ? InputDynamicValue.ToString().ToLower() != DependencyValidationValue.ToString().ToLower() :
                                    DependencyValidationOperation == ">" ? Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == 1 :
                                    DependencyValidationOperation == ">=" ? (Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == 1 ||
                                        InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower()) :
                                    DependencyValidationOperation == "<" ? Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == -1 :
                                    DependencyValidationOperation == "<=" ? (Comparer.DefaultInvariant.Compare(InputDynamicValue, DependencyValidationValue) == -1 ||
                                        InputDynamicValue.ToString().ToLower() == DependencyValidationValue.ToString().ToLower()) : false))
                                {
                                    DynamicAttributeName = _unitOfWork.DynamicAttRepository
                                        .GetWhereFirst(x => x.Id == DynamicAttributeId).Key;

                                    string ReturnOperation = (DependencyValidationOperation == "==" ? "equal to" :
                                        (DependencyValidationOperation == "!=" ? "not equal to" :
                                        (DependencyValidationOperation == ">" ? "bigger than" :
                                        (DependencyValidationOperation == ">=" ? "bigger than or equal to" :
                                        (DependencyValidationOperation == "<" ? "smaller than" :
                                        (DependencyValidationOperation == "<=" ? "smaller than or equal to" : ""))))));

                                    return $"({DynamicAttributeName}) value must be {ReturnOperation} {DependencyValidationValue}";
                                }
                            }
                        }
                    }
                }
            }
            return string.Empty;
        }
        public string CheckGeneralValidationFunctionEditVersion(List<BaseInstAttView> TLIdynamicAttInstValue, string TableName)
        {
            List<DynamicAttViewModel> DynamicAttributes = _mapper.Map<List<DynamicAttViewModel>>(_unitOfWork.DynamicAttRepository
                .GetIncludeWhere(x => x.tablesNames.TableName.ToLower() == TableName.ToLower() && !x.disable, x => x.tablesNames).ToList());

            foreach (DynamicAttViewModel DynamicAttributeEntity in DynamicAttributes)
            {
                TLIvalidation Validation = _unitOfWork.ValidationRepository
                    .GetIncludeWhereFirst(x => x.DynamicAttId == DynamicAttributeEntity.Id, x => x.Operation, x => x.DynamicAtt);

                if (Validation != null)
                {
                    BaseInstAttView DynmaicAttributeValue = TLIdynamicAttInstValue.FirstOrDefault(x => x.Id == DynamicAttributeEntity.Id);

                    if (DynmaicAttributeValue == null)
                        return $"({Validation.DynamicAtt.Key}) value can't be null and must be inserted";

                    string OperationName = Validation.Operation.Name;

                    object InputDynamicValue = new object();
                    object ValidationValue = new object();

                    if (Validation.ValueBoolean != null)
                    {
                        ValidationValue = Validation.ValueBoolean;
                        InputDynamicValue = bool.Parse(DynmaicAttributeValue.Value.ToString());
                    }
                    else if (Validation.ValueDateTime != null)
                    {
                        ValidationValue = Validation.ValueDateTime;
                        InputDynamicValue = DateTime.Parse(DynmaicAttributeValue.Value.ToString());
                    }
                    else if (Validation.ValueDouble != null)
                    {
                        ValidationValue = Validation.ValueDouble;
                        InputDynamicValue = double.Parse(DynmaicAttributeValue.Value.ToString());
                    }
                    else if (!string.IsNullOrEmpty(Validation.ValueString))
                    {
                        ValidationValue = Validation.ValueString;
                        if (DynmaicAttributeValue.Value == null)
                            ValidationValue = "";
                        else
                            InputDynamicValue = DynmaicAttributeValue.Value.ToString();
                    }

                    if (!(OperationName == "==" ? InputDynamicValue.ToString().ToLower() == ValidationValue.ToString().ToLower() :
                        OperationName == "!=" ? InputDynamicValue.ToString().ToLower() != ValidationValue.ToString().ToLower() :
                        OperationName == ">" ? Comparer.DefaultInvariant.Compare(InputDynamicValue, ValidationValue) == 1 :
                        OperationName == ">=" ? (Comparer.DefaultInvariant.Compare(InputDynamicValue, ValidationValue) == 1 ||
                            InputDynamicValue.ToString().ToLower() == ValidationValue.ToString().ToLower()) :
                        OperationName == "<" ? Comparer.DefaultInvariant.Compare(InputDynamicValue, ValidationValue) == -1 :
                        OperationName == "<=" ? (Comparer.DefaultInvariant.Compare(InputDynamicValue, ValidationValue) == -1 ||
                            InputDynamicValue.ToString().ToLower() == ValidationValue.ToString().ToLower()) : false))
                    {
                        string DynamicAttributeName = _unitOfWork.DynamicAttRepository
                            .GetWhereFirst(x => x.Id == Validation.DynamicAttId).Key;

                        string ReturnOperation = (OperationName == "==" ? "equal to" :
                            (OperationName == "!=" ? "not equal to" :
                            (OperationName == ">" ? "bigger than" :
                            (OperationName == ">=" ? "bigger than or equal to" :
                            (OperationName == "<" ? "smaller than" :
                            (OperationName == "<=" ? "smaller than or equal to" : ""))))));

                        return $"({DynamicAttributeName}) value must be {ReturnOperation} {ValidationValue}";
                    }
                }
            }
            return string.Empty;
        }
        #endregion
        //Function take 2 parameters DynamicInstAttsValue, LoadInstId
        //Function get dynamic attribute by Id then update dynamic attribute
        //private void UpdateDynamicAttInstValue(List<BaseInstAttView> DynamicInstAttsValue, int LoadInstId)
        //{
        //    Parallel.ForEach(DynamicInstAttsValue, DynamicInstAttValue =>
        //   {
        //       var DAIV = _unitOfWork.DynamicAttInstValueRepository.GetWhereFirst( d => d.InventoryId == LoadInstId && d.DynamicAttId == DynamicInstAttValue.Id);
        //       if (DAIV.ValueBoolean != null)
        //       {
        //           DAIV.ValueBoolean = (bool)DynamicInstAttValue.Value;
        //           DAIV.Value = DynamicInstAttValue.Value.ToString();
        //       }
        //       else if (DAIV.ValueDateTime != null)
        //       {
        //           DAIV.ValueDateTime = (DateTime)DynamicInstAttValue.Value;
        //           DAIV.Value = DynamicInstAttValue.Value.ToString();
        //       }
        //       else if (DAIV.ValueDouble != null)
        //       {
        //           DAIV.ValueDouble = (double)DynamicInstAttValue.Value;
        //           DAIV.Value = DynamicInstAttValue.Value.ToString();
        //       }
        //       else if (!string.IsNullOrEmpty(DAIV.ValueString))
        //       {
        //           DAIV.ValueString = (string)DynamicInstAttValue.Value;
        //           DAIV.Value = DynamicInstAttValue.Value.ToString();
        //       }
        //       //DAIV.Value = DynamicInstAttValue.Value.ToString();
        //       _unitOfWork.DynamicAttInstValueRepository.Update(DAIV);
        //   });
        // }
        //Function take 3 parameters filters, WithFilterData, parameters
        //Function get all records depened on filters and parameters
        //Function check WithFilterData if true get RelatedTables 
        public Response<ReturnWithFilters<MW_ODUViewModel>> getMW_ODU(List<FilterObjectList> filters, bool WithFilterData, ParameterPagination parameters)
        {
            try
            {
                int count = 0;
                ReturnWithFilters<MW_ODUViewModel> MW_ODU = new ReturnWithFilters<MW_ODUViewModel>();
                MW_ODU.Model = _mapper.Map<List<MW_ODUViewModel>>(_unitOfWork.MW_ODURepository.GetAllIncludeMultiple(parameters, filters, out count, x => x.Mw_Dish, x => x.OduInstallationType, x => x.MwODULibrary).ToList());
                if (WithFilterData == true)
                {
                    // MW_ODU.filters = _unitOfWork.MW_ODURepository.GetRelatedTables();
                }
                else
                {
                    MW_ODU.filters = null;
                }
                return new Response<ReturnWithFilters<MW_ODUViewModel>>(true, MW_ODU, null, null, (int)ApiReturnCode.success, count);
            }
            catch (Exception err)
            {

                return new Response<ReturnWithFilters<MW_ODUViewModel>>(true, null, null, err.Message, (int)ApiReturnCode.fail);
            }
        }
        //public Response<bool> DismantleLoads(string sitecode, int LoadId, string LoadName, int? TaskId)
        //{
        //    using (TransactionScope transactionScope = new TransactionScope())
        //    {
        //        //try
        //        //{

        //        //    double? Freespace = 0;
        //        //    double EquivalentSpace = 0;
        //        //    var allLoadInst = _dbContext.TLIallLoadInst.Where(x => x.mwBUId == LoadId || x.mwDishId == LoadId || x.mwODUId == LoadId || x.mwRFUId == LoadId || x.mwOtherId == LoadId || x.radioAntennaId == LoadId || x.radioRRUId == LoadId || x.radioOtherId == LoadId || x.powerId == LoadId || x.loadOtherId == LoadId)
        //        //    .Include(x => x.mwBU).Include(x => x.mwDish).Include(x => x.mwODU)
        //        //    .Include(x => x.mwRFU).Include(x => x.mwOther).Include(x => x.radioAntenna).Include(x => x.radioRRU).Include(x => x.radioOther).
        //        //    Include(x => x.power).Include(x => x.loadOther).ToList();

        //        //    foreach (var item in allLoadInst)
        //        //    {
        //        //        var civilload = _dbContext.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id
        //        //        && x.SiteCode.ToLower() == sitecode.ToLower() && !x.Dismantle).Include(x => x.allCivilInst).ThenInclude(x => x.civilNonSteel)
        //        //        .Include(x => x.allCivilInst.civilWithLegs).Include(x => x.allCivilInst.civilWithoutLeg)
        //        //            .ToList();
        //        //        foreach (var civilloadinst in civilload)
        //        //        {


        //        //            if (civilloadinst.allCivilInst.civilWithLegsId != null)
        //        //            {
        //        //                if (item.mwBUId != null && LoadName == TablesNames.TLImwBU.ToString())
        //        //                {
        //        //                    var Port = _unitOfWork.MW_PortRepository.GetWhere(x => x.MwBUId == item.mwBUId);
        //        //                    var Cascaded = _unitOfWork.MW_BURepository.GetWhere(x => Port.Any(y => y.MwBUId == x.PortCascadeId));
        //        //                    var RFU = _unitOfWork.MW_RFURepository.GetWhere(x => Port.Any(y => y.Id == x.MwPortId));
        //        //                    foreach (var RFu in RFU)
        //        //                    {
        //        //                        RFu.MwPortId = null;
        //        //                        _unitOfWork.MW_RFURepository.Update(RFu);
        //        //                        _unitOfWork.SaveChanges();
        //        //                    }
        //        //                    foreach (var BU in Cascaded)
        //        //                    {
        //        //                        BU.PortCascadeId = null;
        //        //                        _unitOfWork.MW_BURepository.Update(BU);
        //        //                        _unitOfWork.SaveChanges();
        //        //                    }
        //        //                    EquivalentSpace = civilloadinst.allLoadInst.mwBU.EquivalentSpace;
        //        //                    civilloadinst.Dismantle = true;
        //        //                    civilloadinst.allCivilInst.civilWithLegs.CurrentLoads -= EquivalentSpace;
        //        //                    var OldCivil = _unitOfWork.CivilWithLegsRepository.GetAllAsQueryable()
        //        //                        .AsNoTracking().FirstOrDefault(x => x.Id == civilloadinst.allCivilInst.civilWithLegs.Id);
        //        //                    _unitOfWork.CivilWithLegsRepository.UpdateWithHistory(UserId, OldCivil, civilloadinst.allCivilInst.civilWithLegs)
        //        //                }
        //        //                else if (item.mwDishId != null && LoadName == TablesNames.TLImwDish.ToString())
        //        //                {
        //        //                    var ODU = _unitOfWork.CivilLoadsRepository.GetWhere(x => x.allLoadInst.mwODU.Mw_DishId
        //        //                    == item.mwDishId && !x.Dismantle && x.SiteCode.ToLower() == sitecode.ToLower());
        //        //                    var BU = _unitOfWork.MW_BURepository.GetWhere(x => x.SdDishId == item.mwDishId || x.MainDishId ==
        //        //                    item.mwDishId);
        //        //                    foreach (var Odu in ODU)
        //        //                    {
        //        //                        var OldOdu = _unitOfWork.CivilLoadsRepository.GetAllAsQueryable().AsNoTracking()
        //        //                            .FirstOrDefault(x => x.allLoadInst.mwODU.Id == Odu.allLoadInst.mwODU.Id);
        //        //                        Odu.Dismantle = true;
        //        //                        _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, OldOdu, Odu);
        //        //                        _unitOfWork.SaveChanges();
        //        //                    }
        //        //                    foreach (var Bu in BU)
        //        //                    {
        //        //                        var OldBu = _unitOfWork.MW_BURepository.GetAllAsQueryable().AsNoTracking()
        //        //                            .FirstOrDefault(x => x.Id == Bu.Id);
        //        //                        Bu.SdDishId = null;
        //        //                        Bu.MainDishId = null;
        //        //                        _unitOfWork.MW_BURepository.UpdateWithHistory(UserId, OldBu, Bu);

        //        //                    }
        //        //                    EquivalentSpace = item.mwDish.EquivalentSpace;

        //        //                    civilloadinst.allCivilInst.civilWithLegs.CurrentLoads -= EquivalentSpace;
        //        //                    var OldCivil = _unitOfWork.CivilWithLegsRepository.GetAllAsQueryable()
        //        //                        .AsNoTracking().FirstOrDefault(x => x.Id == civilloadinst.allCivilInst.civilWithLegs.Id);
        //        //                    _unitOfWork.CivilWithLegsRepository.UpdateWithHistory(UserId, OldCivil, civilloadinst.allCivilInst.civilWithLegs)



        //        //                    }
        //        //                else if (item.mwODUId != null && LoadName == TablesNames.TLImwODU.ToString())
        //        //                {
        //        //                    TLImwODU TLImwODU = item.mwODU;
        //        //                    var MWODU = _dbContext.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //        //                    foreach (var mwodu in MWODU)
        //        //                    {
        //        //                        mwodu.Dismantle = true;
        //        //                        EquivalentSpace += 0;
        //        //                    }
        //        //                    TLIcivilWithLegs tLIcivilWithLegs = t.civilWithLegs;
        //        //                    tLIcivilWithLegs.CurrentLoads = tLIcivilWithLegs.CurrentLoads - EquivalentSpace;

        //        //                }
        //        //                else if (item.mwRFUId != null && LoadName == TablesNames.TLImwRFU.ToString())
        //        //                {
        //        //                    TLImwRFU TLImwRFU = item.mwRFU;
        //        //                    var MWRFU = _dbContext.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //        //                    foreach (var mwrfu in MWRFU)
        //        //                    {
        //        //                        mwrfu.Dismantle = true;
        //        //                        EquivalentSpace += 0;
        //        //                    }
        //        //                    TLIcivilWithLegs tLIcivilWithLegs = t.civilWithLegs;
        //        //                    tLIcivilWithLegs.CurrentLoads = tLIcivilWithLegs.CurrentLoads - EquivalentSpace;
        //        //                }
        //        //                else if (item.mwOtherId != null && LoadName == TablesNames.TLImwOther.ToString())
        //        //                {
        //        //                    TLImwOther TLImwOther = item.mwOther;
        //        //                    var MWOTHER = _dbContext.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == true && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //        //                    foreach (var mwother in MWOTHER)
        //        //                    {
        //        //                        mwother.Dismantle = true;
        //        //                        if (mwother.sideArmId == null)
        //        //                        {
        //        //                            EquivalentSpace += TLImwOther.EquivalentSpace;
        //        //                        }
        //        //                        else
        //        //                        {
        //        //                            EquivalentSpace += 0;
        //        //                        }

        //        //                    }
        //        //                    var TLIMWOTHER = _dbContext.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == false && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //        //                    foreach (var mwother in TLIMWOTHER)
        //        //                    {
        //        //                        mwother.Dismantle = true;
        //        //                    }
        //        //                    TLIcivilWithLegs tLIcivilWithLegs = t.civilWithLegs;
        //        //                    tLIcivilWithLegs.CurrentLoads = tLIcivilWithLegs.CurrentLoads - EquivalentSpace;

        //        //                }
        //        //                else if (item.radioAntennaId != null && LoadName == TablesNames.TLIradioAntenna.ToString())
        //        //                {
        //        //                    TLIradioAntenna TLIradioAntenna = item.radioAntenna;
        //        //                    var RADIOANTENNA = _dbContext.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == true && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //        //                    foreach (var radioantenna in RADIOANTENNA)
        //        //                    {
        //        //                        radioantenna.Dismantle = true;
        //        //                        var RadioRRu = _dbContext.TLIRadioRRU.Where(x => x.radioAntennaId == item.radioAntennaId).ToList();
        //        //                        foreach (var radioRru in RadioRRu)
        //        //                        {
        //        //                            radioRru.radioAntennaId = null;
        //        //                        }
        //        //                        if (radioantenna.sideArmId == null)
        //        //                        {
        //        //                            EquivalentSpace += TLIradioAntenna.EquivalentSpace;
        //        //                        }
        //        //                        else
        //        //                        {
        //        //                            EquivalentSpace += 0;
        //        //                        }

        //        //                    }
        //        //                    var TLIRADIOANTENNA = _dbContext.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == false && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //        //                    foreach (var radioantenna in TLIRADIOANTENNA)
        //        //                    {
        //        //                        radioantenna.Dismantle = true;
        //        //                        var RadioRRu = _dbContext.TLIRadioRRU.Where(x => x.radioAntennaId == item.radioAntennaId).ToList();
        //        //                        foreach (var radioRru in RadioRRu)
        //        //                        {
        //        //                            radioRru.radioAntennaId = null;
        //        //                        }
        //        //                    }
        //        //                    TLIcivilWithLegs tLIcivilWithLegs = t.civilWithLegs;
        //        //                    tLIcivilWithLegs.CurrentLoads = tLIcivilWithLegs.CurrentLoads - EquivalentSpace;

        //        //                }
        //        //                else if (item.radioRRUId != null && LoadName == TablesNames.TLIradioRRU.ToString())
        //        //                {

        //        //                    TLIRadioRRU TLIRadioRRU = item.radioRRU;
        //        //                    var RADIORRU = _dbContext.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == true && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //        //                    foreach (var radiorru in RADIORRU)
        //        //                    {
        //        //                        radiorru.Dismantle = true;
        //        //                        if (radiorru.sideArmId == null)
        //        //                        {
        //        //                            EquivalentSpace += TLIRadioRRU.EquivalentSpace;
        //        //                        }
        //        //                        else
        //        //                        {
        //        //                            EquivalentSpace += 0;
        //        //                        }
        //        //                    }
        //        //                    var TLIRADIORRU = _dbContext.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == false && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //        //                    foreach (var radio in TLIRADIORRU)
        //        //                    {
        //        //                        radio.Dismantle = true;
        //        //                    }
        //        //                    TLIcivilWithLegs tLIcivilWithLegs = t.civilWithLegs;
        //        //                    tLIcivilWithLegs.CurrentLoads = tLIcivilWithLegs.CurrentLoads - EquivalentSpace;

        //        //                }
        //        //                else if (item.radioOtherId != null && LoadName == TablesNames.TLIradioOther.ToString())
        //        //                {
        //        //                    TLIradioOther TLIradioOther = item.radioOther;
        //        //                    var RADIOOTHER = _dbContext.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == true && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //        //                    foreach (var radioother in RADIOOTHER)
        //        //                    {
        //        //                        radioother.Dismantle = true;
        //        //                        if (radioother.sideArmId == null)
        //        //                        {
        //        //                            EquivalentSpace += TLIradioOther.EquivalentSpace;
        //        //                        }
        //        //                        else
        //        //                        {
        //        //                            EquivalentSpace += 0;
        //        //                        }
        //        //                    }
        //        //                    var TLIRADIOOTHER = _dbContext.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == false && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //        //                    foreach (var radioother in TLIRADIOOTHER)
        //        //                    {
        //        //                        radioother.Dismantle = true;
        //        //                    }
        //        //                    TLIcivilWithLegs tLIcivilWithLegs = t.civilWithLegs;
        //        //                    tLIcivilWithLegs.CurrentLoads = tLIcivilWithLegs.CurrentLoads - EquivalentSpace;

        //        //                }
        //        //                else if (item.powerId != null && LoadName == TablesNames.TLIpower.ToString())
        //        //                {
        //        //                    TLIpower TLIpower = item.power;
        //        //                    var POWER = _dbContext.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == true && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //        //                    foreach (var power in POWER)
        //        //                    {
        //        //                        power.Dismantle = true;
        //        //                        if (power.sideArmId == null)
        //        //                        {
        //        //                            EquivalentSpace += TLIpower.EquivalentSpace;
        //        //                        }
        //        //                        else
        //        //                        {
        //        //                            EquivalentSpace += 0;
        //        //                        }
        //        //                    }
        //        //                    var TLIPOWER = _dbContext.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == false && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //        //                    foreach (var power in TLIPOWER)
        //        //                    {
        //        //                        power.Dismantle = true;
        //        //                    }
        //        //                    TLIcivilWithLegs tLIcivilWithLegs = t.civilWithLegs;
        //        //                    tLIcivilWithLegs.CurrentLoads = tLIcivilWithLegs.CurrentLoads - EquivalentSpace;

        //        //                }
        //        //                else if (item.loadOtherId != null && LoadName == TablesNames.TLIloadOther.ToString())
        //        //                {
        //        //                    TLIloadOther tLIloadOther = item.loadOther;
        //        //                    var LOADOTHER = _dbContext.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == true && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //        //                    foreach (var loadother in LOADOTHER)
        //        //                    {
        //        //                        loadother.Dismantle = true;
        //        //                        if (loadother.sideArmId == null)
        //        //                        {
        //        //                            EquivalentSpace += tLIloadOther.EquivalentSpace;
        //        //                        }
        //        //                        else
        //        //                        {
        //        //                            EquivalentSpace += 0;
        //        //                        }
        //        //                    }
        //        //                    var TLILOADOTHER = _dbContext.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == false && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //        //                    foreach (var loadother in TLILOADOTHER)
        //        //                    {
        //        //                        loadother.Dismantle = true;
        //        //                    }
        //        //                    TLIcivilWithLegs tLIcivilWithLegs = t.civilWithLegs;
        //        //                    tLIcivilWithLegs.CurrentLoads = tLIcivilWithLegs.CurrentLoads - EquivalentSpace;

        //        //                }
        //        //                _dbContext.SaveChanges();
        //        //            }
        //        //            else if (civilloadinst.allCivilInst.civilWithLegsId != null)
        //        //            {

        //        //                if (item.mwBUId != null && LoadName == TablesNames.TLImwBU.ToString())
        //        //                {

        //        //                    TLImwBU TLImwBU = item.mwBU;
        //        //                    var PortCascadeId = _dbContext.TLImwBU.Where(x => x.Id == item.mwBUId).Select(x => x.PortCascadeId).FirstOrDefault();
        //        //                    var PortCascade = _dbContext.TLImwPort.Where(x => x.Id == PortCascadeId).ToList();
        //        //                    foreach (var Port in PortCascade)
        //        //                    {
        //        //                        var allload = _dbContext.TLIallLoadInst.Where(x => x.mwBUId == Port.MwBUId).Select(x => x.Id).FirstOrDefault();
        //        //                        var Civilloads = _dbContext.TLIcivilLoads.Where(x => x.allLoadInstId == allload && x.allCivilInstId == t.Id && x.Dismantle == false).FirstOrDefault();
        //        //                        if (Civilloads != null)
        //        //                        {
        //        //                            Civilloads.Dismantle = true;
        //        //                            EquivalentSpace += 0;
        //        //                            Port.MwBUId = 0;
        //        //                            Port.MwBULibraryId = 0;
        //        //                        }
        //        //                    }
        //        //                    var mwport = _dbContext.TLImwPort.Where(x => x.MwBUId == item.mwBUId).Select(x => x.Id).ToList();
        //        //                    foreach (var port in mwport)
        //        //                    {
        //        //                        var mwrfu = _dbContext.TLImwRFU.Where(x => x.MwPortId == port).Select(x => x.Id).ToList();

        //        //                        foreach (var rfu in mwrfu)
        //        //                        {
        //        //                            var allLoadRFU = _dbContext.TLIallLoadInst.Where(x => x.mwRFUId == rfu).Select(x => x.Id).ToList();
        //        //                            foreach (var allLoad in allLoadRFU)
        //        //                            {
        //        //                                var MwRfu = _dbContext.TLIcivilLoads.Where(x => x.allLoadInstId == allLoad && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //        //                                foreach (var MWRfU in MwRfu)
        //        //                                {
        //        //                                    MWRfU.Dismantle = true;
        //        //                                    EquivalentSpace += 0;
        //        //                                }

        //        //                            }
        //        //                        }

        //        //                    }
        //        //                    var civilLoads = _dbContext.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.Dismantle == false && x.SiteCode == sitecode && x.allCivilInstId == t.Id).ToList();
        //        //                    foreach (var civilLoad in civilLoads)
        //        //                    {
        //        //                        civilLoad.Dismantle = true;
        //        //                        if (civilLoad.sideArmId == null)
        //        //                        {

        //        //                            EquivalentSpace += 0;

        //        //                        }
        //        //                        else
        //        //                        {
        //        //                            EquivalentSpace += 0;
        //        //                        }

        //        //                    }
        //        //                    TLIcivilWithoutLeg tLIcivilWithoutLeg = t.civilWithoutLeg;
        //        //                    tLIcivilWithoutLeg.CurrentLoads = tLIcivilWithoutLeg.CurrentLoads - (float)EquivalentSpace;

        //        //                }
        //        //                else if (item.mwDishId != null && LoadName == TablesNames.TLImwDish.ToString())
        //        //                {
        //        //                    TLImwDish TLImwDish = item.mwDish;
        //        //                    var mwODU = _dbContext.TLImwODU.Where(x => x.Mw_DishId == item.mwDishId).Select(x => x.Id).ToList();
        //        //                    foreach (var ODU in mwODU)
        //        //                    {
        //        //                        var allLoadinst = _dbContext.TLIallLoadInst.Where(x => x.mwODUId == ODU).Select(x => x.Id).ToList();
        //        //                        foreach (var Load in allLoadinst)
        //        //                        {
        //        //                            var civil = _dbContext.TLIcivilLoads.Where(x => x.allLoadInstId == Load && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();


        //        //                            foreach (var civillload in civil)
        //        //                            {
        //        //                                civillload.Dismantle = true;
        //        //                                if (civillload.sideArmId == null)
        //        //                                {
        //        //                                    EquivalentSpace += 0;
        //        //                                }
        //        //                                else
        //        //                                {
        //        //                                    EquivalentSpace += 0;
        //        //                                }
        //        //                            }
        //        //                        }
        //        //                    }
        //        //                    var mwdish = _dbContext.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == true && x.Dismantle == false).ToList();
        //        //                    foreach (var TLImwdish in mwdish)
        //        //                    {
        //        //                        TLImwdish.Dismantle = true;
        //        //                        var Bu = _dbContext.TLImwBU.Where(x => x.MainDishId == item.mwDishId).ToList();
        //        //                        foreach (var TLIBu in Bu)
        //        //                        {
        //        //                            TLIBu.MainDishId = null;
        //        //                        }
        //        //                        if (TLImwdish.sideArmId == null)
        //        //                        {
        //        //                            EquivalentSpace += TLImwDish.EquivalentSpace;
        //        //                        }
        //        //                        else
        //        //                        {
        //        //                            EquivalentSpace += 0;
        //        //                        }

        //        //                    }
        //        //                    var tlimwdish = _dbContext.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == false && x.Dismantle == false).ToList();
        //        //                    foreach (var MwDish in tlimwdish)
        //        //                    {
        //        //                        MwDish.Dismantle = true;
        //        //                        var Bu = _dbContext.TLImwBU.Where(x => x.MainDishId == item.mwDishId).ToList();
        //        //                        foreach (var TLIBu in Bu)
        //        //                        {
        //        //                            TLIBu.MainDishId = null;
        //        //                        }
        //        //                    }
        //        //                    TLIcivilWithoutLeg tLIcivilWithoutLeg = t.civilWithoutLeg;
        //        //                    tLIcivilWithoutLeg.CurrentLoads = tLIcivilWithoutLeg.CurrentLoads - (float)EquivalentSpace;


        //        //                }
        //        //                else if (item.mwODUId != null && LoadName == TablesNames.TLImwODU.ToString())
        //        //                {
        //        //                    TLImwODU TLImwODU = item.mwODU;
        //        //                    var MWODU = _dbContext.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //        //                    foreach (var mwodu in MWODU)
        //        //                    {
        //        //                        mwodu.Dismantle = true;
        //        //                        EquivalentSpace += 0;
        //        //                    }
        //        //                    TLIcivilWithoutLeg tLIcivilWithoutLeg = t.civilWithoutLeg;
        //        //                    tLIcivilWithoutLeg.CurrentLoads = tLIcivilWithoutLeg.CurrentLoads - (float)EquivalentSpace;


        //        //                }
        //        //                else if (item.mwRFUId != null && LoadName == TablesNames.TLImwRFU.ToString())
        //        //                {
        //        //                    TLImwRFU TLImwRFU = item.mwRFU;
        //        //                    var MWRFU = _dbContext.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //        //                    foreach (var mwrfu in MWRFU)
        //        //                    {
        //        //                        mwrfu.Dismantle = true;
        //        //                        EquivalentSpace += 0;
        //        //                    }
        //        //                    TLIcivilWithoutLeg tLIcivilWithoutLeg = t.civilWithoutLeg;
        //        //                    tLIcivilWithoutLeg.CurrentLoads = tLIcivilWithoutLeg.CurrentLoads - (float)EquivalentSpace;

        //        //                }
        //        //                else if (item.mwOtherId != null && LoadName == TablesNames.TLImwOther.ToString())
        //        //                {
        //        //                    TLImwOther TLImwOther = item.mwOther;
        //        //                    var MWOTHER = _dbContext.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == true && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //        //                    foreach (var mwother in MWOTHER)
        //        //                    {
        //        //                        mwother.Dismantle = true;
        //        //                        if (mwother.sideArmId == null)
        //        //                        {
        //        //                            EquivalentSpace += TLImwOther.EquivalentSpace;
        //        //                        }
        //        //                        else
        //        //                        {
        //        //                            EquivalentSpace += 0;
        //        //                        }

        //        //                    }
        //        //                    var TLIMWOTHER = _dbContext.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == false && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //        //                    foreach (var mwother in TLIMWOTHER)
        //        //                    {
        //        //                        mwother.Dismantle = true;
        //        //                    }
        //        //                    TLIcivilWithoutLeg tLIcivilWithoutLeg = t.civilWithoutLeg;
        //        //                    tLIcivilWithoutLeg.CurrentLoads = tLIcivilWithoutLeg.CurrentLoads - (float)EquivalentSpace;

        //        //                }
        //        //                else if (item.radioAntennaId != null && LoadName == TablesNames.TLIradioAntenna.ToString())
        //        //                {
        //        //                    TLIradioAntenna TLIradioAntenna = item.radioAntenna;
        //        //                    var RADIOANTENNA = _dbContext.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == true && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //        //                    foreach (var radioantenna in RADIOANTENNA)
        //        //                    {
        //        //                        radioantenna.Dismantle = true;
        //        //                        var RadioRRu = _dbContext.TLIRadioRRU.Where(x => x.radioAntennaId == item.radioAntennaId).ToList();
        //        //                        foreach (var TLIRadioRRu in RadioRRu)
        //        //                        {
        //        //                            TLIRadioRRu.radioAntennaId = null;
        //        //                        }
        //        //                        if (radioantenna.sideArmId == null)
        //        //                        {
        //        //                            EquivalentSpace += TLIradioAntenna.EquivalentSpace;
        //        //                        }
        //        //                        else
        //        //                        {
        //        //                            EquivalentSpace += 0;
        //        //                        }

        //        //                    }
        //        //                    var TLIRADIOANTENNA = _dbContext.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == false && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //        //                    foreach (var radioantenna in TLIRADIOANTENNA)
        //        //                    {
        //        //                        radioantenna.Dismantle = true;
        //        //                        var RadioRRu = _dbContext.TLIRadioRRU.Where(x => x.radioAntennaId == item.radioAntennaId).ToList();
        //        //                        foreach (var TLIRadioRRu in RadioRRu)
        //        //                        {
        //        //                            TLIRadioRRu.radioAntennaId = null;
        //        //                        }
        //        //                    }
        //        //                    TLIcivilWithoutLeg tLIcivilWithoutLeg = t.civilWithoutLeg;
        //        //                    tLIcivilWithoutLeg.CurrentLoads = tLIcivilWithoutLeg.CurrentLoads - (float)EquivalentSpace;
        //        //                }
        //        //                else if (item.radioRRUId != null && LoadName == TablesNames.TLIradioRRU.ToString())
        //        //                {

        //        //                    TLIRadioRRU TLIRadioRRU = item.radioRRU;
        //        //                    var RADIORRU = _dbContext.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == true && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //        //                    foreach (var radiorru in RADIORRU)
        //        //                    {
        //        //                        radiorru.Dismantle = true;
        //        //                        if (radiorru.sideArmId == null)
        //        //                        {
        //        //                            EquivalentSpace += TLIRadioRRU.EquivalentSpace;
        //        //                        }
        //        //                        else
        //        //                        {
        //        //                            EquivalentSpace += 0;
        //        //                        }
        //        //                    }
        //        //                    var TLIRADIORRU = _dbContext.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == false && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //        //                    foreach (var radiorru in TLIRADIORRU)
        //        //                    {
        //        //                        radiorru.Dismantle = true;
        //        //                    }
        //        //                    TLIcivilWithoutLeg tLIcivilWithoutLeg = t.civilWithoutLeg;
        //        //                    tLIcivilWithoutLeg.CurrentLoads = tLIcivilWithoutLeg.CurrentLoads - (float)EquivalentSpace;
        //        //                }
        //        //                else if (item.radioOtherId != null && LoadName == TablesNames.TLIradioOther.ToString())
        //        //                {
        //        //                    TLIradioOther TLIradioOther = item.radioOther;
        //        //                    var RADIOOTHER = _dbContext.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == true && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //        //                    foreach (var radioother in RADIOOTHER)
        //        //                    {
        //        //                        radioother.Dismantle = true;
        //        //                        if (radioother.sideArmId == null)
        //        //                        {
        //        //                            EquivalentSpace += TLIradioOther.EquivalentSpace;
        //        //                        }
        //        //                        else
        //        //                        {
        //        //                            EquivalentSpace += 0;
        //        //                        }
        //        //                    }
        //        //                    var TLIRADIOOTHER = _dbContext.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == false && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //        //                    foreach (var radioother in TLIRADIOOTHER)
        //        //                    {
        //        //                        radioother.Dismantle = true;
        //        //                    }
        //        //                    TLIcivilWithoutLeg tLIcivilWithoutLeg = t.civilWithoutLeg;
        //        //                    tLIcivilWithoutLeg.CurrentLoads = tLIcivilWithoutLeg.CurrentLoads - (float)EquivalentSpace;
        //        //                }
        //        //                else if (item.powerId != null && LoadName == TablesNames.TLIpower.ToString())
        //        //                {
        //        //                    TLIpower TLIpower = item.power;
        //        //                    var POWER = _dbContext.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == true && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //        //                    foreach (var power in POWER)
        //        //                    {
        //        //                        power.Dismantle = true;
        //        //                        if (power.sideArmId == null)
        //        //                        {
        //        //                            EquivalentSpace += TLIpower.EquivalentSpace;
        //        //                        }
        //        //                        else
        //        //                        {
        //        //                            EquivalentSpace += 0;
        //        //                        }
        //        //                    }
        //        //                    var TLIPOWER = _dbContext.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == false && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //        //                    foreach (var power in TLIPOWER)
        //        //                    {
        //        //                        power.Dismantle = true;
        //        //                    }
        //        //                    TLIcivilWithoutLeg tLIcivilWithoutLeg = t.civilWithoutLeg;
        //        //                    tLIcivilWithoutLeg.CurrentLoads = tLIcivilWithoutLeg.CurrentLoads - (float)EquivalentSpace;

        //        //                }
        //        //                else if (item.loadOtherId != null && LoadName == TablesNames.TLIloadOther.ToString())
        //        //                {
        //        //                    TLIloadOther tLIloadOther = item.loadOther;
        //        //                    var LOADOTHER = _dbContext.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == true && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //        //                    foreach (var loadother in LOADOTHER)
        //        //                    {
        //        //                        loadother.Dismantle = true;
        //        //                        if (loadother.sideArmId == null)
        //        //                        {
        //        //                            EquivalentSpace += tLIloadOther.EquivalentSpace;
        //        //                        }
        //        //                        else
        //        //                        {
        //        //                            EquivalentSpace += 0;
        //        //                        }
        //        //                    }
        //        //                    var TLILOADOTHER = _dbContext.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.ReservedSpace == false && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //        //                    foreach (var loadother in TLILOADOTHER)
        //        //                    {
        //        //                        loadother.Dismantle = true;
        //        //                    }
        //        //                    TLIcivilWithoutLeg tLIcivilWithoutLeg = t.civilWithoutLeg;
        //        //                    tLIcivilWithoutLeg.CurrentLoads = tLIcivilWithoutLeg.CurrentLoads - (float)EquivalentSpace;

        //        //                }
        //        //                _dbContext.SaveChanges();
        //        //            }
        //        //            else if (t.civilNonSteelId != null)
        //        //            {
        //        //                if (item.mwBUId != null && LoadName == TablesNames.TLImwBU.ToString())
        //        //                {

        //        //                    TLImwBU TLImwBU = item.mwBU;
        //        //                    var PortCascadeId = _dbContext.TLImwBU.Where(x => x.Id == item.mwBUId).Select(x => x.PortCascadeId).FirstOrDefault();
        //        //                    var PortCascade = _dbContext.TLImwPort.Where(x => x.Id == PortCascadeId).ToList();
        //        //                    foreach (var Port in PortCascade)
        //        //                    {
        //        //                        var allload = _dbContext.TLIallLoadInst.Where(x => x.mwBUId == Port.MwBUId).Select(x => x.Id).FirstOrDefault();
        //        //                        var Civilloads = _dbContext.TLIcivilLoads.Where(x => x.allLoadInstId == allload && x.allCivilInstId == t.Id && x.Dismantle == false).FirstOrDefault();
        //        //                        if (Civilloads != null)
        //        //                        {
        //        //                            Civilloads.Dismantle = true;
        //        //                            EquivalentSpace += 0;
        //        //                            Port.MwBUId = 0;
        //        //                            Port.MwBULibraryId = 0;
        //        //                        }
        //        //                    }
        //        //                    var mwport = _dbContext.TLImwPort.Where(x => x.MwBUId == item.mwBUId).Select(x => x.Id).ToList();
        //        //                    foreach (var port in mwport)
        //        //                    {
        //        //                        var mwrfu = _dbContext.TLImwRFU.Where(x => x.MwPortId == port).Select(x => x.Id).ToList();

        //        //                        foreach (var rfu in mwrfu)
        //        //                        {
        //        //                            var allLoadRFU = _dbContext.TLIallLoadInst.Where(x => x.mwRFUId == rfu).Select(x => x.Id).ToList();
        //        //                            foreach (var allLoad in allLoadRFU)
        //        //                            {
        //        //                                var MwRfu = _dbContext.TLIcivilLoads.Where(x => x.allLoadInstId == allLoad && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //        //                                foreach (var MWRfU in MwRfu)
        //        //                                {
        //        //                                    MWRfU.Dismantle = true;
        //        //                                    EquivalentSpace += 0;
        //        //                                }

        //        //                            }
        //        //                        }

        //        //                    }
        //        //                    var civilLoads = _dbContext.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.Dismantle == false && x.SiteCode == sitecode && x.allCivilInstId == t.Id).ToList();
        //        //                    foreach (var civilLoad in civilLoads)
        //        //                    {
        //        //                        civilLoad.Dismantle = true;
        //        //                        EquivalentSpace += 0;

        //        //                    }
        //        //                    TLIcivilNonSteel tLIcivilNonSteel = t.civilNonSteel;
        //        //                    tLIcivilNonSteel.CurrentLoads = tLIcivilNonSteel.CurrentLoads - (double)EquivalentSpace;

        //        //                }
        //        //                else if (item.mwDishId != null && LoadName == TablesNames.TLImwDish.ToString())
        //        //                {
        //        //                    TLImwDish TLImwDish = item.mwDish;
        //        //                    var mwODU = _dbContext.TLImwODU.Where(x => x.Mw_DishId == item.mwDishId).Select(x => x.Id).ToList();
        //        //                    foreach (var ODU in mwODU)
        //        //                    {
        //        //                        var allLoadinst = _dbContext.TLIallLoadInst.Where(x => x.mwODUId == ODU).Select(x => x.Id).ToList();
        //        //                        foreach (var Load in allLoadinst)
        //        //                        {
        //        //                            var civil = _dbContext.TLIcivilLoads.Where(x => x.allLoadInstId == Load && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();


        //        //                            foreach (var civillload in civil)
        //        //                            {
        //        //                                civillload.Dismantle = true;
        //        //                                EquivalentSpace += 0;
        //        //                            }
        //        //                        }
        //        //                    }
        //        //                    var mwdish = _dbContext.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.Dismantle == false).ToList();
        //        //                    foreach (var TLImwdish in mwdish)
        //        //                    {
        //        //                        TLImwdish.Dismantle = true;
        //        //                        var Bu = _dbContext.TLImwBU.Where(x => x.MainDishId == item.mwDishId).ToList();
        //        //                        foreach (var TLIBu in Bu)
        //        //                        {
        //        //                            TLIBu.MainDishId = null;
        //        //                        }
        //        //                        EquivalentSpace += 0;

        //        //                    }
        //        //                    TLIcivilNonSteel tLIcivilNonSteel = t.civilNonSteel;
        //        //                    tLIcivilNonSteel.CurrentLoads = tLIcivilNonSteel.CurrentLoads - (double)EquivalentSpace;


        //        //                }
        //        //                else if (item.mwODUId != null && LoadName == TablesNames.TLImwODU.ToString())
        //        //                {
        //        //                    TLImwODU TLImwODU = item.mwODU;
        //        //                    var MWODU = _dbContext.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //        //                    foreach (var mwodu in MWODU)
        //        //                    {
        //        //                        mwodu.Dismantle = true;
        //        //                        EquivalentSpace += 0;
        //        //                    }
        //        //                    TLIcivilNonSteel tLIcivilNonSteel = t.civilNonSteel;
        //        //                    tLIcivilNonSteel.CurrentLoads = tLIcivilNonSteel.CurrentLoads - (double)EquivalentSpace;



        //        //                }
        //        //                else if (item.mwRFUId != null && LoadName == TablesNames.TLImwRFU.ToString())
        //        //                {
        //        //                    TLImwRFU TLImwRFU = item.mwRFU;
        //        //                    var MWRFU = _dbContext.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //        //                    foreach (var mwrfu in MWRFU)
        //        //                    {
        //        //                        mwrfu.Dismantle = true;
        //        //                        EquivalentSpace += 0;
        //        //                    }
        //        //                    TLIcivilNonSteel tLIcivilNonSteel = t.civilNonSteel;
        //        //                    tLIcivilNonSteel.CurrentLoads = tLIcivilNonSteel.CurrentLoads - (double)EquivalentSpace;


        //        //                }
        //        //                else if (item.mwOtherId != null && LoadName == TablesNames.TLImwOther.ToString())
        //        //                {
        //        //                    TLImwOther TLImwOther = item.mwOther;
        //        //                    var MWOTHER = _dbContext.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //        //                    foreach (var mwother in MWOTHER)
        //        //                    {
        //        //                        mwother.Dismantle = true;
        //        //                        EquivalentSpace += 0;
        //        //                    }
        //        //                    TLIcivilNonSteel tLIcivilNonSteel = t.civilNonSteel;
        //        //                    tLIcivilNonSteel.CurrentLoads = tLIcivilNonSteel.CurrentLoads - (double)EquivalentSpace;


        //        //                }
        //        //                else if (item.radioAntennaId != null && LoadName == TablesNames.TLIradioAntenna.ToString())
        //        //                {
        //        //                    TLIradioAntenna TLIradioAntenna = item.radioAntenna;
        //        //                    var RADIOANTENNA = _dbContext.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //        //                    foreach (var radioantenna in RADIOANTENNA)
        //        //                    {
        //        //                        radioantenna.Dismantle = true;
        //        //                        var RadioRRu = _dbContext.TLIRadioRRU.Where(x => x.radioAntennaId == item.radioAntennaId).ToList();
        //        //                        foreach (var radioRru in RadioRRu)
        //        //                        {
        //        //                            radioRru.radioAntennaId = null;
        //        //                        }
        //        //                        EquivalentSpace += 0;

        //        //                    }
        //        //                    TLIcivilNonSteel tLIcivilNonSteel = t.civilNonSteel;
        //        //                    tLIcivilNonSteel.CurrentLoads = tLIcivilNonSteel.CurrentLoads - (double)EquivalentSpace;


        //        //                }
        //        //                else if (item.radioRRUId != null && LoadName == TablesNames.TLIradioRRU.ToString())
        //        //                {

        //        //                    TLIRadioRRU TLIRadioRRU = item.radioRRU;
        //        //                    var RADIORRU = _dbContext.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //        //                    foreach (var radiorru in RADIORRU)
        //        //                    {
        //        //                        radiorru.Dismantle = true;
        //        //                        EquivalentSpace += 0;

        //        //                    }
        //        //                    TLIcivilNonSteel tLIcivilNonSteel = t.civilNonSteel;
        //        //                    tLIcivilNonSteel.CurrentLoads = tLIcivilNonSteel.CurrentLoads - (double)EquivalentSpace;


        //        //                }
        //        //                else if (item.radioOtherId != null && LoadName == TablesNames.TLIradioOther.ToString())
        //        //                {
        //        //                    TLIradioOther TLIradioOther = item.radioOther;
        //        //                    var RADIOOTHER = _dbContext.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //        //                    foreach (var radioother in RADIOOTHER)
        //        //                    {
        //        //                        radioother.Dismantle = true;
        //        //                        EquivalentSpace += 0;

        //        //                    }
        //        //                    TLIcivilNonSteel tLIcivilNonSteel = t.civilNonSteel;
        //        //                    tLIcivilNonSteel.CurrentLoads = tLIcivilNonSteel.CurrentLoads - (double)EquivalentSpace;


        //        //                }
        //        //                else if (item.powerId != null && LoadName == TablesNames.TLIpower.ToString())
        //        //                {
        //        //                    TLIpower TLIpower = item.power;
        //        //                    var POWER = _dbContext.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //        //                    foreach (var power in POWER)
        //        //                    {
        //        //                        power.Dismantle = true;
        //        //                        EquivalentSpace += 0;

        //        //                    }
        //        //                    TLIcivilNonSteel tLIcivilNonSteel = t.civilNonSteel;
        //        //                    tLIcivilNonSteel.CurrentLoads = tLIcivilNonSteel.CurrentLoads - (double)EquivalentSpace;


        //        //                }
        //        //                else if (item.loadOtherId != null && LoadName == TablesNames.TLIloadOther.ToString())
        //        //                {
        //        //                    TLIloadOther tLIloadOther = item.loadOther;
        //        //                    var LOADOTHER = _dbContext.TLIcivilLoads.Where(x => x.allLoadInstId == item.Id && x.Dismantle == false && x.allCivilInstId == t.Id).ToList();
        //        //                    foreach (var loadother in LOADOTHER)
        //        //                    {
        //        //                        loadother.Dismantle = true;
        //        //                        EquivalentSpace += 0;
        //        //                    }
        //        //                    TLIcivilNonSteel tLIcivilNonSteel = t.civilNonSteel;
        //        //                    tLIcivilNonSteel.CurrentLoads = tLIcivilNonSteel.CurrentLoads - (double)EquivalentSpace;


        //        //                }
        //        //                _dbContext.SaveChanges();

        //        //            }
        //        //        }
        //        //    }

        //        //}
        //        //    _dbContext.SaveChanges();
        //        //if (TaskId != null)
        //        //{
        //        //    var Submit = _unitOfWork.SiteRepository.SubmitTaskByTLI(TaskId);

        //        //}
        //        // transactionScope.Complete();
        //        return new Response<bool>(true, true, null, null, (int)Helpers.Constants.ApiReturnCode.success);


        //        //catch (Exception er)
        //        //{

        //        //return new Response<bool>(false, false, null, er.Message, (int)Helpers.Constants.ApiReturnCode.fail);
        //    }
        //}
        public Response<bool> DismantleLoads(string sitecode, int LoadId, string LoadName, int? TaskId, int UserId, string connectionString)
        {
            using (TransactionScope transactionScope = new TransactionScope())
            {
                try
                {
                    if (LoadName == Helpers.Constants.TablesNames.TLImwDish.ToString())
                    {
                        var DishLoad = _unitOfWork.CivilLoadsRepository.GetWhereFirst(x => x.allLoadInst.mwDishId
                        == LoadId && !x.Dismantle && x.SiteCode.ToLower() == sitecode.ToLower());
                        if (DishLoad != null)
                        {
                            var ODULoad = _unitOfWork.CivilLoadsRepository.GetWhereAndInclude(x => x.allLoadInst.mwODU.Mw_DishId ==
                            DishLoad.allLoadInst.mwDishId && !x.Dismantle && x.SiteCode.ToLower() == sitecode.ToLower()
                            && x.allCivilInstId == DishLoad.allCivilInstId, x => x.allLoadInst);

                            foreach (var OduLoad in ODULoad)
                            {
                                var OldOduLoad = _unitOfWork.CivilLoadsRepository.GetAllAsQueryable()
                                    .AsNoTracking().FirstOrDefault(x => x.Id == OduLoad.Id);
                                OduLoad.Dismantle = true;
                                if (OduLoad.ReservedSpace == true)
                                {
                                    if (OduLoad.allCivilInst.civilWithLegsId != null)
                                    {
                                        OduLoad.allCivilInst.civilWithLegs.CurrentLoads -= OduLoad.allLoadInst.mwODU.EquivalentSpace;
                                        var OldCivilWithlegs = _unitOfWork.CivilWithLegsRepository.GetAllAsQueryable()
                                         .AsNoTracking().FirstOrDefault(x => x.Id == OduLoad.allCivilInst.civilWithLegsId);

                                        _unitOfWork.CivilWithLegsRepository.UpdateWithHistory(UserId, OldCivilWithlegs, OduLoad.allCivilInst.civilWithLegs);
                                        _unitOfWork.SaveChanges();
                                    }
                                    else if (DishLoad.allCivilInst.civilWithoutLegId != null)
                                    {
                                        OduLoad.allCivilInst.civilWithoutLeg.CurrentLoads -= OduLoad.allLoadInst.mwODU.EquivalentSpace;
                                        var OldCivilWithoutLegs = _unitOfWork.CivilWithoutLegRepository.GetAllAsQueryable()
                                        .AsNoTracking().FirstOrDefault(x => x.Id == OduLoad.allCivilInst.civilWithoutLegId);

                                        _unitOfWork.CivilWithoutLegRepository.UpdateWithHistory(UserId, OldCivilWithoutLegs, OduLoad.allCivilInst.civilWithoutLeg);
                                        _unitOfWork.SaveChanges();
                                    }
                                }
                                _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, OldOduLoad, OduLoad);
                                _unitOfWork.SaveChanges();
                            }


                            var MWBULoadSdDish = _unitOfWork.CivilLoadsRepository.GetWhereAndInclude(x => x.allLoadInst.mwBU.SdDishId ==
                            DishLoad.allLoadInst.mwDishId
                            && !x.Dismantle && x.SiteCode.ToLower() == sitecode.ToLower(), x => x.allLoadInst);

                            var MWBULoadMainDish = _unitOfWork.CivilLoadsRepository.GetWhereAndInclude(x => x.allLoadInst.mwBU.MainDishId
                            == DishLoad.allLoadInst.mwDishId
                              && !x.Dismantle && x.SiteCode.ToLower() == sitecode.ToLower(), x => x.allLoadInst, x => x.allLoadInst.mwBU);

                            foreach (var MWBuLoadSdDish in MWBULoadSdDish)
                            {
                                var OldOduLoad = _unitOfWork.CivilLoadsRepository.GetAllAsQueryable()
                                    .AsNoTracking().FirstOrDefault(x => x.Id == MWBuLoadSdDish.Id);
                                MWBuLoadSdDish.Dismantle = true;
                                if (MWBuLoadSdDish.ReservedSpace == true)
                                {
                                    if (MWBuLoadSdDish.allCivilInst.civilWithLegsId != null)
                                    {
                                        MWBuLoadSdDish.allCivilInst.civilWithLegs.CurrentLoads -= MWBuLoadSdDish.allLoadInst.mwBU.EquivalentSpace;
                                        var OldCivilWithlegs = _unitOfWork.CivilWithLegsRepository.GetAllAsQueryable()
                                         .AsNoTracking().FirstOrDefault(x => x.Id == MWBuLoadSdDish.allCivilInst.civilWithLegsId);

                                        _unitOfWork.CivilWithLegsRepository.UpdateWithHistory(UserId, OldCivilWithlegs, MWBuLoadSdDish.allCivilInst.civilWithLegs);
                                        _unitOfWork.SaveChanges();
                                    }
                                    else if (DishLoad.allCivilInst.civilWithoutLegId != null)
                                    {
                                        MWBuLoadSdDish.allCivilInst.civilWithoutLeg.CurrentLoads -= MWBuLoadSdDish.allLoadInst.mwBU.EquivalentSpace;
                                        var OldCivilWithoutLegs = _unitOfWork.CivilWithoutLegRepository.GetAllAsQueryable()
                                        .AsNoTracking().FirstOrDefault(x => x.Id == MWBuLoadSdDish.allCivilInst.civilWithoutLegId);

                                        _unitOfWork.CivilWithoutLegRepository.UpdateWithHistory(UserId, OldCivilWithoutLegs, MWBuLoadSdDish.allCivilInst.civilWithoutLeg);
                                        _unitOfWork.SaveChanges();
                                    }
                                }
                                _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, OldOduLoad, MWBuLoadSdDish);
                                _unitOfWork.SaveChanges();
                            }


                            foreach (var MWbuLoadMainDish in MWBULoadMainDish)
                            {
                                var OldOduLoad = _unitOfWork.CivilLoadsRepository.GetAllAsQueryable()
                                    .AsNoTracking().FirstOrDefault(x => x.Id == MWbuLoadMainDish.Id);
                                MWbuLoadMainDish.Dismantle = true;
                                if (MWbuLoadMainDish.ReservedSpace == true)
                                {
                                    if (MWbuLoadMainDish.allCivilInst.civilWithLegsId != null)
                                    {
                                        MWbuLoadMainDish.allCivilInst.civilWithLegs.CurrentLoads -= MWbuLoadMainDish.allLoadInst.mwBU.EquivalentSpace;
                                        var OldCivilWithlegs = _unitOfWork.CivilWithLegsRepository.GetAllAsQueryable()
                                         .AsNoTracking().FirstOrDefault(x => x.Id == MWbuLoadMainDish.allCivilInst.civilWithLegsId);

                                        _unitOfWork.CivilWithLegsRepository.UpdateWithHistory(UserId, OldCivilWithlegs, MWbuLoadMainDish.allCivilInst.civilWithLegs);
                                        _unitOfWork.SaveChanges();
                                    }
                                    else if (DishLoad.allCivilInst.civilWithoutLegId != null)
                                    {
                                        MWbuLoadMainDish.allCivilInst.civilWithoutLeg.CurrentLoads -= MWbuLoadMainDish.allLoadInst.mwBU.EquivalentSpace;
                                        var OldCivilWithoutLegs = _unitOfWork.CivilWithoutLegRepository.GetAllAsQueryable()
                                        .AsNoTracking().FirstOrDefault(x => x.Id == MWbuLoadMainDish.allCivilInst.civilWithoutLegId);

                                        _unitOfWork.CivilWithoutLegRepository.UpdateWithHistory(UserId, OldCivilWithoutLegs, MWbuLoadMainDish.allCivilInst.civilWithoutLeg);
                                        _unitOfWork.SaveChanges();
                                    }
                                }
                                _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, OldOduLoad, MWbuLoadMainDish);
                                _unitOfWork.SaveChanges();
                            }
                            DishLoad.Dismantle = true;
                            var OldDishLoad = _unitOfWork.CivilLoadsRepository.GetAllAsQueryable()
                                  .AsNoTracking().FirstOrDefault(x => x.Id == DishLoad.Id);

                            _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, OldDishLoad, DishLoad);
                            _unitOfWork.SaveChanges();
                            if (DishLoad.ReservedSpace == true)
                            {
                                if (DishLoad.allCivilInst.civilWithLegsId != null)
                                {
                                    DishLoad.allCivilInst.civilWithLegs.CurrentLoads -= DishLoad.allLoadInst.mwDish.EquivalentSpace;
                                    var OldCivilWithlegs = _unitOfWork.CivilWithLegsRepository.GetAllAsQueryable()
                                     .AsNoTracking().FirstOrDefault(x => x.Id == DishLoad.allCivilInst.civilWithLegsId);

                                    _unitOfWork.CivilWithLegsRepository.UpdateWithHistory(UserId, OldCivilWithlegs, DishLoad.allCivilInst.civilWithLegs);
                                    _unitOfWork.SaveChanges();
                                }
                                else if (DishLoad.allCivilInst.civilWithoutLegId != null)
                                {
                                    DishLoad.allCivilInst.civilWithoutLeg.CurrentLoads -= DishLoad.allLoadInst.mwDish.EquivalentSpace;
                                    var OldCivilWithoutLegs = _unitOfWork.CivilWithoutLegRepository.GetAllAsQueryable()
                                    .AsNoTracking().FirstOrDefault(x => x.Id == DishLoad.allCivilInst.civilWithoutLegId);

                                    _unitOfWork.CivilWithoutLegRepository.UpdateWithHistory(UserId, OldCivilWithoutLegs, DishLoad.allCivilInst.civilWithoutLeg);
                                    _unitOfWork.SaveChanges();
                                }
                            }
                        }
                        else
                        {
                            return new Response<bool>(true, false, null, "this item is not found", (int)ApiReturnCode.fail);
                        }
                    }
                    else if (LoadName == Helpers.Constants.TablesNames.TLImwODU.ToString())
                    {
                        var ODULoad = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => x.allLoadInst.mwODUId
                        == LoadId && !x.Dismantle && x.SiteCode.ToLower() == sitecode.ToLower(), x => x.allLoadInst);
                        if (ODULoad != null)
                        {
                            ODULoad.Dismantle = true;

                            var OldODULoad = _unitOfWork.CivilLoadsRepository.GetAllAsQueryable()
                               .AsNoTracking().FirstOrDefault(x => x.Id == ODULoad.Id);

                            _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, OldODULoad, ODULoad);
                            _unitOfWork.SaveChanges();
                            if (ODULoad.ReservedSpace == true)
                            {
                                if (ODULoad.allCivilInst.civilWithLegsId != null)
                                {
                                    ODULoad.allCivilInst.civilWithLegs.CurrentLoads -= ODULoad.allLoadInst.mwODU.EquivalentSpace;
                                    var OldCivilWithlegs = _unitOfWork.CivilWithLegsRepository.GetAllAsQueryable()
                                     .AsNoTracking().FirstOrDefault(x => x.Id == ODULoad.allCivilInst.civilWithLegsId);

                                    _unitOfWork.CivilWithLegsRepository.UpdateWithHistory(UserId, OldCivilWithlegs, ODULoad.allCivilInst.civilWithLegs);
                                    _unitOfWork.SaveChanges();
                                }
                                else if (ODULoad.allCivilInst.civilWithoutLegId != null)
                                {
                                    ODULoad.allCivilInst.civilWithoutLeg.CurrentLoads -= ODULoad.allLoadInst.mwODU.EquivalentSpace;
                                    var OldCivilWithoutLegs = _unitOfWork.CivilWithoutLegRepository.GetAllAsQueryable()
                                    .AsNoTracking().FirstOrDefault(x => x.Id == ODULoad.allCivilInst.civilWithoutLegId);

                                    _unitOfWork.CivilWithoutLegRepository.UpdateWithHistory(UserId, OldCivilWithoutLegs, ODULoad.allCivilInst.civilWithoutLeg);
                                    _unitOfWork.SaveChanges();
                                }
                            }
                        }
                        else
                        {
                            return new Response<bool>(true, false, null, "this item is not found", (int)ApiReturnCode.fail);
                        }
                    }
                    else if (LoadName == Helpers.Constants.TablesNames.TLIradioRRU.ToString())
                    {
                        var RadioRRULoad = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => x.allLoadInst.radioRRUId
                        == LoadId && !x.Dismantle && x.SiteCode.ToLower() == sitecode.ToLower(), x => x.allLoadInst);
                        if (RadioRRULoad != null)
                        {
                            var RadioAntenna = _unitOfWork.CivilLoadsRepository.GetWhereAndInclude(x => x.allLoadInst.radioRRUId
                            == LoadId && !x.Dismantle && x.SiteCode.ToLower() == sitecode.ToLower() && x.allLoadInst.radioAntennaId != null
                            && _unitOfWork.CivilLoadsRepository.GetWhereAndInclude(y => y.allLoadInst.radioAntennaId == x.allLoadInst.radioAntennaId
                            && !y.Dismantle && y.SiteCode.ToLower() == sitecode.ToLower(), y => y.allLoadInst).Any(), x => x.allLoadInst).ToList();
                            RadioRRULoad.Dismantle = true;
                            foreach (var radioAntenna in RadioAntenna)
                            {
                                var OldValue = _unitOfWork.CivilLoadsRepository.GetWhereFirst(x => x.Id == radioAntenna.Id && !x.Dismantle && x.SiteCode.ToLower()
                                == sitecode.ToLower());
                                radioAntenna.allLoadInst.radioAntennaId = null;
                                _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, OldValue, radioAntenna);
                                _unitOfWork.SaveChanges();

                            }
                            var OldORadioRRULoad = _unitOfWork.CivilLoadsRepository.GetAllAsQueryable()
                               .AsNoTracking().FirstOrDefault(x => x.Id == RadioRRULoad.Id);

                            _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, OldORadioRRULoad, RadioRRULoad);
                            _unitOfWork.SaveChanges();
                            if (RadioRRULoad.ReservedSpace == true)
                            {
                                if (RadioRRULoad.allCivilInst.civilWithLegsId != null)
                                {
                                    RadioRRULoad.allCivilInst.civilWithLegs.CurrentLoads -= RadioRRULoad.allLoadInst.radioRRU.EquivalentSpace;
                                    var OldCivilWithlegs = _unitOfWork.CivilWithLegsRepository.GetAllAsQueryable()
                                     .AsNoTracking().FirstOrDefault(x => x.Id == RadioRRULoad.allCivilInst.civilWithLegsId);

                                    _unitOfWork.CivilWithLegsRepository.UpdateWithHistory(UserId, OldCivilWithlegs, RadioRRULoad.allCivilInst.civilWithLegs);
                                    _unitOfWork.SaveChanges();
                                }
                                else if (RadioRRULoad.allCivilInst.civilWithoutLegId != null)
                                {
                                    RadioRRULoad.allCivilInst.civilWithoutLeg.CurrentLoads -= RadioRRULoad.allLoadInst.radioRRU.EquivalentSpace;
                                    var OldCivilWithoutLegs = _unitOfWork.CivilWithoutLegRepository.GetAllAsQueryable()
                                    .AsNoTracking().FirstOrDefault(x => x.Id == RadioRRULoad.allCivilInst.civilWithoutLegId);

                                    _unitOfWork.CivilWithoutLegRepository.UpdateWithHistory(UserId, OldCivilWithoutLegs, RadioRRULoad.allCivilInst.civilWithoutLeg);
                                    _unitOfWork.SaveChanges();
                                }
                            }

                        }
                        else
                        {
                            return new Response<bool>(true, false, null, "this item is not found", (int)ApiReturnCode.fail);
                        }
                    }
                    else if (LoadName == Helpers.Constants.TablesNames.TLIpower.ToString())
                    {
                        var PowerLoad = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => x.allLoadInst.powerId
                        == LoadId && !x.Dismantle && x.SiteCode.ToLower() == sitecode.ToLower(), x => x.allLoadInst);
                        if (PowerLoad != null)
                        {
                            PowerLoad.Dismantle = true;

                            var OldOPowerLoad = _unitOfWork.CivilLoadsRepository.GetAllAsQueryable()
                               .AsNoTracking().FirstOrDefault(x => x.Id == PowerLoad.Id);

                            _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, OldOPowerLoad, PowerLoad);
                            _unitOfWork.SaveChanges();
                            if (PowerLoad.ReservedSpace == true)
                            {
                                if (PowerLoad.allCivilInst.civilWithLegsId != null)
                                {
                                    PowerLoad.allCivilInst.civilWithLegs.CurrentLoads -= PowerLoad.allLoadInst.power.EquivalentSpace;
                                    var OldCivilWithlegs = _unitOfWork.CivilWithLegsRepository.GetAllAsQueryable()
                                     .AsNoTracking().FirstOrDefault(x => x.Id == PowerLoad.allCivilInst.civilWithLegsId);

                                    _unitOfWork.CivilWithLegsRepository.UpdateWithHistory(UserId, OldCivilWithlegs, PowerLoad.allCivilInst.civilWithLegs);
                                    _unitOfWork.SaveChanges();
                                }
                                else if (PowerLoad.allCivilInst.civilWithoutLegId != null)
                                {
                                    PowerLoad.allCivilInst.civilWithoutLeg.CurrentLoads -= PowerLoad.allLoadInst.power.EquivalentSpace;
                                    var OldCivilWithoutLegs = _unitOfWork.CivilWithoutLegRepository.GetAllAsQueryable()
                                    .AsNoTracking().FirstOrDefault(x => x.Id == PowerLoad.allCivilInst.civilWithoutLegId);

                                    _unitOfWork.CivilWithoutLegRepository.UpdateWithHistory(UserId, OldCivilWithoutLegs, PowerLoad.allCivilInst.civilWithoutLeg);
                                    _unitOfWork.SaveChanges();
                                }
                            }
                        }
                        else
                        {
                            return new Response<bool>(true, false, null, "this item is not found", (int)ApiReturnCode.fail);
                        }
                    }
                    else if (LoadName == Helpers.Constants.TablesNames.TLIloadOther.ToString())
                    {
                        var OtherLoad = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => x.allLoadInst.loadOtherId
                        == LoadId && !x.Dismantle && x.SiteCode.ToLower() == sitecode.ToLower(), x => x.allLoadInst);
                        if (OtherLoad != null)
                        {
                            OtherLoad.Dismantle = true;

                            var OldOtherLoad = _unitOfWork.CivilLoadsRepository.GetAllAsQueryable()
                               .AsNoTracking().FirstOrDefault(x => x.Id == OtherLoad.Id);

                            _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, OldOtherLoad, OtherLoad);
                            _unitOfWork.SaveChanges();
                            if (OtherLoad.ReservedSpace == true)
                            {
                                if (OtherLoad.allCivilInst.civilWithLegsId != null)
                                {
                                    OtherLoad.allCivilInst.civilWithLegs.CurrentLoads -= OtherLoad.allLoadInst.loadOther.EquivalentSpace;
                                    var OldCivilWithlegs = _unitOfWork.CivilWithLegsRepository.GetAllAsQueryable()
                                     .AsNoTracking().FirstOrDefault(x => x.Id == OtherLoad.allCivilInst.civilWithLegsId);

                                    _unitOfWork.CivilWithLegsRepository.UpdateWithHistory(UserId, OldCivilWithlegs, OtherLoad.allCivilInst.civilWithLegs);
                                    _unitOfWork.SaveChanges();
                                }
                                else if (OtherLoad.allCivilInst.civilWithoutLegId != null)
                                {
                                    OtherLoad.allCivilInst.civilWithoutLeg.CurrentLoads -= OtherLoad.allLoadInst.loadOther.EquivalentSpace;
                                    var OldCivilWithoutLegs = _unitOfWork.CivilWithoutLegRepository.GetAllAsQueryable()
                                    .AsNoTracking().FirstOrDefault(x => x.Id == OtherLoad.allCivilInst.civilWithoutLegId);

                                    _unitOfWork.CivilWithoutLegRepository.UpdateWithHistory(UserId, OldCivilWithoutLegs, OtherLoad.allCivilInst.civilWithoutLeg);
                                    _unitOfWork.SaveChanges();
                                }
                            }
                        }
                        else
                        {
                            return new Response<bool>(true, false, null, "this item is not found", (int)ApiReturnCode.fail);
                        }
                    }
                    else if (LoadName == Helpers.Constants.TablesNames.TLIradioAntenna.ToString())
                    {
                        var RadioAntennaLoad = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => x.allLoadInst.radioAntennaId
                        == LoadId && !x.Dismantle && x.SiteCode.ToLower() == sitecode.ToLower(), x => x.allLoadInst);
                        if (RadioAntennaLoad != null)
                        {
                            var RadioRRuLoad = _unitOfWork.CivilLoadsRepository.GetWhereAndInclude(x =>
                             x.allLoadInst.radioAntennaId == LoadId &&
                             x.allLoadInst.radioRRUId != null &&
                             !x.Dismantle &&
                             x.SiteCode.ToLower() == sitecode.ToLower() &&
                             _unitOfWork.CivilLoadsRepository.GetWhereAndInclude(y =>
                                 y.allLoadInst.radioRRUId == x.allLoadInst.radioRRUId &&
                                 !y.Dismantle &&
                                 y.SiteCode.ToLower() == sitecode.ToLower()
                              , y => y.allLoadInst).Any(), x => x.allLoadInst
                            ).ToList();

                            foreach (var radioRRuLoad in RadioRRuLoad)
                            {
                                var RRUOldValue = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => x.allLoadInst.radioRRUId
                                == radioRRuLoad.allLoadInst.radioRRUId && !x.Dismantle && x.SiteCode.ToLower() == sitecode.ToLower(), x => x.allLoadInst);
                                radioRRuLoad.Dismantle = true;
                                _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, RRUOldValue, radioRRuLoad);
                                _unitOfWork.SaveChanges();
                                if (radioRRuLoad.ReservedSpace == true)
                                {
                                    if (radioRRuLoad.allCivilInst.civilWithLegsId != null)
                                    {
                                        radioRRuLoad.allCivilInst.civilWithLegs.CurrentLoads -= radioRRuLoad.allLoadInst.radioRRU.EquivalentSpace;
                                        var OldCivilWithlegs = _unitOfWork.CivilWithLegsRepository.GetAllAsQueryable()
                                         .AsNoTracking().FirstOrDefault(x => x.Id == radioRRuLoad.allCivilInst.civilWithLegsId);

                                        _unitOfWork.CivilWithLegsRepository.UpdateWithHistory(UserId, OldCivilWithlegs, radioRRuLoad.allCivilInst.civilWithLegs);
                                        _unitOfWork.SaveChanges();
                                    }
                                    else if (radioRRuLoad.allCivilInst.civilWithoutLegId != null)
                                    {
                                        radioRRuLoad.allCivilInst.civilWithoutLeg.CurrentLoads -= radioRRuLoad.allLoadInst.radioRRU.EquivalentSpace;
                                        var OldCivilWithoutLegs = _unitOfWork.CivilWithoutLegRepository.GetAllAsQueryable()
                                        .AsNoTracking().FirstOrDefault(x => x.Id == radioRRuLoad.allCivilInst.civilWithoutLegId);

                                        _unitOfWork.CivilWithoutLegRepository.UpdateWithHistory(UserId, OldCivilWithoutLegs, radioRRuLoad.allCivilInst.civilWithoutLeg);
                                        _unitOfWork.SaveChanges();
                                    }
                                }
                            }

                            RadioAntennaLoad.Dismantle = true;

                            var OldOtherLoad = _unitOfWork.CivilLoadsRepository.GetAllAsQueryable()
                               .AsNoTracking().FirstOrDefault(x => x.Id == RadioAntennaLoad.Id);

                            _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, OldOtherLoad, RadioAntennaLoad);
                            _unitOfWork.SaveChanges();
                            if (RadioAntennaLoad.ReservedSpace == true)
                            {
                                if (RadioAntennaLoad.allCivilInst.civilWithLegsId != null)
                                {
                                    RadioAntennaLoad.allCivilInst.civilWithLegs.CurrentLoads -= RadioAntennaLoad.allLoadInst.radioAntenna.EquivalentSpace;
                                    var OldCivilWithlegs = _unitOfWork.CivilWithLegsRepository.GetAllAsQueryable()
                                     .AsNoTracking().FirstOrDefault(x => x.Id == RadioAntennaLoad.allCivilInst.civilWithLegsId);

                                    _unitOfWork.CivilWithLegsRepository.UpdateWithHistory(UserId, OldCivilWithlegs, RadioAntennaLoad.allCivilInst.civilWithLegs);
                                    _unitOfWork.SaveChanges();
                                }
                                else if (RadioAntennaLoad.allCivilInst.civilWithoutLegId != null)
                                {
                                    RadioAntennaLoad.allCivilInst.civilWithoutLeg.CurrentLoads -= RadioAntennaLoad.allLoadInst.radioAntenna.EquivalentSpace;
                                    var OldCivilWithoutLegs = _unitOfWork.CivilWithoutLegRepository.GetAllAsQueryable()
                                    .AsNoTracking().FirstOrDefault(x => x.Id == RadioAntennaLoad.allCivilInst.civilWithoutLegId);

                                    _unitOfWork.CivilWithoutLegRepository.UpdateWithHistory(UserId, OldCivilWithoutLegs, RadioAntennaLoad.allCivilInst.civilWithoutLeg);
                                    _unitOfWork.SaveChanges();
                                }
                            }
                        }
                        else
                        {
                            return new Response<bool>(true, false, null, "this item is not found", (int)ApiReturnCode.fail);
                        }
                    }
                    else if (LoadName == Helpers.Constants.TablesNames.TLImwBU.ToString())
                    {
                        var MWBULoad = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => x.allLoadInst.mwBUId
                        == LoadId && !x.Dismantle && x.SiteCode.ToLower() == sitecode.ToLower(), x => x.allLoadInst);
                        if (MWBULoad != null)
                        {
                            var RadioRFULoad = _unitOfWork.CivilLoadsRepository.GetWhereAndInclude(x =>
                             x.allLoadInst.mwRFU.MwPort.MwBUId == LoadId && !x.Dismantle &&
                             x.SiteCode.ToLower() == sitecode.ToLower(), x => x.allLoadInst, x => x.allLoadInst.mwRFU);
                            foreach (var radioRFULoad in RadioRFULoad)
                            {
                                var RFUOldValue = _unitOfWork.CivilLoadsRepository.GetAllAsQueryable().AsNoTracking().Include(
                                x => x.allLoadInst)
                                .FirstOrDefault(x => x.allLoadInst.mwRFUId
                               == radioRFULoad.allLoadInst.mwRFUId && !x.Dismantle && x.SiteCode.ToLower() == sitecode.ToLower());
                                radioRFULoad.Dismantle = true;
                                _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, RFUOldValue, radioRFULoad);
                                _unitOfWork.SaveChanges();
                                if (radioRFULoad.ReservedSpace == true)
                                {
                                    if (radioRFULoad.allCivilInst.civilWithLegsId != null)
                                    {
                                        radioRFULoad.allCivilInst.civilWithLegs.CurrentLoads -= radioRFULoad.allLoadInst.mwRFU.EquivalentSpace;
                                        var OldCivilWithlegs = _unitOfWork.CivilWithLegsRepository.GetAllAsQueryable()
                                         .AsNoTracking().FirstOrDefault(x => x.Id == radioRFULoad.allCivilInst.civilWithLegsId);

                                        _unitOfWork.CivilWithLegsRepository.UpdateWithHistory(UserId, OldCivilWithlegs, radioRFULoad.allCivilInst.civilWithLegs);
                                        _unitOfWork.SaveChanges();
                                    }
                                    else if (radioRFULoad.allCivilInst.civilWithoutLegId != null)
                                    {
                                        radioRFULoad.allCivilInst.civilWithoutLeg.CurrentLoads -= radioRFULoad.allLoadInst.mwRFU.EquivalentSpace;
                                        var OldCivilWithoutLegs = _unitOfWork.CivilWithoutLegRepository.GetAllAsQueryable()
                                        .AsNoTracking().FirstOrDefault(x => x.Id == radioRFULoad.allCivilInst.civilWithoutLegId);

                                        _unitOfWork.CivilWithoutLegRepository.UpdateWithHistory(UserId, OldCivilWithoutLegs, radioRFULoad.allCivilInst.civilWithoutLeg);
                                        _unitOfWork.SaveChanges();
                                    }
                                }

                            }

                            var CascudedMWBU = _unitOfWork.CivilLoadsRepository.GetWhereAndInclude(x => x.allLoadInst.mwBU.PortCascadeId == LoadId
                            && !x.Dismantle && x.SiteCode.ToLower() == sitecode.ToLower(), x => x.allLoadInst, x => x.allLoadInst.mwBU).ToList();
                            foreach (var CascudedmWBU in CascudedMWBU)
                            {
                                var OldValue = _unitOfWork.CivilLoadsRepository.GetAllAsQueryable().AsNoTracking()
                                .Include(x => x.allLoadInst).ThenInclude(x => x.mwBU).FirstOrDefault(x => x.Id
                                 == CascudedmWBU.Id && !x.Dismantle && x.SiteCode.ToLower() == sitecode.ToLower());
                                CascudedmWBU.allLoadInst.mwBU.PortCascadeId = null;
                                _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, OldValue, CascudedmWBU);
                                _unitOfWork.SaveChanges();
                            }
                            var BaseMWBU = _unitOfWork.CivilLoadsRepository.GetWhereAndInclude(x => x.allLoadInst.mwBU.BaseBUId == LoadId
                            && !x.Dismantle && x.SiteCode.ToLower() == sitecode.ToLower(), x => x.allLoadInst, x => x.allLoadInst.mwBU).ToList();
                            foreach (var baseMWBU in BaseMWBU)
                            {
                                var OldValue = _unitOfWork.CivilLoadsRepository.GetAllAsQueryable().AsNoTracking()
                                    .Include(x => x.allLoadInst).ThenInclude(x => x.mwBU).FirstOrDefault(x => x.Id
                                 == baseMWBU.Id && !x.Dismantle && x.SiteCode.ToLower() == sitecode.ToLower());
                                baseMWBU.allLoadInst.mwBU.BaseBUId = null;
                                _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, OldValue, baseMWBU);
                                _unitOfWork.SaveChanges();
                            }
                            MWBULoad.Dismantle = true;
                            var OldOtherLoad = _unitOfWork.CivilLoadsRepository.GetAllAsQueryable()
                               .AsNoTracking().FirstOrDefault(x => x.Id == MWBULoad.Id);
                            _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, OldOtherLoad, MWBULoad);
                            _unitOfWork.SaveChanges();

                            if (MWBULoad.ReservedSpace == true)
                            {
                                if (MWBULoad.allCivilInst.civilWithLegsId != null)
                                {
                                    MWBULoad.allCivilInst.civilWithLegs.CurrentLoads -= MWBULoad.allLoadInst.mwBU.EquivalentSpace;
                                    var OldCivilWithlegs = _unitOfWork.CivilWithLegsRepository.GetAllAsQueryable()
                                     .AsNoTracking().FirstOrDefault(x => x.Id == MWBULoad.allCivilInst.civilWithLegsId);

                                    _unitOfWork.CivilWithLegsRepository.UpdateWithHistory(UserId, OldCivilWithlegs, MWBULoad.allCivilInst.civilWithLegs);
                                    _unitOfWork.SaveChanges();
                                }
                                else if (MWBULoad.allCivilInst.civilWithoutLegId != null)
                                {
                                    MWBULoad.allCivilInst.civilWithoutLeg.CurrentLoads -= MWBULoad.allLoadInst.mwBU.EquivalentSpace;
                                    var OldCivilWithoutLegs = _unitOfWork.CivilWithoutLegRepository.GetAllAsQueryable()
                                    .AsNoTracking().FirstOrDefault(x => x.Id == MWBULoad.allCivilInst.civilWithoutLegId);

                                    _unitOfWork.CivilWithoutLegRepository.UpdateWithHistory(UserId, OldCivilWithoutLegs, MWBULoad.allCivilInst.civilWithoutLeg);
                                    _unitOfWork.SaveChanges();
                                }
                            }
                        }
                        else
                        {
                            return new Response<bool>(true, false, null, "this item is not found", (int)ApiReturnCode.fail);
                        }
                    }
                    else if (LoadName == Helpers.Constants.TablesNames.TLImwRFU.ToString())
                    {
                        var MWRFULoad = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => x.allLoadInst.mwRFUId
                        == LoadId && !x.Dismantle && x.SiteCode.ToLower() == sitecode.ToLower(), x => x.allLoadInst);
                        if (MWRFULoad != null)
                        {
                            MWRFULoad.Dismantle = true;

                            var OldMWRFULoad = _unitOfWork.CivilLoadsRepository.GetAllAsQueryable()
                               .AsNoTracking().FirstOrDefault(x => x.Id == MWRFULoad.Id);

                            _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, OldMWRFULoad, MWRFULoad);
                            _unitOfWork.SaveChanges();
                            if (MWRFULoad.ReservedSpace == true)
                            {
                                if (MWRFULoad.allCivilInst.civilWithLegsId != null)
                                {
                                    MWRFULoad.allCivilInst.civilWithLegs.CurrentLoads -= MWRFULoad.allLoadInst.mwRFU.EquivalentSpace;
                                    var OldCivilWithlegs = _unitOfWork.CivilWithLegsRepository.GetAllAsQueryable()
                                     .AsNoTracking().FirstOrDefault(x => x.Id == MWRFULoad.allCivilInst.civilWithLegsId);

                                    _unitOfWork.CivilWithLegsRepository.UpdateWithHistory(UserId, OldCivilWithlegs, MWRFULoad.allCivilInst.civilWithLegs);
                                    _unitOfWork.SaveChanges();
                                }
                                else if (MWRFULoad.allCivilInst.civilWithoutLegId != null)
                                {
                                    MWRFULoad.allCivilInst.civilWithoutLeg.CurrentLoads -= MWRFULoad.allLoadInst.mwRFU.EquivalentSpace;
                                    var OldCivilWithoutLegs = _unitOfWork.CivilWithoutLegRepository.GetAllAsQueryable()
                                    .AsNoTracking().FirstOrDefault(x => x.Id == MWRFULoad.allCivilInst.civilWithoutLegId);

                                    _unitOfWork.CivilWithoutLegRepository.UpdateWithHistory(UserId, OldCivilWithoutLegs, MWRFULoad.allCivilInst.civilWithoutLeg);
                                    _unitOfWork.SaveChanges();
                                }
                            }
                        }
                        else
                        {
                            return new Response<bool>(true, false, null, "this item is not found", (int)ApiReturnCode.fail);
                        }
                    }
                    else if (LoadName == Helpers.Constants.TablesNames.TLImwOther.ToString())
                    {
                        var MWOtherLoad = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => x.allLoadInst.mwOtherId
                        == LoadId && !x.Dismantle && x.SiteCode.ToLower() == sitecode.ToLower(), x => x.allLoadInst);
                        if (MWOtherLoad != null)
                        {
                            MWOtherLoad.Dismantle = true;

                            var OldMWOtherLoad = _unitOfWork.CivilLoadsRepository.GetAllAsQueryable()
                               .AsNoTracking().FirstOrDefault(x => x.Id == MWOtherLoad.Id);

                            _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, OldMWOtherLoad, MWOtherLoad);
                            _unitOfWork.SaveChanges();
                            if (MWOtherLoad.ReservedSpace == true)
                            {
                                if (MWOtherLoad.allCivilInst.civilWithLegsId != null)
                                {
                                    MWOtherLoad.allCivilInst.civilWithLegs.CurrentLoads -= MWOtherLoad.allLoadInst.mwOther.EquivalentSpace;
                                    var OldCivilWithlegs = _unitOfWork.CivilWithLegsRepository.GetAllAsQueryable()
                                     .AsNoTracking().FirstOrDefault(x => x.Id == MWOtherLoad.allCivilInst.civilWithLegsId);

                                    _unitOfWork.CivilWithLegsRepository.UpdateWithHistory(UserId, OldCivilWithlegs, MWOtherLoad.allCivilInst.civilWithLegs);
                                    _unitOfWork.SaveChanges();
                                }
                                else if (MWOtherLoad.allCivilInst.civilWithoutLegId != null)
                                {
                                    MWOtherLoad.allCivilInst.civilWithoutLeg.CurrentLoads -= MWOtherLoad.allLoadInst.mwOther.EquivalentSpace;
                                    var OldCivilWithoutLegs = _unitOfWork.CivilWithoutLegRepository.GetAllAsQueryable()
                                    .AsNoTracking().FirstOrDefault(x => x.Id == MWOtherLoad.allCivilInst.civilWithoutLegId);

                                    _unitOfWork.CivilWithoutLegRepository.UpdateWithHistory(UserId, OldCivilWithoutLegs, MWOtherLoad.allCivilInst.civilWithoutLeg);
                                    _unitOfWork.SaveChanges();
                                }
                            }
                        }
                        else
                        {
                            return new Response<bool>(true, false, null, "this item is not found", (int)ApiReturnCode.fail);
                        }
                    }
                    else if (LoadName == Helpers.Constants.TablesNames.TLIradioOther.ToString())
                    {
                        var RdioOtherLoad = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => x.allLoadInst.radioOtherId
                        == LoadId && !x.Dismantle && x.SiteCode.ToLower() == sitecode.ToLower(), x => x.allLoadInst);
                        if (RdioOtherLoad != null)
                        {
                            RdioOtherLoad.Dismantle = true;

                            var OldRdioOtherLoad = _unitOfWork.CivilLoadsRepository.GetAllAsQueryable()
                               .AsNoTracking().FirstOrDefault(x => x.Id == RdioOtherLoad.Id);

                            _unitOfWork.CivilLoadsRepository.UpdateWithHistory(UserId, OldRdioOtherLoad, RdioOtherLoad);
                            _unitOfWork.SaveChanges();
                            if (RdioOtherLoad.ReservedSpace == true)
                            {
                                if (RdioOtherLoad.allCivilInst.civilWithLegsId != null)
                                {
                                    RdioOtherLoad.allCivilInst.civilWithLegs.CurrentLoads -= RdioOtherLoad.allLoadInst.radioOther.EquivalentSpace;
                                    var OldCivilWithlegs = _unitOfWork.CivilWithLegsRepository.GetAllAsQueryable()
                                     .AsNoTracking().FirstOrDefault(x => x.Id == RdioOtherLoad.allCivilInst.civilWithLegsId);

                                    _unitOfWork.CivilWithLegsRepository.UpdateWithHistory(UserId, OldCivilWithlegs, RdioOtherLoad.allCivilInst.civilWithLegs);
                                    _unitOfWork.SaveChanges();
                                }
                                else if (RdioOtherLoad.allCivilInst.civilWithoutLegId != null)
                                {
                                    RdioOtherLoad.allCivilInst.civilWithoutLeg.CurrentLoads -= RdioOtherLoad.allLoadInst.radioOther.EquivalentSpace;
                                    var OldCivilWithoutLegs = _unitOfWork.CivilWithoutLegRepository.GetAllAsQueryable()
                                    .AsNoTracking().FirstOrDefault(x => x.Id == RdioOtherLoad.allCivilInst.civilWithoutLegId);

                                    _unitOfWork.CivilWithoutLegRepository.UpdateWithHistory(UserId, OldCivilWithoutLegs, RdioOtherLoad.allCivilInst.civilWithoutLeg);
                                    _unitOfWork.SaveChanges();
                                }
                            }
                        }
                        else
                        {
                            return new Response<bool>(true, false, null, "this item is not found", (int)ApiReturnCode.fail);
                        }
                    }
                    if (TaskId != null)
                    {
                        var Submit = _unitOfWork.SiteRepository.SubmitTaskByTLI(TaskId);
                        var result = Submit.Result;
                        if (result.result == true && result.errorMessage == null)
                        {
                            _unitOfWork.SaveChanges();
                            transactionScope.Complete();
                        }
                        else
                        {
                            transactionScope.Dispose();
                            return new Response<bool>(false, false, null, result.errorMessage.ToString(), (int)Helpers.Constants.ApiReturnCode.fail);
                        }
                    }
                    else
                    {
                        _unitOfWork.SaveChanges();
                        transactionScope.Complete();
                    }
                    if (LoadName == Helpers.Constants.TablesNames.TLIradioAntenna.ToString())
                    {
                        Task.Run(() => _unitOfWork.CivilWithLegsRepository.RefreshView(connectionString, "MV_RADIO_ANTENNA_VIEW"));
                    }
                    //else if (addDependencyViewModel.TableName == "TLIradioOther")
                    //{
                    //    Task.Run(() => _unitOfWork.CivilWithLegsRepository.RefreshView(connectionString, "MV_CIVIL_WITHLEGS_VIEW"));
                    //}
                    else if (LoadName == Helpers.Constants.TablesNames.TLIradioRRU.ToString())
                    {
                        Task.Run(() => _unitOfWork.CivilWithLegsRepository.RefreshView(connectionString, "MV_RADIO_RRU_VIEW"));
                    }

                    //else if (addDependencyViewModel.TableName == "TLImwBU")
                    //{
                    //    Task.Run(() => _unitOfWork.CivilWithLegsRepository.RefreshView(connectionString, "MV_CIVIL_WITHLEGS_VIEW"));
                    //}
                    //else if (addDependencyViewModel.TableName == "TLImwRFU")
                    //{
                    //    Task.Run(() => _unitOfWork.CivilWithLegsRepository.RefreshView(connectionString, "MV_CIVIL_WITHLEGS_VIEW"));
                    //}
                    else if (LoadName == Helpers.Constants.TablesNames.TLImwDish.ToString())
                    {
                        Task.Run(() => _unitOfWork.CivilWithLegsRepository.RefreshView(connectionString, "MV_MWDISH_VIEW"));
                    }
                    else if (LoadName == Helpers.Constants.TablesNames.TLImwODU.ToString())
                    {
                        Task.Run(() => _unitOfWork.CivilWithLegsRepository.RefreshView(connectionString, "MV_MWODU_VIEW"));
                    }
                    //else if (addDependencyViewModel.TableName == "TLImwOther")
                    //{
                    //    Task.Run(() => _unitOfWork.CivilWithLegsRepository.RefreshView(connectionString, "MV_CIVIL_WITHLEGS_VIEW"));
                    //}

                    //else if (addDependencyViewModel.TableName == "TLIpower")
                    //{
                    //    Task.Run(() => _unitOfWork.CivilWithLegsRepository.RefreshView(connectionString, "MV_CIVIL_WITHLEGS_VIEW"));
                    //}

                    //else if (addDependencyViewModel.TableName == "TLIloadOther")
                    //{
                    //    Task.Run(() => _unitOfWork.CivilWithLegsRepository.RefreshView(connectionString, "MV_CIVIL_WITHLEGS_VIEW"));
                    //}                   

                    return new Response<bool>(true, true, null, null, (int)ApiReturnCode.success);
                }
                catch (Exception err)
                {

                    return new Response<bool>(true, false, null, err.Message, (int)ApiReturnCode.fail);
                }
            }
        }
        //Function take 3 parameters filters, WithFilterData, parameters
        //Function get all records depened on filters and parameters
        //Function check WithFilterData if true get RelatedTables
        public Response<ReturnWithFilters<MW_BUViewModel>> getMW_BU(List<FilterObjectList> filters, bool WithFilterData, ParameterPagination parameters)
        {
            try
            {
                int count = 0;
                ReturnWithFilters<MW_BUViewModel> MW_BU = new ReturnWithFilters<MW_BUViewModel>();
                MW_BU.Model = _mapper.Map<List<MW_BUViewModel>>(_unitOfWork.MW_BURepository.GetAllIncludeMultiple(parameters, filters, out count, x => x.MwBULibrary, x => x.Owner, x => x.MainDish).ToList());
                if (WithFilterData == true)
                {
                    // MW_BU.filters = _unitOfWork.MW_BURepository.GetRelatedTables();
                }
                else
                {
                    MW_BU.filters = null;
                }
                return new Response<ReturnWithFilters<MW_BUViewModel>>(true, MW_BU, null, null, (int)ApiReturnCode.success, count);
            }
            catch (Exception err)
            {

                return new Response<ReturnWithFilters<MW_BUViewModel>>(true, null, null, err.Message, (int)ApiReturnCode.fail);
            }
        }
        //Function take 3 parameters filters, WithFilterData, parameters
        //Function get all records depened on filters and parameters
        //Function check WithFilterData if true get RelatedTables 
        public Response<ReturnWithFilters<MW_DishViewModel>> getMW_Dish(List<FilterObjectList> filters, bool WithFilterData, ParameterPagination parameters)
        {
            try
            {
                int count = 0;
                ReturnWithFilters<MW_DishViewModel> MW_Dish = new ReturnWithFilters<MW_DishViewModel>();
                MW_Dish.Model = _mapper.Map<List<MW_DishViewModel>>(_unitOfWork.MW_DishRepository.GetAllIncludeMultiple(parameters, filters, out count, x => x.RepeaterType, x => x.PolarityOnLocation, x => x.ItemConnectTo, x => x.MwDishLibrary, x => x.InstallationPlace).ToList());
                if (WithFilterData == true)
                {
                    MW_Dish.filters = _unitOfWork.MW_DishRepository.GetRelatedTables();
                }
                else
                {
                    MW_Dish.filters = null;
                }
                return new Response<ReturnWithFilters<MW_DishViewModel>>(true, MW_Dish, null, null, (int)ApiReturnCode.success, count);
            }
            catch (Exception err)
            {

                return new Response<ReturnWithFilters<MW_DishViewModel>>(true, null, null, err.Message, (int)ApiReturnCode.fail);
            }
        }
        //Function take 3 parameters filters, WithFilterData, parameters
        //Function get all records depened on filters and parameters
        //Function check WithFilterData if true get RelatedTables 
        public Response<ReturnWithFilters<MW_RFUViewModel>> getMW_RFU(List<FilterObjectList> filters, bool WithFilterData, ParameterPagination parameters)
        {
            try
            {
                int count = 0;
                ReturnWithFilters<MW_RFUViewModel> MW_RFU = new ReturnWithFilters<MW_RFUViewModel>();
                MW_RFU.Model = _mapper.Map<List<MW_RFUViewModel>>(_unitOfWork.MW_RFURepository.GetAllIncludeMultiple(parameters, filters, out count, x => x.MwRFULibrary, x => x.MwPort).ToList());
                if (WithFilterData == true)
                {
                    MW_RFU.filters = _unitOfWork.MW_RFURepository.GetRelatedTables();
                }
                else
                {
                    MW_RFU.filters = null;
                }
                return new Response<ReturnWithFilters<MW_RFUViewModel>>(true, MW_RFU, null, null, (int)ApiReturnCode.success, count);
            }
            catch (Exception err)
            {

                return new Response<ReturnWithFilters<MW_RFUViewModel>>(true, null, null, err.Message, (int)ApiReturnCode.fail);
            }
        }
        //Function take 2 parameters MWInsId, TableName
        //First get table name Entity by TableName
        //Second specify the table i deal with
        //Get the record by Id
        //Get ativated attributes with values 
        //Get dynamic attributes
        //get related tables
        public Response<GetForAddLoadObject> GetById(int MWInsId, string TableName)
        {
            try
            {
                TLItablesNames TableNameEntity = _unitOfWork.TablesNamesRepository.GetWhereFirst(c => c.TableName == TableName);
                GetForAddLoadObject objectInst = new GetForAddLoadObject();
                TLIallLoadInst AllLoadInst = new TLIallLoadInst();
                TLIcivilLoads CivilLoads = new TLIcivilLoads();
                List<BaseInstAttViews> Civilload = new List<BaseInstAttViews>();
                List<BaseInstAttViews> Config = new List<BaseInstAttViews>();
                List<BaseAttView> LoadInstAttributes = new List<BaseAttView>();
                TLIallCivilInst AllCivilInst = new TLIallCivilInst();
                List<BaseInstAttView> MWInstallationInfo = new List<BaseInstAttView>();

                //if (LoadSubType.TLImwBU.ToString() == TableName)
                //{
                //    TLImwBU mw_BU = _unitOfWork.MW_BURepository
                //        .GetIncludeWhereFirst(x => x.Id == MWInsId, x => x.baseBU,
                //            x => x.Owner, x => x.InstallationPlace, x => x.MwBULibrary,
                //            x => x.MainDish);

                //    MW_BULibraryViewModel MwBuLibrary = _mapper.Map<MW_BULibraryViewModel>(_unitOfWork.MW_BULibraryRepository
                //       .GetIncludeWhereFirst(x => x.Id == mw_BU.MwBULibraryId, x => x.diversityType));

                //    List<BaseAttView> LibraryAttributes = _unitOfWork.AttributeActivatedRepository
                //       .GetAttributeActivated(TablesNames.TLImwBULibrary.ToString(), MwBuLibrary, null).ToList();

                //    foreach (BaseAttView LibraryAttribute in LibraryAttributes)
                //    {
                //        if (LibraryAttribute.DataType.ToLower() == "list")
                //        {
                //            LibraryAttribute.Value = MwBuLibrary.GetType().GetProperties()
                //                .FirstOrDefault(x => x.Name.ToLower() == LibraryAttribute.Label.ToLower()).GetValue(MwBuLibrary);
                //        }
                //    }
                //    List<BaseAttView> LogisticalAttributes = _mapper.Map<List<BaseAttView>>(_unitOfWork.LogistcalRepository
                //        .GetLogistical(TablePartName.MW.ToString(), TablesNames.TLImwBULibrary.ToString(), MwBuLibrary.Id).ToList());

                //    LibraryAttributes.AddRange(LogisticalAttributes);

                //    objectInst.LibraryActivatedAttributes = LibraryAttributes;

                //    List<BaseInstAttView> ListAttributesActivated = _unitOfWork.AttributeActivatedRepository
                //        .GetInstAttributeActivated(LoadSubType.TLImwBU.ToString(), mw_BU,
                //            "InstallationPlaceId").ToList();

                //    BaseInstAttView NameAttribute = ListAttributesActivated.FirstOrDefault(x => x.Key.ToLower() == "Name".ToLower());
                //    if (NameAttribute != null)
                //    {
                //        BaseInstAttView Swap = ListAttributesActivated[0];
                //        ListAttributesActivated[ListAttributesActivated.IndexOf(NameAttribute)] = Swap;
                //        ListAttributesActivated[0] = NameAttribute;
                //    }
                //    TLIcivilLoads CivilLoad = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => !x.Dismantle && (x.allLoadInstId != null ?
                //        x.allLoadInst.mwBUId == MWInsId : false), x => x.allLoadInst);
                //    foreach (BaseInstAttView FKitem in ListAttributesActivated)
                //    {
                //        if (FKitem.Desc.ToLower() == "tlibasebu")
                //        {
                //            if (mw_BU.baseBU == null)
                //            {
                //                FKitem.Value = "NA";
                //            }
                //            else
                //            {
                //                FKitem.Value = mw_BU.baseBU.Name;
                //            }
                //        }
                //        else if (FKitem.Desc.ToLower() == "tliowner")
                //        {
                //            if (mw_BU.Owner == null)
                //            {
                //                FKitem.Value = "NA";
                //            }
                //            else
                //            {
                //                FKitem.Value = mw_BU.Owner.OwnerName;
                //            }
                //        }
                //        else if (FKitem.Desc.ToLower() == "tlimwdish")
                //        {
                //            if (mw_BU.MainDish == null)
                //                FKitem.Value = "NA";

                //            else
                //            {
                //                FKitem.Value = mw_BU.MainDish.DishName;
                //            }

                //        }
                //        else if (FKitem.Desc.ToLower() == "tlimwbulibrary")
                //        {
                //            if (mw_BU.MwBULibrary == null)
                //            {
                //                FKitem.Value = "NA";
                //            }
                //            else
                //            {
                //                FKitem.Value = mw_BU.MwBULibrary.Model;
                //            }
                //        }

                //        else if (FKitem.Desc.ToLower() == "tlimwport")
                //        {
                //            if (mw_BU.PortCascadeId == 0)
                //                FKitem.Value = "NA";

                //            else
                //            {
                //                var PortCascadeId = _unitOfWork.MW_PortRepository.GetWhereFirst(x => x.Id == mw_BU.PortCascadeId);

                //                if (PortCascadeId != null)
                //                {
                //                    FKitem.Value = PortCascadeId.Port_Name;
                //                    FKitem.Id = mw_BU.PortCascadeId;
                //                }
                //                else
                //                    FKitem.Value = "NA";
                //            }
                //        }
                //    }
                //    objectInst.AttributesActivated = ListAttributesActivated;

                //    objectInst.DynamicAtts = _unitOfWork.DynamicAttInstValueRepository
                //        .GetDynamicInstAtts(TableNameEntity.Id, MWInsId, null);

                //    AllLoadInst = _unitOfWork.AllLoadInstRepository.GetWhereFirst(x => x.mwBUId == MWInsId);

                //    CivilLoads = _unitOfWork.CivilLoadsRepository
                //        .GetIncludeWhereFirst(x => x.allLoadInstId == AllLoadInst.Id, x => x.sideArm, x => x.site, x => x.leg, x => x.allCivilInst,
                //            x => x.allLoadInst.loadOther, x => x.allLoadInst.mwBU, x => x.allLoadInst.mwDish, x => x.allLoadInst.mwODU, x => x.allLoadInst.mwOther,
                //            x => x.allLoadInst.mwRFU, x => x.allLoadInst.power, x => x.allLoadInst.radioAntenna, x => x.allLoadInst.radioOther, x => x.allLoadInst.radioRRU,
                //            x => x.allCivilInst.civilWithLegs, x => x.allCivilInst.civilWithoutLeg, x => x.allCivilInst.civilNonSteel, x => x.civilSteelSupportCategory);

                //    LoadInstAttributes = _unitOfWork.AttributeActivatedRepository
                //        .GetAttributeActivated(TablesNames.TLIcivilLoads.ToString(), CivilLoads, null, "allLoadInstId",
                //            "Dismantle", "SiteCode", "civilSteelSupportCategoryId", "legId", "Leg2Id",
                //                "sideArmId", "allCivilInstId").ToList();

                //    List<KeyValuePair<string, List<DropDownListFilters>>> CivilLoadsRelatedTables = _unitOfWork.CivilLoadsRepository
                //        .GetRelatedTables(CivilLoads.SiteCode);

                //    if (CivilLoads != null)
                //    {
                //        TLImwPort? CascadedBu_ForRelatedTables = _unitOfWork.MW_PortRepository
                //            .GetIncludeWhereFirst(x => x.Id == mw_BU.PortCascadeId, x => x.MwBU);

                //        List<KeyValuePair<string, List<DropDownListFilters>>> mwbuRelatedTables = new List<KeyValuePair<string, List<DropDownListFilters>>>();
                //        if (CascadedBu_ForRelatedTables != null)
                //            mwbuRelatedTables = _unitOfWork.MW_BURepository
                //                .GetRelatedTablesForEdit(CivilLoads.SiteCode, CascadedBu_ForRelatedTables.MwBUId);

                //        else
                //            mwbuRelatedTables = _unitOfWork.MW_BURepository
                //                .GetRelatedTablesForEdit(CivilLoads.SiteCode, null);

                //        mwbuRelatedTables.AddRange(CivilLoadsRelatedTables);

                //        if (CivilLoads.allCivilInst.civilWithLegsId != null)
                //        {
                //            List<TLIleg> LegsForCivilWithLegLibrary = _unitOfWork.LegRepository
                //                .GetWhere(x => x.CivilWithLegInstId == CivilLoads.allCivilInst.civilWithLegsId).ToList();

                //            List<DropDownListFilters> LegIds = _mapper.Map<List<DropDownListFilters>>(LegsForCivilWithLegLibrary);

                //            mwbuRelatedTables.Add(new KeyValuePair<string, List<DropDownListFilters>>("Leg1Id", LegIds));

                //            List<TLIleg> Legs2ForCivilWithLegLibrary = LegsForCivilWithLegLibrary.Except(LegsForCivilWithLegLibrary
                //                .Where(x => x.Id == CivilLoads.legId)).ToList();

                //            List<DropDownListFilters> Leg2Ids = _mapper.Map<List<DropDownListFilters>>(Legs2ForCivilWithLegLibrary);

                //            mwbuRelatedTables.Add(new KeyValuePair<string, List<DropDownListFilters>>("Leg2Id", Leg2Ids));
                //        }

                //        objectInst.RelatedTables = mwbuRelatedTables;

                //        AllCivilInst = _unitOfWork.CivilLoadsRepository
                //            .GetIncludeWhereFirst(x => (x.allLoadInstId != null ? (x.allLoadInst.mwBUId != null ?
                //                x.allLoadInst.mwBUId.Value == MWInsId : false) : false) && !x.Dismantle, x => x.allCivilInst, x => x.allLoadInst).allCivilInst;

                //        if (AllCivilInst.civilWithLegsId != null)
                //        {
                //            MWInstallationInfo.Add(new BaseInstAttView
                //            {
                //                AutoFill = false,
                //                DataType = "List",
                //                DataTypeId = null,
                //                Desc = "Select civil support type",
                //                enable = true,
                //                Id = -1,
                //                Key = "Select civil support type",
                //                Label = "Select civil support type",
                //                Manage = false,
                //                Required = false,
                //                Value = "Civil with legs"
                //            });
                //            MWInstallationInfo.Add(new BaseInstAttView
                //            {
                //                AutoFill = false,
                //                DataType = "List",
                //                DataTypeId = null,
                //                Desc = "Select civil with legs support items",
                //                enable = true,
                //                Id = AllCivilInst.Id,
                //                Key = "Select civil with legs support items",
                //                Label = "Select civil with legs support items",
                //                Manage = false,
                //                Required = false,
                //                Value = _unitOfWork.CivilWithLegsRepository.GetByID(AllCivilInst.civilWithLegsId.Value).Name
                //            });
                //            if (CivilLoads.sideArmId != null)
                //            {
                //                MWInstallationInfo.Add(new BaseInstAttView
                //                {
                //                    AutoFill = false,
                //                    DataType = "List",
                //                    DataTypeId = null,
                //                    Desc = "Select the installation place type",
                //                    enable = true,
                //                    Id = -1,
                //                    Key = "Select the installation place type",
                //                    Label = "Select the installation place type",
                //                    Manage = false,
                //                    Required = false,
                //                    Value = "SideArm"
                //                });
                //                MWInstallationInfo.Add(new BaseInstAttView
                //                {
                //                    AutoFill = false,
                //                    DataType = "List",
                //                    DataTypeId = null,
                //                    Desc = "Select the sidearm",
                //                    enable = true,
                //                    Id = CivilLoads.sideArmId.Value,
                //                    Key = "Select the sidearm",
                //                    Label = "Select the sidearm",
                //                    Manage = false,
                //                    Required = false,
                //                    Value = CivilLoads.sideArm.Name
                //                });
                //            }
                //            else if (CivilLoads.legId != null)
                //            {
                //                MWInstallationInfo.Add(new BaseInstAttView
                //                {
                //                    AutoFill = false,
                //                    DataType = "List",
                //                    DataTypeId = null,
                //                    Desc = "Select the installation place type",
                //                    enable = true,
                //                    Id = -1,
                //                    Key = "Select the installation place type",
                //                    Label = "Select the installation place type",
                //                    Manage = false,
                //                    Required = false,
                //                    Value = "Leg"
                //                });
                //                MWInstallationInfo.Add(new BaseInstAttView
                //                {
                //                    AutoFill = false,
                //                    DataType = "List",
                //                    DataTypeId = null,
                //                    Desc = "Select the leg",
                //                    enable = true,
                //                    Id = CivilLoads.legId.Value,
                //                    Key = "Select the leg",
                //                    Label = "Select the leg",
                //                    Manage = false,
                //                    Required = false,
                //                    Value = CivilLoads.leg.CiviLegName
                //                });
                //            }
                //            else
                //            {
                //                MWInstallationInfo.Add(new BaseInstAttView
                //                {
                //                    AutoFill = false,
                //                    DataType = "List",
                //                    DataTypeId = null,
                //                    Desc = "Select the installation place type",
                //                    enable = true,
                //                    Id = -1,
                //                    Key = "Select the installation place type",
                //                    Label = "Select the installation place type",
                //                    Manage = false,
                //                    Required = false,
                //                    Value = "Direct"
                //                });
                //            }
                //            if (mw_BU.PortCascadeId != 0)
                //            {
                //                MWInstallationInfo.Add(new BaseInstAttView
                //                {
                //                    AutoFill = false,
                //                    DataType = "List",
                //                    DataTypeId = null,
                //                    Desc = "Select BU installtion type",
                //                    enable = true,
                //                    Id = -1,
                //                    Key = "Select BU installtion type",
                //                    Label = "Select BU installtion type",
                //                    Manage = false,
                //                    Required = false,
                //                    Value = "Cascaded"
                //                });

                //                TLImwPort CascadedBu = _unitOfWork.MW_PortRepository.GetIncludeWhereFirst(x => x.Id == mw_BU.PortCascadeId, x => x.MwBU);

                //                MWInstallationInfo.Add(new BaseInstAttView
                //                {
                //                    AutoFill = false,
                //                    DataType = "List",
                //                    DataTypeId = null,
                //                    Desc = "Select the cascaded BU",
                //                    enable = true,
                //                    Id = CascadedBu.MwBUId,
                //                    Key = "Select the cascaded BU",
                //                    Label = "Select the cascaded BU",
                //                    Manage = false,
                //                    Required = false,
                //                    Value = CascadedBu.MwBU.Name
                //                });
                //            }
                //            else
                //            {
                //                MWInstallationInfo.Add(new BaseInstAttView
                //                {
                //                    AutoFill = false,
                //                    DataType = "List",
                //                    DataTypeId = null,
                //                    Desc = "Select BU installtion type",
                //                    enable = true,
                //                    Id = -1,
                //                    Key = "Select BU installtion type",
                //                    Label = "Select BU installtion type",
                //                    Manage = false,
                //                    Required = false,
                //                    Value = "Normal"
                //                });
                //            }
                //        }
                //        else if (AllCivilInst.civilWithoutLegId != null)
                //        {
                //            MWInstallationInfo.Add(new BaseInstAttView
                //            {
                //                AutoFill = false,
                //                DataType = "List",
                //                DataTypeId = null,
                //                Desc = "Select civil support type",
                //                enable = true,
                //                Id = -1,
                //                Key = "Select civil support type",
                //                Label = "Select civil support type",
                //                Manage = false,
                //                Required = false,
                //                Value = "Civil without legs"
                //            });
                //            MWInstallationInfo.Add(new BaseInstAttView
                //            {
                //                AutoFill = false,
                //                DataType = "List",
                //                DataTypeId = null,
                //                Desc = "Select civil without legs support items",
                //                enable = true,
                //                Id = AllCivilInst.Id,
                //                Key = "Select civil without legs support items",
                //                Label = "Select civil without legs support items",
                //                Manage = false,
                //                Required = false,
                //                Value = _unitOfWork.CivilWithoutLegRepository.GetByID(AllCivilInst.civilWithoutLegId.Value).Name
                //            });
                //            if (CivilLoads.sideArmId != null)
                //            {
                //                MWInstallationInfo.Add(new BaseInstAttView
                //                {
                //                    AutoFill = false,
                //                    DataType = "List",
                //                    DataTypeId = null,
                //                    Desc = "Select the installation place type",
                //                    enable = true,
                //                    Id = -1,
                //                    Key = "Select the installation place type",
                //                    Label = "Select the installation place type",
                //                    Manage = false,
                //                    Required = false,
                //                    Value = "SideArm"
                //                });
                //                MWInstallationInfo.Add(new BaseInstAttView
                //                {
                //                    AutoFill = false,
                //                    DataType = "List",
                //                    DataTypeId = null,
                //                    Desc = "Select the sidearm",
                //                    enable = true,
                //                    Id = CivilLoads.sideArmId.Value,
                //                    Key = "Select the sidearm",
                //                    Label = "Select the sidearm",
                //                    Manage = false,
                //                    Required = false,
                //                    Value = CivilLoads.sideArm.Name
                //                });
                //            }
                //            else
                //            {
                //                MWInstallationInfo.Add(new BaseInstAttView
                //                {
                //                    AutoFill = false,
                //                    DataType = "List",
                //                    DataTypeId = null,
                //                    Desc = "Select the installation place type",
                //                    enable = true,
                //                    Id = -1,
                //                    Key = "Select the installation place type",
                //                    Label = "Select the installation place type",
                //                    Manage = false,
                //                    Required = false,
                //                    Value = "Direct"
                //                });
                //            }
                //            if (mw_BU.PortCascadeId != 0)
                //            {
                //                MWInstallationInfo.Add(new BaseInstAttView
                //                {
                //                    AutoFill = false,
                //                    DataType = "List",
                //                    DataTypeId = null,
                //                    Desc = "Select BU installtion type",
                //                    enable = true,
                //                    Id = -1,
                //                    Key = "Select BU installtion type",
                //                    Label = "Select BU installtion type",
                //                    Manage = false,
                //                    Required = false,
                //                    Value = "Cascaded"
                //                });

                //                TLImwPort CascadedBU = _unitOfWork.MW_PortRepository
                //                    .GetIncludeWhereFirst(x => x.Id == mw_BU.PortCascadeId, x => x.MwBU);

                //                MWInstallationInfo.Add(new BaseInstAttView
                //                {
                //                    AutoFill = false,
                //                    DataType = "List",
                //                    DataTypeId = null,
                //                    Desc = "Select the cascaded BU",
                //                    enable = true,
                //                    Id = CascadedBU.MwBUId,
                //                    Key = "Select the cascaded BU",
                //                    Label = "Select the cascaded BU",
                //                    Manage = false,
                //                    Required = false,
                //                    Value = CascadedBU.MwBU.Name
                //                });
                //            }
                //            else
                //            {
                //                MWInstallationInfo.Add(new BaseInstAttView
                //                {
                //                    AutoFill = false,
                //                    DataType = "List",
                //                    DataTypeId = null,
                //                    Desc = "Select BU installtion type",
                //                    enable = true,
                //                    Id = -1,
                //                    Key = "Select BU installtion type",
                //                    Label = "Select BU installtion type",
                //                    Manage = false,
                //                    Required = false,
                //                    Value = "Normal"
                //                });

                //            }
                //        }
                //        else if (AllCivilInst.civilNonSteelId != null)
                //        {
                //            MWInstallationInfo.Add(new BaseInstAttView
                //            {
                //                AutoFill = false,
                //                DataType = "List",
                //                DataTypeId = null,
                //                Desc = "Select civil support type",
                //                enable = true,
                //                Id = -1,
                //                Key = "Select civil support type",
                //                Label = "Select civil support type",
                //                Manage = false,
                //                Required = false,
                //                Value = "Civil non steel"
                //            });
                //            MWInstallationInfo.Add(new BaseInstAttView
                //            {
                //                AutoFill = false,
                //                DataType = "List",
                //                DataTypeId = null,
                //                Desc = "Select civil non steel support items",
                //                enable = true,
                //                Id = AllCivilInst.Id,
                //                Key = "Select civil non steel support items",
                //                Label = "Select civil non steel support items",
                //                Manage = false,
                //                Required = false,
                //                Value = _unitOfWork.CivilNonSteelRepository.GetByID(AllCivilInst.civilNonSteelId.Value).Name
                //            });
                //            if (CivilLoads.sideArmId != null)
                //            {
                //                MWInstallationInfo.Add(new BaseInstAttView
                //                {
                //                    AutoFill = false,
                //                    DataType = "List",
                //                    DataTypeId = null,
                //                    Desc = "Select the installation place type",
                //                    enable = true,
                //                    Id = -1,
                //                    Key = "Select the installation place type",
                //                    Label = "Select the installation place type",
                //                    Manage = false,
                //                    Required = false,
                //                    Value = "SideArm"
                //                });
                //                MWInstallationInfo.Add(new BaseInstAttView
                //                {
                //                    AutoFill = false,
                //                    DataType = "List",
                //                    DataTypeId = null,
                //                    Desc = "Select the sidearm",
                //                    enable = true,
                //                    Id = CivilLoads.sideArmId.Value,
                //                    Key = "Select the sidearm",
                //                    Label = "Select the sidearm",
                //                    Manage = false,
                //                    Required = false,
                //                    Value = CivilLoads.sideArm.Name
                //                });
                //            }
                //            else
                //            {
                //                MWInstallationInfo.Add(new BaseInstAttView
                //                {
                //                    AutoFill = false,
                //                    DataType = "List",
                //                    DataTypeId = null,
                //                    Desc = "Select the installation place type",
                //                    enable = true,
                //                    Id = -1,
                //                    Key = "Select the installation place type",
                //                    Label = "Select the installation place type",
                //                    Manage = false,
                //                    Required = false,
                //                    Value = "Direct"
                //                });
                //            }
                //            if (mw_BU.PortCascadeId != 0)
                //            {
                //                MWInstallationInfo.Add(new BaseInstAttView
                //                {
                //                    AutoFill = false,
                //                    DataType = "List",
                //                    DataTypeId = null,
                //                    Desc = "Select BU installtion type",
                //                    enable = true,
                //                    Id = -1,
                //                    Key = "Select BU installtion type",
                //                    Label = "Select BU installtion type",
                //                    Manage = false,
                //                    Required = false,
                //                    Value = "Cascaded"
                //                });

                //                TLImwPort CascadedBU = _unitOfWork.MW_PortRepository.GetIncludeWhereFirst(x => x.Id == mw_BU.PortCascadeId, x => x.MwBU);

                //                MWInstallationInfo.Add(new BaseInstAttView
                //                {
                //                    AutoFill = false,
                //                    DataType = "List",
                //                    DataTypeId = null,
                //                    Desc = "Select the cascaded BU",
                //                    enable = true,
                //                    Id = CascadedBU.MwBUId,
                //                    Key = "Select the cascaded BU",
                //                    Label = "Select the cascaded BU",
                //                    Manage = false,
                //                    Required = false,
                //                    Value = CascadedBU.MwBU.Name
                //                });
                //            }
                //            else
                //            {
                //                MWInstallationInfo.Add(new BaseInstAttView
                //                {
                //                    AutoFill = false,
                //                    DataType = "List",
                //                    DataTypeId = null,
                //                    Desc = "Select BU installtion type",
                //                    enable = true,
                //                    Id = -1,
                //                    Key = "Select BU installtion type",
                //                    Label = "Select BU installtion type",
                //                    Manage = false,
                //                    Required = false,
                //                    Value = "Normal"
                //                });

                //            }
                //        }

                //        MWInstallationInfo.Add(new BaseInstAttView
                //        {
                //            AutoFill = false,
                //            DataType = "List",
                //            DataTypeId = null,
                //            Desc = "allLoadInstId",
                //            enable = false,
                //            Id = AllLoadInst.Id,
                //            Key = "allLoadInstId",
                //            Label = "allLoadInstId",
                //            Manage = false,
                //            Required = false,
                //            Value = AllLoadInst.Id
                //        });
                //        objectInst.SideArmInstallationInfo = MWInstallationInfo;
                //    }
                //}
                //else if (LoadSubType.TLImwODU.ToString() == TableName)
                //{
                //    TLImwODU MW_ODU = _unitOfWork.MW_ODURepository
                //        .GetIncludeWhereFirst(x => x.Id == MWInsId, x => x.MwODULibrary, x => x.Mw_Dish, x => x.OduInstallationType, x => x.Owner);

                //    MW_ODULibraryViewModel MwOduLibrary = _mapper.Map<MW_ODULibraryViewModel>(_unitOfWork.MW_ODULibraryRepository
                //        .GetIncludeWhereFirst(x => x.Id == MW_ODU.MwODULibraryId, x => x.parity));

                //    List<BaseAttView> LibraryAttributes = _unitOfWork.AttributeActivatedRepository
                //       .GetAttributeActivated(TablesNames.TLImwODULibrary.ToString(), MwOduLibrary, null).ToList();

                //    TLIcivilLoads CivilLoad = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => !x.Dismantle && (x.allLoadInstId != null ?
                //      x.allLoadInst.mwBUId == MWInsId : false), x => x.allLoadInst);

                //    foreach (BaseAttView LibraryAttribute in LibraryAttributes)
                //    {
                //        if (LibraryAttribute.DataType.ToLower() == "list")
                //        {
                //            LibraryAttribute.Value = MwOduLibrary.GetType().GetProperties()
                //                .FirstOrDefault(x => x.Name.ToLower() == LibraryAttribute.Label.ToLower()).GetValue(MwOduLibrary);
                //        }
                //    }

                //    List<BaseAttView> LogisticalAttributes = _mapper.Map<List<BaseAttView>>(_unitOfWork.LogistcalRepository
                //        .GetLogistical(TablePartName.MW.ToString(), TablesNames.TLImwODULibrary.ToString(), MwOduLibrary.Id).ToList());

                //    LibraryAttributes.AddRange(LogisticalAttributes);

                //    objectInst.LibraryActivatedAttributes = LibraryAttributes;


                //    List<BaseInstAttView> ListAttributesActivated = _unitOfWork.AttributeActivatedRepository
                //        .GetInstAttributeActivated(LoadSubType.TLImwODU.ToString(), MW_ODU, "OduInstallationTypeId", "Mw_DishId").ToList();

                //    BaseInstAttView NameAttribute = ListAttributesActivated.FirstOrDefault(x => x.Key.ToLower() == "Name".ToLower());
                //    if (NameAttribute != null)
                //    {
                //        BaseInstAttView Swap = ListAttributesActivated[0];
                //        ListAttributesActivated[ListAttributesActivated.IndexOf(NameAttribute)] = Swap;
                //        ListAttributesActivated[0] = NameAttribute;
                //    }
                //    foreach (BaseInstAttView FKitem in ListAttributesActivated)
                //    {
                //        if (FKitem.Desc.ToLower() == "tliowner")
                //        {
                //            if (MW_ODU.Owner == null)
                //                FKitem.Value = "NA";
                //            else
                //            {
                //                FKitem.Value = MW_ODU.Owner.OwnerName;
                //            }
                //        }
                //        else if (FKitem.Desc.ToLower() == "tlimwdish")
                //        {
                //            if (MW_ODU.Mw_Dish == null)
                //                FKitem.Value = "NA";

                //            else
                //            {
                //                FKitem.Value = MW_ODU.Mw_Dish.DishName;
                //            }

                //        }
                //        else if (FKitem.Desc.ToLower() == "tlimwodulibrary")
                //        {
                //            if (MW_ODU.MwODULibrary == null)
                //                FKitem.Value = "NA";

                //            else
                //            {
                //                FKitem.Value = MW_ODU.MwODULibrary.Model;
                //            }
                //        }
                //    }

                //    objectInst.AttributesActivated = ListAttributesActivated;

                //    objectInst.DynamicAtts = _unitOfWork.DynamicAttInstValueRepository
                //        .GetDynamicInstAtts(TableNameEntity.Id, MWInsId, null);

                //    AllLoadInst = _unitOfWork.AllLoadInstRepository.GetWhereFirst(x => x.mwODUId == MWInsId);

                //    CivilLoads = _unitOfWork.CivilLoadsRepository
                //        .GetIncludeWhereFirst(x => x.allLoadInstId == AllLoadInst.Id, x => x.sideArm, x => x.site, x => x.leg, x => x.allCivilInst,
                //            x => x.allLoadInst.loadOther, x => x.allLoadInst.mwBU, x => x.allLoadInst.mwDish, x => x.allLoadInst.mwODU, x => x.allLoadInst.mwOther,
                //            x => x.allLoadInst.mwRFU, x => x.allLoadInst.power, x => x.allLoadInst.radioAntenna, x => x.allLoadInst.radioOther, x => x.allLoadInst.radioRRU,
                //            x => x.allCivilInst.civilWithLegs, x => x.allCivilInst.civilWithoutLeg, x => x.allCivilInst.civilNonSteel, x => x.civilSteelSupportCategory);

                //    LoadInstAttributes = _unitOfWork.AttributeActivatedRepository
                //        .GetAttributeActivated(TablesNames.TLIcivilLoads.ToString(), CivilLoads, null, "allLoadInstId",
                //            "Dismantle", "SiteCode", "civilSteelSupportCategoryId", "legId", "Leg2Id",
                //                "sideArmId", "allCivilInstId").ToList();

                //    List<KeyValuePair<string, List<DropDownListFilters>>> CivilLoadsRelatedTables = _unitOfWork.CivilLoadsRepository
                //        .GetRelatedTables(CivilLoads.SiteCode);
                //    if (CivilLoads != null)
                //    {
                //        List<KeyValuePair<string, List<DropDownListFilters>>> mwoduRelatedTables = _unitOfWork.MW_ODURepository
                //            .GetRelatedTablesForEdit(CivilLoads.SiteCode, CivilLoads.allCivilInstId);

                //        mwoduRelatedTables.AddRange(CivilLoadsRelatedTables);

                //        if (CivilLoads.allCivilInst.civilWithLegsId != null)
                //        {
                //            List<TLIleg> LegsForCivilWithLegLibrary = _unitOfWork.LegRepository
                //                .GetWhere(x => x.CivilWithLegInstId == CivilLoads.allCivilInst.civilWithLegsId).ToList();

                //            List<DropDownListFilters> LegIds = _mapper.Map<List<DropDownListFilters>>(LegsForCivilWithLegLibrary);

                //            mwoduRelatedTables.Add(new KeyValuePair<string, List<DropDownListFilters>>("Leg1Id", LegIds));

                //            List<TLIleg> Legs2ForCivilWithLegLibrary = LegsForCivilWithLegLibrary.Except(LegsForCivilWithLegLibrary
                //                .Where(x => x.Id == CivilLoads.legId)).ToList();

                //            List<DropDownListFilters> Leg2Ids = _mapper.Map<List<DropDownListFilters>>(Legs2ForCivilWithLegLibrary);

                //            mwoduRelatedTables.Add(new KeyValuePair<string, List<DropDownListFilters>>("Leg2Id", Leg2Ids));
                //        }

                //        objectInst.RelatedTables = mwoduRelatedTables;

                //        AllCivilInst = _unitOfWork.CivilLoadsRepository
                //            .GetIncludeWhereFirst(x => (x.allLoadInstId != null ? (x.allLoadInst.mwODUId != null ?
                //                x.allLoadInst.mwODUId.Value == MWInsId : false) : false) && !x.Dismantle, x => x.allCivilInst, x => x.allLoadInst).allCivilInst;

                //        if (AllCivilInst.civilWithLegsId != null)
                //        {
                //            MWInstallationInfo.Add(new BaseInstAttView
                //            {
                //                AutoFill = false,
                //                DataType = "List",
                //                DataTypeId = null,
                //                Desc = "Select civil support type",
                //                enable = true,
                //                Id = -1,
                //                Key = "Select civil support type",
                //                Label = "Select civil support type",
                //                Manage = false,
                //                Required = false,
                //                Value = "Civil with legs"
                //            });
                //            MWInstallationInfo.Add(new BaseInstAttView
                //            {
                //                AutoFill = false,
                //                DataType = "List",
                //                DataTypeId = null,
                //                Desc = "Select civil with legs support items",
                //                enable = true,
                //                Id = AllCivilInst.Id,
                //                Key = "Select civil with legs support items",
                //                Label = "Select civil with legs support items",
                //                Manage = false,
                //                Required = false,
                //                Value = _unitOfWork.CivilWithLegsRepository.GetByID(AllCivilInst.civilWithLegsId.Value).Name
                //            });

                //            if (CivilLoads.sideArmId != null)
                //            {
                //                MWInstallationInfo.Add(new BaseInstAttView
                //                {
                //                    AutoFill = false,
                //                    DataType = "List",
                //                    DataTypeId = null,
                //                    Desc = "Select the installation place type",
                //                    enable = true,
                //                    Id = MW_ODU.OduInstallationTypeId.Value,
                //                    Key = "Select the installation place type",
                //                    Label = "Select the installation place type",
                //                    Manage = false,
                //                    Required = false,
                //                    Value = _unitOfWork.OduInstallationTypeRepository.GetWhereFirst(x => x.Id == MW_ODU.OduInstallationTypeId.Value).Name
                //                });
                //                MWInstallationInfo.Add(new BaseInstAttView
                //                {
                //                    AutoFill = false,
                //                    DataType = "List",
                //                    DataTypeId = null,
                //                    Desc = "Select the sidearm",
                //                    enable = true,
                //                    Id = CivilLoads.sideArmId.Value,
                //                    Key = "Select the sidearm",
                //                    Label = "Select the sidearm",
                //                    Manage = false,
                //                    Required = false,
                //                    Value = CivilLoads.sideArm.Name
                //                });
                //            }
                //            else if (CivilLoads.legId != null)
                //            {
                //                MWInstallationInfo.Add(new BaseInstAttView
                //                {
                //                    AutoFill = false,
                //                    DataType = "List",
                //                    DataTypeId = null,
                //                    Desc = "Select the installation place type",
                //                    enable = true,
                //                    Id = MW_ODU.OduInstallationTypeId.Value,
                //                    Key = "Select the installation place type",
                //                    Label = "Select the installation place type",
                //                    Manage = false,
                //                    Required = false,
                //                    Value = _unitOfWork.OduInstallationTypeRepository.GetWhereFirst(x => x.Id == MW_ODU.OduInstallationTypeId.Value).Name
                //                });
                //                MWInstallationInfo.Add(new BaseInstAttView
                //                {
                //                    AutoFill = false,
                //                    DataType = "List",
                //                    DataTypeId = null,
                //                    Desc = "Select the seperate place",
                //                    enable = true,
                //                    Id = -1,
                //                    Key = "Select the seperate place",
                //                    Label = "Select the seperate place",
                //                    Manage = false,
                //                    Required = false,
                //                    Value = "Leg"
                //                });
                //                MWInstallationInfo.Add(new BaseInstAttView
                //                {
                //                    AutoFill = false,
                //                    DataType = "List",
                //                    DataTypeId = null,
                //                    Desc = "Select the leg",
                //                    enable = true,
                //                    Id = CivilLoads.legId.Value,
                //                    Key = "Select the leg",
                //                    Label = "Select the leg",
                //                    Manage = false,
                //                    Required = false,
                //                    Value = CivilLoads.leg.CiviLegName
                //                });
                //            }
                //            else if (MW_ODU.Mw_DishId != null ? MW_ODU.Mw_DishId != 0 : false)
                //            {
                //                MWInstallationInfo.Add(new BaseInstAttView
                //                {
                //                    AutoFill = false,
                //                    DataType = "List",
                //                    DataTypeId = null,
                //                    Desc = "Select the installation place type",
                //                    enable = true,
                //                    Id = MW_ODU.OduInstallationTypeId.Value,
                //                    Key = "Select the installation place type",
                //                    Label = "Select the installation place type",
                //                    Manage = false,
                //                    Required = false,
                //                    Value = _unitOfWork.OduInstallationTypeRepository.GetWhereFirst(x => x.Id == MW_ODU.OduInstallationTypeId).Name
                //                });
                //                MWInstallationInfo.Add(new BaseInstAttView
                //                {
                //                    AutoFill = false,
                //                    DataType = "List",
                //                    DataTypeId = null,
                //                    Desc = "Select the dish ",
                //                    enable = true,
                //                    Id = MW_ODU.Mw_DishId.Value,
                //                    Key = "Select the dish",
                //                    Label = "Select the dish",
                //                    Manage = false,
                //                    Required = false,
                //                    Value = _unitOfWork.MW_DishRepository.GetWhereFirst(x => x.Id == MW_ODU.Mw_DishId.Value).DishName
                //                });
                //            }
                //            else
                //            {
                //                MWInstallationInfo.Add(new BaseInstAttView
                //                {
                //                    AutoFill = false,
                //                    DataType = "List",
                //                    DataTypeId = null,
                //                    Desc = "Select the installation place type",
                //                    enable = true,
                //                    Id = MW_ODU.OduInstallationTypeId.Value,
                //                    Key = "Select the installation place type",
                //                    Label = "Select the installation place type",
                //                    Manage = false,
                //                    Required = false,
                //                    Value = _unitOfWork.OduInstallationTypeRepository.GetWhereFirst(x => x.Id == MW_ODU.OduInstallationTypeId).Name
                //                });
                //                MWInstallationInfo.Add(new BaseInstAttView
                //                {
                //                    AutoFill = false,
                //                    DataType = "List",
                //                    DataTypeId = null,
                //                    Desc = "Select the seperate place",
                //                    enable = true,
                //                    Id = -1,
                //                    Key = "Select the seperate place",
                //                    Label = "Select the seperate place",
                //                    Manage = false,
                //                    Required = false,
                //                    Value = "Direct"
                //                });
                //            }
                //        }
                //        else if (AllCivilInst.civilWithoutLegId != null)
                //        {
                //            MWInstallationInfo.Add(new BaseInstAttView
                //            {
                //                AutoFill = false,
                //                DataType = "List",
                //                DataTypeId = null,
                //                Desc = "Select civil support type",
                //                enable = true,
                //                Id = -1,
                //                Key = "Select civil support type",
                //                Label = "Select civil support type",
                //                Manage = false,
                //                Required = false,
                //                Value = "Civil without legs"
                //            });
                //            MWInstallationInfo.Add(new BaseInstAttView
                //            {
                //                AutoFill = false,
                //                DataType = "List",
                //                DataTypeId = null,
                //                Desc = "Select civil without legs support items",
                //                enable = true,
                //                Id = AllCivilInst.Id,
                //                Key = "Select civil without legs support items",
                //                Label = "Select civil without legs support items",
                //                Manage = false,
                //                Required = false,
                //                Value = _unitOfWork.CivilWithoutLegRepository.GetByID(AllCivilInst.civilWithoutLegId.Value).Name
                //            });

                //            if (CivilLoads.sideArmId != null)
                //            {
                //                MWInstallationInfo.Add(new BaseInstAttView
                //                {
                //                    AutoFill = false,
                //                    DataType = "List",
                //                    DataTypeId = null,
                //                    Desc = "Select the installation place type",
                //                    enable = true,
                //                    Id = MW_ODU.OduInstallationTypeId.Value,
                //                    Key = "Select the installation place type",
                //                    Label = "Select the installation place type",
                //                    Manage = false,
                //                    Required = false,
                //                    Value = _unitOfWork.OduInstallationTypeRepository.GetWhereFirst(x => x.Id == MW_ODU.OduInstallationTypeId.Value).Name
                //                });
                //                MWInstallationInfo.Add(new BaseInstAttView
                //                {
                //                    AutoFill = false,
                //                    DataType = "List",
                //                    DataTypeId = null,
                //                    Desc = "Select the sidearm",
                //                    enable = true,
                //                    Id = CivilLoads.sideArmId.Value,
                //                    Key = "Select the sidearm",
                //                    Label = "Select the sidearm",
                //                    Manage = false,
                //                    Required = false,
                //                    Value = CivilLoads.sideArm.Name
                //                });
                //            }
                //            else if (MW_ODU.Mw_DishId != null ? MW_ODU.Mw_DishId != 0 : false)
                //            {
                //                MWInstallationInfo.Add(new BaseInstAttView
                //                {
                //                    AutoFill = false,
                //                    DataType = "List",
                //                    DataTypeId = null,
                //                    Desc = "Select the installation place type",
                //                    enable = true,
                //                    Id = MW_ODU.OduInstallationTypeId.Value,
                //                    Key = "Select the installation place type",
                //                    Label = "Select the installation place type",
                //                    Manage = false,
                //                    Required = false,
                //                    Value = _unitOfWork.OduInstallationTypeRepository.GetWhereFirst(x => x.Id == MW_ODU.OduInstallationTypeId.Value).Name
                //                });
                //                MWInstallationInfo.Add(new BaseInstAttView
                //                {
                //                    AutoFill = false,
                //                    DataType = "List",
                //                    DataTypeId = null,
                //                    Desc = "Select the dish",
                //                    enable = true,
                //                    Id = MW_ODU.Mw_DishId.Value,
                //                    Key = "Select the dish",
                //                    Label = "Select the dish",
                //                    Manage = false,
                //                    Required = false,
                //                    Value = _unitOfWork.MW_DishRepository.GetWhereFirst(x => x.Id == MW_ODU.Mw_DishId).DishName
                //                });
                //            }
                //            else
                //            {
                //                MWInstallationInfo.Add(new BaseInstAttView
                //                {
                //                    AutoFill = false,
                //                    DataType = "List",
                //                    DataTypeId = null,
                //                    Desc = "Select the installation place type",
                //                    enable = true,
                //                    Id = MW_ODU.OduInstallationTypeId.Value,
                //                    Key = "Select the installation place type",
                //                    Label = "Select the installation place type",
                //                    Manage = false,
                //                    Required = false,
                //                    Value = _unitOfWork.OduInstallationTypeRepository.GetWhereFirst(x => x.Id == MW_ODU.OduInstallationTypeId).Name
                //                });
                //            }
                //        }
                //        else if (AllCivilInst.civilNonSteelId != null)
                //        {
                //            MWInstallationInfo.Add(new BaseInstAttView
                //            {
                //                AutoFill = false,
                //                DataType = "List",
                //                DataTypeId = null,
                //                Desc = "Select civil support type",
                //                enable = true,
                //                Id = -1,
                //                Key = "Select civil support type",
                //                Label = "Select civil support type",
                //                Manage = false,
                //                Required = false,
                //                Value = "Civil non steel"
                //            });
                //            MWInstallationInfo.Add(new BaseInstAttView
                //            {
                //                AutoFill = false,
                //                DataType = "List",
                //                DataTypeId = null,
                //                Desc = "Select civil non steel support items",
                //                enable = true,
                //                Id = AllCivilInst.Id,
                //                Key = "Select civil non steel support items",
                //                Label = "Select civil non steel support items",
                //                Manage = false,
                //                Required = false,
                //                Value = _unitOfWork.CivilNonSteelRepository.GetByID(AllCivilInst.civilNonSteelId.Value).Name
                //            });

                //            if (CivilLoads.sideArmId != null)
                //            {
                //                MWInstallationInfo.Add(new BaseInstAttView
                //                {
                //                    AutoFill = false,
                //                    DataType = "List",
                //                    DataTypeId = null,
                //                    Desc = "Select the installation place type",
                //                    enable = true,
                //                    Id = MW_ODU.OduInstallationTypeId.Value,
                //                    Key = "Select the installation place type",
                //                    Label = "Select the installation place type",
                //                    Manage = false,
                //                    Required = false,
                //                    Value = _unitOfWork.OduInstallationTypeRepository.GetWhereFirst(x => x.Id == MW_ODU.OduInstallationTypeId.Value).Name
                //                });
                //                MWInstallationInfo.Add(new BaseInstAttView
                //                {
                //                    AutoFill = false,
                //                    DataType = "List",
                //                    DataTypeId = null,
                //                    Desc = "Select the sidearm",
                //                    enable = true,
                //                    Id = CivilLoads.sideArmId.Value,
                //                    Key = "Select the sidearm",
                //                    Label = "Select the sidearm",
                //                    Manage = false,
                //                    Required = false,
                //                    Value = CivilLoads.sideArm.Name
                //                });
                //            }
                //            else if (MW_ODU.Mw_DishId != null ? MW_ODU.Mw_DishId != 0 : false)
                //            {
                //                MWInstallationInfo.Add(new BaseInstAttView
                //                {
                //                    AutoFill = false,
                //                    DataType = "List",
                //                    DataTypeId = null,
                //                    Desc = "Select the installation place type",
                //                    enable = true,
                //                    Id = MW_ODU.OduInstallationTypeId.Value,
                //                    Key = "Select the installation place type",
                //                    Label = "Select the installation place type",
                //                    Manage = false,
                //                    Required = false,
                //                    Value = _unitOfWork.OduInstallationTypeRepository.GetWhereFirst(x => x.Id == MW_ODU.OduInstallationTypeId.Value).Name
                //                });
                //                MWInstallationInfo.Add(new BaseInstAttView
                //                {
                //                    AutoFill = false,
                //                    DataType = "List",
                //                    DataTypeId = null,
                //                    Desc = "Select the dish",
                //                    enable = true,
                //                    Id = MW_ODU.Mw_DishId.Value,
                //                    Key = "Select the dish",
                //                    Label = "Select the dish",
                //                    Manage = false,
                //                    Required = false,
                //                    Value = _unitOfWork.MW_DishRepository.GetWhereFirst(x => x.Id == MW_ODU.Mw_DishId).DishName
                //                });
                //            }
                //            else
                //            {
                //                MWInstallationInfo.Add(new BaseInstAttView
                //                {
                //                    AutoFill = false,
                //                    DataType = "List",
                //                    DataTypeId = null,
                //                    Desc = "Select the installation place type",
                //                    enable = true,
                //                    Id = MW_ODU.OduInstallationTypeId.Value,
                //                    Key = "Select the installation place type",
                //                    Label = "Select the installation place type",
                //                    Manage = false,
                //                    Required = false,
                //                    Value = _unitOfWork.OduInstallationTypeRepository.GetWhereFirst(x => x.Id == MW_ODU.OduInstallationTypeId).Name
                //                });
                //            }
                //        }

                //        MWInstallationInfo.Add(new BaseInstAttView
                //        {
                //            AutoFill = false,
                //            DataType = "List",
                //            DataTypeId = null,
                //            Desc = "allLoadInstId",
                //            enable = false,
                //            Id = AllLoadInst.Id,
                //            Key = "allLoadInstId",
                //            Label = "allLoadInstId",
                //            Manage = false,
                //            Required = false,
                //            Value = AllLoadInst.Id
                //        });
                //        objectInst.SideArmInstallationInfo = MWInstallationInfo;
                //    }
                //}
                //else if (LoadSubType.TLImwDish.ToString() == TableName)
                //{
                //    var MWDish=_unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x=>x.allLoadInst.mwDishId==MWInsId
                //    && !x.Dismantle, x => x.allLoadInst.mwDish.MwDishLibrary,
                //            x => x.allLoadInst.mwDish.RepeaterType, x => x.allLoadInst.mwDish.owner, x => x.allLoadInst.mwDish.PolarityOnLocation,
                //            x => x.allLoadInst.mwDish.ItemConnectTo, x => x.allLoadInst.mwDish.InstallationPlace,x=>x.allLoadInst.mwDish.MwDishLibrary);

                //    if (MWDish != null)
                //    {
                //        MWDishLibraryAttributes MwdishLibrary = _mapper.Map<MWDishLibraryAttributes>(MWDish.allLoadInst.mwDish.MwDishLibrary);

                //        List<BaseInstAttViews> LibraryAttributes = _unitOfWork.AttributeActivatedRepository
                //           .GetAttributeActivatedGetLibrary(TablesNames.TLImwDishLibrary.ToString(), MwdishLibrary, null).ToList();

                //        LibraryAttributes
                //            .Where(FKitem => FKitem.DataType.ToLower() == "list" && !string.IsNullOrEmpty(FKitem.Label))
                //            .ToList()
                //            .Select(FKitem =>
                //            {
                //                if (FKitem.Label.ToLower() == "polaritytype_name")
                //                {
                //                    FKitem.Options = _mapper.Map<List<PolarityTypeViewModel>>(_unitOfWork.PolarityTypeRepository.GetWhere(x => !x.Delete && !x.Disable).ToList());
                //                    FKitem.Value = _mapper.Map<PolarityTypeViewModel>(MWDish.allLoadInst.mwDish.MwDishLibrary.MwDishLibrary.polarityType);
                //                }
                //                else if (FKitem.Label.ToLower() == "astype_name")
                //                {
                //                    FKitem.Options = _mapper.Map<List<AsTypeViewModel>>(_unitOfWork.AsTypeRepository.GetWhere(x => !x.Delete && !x.Disable).ToList());
                //                    FKitem.Value = _mapper.Map<AsTypeViewModel>(MWDish.allLoadInst.mwDish.MwDishLibrary.asType);
                //                }

                //                return FKitem;
                //            })
                //            .ToList();

                //        List<BaseInstAttViews> LogisticalAttributes = _mapper.Map<List<BaseInstAttViews>>(_unitOfWork.LogistcalRepository
                //           .GetLogisticals(TablePartName.MW.ToString(), TablesNames.TLImwDishLibrary.ToString(), MWDish.allLoadInst.mwDish.MwDishLibrary.Id).ToList());

                //        LibraryAttributes.AddRange(LogisticalAttributes);

                //        objectInst.LibraryAttribute = LibraryAttributes;

                //        List<BaseInstAttViews> ListAttributesActivated = _unitOfWork.AttributeActivatedRepository
                //            .GetInstAttributeActivatedGetForAdd(TablesNames.TLImwDish.ToString(), MWDish.allLoadInst.mwDish,
                //                "InstallationPlaceId").ToList();

                //        BaseInstAttViews NameAttribute = ListAttributesActivated.FirstOrDefault(x => x.Key.ToLower() == "DishName".ToLower());
                //        if (NameAttribute != null)
                //        {
                //            BaseInstAttViews Swap = ListAttributesActivated[0];
                //            ListAttributesActivated[ListAttributesActivated.IndexOf(NameAttribute)] = Swap;
                //            ListAttributesActivated[0] = NameAttribute;
                //        }
                //        var foreignKeyAttributes = ListAttributesActivated.Select(FKitem =>
                //        {
                //            switch (FKitem.Label.ToLower())
                //            {

                //                case "polarityonLocation_name":
                //                    FKitem.Value = _mapper.Map<PolarityOnLocationViewModel>(MWDish.allLoadInst.mwDish.PolarityOnLocation);
                //                    FKitem.Options = _mapper.Map<List<PolarityOnLocationViewModel>>(_unitOfWork.PolarityOnLocationRepository.GetWhere(x => !x.Deleted && !x.Disable).ToList());
                //                    break;
                //                case "repeatertype_name":
                //                    FKitem.Value = _mapper.Map<RepeaterTypeViewModel>(MWDish.allLoadInst.mwDish.RepeaterType);
                //                    FKitem.Options = _mapper.Map<List<RepeaterTypeViewModel>>(_unitOfWork.RepeaterTypeRepository.GetWhere(x => !x.Deleted && !x.Disable).ToList());
                //                    break;
                //                case "itemconnectto_name":
                //                    FKitem.Value = _mapper.Map<ItemConnectToViewModel>(MWDish.allLoadInst.mwDish.ItemConnectTo);
                //                    FKitem.Options = _mapper.Map<List<ItemConnectToViewModel>>(_unitOfWork.ItemConnectToRepository.GetWhere(x => !x.Deleted && !x.Disable).ToList());
                //                    break;
                //                case "owner_name":
                //                    FKitem.Value = _mapper.Map<OwnerViewModel>(MWDish.allLoadInst.mwDish.owner);
                //                    FKitem.Options = _mapper.Map<List<OwnerViewModel>>(_unitOfWork.OwnerRepository.GetWhere(x => !x.Deleted && !x.Disable).ToList());
                //                    break;
                //                case "mw_link_name":
                //                    FKitem.Value = _mapper.Map<OwnerViewModel>(_unitOfWork.MW_DishRepository.GetWhereFirst(x=>x.Id== MWDish.allLoadInst.mwDish.MW_LinkId));
                //                    FKitem.Options = _mapper.Map<List<OwnerViewModel>>(_unitOfWork.CivilLoadsRepository.GetWhere(x=>x.allLoadInst !=null && x.allLoadInst.mwDishId !=null
                //                    && !x.Dismantle && x.SiteCode==MWDish.SiteCode).Select(x=>x.allLoadInst.mwDish).ToList());
                //                    break;
                //            }
                //            return FKitem;
                //        }).ToList();
                //        var selectedAttributes = ListAttributesActivated
                //   .Where(x => new[] { "installationplace_name" }
                //                .Contains(x.Label.ToLower()))
                //   .ToList();


                //        var foreignKeyAttribute = selectedAttributes.Select(FKitem =>
                //        {
                //            switch (FKitem.Label.ToLower())
                //            {
                //                case "installationplace_name":
                //                    FKitem.Value = _mapper.Map<InstallationPlaceViewModel>(MWDish.allLoadInst.mwDish.InstallationPlace);
                //                    FKitem.Options = _mapper.Map<List<InstallationPlaceViewModel>>(_unitOfWork.InstallationPlaceRepository
                //                        .GetWhere(x => x.Id == MWDish.allLoadInst.mwDish.InstallationPlaceId));
                //                    break;


                //            }
                //            return FKitem;
                //        }).ToList();

                //        Config.AddRange(foreignKeyAttribute);

                //            if (MWDish.allCivilInst != null)
                //            {
                //                BaseInstAttViews baseInstAttViews = new BaseInstAttViews();
                //                if (MWDish.allCivilInst.civilWithoutLegId != null)
                //                {
                //                    baseInstAttViews.Key = "civilWithoutLegId";
                //                    baseInstAttViews.Label = "civilWithoutLeg_name";
                //                    baseInstAttViews.Value = _mapper.Map<SectionsLegTypeViewModel>(MWDish.allCivilInst.civilWithoutLeg);
                //                    baseInstAttViews.Options = _mapper.Map<List<SectionsLegTypeViewModel>>(_unitOfWork.CivilWithoutLegRepository
                //                         .GetWhere(x => x.Id == AllCivilInst.civilWithoutLegId));
                //                    baseInstAttViews.DataType = "List";
                //                    Config.Add(baseInstAttViews);
                //                }
                //                else if (MWDish.allCivilInst.civilNonSteelId != null)
                //                {
                //                    baseInstAttViews.Key = "civilNonSteelId";
                //                    baseInstAttViews.Label = "civilNonSteel_name";
                //                    baseInstAttViews.Value = _mapper.Map<SectionsLegTypeViewModel>(MWDish.allCivilInst.civilNonSteel);
                //                    baseInstAttViews.Options = _mapper.Map<List<SectionsLegTypeViewModel>>(_unitOfWork.CivilNonSteelRepository
                //                           .GetWhere(x => x.Id == AllCivilInst.civilNonSteelId));
                //                    baseInstAttViews.DataType = "List";
                //                    Config.Add(baseInstAttViews);
                //                }
                //                if (MWDish.allCivilInst.civilWithLegsId != null)
                //                {
                //                    baseInstAttViews.Key = "civilWithLegId";
                //                    baseInstAttViews.Label = "civilWithLeg_name";
                //                    baseInstAttViews.Value = _mapper.Map<SectionsLegTypeViewModel>(MWDish.allCivilInst.civilWithLegs);
                //                    baseInstAttViews.Options = _mapper.Map<List<SectionsLegTypeViewModel>>(_unitOfWork.CivilWithLegsRepository
                //                        .GetWhere(x => x.Id == AllCivilInst.civilWithLegsId));
                //                    baseInstAttViews.DataType = "List";
                //                    Config.Add(baseInstAttViews);
                //                }
                //            }
                //            if (MWDish.legId != 0 && MWDish.legId != null)
                //            {

                //                var Leg1 = _unitOfWork.LegRepository.GetWhereFirst(x => x.Id == MWDish.legId);
                //                if (Leg1 != null)
                //                {
                //                    BaseInstAttViews baseInstAttViews = new BaseInstAttViews();
                //                    baseInstAttViews.Key = "legId";
                //                    baseInstAttViews.Value = _mapper.Map<SectionsLegTypeViewModel>(Leg1);
                //                    baseInstAttViews.Label = "leg_name";
                //                    baseInstAttViews.Options = _mapper.Map<List<SectionsLegTypeViewModel>>(_unitOfWork.LegRepository
                //                       .GetWhere(x => x.Id == MWDish.legId));
                //                    baseInstAttViews.DataType = "list";
                //                    Config.Add(baseInstAttViews);
                //                }

                //            }
                //            objectInst.installationConfig = Config;
                //            var InstallationDate = new BaseInstAttViews()
                //            {
                //                Key = "InstallationDate",
                //                Value = MWDish.InstallationDate,
                //                DataType = "datetime",
                //                Label = "InstallationDate",


                //            };
                //            Civilload.Add(InstallationDate);
                //            var ItemOnCivilStatus = new BaseInstAttViews()
                //            {
                //                Key = "ItemOnCivilStatus",
                //                Value = MWDish.ItemOnCivilStatus,
                //                DataType = "string",
                //                Label = "ItemOnCivilStatus",


                //            };
                //            Civilload.Add(ItemOnCivilStatus);
                //            var ItemStatus = new BaseInstAttViews()
                //            {
                //                Key = "ItemStatus",
                //                Value = MWDish.ItemStatus,
                //                DataType = "string",
                //                Label = "ItemStatus",


                //            };
                //            Civilload.Add(ItemStatus);
                //            var ReservedSpace = new BaseInstAttViews()
                //            {
                //                Key = "ReservedSpace",
                //                Value = MWDish.ReservedSpace,
                //                DataType = "bool",
                //                Label = "ReservedSpace",

                //            };
                //            Civilload.Add(ReservedSpace);


                //        objectInst.InstallationAttributes = ListAttributesActivated;

                //        objectInst.dynamicAttribute = null;
                //        objectInst.dynamicAttribute = _mapper.Map<List<DynaminAttInstViewModel>>(_unitOfWork.DynamicAttRepository.GetWhere(x => x.tablesNamesId == TableNameEntity.Id && x.LibraryAtt == false).ToList());

                //        objectInst.InstallationAttributes = objectInst.InstallationAttributes.Except(selectedAttributes).ToList();


                //    }
                //    else
                //    {
                //        return new Response<GetForAddLoadObject>(false, null, null, "this id is not found", (int)ApiReturnCode.fail);
                //    }
                //}
                //else if (LoadSubType.TLImwRFU.ToString() == TableName)
                //{
                //    TLImwRFU MW_RFU = _unitOfWork.MW_RFURepository
                //        .GetIncludeWhereFirst(x => x.Id == MWInsId, x => x.Owner,
                //            x => x.MwPort, x => x.MwRFULibrary, x => x.MwPort.MwBU);

                //    MW_RFULibraryViewModel MwRfuLibrary = _mapper.Map<MW_RFULibraryViewModel>(_unitOfWork.MW_RFULibraryRepository
                //      .GetIncludeWhereFirst(x => x.Id == MW_RFU.MwRFULibraryId, x => x.diversityType, x => x.boardType));

                //    List<BaseAttView> LibraryAttributes = _unitOfWork.AttributeActivatedRepository
                //       .GetAttributeActivated(TablesNames.TLImwRFULibrary.ToString(), MwRfuLibrary, null).ToList();

                //    foreach (BaseAttView LibraryAttribute in LibraryAttributes)
                //    {
                //        if (LibraryAttribute.DataType.ToLower() == "list")
                //        {
                //            LibraryAttribute.Value = MwRfuLibrary.GetType().GetProperties()
                //                .FirstOrDefault(x => x.Name.ToLower() == LibraryAttribute.Label.ToLower()).GetValue(MwRfuLibrary);
                //        }
                //    }

                //    List<BaseAttView> LogisticalAttributes = _mapper.Map<List<BaseAttView>>(_unitOfWork.LogistcalRepository
                //        .GetLogistical(TablePartName.MW.ToString(), TablesNames.TLImwRFULibrary.ToString(), MwRfuLibrary.Id).ToList());

                //    LibraryAttributes.AddRange(LogisticalAttributes);

                //    objectInst.LibraryActivatedAttributes = LibraryAttributes;

                //    List<BaseInstAttView> ListAttributesActivated = _unitOfWork.AttributeActivatedRepository
                //        .GetInstAttributeActivated(LoadSubType.TLImwRFU.ToString(), MW_RFU).ToList();

                //    BaseInstAttView NameAttribute = ListAttributesActivated.FirstOrDefault(x => x.Key.ToLower() == "Name".ToLower());
                //    if (NameAttribute != null)
                //    {
                //        BaseInstAttView Swap = ListAttributesActivated[0];
                //        ListAttributesActivated[ListAttributesActivated.IndexOf(NameAttribute)] = Swap;
                //        ListAttributesActivated[0] = NameAttribute;
                //    }
                //    foreach (BaseInstAttView FKitem in ListAttributesActivated)
                //    {
                //        if (FKitem.Desc.ToLower() == "tliowner")
                //        {
                //            if (MW_RFU.Owner == null)
                //                FKitem.Value = "NA";

                //            else
                //            {
                //                FKitem.Value = MW_RFU.Owner.OwnerName;
                //            }
                //        }
                //        else if (FKitem.Desc.ToLower() == "tlimwport")
                //        {
                //            if (MW_RFU.MwPort == null)
                //                FKitem.Value = "NA";

                //            else
                //            {
                //                FKitem.Value = MW_RFU.MwPort.Port_Name;
                //            }
                //        }
                //        else if (FKitem.Desc.ToLower() == "tlimwrfulibrary")
                //        {
                //            if (MW_RFU.MwRFULibrary == null)
                //                FKitem.Value = "NA";

                //            else
                //            {
                //                FKitem.Value = MW_RFU.MwRFULibrary.Model;
                //            }
                //        }
                //    }
                //    objectInst.AttributesActivated = ListAttributesActivated;

                //    objectInst.DynamicAtts = _unitOfWork.DynamicAttInstValueRepository
                //       .GetDynamicInstAtts(TableNameEntity.Id, MWInsId, null);

                //    AllLoadInst = _unitOfWork.AllLoadInstRepository.GetWhereFirst(x => x.mwRFUId == MWInsId);

                //    CivilLoads = _unitOfWork.CivilLoadsRepository
                //        .GetIncludeWhereFirst(x => x.allLoadInstId == AllLoadInst.Id, x => x.sideArm, x => x.site, x => x.leg, x => x.allCivilInst,
                //            x => x.allLoadInst.loadOther, x => x.allLoadInst.mwBU, x => x.allLoadInst.mwDish, x => x.allLoadInst.mwODU, x => x.allLoadInst.mwOther,
                //            x => x.allLoadInst.mwRFU, x => x.allLoadInst.power, x => x.allLoadInst.radioAntenna, x => x.allLoadInst.radioOther, x => x.allLoadInst.radioRRU,
                //            x => x.allCivilInst.civilWithLegs, x => x.allCivilInst.civilWithoutLeg, x => x.allCivilInst.civilNonSteel, x => x.civilSteelSupportCategory);

                //    LoadInstAttributes = _unitOfWork.AttributeActivatedRepository
                //        .GetAttributeActivated(TablesNames.TLIcivilLoads.ToString(), CivilLoads, null, "allLoadInstId",
                //            "Dismantle", "SiteCode", "civilSteelSupportCategoryId", "legId", "Leg2Id",
                //                "sideArmId", "allCivilInstId").ToList();

                //    List<KeyValuePair<string, List<DropDownListFilters>>> CivilLoadsRelatedTables = _unitOfWork.CivilLoadsRepository
                //        .GetRelatedTables(CivilLoads.SiteCode);
                //    if (CivilLoads != null)
                //    {
                //        List<KeyValuePair<string, List<DropDownListFilters>>> mwrfuRelatedTables = _unitOfWork.MW_RFURepository
                //            .GetRelatedTables();
                //        mwrfuRelatedTables.AddRange(CivilLoadsRelatedTables);

                //        if (CivilLoads.allCivilInst.civilWithLegsId != null)
                //        {
                //            List<TLIleg> LegsForCivilWithLegLibrary = _unitOfWork.LegRepository
                //                .GetWhere(x => x.CivilWithLegInstId == CivilLoads.allCivilInst.civilWithLegsId).ToList();

                //            List<DropDownListFilters> LegIds = _mapper.Map<List<DropDownListFilters>>(LegsForCivilWithLegLibrary);

                //            mwrfuRelatedTables.Add(new KeyValuePair<string, List<DropDownListFilters>>("Leg1Id", LegIds));

                //            List<TLIleg> Legs2ForCivilWithLegLibrary = LegsForCivilWithLegLibrary.Except(LegsForCivilWithLegLibrary
                //                .Where(x => x.Id == CivilLoads.legId)).ToList();

                //            List<DropDownListFilters> Leg2Ids = _mapper.Map<List<DropDownListFilters>>(Legs2ForCivilWithLegLibrary);

                //            mwrfuRelatedTables.Add(new KeyValuePair<string, List<DropDownListFilters>>("Leg2Id", Leg2Ids));
                //        }

                //        objectInst.RelatedTables = mwrfuRelatedTables;

                //        AllCivilInst = _unitOfWork.CivilLoadsRepository
                //           .GetIncludeWhereFirst(x => (x.allLoadInstId != null ? (x.allLoadInst.mwRFUId != null ?
                //               x.allLoadInst.mwRFUId.Value == MWInsId : false) : false) && !x.Dismantle, x => x.allCivilInst, x => x.allLoadInst).allCivilInst;

                //        if (AllCivilInst.civilWithLegsId != null)
                //        {
                //            MWInstallationInfo.Add(new BaseInstAttView
                //            {
                //                AutoFill = false,
                //                DataType = "List",
                //                DataTypeId = null,
                //                Desc = "Select civil support type",
                //                enable = true,
                //                Id = -1,
                //                Key = "Select civil support type",
                //                Label = "Select civil support type",
                //                Manage = false,
                //                Required = false,
                //                Value = "Civil with legs"
                //            });
                //            MWInstallationInfo.Add(new BaseInstAttView
                //            {
                //                AutoFill = false,
                //                DataType = "List",
                //                DataTypeId = null,
                //                Desc = "Select civil with legs support items",
                //                enable = true,
                //                Id = AllCivilInst.Id,
                //                Key = "Select civil with legs support items",
                //                Label = "Select civil with legs support items",
                //                Manage = false,
                //                Required = false,
                //                Value = _unitOfWork.CivilWithLegsRepository.GetByID(AllCivilInst.civilWithLegsId.Value).Name
                //            });
                //            MWInstallationInfo.Add(new BaseInstAttView
                //            {
                //                AutoFill = false,
                //                DataType = "List",
                //                DataTypeId = null,
                //                Desc = "Select the BU",
                //                enable = true,
                //                Id = MW_RFU.MwPort.MwBUId,
                //                Key = "Select the BU",
                //                Label = "Select the BU",
                //                Manage = false,
                //                Required = false,
                //                Value = MW_RFU.MwPort.MwBU.Name
                //            });
                //            MWInstallationInfo.Add(new BaseInstAttView
                //            {
                //                AutoFill = false,
                //                DataType = "List",
                //                DataTypeId = null,
                //                Desc = "Select the port of BU",
                //                enable = true,
                //                Id = MW_RFU.MwPortId.Value,
                //                Key = "Select the port of BU",
                //                Label = "Select the port of BU",
                //                Manage = false,
                //                Required = false,
                //                Value = MW_RFU.MwPort.Port_Name
                //            });
                //        }
                //        else if (AllCivilInst.civilWithoutLegId != null)
                //        {
                //            MWInstallationInfo.Add(new BaseInstAttView
                //            {
                //                AutoFill = false,
                //                DataType = "List",
                //                DataTypeId = null,
                //                Desc = "Select civil support type",
                //                enable = true,
                //                Id = -1,
                //                Key = "Select civil support type",
                //                Label = "Select civil support type",
                //                Manage = false,
                //                Required = false,
                //                Value = "Civil without Legs"
                //            });
                //            MWInstallationInfo.Add(new BaseInstAttView
                //            {
                //                AutoFill = false,
                //                DataType = "List",
                //                DataTypeId = null,
                //                Desc = "Select civil without legs support items",
                //                enable = true,
                //                Id = AllCivilInst.Id,
                //                Key = "Select civil without legs support items",
                //                Label = "Select civil without legs support items",
                //                Manage = false,
                //                Required = false,
                //                Value = _unitOfWork.CivilWithoutLegRepository.GetByID(AllCivilInst.civilWithoutLegId.Value).Name
                //            });
                //            MWInstallationInfo.Add(new BaseInstAttView
                //            {
                //                AutoFill = false,
                //                DataType = "List",
                //                DataTypeId = null,
                //                Desc = "Select the BU",
                //                enable = true,
                //                Id = MW_RFU.MwPort.MwBUId,
                //                Key = "Select the BU",
                //                Label = "Select the BU",
                //                Manage = false,
                //                Required = false,
                //                Value = MW_RFU.MwPort.MwBU.Name
                //            });
                //            MWInstallationInfo.Add(new BaseInstAttView
                //            {
                //                AutoFill = false,
                //                DataType = "List",
                //                DataTypeId = null,
                //                Desc = "Select the port of BU",
                //                enable = true,
                //                Id = MW_RFU.MwPortId.Value,
                //                Key = "Select the port of BU",
                //                Label = "Select the port of BU",
                //                Manage = false,
                //                Required = false,
                //                Value = MW_RFU.MwPort.Port_Name
                //            });
                //        }
                //        else if (AllCivilInst.civilNonSteelId != null)
                //        {
                //            MWInstallationInfo.Add(new BaseInstAttView
                //            {
                //                AutoFill = false,
                //                DataType = "List",
                //                DataTypeId = null,
                //                Desc = "Select civil support type",
                //                enable = true,
                //                Id = -1,
                //                Key = "Select civil support type",
                //                Label = "Select civil support type",
                //                Manage = false,
                //                Required = false,
                //                Value = "Civil non steel"
                //            });
                //            MWInstallationInfo.Add(new BaseInstAttView
                //            {
                //                AutoFill = false,
                //                DataType = "List",
                //                DataTypeId = null,
                //                Desc = "Select civil without legs support items",
                //                enable = true,
                //                Id = AllCivilInst.Id,
                //                Key = "Select civil without legs support items",
                //                Label = "Select civil without legs support items",
                //                Manage = false,
                //                Required = false,
                //                Value = _unitOfWork.CivilNonSteelRepository.GetByID(AllCivilInst.civilNonSteelId.Value).Name
                //            });
                //            MWInstallationInfo.Add(new BaseInstAttView
                //            {
                //                AutoFill = false,
                //                DataType = "List",
                //                DataTypeId = null,
                //                Desc = "Select the BU",
                //                enable = true,
                //                Id = MW_RFU.MwPort.MwBUId,
                //                Key = "Select the BU",
                //                Label = "Select the BU",
                //                Manage = false,
                //                Required = false,
                //                Value = MW_RFU.MwPort.MwBU.Name
                //            });
                //            MWInstallationInfo.Add(new BaseInstAttView
                //            {
                //                AutoFill = false,
                //                DataType = "List",
                //                DataTypeId = null,
                //                Desc = "Select the port of BU",
                //                enable = true,
                //                Id = MW_RFU.MwPortId.Value,
                //                Key = "Select the port of BU",
                //                Label = "Select the port of BU",
                //                Manage = false,
                //                Required = false,
                //                Value = MW_RFU.MwPort.Port_Name
                //            });
                //        }
                //        MWInstallationInfo.Add(new BaseInstAttView
                //        {
                //            AutoFill = false,
                //            DataType = "List",
                //            DataTypeId = null,
                //            Desc = "allLoadInstId",
                //            enable = false,
                //            Id = AllLoadInst.Id,
                //            Key = "allLoadInstId",
                //            Label = "allLoadInstId",
                //            Manage = false,
                //            Required = false,
                //            Value = AllLoadInst.Id
                //        });

                //        objectInst.SideArmInstallationInfo = MWInstallationInfo;

                //    }
                //}
                //else if (LoadSubType.TLImwOther.ToString() == TableName)
                //{
                //    TLImwOther mwOther = _unitOfWork.Mw_OtherRepository
                //        .GetIncludeWhereFirst(x => x.Id == MWInsId, x => x.mwOtherLibrary);

                //    MW_OtherLibraryViewModel MwOtherLibrary = _mapper.Map<MW_OtherLibraryViewModel>(_unitOfWork.MW_OtherLibraryRepository
                //        .GetIncludeWhereFirst(x => x.Id == mwOther.mwOtherLibraryId));

                //    List<BaseAttView> LibraryAttributes = _unitOfWork.AttributeActivatedRepository
                //       .GetAttributeActivated(TablesNames.TLImwOtherLibrary.ToString(), MwOtherLibrary, null).ToList();

                //    foreach (BaseAttView LibraryAttribute in LibraryAttributes)
                //    {
                //        if (LibraryAttribute.DataType.ToLower() == "list")
                //        {
                //            LibraryAttribute.Value = MwOtherLibrary.GetType().GetProperties()
                //                .FirstOrDefault(x => x.Name.ToLower() == LibraryAttribute.Label.ToLower()).GetValue(MwOtherLibrary);
                //        }
                //    }
                //    List<BaseAttView> LogisticalAttributes = _mapper.Map<List<BaseAttView>>(_unitOfWork.LogistcalRepository
                //       .GetLogistical(TablePartName.MW.ToString(), TablesNames.TLImwOtherLibrary.ToString(), MwOtherLibrary.Id).ToList());

                //    LibraryAttributes.AddRange(LogisticalAttributes);
                //    objectInst.LibraryActivatedAttributes = LibraryAttributes;

                //    List<BaseInstAttView> ListAttributesActivated = _unitOfWork.AttributeActivatedRepository
                //        .GetInstAttributeActivated(LoadSubType.TLImwOther.ToString(), mwOther, "InstallationPlaceId").ToList();

                //    BaseInstAttView NameAttribute = ListAttributesActivated.FirstOrDefault(x => x.Key.ToLower() == "Name".ToLower());
                //    if (NameAttribute != null)
                //    {
                //        BaseInstAttView Swap = ListAttributesActivated[0];
                //        ListAttributesActivated[ListAttributesActivated.IndexOf(NameAttribute)] = Swap;
                //        ListAttributesActivated[0] = NameAttribute;
                //    }
                //    foreach (BaseInstAttView FKitem in ListAttributesActivated)
                //    {
                //        if (FKitem.Desc.ToLower() == "tlimwotherlibrary")
                //        {
                //            if (mwOther.mwOtherLibrary == null)
                //                FKitem.Value = "NA";

                //            else
                //            {
                //                FKitem.Value = mwOther.mwOtherLibrary.Model;
                //            }
                //        }
                //    }
                //    objectInst.AttributesActivated = ListAttributesActivated;

                //    objectInst.DynamicAtts = _unitOfWork.DynamicAttInstValueRepository
                //       .GetDynamicInstAtts(TableNameEntity.Id, MWInsId, null);

                //    AllLoadInst = _unitOfWork.AllLoadInstRepository.GetWhereFirst(x => x.mwOtherId == MWInsId);

                //    CivilLoads = _unitOfWork.CivilLoadsRepository
                //        .GetIncludeWhereFirst(x => x.allLoadInstId == AllLoadInst.Id, x => x.sideArm, x => x.site, x => x.leg, x => x.allCivilInst,
                //            x => x.allLoadInst.loadOther, x => x.allLoadInst.mwBU, x => x.allLoadInst.mwDish, x => x.allLoadInst.mwODU, x => x.allLoadInst.mwOther,
                //            x => x.allLoadInst.mwRFU, x => x.allLoadInst.power, x => x.allLoadInst.radioAntenna, x => x.allLoadInst.radioOther, x => x.allLoadInst.radioRRU,
                //            x => x.allCivilInst.civilWithLegs, x => x.allCivilInst.civilWithoutLeg, x => x.allCivilInst.civilNonSteel, x => x.civilSteelSupportCategory);

                //    LoadInstAttributes = _unitOfWork.AttributeActivatedRepository
                //        .GetAttributeActivated(TablesNames.TLIcivilLoads.ToString(), CivilLoads, null, "allLoadInstId",
                //            "Dismantle", "SiteCode", "civilSteelSupportCategoryId", "legId", "Leg2Id",
                //                "sideArmId", "allCivilInstId").ToList();

                //    List<KeyValuePair<string, List<DropDownListFilters>>> CivilLoadsRelatedTables = _unitOfWork.CivilLoadsRepository
                //        .GetRelatedTables(CivilLoads.SiteCode);
                //    if (CivilLoads != null)
                //    {
                //        List<KeyValuePair<string, List<DropDownListFilters>>> mwotherRelatedTables = _unitOfWork.Mw_OtherRepository
                //            .GetRelatedTables();
                //        mwotherRelatedTables.AddRange(CivilLoadsRelatedTables);

                //        if (CivilLoads.allCivilInst.civilWithLegsId != null)
                //        {
                //            List<TLIleg> LegsForCivilWithLegLibrary = _unitOfWork.LegRepository
                //                .GetWhere(x => x.CivilWithLegInstId == CivilLoads.allCivilInst.civilWithLegsId).ToList();

                //            List<DropDownListFilters> LegIds = _mapper.Map<List<DropDownListFilters>>(LegsForCivilWithLegLibrary);

                //            mwotherRelatedTables.Add(new KeyValuePair<string, List<DropDownListFilters>>("Leg1Id", LegIds));

                //            List<TLIleg> Legs2ForCivilWithLegLibrary = LegsForCivilWithLegLibrary.Except(LegsForCivilWithLegLibrary
                //                .Where(x => x.Id == CivilLoads.legId)).ToList();

                //            List<DropDownListFilters> Leg2Ids = _mapper.Map<List<DropDownListFilters>>(Legs2ForCivilWithLegLibrary);

                //            mwotherRelatedTables.Add(new KeyValuePair<string, List<DropDownListFilters>>("Leg2Id", Leg2Ids));
                //        }

                //        objectInst.RelatedTables = mwotherRelatedTables;

                //        AllCivilInst = _unitOfWork.CivilLoadsRepository
                //           .GetIncludeWhereFirst(x => (x.allLoadInstId != null ? (x.allLoadInst.mwOtherId != null ?
                //               x.allLoadInst.mwOtherId.Value == MWInsId : false) : false) && !x.Dismantle, x => x.allCivilInst, x => x.allLoadInst).allCivilInst;

                //        if (AllCivilInst.civilWithLegsId != null)
                //        {
                //            MWInstallationInfo.Add(new BaseInstAttView
                //            {
                //                AutoFill = false,
                //                DataType = "List",
                //                DataTypeId = null,
                //                Desc = "Select civil support type",
                //                enable = true,
                //                Id = -1,
                //                Key = "Select civil support type",
                //                Label = "Select civil support type",
                //                Manage = false,
                //                Required = false,
                //                Value = "Civil with legs"
                //            });
                //            MWInstallationInfo.Add(new BaseInstAttView
                //            {
                //                AutoFill = false,
                //                DataType = "List",
                //                DataTypeId = null,
                //                Desc = "Select civil with legs support items",
                //                enable = true,
                //                Id = AllCivilInst.Id,
                //                Key = "Select civil with legs support items",
                //                Label = "Select civil with legs support items",
                //                Manage = false,
                //                Required = false,
                //                Value = _unitOfWork.CivilWithLegsRepository.GetByID(AllCivilInst.civilWithLegsId.Value).Name
                //            });

                //            if (CivilLoads.sideArmId != null)
                //            {
                //                MWInstallationInfo.Add(new BaseInstAttView
                //                {
                //                    AutoFill = false,
                //                    DataType = "List",
                //                    DataTypeId = null,
                //                    Desc = "Select the installation place type",
                //                    enable = true,
                //                    Id = -1,
                //                    Key = "Select the installation place type",
                //                    Label = "Select the installation place type",
                //                    Manage = false,
                //                    Required = false,
                //                    Value = "SideArm"
                //                });
                //                MWInstallationInfo.Add(new BaseInstAttView
                //                {
                //                    AutoFill = false,
                //                    DataType = "List",
                //                    DataTypeId = null,
                //                    Desc = "Select the sidearm",
                //                    enable = true,
                //                    Id = CivilLoads.sideArmId.Value,
                //                    Key = "Select the sidearm",
                //                    Label = "Select the sidearm",
                //                    Manage = false,
                //                    Required = false,
                //                    Value = CivilLoads.sideArm.Name
                //                });
                //            }
                //            else if (CivilLoads.legId != null)
                //            {
                //                MWInstallationInfo.Add(new BaseInstAttView
                //                {
                //                    AutoFill = false,
                //                    DataType = "List",
                //                    DataTypeId = null,
                //                    Desc = "Select the installation place type",
                //                    enable = true,
                //                    Id = -1,
                //                    Key = "Select the installation place type",
                //                    Label = "Select the installation place type",
                //                    Manage = false,
                //                    Required = false,
                //                    Value = "Leg"
                //                });
                //                MWInstallationInfo.Add(new BaseInstAttView
                //                {
                //                    AutoFill = false,
                //                    DataType = "List",
                //                    DataTypeId = null,
                //                    Desc = "Select the leg",
                //                    enable = true,
                //                    Id = CivilLoads.legId.Value,
                //                    Key = "Select the leg",
                //                    Label = "Select the leg",
                //                    Manage = false,
                //                    Required = false,
                //                    Value = CivilLoads.leg.CiviLegName
                //                });
                //            }
                //            else
                //            {
                //                MWInstallationInfo.Add(new BaseInstAttView
                //                {
                //                    AutoFill = false,
                //                    DataType = "List",
                //                    DataTypeId = null,
                //                    Desc = "Select the installation place type",
                //                    enable = true,
                //                    Id = -1,
                //                    Key = "Select the installation place type",
                //                    Label = "Select the installation place type",
                //                    Manage = false,
                //                    Required = false,
                //                    Value = "Direct"
                //                });
                //            }
                //        }
                //        else if (AllCivilInst.civilWithoutLegId != null)
                //        {
                //            MWInstallationInfo.Add(new BaseInstAttView
                //            {
                //                AutoFill = false,
                //                DataType = "List",
                //                DataTypeId = null,
                //                Desc = "Select civil support type",
                //                enable = true,
                //                Id = -1,
                //                Key = "Select civil support type",
                //                Label = "Select civil support type",
                //                Manage = false,
                //                Required = false,
                //                Value = "Civil without legs"
                //            });
                //            MWInstallationInfo.Add(new BaseInstAttView
                //            {
                //                AutoFill = false,
                //                DataType = "List",
                //                DataTypeId = null,
                //                Desc = "Select civil without legs support items",
                //                enable = true,
                //                Id = AllCivilInst.Id,
                //                Key = "Select civil without legs support items",
                //                Label = "Select civil without legs support items",
                //                Manage = false,
                //                Required = false,
                //                Value = _unitOfWork.CivilWithoutLegRepository.GetByID(AllCivilInst.civilWithoutLegId.Value).Name
                //            });

                //            if (CivilLoads.sideArmId != null)
                //            {
                //                MWInstallationInfo.Add(new BaseInstAttView
                //                {
                //                    AutoFill = false,
                //                    DataType = "List",
                //                    DataTypeId = null,
                //                    Desc = "Select the installation place type",
                //                    enable = true,
                //                    Id = -1,
                //                    Key = "Select the installation place type",
                //                    Label = "Select the installation place type",
                //                    Manage = false,
                //                    Required = false,
                //                    Value = "SideArm"
                //                });
                //                MWInstallationInfo.Add(new BaseInstAttView
                //                {
                //                    AutoFill = false,
                //                    DataType = "List",
                //                    DataTypeId = null,
                //                    Desc = "Select the sidearm",
                //                    enable = true,
                //                    Id = CivilLoads.sideArmId.Value,
                //                    Key = "Select the sidearm",
                //                    Label = "Select the sidearm",
                //                    Manage = false,
                //                    Required = false,
                //                    Value = CivilLoads.sideArm.Name
                //                });
                //            }
                //            else
                //            {
                //                MWInstallationInfo.Add(new BaseInstAttView
                //                {
                //                    AutoFill = false,
                //                    DataType = "List",
                //                    DataTypeId = null,
                //                    Desc = "Select the installation place type",
                //                    enable = true,
                //                    Id = -1,
                //                    Key = "Select the installation place type",
                //                    Label = "Select the installation place type",
                //                    Manage = false,
                //                    Required = false,
                //                    Value = "Direct"
                //                });
                //            }
                //        }
                //        else if (AllCivilInst.civilNonSteelId != null)
                //        {
                //            MWInstallationInfo.Add(new BaseInstAttView
                //            {
                //                AutoFill = false,
                //                DataType = "List",
                //                DataTypeId = null,
                //                Desc = "Select civil support type",
                //                enable = true,
                //                Id = -1,
                //                Key = "Select civil support type",
                //                Label = "Select civil support type",
                //                Manage = false,
                //                Required = false,
                //                Value = "Civil non steel"
                //            });
                //            MWInstallationInfo.Add(new BaseInstAttView
                //            {
                //                AutoFill = false,
                //                DataType = "List",
                //                DataTypeId = null,
                //                Desc = "Select civil non steel support items",
                //                enable = true,
                //                Id = AllCivilInst.Id,
                //                Key = "Select civil non steel support items",
                //                Label = "Select civil non steel support items",
                //                Manage = false,
                //                Required = false,
                //                Value = _unitOfWork.CivilNonSteelRepository.GetByID(AllCivilInst.civilNonSteelId.Value).Name
                //            });

                //            if (CivilLoads.sideArmId != null)
                //            {
                //                MWInstallationInfo.Add(new BaseInstAttView
                //                {
                //                    AutoFill = false,
                //                    DataType = "List",
                //                    DataTypeId = null,
                //                    Desc = "Select the installation place type",
                //                    enable = true,
                //                    Id = -1,
                //                    Key = "Select the installation place type",
                //                    Label = "Select the installation place type",
                //                    Manage = false,
                //                    Required = false,
                //                    Value = "SideArm"
                //                });
                //                MWInstallationInfo.Add(new BaseInstAttView
                //                {
                //                    AutoFill = false,
                //                    DataType = "List",
                //                    DataTypeId = null,
                //                    Desc = "Select the sidearm",
                //                    enable = true,
                //                    Id = CivilLoads.sideArmId.Value,
                //                    Key = "Select the sidearm",
                //                    Label = "Select the sidearm",
                //                    Manage = false,
                //                    Required = false,
                //                    Value = CivilLoads.sideArm.Name
                //                });
                //            }
                //            else
                //            {
                //                MWInstallationInfo.Add(new BaseInstAttView
                //                {
                //                    AutoFill = false,
                //                    DataType = "List",
                //                    DataTypeId = null,
                //                    Desc = "Select the installation place type",
                //                    enable = true,
                //                    Id = -1,
                //                    Key = "Select the installation place type",
                //                    Label = "Select the installation place type",
                //                    Manage = false,
                //                    Required = false,
                //                    Value = "Direct"
                //                });
                //            }
                //        }

                //        MWInstallationInfo.Add(new BaseInstAttView
                //        {
                //            AutoFill = false,
                //            DataType = "List",
                //            DataTypeId = null,
                //            Desc = "allLoadInstId",
                //            enable = false,
                //            Id = AllLoadInst.Id,
                //            Key = "allLoadInstId",
                //            Label = "allLoadInstId",
                //            Manage = false,
                //            Required = false,
                //            Value = AllLoadInst.Id
                //        });
                //        objectInst.SideArmInstallationInfo = MWInstallationInfo;
                //    }
                //}

                return new Response<GetForAddLoadObject>(true, objectInst, null, null, (int)ApiReturnCode.success);
            }
            catch (Exception err)
            {
                return new Response<GetForAddLoadObject>(true, null, null, err.Message, (int)ApiReturnCode.fail);
            }
        }
        public Response<GetForAddLoadObject> GetMWDishInstallationById(int MWInsId, string TableName)
        {
            try
            {
                TLItablesNames TableNameEntity = _unitOfWork.TablesNamesRepository.GetWhereFirst(c => c.TableName == TableName);
                GetForAddLoadObject objectInst = new GetForAddLoadObject();
                List<BaseInstAttViews> Civilload = new List<BaseInstAttViews>();
                List<BaseInstAttViews> Config = new List<BaseInstAttViews>();


                var MWDish = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => x.allLoadInstId != null && x.allLoadInst.mwDishId == MWInsId
                && !x.Dismantle, x => x.allCivilInst, x => x.allCivilInst.civilNonSteel, x => x.allCivilInst.civilWithLegs, x => x.allCivilInst.civilWithoutLeg,
                x => x.allLoadInst, x => x.allLoadInst.mwDish, x => x.allLoadInst.mwDish.MwDishLibrary,
                x => x.allLoadInst.mwDish.RepeaterType, x => x.allLoadInst.mwDish.owner, x => x.allLoadInst.mwDish.PolarityOnLocation,
                x => x.allLoadInst.mwDish.ItemConnectTo, x => x.allLoadInst.mwDish.InstallationPlace,
                x => x.allLoadInst.mwDish.MwDishLibrary, x => x.sideArm, x => x.leg);

                if (MWDish != null)
                {
                    EditMWDishLibraryAttributes MwdishLibrary = _mapper.Map<EditMWDishLibraryAttributes>(MWDish.allLoadInst.mwDish.MwDishLibrary);

                    List<BaseInstAttViews> LibraryAttributes = _unitOfWork.AttributeActivatedRepository
                        .GetAttributeActivatedGetLibrary(TablesNames.TLImwDishLibrary.ToString(), MwdishLibrary, null).ToList();

                    LibraryAttributes
                        .Where(FKitem => FKitem.DataType.ToLower() == "list" && !string.IsNullOrEmpty(FKitem.Label))
                        .ToList()
                        .Select(FKitem =>
                        {
                            if (FKitem.Label.ToLower() == "polaritytype_name")
                            {
                                FKitem.Options = _mapper.Map<List<PolarityTypeViewModel>>(_unitOfWork.PolarityTypeRepository.GetWhere(x => !x.Delete && !x.Disable).ToList());
                                FKitem.Value = _mapper.Map<PolarityTypeViewModel>(MWDish.allLoadInst.mwDish.MwDishLibrary.polarityType);
                            }
                            else if (FKitem.Label.ToLower() == "astype_name")
                            {
                                FKitem.Options = _mapper.Map<List<AsTypeViewModel>>(_unitOfWork.AsTypeRepository.GetWhere(x => !x.Delete && !x.Disable).ToList());
                                FKitem.Value = _mapper.Map<AsTypeViewModel>(MWDish.allLoadInst.mwDish.MwDishLibrary.asType);
                            }

                            return FKitem;
                        })
                        .ToList();

                    List<BaseInstAttViews> LogisticalAttributes = _mapper.Map<List<BaseInstAttViews>>(_unitOfWork.LogistcalRepository
                        .GetLogisticals(TablePartName.MW.ToString(), TablesNames.TLImwDishLibrary.ToString(), MWDish.allLoadInst.mwDish.MwDishLibrary.Id).ToList());

                    LibraryAttributes.AddRange(LogisticalAttributes);

                    objectInst.LibraryAttribute = LibraryAttributes;

                    List<BaseInstAttViews> ListAttributesActivated = _unitOfWork.AttributeActivatedRepository
                        .GetInstAttributeActivatedGetForAdd(TablesNames.TLImwDish.ToString(), MWDish.allLoadInst.mwDish
                            ).ToList();

                    BaseInstAttViews NameAttribute = ListAttributesActivated.FirstOrDefault(x => x.Key.ToLower() == "DishName".ToLower());
                    if (NameAttribute != null)
                    {
                        BaseInstAttViews Swap = ListAttributesActivated[0];
                        ListAttributesActivated[ListAttributesActivated.IndexOf(NameAttribute)] = Swap;
                        ListAttributesActivated[0] = NameAttribute;
                        NameAttribute.Value = _dbContext.MV_MWDISH_VIEW.FirstOrDefault(x => x.Id == MWInsId)?.DishName;
                    }
                    var foreignKeyAttributes = ListAttributesActivated.Select(FKitem =>
                    {
                        switch (FKitem.Label.ToLower())
                        {

                            case "polarityonlocation_name":
                                FKitem.Value = _mapper.Map<PolarityOnLocationViewModel>(MWDish.allLoadInst.mwDish.PolarityOnLocation);
                                FKitem.Options = _mapper.Map<List<PolarityOnLocationViewModel>>(_unitOfWork.PolarityOnLocationRepository.GetWhere(x => !x.Deleted && !x.Disable).ToList());
                                break;
                            case "repeatertype_name":
                                if (MWDish.allLoadInst.mwDish.RepeaterType != null)
                                {
                                    FKitem.Value = _mapper.Map<RepeaterTypeViewModel>(MWDish.allLoadInst.mwDish.RepeaterType);
                                    FKitem.Options = _mapper.Map<List<RepeaterTypeViewModel>>(_unitOfWork.RepeaterTypeRepository.GetWhere(x => !x.Deleted && !x.Disable).ToList());
                                }
                                else
                                {
                                    FKitem.Value = new object[0];
                                    FKitem.Options = _mapper.Map<List<RepeaterTypeViewModel>>(_unitOfWork.RepeaterTypeRepository.GetWhere(x => !x.Deleted && !x.Disable).ToList());

                                }
                                break;
                            case "itemconnectto_name":
                                FKitem.Value = _mapper.Map<ItemConnectToViewModel>(MWDish.allLoadInst.mwDish.ItemConnectTo);
                                FKitem.Options = _mapper.Map<List<ItemConnectToViewModel>>(_unitOfWork.ItemConnectToRepository.GetWhere(x => !x.Deleted && !x.Disable).ToList());
                                break;
                            case "owner_name":
                                if (MWDish.allLoadInst.mwDish.owner != null)
                                {
                                    FKitem.Value = _mapper.Map<OwnerViewModel>(MWDish.allLoadInst.mwDish.owner);
                                    FKitem.Options = _mapper.Map<List<OwnerViewModel>>(_unitOfWork.OwnerRepository.GetWhere(x => !x.Deleted && !x.Disable).ToList());

                                }
                                else
                                {
                                    FKitem.Value = null;
                                    FKitem.Options = _mapper.Map<List<OwnerViewModel>>(_unitOfWork.OwnerRepository.GetWhere(x => !x.Deleted && !x.Disable).ToList());

                                }
                                break;
                            case "mw_link_name":
                                if (MWDish.allLoadInst.mwDish.MW_LinkId != null)
                                {
                                    FKitem.Value = _mapper.Map<OwnerViewModel>(_unitOfWork.MW_DishRepository.GetWhereFirst(x => x.Id == MWDish.allLoadInst.mwDish.MW_LinkId));
                                    FKitem.Options = _mapper.Map<List<OwnerViewModel>>(_unitOfWork.CivilLoadsRepository.GetIncludeWhere(x => x.allLoadInst != null && x.allLoadInst.mwDishId != null
                                    && x.allLoadInst.mwDishId != MWInsId && !x.Dismantle && x.SiteCode == MWDish.SiteCode, x => x.allLoadInst, x => x.allLoadInst.mwDish).Select(x => x.allLoadInst.mwDish).ToList());
                                }
                                else
                                {
                                    FKitem.Value = null;
                                    FKitem.Options = _mapper.Map<List<OwnerViewModel>>(_unitOfWork.CivilLoadsRepository.GetIncludeWhere(x => x.allLoadInst != null && x.allLoadInst.mwDishId != null
                                    && x.allLoadInst.mwDishId != MWInsId && !x.Dismantle && x.SiteCode == MWDish.SiteCode, x => x.allLoadInst, x => x.allLoadInst.mwDish).Select(x => x.allLoadInst.mwDish).ToList());

                                }
                                break;
                        }
                        return FKitem;
                    }).ToList();
                    var selectedAttributes = ListAttributesActivated
                    .Where(x => new[] { "installationplace_name" }
                                .Contains(x.Label.ToLower()))
                    .ToList();

                    var ExeptAttributes = ListAttributesActivated
                    .Where(x => new[] { "installationplace_name", "mwdishlibrary_name" }
                                .Contains(x.Label.ToLower()))
                    .ToList();
                    var foreignKeyAttribute = selectedAttributes.Select(FKitem =>
                    {
                        switch (FKitem.Label.ToLower())
                        {
                            case "installationplace_name":
                                FKitem.Key = "installationPlaceId";
                                FKitem.Label = "Select Installation Place";
                                FKitem.Value = _mapper.Map<InstallationPlaceViewModel>(MWDish.allLoadInst.mwDish.InstallationPlace);
                                FKitem.Options = _mapper.Map<List<InstallationPlaceViewModel>>(_dbContext.TLIinstallationPlace.ToList());
                                break;


                        }
                        return FKitem;
                    }).ToList();

                    Config.AddRange(foreignKeyAttribute);

                    if (MWDish.allCivilInst != null)
                    {
                        List<SectionsLegTypeViewModel> sectionsLegTypeViewModels = new List<SectionsLegTypeViewModel>
                            {
                                new SectionsLegTypeViewModel { Id = 1, Name = "civilWithoutLeg" },
                                new SectionsLegTypeViewModel { Id = 2, Name = "civilNonSteel" },
                                new SectionsLegTypeViewModel { Id = 0, Name = "civilWithLeg" }
                            };

                        void AddBaseInstAttView(string key, string label, object value, object options, bool Visable)
                        {
                            Config.Add(new BaseInstAttViews
                            {
                                Key = key,
                                Label = label,
                                Value = value,
                                Options = options,
                                DataType = "List",
                                visible = Visable
                            });
                        }

                        void ConfigureView3(string steelTypeKey, SectionsLegTypeViewModel steelTypeValue, string idKey, object idValue, object idOptions)
                        {
                            AddBaseInstAttView("civilSteelType", "Select Civil Steel Type", steelTypeValue, _mapper.Map<List<SectionsLegTypeViewModel>>(sectionsLegTypeViewModels), true);
                            AddBaseInstAttView(idKey, $"Select {steelTypeKey}", _mapper.Map<SectionsLegTypeViewModel>(idValue), _mapper.Map<List<SectionsLegTypeViewModel>>(idOptions), true);
                            AddBaseInstAttView("civilWithoutLegId", "Select Civil Without Leg", null, new object[0], false);
                            AddBaseInstAttView("civilNonSteelId", "Select Civil Non Steel", null, new object[0], false);
                        }
                        void ConfigureView1(string steelTypeKey, SectionsLegTypeViewModel steelTypeValue, string idKey, object idValue, object idOptions)
                        {
                            AddBaseInstAttView("civilSteelType", "Select Civil Steel Type", steelTypeValue, _mapper.Map<List<SectionsLegTypeViewModel>>(sectionsLegTypeViewModels), true);
                            AddBaseInstAttView(idKey, $"Select {steelTypeKey}", _mapper.Map<SectionsLegTypeViewModel>(idValue), _mapper.Map<List<SectionsLegTypeViewModel>>(idOptions), true);
                            AddBaseInstAttView("civilWithLegId", "Select Civil With Leg", null, new object[0], false);

                            AddBaseInstAttView("civilNonSteelId", "Select Civil Non Steel", null, new object[0], false);
                        }
                        void ConfigureView2(string steelTypeKey, SectionsLegTypeViewModel steelTypeValue, string idKey, object idValue, object idOptions)
                        {
                            AddBaseInstAttView("civilSteelType", "Select Civil Steel Type", steelTypeValue, _mapper.Map<List<SectionsLegTypeViewModel>>(sectionsLegTypeViewModels), true);
                            AddBaseInstAttView(idKey, $"Select {steelTypeKey}", _mapper.Map<SectionsLegTypeViewModel>(idValue), _mapper.Map<List<SectionsLegTypeViewModel>>(idOptions), true);
                            AddBaseInstAttView("civilWithLegId", "Select Civil With Leg", null, new object[0], false);
                            AddBaseInstAttView("civilWithoutLegId", "Select Civil Without Leg", null, new object[0], false);

                        }
                        if (MWDish.allCivilInst.civilWithoutLegId != null)
                        {
                            ConfigureView1("civilWithoutLeg", sectionsLegTypeViewModels[0], "civilWithoutLegId", MWDish.allCivilInst.civilWithoutLeg, _dbContext.MV_CIVIL_WITHOUTLEGS_VIEW.Where(x => x.Id == MWDish.allCivilInst.civilWithoutLegId));

                        }
                        else if (MWDish.allCivilInst.civilNonSteelId != null)
                        {
                            ConfigureView2("civilNonSteel", sectionsLegTypeViewModels[1], "civilNonSteelId", MWDish.allCivilInst.civilNonSteel, _dbContext.MV_CIVIL_NONSTEEL_VIEW.Where(x => x.Id == MWDish.allCivilInst.civilNonSteelId));
                        }
                        else if (MWDish.allCivilInst.civilWithLegsId != null)
                        {
                            ConfigureView3("civilWithLeg", sectionsLegTypeViewModels[2], "civilWithLegId", MWDish.allCivilInst.civilWithLegs, _dbContext.MV_CIVIL_WITHLEGS_VIEW.Where(x => x.Id == MWDish.allCivilInst.civilWithLegsId));
                        }
                        if (MWDish.legId != null)
                        {

                            var Leg1 = _unitOfWork.LegRepository.GetWhereFirst(x => x.Id == MWDish.legId);
                            if (Leg1 != null)
                            {
                                List<SectionsLegTypeViewModel> sectionsLegTypeViewModel = new List<SectionsLegTypeViewModel>();
                                sectionsLegTypeViewModel.Add(new SectionsLegTypeViewModel
                                {
                                    Id = Leg1.Id,
                                    Name = Leg1.CiviLegName
                                });

                                BaseInstAttViews baseInstAttViews = new BaseInstAttViews
                                {
                                    Key = "legId",
                                    Value = Leg1.Id,
                                    Label = "Select Leg",
                                    Options = sectionsLegTypeViewModel,
                                    DataType = "list",
                                    visible = false
                                };
                                Config.Add(baseInstAttViews);
                            }

                        }
                        if (MWDish.sideArmId != null)
                        {
                            List<int> ints = new List<int>();
                            List<SectionsLegTypeViewModel> sectionsLegTypeViewModelsidearm = new List<SectionsLegTypeViewModel>();
                            SectionsLegTypeViewModel sectionsLegTypeViewModel = new SectionsLegTypeViewModel()
                            {
                                Id = Convert.ToInt32(MWDish.sideArmId),
                                Name = _dbContext.MV_SIDEARM_VIEW.FirstOrDefault(x => x.Id == MWDish.sideArm.Id)?.Name,
                            };
                            ints.Add(sectionsLegTypeViewModel.Id);
                            sectionsLegTypeViewModelsidearm.Add(sectionsLegTypeViewModel);
                            var SideArmCount = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => x.allLoadInstId != null && x.Id != MWDish.Id && x.allLoadInst.mwDishId == MWInsId
                            && !x.Dismantle, x => x.allCivilInst, x => x.allCivilInst.civilNonSteel, x => x.allCivilInst.civilWithLegs, x => x.allCivilInst.civilWithoutLeg, x => x.allLoadInst, x => x.allLoadInst.mwDish, x => x.allLoadInst.mwDish.MwDishLibrary,
                            x => x.allLoadInst.mwDish.RepeaterType, x => x.allLoadInst.mwDish.owner, x => x.allLoadInst.mwDish.PolarityOnLocation,
                            x => x.allLoadInst.mwDish.ItemConnectTo, x => x.allLoadInst.mwDish.InstallationPlace, x => x.allLoadInst.mwDish.MwDishLibrary);

                            if (SideArmCount != null)
                            {
                                SectionsLegTypeViewModel sectionsLegTypeViewModelss = new SectionsLegTypeViewModel()
                                {
                                    Id = Convert.ToInt32(SideArmCount.sideArmId),
                                    Name = _dbContext.MV_SIDEARM_VIEW.FirstOrDefault(x => x.Id == SideArmCount.sideArm.Id)?.Name,
                                };
                                ints.Add(sectionsLegTypeViewModel.Id);
                                sectionsLegTypeViewModelsidearm.Add(sectionsLegTypeViewModelss);
                            }
                            BaseInstAttViews baseInstAttViews = new BaseInstAttViews();
                            baseInstAttViews.Key = "sideArmId";
                            baseInstAttViews.Value = ints;
                            baseInstAttViews.Label = "Select sideArm'";
                            baseInstAttViews.Options = sectionsLegTypeViewModelsidearm;
                            baseInstAttViews.DataType = "MultiSelect";
                            Config.Add(baseInstAttViews);
                        }
                        if (MWDish.sideArm == null)
                        {
                            BaseInstAttViews baseInstAttViews = new BaseInstAttViews();
                            baseInstAttViews.Key = "sideArmId";
                            baseInstAttViews.Value = null;
                            baseInstAttViews.Label = "Select sideArm'";
                            baseInstAttViews.Options = new object[0];
                            baseInstAttViews.DataType = "MultiSelect";
                            baseInstAttViews.visible = false;
                            Config.Add(baseInstAttViews);

                        }
                        if (MWDish.legId == null)
                        {
                            BaseInstAttViews baseInstAttViews = new BaseInstAttViews
                            {
                                Key = "legId",
                                Value = null,
                                Label = "Select Leg",
                                Options = new object[0],
                                DataType = "list",
                                visible = false
                            };
                            Config.Add(baseInstAttViews);
                        }
                        objectInst.installationConfig = Config;
                    }
                    var InstallationDate = new BaseInstAttViews()
                    {
                        Key = "InstallationDate",
                        Value = MWDish.InstallationDate,
                        DataType = "datetime",
                        Label = "InstallationDate",


                    };
                    Civilload.Add(InstallationDate);
                    var ItemOnCivilStatus = new BaseInstAttViews()
                    {
                        Key = "ItemOnCivilStatus",
                        Value = MWDish.ItemOnCivilStatus,
                        DataType = "string",
                        Label = "ItemOnCivilStatus",


                    };
                    Civilload.Add(ItemOnCivilStatus);
                    var ItemStatus = new BaseInstAttViews()
                    {
                        Key = "ItemStatus",
                        Value = MWDish.ItemStatus,
                        DataType = "string",
                        Label = "ItemStatus",


                    };
                    Civilload.Add(ItemStatus);
                    var ReservedSpace = new BaseInstAttViews()
                    {
                        Key = "ReservedSpace",
                        Value = MWDish.ReservedSpace,
                        DataType = "bool",
                        Label = "ReservedSpace",

                    };
                    Civilload.Add(ReservedSpace);


                    objectInst.InstallationAttributes = ListAttributesActivated;
                    objectInst.CivilLoads = Civilload;
                    objectInst.InstallationAttributes = objectInst.InstallationAttributes.Except(ExeptAttributes).ToList();
                    objectInst.DynamicAttribute = _unitOfWork.DynamicAttInstValueRepository.
                        GetDynamicInstAtt(TableNameEntity.Id, MWInsId, null);

                    return new Response<GetForAddLoadObject>(false, objectInst, null, null, (int)ApiReturnCode.fail);
                }
                else
                {
                    return new Response<GetForAddLoadObject>(false, null, null, "this id is not found", (int)ApiReturnCode.fail);
                }

                return new Response<GetForAddLoadObject>(true, objectInst, null, null, (int)ApiReturnCode.success);
            }
            catch (Exception err)
            {
                return new Response<GetForAddLoadObject>(true, null, null, err.Message, (int)ApiReturnCode.fail);
            }
        }
        public Response<GetForAddLoadObject> GetMWODUInstallationById(int MWInsId, string TableName)
        {
            try
            {
                TLItablesNames TableNameEntity = _unitOfWork.TablesNamesRepository.GetWhereFirst(c => c.TableName == TableName);
                GetForAddLoadObject objectInst = new GetForAddLoadObject();
                List<BaseInstAttViews> Civilload = new List<BaseInstAttViews>();
                List<BaseInstAttViews> Config = new List<BaseInstAttViews>();

                var MWODU = _unitOfWork.CivilLoadsRepository.GetIncludeWhereFirst(x => x.allLoadInstId != null
                && x.allLoadInst.mwODUId == MWInsId && !x.Dismantle, x => x.allCivilInst,
                x => x.allCivilInst.civilNonSteel, x => x.allCivilInst.civilWithLegs,
                x => x.allCivilInst.civilWithoutLeg, x => x.allLoadInst, x => x.allLoadInst.mwODU,
                x => x.allLoadInst.mwDish.MwDishLibrary, x => x.allLoadInst.mwODU.Mw_Dish,
                x => x.allLoadInst.mwODU.OduInstallationType, x => x.allLoadInst.mwODU.Owner,
                x => x.allLoadInst.mwODU.MwODULibrary, x => x.sideArm);

                if (MWODU != null)
                {
                    EditMWODULibraryAttributes MwODULibrary = _mapper.Map<EditMWODULibraryAttributes>(MWODU.allLoadInst.mwODU.MwODULibrary);

                    List<BaseInstAttViews> LibraryAttributes = _unitOfWork.AttributeActivatedRepository
                        .GetAttributeActivatedGetLibrary(TablesNames.TLImwODULibrary.ToString(), MwODULibrary, null).ToList();

                    LibraryAttributes
                        .Where(FKitem => FKitem.DataType.ToLower() == "list" && !string.IsNullOrEmpty(FKitem.Label))
                        .ToList()
                        .Select(FKitem =>
                        {
                            if (FKitem.Label.ToLower() == "parity_name")
                            {
                                FKitem.Options = _mapper.Map<List<ParityViewModel>>(_unitOfWork.ParityRepository.GetWhere(x => !x.Delete && !x.Disable).ToList());
                                FKitem.Value = _mapper.Map<ParityViewModel>(MWODU.allLoadInst.mwODU.MwODULibrary.parity);
                            }

                            return FKitem;
                        })
                        .ToList();

                    List<BaseInstAttViews> LogisticalAttributes = _mapper.Map<List<BaseInstAttViews>>(_unitOfWork.LogistcalRepository
                        .GetLogisticals(TablePartName.MW.ToString(), TablesNames.TLImwODULibrary.ToString(), MWODU.allLoadInst.mwODU.MwODULibrary.Id).ToList());

                    LibraryAttributes.AddRange(LogisticalAttributes);

                    objectInst.LibraryAttribute = LibraryAttributes;

                    List<BaseInstAttViews> ListAttributesActivated = _unitOfWork.AttributeActivatedRepository
                        .GetInstAttributeActivatedGetForAdd(TablesNames.TLImwODU.ToString(), MWODU.allLoadInst.mwODU
                          , "EquivalentSpace").ToList();

                    BaseInstAttViews NameAttribute = ListAttributesActivated.FirstOrDefault(x => x.Key.ToLower() == "Name".ToLower());
                    if (NameAttribute != null)
                    {
                        BaseInstAttViews Swap = ListAttributesActivated[0];
                        ListAttributesActivated[ListAttributesActivated.IndexOf(NameAttribute)] = Swap;
                        ListAttributesActivated[0] = NameAttribute;
                        NameAttribute.Value = _dbContext.MV_MWODU_VIEW.FirstOrDefault(x => x.Id == MWInsId)?.Name;
                    }
                    var foreignKeyAttributes = ListAttributesActivated.Select(FKitem =>
                    {
                        switch (FKitem.Label.ToLower())
                        {

                            case "owner_name":
                                if (MWODU.allLoadInst.mwODU.Owner != null)
                                {
                                    FKitem.Value = _mapper.Map<OwnerViewModel>(MWODU.allLoadInst.mwODU.Owner);
                                    FKitem.Options = _mapper.Map<List<OwnerViewModel>>(_unitOfWork.OwnerRepository.GetWhere(x => !x.Deleted && !x.Disable).ToList());

                                }
                                else
                                {
                                    FKitem.Value = null;
                                    FKitem.Options = _mapper.Map<List<OwnerViewModel>>(_unitOfWork.OwnerRepository.GetWhere(x => !x.Deleted && !x.Disable).ToList());

                                }
                                break;

                        }
                        return FKitem;
                    }).ToList();
                    var ForeignKeyAttributes = ListAttributesActivated
                     .Where(x => new[] { "oduinstallationtype_name", "mw_dish_name" }
                                 .Contains(x.Label.ToLower()))
                     .ToList();

                    var ExeptAttributes = ListAttributesActivated
                    .Where(x => new[] { "oduinstallationtype_name", "mwodulibrary_name", "mw_dish_name" }
                                .Contains(x.Label.ToLower()))
                    .ToList();

                    var foreignKeyAttribute = ForeignKeyAttributes.Select(FKitem =>
                    {
                        switch (FKitem.Label.ToLower())
                        {
                            case "oduinstallationtype_name":
                                FKitem.Key = "installationPlaceId";
                                FKitem.Label = "Select Installation Mode";
                                FKitem.Value = _mapper.Map<OduInstallationTypeViewModel>(MWODU.allLoadInst.mwODU.OduInstallationType);
                                FKitem.Options = _mapper.Map<List<OduInstallationTypeViewModel>>(_unitOfWork.OduInstallationTypeRepository
                                    .GetWhere(x => !x.Deleted && !x.Disable));
                                break;
                            case "mw_dish_name":
                                FKitem.Key = "mwDishId";
                                FKitem.Label = "Select Mw Dish";
                                FKitem.Value = _mapper.Map<OwnerViewModel>(_dbContext.MV_MWDISH_VIEW.FirstOrDefault(x => x.Id ==
                                MWODU.allLoadInst.mwODU.Mw_Dish.Id));
                                FKitem.Options = _mapper.Map<OwnerViewModel>(_dbContext.MV_MWDISH_VIEW.FirstOrDefault(x => x.Id ==
                                MWODU.allLoadInst.mwODU.Mw_Dish.Id));
                                break;
                        }
                        return FKitem;
                    }).ToList();

                    Config.AddRange(foreignKeyAttribute);

                    if (MWODU.allCivilInst != null)
                    {
                        List<SectionsLegTypeViewModel> sectionsLegTypeViewModels = new List<SectionsLegTypeViewModel>
                            {
                                new SectionsLegTypeViewModel { Id = 1, Name = "civilWithoutLeg" },
                                new SectionsLegTypeViewModel { Id = 2, Name = "civilNonSteel" },
                                new SectionsLegTypeViewModel { Id = 0, Name = "civilWithLeg" }
                            };

                        void AddBaseInstAttView(string key, string label, object value, object options, bool Visable)
                        {
                            Config.Add(new BaseInstAttViews
                            {
                                Key = key,
                                Label = label,
                                Value = value,
                                Options = options,
                                DataType = "List",
                                visible = Visable
                            });
                        }

                        void ConfigureView3(string steelTypeKey, SectionsLegTypeViewModel steelTypeValue, string idKey, object idValue, object idOptions)
                        {
                            AddBaseInstAttView("civilSteelType", "Select Civil Steel Type", steelTypeValue, _mapper.Map<List<SectionsLegTypeViewModel>>(sectionsLegTypeViewModels), true);
                            AddBaseInstAttView(idKey, $"Select {steelTypeKey}", _mapper.Map<SectionsLegTypeViewModel>(idValue), _mapper.Map<List<SectionsLegTypeViewModel>>(idOptions), true);
                            AddBaseInstAttView("civilWithoutLegId", "Select Civil Without Leg", null, new object[0], false);
                            AddBaseInstAttView("civilNonSteelId", "Select Civil Non Steel", null, new object[0], false);
                        }
                        void ConfigureView1(string steelTypeKey, SectionsLegTypeViewModel steelTypeValue, string idKey, object idValue, object idOptions)
                        {
                            AddBaseInstAttView("civilSteelType", "Select Civil Steel Type", steelTypeValue, _mapper.Map<List<SectionsLegTypeViewModel>>(sectionsLegTypeViewModels), true);
                            AddBaseInstAttView(idKey, $"Select {steelTypeKey}", _mapper.Map<SectionsLegTypeViewModel>(idValue), _mapper.Map<List<SectionsLegTypeViewModel>>(idOptions), true);
                            AddBaseInstAttView("civilWithLegId", "Select Civil With Leg", null, new object[0], false);

                            AddBaseInstAttView("civilNonSteelId", "Select Civil Non Steel", null, new object[0], false);
                        }
                        void ConfigureView2(string steelTypeKey, SectionsLegTypeViewModel steelTypeValue, string idKey, object idValue, object idOptions)
                        {
                            AddBaseInstAttView("civilSteelType", "Select Civil Steel Type", steelTypeValue, _mapper.Map<List<SectionsLegTypeViewModel>>(sectionsLegTypeViewModels), true);
                            AddBaseInstAttView(idKey, $"Select {steelTypeKey}", _mapper.Map<SectionsLegTypeViewModel>(idValue), _mapper.Map<List<SectionsLegTypeViewModel>>(idOptions), true);
                            AddBaseInstAttView("civilWithLegId", "Select Civil With Leg", null, new object[0], false);
                            AddBaseInstAttView("civilWithoutLegId", "Select Civil Without Leg", null, new object[0], false);

                        }
                        if (MWODU.allCivilInst.civilWithoutLegId != null)
                        {
                            ConfigureView1("civilWithoutLeg", sectionsLegTypeViewModels[0], "civilWithoutLegId", MWODU.allCivilInst.civilWithoutLeg, _dbContext.MV_CIVIL_WITHOUTLEGS_VIEW.Where(x => x.Id == MWODU.allCivilInst.civilWithoutLegId));

                        }
                        else if (MWODU.allCivilInst.civilNonSteelId != null)
                        {
                            ConfigureView2("civilNonSteel", sectionsLegTypeViewModels[1], "civilNonSteelId", MWODU.allCivilInst.civilNonSteel, _dbContext.MV_CIVIL_NONSTEEL_VIEW.Where(x => x.Id == MWODU.allCivilInst.civilNonSteelId));
                        }
                        else if (MWODU.allCivilInst.civilWithLegsId != null)
                        {
                            ConfigureView3("civilWithLeg", sectionsLegTypeViewModels[2], "civilWithLegId", MWODU.allCivilInst.civilWithLegs, _dbContext.MV_CIVIL_WITHLEGS_VIEW.Where(x => x.Id == MWODU.allCivilInst.civilWithLegsId));
                        }

                        if (MWODU.sideArmId != 0 && MWODU.sideArmId != null)
                        {
                            BaseInstAttViews baseInstAttViews = new BaseInstAttViews
                            {
                                Key = "sideArmId",
                                Value = _mapper.Map<OwnerViewModel>(_dbContext.MV_SIDEARM_VIEW.FirstOrDefault(x => x.Id == MWODU.sideArmId)),
                                Label = "Select sideArm",
                                Options = _mapper.Map<OwnerViewModel>(_dbContext.MV_SIDEARM_VIEW.FirstOrDefault(x => x.Id == MWODU.sideArmId)),
                                DataType = "list",
                                visible = true
                            };
                            Config.Add(baseInstAttViews);

                        }
                        else
                        {
                            BaseInstAttViews baseInstAttViews = new BaseInstAttViews
                            {
                                Key = "sideArmId",
                                Value = null,
                                Label = "Select sideArm",
                                Options = new object[0],
                                DataType = "list",
                                visible = false
                            };
                            Config.Add(baseInstAttViews);
                        }
                        string[] prefixes = new string[]
                        {
                            "installationplaceid",
                            "civilsteeltype",
                            "civilwithleg",
                            "civilwithoutleg",
                            "civilnonsteel",
                            "sidearmid",
                            "mwdishid"
                        };

                        objectInst.installationConfig = Config
                            .OrderBy(x => Array.FindIndex(prefixes, prefix => x.Key.ToLower().StartsWith(prefix)))
                            .ThenBy(x => x.Key);
                    }
                    var InstallationDate = new BaseInstAttViews()
                    {
                        Key = "InstallationDate",
                        Value = MWODU.InstallationDate,
                        DataType = "datetime",
                        Label = "InstallationDate",


                    };
                    Civilload.Add(InstallationDate);
                    var ItemOnCivilStatus = new BaseInstAttViews()
                    {
                        Key = "ItemOnCivilStatus",
                        Value = MWODU.ItemOnCivilStatus,
                        DataType = "string",
                        Label = "ItemOnCivilStatus",


                    };
                    Civilload.Add(ItemOnCivilStatus);
                    var ItemStatus = new BaseInstAttViews()
                    {
                        Key = "ItemStatus",
                        Value = MWODU.ItemStatus,
                        DataType = "string",
                        Label = "ItemStatus",


                    };
                    Civilload.Add(ItemStatus);
                    var ReservedSpace = new BaseInstAttViews()
                    {
                        Key = "ReservedSpace",
                        Value = MWODU.ReservedSpace,
                        DataType = "bool",
                        Label = "ReservedSpace",

                    };
                    Civilload.Add(ReservedSpace);


                    objectInst.InstallationAttributes = ListAttributesActivated;
                    objectInst.CivilLoads = Civilload;
                    objectInst.InstallationAttributes = objectInst.InstallationAttributes.Except(ExeptAttributes).ToList();
                    objectInst.DynamicAttribute = _unitOfWork.DynamicAttInstValueRepository.
                        GetDynamicInstAtt(TableNameEntity.Id, MWInsId, null);

                    return new Response<GetForAddLoadObject>(false, objectInst, null, null, (int)ApiReturnCode.fail);
                }
                else
                {
                    return new Response<GetForAddLoadObject>(false, null, null, "this id is not found", (int)ApiReturnCode.fail);
                }

                return new Response<GetForAddLoadObject>(true, objectInst, null, null, (int)ApiReturnCode.success);
            }
            catch (Exception err)
            {
                return new Response<GetForAddLoadObject>(true, null, null, err.Message, (int)ApiReturnCode.fail);
            }
        }
        #region AddHistory
        //public void AddHistory(TicketAttributes ticketAtt, int allLoadInstId, string historyType)
        //{
        //    if (ticketAtt != null)
        //    {

        //        AddWorkflowHistoryViewModel workflowhistory = _mapper.Map<AddWorkflowHistoryViewModel>(ticketAtt);
        //        workflowhistory.RecordId = allLoadInstId;
        //        workflowhistory.TablesNameId = _unitOfWork.TablesNamesRepository.GetWhereFirst(x => x.TableName == "TLIallLoadInst").Id;
        //        workflowhistory.HistoryTypeId = _unitOfWork.HistoryTypeRepository.GetWhereSelectFirst(x => x.Name == historyType, x => new { x.Id }).Id;
        //        workflowhistory.UserId = 83;
        //        _unitOfWork.WorkflowHistoryRepository.AddWorkflowHistory(workflowhistory);
        //    }
        //    else
        //    {
        //        AddTablesHistoryViewModel history = new AddTablesHistoryViewModel();
        //        history.RecordId = allLoadInstId;
        //        history.TablesNameId = _unitOfWork.TablesNamesRepository.GetWhereFirst(x => x.TableName == "TLIallLoadInst").Id;
        //        history.HistoryTypeId = _unitOfWork.HistoryTypeRepository.GetWhereSelectFirst(x => x.Name == historyType, x => new { x.Id }).Id;
        //        history.UserId = 83;
        //        _unitOfWork.TablesHistoryRepository.AddTableHistory(history);
        //    }
        //}
        #endregion

        public Response<List<InstallationPlaceViewModel>> GetInstallationPlaces(string TableName, string LoadType)
        {
            try
            {
                List<InstallationPlaceViewModel> InstallationPlaces = _mapper.Map<List<InstallationPlaceViewModel>>(_unitOfWork.InstallationPlaceRepository
                    .GetWhere(x => x.Name != "NA" && x.Id != 0 && !x.Deleted && x.Disable == false).ToList());

                if (TableName.ToLower() == TablesNames.TLIcivilWithoutLeg.ToString().ToLower() ||
                    TableName.ToLower() == TablesNames.TLIcivilNonSteel.ToString().ToLower())
                {
                    InstallationPlaceViewModel LegInstallationPlace = InstallationPlaces.FirstOrDefault(x => x.Name.ToLower() == "Leg".ToLower());

                    if (LegInstallationPlace != null)
                        InstallationPlaces.Remove(LegInstallationPlace);
                }
                if (!string.IsNullOrEmpty(LoadType) ? LoadType.ToLower() == TablesNames.TLIpower.ToString().ToLower() : false)
                {
                    InstallationPlaceViewModel LegInstallationPlace = InstallationPlaces.FirstOrDefault(x => x.Name.ToLower() == "Direct".ToLower());

                    if (LegInstallationPlace != null)
                        InstallationPlaces.Remove(LegInstallationPlace);
                }

                return new Response<List<InstallationPlaceViewModel>>(true, InstallationPlaces, null, null, (int)ApiReturnCode.success);
            }
            catch (Exception err)
            {
                return new Response<List<InstallationPlaceViewModel>>(true, null, null, err.Message, (int)ApiReturnCode.fail);
            }
        }
        public Response<List<InstallationPlaceViewModel>> GetInstallationType(string TableName)
        {
            try
            {
                List<InstallationPlaceViewModel> InstallationPlaces = _mapper.Map<List<InstallationPlaceViewModel>>(_unitOfWork.OduInstallationTypeRepository
                    .GetWhere(x => x.Name != "NA" && x.Id != 0 && !x.Deleted && !x.Disable).ToList());

                if (TableName.ToLower() == TablesNames.TLIcivilWithoutLeg.ToString().ToLower() ||
                    TableName.ToLower() == TablesNames.TLIcivilNonSteel.ToString().ToLower())
                {
                    InstallationPlaceViewModel LegInstallationPlace = InstallationPlaces.FirstOrDefault(x => x.Name.ToLower() == "Leg".ToLower());

                    if (LegInstallationPlace != null)
                        InstallationPlaces.Remove(LegInstallationPlace);
                }

                return new Response<List<InstallationPlaceViewModel>>(true, InstallationPlaces, null, null, (int)ApiReturnCode.success);
            }
            catch (Exception err)
            {
                return new Response<List<InstallationPlaceViewModel>>(true, null, null, err.Message, (int)ApiReturnCode.fail);
            }
        }
        public Response<List<MW_PortViewModel>> GetMW_PortsForMW_RFUInstallation(int AllCivilInstId)
        {
            try
            {
                // installed BUs on the selected civil..
                List<int> MW_BUInstallationIds = _unitOfWork.CivilLoadsRepository.GetIncludeWhere(x => x.allCivilInstId == AllCivilInstId &&
                    (x.allLoadInstId != null ? x.allLoadInst.mwBUId != null : false), x => x.allLoadInst).Select(x => x.allLoadInst.mwBUId.Value).ToList();

                List<MW_PortViewModel> MW_PortsOnCivil = _mapper.Map<List<MW_PortViewModel>>(_unitOfWork.MW_PortRepository
                    .GetWhere(x => MW_BUInstallationIds.Contains(x.MwBUId)).ToList());



                return new Response<List<MW_PortViewModel>>(true, MW_PortsOnCivil, null, null, (int)ApiReturnCode.success);
            }
            catch (Exception err)
            {
                return new Response<List<MW_PortViewModel>>(true, null, null, err.Message, (int)ApiReturnCode.fail);
            }
        }
        public Response<List<MW_BULibraryViewModel>> GetMW_BULibrariesForMW_BUInstallation()
        {
            try
            {
                // Get All The MW_BU Libraries That've Been Used As A Port..
                List<int> MW_BULibraryIds = _unitOfWork.MW_PortRepository.GetAllWithoutCount().Select(x => x.MwBULibraryId).ToList();

                // Filter The MW_BU Libraries Depending On The Used Libraries in MW_Port Table..
                List<MW_BULibraryViewModel> MW_BULibraries = _mapper.Map<List<MW_BULibraryViewModel>>(_unitOfWork.MW_BULibraryRepository
                    .GetWhere(x => !x.Deleted && x.Active && !MW_BULibraryIds.Contains(x.Id)).ToList());

                return new Response<List<MW_BULibraryViewModel>>(true, MW_BULibraries, null, null, (int)ApiReturnCode.success);
            }
            catch (Exception err)
            {
                return new Response<List<MW_BULibraryViewModel>>(true, null, null, err.Message, (int)ApiReturnCode.fail);
            }
        }


        public Response<List<MW_Free_BUInstDto>> GetMw_Free_BuInst(int AllCivilInstId)
        {
            try
            {
                var CiviBUs = _dbContext.TLIcivilLoads.Include(x => x.allLoadInst)
                    .ThenInclude(x => x.mwBU).Where(x => x.allCivilInstId == AllCivilInstId && x.allLoadInst.mwBUId != null && !x.Dismantle &&
                        !x.allLoadInst.Draft).Select(x => x.allLoadInst.mwBUId).ToList();

                if (CiviBUs == null || CiviBUs.Count == 0)
                {
                    return new Response<List<MW_Free_BUInstDto>>(false, null, null, "Not found any BU on this civil", (int)ApiReturnCode.success);
                }

                var AllPorts = _dbContext.TLImwPort.Where(x => CiviBUs.Contains(x.MwBUId)).Select(x => x.Id).ToList();

                var UsedPortsOnRFu = _dbContext.TLImwRFU.Include(x => x.MwRFULibrary).Where(x => !x.MwRFULibrary.Deleted && x.MwRFULibrary.Active)
                    .Select(x => x.MwPortId).Distinct().ToList();

                var FreePorts = AllPorts.Where(p => UsedPortsOnRFu.All(p2 => p != p2)).ToList();

                var AvaBUs = _dbContext.TLImwPort.Include(x => x.MwBU).Where(x => FreePorts.Contains(x.Id))
                    .Select(x => x.MwBUId).Distinct().ToList();

                var BUs = _dbContext.TLImwBU.Where(x => AvaBUs.Contains(x.Id)).AsQueryable();

                var AvailableBus = BUs.Select(x => new MW_Free_BUInstDto()
                {
                    BuInstId = x.Id,
                    BuInstName = x.Name
                }).ToList();

                return new Response<List<MW_Free_BUInstDto>>(true, AvailableBus, null, null, (int)ApiReturnCode.success, AvailableBus.Count());
            }
            catch (Exception ex)
            {
                return new Response<List<MW_Free_BUInstDto>>(false, null, null, ex.Message, (int)ApiReturnCode.fail);

            }
        }



        public Response<List<MW_PortViewModel>> GetFreePortOnBU(int BUid)
        {
            try
            {
                var AllPorts = _dbContext.TLImwPort.Where(x => x.MwBUId == BUid).Select(x => x.Id).ToList();
                var AllUsedPorts = _dbContext.TLImwRFU.Include(x => x.MwRFULibrary).Where(x => x.MwRFULibrary.Active == true && x.MwRFULibrary.Deleted == false).Select(x => x.MwPortId).ToList();
                var FreePorts = AllPorts.Where(p => AllUsedPorts.All(p2 => p != p2)).ToList();

                var AvailablePorts = _dbContext.TLImwPort.Where(x => FreePorts.Contains(x.Id)).Select(x => new MW_PortViewModel
                {
                    Id = x.Id,
                    Value = x.Port_Name,
                    MwBUId = x.MwBUId,
                    TX_Frequency = x.TX_Frequency

                }).ToList();
                return new Response<List<MW_PortViewModel>>(true, AvailablePorts, null, null, (int)ApiReturnCode.success);
            }

            catch (Exception ex)
            {
                return new Response<List<MW_PortViewModel>>(false, null, null, ex.Message, (int)ApiReturnCode.fail);

            }
        }
        public Response<List<MW_Free_BUInstDto>> GetMw_Free_Cascade_BuInst(int AllCivilInstId)
        {
            try
            {

                List<int> CiviBUs = _dbContext.TLIcivilLoads.Include(x => x.allLoadInst).ThenInclude(x => x.mwBU)
                    .Where(x => x.allCivilInstId == AllCivilInstId && (x.allLoadInst != null ? x.allLoadInst.mwBUId != null : false))
                    .Select(x => x.allLoadInst.mwBUId.Value).ToList();

                if (CiviBUs == null ? true : CiviBUs.Count() == 0)
                    return new Response<List<MW_Free_BUInstDto>>(false, null, null, "Not found any BU on this civil", (int)ApiReturnCode.success);

                List<int> AllPorts = _dbContext.TLImwPort.Where(x => CiviBUs.Contains(x.MwBUId) && x.Port_Type == 2).Select(x => x.Id).ToList();

                List<int?> UsedPortsOnBu = _dbContext.TLImwBU.Include(x => x.MwBULibrary)
                    .Where(x => !x.MwBULibrary.Deleted && x.MwBULibrary.Active && x.PortCascadeId != 0).Select(x => x.PortCascadeId).Distinct().ToList();

                List<int> FreePorts = AllPorts.Where(p => UsedPortsOnBu.All(p2 => p != p2)).ToList();

                List<int> AvaBUs = _dbContext.TLImwPort.Include(x => x.MwBU).Where(x => FreePorts.Contains(x.Id)).Select(x => x.MwBUId).Distinct().ToList();

                if (AvaBUs != null ? AvaBUs.Count() > 0 : false)
                {
                    int Fport = 0;
                    var BUs = _dbContext.TLImwBU.Where(x => AvaBUs.Contains(x.Id)).ToList();
                    List<MW_Free_BUInstDto> res = new List<MW_Free_BUInstDto>();
                    //MW_Free_BUInstDto
                    foreach (var s in BUs)
                    {
                        MW_Free_BUInstDto item = new MW_Free_BUInstDto();

                        int casPort = _dbContext.TLImwPort.FirstOrDefault(x => x.MwBUId == s.Id && x.Port_Type == 2).Id;
                        item.CascadePortId = casPort != null ? casPort : 0;
                        item.BuInstId = s.Id;
                        item.BuInstName = s.Name;
                        res.Add(item);

                    }


                    return new Response<List<MW_Free_BUInstDto>>(true, res, null, null, (int)ApiReturnCode.success);
                }
                else
                {
                    return new Response<List<MW_Free_BUInstDto>>(false, null, null, "Not Found any avilable Cascade BU", (int)ApiReturnCode.fail);
                }
            }
            catch (Exception ex)
            {
                return new Response<List<MW_Free_BUInstDto>>(false, null, null, ex.Message, (int)ApiReturnCode.fail);
            }
        }
        public Response<List<MW_DishGetForAddViewModel>> GetFreeDishesForMW_ODU(int AllCivilInstId)
        {
            try
            {
                List<int> UsedDishesIds = _unitOfWork.MW_ODURepository.GetWhere(x => x.Mw_DishId != null).Select(x => x.Mw_DishId).ToList();

                List<MW_DishGetForAddViewModel> MW_Dishes = _mapper.Map<List<MW_DishGetForAddViewModel>>(_unitOfWork.CivilLoadsRepository
                    .GetIncludeWhere(x => !x.Dismantle && x.allCivilInstId == AllCivilInstId &&
                        (x.allLoadInstId != null ? x.allLoadInst.mwDishId != null : false) &&
                        !UsedDishesIds.Contains(x.allLoadInst.mwDishId.Value), x => x.allLoadInst, x => x.allLoadInst.mwDish)
                    .Select(x => x.allLoadInst.mwDish).ToList());

                return new Response<List<MW_DishGetForAddViewModel>>(true, MW_Dishes, null, null, (int)ApiReturnCode.success);
            }
            catch (Exception err)
            {
                return new Response<List<MW_DishGetForAddViewModel>>(false, null, null, err.Message, (int)ApiReturnCode.fail);
            }
        }
        public Response<ObjectInstAtts> GetAttForAddForMW_ODUOnly(string TableName, int LibraryID, string SiteCode, int AllCivilInstId)
        {
            try
            {
                TLItablesNames TableNameEntity = _unitOfWork.TablesNamesRepository.GetWhereFirst(x =>
                    x.TableName.ToLower() == TableName.ToLower());

                ObjectInstAtts objectInst = new ObjectInstAtts();
                List<BaseInstAttView> ListAttributesActivated = new List<BaseInstAttView>();

                MW_ODULibraryViewModel mwODULibrary = _mapper.Map<MW_ODULibraryViewModel>(_unitOfWork.MW_ODULibraryRepository
                    .GetIncludeWhereFirst(x => x.Id == LibraryID, x => x.parity));

                List<BaseAttView> LibraryAttributes = _unitOfWork.AttributeActivatedRepository
                    .GetAttributeActivated(TablesNames.TLImwODULibrary.ToString(), mwODULibrary, null).ToList();

                foreach (BaseAttView LibraryAttribute in LibraryAttributes)
                {
                    if (LibraryAttribute.DataType.ToLower() == "list")
                    {
                        LibraryAttribute.Value = mwODULibrary.GetType().GetProperties()
                            .FirstOrDefault(x => x.Name.ToLower() == LibraryAttribute.Label.ToLower()).GetValue(mwODULibrary);
                    }
                }

                List<BaseAttView> LogisticalAttributes = _mapper.Map<List<BaseAttView>>(_unitOfWork.LogistcalRepository
                    .GetLogistical(TablePartName.MW.ToString(), Helpers.Constants.TablesNames.TLImwODULibrary.ToString(), mwODULibrary.Id).ToList());

                LibraryAttributes.AddRange(LogisticalAttributes);

                objectInst.LibraryActivatedAttributes = LibraryAttributes;

                ListAttributesActivated = _unitOfWork.AttributeActivatedRepository.
                    GetInstAttributeActivated(LoadSubType.TLImwODU.ToString(), null, "Name", "MwODULibraryId", "OduInstallationTypeId", "Mw_DishId"/*, "EquivalentSpace"*/).ToList();

                BaseInstAttView NameAttribute = ListAttributesActivated.FirstOrDefault(x => x.Key.ToLower() == "Name".ToLower());
                if (NameAttribute != null)
                {
                    BaseInstAttView Swap = ListAttributesActivated[0];
                    ListAttributesActivated[ListAttributesActivated.IndexOf(NameAttribute)] = Swap;
                    ListAttributesActivated[0] = NameAttribute;
                }
                foreach (BaseInstAttView FKitem in ListAttributesActivated)
                {
                    if (FKitem.Desc.ToLower() == "tliowner")
                        FKitem.Value = _mapper.Map<List<OwnerViewModel>>(_unitOfWork.OwnerRepository.GetWhere(x => !x.Disable && !x.Deleted).ToList());

                    else if (FKitem.Desc.ToLower() == "tlimwdish")
                    {
                        List<int> UsedDishesIds = _unitOfWork.MW_ODURepository.GetWhere(x => x.Mw_DishId != null).Select(x => x.Mw_DishId).ToList();

                        List<MW_DishGetForAddViewModel> MW_Dishes = _mapper.Map<List<MW_DishGetForAddViewModel>>(_unitOfWork.CivilLoadsRepository
                            .GetIncludeWhere(x => !x.Dismantle && x.allCivilInstId == AllCivilInstId &&
                                (x.allLoadInstId != null ? x.allLoadInst.mwDishId != null : false) &&
                                !UsedDishesIds.Contains(x.allLoadInst.mwDishId.Value), x => x.allLoadInst, x => x.allLoadInst.mwDish)
                            .Select(x => x.allLoadInst.mwDish).ToList());

                        FKitem.Value = _mapper.Map<List<MW_DishGetForAddViewModel>>(MW_Dishes);
                    }
                }

                List<KeyValuePair<string, List<DropDownListFilters>>> RelatedTables = _unitOfWork.CivilLoadsRepository.GetRelatedTables(SiteCode);
                objectInst.RelatedTables = RelatedTables;

                objectInst.AttributesActivated = ListAttributesActivated;

                objectInst.CivilLoads = _unitOfWork.AttributeActivatedRepository.
                    GetInstAttributeActivated(TablesNames.TLIcivilLoads.ToString(), null, "allLoadInstId", "Dismantle", "SiteCode", "legId", "Leg2Id",
                        "sideArmId", "allCivilInstId", "civilSteelSupportCategoryId");

                IEnumerable<DynaminAttInstViewModel> DynamicAttributesWithoutValue = _unitOfWork.DynamicAttRepository
                    .GetDynamicInstAtts(TableNameEntity.Id, null);

                foreach (DynaminAttInstViewModel DynamicAttribute in DynamicAttributesWithoutValue)
                {
                    TLIdynamicAtt DynamicAttributeEntity = _unitOfWork.DynamicAttRepository.GetByID(DynamicAttribute.Id);

                    if (!string.IsNullOrEmpty(DynamicAttributeEntity.DefaultValue))
                    {
                        if (DynamicAttribute.DataType.ToLower() == "string".ToLower())
                            DynamicAttribute.ValueString = DynamicAttributeEntity.DefaultValue;

                        else if (DynamicAttribute.DataType.ToLower() == "int".ToLower())
                            DynamicAttribute.ValueDouble = int.Parse(DynamicAttributeEntity.DefaultValue);

                        else if (DynamicAttribute.DataType.ToLower() == "double".ToLower())
                            DynamicAttribute.ValueDouble = double.Parse(DynamicAttributeEntity.DefaultValue);

                        else if (DynamicAttribute.DataType.ToLower() == "boolean".ToLower())
                            DynamicAttribute.ValueBoolean = bool.Parse(DynamicAttributeEntity.DefaultValue);

                        else if (DynamicAttribute.DataType.ToLower() == "datetime".ToLower())
                            DynamicAttribute.ValueDateTime = DateTime.Parse(DynamicAttributeEntity.DefaultValue);
                    }
                    else
                    {
                        DynamicAttribute.ValueString = " ".Split(' ')[0];
                    }
                }

                objectInst.DynamicAtts = DynamicAttributesWithoutValue;

                return new Response<ObjectInstAtts>(objectInst);
            }
            catch (Exception err)
            {
                return new Response<ObjectInstAtts>(true, null, null, err.Message, (int)ApiReturnCode.fail);
            }
        }
    }
}
