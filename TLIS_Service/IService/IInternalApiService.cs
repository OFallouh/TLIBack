using Microsoft.AspNetCore.Http;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion.Internal;
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using TLIS_DAL.Helper;
using TLIS_DAL.Helper.Filters;
using TLIS_DAL.Helpers;
using TLIS_DAL.Models;
using TLIS_DAL.ViewModelBase;
using TLIS_DAL.ViewModels;
using TLIS_DAL.ViewModels.AllCivilInstDTOs;
using TLIS_DAL.ViewModels.CivilLoadsDTOs;
using TLIS_DAL.ViewModels.CivilNonSteelDTOs;
using TLIS_DAL.ViewModels.CivilNonSteelLibraryDTOs;
using TLIS_DAL.ViewModels.CivilWithLegLibraryDTOs;
using TLIS_DAL.ViewModels.CivilWithLegsDTOs;
using TLIS_DAL.ViewModels.CivilWithoutLegDTOs;
using TLIS_DAL.ViewModels.CivilWithoutLegLibraryDTOs;
using TLIS_DAL.ViewModels.DependencyDTOs;
using TLIS_DAL.ViewModels.DynamicAttDTOs;
using TLIS_DAL.ViewModels.DynamicAttInstValueDTOs;
using TLIS_DAL.ViewModels.GeneratorDTOs;
using TLIS_DAL.ViewModels.GeneratorLibraryDTOs;
using TLIS_DAL.ViewModels.LegDTOs;
using TLIS_DAL.ViewModels.LoadPartDTOs;
using TLIS_DAL.ViewModels.MW_BUDTOs;
using TLIS_DAL.ViewModels.MW_BULibraryDTOs;
using TLIS_DAL.ViewModels.MW_DishDTOs;
using TLIS_DAL.ViewModels.MW_DishLbraryDTOs;
using TLIS_DAL.ViewModels.MW_ODUDTOs;
using TLIS_DAL.ViewModels.MW_ODULibraryDTOs;
using TLIS_DAL.ViewModels.Mw_OtherDTOs;
using TLIS_DAL.ViewModels.MW_OtherLibraryDTOs;
using TLIS_DAL.ViewModels.MW_RFUDTOs;
using TLIS_DAL.ViewModels.OtherInSiteDTOs;
using TLIS_DAL.ViewModels.RadioAntennaLibraryDTOs;
using TLIS_DAL.ViewModels.RadioOtherLibraryDTOs;
using TLIS_DAL.ViewModels.RadioRRULibraryDTOs;
using TLIS_DAL.ViewModels.SideArmDTOs;
using TLIS_DAL.ViewModels.SideArmLibraryDTOs;
using TLIS_DAL.ViewModels.SiteDTOs;
using TLIS_DAL.ViewModels.SolarDTOs;
using TLIS_DAL.ViewModels.SolarLibraryDTOs;
using TLIS_DAL.ViewModels.TablesNamesDTOs;

namespace TLIS_Service.IService
{
    public interface IInternalApiService
    {
        Response<GetEnableAttribute> GetAlOtherInventoryonSitebyType(string OtherInventoryTypeName, string SiteCode, string ConnectionString, int? UserId, string UserName);
        Response<GetEnableAttribute> GetConfigurationTables(string siteCode, string TableNameInstallation, string ConnectionString, int? UserId, string UserName);
        Response<LoadsDtoInternal> GetAllLoadonSitebyPartandType(String SiteCode, string PartName, string TypeName, int? UserId, string UserName);
        Response<List<ListOfCivilLoads>> GetAllItemsonSite(string SiteCode, int? UserId, string UserName);
        Response<List<BassAttViewModel>> GetConfigurationAttributes(string TableName, bool IsDynamic, int? UserId, string UserName);
        Response<List<GetForAddCivilLoadObject>> GetSideArmsBySiteCode(string SiteCode, string CivilType, string CivilName, int? LegId, float? MinAzimuth, float? MaxAzimuth, float? MinHeightBase, float? MaxHeightBase, int? UserId, string UserName);
        Response<GetEnableAttribute> GetLibraryforSpecificType(string ConnectionString, string TableNameLibrary, int? UserId, string UserName);
        Response<IEnumerable<SiteViewModel>> GetAllSitesDetails(ParameterPagination parameterPagination, List<FilterObjectList> filters = null);
              
        Response<AddDependencyInstViewModel> AddDynamicAttInst(AddDependencyInstViewModel addDependencyInstViewModel, string ConnectionString);
        Response<AddDependencyViewModel> AddDynamicAtts(AddDependencyViewModel addDependencyViewModel, string ConnectionString);
        Task<Response<DynamicAttViewModel>> Edit(EditDynamicAttViewModel dynamicAttViewModel);
        Response<AllItemAttributes> AddRadioLibrary(string TableName, object RadioLibraryViewModel, string connectionString);
        Response<AllAtributes> GetForAddRadioLibrary(string TableName);
        Response<ObjectAttributeInst> GetAttForAddRadioInstallation(string TableName, int LibId, string SiteCode);
        //Response<ObjectInstAtts> AddRadioInstallation(object RadioInstallationViewModel, string TableName, string SiteCode, string ConnectionString, int TaskId);
        Response<string> AttachFile(IFormFile file, int documenttypeId, string Model, string Name, string SiteCode, string RecordId, string TableName, string connection, string AttachFolder, string asset);
        Response<ObjectInstAtts> AddMWInstallation(object MWInstallationViewModel, string TableName, string SiteCode, string ConnectionString, int TaskId);
        string CheckGeneralValidationFunctions(List<AddDynamicAttInstValueViewModel> TLIdynamicAttInstValue, string TableName);
        Task<Response<ObjectInstAtts>> EditMWInstallation(object MWInstallationViewModel, string TableName, int TaskId);
        Response<bool> DismantleLoads(string sitecode, int LoadId, string LoadName, int TaskId);
        Response<ObjectInstAttsForSideArm> GetByIdMWInstallation(int MWInsId, string TableName);
        Response<ObjectInstAtts> GetAttForAddMwInst(string TableName, int LibraryID, string SiteCode);
        string CheckDependencyValidationForMWTypess(object Input, string MWType, string SiteCode);
        string CheckGeneralValidationFunctionEditVersion(List<BaseInstAttView> TLIdynamicAttInstValue, string TableName);
        string CheckDependencyValidationEditVersion(object Input, string SiteCode, string MWName);
        Response<ReturnWithFilters<object>> GetMW_DishOnSiteWithEnableAtt(LoadsOnSiteFilter BaseFilter, bool WithFilterData, CombineFilters CombineFilters, ParameterPagination parameterPagination, int? CivilId, string CivilType);
        Response<ReturnWithFilters<object>> GetMW_BUOnSiteWithEnableAtt(LoadsOnSiteFilter BaseFilter, bool WithFilterData, CombineFilters CombineFilters, ParameterPagination parameterPagination, int? CivilId, string CivilType);
        Response<ReturnWithFilters<object>> GetMW_ODUOnSiteWithEnableAtt(LoadsOnSiteFilter BaseFilter, bool WithFilterData, CombineFilters CombineFilters, ParameterPagination parameterPagination, int? CivilId, string CivilType);
        Response<ReturnWithFilters<object>> GetMW_RFUOnSiteWithEnableAtt(LoadsOnSiteFilter BaseFilter, bool WithFilterData, CombineFilters CombineFilters, ParameterPagination parameterPagination, int? CivilId, string CivilType);
        Response<ReturnWithFilters<object>> GetMW_OtherOnSiteWithEnableAtt(LoadsOnSiteFilter BaseFilter, bool WithFilterData, CombineFilters CombineFilters, ParameterPagination parameterPagination, int? CivilId, string CivilType);
        Task<Response<ObjectInstAtts>> EditOtherInventoryInstallation(object model, string TableName, int TaskId);
        List<TLIcivilLoads> GetCivilLoadsWithConditions(CivilLoadsFilter BaseFilter, CombineFilters CombineFilters);
        Response<ObjectInstAtts> GetByIdOtherInventoryInstallation(int OtherInventoryInsId, string TableName);
        Response<ReturnWithFilters<object>> GetSolarBySiteWithEnabledAtt(SiteBaseFilter BaseFilter, bool WithFilterData, CombineFilters CombineFilters, ParameterPagination parameterPagination);
        Response<ReturnWithFilters<object>> GetGeneratorBySiteWithEnabledAtt(SiteBaseFilter BaseFilter, bool WithFilterData, CombineFilters CombineFilters, ParameterPagination parameterPagination);
        Response<ObjectInstAtts> AddOtherInventoryInstallation(object model, string TableName, string SiteCode, string ConnectionString, int TaskId);
        string CheckGeneralValidationFunctionss(List<AddDynamicAttInstValueViewModel> TLIdynamicAttInstValue, string TableName);
        string CheckDependencyValidation(object Input, string OtherInventoryType, string SiteCode);
        List<TLIotherInSite> GetOtherInSiteBySiteBaseFilters(SiteBaseFilter BaseFilter, string Kind, CombineFilters CombineFilters, string LibraryType);
        Response<ObjectInstAtts> GetAttForAddOtherInventoryInstallation(string TableName, string CabinetLibraryType, int OtherInventoryId, string SiteCode);
        Response<ReturnWithFilters<object>> GetSideArmsWithEnabledAtt(CivilLoadsFilter BaseFilter, bool WithFilterData, ParameterPagination parameterPagination, CombineFilters CombineFilters, int? CivilId, string CivilType);
        Response<AllItemAttributes> AddSideArm(AddSideArmViewModel SideArmViewModel, string SiteCode, string ConnectionString, int TaskId);
        Response<ObjectInstAttsForSideArm> GetSideArmById(int SideArmId, string TableName);
        Task<Response<AllItemAttributes>> UpdateSideArm(EditSideArmViewModel SideArmViewModel, int TaskId);
        List<TLIcivilLoads> GetMaxInstallationDate(List<TLIcivilLoads> Copy);
        string CheckDependencyValidationForSideArm(object Input, string SiteCode);
        Response<ObjectInstAtts> GetAttForAddSideArm(int LibraryId);
        Response<bool> DismantleSideArm(string SiteCode, int sideArmId, int TaskId);
        string CheckDependencyValidationEditVersion(object Input, string SiteCode);
        Response<ReturnWithFilters<object>> GetMW_BULibraries(CombineFilters CombineFilters, bool WithFilterData, ParameterPagination parameterPagination);

        Response<ReturnWithFilters<object>> GetMW_DishLibraries(CombineFilters CombineFilters, bool WithFilterData, ParameterPagination parameterPagination);
        Response<ReturnWithFilters<object>> GetMW_ODULibraries(CombineFilters CombineFilters, bool WithFilterData, ParameterPagination parameterPagination);
        Response<ReturnWithFilters<object>> GetMW_RFULibraries(CombineFilters CombineFilters, bool WithFilterData, ParameterPagination parameterPagination);
        Response<AllItemAttributes> AddOtherInventoryLibrary(string TableName, object OtherInventoryLibraryViewModel, string connectionString);
        Response<bool> DismantleOtherInventory(string SiteCode, int OtherInventoryId, string OtherInventoryName, int TaskId);
        string CheckDependencyValidationForOtherInventoryTypess(object Input, string OtherInventoryType);
        Response<ReturnWithFilters<object>> GetCivilWithLegLibrariesEnabledAtt(CombineFilters CombineFilters, bool WithFilterData, ParameterPagination parameterPagination);
        Response<ReturnWithFilters<object>> GetCivilWithoutLegLibrariesEnabledAtt(CombineFilters CombineFilters, bool WithFilterData, int CategoryId, ParameterPagination parameterPagination);
        Response<ReturnWithFilters<object>> GetCivilNonSteelLibrariesEnabledAtt(CombineFilters CombineFilters, bool WithFilterData, ParameterPagination parameterPagination);
        Response<AllItemAttributes> AddCivilLibrary(string TableName, object CivilLibraryViewModel, string connectionString);
        string CheckGeneralValidationFunction(List<AddDynamicLibAttValueViewModel> TLIdynamicAttLibValue, string TableName, int? catid = null);
        string CheckDependencyValidationForCivilTypess(object Input, string CivilType, int? catid = null);
        void AddLogisticalItemWithCivil(dynamic LogisticalItemIds, dynamic CivilEntity, int TableNameEntityId);
        Response<ReturnWithFilters<object>> GetMW_OtherLibraries(CombineFilters CombineFilters, ParameterPagination parameterPagination);
        public Response<AllItemAttributes> AddMWLibrary(string TableName, object LoadLibraryViewModel, string connectionString);
        Response<SideArmLibraryViewModel> AddSideArmLibrary(AddSideArmLibraryViewModel addSideArmLibraryViewModel, string connectionString);
        void AddLogisticalItemWithSideArm(dynamic LogisticalItemIds, dynamic SideArmEntity, int TableNameEntityId);
        string CheckDependencyValidationForSideArm(object Input);
        Response<ReturnWithFilters<object>> GetCabinetPowerLibraryEnabledAtt(CombineFilters CombineFilters, bool WithFilterData, ParameterPagination parameterPagination);
        Response<ReturnWithFilters<object>> GetCabinetTelecomLibraryEnabledAtt(CombineFilters CombineFilters, bool WithFilterData, ParameterPagination parameterPagination);
        Response<ReturnWithFilters<object>> GetSolarLibraryEnabledAtt(CombineFilters CombineFilters, bool WithFilterData, ParameterPagination parameterPagination);
        Response<ReturnWithFilters<object>> GetGeneratorLibraryEnabledAtt(CombineFilters CombineFilters, bool WithFilterData, ParameterPagination parameterPagination);
        Response<AllItemAttributes> GetForAddAllLibrary(string TableName, int? CategoryId = null);
        void AddLogisticalItemWithMW(dynamic LogisticalItemIds, dynamic MWLibraryEntity, int TableNameEntityId);
        string CheckDependencyValidationForMWTypesss(object Input, string MWType);
        Response<ReturnWithFilters<object>> GetSideArmLibrariesWithEnabledAttributes(CombineFilters CombineFilters, ParameterPagination parameterPagination);
        string CheckDependencyValidationForMWTypees(object Input, string MWType);
        Response<ObjectInst> GetAttForAddCivilInstallation(string TableName, int CivilLibraryId, int? CategoryId, string SiteCode);
        Response<ObjectInstAtts> AddCivilInstallation(object CivilInstallationViewModel, string CivilType, string SiteCode, string connectionString, int TaskId);
        Task<Response<ObjectInstAtts>> EditCivilInstallation(object CivilInstallationViewModel, string CivilType, int TaskId);
        Response<ObjectInstAtts> GetCivilInstallationById(int CivilInsId, string CivilType);
        Response<bool> DismantleCivil(string SiteCode, int CivilId, string CivilName, int TaskId);
        Response<ReturnWithFilters<object>> GetCivilNonSteelWithEnableAtt(string siteCode, bool WithFilterData, CombineFilters CombineFilters, ParameterPagination parameterPagination);
        Response<ReturnWithFilters<object>> GetCivilWithoutLegWithEnableAtt(string siteCode, bool WithFilterData, CombineFilters CombineFilters, ParameterPagination parameterPagination, int CategoryId);
        Response<ReturnWithFilters<object>> GetCivilWithLegsWithEnableAtt(string siteCode, bool WithFilterData, CombineFilters CombineFilters, ParameterPagination parameterPagination);
        //----------------------------------------------------------------------------------------------------------------------------------
        Response<AddRadioRRULibraryObject> AddRadioRRULibrary(string TableName, AddRadioRRULibraryObject RadioLibraryViewModel, string connectionString, int? UserId, string? UserName);
        Response<AddRadioOtherLibraryObject> AddRadioOtherLibrary(string TableName, AddRadioOtherLibraryObject addRadioOtherLibraryObject, string connectionString, int? UserId, string? UserName);
        Response<AddRadioAntennaLibraryObject> AddRadioAntennaLibrary(string TableName, AddRadioAntennaLibraryObject RadioLibraryViewModel, string connectionString, int? UserId, string? UserName);
        Response<GetForAddMWDishInstallationObject> AddRadioInstallationInternal(object RadioInstallationViewModel, string TableName, string SiteCode, string ConnectionString, int? TaskId, int? UserId, string UserName);

        Response<GetForAddMWDishInstallationObject> AddMWInstallationInternal (int? UserId, object MWInstallationViewModel, string TableName, string SiteCode, string ConnectionString, int? TaskId, string UserName);
        Task<Response<GetForAddMWDishInstallationObject>> EditMWBUInstallation(int? UserId, EditMWBUInstallationObject MWInstallationViewModel, string TableName, int? TaskId, string ConnectionString, string UserName);
        Task<Response<GetForAddMWDishInstallationObject>> EditMWOtherInstallation(int? UserId, EditMWOtherInstallationObject editmwOtherInstallationObject, string TableName, int? TaskId, string ConnectionStringstring,string UserName);
        Task<Response<GetForAddMWDishInstallationObject>> EditMWODUInstallation(int? UserId, EditMWODUInstallationObject MWInstallationViewModel, string TableName, int? TaskId, string ConnectionString, string UserName);
        Task<Response<GetForAddMWDishInstallationObject>> EditMWDishInstallation(int? UserId, EditMWDishInstallationObject MWInstallationViewModel, string TableName, int? TaskId, string ConnectionStringstring,string UserName);
        Task<Response<GetForAddMWDishInstallationObject>> EditMWRFUInstallation(EditMWRFUInstallationObject editMWRFUInstallationObject, string TableName, string ConnectionString, int? TaskId, int? UserId, string UserName);
        Response<bool> DismantleLoadsInternal(string sitecode, int LoadId, string LoadName, int? TaskId, int? UserId, string connectionString, string UserName);
        Response<bool> DismantleSideArmInternal(string SiteCode, int sideArmId, int? TaskId, string ConnectionString, int? UserId, string? UserName);
        Response<AddGeneratorInstallationObject> AddGeneratorInstallation(AddGeneratorInstallationObject addGeneratorInstallationObject, string SiteCode, string ConnectionString, int? TaskId, int? UserId, string UserName);
        Response<AddSolarInstallationObject> AddSolarInstallation(AddSolarInstallationObject addSolarInstallationObject, string SiteCode, string ConnectionString, int? TaskId, int? UserId, string UserName);
        Task<Response<GetForAddOtherInventoryInstallationObject>> EditOtherInventoryInstallationInternal(object model, string TableName, int? TaskId, int? UserId, string connectionString, string UserName);
        Response<bool> DismantleOtherInventoryInternal(int? UserId, string SiteCode, int OtherInventoryId, string OtherInventoryName, int? TaskId, string ConnectionString, string UserName);
        Task<Response<EditSidearmInstallationObject>> UpdateSideArmInternal(EditSidearmInstallationObject SideArmViewModel, int? TaskId, int? UserId, string ConnectionString, string UserName);
        Response<SideArmViewDto> AddSideArmInternal(SideArmViewDto addSideArms, string SiteCode, int? TaskId, int? UserId, string ConnectionString, string UserName);
        Response<ObjectInstAtts> AddCivilNonSteelInstallation(AddCivilNonSteelObject addCivilNonSteelObject, string TableName, string SiteCode, string connectionString, int? TaskId, int? UserId, string UserName);
        Response<AddCivilNonSteelLibraryObject> AddCivilNonSteelLibrary(string TableName, AddCivilNonSteelLibraryObject AddCivilNonSteelLibraryObject, string connectionString, int? UserId, string UserName);
        Response<AddSolarLibraryObject> AddSolarLibrary(int? UserId, string TableName, AddSolarLibraryObject addSolarLibraryObject, string connectionString, string UserName);
        Response<AddGeneratorLibraryObject> AddGenertatoLibrary(int? UserId, string TableName, AddGeneratorLibraryObject addGeneratorLibraryObject, string connectionString, string UserName);

        Response<AddMWDishLibraryObject> AddMWDishLibrary(int? UserId, string TableName, AddMWDishLibraryObject addMWDishLibraryObject, string connectionString, string UserName);
        Response<ADDMWODULibraryObject> AddMWODULibrary(int? UserId, string TableName, ADDMWODULibraryObject aDDMWODULibraryObject, string connectionString, string UserName);
        Response<AddMWBULibraryObject> AddMWBULibrary(int? UserId, string TableName, AddMWBULibraryObject addMWBULibraryObject, string connectionString, string UserName);
        Response<AddMWOtherLibraryObject> AddMWOtherLibrary(int? UserId, string TableName, AddMWOtherLibraryObject addMWOtherLibraryObject, string connectionString, string UserName);
        Response<AddMWRFULibraryObject> AddMWRFULibrary(int? UserId, string TableName, AddMWRFULibraryObject addMWRFULibraryObject, string connectionString, string UserName);
        Response<AddCivilWithoutLegsLibraryObject> AddCivilWithoutLegsLibrary(string TableName, AddCivilWithoutLegsLibraryObject AddCivilWithoutLegsLibraryObject, string connectionString, int? UserId, string UserName);
        Response<AddCivilWithLegsLibraryObject> AddCivilWithLegsLibrary(string TableName, AddCivilWithLegsLibraryObject AddCivilWithLegsLibraryObject, string connectionString, int? UserId, string UserName);
        Response<ObjectInstAtts> AddCivilWithLegsInstallation(AddCivilWithLegsViewModel AddCivilWithLegsViewModel, string TableName, string SiteCode, string connectionString, int? TaskId, int? UserId, string UserName);
        Response<ObjectInstAtts> AddCivilWithoutLegsInstallation(AddCivilWithoutLegViewModel addCivilWithoutLegViewModel, string TableName, string SiteCode, string connectionString, int? TaskId, int? UserId, string UserName);
        Task<Response<ObjectInstAtts>> EditCivilNonSteelInstallation(EditCivilNonSteelInstallationObject editCivilNonSteelInstallationObject, string CivilType, int? TaskId, int? userId, string connectionString, string UserName);
        Task<Response<ObjectInstAtts>> EditCivilWithoutLegsInstallation(EditCivilWithoutLegsInstallationObject editCivilWithoutLegsInstallationObject, string CivilType, int? TaskId, int? userId, string connectionString, string UserName);
        Task<Response<ObjectInstAtts>> EditCivilWithLegsInstallation(EditCivilWithLegsInstallationObject editCivilWithLegsInstallationObject, string CivilType, int? TaskId, int? userId, string connectionString, string UserName);
        Response<bool> DismantleCivilWithLegsInstallation(int? UserId, string SiteCode, int CivilId, int? TaskId, string connectionString, string UserName);
        Response<bool> DismantleCivilWithoutLegsInstallation(int? UserId, string SiteCode, int CivilId, int? TaskId, string connectionString, string UserName);
        Response<bool> DismantleCivilNonSteelInstallation(int? UserId, string SiteCode, int CivilId, int? TaskId, string connectionString, string UserName);
        Response<GetEnableAttribute> GetCivilNonSteelWithEnableAttInternal(string? SiteCode, string ConnectionString, int? UserId, string UserName);
        Response<GetEnableAttribute> GetCivilWithoutLegMastWithEnableAttInternal(string? SiteCode, string ConnectionString, int? UserId, string UserName);
        Response<GetEnableAttribute> GetCivilWithoutLegCapsuleWithEnableAttInternal(string? SiteCode, string ConnectionString, int? UserId, string UserName);
        Response<GetEnableAttribute> GetCivilWithoutLegMonopoleWithEnableAttInternal(string? SiteCode, string ConnectionString, int? UserId, string UserName);
        Response<GetEnableAttribute> GetCivilWithLegsWithEnableAttInternal(string? SiteCode, string ConnectionString, int? UserId, string UserName);
        Response<GetForAddLoadObject> GetMWDishInstallationById(int MWInsId, string TableName, int? UserId, string UserName);
        Response<GetForAddLoadObject> GetMWBUInstallationById(int MWInsId, string TableName, int? UserId, string UserName);
        Response<GetForAddLoadObject> GetMWRFUInstallationById(int MWInsId, string TableName, int? UserId, string UserName);

        Response<GetForAddLoadObject> GetMWODUInstallationById(int MWInsId, string TableName, int? UserId, string UserName);
        Response<GetForAddLoadObject> GetMWOtherInstallationById(int MWOtherId, string TableName, int? UserId, string UserName);
        Response<GetForAddMWDishInstallationObject> GetAttForAddMWDishInstallation(string TableName, int LibraryID, string SiteCode, int? UserId, string UserName);
        Response<GetForAddMWDishInstallationObject> GetAttForAddMWBUInstallation(string TableName, int LibraryID, string SiteCode, int? UserId, string UserName);
        Response<GetForAddMWDishInstallationObject> GetAttForAddMWOtherInstallation(string TableName, int LibraryID, string SiteCode, int? UserId, string UserName);

        Response<GetForAddMWDishInstallationObject> GetAttForAddMWRFUInstallation(string TableName, int LibraryID, string SiteCode, int? UserId, string UserName);
        Response<GetForAddMWDishInstallationObject> GetAttForAddMWODUInstallation(string TableName, int LibraryID, string SiteCode, int? UserId, string UserName);
        Response<GetEnableAttribute> GetMWDishInstallationWithEnableAtt(string? SiteCode, string ConnectionString, int? UserId, string UserName);
        Response<GetEnableAttribute> GetMWOtherInstallationWithEnableAtt(string? SiteCode, string ConnectionString, int? UserId, string UserName);
        Response<GetEnableAttribute> GetMWRFUInstallationWithEnableAtt(string? SiteCode, string ConnectionString, int? UserId, string UserName);
        Response<GetEnableAttribute> GetMWODUInstallationWithEnableAtt(string? SiteCode, string ConnectionString, int? UserId, string UserName);
        Response<GetEnableAttribute> GetMWBUInstallationWithEnableAtt(string? SiteCode, string ConnectionString, int? UserId, string UserName);
        Response<AllCivilInstallation> GetCivilsBySiteCode(string siteCode, string ConnectionString, int? UserId, string UserName);
        Response<GetForAddCivilLibrarybject> GetForAddRadioLibrary(string TableName, int? UserId, string UserName);
        Response<GetForAddMWDishInstallationObject> GetAttForAddRadioAntennaInstallation(int LibraryID, string SiteCode, int? UserId, string UserName);
        Response<GetForAddMWDishInstallationObject> GetAttForAddRadioOtherInstallation(int LibraryID, string SiteCode, int? UserId, string UserName);
        Response<GetForAddMWDishInstallationObject> GetAttForAddRadioRRUInstallation(int LibraryID, string SiteCode, int? UserId, string UserName);
        Response<GetForAddOtherInventoryInstallationObject> GetAttForAddCabinetPowerInstallation(string TableName, int LibraryID, string SiteCode, int? UserId, string UserName);
        Response<GetForAddOtherInventoryInstallationObject> GetAttForAddCabinetTelecomInstallation(string TableName, int LibraryID, string SiteCode, int? UserId, string UserName);
        Response<GetForAddOtherInventoryInstallationObject> GetAttForAddSolarInstallation(string TableName, int LibraryID, string SiteCode, int? UserId, string UserName);
        Response<GetForAddOtherInventoryInstallationObject> GetAttForAddGeneratorInstallation(string TableName, int LibraryID, string SiteCode, int? UserId, string UserName);
        Response<GetForAddOtherInventoryInstallationObject> GetSolarInstallationById(int SolarId, string TableName, int? UserId, string UserName);
        Response<GetForAddOtherInventoryInstallationObject> GetGenertorInstallationById(int GeneratorId, string TableName, int? UserId, string UserName);
        Response<GetEnableAttribute> GetSolarWithEnableAtt(string? SiteCode, string ConnectionString, int? UserId, string UserName);
        Response<GetEnableAttribute> GetGeneratorWithEnableAtt(string? SiteCode, string ConnectionString, int? UserId, string UserName);
        Response<GetForAddLoadObject> GetSideArmByInternalId(int Id, string TableName, int? UserId, string UserName);
        Response<GetEnableAttribute> GetSideArmInstallationWithEnableAtt(string? SiteCode, string ConnectionString, int? UserId, string UserName);
        Response<GetForAddCivilLoadObject> GetAttForAddSideArm(int LibraryId, int? UserId, string UserName);
        Response<GetEnableAttribute> GetCivilWithLegLibrariesEnabledAtt(string ConnectionString, int? UserId, string UserName);
        Response<GetEnableAttribute> GetCivilWithoutLegCapsuleLibrariesEnabledAtt(string ConnectionString, int? UserId, string UserName);
        Response<GetEnableAttribute> GetCivilWithoutLegMonopoleLibrariesEnabledAtt(string ConnectionString, int? UserId, string UserName);
        Response<GetEnableAttribute> GetCivilWithoutLegMastLibrariesEnabledAtt(string ConnectionString, int? UserId, string UserName);
        Response<GetEnableAttribute> GetCivilNonSteelLibrariesEnabledAtt(string ConnectionString, int? UserId, string UserName);
        Response<GetForAddCivilLibrarybject> GetForAddMWLibrary(string TableName, int? UserId, string UserName);
        Response<GetEnableAttribute> GetMWODULibrariesEnabledAtt(string ConnectionString, int? UserId, string UserName);
        Response<GetEnableAttribute> GetMWOtherLibrariesEnabledAtt(string ConnectionString, int? UserId, string UserName);
        Response<GetEnableAttribute> GetMWBULibrariesEnabledAtt(string ConnectionString, int? UserId, string UserName);
        Response<GetEnableAttribute> GetMWRFULibrariesEnabledAtt(string ConnectionString, int? UserId, string UserName);
        Response<GetEnableAttribute> GetMWDishLibrariesEnabledAtt(string ConnectionString, int? UserId, string UserName);
        Response<GetForAddCivilLibrarybject> GetForAddCivilWithoutCapsuleLibrary(string TableName, int? UserId, string UserName);
        Response<GetForAddCivilLibrarybject> GetForAddCivilWithoutMonopleLibrary(string TableName, int? UserId, string UserName);
        Response<GetForAddCivilLibrarybject> GetForAddCivilWithoutMastLibrary(string TableName, int? UserId, string UserName);
        Response<GetForAddCivilLibrarybject> GetForAddCivilLibrary(string TableName, int? UserId, string UserName);
        Response<GetEnableAttribute> GetSolarLibrariesEnabledAtt(string ConnectionString, int? UserId, string UserName);
        Response<GetEnableAttribute> GetGeneratorLibrariesEnabledAtt(string ConnectionString, int? UserId, string UserName);
        Response<GetForAddCivilWithOutLegInstallationcs> GetForAddCiviNonSteelInstallation(string TableName, int CivilLibraryId, string SiteCode, int? UserId, string UserName);
        Response<GetForAddCivilWithOutLegInstallationcs> GetForAddCivilWithOutLegInstallation_Monople(string TableName, int CivilLibraryId, string SiteCode, int? UserId, string UserName);
        Response<GetForAddCivilWithOutLegInstallationcs> GetForAddCivilWithOutLegInstallation_Capsule(string TableName, int CivilLibraryId, string SiteCode, int? UserId, string UserName);
        Response<GetForAddCivilWithOutLegInstallationcs> GetForAddCivilWithOutLegInstallation_Mast(string TableName, int CivilLibraryId, string SiteCode, int? UserId, string UserName);
        Response<GetForAddCivilWithLegObject> GetForAddCivilWithLegInstallation(string TableName, int CivilLibraryId, string SiteCode, int? UserId, string UserName);
        Response<GetForAddCivilWithOutLegInstallationcs> GetCivilNonSteelInstallationById(int CivilInsId, string TableName, int? UserId, string UserName);
        Response<GetForAddCivilWithOutLegInstallationcs> GetCivilWithoutLegsInstallationById(int CivilInsId, string TableName, int CategoryId, int? UserId, string UserName);
        Response<GetForAddCivilWithLegObject> GetCivilWithLegsInstallationById(int CivilInsId, string TableName, int? UserId, string UserName);
        Response<GetForAddMWDishInstallationObject> AddMWRFUInstallation(object AddMWRFUInstallation, string TableName, string SiteCode, string ConnectionString, int? TaskId, int? UserId, string UserName);
        Response<AddDynamicObject> AddDynamicInternal(AddDynamicObject addDynamicObject, string connectionString, string TabelName, int? UserId, int? CategoryId, string UserName);
        Task<Response<AddDynamicObject>> EditDynamicAttribute(int DynamicAttributeId, AddDynamicObject DynamicAttViewModel, int? UserId, string connectionString, string UserName);
        Response<GetEnableAttribute> GetRadioOtherLibrariesEnabledAtt(string ConnectionString, int? UserId, string UserName);
        Response<GetEnableAttribute> GetRadioRRULibrariesEnabledAtt(string ConnectionString, int? UserId, string UserName);
        Response<GetEnableAttribute> GetRadioAntennaLibrariesEnabledAtt(string ConnectionString, int? UserId, string UserName);
        Response<CivilLoads> GetRelationshipBetweenloads(int LoadId, string Loadname, string sitecode, int? UserId, string UserName);
        Response<CheckLoadAndSideArmOnCivil> GetLoadsAndSideArmsForCivil(int CivilId, string CivilType, int? UserId, string UserName);

        Response<GetForAddCivilLibrarybject> GetForAddOtherInventoryLibrary(string TableName, int? UserId, string UserName);
        Response<AddDynamicObject> GetDynamicLibraryById(int id, int? UserId, string UserName);
        Response<GetForAddDynamicAttribute> GeStaticAttsAndDynamicAttsByTableName(string TabelName, bool IsLibrary, int? CategoryId, int? UserId, string UserName);
        Response<ReturnWithFilters<DynamicAttViewModel>> GetDynamicAttsByTableName(List<FilterObjectList> filters, ParameterPagination parameters, string TableName, int? CategoryId, int? UserId, string UserName);
        Response<CivilLoads> GetLoadsOnSideArm(int SideArmId, int? UserId, string UserName);
        Response<GetEnableAttribute> GetSideArmLibrariesEnabledAtt(string ConnectionStringint, int? UserId, string UserName);
        Response<List<LegViewModel>> GetLegsByCivilId(int? UserId, string UserName, int CivilId);
    }

}
